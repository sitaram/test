/* _GlobalPrefix_ */
/* _Module_:quantum */
try{
var $googDebugFname="googledata/html/templates/gws/head/xjs/debug/transpiler/bootstrap.js";
eval("\x27use strict\x27;\n\n/**\n * @fileoverview This file detects whether the current browser supports all\n * language features used by uncompiled GWS JavaScript. If not, it redirects the\n * browser to download transpiled JavaScript.\n */\n\n/**\n * @define {boolean} Whether this module set has been transpiled to a version\n * of JavaScript that all browsers are expected to support. This is set to true\n * by GwsOptionsGenerator, so will only be false in uncompiled JS served by MSS.\n */\nvar GWS_TRANSPILED \x3d false;\n\nGWS_TRANSPILED || (function() {\n  var transpiler \x3d {};\n\n  /**\n   * @param {string} deb The value of the \x27deb\x27 CGI parameter.\n   * @return {string} The parameter value with the JS debug level set to debug\n   *     unobfuscated.\n   */\n  transpiler.setDebugUnobfuscated \x3d function(deb) {\n    var JS_DEBUG_LEVEL \x3d \x27j\x27;\n    var DEBUG_UNOBFUSCATED \x3d \x272\x27;\n\n    // Tokenizes the \x27deb\x27 parameter and sets the JS debug level to debug\n    // unobfuscated, e.g. \x270j3gsa\x27 becomes [\x27\x27, \x270\x27, \x27j\x27, \x272\x27, \x27gsa\x27, \x27\x27].\n    var tokens \x3d [];\n    var containsJsDebugLevel \x3d false;\n    deb.replace(/([a-z]*)(\\d*)/gi, function(_, name, value) {\n      if (name \x3d\x3d JS_DEBUG_LEVEL) {\n        value \x3d DEBUG_UNOBFUSCATED;\n        containsJsDebugLevel \x3d true;\n      }\n      if (name || value) {\n        tokens.push(name, value);\n      }\n    });\n\n    // Appends the JS debug level if it wasn\x27t already present.\n    if (!containsJsDebugLevel) {\n      var length \x3d tokens.length;\n      if (length \x26\x26 !tokens[length - 1]) {\n        tokens[length - 1] \x3d \x271\x27;\n      }\n      tokens.push(JS_DEBUG_LEVEL, DEBUG_UNOBFUSCATED);\n    }\n\n    return tokens.join(\x27\x27);\n  };\n\n  /**\n   * @param {string} cgiString The value of location.search.\n   * @return {string} The value to be assigned to location.search which will\n   *     redirect the browser to download a page that references transpiled JS.\n   */\n  transpiler.redirectToTranspiledJs \x3d function(cgiString) {\n    var pattern \x3d /([?\x26]deb\x3d)([^\x26]*)/;\n    var match \x3d cgiString.match(pattern);\n\n    if (match) {\n      var debValue \x3d transpiler.setDebugUnobfuscated(match[2]);\n      return cgiString.replace(pattern, \x27$1\x27 + debValue);\n    } else {\n      var prefix \x3d cgiString ? \x27\x26\x27 : \x27?\x27;\n      return cgiString + prefix + \x27deb\x3d\x27 + transpiler.setDebugUnobfuscated(\x270\x27);\n    }\n  };\n\n  /**\n   * @return {boolean} Whether this JS execution environment supports ES6.\n   */\n  var supportsEs6 \x3d function() {\n    // Copied from javascript/closure/base.js.\n    var es6fullTest \x3d \x27(()\x3d\x3e{\x22use strict\x22;\x27 +\n        \x27class X{constructor(){if(new.target!\x3dString)throw 1;this.x\x3d42}}\x27 +\n        \x27let q\x3dReflect.construct(X,[],String);if(q.x!\x3d42||!(q instanceof \x27 +\n        \x27String))throw 1;for(const a of[2,3]){if(a\x3d\x3d2)continue;function \x27 +\n        \x27f(z\x3d{a}){let a\x3d0;return z.a}{function f(){return 0;}}return f()\x27 +\n        \x27\x3d\x3d3}})()\x27;\n    try {\n      return !!eval(es6fullTest);\n    } catch (ignored) {\n      return false;\n    }\n  };\n\n  // Since this file is not a module, it cannot be directly imported or required\n  // by the test, so instead we export testable functions on the global object.\n  var global \x3d Function(\x27return this\x27)();\n  if (global.isGwsTranspilerTest) {\n    global.gwsTranspiler \x3d transpiler;\n  } else if (!supportsEs6()) {\n    var transpiledSearch \x3d transpiler.redirectToTranspiledJs(location.search);\n    if (location.search !\x3d transpiledSearch) {\n      alert(\n          \x27This browser does not support ES6 and cannot run uncompiled GWS \x27 +\n          \x27JS. Use Chrome 51, Edge 14, Firefox 51, or Safari 10 for ES6 \x27 +\n          \x27support. You will now be redirected to debug unobfuscated mode \x27 +\n          \x27(deb\x3d0j2).\x27);\n      location.search \x3d transpiledSearch;\n    }\n  }\n})();\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/debug/transpiler/bootstrap.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/common/bootstrap.js";
eval("/**\n * @fileoverview This JS file is the bootstrap dependency of search_base_module,\n * so it appears at the beginning of the primary XJS response. It records the\n * start tick of JS execution for CSI.\n *\n * Full documentation of GWS CSI events is at http://go/gws-csi-timings.\n */\n\n// This suppresses requests for deps.js in uncompiled mode.\n// NOTE(search-ui-chi): We cannot add a dependency to this build\n//   file due to timing issues. If we have a dependency, then CLOSURE_NO_DEPS\n//   will be initialized too late, causing dep.js to still be requested in\n//   uncompiled mode, leading to a warning in the console.  Thus, we cannot\n//   reference CsiMetricKeys values for the arguments in the google.tick\n//   function here.\nvar CLOSURE_NO_DEPS \x3d true;\n\nif (google.c) {\n  google.tick(\x27load\x27, {gen204: \x27xjses\x27, clearcut: 30});\n}\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/common/bootstrap.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/base.js";
var goog = goog || {};
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Bootstrap for the Google JS Library (Closure).\n *\n * In uncompiled mode base.js will attempt to load Closure\x27s deps file, unless\n * the global \x3ccode\x3eCLOSURE_NO_DEPS\x3c/code\x3e is set to true.  This allows projects\n * to include their own deps file(s) from different locations.\n *\n * Avoid including base.js more than once. This is strictly discouraged and not\n * supported. goog.require(...) won\x27t work properly in that case.\n *\n * @provideGoog\n */\n\n\n/**\n * @define {boolean} Overridden to true by the compiler.\n */\nvar COMPILED \x3d false;\n\n\n/**\n * Base namespace for the Closure library.  Checks to see goog is already\n * defined in the current scope before assigning to prevent clobbering if\n * base.js is loaded more than once.\n *\n * @const\n */\n\n\n/**\n * Reference to the global context.  In most cases this will be \x27window\x27.\n * @const\n * @suppress {newCheckTypes}\n */\ngoog.global \x3d this;\n\n\n/**\n * A hook for overriding the define values in uncompiled mode.\n *\n * In uncompiled mode, `CLOSURE_UNCOMPILED_DEFINES` may be defined before\n * loading base.js.  If a key is defined in `CLOSURE_UNCOMPILED_DEFINES`,\n * `goog.define` will use the value instead of the default value.  This\n * allows flags to be overwritten without compilation (this is normally\n * accomplished with the compiler\x27s \x22define\x22 flag).\n *\n * Example:\n * \x3cpre\x3e\n *   var CLOSURE_UNCOMPILED_DEFINES \x3d {\x27goog.DEBUG\x27: false};\n * \x3c/pre\x3e\n *\n * @type {Object\x3cstring, (string|number|boolean)\x3e|undefined}\n */\ngoog.global.CLOSURE_UNCOMPILED_DEFINES;\n\n\n/**\n * A hook for overriding the define values in uncompiled or compiled mode,\n * like CLOSURE_UNCOMPILED_DEFINES but effective in compiled code.  In\n * uncompiled code CLOSURE_UNCOMPILED_DEFINES takes precedence.\n *\n * Also unlike CLOSURE_UNCOMPILED_DEFINES the values must be number, boolean or\n * string literals or the compiler will emit an error.\n *\n * While any @define value may be set, only those set with goog.define will be\n * effective for uncompiled code.\n *\n * Example:\n * \x3cpre\x3e\n *   var CLOSURE_DEFINES \x3d {\x27goog.DEBUG\x27: false} ;\n * \x3c/pre\x3e\n *\n * @type {Object\x3cstring, (string|number|boolean)\x3e|undefined}\n */\ngoog.global.CLOSURE_DEFINES;\n\n\n/**\n * Returns true if the specified value is not undefined.\n *\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined.\n */\ngoog.isDef \x3d function(val) {\n  // void 0 always evaluates to undefined and hence we do not need to depend on\n  // the definition of the global variable named \x27undefined\x27.\n  return val !\x3d\x3d void 0;\n};\n\n/**\n * Returns true if the specified value is a string.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a string.\n */\ngoog.isString \x3d function(val) {\n  return typeof val \x3d\x3d \x27string\x27;\n};\n\n\n/**\n * Returns true if the specified value is a boolean.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is boolean.\n */\ngoog.isBoolean \x3d function(val) {\n  return typeof val \x3d\x3d \x27boolean\x27;\n};\n\n\n/**\n * Returns true if the specified value is a number.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a number.\n */\ngoog.isNumber \x3d function(val) {\n  return typeof val \x3d\x3d \x27number\x27;\n};\n\n\n/**\n * Builds an object structure for the provided namespace path, ensuring that\n * names that already exist are not overwritten. For example:\n * \x22a.b.c\x22 -\x3e a \x3d {};a.b\x3d{};a.b.c\x3d{};\n * Used by goog.provide and goog.exportSymbol.\n * @param {string} name name of the object that this file defines.\n * @param {*\x3d} opt_object the object to expose at the end of the path.\n * @param {Object\x3d} opt_objectToExportTo The object to add the path to; default\n *     is `goog.global`.\n * @private\n */\ngoog.exportPath_ \x3d function(name, opt_object, opt_objectToExportTo) {\n  var parts \x3d name.split(\x27.\x27);\n  var cur \x3d opt_objectToExportTo || goog.global;\n\n  // Internet Explorer exhibits strange behavior when throwing errors from\n  // methods externed in this manner.  See the testExportSymbolExceptions in\n  // base_test.html for an example.\n  if (!(parts[0] in cur) \x26\x26 typeof cur.execScript !\x3d \x27undefined\x27) {\n    cur.execScript(\x27var \x27 + parts[0]);\n  }\n\n  for (var part; parts.length \x26\x26 (part \x3d parts.shift());) {\n    if (!parts.length \x26\x26 goog.isDef(opt_object)) {\n      // last part and we have an object; use it\n      cur[part] \x3d opt_object;\n    } else if (cur[part] \x26\x26 cur[part] !\x3d\x3d Object.prototype[part]) {\n      cur \x3d cur[part];\n    } else {\n      cur \x3d cur[part] \x3d {};\n    }\n  }\n};\n\n\n/**\n * Defines a named value. In uncompiled mode, the value is retrieved from\n * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and\n * has the property specified, and otherwise used the defined defaultValue.\n * When compiled the default can be overridden using the compiler\n * options or the value set in the CLOSURE_DEFINES object.\n *\n * @param {string} name The distinguished name to provide.\n * @param {string|number|boolean} defaultValue\n */\ngoog.define \x3d function(name, defaultValue) {\n  var value \x3d defaultValue;\n  if (!COMPILED) {\n    var uncompiledDefines \x3d goog.global.CLOSURE_UNCOMPILED_DEFINES;\n    var defines \x3d goog.global.CLOSURE_DEFINES;\n    if (uncompiledDefines \x26\x26\n        // Anti DOM-clobbering runtime check (b/37736576).\n        /** @type {?} */ (uncompiledDefines).nodeType \x3d\x3d\x3d undefined \x26\x26\n        Object.prototype.hasOwnProperty.call(uncompiledDefines, name)) {\n      value \x3d uncompiledDefines[name];\n    } else if (\n        defines \x26\x26\n        // Anti DOM-clobbering runtime check (b/37736576).\n        /** @type {?} */ (defines).nodeType \x3d\x3d\x3d undefined \x26\x26\n        Object.prototype.hasOwnProperty.call(defines, name)) {\n      value \x3d defines[name];\n    }\n  }\n  goog.exportPath_(name, value);\n};\n\n\n/**\n * @define {boolean} DEBUG is provided as a convenience so that debugging code\n * that should not be included in a production. It can be easily stripped\n * by specifying --define goog.DEBUG\x3dfalse to the Closure Compiler aka\n * JSCompiler. For example, most toString() methods should be declared inside an\n * \x22if (goog.DEBUG)\x22 conditional because they are generally used for debugging\n * purposes and it is difficult for the JSCompiler to statically determine\n * whether they are used.\n */\ngoog.define(\x27goog.DEBUG\x27, true);\n\n\n/**\n * @define {string} LOCALE defines the locale being used for compilation. It is\n * used to select locale specific data to be compiled in js binary. BUILD rule\n * can specify this value by \x22--define goog.LOCALE\x3d\x3clocale_name\x3e\x22 as a compiler\n * option.\n *\n * Take into account that the locale code format is important. You should use\n * the canonical Unicode format with hyphen as a delimiter. Language must be\n * lowercase, Language Script - Capitalized, Region - UPPERCASE.\n * There are few examples: pt-BR, en, en-US, sr-Latin-BO, zh-Hans-CN.\n *\n * See more info about locale codes here:\n * http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers\n *\n * For language codes you should use values defined by ISO 693-1. See it here\n * http://www.w3.org/WAI/ER/IG/ert/iso639.htm. There is only one exception from\n * this rule: the Hebrew language. For legacy reasons the old code (iw) should\n * be used instead of the new code (he).\n *\n * MOE:begin_intracomment_strip\n * See http://g3doc/i18n/identifiers/g3doc/synonyms.\n * MOE:end_intracomment_strip\n */\ngoog.define(\x27goog.LOCALE\x27, \x27en\x27);  // default to en\n\n\n/**\n * @define {boolean} Whether this code is running on trusted sites.\n *\n * On untrusted sites, several native functions can be defined or overridden by\n * external libraries like Prototype, Datejs, and JQuery and setting this flag\n * to false forces closure to use its own implementations when possible.\n *\n * If your JavaScript can be loaded by a third party site and you are wary about\n * relying on non-standard implementations, specify\n * \x22--define goog.TRUSTED_SITE\x3dfalse\x22 to the compiler.\n */\ngoog.define(\x27goog.TRUSTED_SITE\x27, true);\n\n\n/**\n * @define {boolean} Whether a project is expected to be running in strict mode.\n *\n * This define can be used to trigger alternate implementations compatible with\n * running in EcmaScript Strict mode or warn about unavailable functionality.\n * @see https://goo.gl/PudQ4y\n *\n */\ngoog.define(\x27goog.STRICT_MODE_COMPATIBLE\x27, false);\n\n\n/**\n * @define {boolean} Whether code that calls {@link goog.setTestOnly} should\n *     be disallowed in the compilation unit.\n */\ngoog.define(\x27goog.DISALLOW_TEST_ONLY_CODE\x27, COMPILED \x26\x26 !goog.DEBUG);\n\n\n/**\n * @define {boolean} Whether to use a Chrome app CSP-compliant method for\n *     loading scripts via goog.require. @see appendScriptSrcNode_.\n */\ngoog.define(\x27goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING\x27, false);\n\n\n/**\n * Defines a namespace in Closure.\n *\n * A namespace may only be defined once in a codebase. It may be defined using\n * goog.provide() or goog.module().\n *\n * The presence of one or more goog.provide() calls in a file indicates\n * that the file defines the given objects/namespaces.\n * Provided symbols must not be null or undefined.\n *\n * In addition, goog.provide() creates the object stubs for a namespace\n * (for example, goog.provide(\x22goog.foo.bar\x22) will create the object\n * goog.foo.bar if it does not already exist).\n *\n * Build tools also scan for provide/require/module statements\n * to discern dependencies, build dependency files (see deps.js), etc.\n *\n * @see goog.require\n * @see goog.module\n * @param {string} name Namespace provided by this file in the form\n *     \x22goog.package.part\x22.\n */\ngoog.provide \x3d function(name) {\n  // MOE:begin_strip\n  if (goog.isInGoogModuleLoader_()) {\n    // MOE:end_strip_and_replace if (goog.isInModuleLoader_()) {\n    throw new Error(\x27goog.provide cannot be used within a module.\x27);\n  }\n  // MOE:begin_strip\n  // TODO(johnplaisted): Polymer makes ES6 modules with provides. Once we fix\n  // them this should always be an error.\n  if (goog.isInEs6ModuleLoader_()) {\n    goog.logToConsole_(\x27goog.provide should not be used within a module.\x27);\n  }\n  // MOE:end_strip\n  if (!COMPILED) {\n    // Ensure that the same namespace isn\x27t provided twice.\n    // A goog.module/goog.provide maps a goog.require to a specific file\n    if (goog.isProvided_(name)) {\n      throw new Error(\x27Namespace \x22\x27 + name + \x27\x22 already declared.\x27);\n    }\n  }\n\n  goog.constructNamespace_(name);\n};\n\n\n/**\n * @param {string} name Namespace provided by this file in the form\n *     \x22goog.package.part\x22.\n * @param {Object\x3d} opt_obj The object to embed in the namespace.\n * @private\n */\ngoog.constructNamespace_ \x3d function(name, opt_obj) {\n  if (!COMPILED) {\n    delete goog.implicitNamespaces_[name];\n\n    var namespace \x3d name;\n    while ((namespace \x3d namespace.substring(0, namespace.lastIndexOf(\x27.\x27)))) {\n      if (goog.getObjectByName(namespace)) {\n        break;\n      }\n      goog.implicitNamespaces_[namespace] \x3d true;\n    }\n  }\n\n  goog.exportPath_(name, opt_obj);\n};\n\n\n/**\n * Returns CSP nonce, if set for any script tag.\n * @return {string} CSP nonce or empty string if no nonce is present.\n */\ngoog.getScriptNonce \x3d function() {\n  if (goog.cspNonce_ \x3d\x3d\x3d null) {\n    goog.cspNonce_ \x3d goog.getScriptNonce_(goog.global.document) || \x27\x27;\n  }\n  return goog.cspNonce_;\n};\n\n\n/**\n * According to the CSP3 spec a nonce must be a valid base64 string.\n * @see https://www.w3.org/TR/CSP3/#grammardef-base64-value\n * @private @const\n */\ngoog.NONCE_PATTERN_ \x3d /^[\\w+/_-]+[\x3d]{0,2}$/;\n\n\n/**\n * @private {?string}\n */\ngoog.cspNonce_ \x3d null;\n\n\n/**\n * Returns CSP nonce, if set for any script tag.\n * @param {!Document} doc\n * @return {?string} CSP nonce or null if no nonce is present.\n * @private\n */\ngoog.getScriptNonce_ \x3d function(doc) {\n  var script \x3d doc.querySelector(\x27script[nonce]\x27);\n  if (script) {\n    var nonce \x3d script[\x27nonce\x27] || script.getAttribute(\x27nonce\x27);\n    if (nonce \x26\x26 goog.NONCE_PATTERN_.test(nonce)) {\n      return nonce;\n    }\n  }\n  return null;\n};\n\n\n/**\n * Module identifier validation regexp.\n * Note: This is a conservative check, it is very possible to be more lenient,\n *   the primary exclusion here is \x22/\x22 and \x22\\\x22 and a leading \x22.\x22, these\n *   restrictions are intended to leave the door open for using goog.require\n *   with relative file paths rather than module identifiers.\n * @private\n */\ngoog.VALID_MODULE_RE_ \x3d /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\n\n\n/**\n * Defines a module in Closure.\n *\n * Marks that this file must be loaded as a module and claims the namespace.\n *\n * A namespace may only be defined once in a codebase. It may be defined using\n * goog.provide() or goog.module().\n *\n * goog.module() has three requirements:\n * - goog.module may not be used in the same file as goog.provide.\n * - goog.module must be the first statement in the file.\n * - only one goog.module is allowed per file.\n *\n * When a goog.module annotated file is loaded, it is enclosed in\n * a strict function closure. This means that:\n * - any variables declared in a goog.module file are private to the file\n * (not global), though the compiler is expected to inline the module.\n * - The code must obey all the rules of \x22strict\x22 JavaScript.\n * - the file will be marked as \x22use strict\x22\n *\n * NOTE: unlike goog.provide, goog.module does not declare any symbols by\n * itself. If declared symbols are desired, use\n * goog.module.declareLegacyNamespace().\n *\n * MOE:begin_intracomment_strip\n * See the goog.module announcement at http://go/goog.module-announce\n * MOE:end_intracomment_strip\n *\n * See the public goog.module proposal: http://goo.gl/Va1hin\n *\n * @param {string} name Namespace provided by this file in the form\n *     \x22goog.package.part\x22, is expected but not required.\n * @return {void}\n */\ngoog.module \x3d function(name) {\n  if (!goog.isString(name) || !name ||\n      name.search(goog.VALID_MODULE_RE_) \x3d\x3d -1) {\n    throw new Error(\x27Invalid module identifier\x27);\n  }\n  if (!goog.isInGoogModuleLoader_()) {\n    throw new Error(\n        \x27Module \x27 + name + \x27 has been loaded incorrectly. Note, \x27 +\n        \x27modules cannot be loaded as normal scripts. They require some kind of \x27 +\n        \x27pre-processing step. You\\\x27re likely trying to load a module via a \x27 +\n        \x27script tag or as a part of a concatenated bundle without rewriting the \x27 +\n        \x27module. For more info see: \x27 +\n        \x27https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.\x27);\n  }\n  if (goog.moduleLoaderState_.moduleName) {\n    throw new Error(\x27goog.module may only be called once per module.\x27);\n  }\n\n  // Store the module name for the loader.\n  goog.moduleLoaderState_.moduleName \x3d name;\n  if (!COMPILED) {\n    // Ensure that the same namespace isn\x27t provided twice.\n    // A goog.module/goog.provide maps a goog.require to a specific file\n    if (goog.isProvided_(name)) {\n      throw new Error(\x27Namespace \x22\x27 + name + \x27\x22 already declared.\x27);\n    }\n    delete goog.implicitNamespaces_[name];\n  }\n};\n\n\n/**\n * @param {string} name The module identifier.\n * @return {?} The module exports for an already loaded module or null.\n *\n * Note: This is not an alternative to goog.require, it does not\n * indicate a hard dependency, instead it is used to indicate\n * an optional dependency or to access the exports of a module\n * that has already been loaded.\n * @suppress {missingProvide}\n */\ngoog.module.get \x3d function(name) {\n  if (!COMPILED \x26\x26 name in goog.loadedModules_) {\n    // MOE:begin_strip\n    // Internally people are accessing goog.loadedModules_ and putting booleans\n    // and other junk inside of it. If someone has messed with this field then\n    // return the value they\x27ve put into it.\n    // TODO(b/67050526): remove this code once private are enforced.\n    if (typeof goog.loadedModules_[name] !\x3d \x27object\x27 ||\n        !(\x27exports\x27 in goog.loadedModules_[name])) {\n      return goog.loadedModules_[name];\n    }\n    // MOE:end_strip\n    if (goog.loadedModules_[name].type !\x3d goog.ModuleType.GOOG) {\n      throw new Error(\x27Can only goog.module.get for goog.modules.\x27);\n    }\n    if (goog.loadedModules_[name].moduleId !\x3d name) {\n      throw new Error(\x27Cannot goog.module.get by path.\x27);\n    }\n  }\n\n  return goog.module.getInternal_(name);\n};\n\n\n/**\n * @param {string} name The module identifier.\n * @return {?} The module exports for an already loaded module or null.\n * @private\n */\ngoog.module.getInternal_ \x3d function(name) {\n  if (!COMPILED) {\n    if (name in goog.loadedModules_) {\n      return goog.loadedModules_[name].exports;\n    } else if (!goog.implicitNamespaces_[name]) {\n      var ns \x3d goog.getObjectByName(name);\n      return ns !\x3d null ? ns : null;\n    }\n  }\n  return null;\n};\n\n\n/**\n * Types of modules the debug loader can load.\n * @enum {string}\n */\ngoog.ModuleType \x3d {\n  ES6: \x27es6\x27,\n  GOOG: \x27goog\x27\n};\n\n\n/**\n * @private {?{\n *   moduleName: (string|undefined),\n *   declareLegacyNamespace:boolean,\n *   path:(string|undefined),\n *   type: goog.ModuleType\n * }}\n */\ngoog.moduleLoaderState_ \x3d null;\n\n\n/**\n * @private\n * @return {boolean} Whether a is currently being initialized.\n */\ngoog.isInModuleLoader_ \x3d function() {\n  return goog.isInGoogModuleLoader_() || goog.isInEs6ModuleLoader_();\n};\n\n\n/**\n * @private\n * @return {boolean} Whether a goog.module is currently being initialized.\n */\ngoog.isInGoogModuleLoader_ \x3d function() {\n  return !!goog.moduleLoaderState_ \x26\x26\n      goog.moduleLoaderState_.type \x3d\x3d goog.ModuleType.GOOG;\n};\n\n\n/**\n * @private\n * @return {boolean} Whether an es6 module is currently being initialized.\n */\ngoog.isInEs6ModuleLoader_ \x3d function() {\n  var inLoader \x3d !!goog.moduleLoaderState_ \x26\x26\n      goog.moduleLoaderState_.type \x3d\x3d goog.ModuleType.ES6;\n\n  if (inLoader) {\n    return true;\n  }\n\n  var jscomp \x3d goog.global[\x27$jscomp\x27];\n\n  if (jscomp) {\n    // jscomp may not have getCurrentModulePath if this is a compiled bundle\n    // that has some of the runtime, but not all of it. This can happen if\n    // optimizations are turned on so the unused runtime is removed but renaming\n    // and Closure pass are off (so $jscomp is still named $jscomp and the\n    // goog.provide/require calls still exist).\n    if (typeof jscomp.getCurrentModulePath !\x3d \x27function\x27) {\n      return false;\n    }\n\n    // Bundled ES6 module.\n    return !!jscomp.getCurrentModulePath();\n  }\n\n  return false;\n};\n\n\n/**\n * @private\n * @return {?string|undefined} Path of the current module being initialized.\n */\ngoog.getModulePath_ \x3d function() {\n  return goog.moduleLoaderState_ \x26\x26 goog.moduleLoaderState_.path;\n};\n\n\n/**\n * Provide the module\x27s exports as a globally accessible object under the\n * module\x27s declared name.  This is intended to ease migration to goog.module\n * for files that have existing usages.\n * @suppress {missingProvide}\n */\ngoog.module.declareLegacyNamespace \x3d function() {\n  if (!COMPILED \x26\x26 !goog.isInGoogModuleLoader_()) {\n    throw new Error(\n        \x27goog.module.declareLegacyNamespace must be called from \x27 +\n        \x27within a goog.module\x27);\n  }\n  if (!COMPILED \x26\x26 !goog.moduleLoaderState_.moduleName) {\n    throw new Error(\n        \x27goog.module must be called prior to \x27 +\n        \x27goog.module.declareLegacyNamespace.\x27);\n  }\n  goog.moduleLoaderState_.declareLegacyNamespace \x3d true;\n};\n\n\n/**\n * Marks that the current file should only be used for testing, and never for\n * live code in production.\n *\n * In the case of unit tests, the message may optionally be an exact namespace\n * for the test (e.g. \x27goog.stringTest\x27). The linter will then ignore the extra\n * provide (if not explicitly defined in the code).\n *\n * @param {string\x3d} opt_message Optional message to add to the error that\x27s\n *     raised when used in production code.\n */\ngoog.setTestOnly \x3d function(opt_message) {\n  if (goog.DISALLOW_TEST_ONLY_CODE) {\n    opt_message \x3d opt_message || \x27\x27;\n    throw new Error(\n        \x27Importing test-only code into non-debug environment\x27 +\n        (opt_message ? \x27: \x27 + opt_message : \x27.\x27));\n  }\n};\n\n\n/**\n * Forward declares a symbol. This is an indication to the compiler that the\n * symbol may be used in the source yet is not required and may not be provided\n * in compilation.\n *\n * The most common usage of forward declaration is code that takes a type as a\n * function parameter but does not need to require it. By forward declaring\n * instead of requiring, no hard dependency is made, and (if not required\n * elsewhere) the namespace may never be required and thus, not be pulled\n * into the JavaScript binary. If it is required elsewhere, it will be type\n * checked as normal.\n *\n * Before using goog.forwardDeclare, please read the documentation at\n * https://github.com/google/closure-compiler/wiki/Bad-Type-Annotation to\n * understand the options and tradeoffs when working with forward declarations.\n *\n * @param {string} name The namespace to forward declare in the form of\n *     \x22goog.package.part\x22.\n */\ngoog.forwardDeclare \x3d function(name) {};\n\n\n/**\n * Forward declare type information. Used to assign types to goog.global\n * referenced object that would otherwise result in unknown type references\n * and thus block property disambiguation.\n */\ngoog.forwardDeclare(\x27Document\x27);\ngoog.forwardDeclare(\x27HTMLScriptElement\x27);\ngoog.forwardDeclare(\x27XMLHttpRequest\x27);\n\n\nif (!COMPILED) {\n  /**\n   * Check if the given name has been goog.provided. This will return false for\n   * names that are available only as implicit namespaces.\n   * @param {string} name name of the object to look for.\n   * @return {boolean} Whether the name has been provided.\n   * @private\n   */\n  goog.isProvided_ \x3d function(name) {\n    return (name in goog.loadedModules_) ||\n        (!goog.implicitNamespaces_[name] \x26\x26\n         goog.isDefAndNotNull(goog.getObjectByName(name)));\n  };\n\n  /**\n   * Namespaces implicitly defined by goog.provide. For example,\n   * goog.provide(\x27goog.events.Event\x27) implicitly declares that \x27goog\x27 and\n   * \x27goog.events\x27 must be namespaces.\n   *\n   * @type {!Object\x3cstring, (boolean|undefined)\x3e}\n   * @private\n   */\n  goog.implicitNamespaces_ \x3d {\x27goog.module\x27: true};\n\n  // NOTE: We add goog.module as an implicit namespace as goog.module is defined\n  // here and because the existing module package has not been moved yet out of\n  // the goog.module namespace. This satisifies both the debug loader and\n  // ahead-of-time dependency management.\n}\n\n\n/**\n * Returns an object based on its fully qualified external name.  The object\n * is not found if null or undefined.  If you are using a compilation pass that\n * renames property names beware that using this function will not find renamed\n * properties.\n *\n * @param {string} name The fully qualified name.\n * @param {Object\x3d} opt_obj The object within which to look; default is\n *     |goog.global|.\n * @return {?} The value (object or primitive) or, if not found, null.\n */\ngoog.getObjectByName \x3d function(name, opt_obj) {\n  var parts \x3d name.split(\x27.\x27);\n  var cur \x3d opt_obj || goog.global;\n  for (var i \x3d 0; i \x3c parts.length; i++) {\n    cur \x3d cur[parts[i]];\n    if (!goog.isDefAndNotNull(cur)) {\n      return null;\n    }\n  }\n  return cur;\n};\n\n\n/**\n * Globalizes a whole namespace, such as goog or goog.lang.\n *\n * @param {!Object} obj The namespace to globalize.\n * @param {Object\x3d} opt_global The object to add the properties to.\n * @deprecated Properties may be explicitly exported to the global scope, but\n *     this should no longer be done in bulk.\n */\ngoog.globalize \x3d function(obj, opt_global) {\n  var global \x3d opt_global || goog.global;\n  for (var x in obj) {\n    global[x] \x3d obj[x];\n  }\n};\n\n\n/**\n * Adds a dependency from a file to the files it requires.\n * @param {string} relPath The path to the js file.\n * @param {!Array\x3cstring\x3e} provides An array of strings with\n *     the names of the objects this file provides.\n * @param {!Array\x3cstring\x3e} requires An array of strings with\n *     the names of the objects this file requires.\n * @param {boolean|!Object\x3cstring\x3e\x3d} opt_loadFlags Parameters indicating\n *     how the file must be loaded.  The boolean \x27true\x27 is equivalent\n *     to {\x27module\x27: \x27goog\x27} for backwards-compatibility.  Valid properties\n *     and values include {\x27module\x27: \x27goog\x27} and {\x27lang\x27: \x27es6\x27}.\n */\ngoog.addDependency \x3d function(relPath, provides, requires, opt_loadFlags) {\n  if (!COMPILED \x26\x26 goog.DEPENDENCIES_ENABLED) {\n    goog.debugLoader_.addDependency(relPath, provides, requires, opt_loadFlags);\n  }\n};\n\n\n// MOE:begin_strip\n/**\n * Whether goog.require should throw an exception if it fails.\n * @type {boolean}\n */\ngoog.useStrictRequires \x3d false;\n\n\n// MOE:end_strip\n\n\n// NOTE(nnaze): The debug DOM loader was included in base.js as an original way\n// to do \x22debug-mode\x22 development.  The dependency system can sometimes be\n// confusing, as can the debug DOM loader\x27s asynchronous nature.\n//\n// With the DOM loader, a call to goog.require() is not blocking -- the script\n// will not load until some point after the current script.  If a namespace is\n// needed at runtime, it needs to be defined in a previous script, or loaded via\n// require() with its registered dependencies.\n//\n// User-defined namespaces may need their own deps file. For a reference on\n// creating a deps file, see:\n// MOE:begin_strip\n// Internally: http://go/deps-files and http://go/be#js_deps\n// MOE:end_strip\n// Externally: https://developers.google.com/closure/library/docs/depswriter\n//\n// Because of legacy clients, the DOM loader can\x27t be easily removed from\n// base.js.  Work was done to make it disableable or replaceable for\n// different environments (DOM-less JavaScript interpreters like Rhino or V8,\n// for example). See bootstrap/ for more information.\n\n\n/**\n * @define {boolean} Whether to enable the debug loader.\n *\n * If enabled, a call to goog.require() will attempt to load the namespace by\n * appending a script tag to the DOM (if the namespace has been registered).\n *\n * If disabled, goog.require() will simply assert that the namespace has been\n * provided (and depend on the fact that some outside tool correctly ordered\n * the script).\n */\ngoog.define(\x27goog.ENABLE_DEBUG_LOADER\x27, true);\n\n\n/**\n * @param {string} msg\n * @private\n */\ngoog.logToConsole_ \x3d function(msg) {\n  if (goog.global.console) {\n    goog.global.console[\x27error\x27](msg);\n  }\n};\n\n\n/**\n * @param {string} requireOrPath\n * @return {boolean}\n * @private\n */\ngoog.isPath_ \x3d function(requireOrPath) {\n  // Paths must be relative.\n  return requireOrPath.indexOf(\x27./\x27) \x3d\x3d 0 || requireOrPath.indexOf(\x27../\x27) \x3d\x3d 0;\n};\n\n\n/**\n * Implements a system for the dynamic resolution of dependencies that works in\n * parallel with the BUILD system. Note that all calls to goog.require will be\n * stripped by the compiler.\n * @see goog.provide\n * @param {string} nameOrPath Namespace (as was given in goog.provide or\n *     goog.module) in the form \x22goog.package.part\x22, or relative path to an ES6\n *     module.\n * @return {?} If called within a goog.module or ES6 module file, the associated\n *     namespace or module otherwise null.\n */\ngoog.require \x3d function(nameOrPath) {\n  if (goog.isPath_(nameOrPath)) {\n    if (goog.isInGoogModuleLoader_()) {\n      if (!goog.getModulePath_()) {\n        throw new Error(\n            \x27Current module has no path information. Was it loaded via \x27 +\n            \x27goog.loadModule without a path argument?\x27);\n      }\n\n      nameOrPath \x3d\n          goog.normalizePath_(goog.getModulePath_() + \x27/../\x27 + nameOrPath);\n    } else {\n      throw new Error(\x27Cannot require by path outside of goog.modules.\x27);\n    }\n  }\n\n  if (!COMPILED) {\n    // Might need to lazy load on old IE.\n    if (goog.ENABLE_DEBUG_LOADER) {\n      goog.debugLoader_.requested(nameOrPath);\n    }\n\n    // If the object already exists we do not need to do anything.\n    if (goog.isProvided_(nameOrPath)) {\n      if (goog.isInModuleLoader_()) {\n        return goog.module.getInternal_(nameOrPath);\n      }\n    } else if (goog.ENABLE_DEBUG_LOADER) {\n      var moduleLoaderState \x3d goog.moduleLoaderState_;\n      goog.moduleLoaderState_ \x3d null;\n      try {\n        goog.debugLoader_.load_(nameOrPath);\n      } finally {\n        goog.moduleLoaderState_ \x3d moduleLoaderState;\n      }\n    }\n\n    return null;\n  }\n};\n\n\n/**\n * Path for included scripts.\n * @type {string}\n */\ngoog.basePath \x3d \x27\x27;\n\n\n/**\n * A hook for overriding the base path.\n * @type {string|undefined}\n */\ngoog.global.CLOSURE_BASE_PATH;\n\n\n/**\n * Whether to attempt to load Closure\x27s deps file. By default, when uncompiled,\n * deps files will attempt to be loaded.\n * @type {boolean|undefined}\n */\ngoog.global.CLOSURE_NO_DEPS;\n\n\n/**\n * A function to import a single script. This is meant to be overridden when\n * Closure is being run in non-HTML contexts, such as web workers. It\x27s defined\n * in the global scope so that it can be set before base.js is loaded, which\n * allows deps.js to be imported properly.\n *\n * The first parameter the script source, which is a relative URI. The second,\n * optional parameter is the script contents, in the event the script needed\n * transformation. It should return true if the script was imported, false\n * otherwise.\n * @type {(function(string, string\x3d): boolean)|undefined}\n */\ngoog.global.CLOSURE_IMPORT_SCRIPT;\n\n\n/**\n * Null function used for default values of callbacks, etc.\n * @return {void} Nothing.\n */\ngoog.nullFunction \x3d function() {};\n\n\n/**\n * When defining a class Foo with an abstract method bar(), you can do:\n * Foo.prototype.bar \x3d goog.abstractMethod\n *\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\n * when bar() is invoked.\n *\n * @type {!Function}\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\ngoog.abstractMethod \x3d function() {\n  throw new Error(\x27unimplemented abstract method\x27);\n};\n\n\n/**\n * Adds a `getInstance` static method that always returns the same\n * instance object.\n * @param {!Function} ctor The constructor for the class to add the static\n *     method to.\n * @suppress {missingProperties} \x27instance_\x27 isn\x27t a property on \x27Function\x27\n *     but we don\x27t have a better type to use here.\n */\ngoog.addSingletonGetter \x3d function(ctor) {\n  // instance_ is immediately set to prevent issues with sealed constructors\n  // such as are encountered when a constructor is returned as the export object\n  // of a goog.module in unoptimized code.\n  ctor.instance_ \x3d undefined;\n  ctor.getInstance \x3d function() {\n    if (ctor.instance_) {\n      return ctor.instance_;\n    }\n    if (goog.DEBUG) {\n      // NOTE: JSCompiler can\x27t optimize away Array#push.\n      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] \x3d ctor;\n    }\n    return ctor.instance_ \x3d new ctor;\n  };\n};\n\n\n/**\n * All singleton classes that have been instantiated, for testing. Don\x27t read\n * it directly, use the `goog.testing.singleton` module. The compiler\n * removes this variable if unused.\n * @type {!Array\x3c!Function\x3e}\n * @private\n */\ngoog.instantiatedSingletons_ \x3d [];\n\n\n/**\n * @define {boolean} Whether to load goog.modules using `eval` when using\n * the debug loader.  This provides a better debugging experience as the\n * source is unmodified and can be edited using Chrome Workspaces or similar.\n * However in some environments the use of `eval` is banned\n * so we provide an alternative.\n */\ngoog.define(\x27goog.LOAD_MODULE_USING_EVAL\x27, true);\n\n\n/**\n * @define {boolean} Whether the exports of goog.modules should be sealed when\n * possible.\n */\ngoog.define(\x27goog.SEAL_MODULE_EXPORTS\x27, goog.DEBUG);\n\n\n/**\n * The registry of initialized modules:\n * The module identifier or path to module exports map.\n * @private @const {!Object\x3cstring, {exports:?,type:string,moduleId:string}\x3e}\n */\ngoog.loadedModules_ \x3d {};\n\n\n/**\n * True if the debug loader enabled and used.\n * @const {boolean}\n */\ngoog.DEPENDENCIES_ENABLED \x3d !COMPILED \x26\x26 goog.ENABLE_DEBUG_LOADER;\n\n\n/**\n * @define {string} How to decide whether to transpile.  Valid values\n * are \x27always\x27, \x27never\x27, and \x27detect\x27.  The default (\x27detect\x27) is to\n * use feature detection to determine which language levels need\n * transpilation.\n */\n// NOTE(sdh): we could expand this to accept a language level to bypass\n// detection: e.g. goog.TRANSPILE \x3d\x3d \x27es5\x27 would transpile ES6 files but\n// would leave ES3 and ES5 files alone.\ngoog.define(\x27goog.TRANSPILE\x27, \x27detect\x27);\n\n\n/**\n * @define {string} Path to the transpiler.  Executing the script at this\n * path (relative to base.js) should define a function $jscomp.transpile.\n */\ngoog.define(\x27goog.TRANSPILER\x27, \x27transpile.js\x27);\n\n\n/**\n * @package {?boolean}\n * Visible for testing.\n */\ngoog.hasBadLetScoping \x3d null;\n\n\n/**\n * @return {boolean}\n * @package Visible for testing.\n */\ngoog.useSafari10Workaround \x3d function() {\n  if (goog.hasBadLetScoping \x3d\x3d null) {\n    var hasBadLetScoping;\n    try {\n      hasBadLetScoping \x3d !eval(\n          \x27\x22use strict\x22;\x27 +\n          \x27let x \x3d 1; function f() { return typeof x; };\x27 +\n          \x27f() \x3d\x3d \x22number\x22;\x27);\n    } catch (e) {\n      // Assume that ES6 syntax isn\x27t supported.\n      hasBadLetScoping \x3d false;\n    }\n    goog.hasBadLetScoping \x3d hasBadLetScoping;\n  }\n  return goog.hasBadLetScoping;\n};\n\n\n/**\n * @param {string} moduleDef\n * @return {string}\n * @package Visible for testing.\n */\ngoog.workaroundSafari10EvalBug \x3d function(moduleDef) {\n  return \x27(function(){\x27 + moduleDef +\n      \x27\\n\x27 +  // Terminate any trailing single line comment.\n      \x27;\x27 +   // Terminate any trailing expression.\n      \x27})();\\n\x27;\n};\n\n\n/**\n * @param {function(?):?|string} moduleDef The module definition.\n * @param {string\x3d} opt_path Path of this module. Required to goog.require ES6\n *     modules by path.\n */\ngoog.loadModule \x3d function(moduleDef, opt_path) {\n  // NOTE: we allow function definitions to be either in the from\n  // of a string to eval (which keeps the original source intact) or\n  // in a eval forbidden environment (CSP) we allow a function definition\n  // which in its body must call `goog.module`, and return the exports\n  // of the module.\n  var previousState \x3d goog.moduleLoaderState_;\n  try {\n    goog.moduleLoaderState_ \x3d {\n      moduleName: \x27\x27,\n      declareLegacyNamespace: false,\n      type: goog.ModuleType.GOOG,\n      path: opt_path\n    };\n    var exports;\n    if (goog.isFunction(moduleDef)) {\n      exports \x3d moduleDef.call(undefined, {});\n    } else if (goog.isString(moduleDef)) {\n      if (goog.useSafari10Workaround()) {\n        moduleDef \x3d goog.workaroundSafari10EvalBug(moduleDef);\n      }\n\n      exports \x3d goog.loadModuleFromSource_.call(undefined, moduleDef);\n    } else {\n      throw new Error(\x27Invalid module definition\x27);\n    }\n\n    var moduleName \x3d goog.moduleLoaderState_.moduleName;\n    if (goog.isString(moduleName) \x26\x26 moduleName) {\n      // Don\x27t seal legacy namespaces as they may be used as a parent of\n      // another namespace\n      if (goog.moduleLoaderState_.declareLegacyNamespace) {\n        goog.constructNamespace_(moduleName, exports);\n      } else if (\n          goog.SEAL_MODULE_EXPORTS \x26\x26 Object.seal \x26\x26\n          typeof exports \x3d\x3d \x27object\x27 \x26\x26 exports !\x3d null) {\n        Object.seal(exports);\n      }\n\n      var data \x3d {\n        exports: exports,\n        type: goog.ModuleType.GOOG,\n        moduleId: goog.moduleLoaderState_.moduleName\n      };\n      goog.loadedModules_[moduleName] \x3d data;\n      opt_path \x26\x26 (goog.loadedModules_[opt_path] \x3d data);\n    } else {\n      throw new Error(\x27Invalid module name \\\x22\x27 + moduleName + \x27\\\x22\x27);\n    }\n  } finally {\n    goog.moduleLoaderState_ \x3d previousState;\n  }\n};\n\n\n/**\n * @private @const\n */\ngoog.loadModuleFromSource_ \x3d /** @type {function(string):?} */ (function() {\n  // NOTE: we avoid declaring parameters or local variables here to avoid\n  // masking globals or leaking values into the module definition.\n  \x27use strict\x27;\n  var exports \x3d {};\n  eval(arguments[0]);\n  return exports;\n});\n\n\n/**\n * Normalize a file path by removing redundant \x22..\x22 and extraneous \x22.\x22 file\n * path components.\n * @param {string} path\n * @return {string}\n * @private\n */\ngoog.normalizePath_ \x3d function(path) {\n  var components \x3d path.split(\x27/\x27);\n  var i \x3d 0;\n  while (i \x3c components.length) {\n    if (components[i] \x3d\x3d \x27.\x27) {\n      components.splice(i, 1);\n    } else if (\n        i \x26\x26 components[i] \x3d\x3d \x27..\x27 \x26\x26 components[i - 1] \x26\x26\n        components[i - 1] !\x3d \x27..\x27) {\n      components.splice(--i, 2);\n    } else {\n      i++;\n    }\n  }\n  return components.join(\x27/\x27);\n};\n\n\n/**\n * Provides a hook for loading a file when using Closure\x27s goog.require() API\n * with goog.modules.  In particular this hook is provided to support Node.js.\n *\n * @type {(function(string):string)|undefined}\n */\ngoog.global.CLOSURE_LOAD_FILE_SYNC;\n\n\n/**\n * Loads file by synchronous XHR. Should not be used in production environments.\n * @param {string} src Source URL.\n * @return {?string} File contents, or null if load failed.\n * @private\n */\ngoog.loadFileSync_ \x3d function(src) {\n  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {\n    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);\n  } else {\n    try {\n      /** @type {XMLHttpRequest} */\n      var xhr \x3d new goog.global[\x27XMLHttpRequest\x27]();\n      xhr.open(\x27get\x27, src, false);\n      xhr.send();\n      // NOTE: Successful http: requests have a status of 200, but successful\n      // file: requests may have a status of zero.  Any other status, or a\n      // thrown exception (particularly in case of file: requests) indicates\n      // some sort of error, which we treat as a missing or unavailable file.\n      return xhr.status \x3d\x3d 0 || xhr.status \x3d\x3d 200 ? xhr.responseText : null;\n    } catch (err) {\n      // No need to rethrow or log, since errors should show up on their own.\n      return null;\n    }\n  }\n};\n\n\n/**\n * Lazily retrieves the transpiler and applies it to the source.\n * @param {string} code JS code.\n * @param {string} path Path to the code.\n * @return {string} The transpiled code.\n * @private\n */\ngoog.transpile_ \x3d function(code, path) {\n  var jscomp \x3d goog.global[\x27$jscomp\x27];\n  if (!jscomp) {\n    goog.global[\x27$jscomp\x27] \x3d jscomp \x3d {};\n  }\n  var transpile \x3d jscomp.transpile;\n  if (!transpile) {\n    var transpilerPath \x3d goog.basePath + goog.TRANSPILER;\n    var transpilerCode \x3d goog.loadFileSync_(transpilerPath);\n    if (transpilerCode) {\n      // This must be executed synchronously, since by the time we know we\n      // need it, we\x27re about to load and write the ES6 code synchronously,\n      // so a normal script-tag load will be too slow. Wrapped in a function\n      // so that code is eval\x27d in the global scope.\n      (function() {\n        eval(transpilerCode + \x27\\n//# sourceURL\x3d\x27 + transpilerPath);\n      }).call(goog.global);\n      // Even though the transpiler is optional, if $gwtExport is found, it\x27s\n      // a sign the transpiler was loaded and the $jscomp.transpile *should*\n      // be there.\n      if (goog.global[\x27$gwtExport\x27] \x26\x26 goog.global[\x27$gwtExport\x27][\x27$jscomp\x27] \x26\x26\n          !goog.global[\x27$gwtExport\x27][\x27$jscomp\x27][\x27transpile\x27]) {\n        throw new Error(\n            \x27The transpiler did not properly export the \x22transpile\x22 \x27 +\n            \x27method. $gwtExport: \x27 + JSON.stringify(goog.global[\x27$gwtExport\x27]));\n      }\n      // transpile.js only exports a single $jscomp function, transpile. We\n      // grab just that and add it to the existing definition of $jscomp which\n      // contains the polyfills.\n      goog.global[\x27$jscomp\x27].transpile \x3d\n          goog.global[\x27$gwtExport\x27][\x27$jscomp\x27][\x27transpile\x27];\n      jscomp \x3d goog.global[\x27$jscomp\x27];\n      transpile \x3d jscomp.transpile;\n    }\n  }\n  if (!transpile) {\n    // The transpiler is an optional component.  If it\x27s not available then\n    // replace it with a pass-through function that simply logs.\n    var suffix \x3d \x27 requires transpilation but no transpiler was found.\x27;\n    // MOE:begin_strip\n    suffix +\x3d  // Provide a more appropriate message internally.\n        \x27 Please add \x22//javascript/closure:transpiler\x22 as a data \x27 +\n        \x27dependency to ensure it is included.\x27;\n    // MOE:end_strip\n    transpile \x3d jscomp.transpile \x3d function(code, path) {\n      // TODO(sdh): figure out some way to get this error to show up\n      // in test results, noting that the failure may occur in many\n      // different ways, including in loadModule() before the test\n      // runner even comes up.\n      goog.logToConsole_(path + suffix);\n      return code;\n    };\n  }\n  // Note: any transpilation errors/warnings will be logged to the console.\n  return transpile(code, path);\n};\n\n//\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\n// Language Enhancements\n//\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\n\n\n/**\n * This is a \x22fixed\x22 version of the typeof operator.  It differs from the typeof\n * operator in such a way that null returns \x27null\x27 and arrays return \x27array\x27.\n * @param {?} value The value to get the type of.\n * @return {string} The name of the type.\n */\ngoog.typeOf \x3d function(value) {\n  var s \x3d typeof value;\n  if (s \x3d\x3d \x27object\x27) {\n    if (value) {\n      // Check these first, so we can avoid calling Object.prototype.toString if\n      // possible.\n      //\n      // IE improperly marshals typeof across execution contexts, but a\n      // cross-context object will still return false for \x22instanceof Object\x22.\n      if (value instanceof Array) {\n        return \x27array\x27;\n      } else if (value instanceof Object) {\n        return s;\n      }\n\n      // HACK: In order to use an Object prototype method on the arbitrary\n      //   value, the compiler requires the value be cast to type Object,\n      //   even though the ECMA spec explicitly allows it.\n      var className \x3d Object.prototype.toString.call(\n          /** @type {!Object} */ (value));\n      // In Firefox 3.6, attempting to access iframe window objects\x27 length\n      // property throws an NS_ERROR_FAILURE, so we need to special-case it\n      // here.\n      if (className \x3d\x3d \x27[object Window]\x27) {\n        return \x27object\x27;\n      }\n\n      // We cannot always use constructor \x3d\x3d Array or instanceof Array because\n      // different frames have different Array objects. In IE6, if the iframe\n      // where the array was created is destroyed, the array loses its\n      // prototype. Then dereferencing val.splice here throws an exception, so\n      // we can\x27t use goog.isFunction. Calling typeof directly returns \x27unknown\x27\n      // so that will work. In this case, this function will return false and\n      // most array functions will still work because the array is still\n      // array-like (supports length and []) even though it has lost its\n      // prototype.\n      // Mark Miller noticed that Object.prototype.toString\n      // allows access to the unforgeable [[Class]] property.\n      //  15.2.4.2 Object.prototype.toString ( )\n      //  When the toString method is called, the following steps are taken:\n      //      1. Get the [[Class]] property of this object.\n      //      2. Compute a string value by concatenating the three strings\n      //         \x22[object \x22, Result(1), and \x22]\x22.\n      //      3. Return Result(2).\n      // and this behavior survives the destruction of the execution context.\n      if ((className \x3d\x3d \x27[object Array]\x27 ||\n           // In IE all non value types are wrapped as objects across window\n           // boundaries (not iframe though) so we have to do object detection\n           // for this edge case.\n           typeof value.length \x3d\x3d \x27number\x27 \x26\x26\n               typeof value.splice !\x3d \x27undefined\x27 \x26\x26\n               typeof value.propertyIsEnumerable !\x3d \x27undefined\x27 \x26\x26\n               !value.propertyIsEnumerable(\x27splice\x27)\n\n               )) {\n        return \x27array\x27;\n      }\n      // HACK: There is still an array case that fails.\n      //     function ArrayImpostor() {}\n      //     ArrayImpostor.prototype \x3d [];\n      //     var impostor \x3d new ArrayImpostor;\n      // this can be fixed by getting rid of the fast path\n      // (value instanceof Array) and solely relying on\n      // (value \x26\x26 Object.prototype.toString.vall(value) \x3d\x3d\x3d \x27[object Array]\x27)\n      // but that would require many more function calls and is not warranted\n      // unless closure code is receiving objects from untrusted sources.\n\n      // IE in cross-window calls does not correctly marshal the function type\n      // (it appears just as an object) so we cannot use just typeof val \x3d\x3d\n      // \x27function\x27. However, if the object has a call property, it is a\n      // function.\n      if ((className \x3d\x3d \x27[object Function]\x27 ||\n           typeof value.call !\x3d \x27undefined\x27 \x26\x26\n               typeof value.propertyIsEnumerable !\x3d \x27undefined\x27 \x26\x26\n               !value.propertyIsEnumerable(\x27call\x27))) {\n        return \x27function\x27;\n      }\n\n    } else {\n      return \x27null\x27;\n    }\n\n  } else if (s \x3d\x3d \x27function\x27 \x26\x26 typeof value.call \x3d\x3d \x27undefined\x27) {\n    // In Safari typeof nodeList returns \x27function\x27, and on Firefox typeof\n    // behaves similarly for HTML{Applet,Embed,Object}, Elements and RegExps. We\n    // would like to return object for those and we can detect an invalid\n    // function by making sure that the function object has a call method.\n    return \x27object\x27;\n  }\n  return s;\n};\n\n\n/**\n * Returns true if the specified value is null.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is null.\n */\ngoog.isNull \x3d function(val) {\n  return val \x3d\x3d\x3d null;\n};\n\n\n/**\n * Returns true if the specified value is defined and not null.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined and not null.\n */\ngoog.isDefAndNotNull \x3d function(val) {\n  // Note that undefined \x3d\x3d null.\n  return val !\x3d null;\n};\n\n\n/**\n * Returns true if the specified value is an array.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an array.\n */\ngoog.isArray \x3d function(val) {\n  return goog.typeOf(val) \x3d\x3d \x27array\x27;\n};\n\n\n/**\n * Returns true if the object looks like an array. To qualify as array like\n * the value needs to be either a NodeList or an object with a Number length\n * property. Note that for this function neither strings nor functions are\n * considered \x22array-like\x22.\n *\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an array.\n */\ngoog.isArrayLike \x3d function(val) {\n  var type \x3d goog.typeOf(val);\n  // We do not use goog.isObject here in order to exclude function values.\n  return type \x3d\x3d \x27array\x27 || type \x3d\x3d \x27object\x27 \x26\x26 typeof val.length \x3d\x3d \x27number\x27;\n};\n\n\n/**\n * Returns true if the object looks like a Date. To qualify as Date-like the\n * value needs to be an object and have a getFullYear() function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a like a Date.\n */\ngoog.isDateLike \x3d function(val) {\n  return goog.isObject(val) \x26\x26 typeof val.getFullYear \x3d\x3d \x27function\x27;\n};\n\n\n/**\n * Returns true if the specified value is a function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a function.\n */\ngoog.isFunction \x3d function(val) {\n  return goog.typeOf(val) \x3d\x3d \x27function\x27;\n};\n\n\n/**\n * Returns true if the specified value is an object.  This includes arrays and\n * functions.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an object.\n */\ngoog.isObject \x3d function(val) {\n  var type \x3d typeof val;\n  return type \x3d\x3d \x27object\x27 \x26\x26 val !\x3d null || type \x3d\x3d \x27function\x27;\n  // return Object(val) \x3d\x3d\x3d val also works, but is slower, especially if val is\n  // not an object.\n};\n\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. The unique ID is\n * guaranteed to be unique across the current session amongst objects that are\n * passed into `getUid`. There is no guarantee that the ID is unique or\n * consistent across sessions. It is unsafe to generate unique ID for function\n * prototypes.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {number} The unique ID for the object.\n */\ngoog.getUid \x3d function(obj) {\n  // TODO(arv): Make the type stricter, do not accept null.\n\n  // In Opera window.hasOwnProperty exists but always returns false so we avoid\n  // using it. As a consequence the unique ID generated for BaseClass.prototype\n  // and SubClass.prototype will be the same.\n  return obj[goog.UID_PROPERTY_] ||\n      (obj[goog.UID_PROPERTY_] \x3d ++goog.uidCounter_);\n};\n\n\n/**\n * Whether the given object is already assigned a unique ID.\n *\n * This does not modify the object.\n *\n * @param {!Object} obj The object to check.\n * @return {boolean} Whether there is an assigned unique id for the object.\n */\ngoog.hasUid \x3d function(obj) {\n  return !!obj[goog.UID_PROPERTY_];\n};\n\n\n/**\n * Removes the unique ID from an object. This is useful if the object was\n * previously mutated using `goog.getUid` in which case the mutation is\n * undone.\n * @param {Object} obj The object to remove the unique ID field from.\n */\ngoog.removeUid \x3d function(obj) {\n  // TODO(arv): Make the type stricter, do not accept null.\n\n  // In IE, DOM nodes are not instances of Object and throw an exception if we\n  // try to delete.  Instead we try to use removeAttribute.\n  if (obj !\x3d\x3d null \x26\x26 \x27removeAttribute\x27 in obj) {\n    obj.removeAttribute(goog.UID_PROPERTY_);\n  }\n\n  try {\n    delete obj[goog.UID_PROPERTY_];\n  } catch (ex) {\n  }\n};\n\n\n/**\n * Name for unique ID property. Initialized in a way to help avoid collisions\n * with other closure JavaScript on the same page.\n * @type {string}\n * @private\n */\ngoog.UID_PROPERTY_ \x3d \x27closure_uid_\x27 + ((Math.random() * 1e9) \x3e\x3e\x3e 0);\n\n\n/**\n * Counter for UID.\n * @type {number}\n * @private\n */\ngoog.uidCounter_ \x3d 0;\n\n\n/**\n * Adds a hash code field to an object. The hash code is unique for the\n * given object.\n * @param {Object} obj The object to get the hash code for.\n * @return {number} The hash code for the object.\n * @deprecated Use goog.getUid instead.\n */\ngoog.getHashCode \x3d goog.getUid;\n\n\n/**\n * Removes the hash code field from an object.\n * @param {Object} obj The object to remove the field from.\n * @deprecated Use goog.removeUid instead.\n */\ngoog.removeHashCode \x3d goog.removeUid;\n\n\n/**\n * Clones a value. The input may be an Object, Array, or basic type. Objects and\n * arrays will be cloned recursively.\n *\n * WARNINGS:\n * \x3ccode\x3egoog.cloneObject\x3c/code\x3e does not detect reference loops. Objects that\n * refer to themselves will cause infinite recursion.\n *\n * \x3ccode\x3egoog.cloneObject\x3c/code\x3e is unaware of unique identifiers, and copies\n * UIDs created by \x3ccode\x3egetUid\x3c/code\x3e into cloned results.\n *\n * @param {*} obj The value to clone.\n * @return {*} A clone of the input value.\n * @deprecated goog.cloneObject is unsafe. Prefer the goog.object methods.\n */\ngoog.cloneObject \x3d function(obj) {\n  var type \x3d goog.typeOf(obj);\n  if (type \x3d\x3d \x27object\x27 || type \x3d\x3d \x27array\x27) {\n    if (typeof obj.clone \x3d\x3d\x3d \x27function\x27) {\n      return obj.clone();\n    }\n    var clone \x3d type \x3d\x3d \x27array\x27 ? [] : {};\n    for (var key in obj) {\n      clone[key] \x3d goog.cloneObject(obj[key]);\n    }\n    return clone;\n  }\n\n  return obj;\n};\n\n\n/**\n * A native implementation of goog.bind.\n * @param {?function(this:T, ...)} fn A function to partially apply.\n * @param {T} selfObj Specifies the object which this should point to when the\n *     function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function goog.bind() was\n *     invoked as a method of.\n * @template T\n * @private\n */\ngoog.bindNative_ \x3d function(fn, selfObj, var_args) {\n  return /** @type {!Function} */ (fn.call.apply(fn.bind, arguments));\n};\n\n\n/**\n * A pure-JS implementation of goog.bind.\n * @param {?function(this:T, ...)} fn A function to partially apply.\n * @param {T} selfObj Specifies the object which this should point to when the\n *     function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function goog.bind() was\n *     invoked as a method of.\n * @template T\n * @private\n */\ngoog.bindJs_ \x3d function(fn, selfObj, var_args) {\n  if (!fn) {\n    throw new Error();\n  }\n\n  if (arguments.length \x3e 2) {\n    var boundArgs \x3d Array.prototype.slice.call(arguments, 2);\n    return function() {\n      // Prepend the bound arguments to the current arguments.\n      var newArgs \x3d Array.prototype.slice.call(arguments);\n      Array.prototype.unshift.apply(newArgs, boundArgs);\n      return fn.apply(selfObj, newArgs);\n    };\n\n  } else {\n    return function() {\n      return fn.apply(selfObj, arguments);\n    };\n  }\n};\n\n\n/**\n * Partially applies this function to a particular \x27this object\x27 and zero or\n * more arguments. The result is a new function with some arguments of the first\n * function pre-filled and the value of this \x27pre-specified\x27.\n *\n * Remaining arguments specified at call-time are appended to the pre-specified\n * ones.\n *\n * Also see: {@link #partial}.\n *\n * Usage:\n * \x3cpre\x3evar barMethBound \x3d goog.bind(myFunction, myObj, \x27arg1\x27, \x27arg2\x27);\n * barMethBound(\x27arg3\x27, \x27arg4\x27);\x3c/pre\x3e\n *\n * @param {?function(this:T, ...)} fn A function to partially apply.\n * @param {T} selfObj Specifies the object which this should point to when the\n *     function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function goog.bind() was\n *     invoked as a method of.\n * @template T\n * @suppress {deprecated} See above.\n */\ngoog.bind \x3d function(fn, selfObj, var_args) {\n  // TODO(nicksantos): narrow the type signature.\n  if (Function.prototype.bind \x26\x26\n      // NOTE(nicksantos): Somebody pulled base.js into the default Chrome\n      // extension environment. This means that for Chrome extensions, they get\n      // the implementation of Function.prototype.bind that calls goog.bind\n      // instead of the native one. Even worse, we don\x27t want to introduce a\n      // circular dependency between goog.bind and Function.prototype.bind, so\n      // we have to hack this to make sure it works correctly.\n      Function.prototype.bind.toString().indexOf(\x27native code\x27) !\x3d -1) {\n    goog.bind \x3d goog.bindNative_;\n  } else {\n    goog.bind \x3d goog.bindJs_;\n  }\n  return goog.bind.apply(null, arguments);\n};\n\n\n/**\n * Like goog.bind(), except that a \x27this object\x27 is not required. Useful when\n * the target function is already bound.\n *\n * Usage:\n * var g \x3d goog.partial(f, arg1, arg2);\n * g(arg3, arg4);\n *\n * @param {Function} fn A function to partially apply.\n * @param {...*} var_args Additional arguments that are partially applied to fn.\n * @return {!Function} A partially-applied form of the function goog.partial()\n *     was invoked as a method of.\n */\ngoog.partial \x3d function(fn, var_args) {\n  var args \x3d Array.prototype.slice.call(arguments, 1);\n  return function() {\n    // Clone the array (with slice()) and append additional arguments\n    // to the existing arguments.\n    var newArgs \x3d args.slice();\n    newArgs.push.apply(newArgs, arguments);\n    return fn.apply(this, newArgs);\n  };\n};\n\n\n/**\n * Copies all the members of a source object to a target object. This method\n * does not work on all browsers for all objects that contain keys such as\n * toString or hasOwnProperty. Use goog.object.extend for this purpose.\n * @param {Object} target Target.\n * @param {Object} source Source.\n */\ngoog.mixin \x3d function(target, source) {\n  for (var x in source) {\n    target[x] \x3d source[x];\n  }\n\n  // For IE7 or lower, the for-in-loop does not contain any properties that are\n  // not enumerable on the prototype object (for example, isPrototypeOf from\n  // Object.prototype) but also it will not include \x27replace\x27 on objects that\n  // extend String and change \x27replace\x27 (not that it is common for anyone to\n  // extend anything except Object).\n};\n\n\n/**\n * @return {number} An integer value representing the number of milliseconds\n *     between midnight, January 1, 1970 and the current time.\n */\ngoog.now \x3d (goog.TRUSTED_SITE \x26\x26 Date.now) || (function() {\n             // Unary plus operator converts its operand to a number which in\n             // the case of\n             // a date is done by calling getTime().\n             return +new Date();\n           });\n\n\n/**\n * Evals JavaScript in the global scope.  In IE this uses execScript, other\n * browsers use goog.global.eval. If goog.global.eval does not evaluate in the\n * global scope (for example, in Safari), appends a script tag instead.\n * Throws an exception if neither execScript or eval is defined.\n * @param {string} script JavaScript string.\n */\ngoog.globalEval \x3d function(script) {\n  if (goog.global.execScript) {\n    goog.global.execScript(script, \x27JavaScript\x27);\n  } else if (goog.global.eval) {\n    // Test to see if eval works\n    if (goog.evalWorksForGlobals_ \x3d\x3d null) {\n      try {\n        goog.global.eval(\x27var _evalTest_ \x3d 1;\x27);\n      } catch (ignore) {\n      }\n      if (typeof goog.global[\x27_evalTest_\x27] !\x3d \x27undefined\x27) {\n        try {\n          delete goog.global[\x27_evalTest_\x27];\n        } catch (ignore) {\n          // Microsoft edge fails the deletion above in strict mode.\n        }\n        goog.evalWorksForGlobals_ \x3d true;\n      } else {\n        goog.evalWorksForGlobals_ \x3d false;\n      }\n    }\n\n    if (goog.evalWorksForGlobals_) {\n      goog.global.eval(script);\n    } else {\n      /** @type {!Document} */\n      var doc \x3d goog.global.document;\n      var scriptElt \x3d\n          /** @type {!HTMLScriptElement} */ (doc.createElement(\x27SCRIPT\x27));\n      scriptElt.type \x3d \x27text/javascript\x27;\n      scriptElt.defer \x3d false;\n      // Note(pupius): can\x27t use .innerHTML since \x22t(\x27\x3ctest\x3e\x27)\x22 will fail and\n      // .text doesn\x27t work in Safari 2.  Therefore we append a text node.\n      scriptElt.appendChild(doc.createTextNode(script));\n      doc.head.appendChild(scriptElt);\n      doc.head.removeChild(scriptElt);\n    }\n  } else {\n    throw new Error(\x27goog.globalEval not available\x27);\n  }\n};\n\n\n/**\n * Indicates whether or not we can call \x27eval\x27 directly to eval code in the\n * global scope. Set to a Boolean by the first call to goog.globalEval (which\n * empirically tests whether eval works for globals). @see goog.globalEval\n * @type {?boolean}\n * @private\n */\ngoog.evalWorksForGlobals_ \x3d null;\n\n\n/**\n * Optional map of CSS class names to obfuscated names used with\n * goog.getCssName().\n * @private {!Object\x3cstring, string\x3e|undefined}\n * @see goog.setCssNameMapping\n */\ngoog.cssNameMapping_;\n\n\n/**\n * Optional obfuscation style for CSS class names. Should be set to either\n * \x27BY_WHOLE\x27 or \x27BY_PART\x27 if defined.\n * @type {string|undefined}\n * @private\n * @see goog.setCssNameMapping\n */\ngoog.cssNameMappingStyle_;\n\n\n\n/**\n * A hook for modifying the default behavior goog.getCssName. The function\n * if present, will receive the standard output of the goog.getCssName as\n * its input.\n *\n * @type {(function(string):string)|undefined}\n */\ngoog.global.CLOSURE_CSS_NAME_MAP_FN;\n\n\n/**\n * Handles strings that are intended to be used as CSS class names.\n *\n * This function works in tandem with @see goog.setCssNameMapping.\n *\n * Without any mapping set, the arguments are simple joined with a hyphen and\n * passed through unaltered.\n *\n * When there is a mapping, there are two possible styles in which these\n * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)\n * of the passed in css name is rewritten according to the map. In the BY_WHOLE\n * style, the full css name is looked up in the map directly. If a rewrite is\n * not specified by the map, the compiler will output a warning.\n *\n * When the mapping is passed to the compiler, it will replace calls to\n * goog.getCssName with the strings from the mapping, e.g.\n *     var x \x3d goog.getCssName(\x27foo\x27);\n *     var y \x3d goog.getCssName(this.baseClass, \x27active\x27);\n *  becomes:\n *     var x \x3d \x27foo\x27;\n *     var y \x3d this.baseClass + \x27-active\x27;\n *\n * If one argument is passed it will be processed, if two are passed only the\n * modifier will be processed, as it is assumed the first argument was generated\n * as a result of calling goog.getCssName.\n *\n * @param {string} className The class name.\n * @param {string\x3d} opt_modifier A modifier to be appended to the class name.\n * @return {string} The class name or the concatenation of the class name and\n *     the modifier.\n */\ngoog.getCssName \x3d function(className, opt_modifier) {\n  // String() is used for compatibility with compiled soy where the passed\n  // className can be non-string objects.\n  if (String(className).charAt(0) \x3d\x3d \x27.\x27) {\n    throw new Error(\n        \x27className passed in goog.getCssName must not start with \x22.\x22.\x27 +\n        \x27 You passed: \x27 + className);\n  }\n\n  var getMapping \x3d function(cssName) {\n    return goog.cssNameMapping_[cssName] || cssName;\n  };\n\n  var renameByParts \x3d function(cssName) {\n    // Remap all the parts individually.\n    var parts \x3d cssName.split(\x27-\x27);\n    var mapped \x3d [];\n    for (var i \x3d 0; i \x3c parts.length; i++) {\n      mapped.push(getMapping(parts[i]));\n    }\n    return mapped.join(\x27-\x27);\n  };\n\n  var rename;\n  if (goog.cssNameMapping_) {\n    rename \x3d\n        goog.cssNameMappingStyle_ \x3d\x3d \x27BY_WHOLE\x27 ? getMapping : renameByParts;\n  } else {\n    rename \x3d function(a) {\n      return a;\n    };\n  }\n\n  var result \x3d\n      opt_modifier ? className + \x27-\x27 + rename(opt_modifier) : rename(className);\n\n  // The special CLOSURE_CSS_NAME_MAP_FN allows users to specify further\n  // processing of the class name.\n  if (goog.global.CLOSURE_CSS_NAME_MAP_FN) {\n    return goog.global.CLOSURE_CSS_NAME_MAP_FN(result);\n  }\n\n  return result;\n};\n\n\n/**\n * Sets the map to check when returning a value from goog.getCssName(). Example:\n * \x3cpre\x3e\n * goog.setCssNameMapping({\n *   \x22goog\x22: \x22a\x22,\n *   \x22disabled\x22: \x22b\x22,\n * });\n *\n * var x \x3d goog.getCssName(\x27goog\x27);\n * // The following evaluates to: \x22a a-b\x22.\n * goog.getCssName(\x27goog\x27) + \x27 \x27 + goog.getCssName(x, \x27disabled\x27)\n * \x3c/pre\x3e\n * When declared as a map of string literals to string literals, the JSCompiler\n * will replace all calls to goog.getCssName() using the supplied map if the\n * --process_closure_primitives flag is set.\n *\n * @param {!Object} mapping A map of strings to strings where keys are possible\n *     arguments to goog.getCssName() and values are the corresponding values\n *     that should be returned.\n * @param {string\x3d} opt_style The style of css name mapping. There are two valid\n *     options: \x27BY_PART\x27, and \x27BY_WHOLE\x27.\n * @see goog.getCssName for a description.\n */\ngoog.setCssNameMapping \x3d function(mapping, opt_style) {\n  goog.cssNameMapping_ \x3d mapping;\n  goog.cssNameMappingStyle_ \x3d opt_style;\n};\n\n\n/**\n * To use CSS renaming in compiled mode, one of the input files should have a\n * call to goog.setCssNameMapping() with an object literal that the JSCompiler\n * can extract and use to replace all calls to goog.getCssName(). In uncompiled\n * mode, JavaScript code should be loaded before this base.js file that declares\n * a global variable, CLOSURE_CSS_NAME_MAPPING, which is used below. This is\n * to ensure that the mapping is loaded before any calls to goog.getCssName()\n * are made in uncompiled mode.\n *\n * A hook for overriding the CSS name mapping.\n * @type {!Object\x3cstring, string\x3e|undefined}\n */\ngoog.global.CLOSURE_CSS_NAME_MAPPING;\n\n\nif (!COMPILED \x26\x26 goog.global.CLOSURE_CSS_NAME_MAPPING) {\n  // This does not call goog.setCssNameMapping() because the JSCompiler\n  // requires that goog.setCssNameMapping() be called with an object literal.\n  goog.cssNameMapping_ \x3d goog.global.CLOSURE_CSS_NAME_MAPPING;\n}\n\n\n/**\n * Gets a localized message.\n *\n * This function is a compiler primitive. If you give the compiler a localized\n * message bundle, it will replace the string at compile-time with a localized\n * version, and expand goog.getMsg call to a concatenated string.\n *\n * Messages must be initialized in the form:\n * \x3ccode\x3e\n * var MSG_NAME \x3d goog.getMsg(\x27Hello {$placeholder}\x27, {\x27placeholder\x27: \x27world\x27});\n * \x3c/code\x3e\n *\n * This function produces a string which should be treated as plain text. Use\n * {@link goog.html.SafeHtmlFormatter} in conjunction with goog.getMsg to\n * produce SafeHtml.\n *\n * @param {string} str Translatable string, places holders in the form {$foo}.\n * @param {Object\x3cstring, string\x3e\x3d} opt_values Maps place holder name to value.\n * @return {string} message with placeholders filled.\n */\ngoog.getMsg \x3d function(str, opt_values) {\n  if (opt_values) {\n    str \x3d str.replace(/\\{\\$([^}]+)}/g, function(match, key) {\n      return (opt_values !\x3d null \x26\x26 key in opt_values) ? opt_values[key] :\n                                                         match;\n    });\n  }\n  return str;\n};\n\n\n/**\n * Gets a localized message. If the message does not have a translation, gives a\n * fallback message.\n *\n * This is useful when introducing a new message that has not yet been\n * translated into all languages.\n *\n * This function is a compiler primitive. Must be used in the form:\n * \x3ccode\x3evar x \x3d goog.getMsgWithFallback(MSG_A, MSG_B);\x3c/code\x3e\n * where MSG_A and MSG_B were initialized with goog.getMsg.\n *\n * @param {string} a The preferred message.\n * @param {string} b The fallback message.\n * @return {string} The best translated message.\n */\ngoog.getMsgWithFallback \x3d function(a, b) {\n  return a;\n};\n\n\n/**\n * Exposes an unobfuscated global namespace path for the given object.\n * Note that fields of the exported object *will* be obfuscated, unless they are\n * exported in turn via this function or goog.exportProperty.\n *\n * Also handy for making public items that are defined in anonymous closures.\n *\n * ex. goog.exportSymbol(\x27public.path.Foo\x27, Foo);\n *\n * ex. goog.exportSymbol(\x27public.path.Foo.staticFunction\x27, Foo.staticFunction);\n *     public.path.Foo.staticFunction();\n *\n * ex. goog.exportSymbol(\x27public.path.Foo.prototype.myMethod\x27,\n *                       Foo.prototype.myMethod);\n *     new public.path.Foo().myMethod();\n *\n * @param {string} publicPath Unobfuscated name to export.\n * @param {*} object Object the name should point to.\n * @param {Object\x3d} opt_objectToExportTo The object to add the path to; default\n *     is goog.global.\n */\ngoog.exportSymbol \x3d function(publicPath, object, opt_objectToExportTo) {\n  goog.exportPath_(publicPath, object, opt_objectToExportTo);\n};\n\n\n/**\n * Exports a property unobfuscated into the object\x27s namespace.\n * ex. goog.exportProperty(Foo, \x27staticFunction\x27, Foo.staticFunction);\n * ex. goog.exportProperty(Foo.prototype, \x27myMethod\x27, Foo.prototype.myMethod);\n * @param {Object} object Object whose static property is being exported.\n * @param {string} publicName Unobfuscated name to export.\n * @param {*} symbol Object the name should point to.\n */\ngoog.exportProperty \x3d function(object, publicName, symbol) {\n  object[publicName] \x3d symbol;\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * Usage:\n * \x3cpre\x3e\n * function ParentClass(a, b) { }\n * ParentClass.prototype.foo \x3d function(a) { };\n *\n * function ChildClass(a, b, c) {\n *   ChildClass.base(this, \x27constructor\x27, a, b);\n * }\n * goog.inherits(ChildClass, ParentClass);\n *\n * var child \x3d new ChildClass(\x27a\x27, \x27b\x27, \x27see\x27);\n * child.foo(); // This works.\n * \x3c/pre\x3e\n *\n * @param {!Function} childCtor Child class.\n * @param {!Function} parentCtor Parent class.\n * @suppress {strictMissingProperties} superClass_ and base is not defined on\n *    Function.\n */\ngoog.inherits \x3d function(childCtor, parentCtor) {\n  /** @constructor */\n  function tempCtor() {}\n  tempCtor.prototype \x3d parentCtor.prototype;\n  childCtor.superClass_ \x3d parentCtor.prototype;\n  childCtor.prototype \x3d new tempCtor();\n  /** @override */\n  childCtor.prototype.constructor \x3d childCtor;\n\n  /**\n   * Calls superclass constructor/method.\n   *\n   * This function is only available if you use goog.inherits to\n   * express inheritance relationships between classes.\n   *\n   * NOTE: This is a replacement for goog.base and for superClass_\n   * property defined in childCtor.\n   *\n   * @param {!Object} me Should always be \x22this\x22.\n   * @param {string} methodName The method name to call. Calling\n   *     superclass constructor can be done with the special string\n   *     \x27constructor\x27.\n   * @param {...*} var_args The arguments to pass to superclass\n   *     method/constructor.\n   * @return {*} The return value of the superclass method/constructor.\n   */\n  childCtor.base \x3d function(me, methodName, var_args) {\n    // Copying using loop to avoid deop due to passing arguments object to\n    // function. This is faster in many JS engines as of late 2014.\n    var args \x3d new Array(arguments.length - 2);\n    for (var i \x3d 2; i \x3c arguments.length; i++) {\n      args[i - 2] \x3d arguments[i];\n    }\n    return parentCtor.prototype[methodName].apply(me, args);\n  };\n};\n\n\n/**\n * Call up to the superclass.\n *\n * If this is called from a constructor, then this calls the superclass\n * constructor with arguments 1-N.\n *\n * If this is called from a prototype method, then you must pass the name of the\n * method as the second argument to this function. If you do not, you will get a\n * runtime error. This calls the superclass\x27 method with arguments 2-N.\n *\n * This function only works if you use goog.inherits to express inheritance\n * relationships between your classes.\n *\n * This function is a compiler primitive. At compile-time, the compiler will do\n * macro expansion to remove a lot of the extra overhead that this function\n * introduces. The compiler will also enforce a lot of the assumptions that this\n * function makes, and treat it as a compiler error if you break them.\n *\n * @param {!Object} me Should always be \x22this\x22.\n * @param {*\x3d} opt_methodName The method name if calling a super method.\n * @param {...*} var_args The rest of the arguments.\n * @return {*} The return value of the superclass method.\n * @suppress {es5Strict} This method can not be used in strict mode, but\n *     all Closure Library consumers must depend on this file.\n * @deprecated goog.base is not strict mode compatible.  Prefer the static\n *     \x22base\x22 method added to the constructor by goog.inherits\n *     or ES6 classes and the \x22super\x22 keyword.\n */\ngoog.base \x3d function(me, opt_methodName, var_args) {\n  var caller \x3d arguments.callee.caller;\n\n  if (goog.STRICT_MODE_COMPATIBLE || (goog.DEBUG \x26\x26 !caller)) {\n    throw new Error(\n        \x27arguments.caller not defined.  goog.base() cannot be used \x27 +\n        \x27with strict mode code. See \x27 +\n        \x27http://www.ecma-international.org/ecma-262/5.1/#sec-C\x27);\n  }\n\n  if (typeof caller.superClass_ !\x3d\x3d \x27undefined\x27) {\n    // Copying using loop to avoid deop due to passing arguments object to\n    // function. This is faster in many JS engines as of late 2014.\n    var ctorArgs \x3d new Array(arguments.length - 1);\n    for (var i \x3d 1; i \x3c arguments.length; i++) {\n      ctorArgs[i - 1] \x3d arguments[i];\n    }\n    // This is a constructor. Call the superclass constructor.\n    return caller.superClass_.constructor.apply(me, ctorArgs);\n  }\n\n  if (typeof opt_methodName !\x3d \x27string\x27 \x26\x26 typeof opt_methodName !\x3d \x27symbol\x27) {\n    throw new Error(\n        \x27method names provided to goog.base must be a string or a symbol\x27);\n  }\n\n  // Copying using loop to avoid deop due to passing arguments object to\n  // function. This is faster in many JS engines as of late 2014.\n  var args \x3d new Array(arguments.length - 2);\n  for (var i \x3d 2; i \x3c arguments.length; i++) {\n    args[i - 2] \x3d arguments[i];\n  }\n  var foundCaller \x3d false;\n  for (var ctor \x3d me.constructor; ctor;\n       ctor \x3d ctor.superClass_ \x26\x26 ctor.superClass_.constructor) {\n    if (ctor.prototype[opt_methodName] \x3d\x3d\x3d caller) {\n      foundCaller \x3d true;\n    } else if (foundCaller) {\n      return ctor.prototype[opt_methodName].apply(me, args);\n    }\n  }\n\n  // If we did not find the caller in the prototype chain, then one of two\n  // things happened:\n  // 1) The caller is an instance method.\n  // 2) This method was not called by the right caller.\n  if (me[opt_methodName] \x3d\x3d\x3d caller) {\n    return me.constructor.prototype[opt_methodName].apply(me, args);\n  } else {\n    throw new Error(\n        \x27goog.base called from a method of one name \x27 +\n        \x27to a method of a different name\x27);\n  }\n};\n\n\n/**\n * Allow for aliasing within scope functions.  This function exists for\n * uncompiled code - in compiled code the calls will be inlined and the aliases\n * applied.  In uncompiled code the function is simply run since the aliases as\n * written are valid JavaScript.\n *\n * MOE:begin_intracomment_strip\n * See the goog.scope document at http://go/goog.scope\n * MOE:end_intracomment_strip\n *\n * @param {function()} fn Function to call.  This function can contain aliases\n *     to namespaces (e.g. \x22var dom \x3d goog.dom\x22) or classes\n *     (e.g. \x22var Timer \x3d goog.Timer\x22).\n */\ngoog.scope \x3d function(fn) {\n  if (goog.isInModuleLoader_()) {\n    throw new Error(\x27goog.scope is not supported within a module.\x27);\n  }\n  fn.call(goog.global);\n};\n\n\n/*\n * To support uncompiled, strict mode bundles that use eval to divide source\n * like so:\n *    eval(\x27someSource;//# sourceUrl sourcefile.js\x27);\n * We need to export the globally defined symbols \x22goog\x22 and \x22COMPILED\x22.\n * Exporting \x22goog\x22 breaks the compiler optimizations, so we required that\n * be defined externally.\n * NOTE: We don\x27t use goog.exportSymbol here because we don\x27t want to trigger\n * extern generation when that compiler option is enabled.\n */\nif (!COMPILED) {\n  goog.global[\x27COMPILED\x27] \x3d COMPILED;\n}\n\n\n//\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\n// goog.defineClass implementation\n//\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\x3d\n\n\n/**\n * Creates a restricted form of a Closure \x22class\x22:\n *   - from the compiler\x27s perspective, the instance returned from the\n *     constructor is sealed (no new properties may be added).  This enables\n *     better checks.\n *   - the compiler will rewrite this definition to a form that is optimal\n *     for type checking and optimization (initially this will be a more\n *     traditional form).\n *\n * @param {Function} superClass The superclass, Object or null.\n * @param {goog.defineClass.ClassDescriptor} def\n *     An object literal describing\n *     the class.  It may have the following properties:\n *     \x22constructor\x22: the constructor function\n *     \x22statics\x22: an object literal containing methods to add to the constructor\n *        as \x22static\x22 methods or a function that will receive the constructor\n *        function as its only parameter to which static properties can\n *        be added.\n *     all other properties are added to the prototype.\n * @return {!Function} The class constructor.\n */\ngoog.defineClass \x3d function(superClass, def) {\n  // TODO(johnlenz): consider making the superClass an optional parameter.\n  var constructor \x3d def.constructor;\n  var statics \x3d def.statics;\n  // Wrap the constructor prior to setting up the prototype and static methods.\n  if (!constructor || constructor \x3d\x3d Object.prototype.constructor) {\n    constructor \x3d function() {\n      throw new Error(\n          \x27cannot instantiate an interface (no constructor defined).\x27);\n    };\n  }\n\n  var cls \x3d goog.defineClass.createSealingConstructor_(constructor, superClass);\n  if (superClass) {\n    goog.inherits(cls, superClass);\n  }\n\n  // Remove all the properties that should not be copied to the prototype.\n  delete def.constructor;\n  delete def.statics;\n\n  goog.defineClass.applyProperties_(cls.prototype, def);\n  if (statics !\x3d null) {\n    if (statics instanceof Function) {\n      statics(cls);\n    } else {\n      goog.defineClass.applyProperties_(cls, statics);\n    }\n  }\n\n  return cls;\n};\n\n\n/**\n * @typedef {{\n *   constructor: (!Function|undefined),\n *   statics: (Object|undefined|function(Function):void)\n * }}\n */\ngoog.defineClass.ClassDescriptor;\n\n\n/**\n * @define {boolean} Whether the instances returned by goog.defineClass should\n *     be sealed when possible.\n *\n * When sealing is disabled the constructor function will not be wrapped by\n * goog.defineClass, making it incompatible with ES6 class methods.\n */\ngoog.define(\x27goog.defineClass.SEAL_CLASS_INSTANCES\x27, goog.DEBUG);\n\n\n/**\n * If goog.defineClass.SEAL_CLASS_INSTANCES is enabled and Object.seal is\n * defined, this function will wrap the constructor in a function that seals the\n * results of the provided constructor function.\n *\n * @param {!Function} ctr The constructor whose results maybe be sealed.\n * @param {Function} superClass The superclass constructor.\n * @return {!Function} The replacement constructor.\n * @private\n */\ngoog.defineClass.createSealingConstructor_ \x3d function(ctr, superClass) {\n  if (!goog.defineClass.SEAL_CLASS_INSTANCES) {\n    // Do now wrap the constructor when sealing is disabled. Angular code\n    // depends on this for injection to work properly.\n    return ctr;\n  }\n\n  // Compute whether the constructor is sealable at definition time, rather\n  // than when the instance is being constructed.\n  var superclassSealable \x3d !goog.defineClass.isUnsealable_(superClass);\n\n  /**\n   * @this {Object}\n   * @return {?}\n   */\n  var wrappedCtr \x3d function() {\n    // Don\x27t seal an instance of a subclass when it calls the constructor of\n    // its super class as there is most likely still setup to do.\n    var instance \x3d ctr.apply(this, arguments) || this;\n    instance[goog.UID_PROPERTY_] \x3d instance[goog.UID_PROPERTY_];\n\n    if (this.constructor \x3d\x3d\x3d wrappedCtr \x26\x26 superclassSealable \x26\x26\n        Object.seal instanceof Function) {\n      Object.seal(instance);\n    }\n    return instance;\n  };\n\n  return wrappedCtr;\n};\n\n\n/**\n * @param {Function} ctr The constructor to test.\n * @return {boolean} Whether the constructor has been tagged as unsealable\n *     using goog.tagUnsealableClass.\n * @private\n */\ngoog.defineClass.isUnsealable_ \x3d function(ctr) {\n  return ctr \x26\x26 ctr.prototype \x26\x26\n      ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_];\n};\n\n\n// TODO(johnlenz): share these values with the goog.object\n/**\n * The names of the fields that are defined on Object.prototype.\n * @type {!Array\x3cstring\x3e}\n * @private\n * @const\n */\ngoog.defineClass.OBJECT_PROTOTYPE_FIELDS_ \x3d [\n  \x27constructor\x27, \x27hasOwnProperty\x27, \x27isPrototypeOf\x27, \x27propertyIsEnumerable\x27,\n  \x27toLocaleString\x27, \x27toString\x27, \x27valueOf\x27\n];\n\n\n// TODO(johnlenz): share this function with the goog.object\n/**\n * @param {!Object} target The object to add properties to.\n * @param {!Object} source The object to copy properties from.\n * @private\n */\ngoog.defineClass.applyProperties_ \x3d function(target, source) {\n  // TODO(johnlenz): update this to support ES5 getters/setters\n\n  var key;\n  for (key in source) {\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] \x3d source[key];\n    }\n  }\n\n  // For IE the for-in-loop does not contain any properties that are not\n  // enumerable on the prototype object (for example isPrototypeOf from\n  // Object.prototype) and it will also not include \x27replace\x27 on objects that\n  // extend String and change \x27replace\x27 (not that it is common for anyone to\n  // extend anything except Object).\n  for (var i \x3d 0; i \x3c goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {\n    key \x3d goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] \x3d source[key];\n    }\n  }\n};\n\n\n/**\n * Sealing classes breaks the older idiom of assigning properties on the\n * prototype rather than in the constructor. As such, goog.defineClass\n * must not seal subclasses of these old-style classes until they are fixed.\n * Until then, this marks a class as \x22broken\x22, instructing defineClass\n * not to seal subclasses.\n * @param {!Function} ctr The legacy constructor to tag as unsealable.\n */\ngoog.tagUnsealableClass \x3d function(ctr) {\n  if (!COMPILED \x26\x26 goog.defineClass.SEAL_CLASS_INSTANCES) {\n    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] \x3d true;\n  }\n};\n\n\n/**\n * Name for unsealable tag property.\n * @const @private {string}\n */\ngoog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ \x3d \x27goog_defineClass_legacy_unsealable\x27;\n\n\n// There\x27s a bug in the compiler where without collapse properties the\n// Closure namespace defines do not guard code correctly. To help reduce code\n// size also check for !COMPILED even though it redundant until this is fixed.\nif (!COMPILED \x26\x26 goog.DEPENDENCIES_ENABLED) {\n  // MOE:begin_strip\n  // TODO(b/67050526) This object is obsolete but some people are relying on\n  // it internally. Keep it around until we migrate them.\n  /**\n   * @private\n   * @type {{\n   *   loadFlags: !Object\x3cstring, !Object\x3cstring, string\x3e\x3e,\n   *   nameToPath: !Object\x3cstring, string\x3e,\n   *   requires: !Object\x3cstring, !Object\x3cstring, boolean\x3e\x3e,\n   *   visited: !Object\x3cstring, boolean\x3e,\n   *   written: !Object\x3cstring, boolean\x3e,\n   *   deferred: !Object\x3cstring, string\x3e\n   * }}\n   */\n  goog.dependencies_ \x3d {\n    loadFlags: {},  // 1 to 1\n\n    nameToPath: {},  // 1 to 1\n\n    requires: {},  // 1 to many\n\n    // Used when resolving dependencies to prevent us from visiting file\n    // twice.\n    visited: {},\n\n    written: {},  // Used to keep track of script files we have written.\n\n    deferred: {}  // Used to track deferred module evaluations in old IEs\n  };\n\n  /**\n   * @return {!Object}\n   * @private\n   */\n  goog.getLoader_ \x3d function() {\n    return {\n      dependencies_: goog.dependencies_,\n      writeScriptTag_: goog.writeScriptTag_\n    };\n  };\n\n\n  /**\n   * @param {string} src The script url.\n   * @param {string\x3d} opt_sourceText The optionally source text to evaluate\n   * @return {boolean} True if the script was imported, false otherwise.\n   * @private\n   */\n  goog.writeScriptTag_ \x3d function(src, opt_sourceText) {\n    if (goog.inHtmlDocument_()) {\n      /** @type {!HTMLDocument} */\n      var doc \x3d goog.global.document;\n\n      // If the user tries to require a new symbol after document load,\n      // something has gone terribly wrong. Doing a document.write would\n      // wipe out the page. This does not apply to the CSP-compliant method\n      // of writing script tags.\n      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING \x26\x26\n          doc.readyState \x3d\x3d \x27complete\x27) {\n        // Certain test frameworks load base.js multiple times, which tries\n        // to write deps.js each time. If that happens, just fail silently.\n        // These frameworks wipe the page between each load of base.js, so this\n        // is OK.\n        var isDeps \x3d /\\bdeps.js$/.test(src);\n        if (isDeps) {\n          return false;\n        } else {\n          throw Error(\x27Cannot write \x22\x27 + src + \x27\x22 after document load\x27);\n        }\n      }\n\n      if (opt_sourceText \x3d\x3d\x3d undefined) {\n        doc.write(\n            \x27\x3cscript type\x3d\x22text/javascript\x22 src\x3d\x22\x27 + src + \x27\x22\x3e\x3c/\x27 +\n            \x27script\x3e\x27);\n      } else {\n        doc.write(\n            \x27\x3cscript type\x3d\x22text/javascript\x22\x3e\x27 +\n            goog.protectScriptTag_(opt_sourceText) + \x27\x3c/\x27 +\n            \x27script\x3e\x27);\n      }\n      return true;\n    } else {\n      return false;\n    }\n  };\n  // MOE:end_strip\n\n  /**\n   * Tries to detect whether is in the context of an HTML document.\n   * @return {boolean} True if it looks like HTML document.\n   * @private\n   */\n  goog.inHtmlDocument_ \x3d function() {\n    /** @type {!Document} */\n    var doc \x3d goog.global.document;\n    return doc !\x3d null \x26\x26 \x27write\x27 in doc;  // XULDocument misses write.\n  };\n\n\n  /**\n   * We\x27d like to check for if the document readyState is \x27loading\x27; however\n   * there are bugs on IE 10 and below where the readyState being anything other\n   * than \x27complete\x27 is not reliable.\n   * @return {boolean}\n   * @private\n   */\n  goog.isDocumentLoading_ \x3d function() {\n    // attachEvent is available on IE 6 thru 10 only, and thus can be used to\n    // detect those browsers.\n    /** @type {!HTMLDocument} */\n    var doc \x3d goog.global.document;\n    return doc.attachEvent ? doc.readyState !\x3d \x27complete\x27 :\n                             doc.readyState \x3d\x3d \x27loading\x27;\n  };\n\n\n  /**\n   * Tries to detect the base path of base.js script that bootstraps Closure.\n   * @private\n   */\n  goog.findBasePath_ \x3d function() {\n    if (goog.isDef(goog.global.CLOSURE_BASE_PATH) \x26\x26\n        // Anti DOM-clobbering runtime check (b/37736576).\n        goog.isString(goog.global.CLOSURE_BASE_PATH)) {\n      goog.basePath \x3d goog.global.CLOSURE_BASE_PATH;\n      return;\n    } else if (!goog.inHtmlDocument_()) {\n      return;\n    }\n    /** @type {!Document} */\n    var doc \x3d goog.global.document;\n    // If we have a currentScript available, use it exclusively.\n    var currentScript \x3d doc.currentScript;\n    if (currentScript) {\n      var scripts \x3d [currentScript];\n    } else {\n      var scripts \x3d doc.getElementsByTagName(\x27SCRIPT\x27);\n    }\n    // Search backwards since the current script is in almost all cases the one\n    // that has base.js.\n    for (var i \x3d scripts.length - 1; i \x3e\x3d 0; --i) {\n      var script \x3d /** @type {!HTMLScriptElement} */ (scripts[i]);\n      var src \x3d script.src;\n      var qmark \x3d src.lastIndexOf(\x27?\x27);\n      var l \x3d qmark \x3d\x3d -1 ? src.length : qmark;\n      if (src.substr(l - 7, 7) \x3d\x3d \x27base.js\x27) {\n        goog.basePath \x3d src.substr(0, l - 7);\n        return;\n      }\n    }\n  };\n\n  goog.findBasePath_();\n\n  /** @struct @constructor @final */\n  goog.Transpiler \x3d function() {\n    /** @private {?Object\x3cstring, boolean\x3e} */\n    this.requiresTranspilation_ \x3d null;\n  };\n\n\n  // MOE:begin_strip\n  // LINT.IfChange\n  // MOE:end_strip\n  /**\n   * Returns a newly created map from language mode string to a boolean\n   * indicating whether transpilation should be done for that mode.\n   *\n   * Guaranteed invariant:\n   * For any two modes, l1 and l2 where l2 is a newer mode than l1,\n   * `map[l1] \x3d\x3d true` implies that `map[l2] \x3d\x3d true`.\n   *\n   * Note this method is extracted and used elsewhere, so it cannot rely on\n   * anything external (it should easily be able to be transformed into a\n   * standalone, top level function).\n   *\n   * @private\n   * @return {!Object\x3cstring, boolean\x3e}\n   */\n  goog.Transpiler.prototype.createRequiresTranspilation_ \x3d function() {\n    var /** !Object\x3cstring, boolean\x3e */ requiresTranspilation \x3d {\x27es3\x27: false};\n    var transpilationRequiredForAllLaterModes \x3d false;\n\n    /**\n     * Adds an entry to requiresTranspliation for the given language mode.\n     *\n     * IMPORTANT: Calls must be made in order from oldest to newest language\n     * mode.\n     * @param {string} modeName\n     * @param {function(): boolean} isSupported Returns true if the JS engine\n     *     supports the given mode.\n     */\n    function addNewerLanguageTranspilationCheck(modeName, isSupported) {\n      if (transpilationRequiredForAllLaterModes) {\n        requiresTranspilation[modeName] \x3d true;\n      } else if (isSupported()) {\n        requiresTranspilation[modeName] \x3d false;\n      } else {\n        requiresTranspilation[modeName] \x3d true;\n        transpilationRequiredForAllLaterModes \x3d true;\n      }\n    }\n\n    /**\n     * Does the given code evaluate without syntax errors and return a truthy\n     * result?\n     */\n    function /** boolean */ evalCheck(/** string */ code) {\n      try {\n        return !!eval(code);\n      } catch (ignored) {\n        return false;\n      }\n    }\n\n    var userAgent \x3d goog.global.navigator \x26\x26 goog.global.navigator.userAgent ?\n        goog.global.navigator.userAgent :\n        \x27\x27;\n\n    // Identify ES3-only browsers by their incorrect treatment of commas.\n    addNewerLanguageTranspilationCheck(\x27es5\x27, function() {\n      return evalCheck(\x27[1,].length\x3d\x3d1\x27);\n    });\n    addNewerLanguageTranspilationCheck(\x27es6\x27, function() {\n      // Edge has a non-deterministic (i.e., not reproducible) bug with ES6:\n      // https://github.com/Microsoft/ChakraCore/issues/1496.\n      // MOE:begin_strip\n      // TODO(joeltine): Our internal web-testing version of Edge will need to\n      // be updated before we can remove this check. See http://b/34945376.\n      // MOE:end_strip\n      var re \x3d /Edge\\/(\\d+)(\\.\\d)*/i;\n      var edgeUserAgent \x3d userAgent.match(re);\n      if (edgeUserAgent \x26\x26 Number(edgeUserAgent[1]) \x3c 15) {\n        return false;\n      }\n      // Test es6: [FF50 (?), Edge 14 (?), Chrome 50]\n      //   (a) default params (specifically shadowing locals),\n      //   (b) destructuring, (c) block-scoped functions,\n      //   (d) for-of (const), (e) new.target/Reflect.construct\n      var es6fullTest \x3d\n          \x27class X{constructor(){if(new.target!\x3dString)throw 1;this.x\x3d42}}\x27 +\n          \x27let q\x3dReflect.construct(X,[],String);if(q.x!\x3d42||!(q instanceof \x27 +\n          \x27String))throw 1;for(const a of[2,3]){if(a\x3d\x3d2)continue;function \x27 +\n          \x27f(z\x3d{a}){let a\x3d0;return z.a}{function f(){return 0;}}return f()\x27 +\n          \x27\x3d\x3d3}\x27;\n\n      return evalCheck(\x27(()\x3d\x3e{\x22use strict\x22;\x27 + es6fullTest + \x27})()\x27);\n    });\n    // TODO(joeltine): Remove es6-impl references for b/31340605.\n    // Consider es6-impl (widely-implemented es6 features) to be supported\n    // whenever es6 is supported. Technically es6-impl is a lower level of\n    // support than es6, but we don\x27t have tests specifically for it.\n    addNewerLanguageTranspilationCheck(\x27es6-impl\x27, function() {\n      return true;\n    });\n    // ** and **\x3d are the only new features in \x27es7\x27\n    addNewerLanguageTranspilationCheck(\x27es7\x27, function() {\n      return evalCheck(\x272 ** 2 \x3d\x3d 4\x27);\n    });\n    // async functions are the only new features in \x27es8\x27\n    addNewerLanguageTranspilationCheck(\x27es8\x27, function() {\n      return evalCheck(\x27async () \x3d\x3e 1, true\x27);\n    });\n    addNewerLanguageTranspilationCheck(\x27es9\x27, function() {\n      return evalCheck(\x27({...rest} \x3d {}), true\x27);\n    });\n    addNewerLanguageTranspilationCheck(\x27es_next\x27, function() {\n      return false;  // assume it always need to transpile\n    });\n    return requiresTranspilation;\n  };\n  // MOE:begin_strip\n  // LINT.ThenChange(//depot/google3/java/com/google/testing/web/devtools/updatebrowserinfo/requires_transpilation.js)\n  // MOE:end_strip\n\n\n  /**\n   * Determines whether the given language needs to be transpiled.\n   * @param {string} lang\n   * @param {string|undefined} module\n   * @return {boolean}\n   */\n  goog.Transpiler.prototype.needsTranspile \x3d function(lang, module) {\n    if (goog.TRANSPILE \x3d\x3d \x27always\x27) {\n      return true;\n    } else if (goog.TRANSPILE \x3d\x3d \x27never\x27) {\n      return false;\n    } else if (!this.requiresTranspilation_) {\n      this.requiresTranspilation_ \x3d this.createRequiresTranspilation_();\n    }\n    if (lang in this.requiresTranspilation_) {\n      if (this.requiresTranspilation_[lang]) {\n        return true;\n      } else if (\n          goog.inHtmlDocument_() \x26\x26 module \x3d\x3d \x27es6\x27 \x26\x26\n          !(\x27noModule\x27 in goog.global.document.createElement(\x27script\x27))) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      throw new Error(\x27Unknown language mode: \x27 + lang);\n    }\n  };\n\n\n  /**\n   * Lazily retrieves the transpiler and applies it to the source.\n   * @param {string} code JS code.\n   * @param {string} path Path to the code.\n   * @return {string} The transpiled code.\n   */\n  goog.Transpiler.prototype.transpile \x3d function(code, path) {\n    // TODO(johnplaisted): We should delete goog.transpile_ and just have this\n    // function. But there\x27s some compile error atm where goog.global is being\n    // stripped incorrectly without this.\n    return goog.transpile_(code, path);\n  };\n\n\n  /** @private @final {!goog.Transpiler} */\n  goog.transpiler_ \x3d new goog.Transpiler();\n\n  /**\n   * Rewrites closing script tags in input to avoid ending an enclosing script\n   * tag.\n   *\n   * @param {string} str\n   * @return {string}\n   * @private\n   */\n  goog.protectScriptTag_ \x3d function(str) {\n    return str.replace(/\x3c\\/(SCRIPT)/ig, \x27\\\\x3c/$1\x27);\n  };\n\n\n  /**\n   * A debug loader is responsible for downloading and executing javascript\n   * files in an unbundled, uncompiled environment.\n   *\n   * This can be custimized via the setDependencyFactory method, or by\n   * CLOSURE_IMPORT_SCRIPT/CLOSURE_LOAD_FILE_SYNC.\n   *\n   * @struct @constructor @final @private\n   */\n  goog.DebugLoader_ \x3d function() {\n    /** @private @const {!Object\x3cstring, !goog.Dependency\x3e} */\n    this.dependencies_ \x3d {};\n    /** @private @const {!Object\x3cstring, string\x3e} */\n    this.idToPath_ \x3d {};\n    /** @private @const {!Object\x3cstring, boolean\x3e} */\n    this.written_ \x3d {};\n    /** @private @const {!Array\x3c!goog.Dependency\x3e} */\n    this.loadingDeps_ \x3d [];\n    /** @private {!Array\x3c!goog.Dependency\x3e} */\n    this.depsToLoad_ \x3d [];\n    /** @private {boolean} */\n    this.paused_ \x3d false;\n    /** @private {!goog.DependencyFactory} */\n    this.factory_ \x3d new goog.DependencyFactory(goog.transpiler_);\n    /** @private @const {!Object\x3cstring, !Function\x3e} */\n    this.deferredCallbacks_ \x3d {};\n    /** @private @const {!Array\x3cstring\x3e} */\n    this.deferredQueue_ \x3d [];\n  };\n\n  /**\n   * @param {!Array\x3cstring\x3e} namespaces\n   * @param {function(): undefined} callback Function to call once all the\n   *     namespaces have loaded.\n   */\n  goog.DebugLoader_.prototype.bootstrap \x3d function(namespaces, callback) {\n    var cb \x3d callback;\n    function resolve() {\n      if (cb) {\n        goog.global.setTimeout(cb, 0);\n        cb \x3d null;\n      }\n    }\n\n    if (!namespaces.length) {\n      resolve();\n      return;\n    }\n\n    var deps \x3d [];\n    for (var i \x3d 0; i \x3c namespaces.length; i++) {\n      var path \x3d this.getPathFromDeps_(namespaces[i]);\n      if (!path) {\n        throw new Error(\x27Unregonized namespace: \x27 + namespaces[i]);\n      }\n      deps.push(this.dependencies_[path]);\n    }\n\n    var require \x3d goog.require;\n    var loaded \x3d 0;\n    for (var i \x3d 0; i \x3c namespaces.length; i++) {\n      require(namespaces[i]);\n      deps[i].onLoad(function() {\n        if (++loaded \x3d\x3d namespaces.length) {\n          resolve();\n        }\n      });\n    }\n  };\n\n\n  /**\n   * Loads the Closure Dependency file.\n   *\n   * Exposed a public function so CLOSURE_NO_DEPS can be set to false, base\n   * loaded, setDependencyFactory called, and then this called. i.e. allows\n   * custom loading of the deps file.\n   */\n  goog.DebugLoader_.prototype.loadClosureDeps \x3d function() {\n    // Circumvent addDependency, which would try to transpile deps.js if\n    // transpile is set to always.\n    var relPath \x3d \x27deps.js\x27;\n    this.depsToLoad_.push(this.factory_.createDependency(\n        goog.normalizePath_(goog.basePath + relPath), relPath, [], [], {},\n        false));\n    this.loadDeps_();\n  };\n\n\n  /**\n   * Notifies the debug loader when a dependency has been requested.\n   *\n   * @param {string} absPathOrId Path of the dependency or goog id.\n   * @param {boolean\x3d} opt_force\n   */\n  goog.DebugLoader_.prototype.requested \x3d function(absPathOrId, opt_force) {\n    var path \x3d this.getPathFromDeps_(absPathOrId);\n    if (path \x26\x26\n        (opt_force || this.areDepsLoaded_(this.dependencies_[path].requires))) {\n      var callback \x3d this.deferredCallbacks_[path];\n      if (callback) {\n        delete this.deferredCallbacks_[path];\n        callback();\n      }\n    }\n  };\n\n\n  /**\n   * Sets the dependency factory, which can be used to create custom\n   * goog.Dependency implementations to control how dependencies are loaded.\n   *\n   * @param {!goog.DependencyFactory} factory\n   */\n  goog.DebugLoader_.prototype.setDependencyFactory \x3d function(factory) {\n    this.factory_ \x3d factory;\n  };\n\n\n  /**\n   * Travserses the dependency graph and queues the given dependency, and all of\n   * its transitive dependencies, for loading and then starts loading if not\n   * paused.\n   *\n   * @param {string} absPathOrId\n   * @private\n   */\n  goog.DebugLoader_.prototype.load_ \x3d function(absPathOrId) {\n    if (!this.getPathFromDeps_(absPathOrId)) {\n      var errorMessage \x3d \x27goog.require could not find: \x27 + absPathOrId;\n\n      goog.logToConsole_(errorMessage);\n      // MOE:begin_strip\n\n      // NOTE(nicksantos): We could always throw an error, but this would\n      // break legacy users that depended on this failing silently. Instead,\n      // the compiler should warn us when there are invalid goog.require\n      // calls. For now, we simply give clients a way to turn strict mode on.\n      if (goog.useStrictRequires) {\n        throw Error(errorMessage);\n      }\n\n      // In external Closure, always error.\n      // MOE:end_strip_and_replace throw Error(errorMessage);\n    } else {\n      var loader \x3d this;\n\n      var deps \x3d [];\n\n      /** @param {string} absPathOrId */\n      var visit \x3d function(absPathOrId) {\n        var path \x3d loader.getPathFromDeps_(absPathOrId);\n\n        if (!path) {\n          throw new Error(\x27Bad dependency path or symbol: \x27 + absPathOrId);\n        }\n\n        if (loader.written_[path]) {\n          return;\n        }\n\n        loader.written_[path] \x3d true;\n\n        var dep \x3d loader.dependencies_[path];\n        // MOE:begin_strip\n        if (goog.dependencies_.written[dep.relativePath]) {\n          return;\n        }\n        // MOE:end_strip\n        for (var i \x3d 0; i \x3c dep.requires.length; i++) {\n          if (!goog.isProvided_(dep.requires[i])) {\n            visit(dep.requires[i]);\n          }\n        }\n\n        deps.push(dep);\n      };\n\n      visit(absPathOrId);\n\n      var wasLoading \x3d !!this.depsToLoad_.length;\n      this.depsToLoad_ \x3d this.depsToLoad_.concat(deps);\n\n      if (!this.paused_ \x26\x26 !wasLoading) {\n        this.loadDeps_();\n      }\n    }\n  };\n\n\n  /**\n   * Loads any queued dependencies until they are all loaded or paused.\n   *\n   * @private\n   */\n  goog.DebugLoader_.prototype.loadDeps_ \x3d function() {\n    var loader \x3d this;\n    var paused \x3d this.paused_;\n\n    while (this.depsToLoad_.length \x26\x26 !paused) {\n      (function() {\n        var loadCallDone \x3d false;\n        var dep \x3d loader.depsToLoad_.shift();\n\n        var loaded \x3d false;\n        loader.loading_(dep);\n\n        var controller \x3d {\n          pause: function() {\n            if (loadCallDone) {\n              throw new Error(\x27Cannot call pause after the call to load.\x27);\n            } else {\n              paused \x3d true;\n            }\n          },\n          resume: function() {\n            if (loadCallDone) {\n              loader.resume_();\n            } else {\n              // Some dep called pause and then resume in the same load call.\n              // Just keep running this same loop.\n              paused \x3d false;\n            }\n          },\n          loaded: function() {\n            if (loaded) {\n              throw new Error(\x27Double call to loaded.\x27);\n            }\n\n            loaded \x3d true;\n            loader.loaded_(dep);\n          },\n          pending: function() {\n            // Defensive copy.\n            var pending \x3d [];\n            for (var i \x3d 0; i \x3c loader.loadingDeps_.length; i++) {\n              pending.push(loader.loadingDeps_[i]);\n            }\n            return pending;\n          },\n          /**\n           * @param {string} path\n           * @param {goog.ModuleType} type\n           */\n          setModuleState: function(path, type) {\n            goog.moduleLoaderState_ \x3d {\n              path: path,\n              type: type,\n              moduleName: \x27\x27,\n              declareLegacyNamespace: false\n            };\n          },\n          registerEs6ModuleExports: function(path, exports) {\n            goog.loadedModules_[path] \x3d {\n              exports: exports,\n              type: goog.ModuleType.ES6,\n              moduleId: \x27\x27\n            };\n          },\n          registerGoogModuleExports: function(moduleId, exports) {\n            goog.loadedModules_[moduleId] \x3d {\n              exports: exports,\n              type: goog.ModuleType.GOOG,\n              moduleId: moduleId\n            };\n          },\n          clearModuleState: function() {\n            goog.moduleLoaderState_ \x3d null;\n          },\n          defer: function(callback) {\n            if (loadCallDone) {\n              throw new Error(\n                  \x27Cannot register with defer after the call to load.\x27);\n            }\n            loader.defer_(dep, callback);\n          },\n          areDepsLoaded: function() {\n            return loader.areDepsLoaded_(dep.requires);\n          }\n        };\n\n        try {\n          dep.load(controller);\n        } finally {\n          loadCallDone \x3d true;\n        }\n      })();\n    }\n\n    if (paused) {\n      this.pause_();\n    }\n  };\n\n\n  /** @private */\n  goog.DebugLoader_.prototype.pause_ \x3d function() {\n    this.paused_ \x3d true;\n  };\n\n\n  /** @private */\n  goog.DebugLoader_.prototype.resume_ \x3d function() {\n    if (this.paused_) {\n      this.paused_ \x3d false;\n      this.loadDeps_();\n    }\n  };\n\n\n  /**\n   * Marks the given dependency as loading (load has been called but it has not\n   * yet marked itself as finished). Useful for dependencies that want to know\n   * what else is loading. Example: goog.modules cannot eval if there are\n   * loading dependencies.\n   *\n   * @param {!goog.Dependency} dep\n   * @private\n   */\n  goog.DebugLoader_.prototype.loading_ \x3d function(dep) {\n    this.loadingDeps_.push(dep);\n  };\n\n\n  /**\n   * Marks the given dependency as having finished loading and being available\n   * for require.\n   *\n   * @param {!goog.Dependency} dep\n   * @private\n   */\n  goog.DebugLoader_.prototype.loaded_ \x3d function(dep) {\n    for (var i \x3d 0; i \x3c this.loadingDeps_.length; i++) {\n      if (this.loadingDeps_[i] \x3d\x3d dep) {\n        this.loadingDeps_.splice(i, 1);\n        break;\n      }\n    }\n\n    for (var i \x3d 0; i \x3c this.deferredQueue_.length; i++) {\n      if (this.deferredQueue_[i] \x3d\x3d dep.path) {\n        this.deferredQueue_.splice(i, 1);\n        break;\n      }\n    }\n\n    if (this.loadingDeps_.length \x3d\x3d this.deferredQueue_.length \x26\x26\n        !this.depsToLoad_.length) {\n      // Something has asked to load these, but they may not be directly\n      // required again later, so load them now that we know we\x27re done loading\n      // everything else. e.g. a goog module entry point.\n      while (this.deferredQueue_.length) {\n        this.requested(this.deferredQueue_.shift(), true);\n      }\n    }\n\n    dep.loaded();\n  };\n\n\n  /**\n   * @param {!Array\x3cstring\x3e} pathsOrIds\n   * @return {boolean}\n   * @private\n   */\n  goog.DebugLoader_.prototype.areDepsLoaded_ \x3d function(pathsOrIds) {\n    for (var i \x3d 0; i \x3c pathsOrIds.length; i++) {\n      var path \x3d this.getPathFromDeps_(pathsOrIds[i]);\n      if (!path ||\n          (!(path in this.deferredCallbacks_) \x26\x26\n           !goog.isProvided_(pathsOrIds[i]))) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n\n  /**\n   * @param {string} absPathOrId\n   * @return {?string}\n   * @private\n   */\n  goog.DebugLoader_.prototype.getPathFromDeps_ \x3d function(absPathOrId) {\n    if (absPathOrId in this.idToPath_) {\n      return this.idToPath_[absPathOrId];\n    } else if (absPathOrId in this.dependencies_) {\n      return absPathOrId;\n    } else {\n      return null;\n    }\n  };\n\n\n  /**\n   * @param {!goog.Dependency} dependency\n   * @param {!Function} callback\n   * @private\n   */\n  goog.DebugLoader_.prototype.defer_ \x3d function(dependency, callback) {\n    this.deferredCallbacks_[dependency.path] \x3d callback;\n    this.deferredQueue_.push(dependency.path);\n  };\n\n\n  /**\n   * Interface for goog.Dependency implementations to have some control over\n   * loading of dependencies.\n   *\n   * @record\n   */\n  goog.LoadController \x3d function() {};\n\n\n  /**\n   * Tells the controller to halt loading of more dependencies.\n   */\n  goog.LoadController.prototype.pause \x3d function() {};\n\n\n  /**\n   * Tells the controller to resume loading of more dependencies if paused.\n   */\n  goog.LoadController.prototype.resume \x3d function() {};\n\n\n  /**\n   * Tells the controller that this dependency has finished loading.\n   *\n   * This causes this to be removed from pending() and any load callbacks to\n   * fire.\n   */\n  goog.LoadController.prototype.loaded \x3d function() {};\n\n\n  /**\n   * List of dependencies on which load has been called but which have not\n   * called loaded on their controller. This includes the current dependency.\n   *\n   * @return {!Array\x3c!goog.Dependency\x3e}\n   */\n  goog.LoadController.prototype.pending \x3d function() {};\n\n\n  /**\n   * Registers an object as an ES6 module\x27s exports so that goog.modules may\n   * require it by path.\n   *\n   * @param {string} path Full path of the module.\n   * @param {?} exports\n   */\n  goog.LoadController.prototype.registerEs6ModuleExports \x3d function(\n      path, exports) {};\n\n\n  /**\n   * Sets the current module state. Allows goog.modules to require by path\n   * and lets goog.require return values.\n   *\n   * @param {string} path Full path of the current module.\n   * @param {goog.ModuleType} type Type of module.\n   */\n  goog.LoadController.prototype.setModuleState \x3d function(path, type) {};\n\n\n  /**\n   * Clears the current module state.\n   */\n  goog.LoadController.prototype.clearModuleState \x3d function() {};\n\n\n  /**\n   * Registers a callback to call once the dependency is actually requested\n   * via goog.require + all of the immediate dependencies have been loaded or\n   * all other files have been loaded. Allows for lazy loading until\n   * require\x27d without pausing dependency loading, which is needed on old IE.\n   *\n   * @param {!Function} callback\n   */\n  goog.LoadController.prototype.defer \x3d function(callback) {};\n\n\n  /**\n   * @return {boolean}\n   */\n  goog.LoadController.prototype.areDepsLoaded \x3d function() {};\n\n\n  /**\n   * Basic super class for all dependencies Closure Library can load.\n   *\n   * This default implementation is designed to load untranspiled, non-module\n   * scripts in a web broswer.\n   *\n   * For transpiled non-goog.module files {@see goog.TranspiledDependency}.\n   * For goog.modules see {@see goog.GoogModuleDependency}.\n   * For untranspiled ES6 modules {@see goog.Es6ModuleDependency}.\n   *\n   * @param {string} path Absolute path of this script.\n   * @param {string} relativePath Path of this script relative to goog.basePath.\n   * @param {!Array\x3cstring\x3e} provides goog.provided or goog.module symbols\n   *     in this file.\n   * @param {!Array\x3cstring\x3e} requires goog symbols or relative paths to Closure\n   *     this depends on.\n   * @param {!Object\x3cstring, string\x3e} loadFlags\n   * @struct @constructor\n   */\n  goog.Dependency \x3d function(\n      path, relativePath, provides, requires, loadFlags) {\n    /** @const */\n    this.path \x3d path;\n    /** @const */\n    this.relativePath \x3d relativePath;\n    /** @const */\n    this.provides \x3d provides;\n    /** @const */\n    this.requires \x3d requires;\n    /** @const */\n    this.loadFlags \x3d loadFlags;\n    /** @private {boolean} */\n    this.loaded_ \x3d false;\n    /** @private {!Array\x3cfunction()\x3e} */\n    this.loadCallbacks_ \x3d [];\n  };\n\n\n  /**\n   * @param {function()} callback Callback to fire as soon as this has loaded.\n   * @final\n   */\n  goog.Dependency.prototype.onLoad \x3d function(callback) {\n    if (this.loaded_) {\n      callback();\n    } else {\n      this.loadCallbacks_.push(callback);\n    }\n  };\n\n\n  /**\n   * Marks this dependency as loaded and fires any callbacks registered with\n   * onLoad.\n   * @final\n   */\n  goog.Dependency.prototype.loaded \x3d function() {\n    this.loaded_ \x3d true;\n    var callbacks \x3d this.loadCallbacks_;\n    this.loadCallbacks_ \x3d [];\n    for (var i \x3d 0; i \x3c callbacks.length; i++) {\n      callbacks[i]();\n    }\n  };\n\n\n  /**\n   * Whether or not document.written / appended script tags should be deferred.\n   *\n   * @private {boolean}\n   */\n  goog.Dependency.defer_ \x3d false;\n\n\n  /**\n   * Map of script ready / state change callbacks. Old IE cannot handle putting\n   * these properties on goog.global.\n   *\n   * @private @const {!Object\x3cstring, function(?):undefined\x3e}\n   */\n  goog.Dependency.callbackMap_ \x3d {};\n\n\n  /**\n   * @param {function(...?):?} callback\n   * @return {string}\n   * @private\n   */\n  goog.Dependency.registerCallback_ \x3d function(callback) {\n    var key \x3d Math.random().toString(32);\n    goog.Dependency.callbackMap_[key] \x3d callback;\n    return key;\n  };\n\n\n  /**\n   * @param {string} key\n   * @private\n   */\n  goog.Dependency.unregisterCallback_ \x3d function(key) {\n    delete goog.Dependency.callbackMap_[key];\n  };\n\n\n  /**\n   * @param {string} key\n   * @param {...?} var_args\n   * @private\n   * @suppress {unusedPrivateMembers}\n   */\n  goog.Dependency.callback_ \x3d function(key, var_args) {\n    if (key in goog.Dependency.callbackMap_) {\n      var callback \x3d goog.Dependency.callbackMap_[key];\n      var args \x3d [];\n      for (var i \x3d 1; i \x3c arguments.length; i++) {\n        args.push(arguments[i]);\n      }\n      callback.apply(undefined, args);\n    } else {\n      var errorMessage \x3d \x27Callback key \x27 + key +\n          \x27 does not exist (was base.js loaded more than once?).\x27;\n      // MOE:begin_strip\n      // TODO(johnplaisted): Some people internally are mistakenly loading\n      // base.js twice, and this can happen while a dependency is loading,\n      // wiping out state.\n      goog.logToConsole_(errorMessage);\n      // MOE:end_strip_and_replace throw Error(errorMessage);\n    }\n  };\n\n\n  /**\n   * Starts loading this dependency. This dependency can pause loading if it\n   * needs to and resume it later via the controller interface.\n   *\n   * When this is loaded it should call controller.loaded(). Note that this will\n   * end up calling the loaded method of this dependency; there is no need to\n   * call it explicitly.\n   *\n   * @param {!goog.LoadController} controller\n   */\n  goog.Dependency.prototype.load \x3d function(controller) {\n    if (goog.global.CLOSURE_IMPORT_SCRIPT) {\n      if (goog.global.CLOSURE_IMPORT_SCRIPT(this.path)) {\n        controller.loaded();\n      } else {\n        controller.pause();\n      }\n      return;\n    }\n\n    if (!goog.inHtmlDocument_()) {\n      goog.logToConsole_(\n          \x27Cannot use default debug loader outside of HTML documents.\x27);\n      if (this.relativePath \x3d\x3d \x27deps.js\x27) {\n        // Some old code is relying on base.js auto loading deps.js failing with\n        // no error before later setting CLOSURE_IMPORT_SCRIPT.\n        // CLOSURE_IMPORT_SCRIPT should be set *before* base.js is loaded, or\n        // CLOSURE_NO_DEPS set to true.\n        goog.logToConsole_(\n            \x27Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, \x27 +\n            \x27or seting CLOSURE_NO_DEPS to true.\x27);\n        controller.loaded();\n      } else {\n        controller.pause();\n      }\n      return;\n    }\n\n    /** @type {!HTMLDocument} */\n    var doc \x3d goog.global.document;\n\n    // If the user tries to require a new symbol after document load,\n    // something has gone terribly wrong. Doing a document.write would\n    // wipe out the page. This does not apply to the CSP-compliant method\n    // of writing script tags.\n    if (doc.readyState \x3d\x3d \x27complete\x27 \x26\x26\n        !goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {\n      // Certain test frameworks load base.js multiple times, which tries\n      // to write deps.js each time. If that happens, just fail silently.\n      // These frameworks wipe the page between each load of base.js, so this\n      // is OK.\n      var isDeps \x3d /\\bdeps.js$/.test(this.path);\n      if (isDeps) {\n        controller.loaded();\n        return;\n      } else {\n        throw Error(\x27Cannot write \x22\x27 + this.path + \x27\x22 after document load\x27);\n      }\n    }\n\n    if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING \x26\x26\n        goog.isDocumentLoading_()) {\n      var key \x3d goog.Dependency.registerCallback_(function(script) {\n        if (!goog.DebugLoader_.IS_OLD_IE_ || script.readyState \x3d\x3d \x27complete\x27) {\n          goog.Dependency.unregisterCallback_(key);\n          controller.loaded();\n        }\n      });\n\n      var event \x3d\n          goog.DebugLoader_.IS_OLD_IE_ ? \x27onreadystatechange\x27 : \x27onload\x27;\n      var defer \x3d goog.Dependency.defer_ ? \x27defer\x27 : \x27\x27;\n      doc.write(\n          \x27\x3cscript src\x3d\x22\x27 + this.path + \x27\x22 \x27 + event +\n          \x27\x3d\x22goog.Dependency.callback_(\\\x27\x27 + key +\n          \x27\\\x27, this)\x22 type\x3d\x22text/javascript\x22 \x27 + defer + \x27\x3e\x3c\x27 +\n          \x27/script\x3e\x27);\n    } else {\n      var scriptEl \x3d\n          /** @type {!HTMLScriptElement} */ (doc.createElement(\x27script\x27));\n      scriptEl.defer \x3d goog.Dependency.defer_;\n      scriptEl.async \x3d false;\n      scriptEl.type \x3d \x27text/javascript\x27;\n\n      // If CSP nonces are used, propagate them to dynamically created scripts.\n      // This is necessary to allow nonce-based CSPs without \x27strict-dynamic\x27.\n      var nonce \x3d goog.getScriptNonce();\n      if (nonce) {\n        scriptEl.nonce \x3d nonce;\n      }\n\n      if (goog.DebugLoader_.IS_OLD_IE_) {\n        // Execution order is not guaranteed on old IE, halt loading and write\n        // these scripts one at a time, after each loads.\n        controller.pause();\n        scriptEl.onreadystatechange \x3d function() {\n          if (scriptEl.readyState \x3d\x3d \x27loaded\x27 ||\n              scriptEl.readyState \x3d\x3d \x27complete\x27) {\n            controller.loaded();\n            controller.resume();\n          }\n        };\n      } else {\n        scriptEl.onload \x3d function() {\n          scriptEl.onload \x3d null;\n          controller.loaded();\n        };\n      }\n\n      scriptEl.src \x3d this.path;\n      doc.head.appendChild(scriptEl);\n    }\n  };\n\n\n  /**\n   * @param {string} path Absolute path of this script.\n   * @param {string} relativePath Path of this script relative to goog.basePath.\n   * @param {!Array\x3cstring\x3e} provides Should be an empty array.\n   *     TODO(johnplaisted) add support for adding closure namespaces to ES6\n   *     modules for interop purposes.\n   * @param {!Array\x3cstring\x3e} requires goog symbols or relative paths to Closure\n   *     this depends on.\n   * @param {!Object\x3cstring, string\x3e} loadFlags\n   * @struct @constructor\n   * @extends {goog.Dependency}\n   */\n  goog.Es6ModuleDependency \x3d function(\n      path, relativePath, provides, requires, loadFlags) {\n    goog.Es6ModuleDependency.base(\n        this, \x27constructor\x27, path, relativePath, provides, requires, loadFlags);\n  };\n  goog.inherits(goog.Es6ModuleDependency, goog.Dependency);\n\n\n  /** @override */\n  goog.Es6ModuleDependency.prototype.load \x3d function(controller) {\n    if (goog.global.CLOSURE_IMPORT_SCRIPT) {\n      if (goog.global.CLOSURE_IMPORT_SCRIPT(this.path)) {\n        controller.loaded();\n      } else {\n        controller.pause();\n      }\n      return;\n    }\n\n    if (!goog.inHtmlDocument_()) {\n      goog.logToConsole_(\n          \x27Cannot use default debug loader outside of HTML documents.\x27);\n      controller.pause();\n      return;\n    }\n\n    /** @type {!HTMLDocument} */\n    var doc \x3d goog.global.document;\n\n    var dep \x3d this;\n\n    // TODO(johnplaisted): Does document.writing really speed up anything? Any\n    // difference between this and just waiting for interactive mode and then\n    // appending?\n    function write(src, contents) {\n      if (contents) {\n        doc.write(\n            \x27\x3cscript type\x3d\x22module\x22 crossorigin\x3e\x27 + contents + \x27\x3c/\x27 +\n            \x27script\x3e\x27);\n      } else {\n        doc.write(\n            \x27\x3cscript type\x3d\x22module\x22 crossorigin src\x3d\x22\x27 + src + \x27\x22\x3e\x3c/\x27 +\n            \x27script\x3e\x27);\n      }\n    }\n\n    function append(src, contents) {\n      var scriptEl \x3d\n          /** @type {!HTMLScriptElement} */ (doc.createElement(\x27script\x27));\n      scriptEl.defer \x3d true;\n      scriptEl.async \x3d false;\n      scriptEl.type \x3d \x27module\x27;\n      scriptEl.setAttribute(\x27crossorigin\x27, true);\n\n      // If CSP nonces are used, propagate them to dynamically created scripts.\n      // This is necessary to allow nonce-based CSPs without \x27strict-dynamic\x27.\n      var nonce \x3d goog.getScriptNonce();\n      if (nonce) {\n        scriptEl.nonce \x3d nonce;\n      }\n\n      if (contents) {\n        scriptEl.textContent \x3d contents;\n      } else {\n        scriptEl.src \x3d src;\n      }\n\n      doc.head.appendChild(scriptEl);\n    }\n\n    var create;\n\n    if (goog.isDocumentLoading_()) {\n      create \x3d write;\n      // We can ONLY call document.write if we are guaranteed that any\n      // non-module script tags document.written after this are deferred.\n      // Small optimization, in theory document.writing is faster.\n      goog.Dependency.defer_ \x3d true;\n    } else {\n      create \x3d append;\n    }\n\n    // Write 4 separate tags here:\n    // 1) Sets the module state at the correct time (just before execution).\n    // 2) A src node for this, which just hopefully lets the browser load it a\n    //    little early (no need to parse #3).\n    // 3) Import the module and register it.\n    // 4) Clear the module state at the correct time. Guarnteed to run even\n    //    if there is an error in the module (#3 will not run if there is an\n    //    error in the module).\n    var beforeKey \x3d goog.Dependency.registerCallback_(function() {\n      goog.Dependency.unregisterCallback_(beforeKey);\n      controller.setModuleState(dep.path, goog.ModuleType.ES6);\n    });\n    create(undefined, \x27goog.Dependency.callback_(\x22\x27 + beforeKey + \x27\x22)\x27);\n\n    // TODO(johnplaisted): Does this really speed up anything?\n    create(this.path, undefined);\n\n    var registerKey \x3d goog.Dependency.registerCallback_(function(exports) {\n      goog.Dependency.unregisterCallback_(registerKey);\n      controller.registerEs6ModuleExports(dep.path, exports);\n    });\n    create(\n        undefined,\n        \x27import * as m from \x22\x27 + this.path + \x27\x22; goog.Dependency.callback_(\x22\x27 +\n            registerKey + \x27\x22, m)\x27);\n\n    var afterKey \x3d goog.Dependency.registerCallback_(function() {\n      goog.Dependency.unregisterCallback_(afterKey);\n      controller.clearModuleState();\n      controller.loaded();\n    });\n    create(undefined, \x27goog.Dependency.callback_(\x22\x27 + afterKey + \x27\x22)\x27);\n  };\n\n\n  /**\n   * Superclass of any dependency that needs to be loaded into memory,\n   * transformed, and then eval\x27d (goog.modules and transpiled files).\n   *\n   * @param {string} path Absolute path of this script.\n   * @param {string} relativePath Path of this script relative to goog.basePath.\n   * @param {!Array\x3cstring\x3e} provides goog.provided or goog.module symbols\n   *     in this file.\n   * @param {!Array\x3cstring\x3e} requires goog symbols or relative paths to Closure\n   *     this depends on.\n   * @param {!Object\x3cstring, string\x3e} loadFlags\n   * @struct @constructor @abstract\n   * @extends {goog.Dependency}\n   */\n  goog.TransformedDependency \x3d function(\n      path, relativePath, provides, requires, loadFlags) {\n    goog.TransformedDependency.base(\n        this, \x27constructor\x27, path, relativePath, provides, requires, loadFlags);\n    /** @private {?string} */\n    this.contents_ \x3d null;\n  };\n  goog.inherits(goog.TransformedDependency, goog.Dependency);\n\n\n  /** @override */\n  goog.TransformedDependency.prototype.load \x3d function(controller) {\n    var dep \x3d this;\n\n    function fetch() {\n      dep.contents_ \x3d goog.loadFileSync_(dep.path);\n\n      if (dep.contents_) {\n        dep.contents_ \x3d dep.transform(dep.contents_);\n        if (dep.contents_) {\n          dep.contents_ +\x3d \x27\\n//# sourceURL\x3d\x27 + dep.path;\n        }\n      }\n    }\n\n    if (goog.global.CLOSURE_IMPORT_SCRIPT) {\n      fetch();\n      if (this.contents_ \x26\x26\n          goog.global.CLOSURE_IMPORT_SCRIPT(\x27\x27, this.contents_)) {\n        this.contents_ \x3d null;\n        controller.loaded();\n      } else {\n        controller.pause();\n      }\n      return;\n    }\n\n    var isEs6 \x3d this.loadFlags[\x27module\x27] \x3d\x3d goog.ModuleType.ES6;\n\n    function load() {\n      fetch();\n\n      if (!dep.contents_) {\n        // loadFileSync_ or transform are responsible. Assume they logged an\n        // error.\n        return;\n      }\n\n      if (isEs6) {\n        controller.setModuleState(dep.path, goog.ModuleType.ES6);\n      }\n\n      try {\n        var contents \x3d dep.contents_;\n        dep.contents_ \x3d null;\n        goog.globalEval(contents);\n      } finally {\n        if (isEs6) {\n          controller.clearModuleState();\n        }\n      }\n\n      if (isEs6) {\n        // Due to circular dependencies this may not be available for require\n        // right now.\n        goog.global[\x27$jscomp\x27][\x27require\x27][\x27ensure\x27]([dep.path], function() {\n          controller.registerEs6ModuleExports(\n              dep.path, goog.global[\x27$jscomp\x27][\x27require\x27](dep.path));\n        });\n      }\n\n      controller.loaded();\n    }\n\n    // Do not fetch now; in FireFox 47 the synchronous XHR doesn\x27t block all\n    // events. If we fetched now and then document.write\x27d the contents the\n    // document.write would be an eval and would execute too soon! Instead write\n    // a script tag to fetch and eval synchronously at the correct time.\n    function fetchInOwnScriptThenLoad() {\n      /** @type {!HTMLDocument} */\n      var doc \x3d goog.global.document;\n\n      var key \x3d goog.Dependency.registerCallback_(function() {\n        goog.Dependency.unregisterCallback_(key);\n        load();\n      });\n\n      doc.write(\n          \x27\x3cscript type\x3d\x22text/javascript\x22\x3e\x27 +\n          goog.protectScriptTag_(\x27goog.Dependency.callback_(\x22\x27 + key + \x27\x22);\x27) +\n          \x27\x3c/\x27 +\n          \x27script\x3e\x27);\n    }\n\n    var pending \x3d controller.pending();\n    // If one thing is pending it is this.\n    if ((pending.length \x3e 1 \x26\x26 goog.DebugLoader_.IS_OLD_IE_) ||\n        (goog.Dependency.defer_ \x26\x26 goog.isDocumentLoading_())) {\n      // If anything else is loading we need to lazy load due to bugs in old IE.\n      // Specifically script tags with src and script tags with contents could\n      // execute out of order if document.write is used, so we cannot use\n      // document.write. Do not pause here; it breaks old IE as well.\n\n      // Additionally if we are meant to defer scripts but the page is still\n      // loading (e.g. an ES6 module is loading) then also defer.\n\n      // Note that we only defer when we have to rather than 100% of the time.\n      // Always defering would work, but then in theory the order of\n      // goog.require calls would then matter. We want to enforce that most of\n      // the time the order of the require calls does not matter.\n      controller.defer(function() {\n        load();\n      });\n      return;\n    }\n\n    if (isEs6 \x26\x26 goog.inHtmlDocument_() \x26\x26 goog.isDocumentLoading_()) {\n      goog.Dependency.defer_ \x3d true;\n      // TODO(johnplaisted): Externs are missing onreadystatechange for\n      // HTMLDocument.\n      /** @type {?} */\n      var doc \x3d goog.global.document;\n      // Transpiled ES6 modules still need to load like regular ES6 modules,\n      // aka only after the document is interactive.\n      controller.pause();\n      var oldCallback \x3d doc.onreadystatechange;\n      doc.onreadystatechange \x3d function() {\n        if (doc.attachEvent ? doc.readyState \x3d\x3d \x27complete\x27 :\n                              doc.readyState \x3d\x3d \x27interactive\x27) {\n          doc.onreadystatechange \x3d oldCallback;\n          load();\n          controller.resume();\n        }\n        if (goog.isFunction(oldCallback)) {\n          oldCallback.apply(undefined, arguments);\n        }\n      };\n    } else {\n      // Always eval on old IE.\n      if (goog.DebugLoader_.IS_OLD_IE_ || !goog.inHtmlDocument_() ||\n          !goog.isDocumentLoading_()) {\n        load();\n      } else {\n        fetchInOwnScriptThenLoad();\n      }\n    }\n  };\n\n\n  /**\n   * @param {string} contents\n   * @return {string}\n   * @abstract\n   */\n  goog.TransformedDependency.prototype.transform \x3d function(contents) {};\n\n\n  /**\n   * Any non-goog.module dependency which needs to be transpiled before eval.\n   *\n   * @param {string} path Absolute path of this script.\n   * @param {string} relativePath Path of this script relative to goog.basePath.\n   * @param {!Array\x3cstring\x3e} provides goog.provided or goog.module symbols\n   *     in this file.\n   * @param {!Array\x3cstring\x3e} requires goog symbols or relative paths to Closure\n   *     this depends on.\n   * @param {!Object\x3cstring, string\x3e} loadFlags\n   * @param {!goog.Transpiler} transpiler\n   * @struct @constructor\n   * @extends {goog.TransformedDependency}\n   */\n  goog.TranspiledDependency \x3d function(\n      path, relativePath, provides, requires, loadFlags, transpiler) {\n    goog.TranspiledDependency.base(\n        this, \x27constructor\x27, path, relativePath, provides, requires, loadFlags);\n    /** @protected @const*/\n    this.transpiler \x3d transpiler;\n  };\n  goog.inherits(goog.TranspiledDependency, goog.TransformedDependency);\n\n\n  /** @override */\n  goog.TranspiledDependency.prototype.transform \x3d function(contents) {\n    return this.transpiler.transpile(contents, this.path);\n  };\n\n\n  /**\n   * A goog.module, transpiled or not. Will always perform some minimal\n   * transformation even when not transpiled to wrap in a goog.loadModule\n   * statement.\n   *\n   * @param {string} path Absolute path of this script.\n   * @param {string} relativePath Path of this script relative to goog.basePath.\n   * @param {!Array\x3cstring\x3e} provides goog.provided or goog.module symbols\n   *     in this file.\n   * @param {!Array\x3cstring\x3e} requires goog symbols or relative paths to Closure\n   *     this depends on.\n   * @param {!Object\x3cstring, string\x3e} loadFlags\n   * @param {boolean} needsTranspile\n   * @param {!goog.Transpiler} transpiler\n   * @struct @constructor\n   * @extends {goog.TransformedDependency}\n   */\n  goog.GoogModuleDependency \x3d function(\n      path, relativePath, provides, requires, loadFlags, needsTranspile,\n      transpiler) {\n    goog.GoogModuleDependency.base(\n        this, \x27constructor\x27, path, relativePath, provides, requires, loadFlags);\n    /** @private @const */\n    this.needsTranspile_ \x3d needsTranspile;\n    /** @private @const */\n    this.transpiler_ \x3d transpiler;\n  };\n  goog.inherits(goog.GoogModuleDependency, goog.TransformedDependency);\n\n\n  /** @override */\n  goog.GoogModuleDependency.prototype.transform \x3d function(contents) {\n    if (this.needsTranspile_) {\n      contents \x3d this.transpiler_.transpile(contents, this.path);\n    }\n\n    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {\n      return \x27\x27 +\n          \x27goog.loadModule(function(exports) {\x27 +\n          \x27\x22use strict\x22;\x27 + contents +\n          \x27\\n\x27 +  // terminate any trailing single line comment.\n          \x27;return exports\x27 +\n          \x27}, \x22\x27 + this.path + \x27\x22);\x27 +\n          \x27\\n//# sourceURL\x3d\x27 + this.path + \x27\\n\x27;\n    } else {\n      return \x27\x27 +\n          \x27goog.loadModule(\x27 +\n          goog.global.JSON.stringify(\n              contents + \x27\\n//# sourceURL\x3d\x27 + this.path + \x27\\n\x27) +\n          \x27, \x22\x27 + this.path + \x27\x22);\x27;\n    }\n  };\n\n\n  /**\n   * Whether the browser is IE9 or earlier, which needs special handling\n   * for deferred modules.\n   * @const @private {boolean}\n   */\n  goog.DebugLoader_.IS_OLD_IE_ \x3d\n      !!(!goog.global.atob \x26\x26 goog.global.document \x26\x26 goog.global.document.all);\n\n\n  /**\n   * @param {string} relPath\n   * @param {!Array\x3cstring\x3e|undefined} provides\n   * @param {!Array\x3cstring\x3e} requires\n   * @param {boolean|!Object\x3cstring\x3e\x3d} opt_loadFlags\n   * @see goog.addDependency\n   */\n  goog.DebugLoader_.prototype.addDependency \x3d function(\n      relPath, provides, requires, opt_loadFlags) {\n    provides \x3d provides || [];\n    relPath \x3d relPath.replace(/\\\\/g, \x27/\x27);\n    var path \x3d goog.normalizePath_(goog.basePath + relPath);\n    if (!opt_loadFlags || typeof opt_loadFlags \x3d\x3d\x3d \x27boolean\x27) {\n      opt_loadFlags \x3d opt_loadFlags ? {\x27module\x27: goog.ModuleType.GOOG} : {};\n    }\n    var dep \x3d this.factory_.createDependency(\n        path, relPath, provides, requires, opt_loadFlags,\n        goog.transpiler_.needsTranspile(\n            opt_loadFlags[\x27lang\x27] || \x27es3\x27, opt_loadFlags[\x27module\x27]));\n    this.dependencies_[path] \x3d dep;\n    for (var i \x3d 0; i \x3c provides.length; i++) {\n      this.idToPath_[provides[i]] \x3d path;\n    }\n    this.idToPath_[relPath] \x3d path;\n  };\n\n\n  /**\n   * Creates goog.Dependency instances for the debug loader to load.\n   *\n   * Should be overridden to have the debug loader use custom subclasses of\n   * goog.Dependency.\n   *\n   * @param {!goog.Transpiler} transpiler\n   * @struct @constructor\n   */\n  goog.DependencyFactory \x3d function(transpiler) {\n    /** @protected @const */\n    this.transpiler \x3d transpiler;\n  };\n\n\n  /**\n   * @param {string} path Absolute path of the file.\n   * @param {string} relativePath Path relative to closure\u2019s base.js.\n   * @param {!Array\x3cstring\x3e} provides Array of provided goog.provide/module ids.\n   * @param {!Array\x3cstring\x3e} requires Array of required goog.provide/module /\n   *     relative ES6 module paths.\n   * @param {!Object\x3cstring, string\x3e} loadFlags\n   * @param {boolean} needsTranspile True if the file needs to be transpiled\n   *     per the goog.Transpiler.\n   * @return {!goog.Dependency}\n   */\n  goog.DependencyFactory.prototype.createDependency \x3d function(\n      path, relativePath, provides, requires, loadFlags, needsTranspile) {\n    // MOE:begin_strip\n    var provide, require;\n    for (var i \x3d 0; provide \x3d provides[i]; i++) {\n      goog.dependencies_.nameToPath[provide] \x3d relativePath;\n      goog.dependencies_.loadFlags[relativePath] \x3d loadFlags;\n    }\n    for (var j \x3d 0; require \x3d requires[j]; j++) {\n      if (!(relativePath in goog.dependencies_.requires)) {\n        goog.dependencies_.requires[relativePath] \x3d {};\n      }\n      goog.dependencies_.requires[relativePath][require] \x3d true;\n    }\n    // MOE:end_strip\n\n    if (loadFlags[\x27module\x27] \x3d\x3d goog.ModuleType.GOOG) {\n      return new goog.GoogModuleDependency(\n          path, relativePath, provides, requires, loadFlags, needsTranspile,\n          this.transpiler);\n    } else if (needsTranspile) {\n      return new goog.TranspiledDependency(\n          path, relativePath, provides, requires, loadFlags, this.transpiler);\n    } else {\n      if (loadFlags[\x27module\x27] \x3d\x3d goog.ModuleType.ES6) {\n        return new goog.Es6ModuleDependency(\n            path, relativePath, provides, requires, loadFlags);\n      } else {\n        return new goog.Dependency(\n            path, relativePath, provides, requires, loadFlags);\n      }\n    }\n  };\n\n\n  /** @private @const */\n  goog.debugLoader_ \x3d new goog.DebugLoader_();\n\n\n  /**\n   * Loads the Closure Dependency file.\n   *\n   * Exposed a public function so CLOSURE_NO_DEPS can be set to false, base\n   * loaded, setDependencyFactory called, and then this called. i.e. allows\n   * custom loading of the deps file.\n   */\n  goog.loadClosureDeps \x3d function() {\n    goog.debugLoader_.loadClosureDeps();\n  };\n\n\n  /**\n   * Sets the dependency factory, which can be used to create custom\n   * goog.Dependency implementations to control how dependencies are loaded.\n   *\n   * Note: if you wish to call this function and provide your own implemnetation\n   * it is a wise idea to set CLOSURE_NO_DEPS to true, otherwise the dependency\n   * file and all of its goog.addDependency calls will use the default factory.\n   * You can call goog.loadClosureDeps to load the Closure dependency file\n   * later, after your factory is injected.\n   *\n   * @param {!goog.DependencyFactory} factory\n   */\n  goog.setDependencyFactory \x3d function(factory) {\n    goog.debugLoader_.setDependencyFactory(factory);\n  };\n\n\n  if (!goog.global.CLOSURE_NO_DEPS) {\n    goog.debugLoader_.loadClosureDeps();\n  }\n\n\n  /**\n   * Bootstraps the given namespaces and calls the callback once they are\n   * available either via goog.require. This is a replacement for using\n   * `goog.require` to bootstrap Closure Javascript. Previously a `goog.require`\n   * in an HTML file would guarantee that the require\x27d namespace was available\n   * in the next immediate script tag. With ES6 modules this no longer a\n   * guarantee.\n   *\n   * @param {!Array\x3cstring\x3e} namespaces\n   * @param {function(): ?} callback Function to call once all the namespaces\n   *     have loaded. Always called asynchronously.\n   */\n  goog.bootstrap \x3d function(namespaces, callback) {\n    goog.debugLoader_.bootstrap(namespaces, callback);\n  };\n}\n\n//# sourceURL\x3dhttps://qs/javascript/closure/base.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/transitionalforwarddeclarations.js";
eval("// Copyright 2017 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview The forward declarations in this file are here to faciliate\n * the removal of \x22deps.js\x22 from the \x22base\x22 rule.  These types are\n * included in various extern files.  These rules should be cleaned up\n * so that these declarations aren\x27t necessary.\n * @suppress {extraRequire}\n */\n\ngoog.forwardDeclare(\x27goog.Promise\x27);\ngoog.forwardDeclare(\x27goog.date.DateLike\x27);\ngoog.forwardDeclare(\x27goog.date.DateTime\x27);\ngoog.forwardDeclare(\x27goog.events.EventId\x27);\ngoog.forwardDeclare(\x27goog.events.Key\x27);\ngoog.forwardDeclare(\x27goog.events.KeyCodes\x27);\ngoog.forwardDeclare(\x27goog.i18n.TimeZone\x27);\ngoog.forwardDeclare(\x27goog.math.Range\x27);\ngoog.forwardDeclare(\x27goog.math.Size\x27);\ngoog.forwardDeclare(\x27goog.structs.Map\x27);\n\n//# sourceURL\x3dhttps://qs/javascript/closure/transitionalforwarddeclarations.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/quantum/bootstrap.js";
eval("/**\n * @fileoverview Bootstrap JavaScript required for Quantum Search.  Code in\n * this file appears right after the first CSI tick when executing primary\n * XJS responses.\n */\n\n// NOTE: Keep these in sync with the Quantum module set compiler defines in\n// //googledata/html/templates/gws/head/xjs:xjs.config\n// TODO(ruilopes): Generate this based on xjs.config\nconst CLOSURE_UNCOMPILED_DEFINES \x3d {\n  \x27goog.json.USE_NATIVE_JSON\x27: true,\n  \x27gws.debug.flag.ENABLED\x27: true,\n  \x27gws.quantum.internal.debug.ENABLED\x27: true,\n  \x27wireless.events.clickbuster.ASSUME_USES_TOUCH_END_PREVENT_DEFAULT\x27: true\n};\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/quantum/bootstrap.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/jspb/binary/constants.js";
eval("/**\n * @fileoverview This file contains constants and typedefs used by\n * jspb.BinaryReader and BinaryWriter.\n *\n * @author aappleby@google.com (Austin Appleby)\n */\n\ngoog.provide(\x27jspb.AnyFieldType\x27);\ngoog.provide(\x27jspb.BinaryConstants\x27);\ngoog.provide(\x27jspb.BinaryMessage\x27);\ngoog.provide(\x27jspb.BuilderFunction\x27);\ngoog.provide(\x27jspb.ByteSource\x27);\ngoog.provide(\x27jspb.ClonerFunction\x27);\ngoog.provide(\x27jspb.ComparerFunction\x27);\ngoog.provide(\x27jspb.ConstBinaryMessage\x27);\ngoog.provide(\x27jspb.PrunerFunction\x27);\ngoog.provide(\x27jspb.ReaderFunction\x27);\ngoog.provide(\x27jspb.RecyclerFunction\x27);\ngoog.provide(\x27jspb.RepeatedFieldType\x27);\ngoog.provide(\x27jspb.ScalarFieldType\x27);\ngoog.provide(\x27jspb.WriterFunction\x27);\n\n\ngoog.forwardDeclare(\x27jspb.BinaryMessage\x27);\ngoog.forwardDeclare(\x27jspb.BinaryReader\x27);\ngoog.forwardDeclare(\x27jspb.BinaryWriter\x27);\ngoog.forwardDeclare(\x27jspb.Message\x27);\ngoog.forwardDeclare(\x27jsproto.BinaryExtension\x27);\n\n\n\n/**\n * Base interface class for all const messages.\n * @interface\n */\njspb.ConstBinaryMessage \x3d function() {};\n\n/**\n * Generate a debug string for this proto that is in proto2 text format.\n * @return {string} The debug string.\n */\njspb.ConstBinaryMessage.prototype.toDebugString;\n\n/**\n * Helper to generate a debug string for this proto at some indent level. The\n * first line is not indented.\n * @param {number} indentLevel The number of spaces by which to indent lines.\n * @return {string} The debug string.\n * @protected\n */\njspb.ConstBinaryMessage.prototype.toDebugStringInternal;\n\n/**\n * Base interface class for all messages. Does __not__ define any methods, as\n * doing so on a widely-used interface defeats dead-code elimination.\n * @interface\n * @extends {jspb.ConstBinaryMessage}\n */\njspb.BinaryMessage \x3d function() {};\n\n\n/**\n * The types convertible to Uint8Arrays. Strings are assumed to be\n * base64-encoded.\n * @typedef {ArrayBuffer|Uint8Array|Array\x3cnumber\x3e|string}\n */\njspb.ByteSource;\n\n\n/**\n * A scalar field in jspb can be a boolean, number, or string.\n * @typedef {boolean|number|string}\n */\njspb.ScalarFieldType;\n\n\n/**\n * A repeated field in jspb is an array of scalars, blobs, or messages.\n * @typedef {!Array\x3cjspb.ScalarFieldType\x3e|\n             !Array\x3c!Uint8Array\x3e|\n             !Array\x3c!jspb.ConstBinaryMessage\x3e|\n             !Array\x3c!jspb.BinaryMessage\x3e}\n */\njspb.RepeatedFieldType;\n\n\n/**\n * A field in jspb can be a scalar, a block of bytes, another proto, or an\n * array of any of the above.\n * @typedef {jspb.ScalarFieldType|\n             jspb.RepeatedFieldType|\n             !Uint8Array|\n             !jspb.ConstBinaryMessage|\n             !jspb.BinaryMessage|\n             !jsproto.BinaryExtension}\n */\njspb.AnyFieldType;\n\n\n/**\n * A builder function creates an instance of a message object.\n * @typedef {function():!jspb.BinaryMessage}\n */\njspb.BuilderFunction;\n\n\n/**\n * A cloner function creates a deep copy of a message object.\n * @typedef {function(jspb.ConstBinaryMessage):jspb.BinaryMessage}\n */\njspb.ClonerFunction;\n\n\n/**\n * A recycler function destroys an instance of a message object.\n * @typedef {function(!jspb.BinaryMessage):void}\n */\njspb.RecyclerFunction;\n\n\n/**\n * A reader function initializes a message using data from a BinaryReader.\n * @typedef {function(!jspb.BinaryMessage, !jspb.BinaryReader):void}\n */\njspb.ReaderFunction;\n\n\n/**\n * A writer function serializes a message to a BinaryWriter.\n * @typedef {function((!jspb.Message|!jspb.ConstBinaryMessage),\n *                    !jspb.BinaryWriter):void}\n */\njspb.WriterFunction;\n\n\n/**\n * A pruner function removes default-valued fields and empty submessages from a\n * message and returns either the pruned message or null if the entire message\n * was pruned away.\n * @typedef {function(?jspb.BinaryMessage):?jspb.BinaryMessage}\n */\njspb.PrunerFunction;\n\n\n/**\n * A comparer function returns true if two protos are equal.\n * @typedef {function(?jspb.ConstBinaryMessage,\n *                     ?jspb.ConstBinaryMessage):boolean}\n */\njspb.ComparerFunction;\n\n\n/**\n * Field type codes, taken from proto2/public/wire_format_lite.h.\n * @enum {number}\n */\njspb.BinaryConstants.FieldType \x3d {\n  INVALID: -1,\n  DOUBLE: 1,\n  FLOAT: 2,\n  INT64: 3,\n  UINT64: 4,\n  INT32: 5,\n  FIXED64: 6,\n  FIXED32: 7,\n  BOOL: 8,\n  STRING: 9,\n  GROUP: 10,\n  MESSAGE: 11,\n  BYTES: 12,\n  UINT32: 13,\n  ENUM: 14,\n  SFIXED32: 15,\n  SFIXED64: 16,\n  SINT32: 17,\n  SINT64: 18,\n\n  // Extended types for Javascript\n\n  FHASH64: 30, // 64-bit hash string, fixed-length encoding.\n  VHASH64: 31  // 64-bit hash string, varint encoding.\n};\n\n\n/**\n * Wire-format type codes, taken from proto2/public/wire_format_lite.h.\n * @enum {number}\n */\njspb.BinaryConstants.WireType \x3d {\n  INVALID: -1,\n  VARINT: 0,\n  FIXED64: 1,\n  DELIMITED: 2,\n  START_GROUP: 3,\n  END_GROUP: 4,\n  FIXED32: 5\n};\n\n\n/**\n * Translates field type to wire type.\n * @param {jspb.BinaryConstants.FieldType} fieldType\n * @return {jspb.BinaryConstants.WireType}\n */\njspb.BinaryConstants.FieldTypeToWireType \x3d function(fieldType) {\n  var fieldTypes \x3d jspb.BinaryConstants.FieldType;\n  var wireTypes \x3d jspb.BinaryConstants.WireType;\n  switch (fieldType) {\n    case fieldTypes.INT32:\n    case fieldTypes.INT64:\n    case fieldTypes.UINT32:\n    case fieldTypes.UINT64:\n    case fieldTypes.SINT32:\n    case fieldTypes.SINT64:\n    case fieldTypes.BOOL:\n    case fieldTypes.ENUM:\n    case fieldTypes.VHASH64:\n      return wireTypes.VARINT;\n\n    case fieldTypes.DOUBLE:\n    case fieldTypes.FIXED64:\n    case fieldTypes.SFIXED64:\n    case fieldTypes.FHASH64:\n      return wireTypes.FIXED64;\n\n    case fieldTypes.STRING:\n    case fieldTypes.MESSAGE:\n    case fieldTypes.BYTES:\n      return wireTypes.DELIMITED;\n\n    case fieldTypes.FLOAT:\n    case fieldTypes.FIXED32:\n    case fieldTypes.SFIXED32:\n      return wireTypes.FIXED32;\n\n    case fieldTypes.INVALID:\n    case fieldTypes.GROUP:\n    default:\n      return wireTypes.INVALID;\n  }\n};\n\n\n/**\n * Flag to indicate a missing field.\n * @const {number}\n */\njspb.BinaryConstants.INVALID_FIELD_NUMBER \x3d -1;\n\n\n/**\n * The smallest denormal float32 value.\n * @const {number}\n */\njspb.BinaryConstants.FLOAT32_EPS \x3d 1.401298464324817e-45;\n\n\n/**\n * The smallest normal float64 value.\n * @const {number}\n */\njspb.BinaryConstants.FLOAT32_MIN \x3d 1.1754943508222875e-38;\n\n\n/**\n * The largest finite float32 value.\n * @const {number}\n */\njspb.BinaryConstants.FLOAT32_MAX \x3d 3.4028234663852886e+38;\n\n\n/**\n * The smallest denormal float64 value.\n * @const {number}\n */\njspb.BinaryConstants.FLOAT64_EPS \x3d 5e-324;\n\n\n/**\n * The smallest normal float64 value.\n * @const {number}\n */\njspb.BinaryConstants.FLOAT64_MIN \x3d 2.2250738585072014e-308;\n\n\n/**\n * The largest finite float64 value.\n * @const {number}\n */\njspb.BinaryConstants.FLOAT64_MAX \x3d 1.7976931348623157e+308;\n\n\n/**\n * Convenience constant equal to 2^20.\n * @const {number}\n */\njspb.BinaryConstants.TWO_TO_20 \x3d 1048576;\n\n\n/**\n * Convenience constant equal to 2^23.\n * @const {number}\n */\njspb.BinaryConstants.TWO_TO_23 \x3d 8388608;\n\n\n/**\n * Convenience constant equal to 2^31.\n * @const {number}\n */\njspb.BinaryConstants.TWO_TO_31 \x3d 2147483648;\n\n\n/**\n * Convenience constant equal to 2^32.\n * @const {number}\n */\njspb.BinaryConstants.TWO_TO_32 \x3d 4294967296;\n\n\n/**\n * Convenience constant equal to 2^52.\n * @const {number}\n */\njspb.BinaryConstants.TWO_TO_52 \x3d 4503599627370496;\n\n\n/**\n * Convenience constant equal to 2^63.\n * @const {number}\n */\njspb.BinaryConstants.TWO_TO_63 \x3d 9223372036854775808;\n\n\n/**\n * Convenience constant equal to 2^64.\n * @const {number}\n */\njspb.BinaryConstants.TWO_TO_64 \x3d 18446744073709551616;\n\n\n/**\n * Eight-character string of zeros, used as the default 64-bit hash value.\n * @const {string}\n */\njspb.BinaryConstants.ZERO_HASH \x3d \x27\\0\\0\\0\\0\\0\\0\\0\\0\x27;\n\n//# sourceURL\x3dhttps://qs/javascript/apps/jspb/binary/constants.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/debug/error.js";
eval("// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Provides a base class for custom Error objects such that the\n * stack is correctly maintained.\n *\n * You should never need to throw goog.debug.Error(msg) directly, Error(msg) is\n * sufficient.\n *\n * @author pupius@google.com (Daniel Pupius)\n */\n\ngoog.provide(\x27goog.debug.Error\x27);\n\n\n\n/**\n * Base class for custom error objects.\n * @param {*\x3d} opt_msg The message associated with the error.\n * @constructor\n * @extends {Error}\n */\ngoog.debug.Error \x3d function(opt_msg) {\n\n  // Attempt to ensure there is a stack trace.\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, goog.debug.Error);\n  } else {\n    var stack \x3d new Error().stack;\n    if (stack) {\n      /** @override */\n      this.stack \x3d stack;\n    }\n  }\n\n  if (opt_msg) {\n    /** @override */\n    this.message \x3d String(opt_msg);\n  }\n\n  /**\n   * Whether to report this error to the server. Setting this to false will\n   * cause the error reporter to not report the error back to the server,\n   * which can be useful if the client knows that the error has already been\n   * logged on the server.\n   * @type {boolean}\n   */\n  this.reportErrorToServer \x3d true;\n};\ngoog.inherits(goog.debug.Error, Error);\n\n\n/** @override */\ngoog.debug.Error.prototype.name \x3d \x27CustomError\x27;\n\n//# sourceURL\x3dhttps://qs/javascript/closure/debug/error.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/dom/nodetype.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Definition of goog.dom.NodeType.\n */\n\ngoog.provide(\x27goog.dom.NodeType\x27);\n\n\n/**\n * Constants for the nodeType attribute in the Node interface.\n *\n * These constants match those specified in the Node interface. These are\n * usually present on the Node object in recent browsers, but not in older\n * browsers (specifically, early IEs) and thus are given here.\n *\n * In some browsers (early IEs), these are not defined on the Node object,\n * so they are provided here.\n *\n * See http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1950641247\n * @enum {number}\n */\ngoog.dom.NodeType \x3d {\n  ELEMENT: 1,\n  ATTRIBUTE: 2,\n  TEXT: 3,\n  CDATA_SECTION: 4,\n  ENTITY_REFERENCE: 5,\n  ENTITY: 6,\n  PROCESSING_INSTRUCTION: 7,\n  COMMENT: 8,\n  DOCUMENT: 9,\n  DOCUMENT_TYPE: 10,\n  DOCUMENT_FRAGMENT: 11,\n  NOTATION: 12\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/dom/nodetype.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/asserts/asserts.js";
eval("// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utilities to check the preconditions, postconditions and\n * invariants runtime.\n *\n * Methods in this package should be given special treatment by the compiler\n * for type-inference. For example, \x3ccode\x3egoog.asserts.assert(foo)\x3c/code\x3e\n * will restrict \x3ccode\x3efoo\x3c/code\x3e to a truthy value.\n *\n * The compiler has an option to disable asserts. So code like:\n * \x3ccode\x3e\n * var x \x3d goog.asserts.assert(foo()); goog.asserts.assert(bar());\n * \x3c/code\x3e\n * will be transformed into:\n * \x3ccode\x3e\n * var x \x3d foo();\n * \x3c/code\x3e\n * The compiler will leave in foo() (because its return value is used),\n * but it will remove bar() because it assumes it does not have side-effects.\n *\n * @author pallosp@google.com (Peter Pallos)\n * @author agrieve@google.com (Andrew Grieve)\n */\n\ngoog.provide(\x27goog.asserts\x27);\ngoog.provide(\x27goog.asserts.AssertionError\x27);\n\ngoog.require(\x27goog.debug.Error\x27);\ngoog.require(\x27goog.dom.NodeType\x27);\n\n\n/**\n * @define {boolean} Whether to strip out asserts or to leave them in.\n */\ngoog.define(\x27goog.asserts.ENABLE_ASSERTS\x27, goog.DEBUG);\n\n\n\n/**\n * Error object for failed assertions.\n * @param {string} messagePattern The pattern that was used to form message.\n * @param {!Array\x3c*\x3e} messageArgs The items to substitute into the pattern.\n * @constructor\n * @extends {goog.debug.Error}\n * @final\n */\ngoog.asserts.AssertionError \x3d function(messagePattern, messageArgs) {\n  goog.debug.Error.call(this, goog.asserts.subs_(messagePattern, messageArgs));\n\n  /**\n   * The message pattern used to format the error message. Error handlers can\n   * use this to uniquely identify the assertion.\n   * @type {string}\n   */\n  this.messagePattern \x3d messagePattern;\n};\ngoog.inherits(goog.asserts.AssertionError, goog.debug.Error);\n\n\n/** @override */\ngoog.asserts.AssertionError.prototype.name \x3d \x27AssertionError\x27;\n\n\n/**\n * The default error handler.\n * @param {!goog.asserts.AssertionError} e The exception to be handled.\n */\ngoog.asserts.DEFAULT_ERROR_HANDLER \x3d function(e) {\n  throw e;\n};\n\n\n/**\n * The handler responsible for throwing or logging assertion errors.\n * @private {function(!goog.asserts.AssertionError)}\n */\ngoog.asserts.errorHandler_ \x3d goog.asserts.DEFAULT_ERROR_HANDLER;\n\n\n/**\n * Does simple python-style string substitution.\n * subs(\x22foo%s hot%s\x22, \x22bar\x22, \x22dog\x22) becomes \x22foobar hotdog\x22.\n * @param {string} pattern The string containing the pattern.\n * @param {!Array\x3c*\x3e} subs The items to substitute into the pattern.\n * @return {string} A copy of `str` in which each occurrence of\n *     {@code %s} has been replaced an argument from `var_args`.\n * @private\n */\ngoog.asserts.subs_ \x3d function(pattern, subs) {\n  var splitParts \x3d pattern.split(\x27%s\x27);\n  var returnString \x3d \x27\x27;\n\n  // Replace up to the last split part. We are inserting in the\n  // positions between split parts.\n  var subLast \x3d splitParts.length - 1;\n  for (var i \x3d 0; i \x3c subLast; i++) {\n    // keep unsupplied as \x27%s\x27\n    var sub \x3d (i \x3c subs.length) ? subs[i] : \x27%s\x27;\n    returnString +\x3d splitParts[i] + sub;\n  }\n  return returnString + splitParts[subLast];\n};\n\n\n/**\n * Throws an exception with the given message and \x22Assertion failed\x22 prefixed\n * onto it.\n * @param {string} defaultMessage The message to use if givenMessage is empty.\n * @param {Array\x3c*\x3e} defaultArgs The substitution arguments for defaultMessage.\n * @param {string|undefined} givenMessage Message supplied by the caller.\n * @param {Array\x3c*\x3e} givenArgs The substitution arguments for givenMessage.\n * @throws {goog.asserts.AssertionError} When the value is not a number.\n * @private\n */\ngoog.asserts.doAssertFailure_ \x3d function(\n    defaultMessage, defaultArgs, givenMessage, givenArgs) {\n  var message \x3d \x27Assertion failed\x27;\n  if (givenMessage) {\n    message +\x3d \x27: \x27 + givenMessage;\n    var args \x3d givenArgs;\n  } else if (defaultMessage) {\n    message +\x3d \x27: \x27 + defaultMessage;\n    args \x3d defaultArgs;\n  }\n  // The \x27\x27 + works around an Opera 10 bug in the unit tests. Without it,\n  // a stack trace is added to var message above. With this, a stack trace is\n  // not added until this line (it causes the extra garbage to be added after\n  // the assertion message instead of in the middle of it).\n  var e \x3d new goog.asserts.AssertionError(\x27\x27 + message, args || []);\n  goog.asserts.errorHandler_(e);\n};\n\n\n/**\n * Sets a custom error handler that can be used to customize the behavior of\n * assertion failures, for example by turning all assertion failures into log\n * messages.\n * @param {function(!goog.asserts.AssertionError)} errorHandler\n */\ngoog.asserts.setErrorHandler \x3d function(errorHandler) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    goog.asserts.errorHandler_ \x3d errorHandler;\n  }\n};\n\n\n/**\n * Checks if the condition evaluates to true if goog.asserts.ENABLE_ASSERTS is\n * true.\n * @template T\n * @param {T} condition The condition to check.\n * @param {string\x3d} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {T} The value of the condition.\n * @throws {goog.asserts.AssertionError} When the condition evaluates to false.\n */\ngoog.asserts.assert \x3d function(condition, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS \x26\x26 !condition) {\n    goog.asserts.doAssertFailure_(\n        \x27\x27, null, opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return condition;\n};\n\n\n/**\n * Fails if goog.asserts.ENABLE_ASSERTS is true. This function is useful in case\n * when we want to add a check in the unreachable area like switch-case\n * statement:\n *\n * \x3cpre\x3e\n *  switch(type) {\n *    case FOO: doSomething(); break;\n *    case BAR: doSomethingElse(); break;\n *    default: goog.asserts.fail(\x27Unrecognized type: \x27 + type);\n *      // We have only 2 types - \x22default:\x22 section is unreachable code.\n *  }\n * \x3c/pre\x3e\n *\n * @param {string\x3d} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @throws {goog.asserts.AssertionError} Failure.\n */\ngoog.asserts.fail \x3d function(opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    goog.asserts.errorHandler_(\n        new goog.asserts.AssertionError(\n            \x27Failure\x27 + (opt_message ? \x27: \x27 + opt_message : \x27\x27),\n            Array.prototype.slice.call(arguments, 1)));\n  }\n};\n\n\n/**\n * Checks if the value is a number if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string\x3d} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {number} The value, guaranteed to be a number when asserts enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a number.\n */\ngoog.asserts.assertNumber \x3d function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS \x26\x26 !goog.isNumber(value)) {\n    goog.asserts.doAssertFailure_(\n        \x27Expected number but got %s: %s.\x27, [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {number} */ (value);\n};\n\n\n/**\n * Checks if the value is a string if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string\x3d} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {string} The value, guaranteed to be a string when asserts enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a string.\n */\ngoog.asserts.assertString \x3d function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS \x26\x26 !goog.isString(value)) {\n    goog.asserts.doAssertFailure_(\n        \x27Expected string but got %s: %s.\x27, [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {string} */ (value);\n};\n\n\n/**\n * Checks if the value is a function if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string\x3d} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Function} The value, guaranteed to be a function when asserts\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a function.\n */\ngoog.asserts.assertFunction \x3d function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS \x26\x26 !goog.isFunction(value)) {\n    goog.asserts.doAssertFailure_(\n        \x27Expected function but got %s: %s.\x27, [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Function} */ (value);\n};\n\n\n/**\n * Checks if the value is an Object if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string\x3d} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Object} The value, guaranteed to be a non-null object.\n * @throws {goog.asserts.AssertionError} When the value is not an object.\n */\ngoog.asserts.assertObject \x3d function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS \x26\x26 !goog.isObject(value)) {\n    goog.asserts.doAssertFailure_(\n        \x27Expected object but got %s: %s.\x27, [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Object} */ (value);\n};\n\n\n/**\n * Checks if the value is an Array if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string\x3d} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Array\x3c?\x3e} The value, guaranteed to be a non-null array.\n * @throws {goog.asserts.AssertionError} When the value is not an array.\n */\ngoog.asserts.assertArray \x3d function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS \x26\x26 !goog.isArray(value)) {\n    goog.asserts.doAssertFailure_(\n        \x27Expected array but got %s: %s.\x27, [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Array\x3c?\x3e} */ (value);\n};\n\n\n/**\n * Checks if the value is a boolean if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string\x3d} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {boolean} The value, guaranteed to be a boolean when asserts are\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a boolean.\n */\ngoog.asserts.assertBoolean \x3d function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS \x26\x26 !goog.isBoolean(value)) {\n    goog.asserts.doAssertFailure_(\n        \x27Expected boolean but got %s: %s.\x27, [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {boolean} */ (value);\n};\n\n\n/**\n * Checks if the value is a DOM Element if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string\x3d} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Element} The value, likely to be a DOM Element when asserts are\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not an Element.\n */\ngoog.asserts.assertElement \x3d function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS \x26\x26\n      (!goog.isObject(value) || value.nodeType !\x3d goog.dom.NodeType.ELEMENT)) {\n    goog.asserts.doAssertFailure_(\n        \x27Expected Element but got %s: %s.\x27, [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Element} */ (value);\n};\n\n\n/**\n * Checks if the value is an instance of the user-defined type if\n * goog.asserts.ENABLE_ASSERTS is true.\n *\n * The compiler may tighten the type returned by this function.\n *\n * @param {?} value The value to check.\n * @param {function(new: T, ...)} type A user-defined constructor.\n * @param {string\x3d} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @throws {goog.asserts.AssertionError} When the value is not an instance of\n *     type.\n * @return {T}\n * @template T\n */\ngoog.asserts.assertInstanceof \x3d function(value, type, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS \x26\x26 !(value instanceof type)) {\n    goog.asserts.doAssertFailure_(\n        \x27Expected instanceof %s but got %s.\x27,\n        [goog.asserts.getType_(type), goog.asserts.getType_(value)],\n        opt_message, Array.prototype.slice.call(arguments, 3));\n  }\n  return value;\n};\n\n\n/**\n * Checks whether the value is a finite number, if goog.asserts.ENABLE_ASSERTS\n * is true.\n *\n * @param {*} value The value to check.\n * @param {string\x3d} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @throws {goog.asserts.AssertionError} When the value is not a number, or is\n *     a non-finite number such as NaN, Infinity or -Infinity.\n * @return {number} The value initially passed in.\n */\ngoog.asserts.assertFinite \x3d function(value, opt_message, var_args) {\n  if (goog.asserts.ENABLE_ASSERTS \x26\x26\n      (typeof value !\x3d \x27number\x27 || !isFinite(value))) {\n    goog.asserts.doAssertFailure_(\n        \x27Expected %s to be a finite number but it is not.\x27, [value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {number} */ (value);\n};\n\n/**\n * Checks that no enumerable keys are present in Object.prototype. Such keys\n * would break most code that use {@code for (var ... in ...)} loops.\n */\ngoog.asserts.assertObjectPrototypeIsIntact \x3d function() {\n  for (var key in Object.prototype) {\n    goog.asserts.fail(key + \x27 should not be enumerable in Object.prototype.\x27);\n  }\n};\n\n\n/**\n * Returns the type of a value. If a constructor is passed, and a suitable\n * string cannot be found, \x27unknown type name\x27 will be returned.\n * @param {*} value A constructor, object, or primitive.\n * @return {string} The best display name for the value, or \x27unknown type name\x27.\n * @private\n */\ngoog.asserts.getType_ \x3d function(value) {\n  if (value instanceof Function) {\n    return value.displayName || value.name || \x27unknown type name\x27;\n  } else if (value instanceof Object) {\n    return /** @type {string} */ (value.constructor.displayName) ||\n        value.constructor.name || Object.prototype.toString.call(value);\n  } else {\n    return value \x3d\x3d\x3d null ? \x27null\x27 : typeof value;\n  }\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/asserts/asserts.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/array/array.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utilities for manipulating arrays.\n *\n * @author pupius@google.com (Daniel Pupius)\n * @author arv@google.com (Erik Arvidsson)\n * @author pallosp@google.com (Peter Pallos)\n */\n\n\ngoog.provide(\x27goog.array\x27);\n\ngoog.require(\x27goog.asserts\x27);\n\n\n/**\n * @define {boolean} NATIVE_ARRAY_PROTOTYPES indicates whether the code should\n * rely on Array.prototype functions, if available.\n *\n * The Array.prototype functions can be defined by external libraries like\n * Prototype and setting this flag to false forces closure to use its own\n * goog.array implementation.\n *\n * If your javascript can be loaded by a third party site and you are wary about\n * relying on the prototype functions, specify\n * \x22--define goog.NATIVE_ARRAY_PROTOTYPES\x3dfalse\x22 to the JSCompiler.\n *\n * Setting goog.TRUSTED_SITE to false will automatically set\n * NATIVE_ARRAY_PROTOTYPES to false.\n */\ngoog.define(\x27goog.NATIVE_ARRAY_PROTOTYPES\x27, goog.TRUSTED_SITE);\n\n\n/**\n * @define {boolean} If true, JSCompiler will use the native implementation of\n * array functions where appropriate (e.g., `Array#filter`) and remove the\n * unused pure JS implementation.\n */\ngoog.define(\x27goog.array.ASSUME_NATIVE_FUNCTIONS\x27, false);\n\n\n/**\n * Returns the last element in an array without removing it.\n * Same as goog.array.last.\n * @param {IArrayLike\x3cT\x3e|string} array The array.\n * @return {T} Last item in array.\n * @template T\n */\ngoog.array.peek \x3d function(array) {\n  return array[array.length - 1];\n};\n\n\n/**\n * Returns the last element in an array without removing it.\n * Same as goog.array.peek.\n * @param {IArrayLike\x3cT\x3e|string} array The array.\n * @return {T} Last item in array.\n * @template T\n */\ngoog.array.last \x3d goog.array.peek;\n\n// NOTE(arv): Since most of the array functions are generic it allows you to\n// pass an array-like object. Strings have a length and are considered array-\n// like. However, the \x27in\x27 operator does not work on strings so we cannot just\n// use the array path even if the browser supports indexing into strings. We\n// therefore end up splitting the string.\n\n\n/**\n * Returns the index of the first element of an array with a specified value, or\n * -1 if the element is not present in the array.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-indexof}\n *\n * @param {IArrayLike\x3cT\x3e|string} arr The array to be searched.\n * @param {T} obj The object for which we are searching.\n * @param {number\x3d} opt_fromIndex The index at which to start the search. If\n *     omitted the search starts at index 0.\n * @return {number} The index of the first matching array element.\n * @template T\n */\ngoog.array.indexOf \x3d goog.NATIVE_ARRAY_PROTOTYPES \x26\x26\n        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.indexOf) ?\n    function(arr, obj, opt_fromIndex) {\n      goog.asserts.assert(arr.length !\x3d null);\n\n      return Array.prototype.indexOf.call(arr, obj, opt_fromIndex);\n    } :\n    function(arr, obj, opt_fromIndex) {\n      var fromIndex \x3d opt_fromIndex \x3d\x3d null ?\n          0 :\n          (opt_fromIndex \x3c 0 ? Math.max(0, arr.length + opt_fromIndex) :\n                               opt_fromIndex);\n\n      if (goog.isString(arr)) {\n        // Array.prototype.indexOf uses \x3d\x3d\x3d so only strings should be found.\n        if (!goog.isString(obj) || obj.length !\x3d 1) {\n          return -1;\n        }\n        return arr.indexOf(obj, fromIndex);\n      }\n\n      for (var i \x3d fromIndex; i \x3c arr.length; i++) {\n        if (i in arr \x26\x26 arr[i] \x3d\x3d\x3d obj) return i;\n      }\n      return -1;\n    };\n\n\n/**\n * Returns the index of the last element of an array with a specified value, or\n * -1 if the element is not present in the array.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-lastindexof}\n *\n * @param {!IArrayLike\x3cT\x3e|string} arr The array to be searched.\n * @param {T} obj The object for which we are searching.\n * @param {?number\x3d} opt_fromIndex The index at which to start the search. If\n *     omitted the search starts at the end of the array.\n * @return {number} The index of the last matching array element.\n * @template T\n */\ngoog.array.lastIndexOf \x3d goog.NATIVE_ARRAY_PROTOTYPES \x26\x26\n        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.lastIndexOf) ?\n    function(arr, obj, opt_fromIndex) {\n      goog.asserts.assert(arr.length !\x3d null);\n\n      // Firefox treats undefined and null as 0 in the fromIndex argument which\n      // leads it to always return -1\n      var fromIndex \x3d opt_fromIndex \x3d\x3d null ? arr.length - 1 : opt_fromIndex;\n      return Array.prototype.lastIndexOf.call(arr, obj, fromIndex);\n    } :\n    function(arr, obj, opt_fromIndex) {\n      var fromIndex \x3d opt_fromIndex \x3d\x3d null ? arr.length - 1 : opt_fromIndex;\n\n      if (fromIndex \x3c 0) {\n        fromIndex \x3d Math.max(0, arr.length + fromIndex);\n      }\n\n      if (goog.isString(arr)) {\n        // Array.prototype.lastIndexOf uses \x3d\x3d\x3d so only strings should be found.\n        if (!goog.isString(obj) || obj.length !\x3d 1) {\n          return -1;\n        }\n        return arr.lastIndexOf(obj, fromIndex);\n      }\n\n      for (var i \x3d fromIndex; i \x3e\x3d 0; i--) {\n        if (i in arr \x26\x26 arr[i] \x3d\x3d\x3d obj) return i;\n      }\n      return -1;\n    };\n\n\n/**\n * Calls a function for each element in an array. Skips holes in the array.\n * See {@link http://tinyurl.com/developer-mozilla-org-array-foreach}\n *\n * @param {IArrayLike\x3cT\x3e|string} arr Array or array like object over\n *     which to iterate.\n * @param {?function(this: S, T, number, ?): ?} f The function to call for every\n *     element. This function takes 3 arguments (the element, the index and the\n *     array). The return value is ignored.\n * @param {S\x3d} opt_obj The object to be used as the value of \x27this\x27 within f.\n * @template T,S\n */\ngoog.array.forEach \x3d goog.NATIVE_ARRAY_PROTOTYPES \x26\x26\n        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.forEach) ?\n    function(arr, f, opt_obj) {\n      goog.asserts.assert(arr.length !\x3d null);\n\n      Array.prototype.forEach.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      var l \x3d arr.length;  // must be fixed during loop... see docs\n      var arr2 \x3d goog.isString(arr) ? arr.split(\x27\x27) : arr;\n      for (var i \x3d 0; i \x3c l; i++) {\n        if (i in arr2) {\n          f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr);\n        }\n      }\n    };\n\n\n/**\n * Calls a function for each element in an array, starting from the last\n * element rather than the first.\n *\n * @param {IArrayLike\x3cT\x3e|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this: S, T, number, ?): ?} f The function to call for every\n *     element. This function\n *     takes 3 arguments (the element, the index and the array). The return\n *     value is ignored.\n * @param {S\x3d} opt_obj The object to be used as the value of \x27this\x27\n *     within f.\n * @template T,S\n */\ngoog.array.forEachRight \x3d function(arr, f, opt_obj) {\n  var l \x3d arr.length;  // must be fixed during loop... see docs\n  var arr2 \x3d goog.isString(arr) ? arr.split(\x27\x27) : arr;\n  for (var i \x3d l - 1; i \x3e\x3d 0; --i) {\n    if (i in arr2) {\n      f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr);\n    }\n  }\n};\n\n\n/**\n * Calls a function for each element in an array, and if the function returns\n * true adds the element to a new array.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-filter}\n *\n * @param {IArrayLike\x3cT\x3e|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?):boolean} f The function to call for\n *     every element. This function\n *     takes 3 arguments (the element, the index and the array) and must\n *     return a Boolean. If the return value is true the element is added to the\n *     result array. If it is false the element is not included.\n * @param {S\x3d} opt_obj The object to be used as the value of \x27this\x27\n *     within f.\n * @return {!Array\x3cT\x3e} a new array in which only elements that passed the test\n *     are present.\n * @template T,S\n */\ngoog.array.filter \x3d goog.NATIVE_ARRAY_PROTOTYPES \x26\x26\n        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.filter) ?\n    function(arr, f, opt_obj) {\n      goog.asserts.assert(arr.length !\x3d null);\n\n      return Array.prototype.filter.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      var l \x3d arr.length;  // must be fixed during loop... see docs\n      var res \x3d [];\n      var resLength \x3d 0;\n      var arr2 \x3d goog.isString(arr) ? arr.split(\x27\x27) : arr;\n      for (var i \x3d 0; i \x3c l; i++) {\n        if (i in arr2) {\n          var val \x3d arr2[i];  // in case f mutates arr2\n          if (f.call(/** @type {?} */ (opt_obj), val, i, arr)) {\n            res[resLength++] \x3d val;\n          }\n        }\n      }\n      return res;\n    };\n\n\n/**\n * Calls a function for each element in an array and inserts the result into a\n * new array.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-map}\n *\n * @param {IArrayLike\x3cVALUE\x3e|string} arr Array or array like object\n *     over which to iterate.\n * @param {function(this:THIS, VALUE, number, ?): RESULT} f The function to call\n *     for every element. This function takes 3 arguments (the element,\n *     the index and the array) and should return something. The result will be\n *     inserted into a new array.\n * @param {THIS\x3d} opt_obj The object to be used as the value of \x27this\x27 within f.\n * @return {!Array\x3cRESULT\x3e} a new array with the results from f.\n * @template THIS, VALUE, RESULT\n */\ngoog.array.map \x3d goog.NATIVE_ARRAY_PROTOTYPES \x26\x26\n        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.map) ?\n    function(arr, f, opt_obj) {\n      goog.asserts.assert(arr.length !\x3d null);\n\n      return Array.prototype.map.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      var l \x3d arr.length;  // must be fixed during loop... see docs\n      var res \x3d new Array(l);\n      var arr2 \x3d goog.isString(arr) ? arr.split(\x27\x27) : arr;\n      for (var i \x3d 0; i \x3c l; i++) {\n        if (i in arr2) {\n          res[i] \x3d f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr);\n        }\n      }\n      return res;\n    };\n\n\n/**\n * Passes every element of an array into a function and accumulates the result.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-reduce}\n *\n * For example:\n * var a \x3d [1, 2, 3, 4];\n * goog.array.reduce(a, function(r, v, i, arr) {return r + v;}, 0);\n * returns 10\n *\n * @param {IArrayLike\x3cT\x3e|string} arr Array or array\n *     like object over which to iterate.\n * @param {function(this:S, R, T, number, ?) : R} f The function to call for\n *     every element. This function\n *     takes 4 arguments (the function\x27s previous result or the initial value,\n *     the value of the current array element, the current array index, and the\n *     array itself)\n *     function(previousValue, currentValue, index, array).\n * @param {?} val The initial value to pass into the function on the first call.\n * @param {S\x3d} opt_obj  The object to be used as the value of \x27this\x27\n *     within f.\n * @return {R} Result of evaluating f repeatedly across the values of the array.\n * @template T,S,R\n */\ngoog.array.reduce \x3d goog.NATIVE_ARRAY_PROTOTYPES \x26\x26\n        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduce) ?\n    function(arr, f, val, opt_obj) {\n      goog.asserts.assert(arr.length !\x3d null);\n      if (opt_obj) {\n        f \x3d goog.bind(f, opt_obj);\n      }\n      return Array.prototype.reduce.call(arr, f, val);\n    } :\n    function(arr, f, val, opt_obj) {\n      var rval \x3d val;\n      goog.array.forEach(arr, function(val, index) {\n        rval \x3d f.call(/** @type {?} */ (opt_obj), rval, val, index, arr);\n      });\n      return rval;\n    };\n\n\n/**\n * Passes every element of an array into a function and accumulates the result,\n * starting from the last element and working towards the first.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-reduceright}\n *\n * For example:\n * var a \x3d [\x27a\x27, \x27b\x27, \x27c\x27];\n * goog.array.reduceRight(a, function(r, v, i, arr) {return r + v;}, \x27\x27);\n * returns \x27cba\x27\n *\n * @param {IArrayLike\x3cT\x3e|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, R, T, number, ?) : R} f The function to call for\n *     every element. This function\n *     takes 4 arguments (the function\x27s previous result or the initial value,\n *     the value of the current array element, the current array index, and the\n *     array itself)\n *     function(previousValue, currentValue, index, array).\n * @param {?} val The initial value to pass into the function on the first call.\n * @param {S\x3d} opt_obj The object to be used as the value of \x27this\x27\n *     within f.\n * @return {R} Object returned as a result of evaluating f repeatedly across the\n *     values of the array.\n * @template T,S,R\n */\ngoog.array.reduceRight \x3d goog.NATIVE_ARRAY_PROTOTYPES \x26\x26\n        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduceRight) ?\n    function(arr, f, val, opt_obj) {\n      goog.asserts.assert(arr.length !\x3d null);\n      goog.asserts.assert(f !\x3d null);\n      if (opt_obj) {\n        f \x3d goog.bind(f, opt_obj);\n      }\n      return Array.prototype.reduceRight.call(arr, f, val);\n    } :\n    function(arr, f, val, opt_obj) {\n      var rval \x3d val;\n      goog.array.forEachRight(arr, function(val, index) {\n        rval \x3d f.call(/** @type {?} */ (opt_obj), rval, val, index, arr);\n      });\n      return rval;\n    };\n\n\n/**\n * Calls f for each element of an array. If any call returns true, some()\n * returns true (without checking the remaining elements). If all calls\n * return false, some() returns false.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-some}\n *\n * @param {IArrayLike\x3cT\x3e|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call for\n *     for every element. This function takes 3 arguments (the element, the\n *     index and the array) and should return a boolean.\n * @param {S\x3d} opt_obj  The object to be used as the value of \x27this\x27\n *     within f.\n * @return {boolean} true if any element passes the test.\n * @template T,S\n */\ngoog.array.some \x3d goog.NATIVE_ARRAY_PROTOTYPES \x26\x26\n        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.some) ?\n    function(arr, f, opt_obj) {\n      goog.asserts.assert(arr.length !\x3d null);\n\n      return Array.prototype.some.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      var l \x3d arr.length;  // must be fixed during loop... see docs\n      var arr2 \x3d goog.isString(arr) ? arr.split(\x27\x27) : arr;\n      for (var i \x3d 0; i \x3c l; i++) {\n        if (i in arr2 \x26\x26 f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr)) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n\n/**\n * Call f for each element of an array. If all calls return true, every()\n * returns true. If any call returns false, every() returns false and\n * does not continue to check the remaining elements.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-every}\n *\n * @param {IArrayLike\x3cT\x3e|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call for\n *     for every element. This function takes 3 arguments (the element, the\n *     index and the array) and should return a boolean.\n * @param {S\x3d} opt_obj The object to be used as the value of \x27this\x27\n *     within f.\n * @return {boolean} false if any element fails the test.\n * @template T,S\n */\ngoog.array.every \x3d goog.NATIVE_ARRAY_PROTOTYPES \x26\x26\n        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.every) ?\n    function(arr, f, opt_obj) {\n      goog.asserts.assert(arr.length !\x3d null);\n\n      return Array.prototype.every.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      var l \x3d arr.length;  // must be fixed during loop... see docs\n      var arr2 \x3d goog.isString(arr) ? arr.split(\x27\x27) : arr;\n      for (var i \x3d 0; i \x3c l; i++) {\n        if (i in arr2 \x26\x26 !f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr)) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n\n/**\n * Counts the array elements that fulfill the predicate, i.e. for which the\n * callback function returns true. Skips holes in the array.\n *\n * @param {!IArrayLike\x3cT\x3e|string} arr Array or array like object\n *     over which to iterate.\n * @param {function(this: S, T, number, ?): boolean} f The function to call for\n *     every element. Takes 3 arguments (the element, the index and the array).\n * @param {S\x3d} opt_obj The object to be used as the value of \x27this\x27 within f.\n * @return {number} The number of the matching elements.\n * @template T,S\n */\ngoog.array.count \x3d function(arr, f, opt_obj) {\n  var count \x3d 0;\n  goog.array.forEach(arr, function(element, index, arr) {\n    if (f.call(/** @type {?} */ (opt_obj), element, index, arr)) {\n      ++count;\n    }\n  }, opt_obj);\n  return count;\n};\n\n\n/**\n * Search an array for the first element that satisfies a given condition and\n * return that element.\n * @param {IArrayLike\x3cT\x3e|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function takes 3 arguments (the element, the\n *     index and the array) and should return a boolean.\n * @param {S\x3d} opt_obj An optional \x22this\x22 context for the function.\n * @return {T|null} The first array element that passes the test, or null if no\n *     element is found.\n * @template T,S\n */\ngoog.array.find \x3d function(arr, f, opt_obj) {\n  var i \x3d goog.array.findIndex(arr, f, opt_obj);\n  return i \x3c 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];\n};\n\n\n/**\n * Search an array for the first element that satisfies a given condition and\n * return its index.\n * @param {IArrayLike\x3cT\x3e|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call for\n *     every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S\x3d} opt_obj An optional \x22this\x22 context for the function.\n * @return {number} The index of the first array element that passes the test,\n *     or -1 if no element is found.\n * @template T,S\n */\ngoog.array.findIndex \x3d function(arr, f, opt_obj) {\n  var l \x3d arr.length;  // must be fixed during loop... see docs\n  var arr2 \x3d goog.isString(arr) ? arr.split(\x27\x27) : arr;\n  for (var i \x3d 0; i \x3c l; i++) {\n    if (i in arr2 \x26\x26 f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n/**\n * Search an array (in reverse order) for the last element that satisfies a\n * given condition and return that element.\n * @param {IArrayLike\x3cT\x3e|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S\x3d} opt_obj An optional \x22this\x22 context for the function.\n * @return {T|null} The last array element that passes the test, or null if no\n *     element is found.\n * @template T,S\n */\ngoog.array.findRight \x3d function(arr, f, opt_obj) {\n  var i \x3d goog.array.findIndexRight(arr, f, opt_obj);\n  return i \x3c 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];\n};\n\n\n/**\n * Search an array (in reverse order) for the last element that satisfies a\n * given condition and return its index.\n * @param {IArrayLike\x3cT\x3e|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S\x3d} opt_obj An optional \x22this\x22 context for the function.\n * @return {number} The index of the last array element that passes the test,\n *     or -1 if no element is found.\n * @template T,S\n */\ngoog.array.findIndexRight \x3d function(arr, f, opt_obj) {\n  var l \x3d arr.length;  // must be fixed during loop... see docs\n  var arr2 \x3d goog.isString(arr) ? arr.split(\x27\x27) : arr;\n  for (var i \x3d l - 1; i \x3e\x3d 0; i--) {\n    if (i in arr2 \x26\x26 f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n/**\n * Whether the array contains the given object.\n * @param {IArrayLike\x3c?\x3e|string} arr The array to test for the presence of the\n *     element.\n * @param {*} obj The object for which to test.\n * @return {boolean} true if obj is present.\n */\ngoog.array.contains \x3d function(arr, obj) {\n  return goog.array.indexOf(arr, obj) \x3e\x3d 0;\n};\n\n\n/**\n * Whether the array is empty.\n * @param {IArrayLike\x3c?\x3e|string} arr The array to test.\n * @return {boolean} true if empty.\n */\ngoog.array.isEmpty \x3d function(arr) {\n  return arr.length \x3d\x3d 0;\n};\n\n\n/**\n * Clears the array.\n * @param {IArrayLike\x3c?\x3e} arr Array or array like object to clear.\n */\ngoog.array.clear \x3d function(arr) {\n  // For non real arrays we don\x27t have the magic length so we delete the\n  // indices.\n  if (!goog.isArray(arr)) {\n    for (var i \x3d arr.length - 1; i \x3e\x3d 0; i--) {\n      delete arr[i];\n    }\n  }\n  arr.length \x3d 0;\n};\n\n\n/**\n * Pushes an item into an array, if it\x27s not already in the array.\n * @param {Array\x3cT\x3e} arr Array into which to insert the item.\n * @param {T} obj Value to add.\n * @template T\n */\ngoog.array.insert \x3d function(arr, obj) {\n  if (!goog.array.contains(arr, obj)) {\n    arr.push(obj);\n  }\n};\n\n\n/**\n * Inserts an object at the given index of the array.\n * @param {IArrayLike\x3c?\x3e} arr The array to modify.\n * @param {*} obj The object to insert.\n * @param {number\x3d} opt_i The index at which to insert the object. If omitted,\n *      treated as 0. A negative index is counted from the end of the array.\n */\ngoog.array.insertAt \x3d function(arr, obj, opt_i) {\n  goog.array.splice(arr, opt_i, 0, obj);\n};\n\n\n/**\n * Inserts at the given index of the array, all elements of another array.\n * @param {IArrayLike\x3c?\x3e} arr The array to modify.\n * @param {IArrayLike\x3c?\x3e} elementsToAdd The array of elements to add.\n * @param {number\x3d} opt_i The index at which to insert the object. If omitted,\n *      treated as 0. A negative index is counted from the end of the array.\n */\ngoog.array.insertArrayAt \x3d function(arr, elementsToAdd, opt_i) {\n  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);\n};\n\n\n/**\n * Inserts an object into an array before a specified object.\n * @param {Array\x3cT\x3e} arr The array to modify.\n * @param {T} obj The object to insert.\n * @param {T\x3d} opt_obj2 The object before which obj should be inserted. If obj2\n *     is omitted or not found, obj is inserted at the end of the array.\n * @template T\n */\ngoog.array.insertBefore \x3d function(arr, obj, opt_obj2) {\n  var i;\n  if (arguments.length \x3d\x3d 2 || (i \x3d goog.array.indexOf(arr, opt_obj2)) \x3c 0) {\n    arr.push(obj);\n  } else {\n    goog.array.insertAt(arr, obj, i);\n  }\n};\n\n\n/**\n * Removes the first occurrence of a particular value from an array.\n * @param {IArrayLike\x3cT\x3e} arr Array from which to remove\n *     value.\n * @param {T} obj Object to remove.\n * @return {boolean} True if an element was removed.\n * @template T\n */\ngoog.array.remove \x3d function(arr, obj) {\n  var i \x3d goog.array.indexOf(arr, obj);\n  var rv;\n  if ((rv \x3d i \x3e\x3d 0)) {\n    goog.array.removeAt(arr, i);\n  }\n  return rv;\n};\n\n\n/**\n * Removes the last occurrence of a particular value from an array.\n * @param {!IArrayLike\x3cT\x3e} arr Array from which to remove value.\n * @param {T} obj Object to remove.\n * @return {boolean} True if an element was removed.\n * @template T\n */\ngoog.array.removeLast \x3d function(arr, obj) {\n  var i \x3d goog.array.lastIndexOf(arr, obj);\n  if (i \x3e\x3d 0) {\n    goog.array.removeAt(arr, i);\n    return true;\n  }\n  return false;\n};\n\n\n/**\n * Removes from an array the element at index i\n * @param {IArrayLike\x3c?\x3e} arr Array or array like object from which to\n *     remove value.\n * @param {number} i The index to remove.\n * @return {boolean} True if an element was removed.\n */\ngoog.array.removeAt \x3d function(arr, i) {\n  goog.asserts.assert(arr.length !\x3d null);\n\n  // use generic form of splice\n  // splice returns the removed items and if successful the length of that\n  // will be 1\n  return Array.prototype.splice.call(arr, i, 1).length \x3d\x3d 1;\n};\n\n\n/**\n * Removes the first value that satisfies the given condition.\n * @param {IArrayLike\x3cT\x3e} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S\x3d} opt_obj An optional \x22this\x22 context for the function.\n * @return {boolean} True if an element was removed.\n * @template T,S\n */\ngoog.array.removeIf \x3d function(arr, f, opt_obj) {\n  var i \x3d goog.array.findIndex(arr, f, opt_obj);\n  if (i \x3e\x3d 0) {\n    goog.array.removeAt(arr, i);\n    return true;\n  }\n  return false;\n};\n\n\n/**\n * Removes all values that satisfy the given condition.\n * @param {IArrayLike\x3cT\x3e} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S\x3d} opt_obj An optional \x22this\x22 context for the function.\n * @return {number} The number of items removed\n * @template T,S\n */\ngoog.array.removeAllIf \x3d function(arr, f, opt_obj) {\n  var removedCount \x3d 0;\n  goog.array.forEachRight(arr, function(val, index) {\n    if (f.call(/** @type {?} */ (opt_obj), val, index, arr)) {\n      if (goog.array.removeAt(arr, index)) {\n        removedCount++;\n      }\n    }\n  });\n  return removedCount;\n};\n\n\n/**\n * Returns a new array that is the result of joining the arguments.  If arrays\n * are passed then their items are added, however, if non-arrays are passed they\n * will be added to the return array as is.\n *\n * Note that ArrayLike objects will be added as is, rather than having their\n * items added.\n *\n * goog.array.concat([1, 2], [3, 4]) -\x3e [1, 2, 3, 4]\n * goog.array.concat(0, [1, 2]) -\x3e [0, 1, 2]\n * goog.array.concat([1, 2], null) -\x3e [1, 2, null]\n *\n * There is bug in all current versions of IE (6, 7 and 8) where arrays created\n * in an iframe become corrupted soon (not immediately) after the iframe is\n * destroyed. This is common if loading data via goog.net.IframeIo, for example.\n * This corruption only affects the concat method which will start throwing\n * Catastrophic Errors (#-2147418113).\n *\n * See http://endoflow.com/scratch/corrupted-arrays.html for a test case.\n *\n * Internally goog.array should use this, so that all methods will continue to\n * work on these broken array objects.\n *\n * @param {...*} var_args Items to concatenate.  Arrays will have each item\n *     added, while primitives and objects will be added as is.\n * @return {!Array\x3c?\x3e} The new resultant array.\n */\ngoog.array.concat \x3d function(var_args) {\n  return Array.prototype.concat.apply([], arguments);\n};\n\n\n/**\n * Returns a new array that contains the contents of all the arrays passed.\n * @param {...!Array\x3cT\x3e} var_args\n * @return {!Array\x3cT\x3e}\n * @template T\n */\ngoog.array.join \x3d function(var_args) {\n  return Array.prototype.concat.apply([], arguments);\n};\n\n\n/**\n * Converts an object to an array.\n * @param {IArrayLike\x3cT\x3e|string} object  The object to convert to an\n *     array.\n * @return {!Array\x3cT\x3e} The object converted into an array. If object has a\n *     length property, every property indexed with a non-negative number\n *     less than length will be included in the result. If object does not\n *     have a length property, an empty array will be returned.\n * @template T\n */\ngoog.array.toArray \x3d function(object) {\n  var length \x3d object.length;\n\n  // If length is not a number the following it false. This case is kept for\n  // backwards compatibility since there are callers that pass objects that are\n  // not array like.\n  if (length \x3e 0) {\n    var rv \x3d new Array(length);\n    for (var i \x3d 0; i \x3c length; i++) {\n      rv[i] \x3d object[i];\n    }\n    return rv;\n  }\n  return [];\n};\n\n\n/**\n * Does a shallow copy of an array.\n * @param {IArrayLike\x3cT\x3e|string} arr  Array or array-like object to\n *     clone.\n * @return {!Array\x3cT\x3e} Clone of the input array.\n * @template T\n */\ngoog.array.clone \x3d goog.array.toArray;\n\n\n/**\n * Extends an array with another array, element, or \x22array like\x22 object.\n * This function operates \x27in-place\x27, it does not create a new Array.\n *\n * Example:\n * var a \x3d [];\n * goog.array.extend(a, [0, 1]);\n * a; // [0, 1]\n * goog.array.extend(a, 2);\n * a; // [0, 1, 2]\n *\n * @param {Array\x3cVALUE\x3e} arr1  The array to modify.\n * @param {...(IArrayLike\x3cVALUE\x3e|VALUE)} var_args The elements or arrays of\n *     elements to add to arr1.\n * @template VALUE\n */\ngoog.array.extend \x3d function(arr1, var_args) {\n  for (var i \x3d 1; i \x3c arguments.length; i++) {\n    var arr2 \x3d arguments[i];\n    if (goog.isArrayLike(arr2)) {\n      var len1 \x3d arr1.length || 0;\n      var len2 \x3d arr2.length || 0;\n      arr1.length \x3d len1 + len2;\n      for (var j \x3d 0; j \x3c len2; j++) {\n        arr1[len1 + j] \x3d arr2[j];\n      }\n    } else {\n      arr1.push(arr2);\n    }\n  }\n};\n\n\n/**\n * Adds or removes elements from an array. This is a generic version of Array\n * splice. This means that it might work on other objects similar to arrays,\n * such as the arguments object.\n *\n * @param {IArrayLike\x3cT\x3e} arr The array to modify.\n * @param {number|undefined} index The index at which to start changing the\n *     array. If not defined, treated as 0.\n * @param {number} howMany How many elements to remove (0 means no removal. A\n *     value below 0 is treated as zero and so is any other non number. Numbers\n *     are floored).\n * @param {...T} var_args Optional, additional elements to insert into the\n *     array.\n * @return {!Array\x3cT\x3e} the removed elements.\n * @template T\n */\ngoog.array.splice \x3d function(arr, index, howMany, var_args) {\n  goog.asserts.assert(arr.length !\x3d null);\n\n  return Array.prototype.splice.apply(arr, goog.array.slice(arguments, 1));\n};\n\n\n/**\n * Returns a new array from a segment of an array. This is a generic version of\n * Array slice. This means that it might work on other objects similar to\n * arrays, such as the arguments object.\n *\n * @param {IArrayLike\x3cT\x3e|string} arr The array from\n * which to copy a segment.\n * @param {number} start The index of the first element to copy.\n * @param {number\x3d} opt_end The index after the last element to copy.\n * @return {!Array\x3cT\x3e} A new array containing the specified segment of the\n *     original array.\n * @template T\n */\ngoog.array.slice \x3d function(arr, start, opt_end) {\n  goog.asserts.assert(arr.length !\x3d null);\n\n  // passing 1 arg to slice is not the same as passing 2 where the second is\n  // null or undefined (in that case the second argument is treated as 0).\n  // we could use slice on the arguments object and then use apply instead of\n  // testing the length\n  if (arguments.length \x3c\x3d 2) {\n    return Array.prototype.slice.call(arr, start);\n  } else {\n    return Array.prototype.slice.call(arr, start, opt_end);\n  }\n};\n\n\n/**\n * Removes all duplicates from an array (retaining only the first\n * occurrence of each array element).  This function modifies the\n * array in place and doesn\x27t change the order of the non-duplicate items.\n *\n * For objects, duplicates are identified as having the same unique ID as\n * defined by {@link goog.getUid}.\n *\n * Alternatively you can specify a custom hash function that returns a unique\n * value for each item in the array it should consider unique.\n *\n * Runtime: N,\n * Worstcase space: 2N (no dupes)\n *\n * @param {IArrayLike\x3cT\x3e} arr The array from which to remove\n *     duplicates.\n * @param {Array\x3d} opt_rv An optional array in which to return the results,\n *     instead of performing the removal inplace.  If specified, the original\n *     array will remain unchanged.\n * @param {function(T):string\x3d} opt_hashFn An optional function to use to\n *     apply to every item in the array. This function should return a unique\n *     value for each item in the array it should consider unique.\n * @template T\n */\ngoog.array.removeDuplicates \x3d function(arr, opt_rv, opt_hashFn) {\n  var returnArray \x3d opt_rv || arr;\n  var defaultHashFn \x3d function(item) {\n    // Prefix each type with a single character representing the type to\n    // prevent conflicting keys (e.g. true and \x27true\x27).\n    return goog.isObject(item) ? \x27o\x27 + goog.getUid(item) :\n                                 (typeof item).charAt(0) + item;\n  };\n  var hashFn \x3d opt_hashFn || defaultHashFn;\n\n  var seen \x3d {}, cursorInsert \x3d 0, cursorRead \x3d 0;\n  while (cursorRead \x3c arr.length) {\n    var current \x3d arr[cursorRead++];\n    var key \x3d hashFn(current);\n    if (!Object.prototype.hasOwnProperty.call(seen, key)) {\n      seen[key] \x3d true;\n      returnArray[cursorInsert++] \x3d current;\n    }\n  }\n  returnArray.length \x3d cursorInsert;\n};\n\n\n/**\n * Searches the specified array for the specified target using the binary\n * search algorithm.  If no opt_compareFn is specified, elements are compared\n * using \x3ccode\x3egoog.array.defaultCompare\x3c/code\x3e, which compares the elements\n * using the built in \x3c and \x3e operators.  This will produce the expected\n * behavior for homogeneous arrays of String(s) and Number(s). The array\n * specified \x3cb\x3emust\x3c/b\x3e be sorted in ascending order (as defined by the\n * comparison function).  If the array is not sorted, results are undefined.\n * If the array contains multiple instances of the specified target value, any\n * of these instances may be found.\n *\n * Runtime: O(log n)\n *\n * @param {IArrayLike\x3cVALUE\x3e} arr The array to be searched.\n * @param {TARGET} target The sought value.\n * @param {function(TARGET, VALUE): number\x3d} opt_compareFn Optional comparison\n *     function by which the array is ordered. Should take 2 arguments to\n *     compare, and return a negative number, zero, or a positive number\n *     depending on whether the first argument is less than, equal to, or\n *     greater than the second.\n * @return {number} Lowest index of the target value if found, otherwise\n *     (-(insertion point) - 1). The insertion point is where the value should\n *     be inserted into arr to preserve the sorted property.  Return value \x3e\x3d 0\n *     iff target is found.\n * @template TARGET, VALUE\n */\ngoog.array.binarySearch \x3d function(arr, target, opt_compareFn) {\n  return goog.array.binarySearch_(\n      arr, opt_compareFn || goog.array.defaultCompare, false /* isEvaluator */,\n      target);\n};\n\n\n/**\n * Selects an index in the specified array using the binary search algorithm.\n * The evaluator receives an element and determines whether the desired index\n * is before, at, or after it.  The evaluator must be consistent (formally,\n * goog.array.map(goog.array.map(arr, evaluator, opt_obj), goog.math.sign)\n * must be monotonically non-increasing).\n *\n * Runtime: O(log n)\n *\n * @param {IArrayLike\x3cVALUE\x3e} arr The array to be searched.\n * @param {function(this:THIS, VALUE, number, ?): number} evaluator\n *     Evaluator function that receives 3 arguments (the element, the index and\n *     the array). Should return a negative number, zero, or a positive number\n *     depending on whether the desired index is before, at, or after the\n *     element passed to it.\n * @param {THIS\x3d} opt_obj The object to be used as the value of \x27this\x27\n *     within evaluator.\n * @return {number} Index of the leftmost element matched by the evaluator, if\n *     such exists; otherwise (-(insertion point) - 1). The insertion point is\n *     the index of the first element for which the evaluator returns negative,\n *     or arr.length if no such element exists. The return value is non-negative\n *     iff a match is found.\n * @template THIS, VALUE\n */\ngoog.array.binarySelect \x3d function(arr, evaluator, opt_obj) {\n  return goog.array.binarySearch_(\n      arr, evaluator, true /* isEvaluator */, undefined /* opt_target */,\n      opt_obj);\n};\n\n\n/**\n * Implementation of a binary search algorithm which knows how to use both\n * comparison functions and evaluators. If an evaluator is provided, will call\n * the evaluator with the given optional data object, conforming to the\n * interface defined in binarySelect. Otherwise, if a comparison function is\n * provided, will call the comparison function against the given data object.\n *\n * This implementation purposefully does not use goog.bind or goog.partial for\n * performance reasons.\n *\n * Runtime: O(log n)\n *\n * @param {IArrayLike\x3c?\x3e} arr The array to be searched.\n * @param {function(?, ?, ?): number | function(?, ?): number} compareFn\n *     Either an evaluator or a comparison function, as defined by binarySearch\n *     and binarySelect above.\n * @param {boolean} isEvaluator Whether the function is an evaluator or a\n *     comparison function.\n * @param {?\x3d} opt_target If the function is a comparison function, then\n *     this is the target to binary search for.\n * @param {Object\x3d} opt_selfObj If the function is an evaluator, this is an\n *     optional this object for the evaluator.\n * @return {number} Lowest index of the target value if found, otherwise\n *     (-(insertion point) - 1). The insertion point is where the value should\n *     be inserted into arr to preserve the sorted property.  Return value \x3e\x3d 0\n *     iff target is found.\n * @private\n */\ngoog.array.binarySearch_ \x3d function(\n    arr, compareFn, isEvaluator, opt_target, opt_selfObj) {\n  var left \x3d 0;            // inclusive\n  var right \x3d arr.length;  // exclusive\n  var found;\n  while (left \x3c right) {\n    var middle \x3d (left + right) \x3e\x3e 1;\n    var compareResult;\n    if (isEvaluator) {\n      compareResult \x3d compareFn.call(opt_selfObj, arr[middle], middle, arr);\n    } else {\n      // NOTE(dimvar): To avoid this cast, we\x27d have to use function overloading\n      // for the type of binarySearch_, which the type system can\x27t express yet.\n      compareResult \x3d /** @type {function(?, ?): number} */ (compareFn)(\n          opt_target, arr[middle]);\n    }\n    if (compareResult \x3e 0) {\n      left \x3d middle + 1;\n    } else {\n      right \x3d middle;\n      // We are looking for the lowest index so we can\x27t return immediately.\n      found \x3d !compareResult;\n    }\n  }\n  // left is the index if found, or the insertion point otherwise.\n  // ~left is a shorthand for -left - 1.\n  return found ? left : ~left;\n};\n\n\n/**\n * Sorts the specified array into ascending order.  If no opt_compareFn is\n * specified, elements are compared using\n * \x3ccode\x3egoog.array.defaultCompare\x3c/code\x3e, which compares the elements using\n * the built in \x3c and \x3e operators.  This will produce the expected behavior\n * for homogeneous arrays of String(s) and Number(s), unlike the native sort,\n * but will give unpredictable results for heterogeneous lists of strings and\n * numbers with different numbers of digits.\n *\n * This sort is not guaranteed to be stable.\n *\n * Runtime: Same as \x3ccode\x3eArray.prototype.sort\x3c/code\x3e\n *\n * @param {Array\x3cT\x3e} arr The array to be sorted.\n * @param {?function(T,T):number\x3d} opt_compareFn Optional comparison\n *     function by which the\n *     array is to be ordered. Should take 2 arguments to compare, and return a\n *     negative number, zero, or a positive number depending on whether the\n *     first argument is less than, equal to, or greater than the second.\n * @template T\n */\ngoog.array.sort \x3d function(arr, opt_compareFn) {\n  // TODO(arv): Update type annotation since null is not accepted.\n  arr.sort(opt_compareFn || goog.array.defaultCompare);\n};\n\n\n/**\n * Sorts the specified array into ascending order in a stable way.  If no\n * opt_compareFn is specified, elements are compared using\n * \x3ccode\x3egoog.array.defaultCompare\x3c/code\x3e, which compares the elements using\n * the built in \x3c and \x3e operators.  This will produce the expected behavior\n * for homogeneous arrays of String(s) and Number(s).\n *\n * Runtime: Same as \x3ccode\x3eArray.prototype.sort\x3c/code\x3e, plus an additional\n * O(n) overhead of copying the array twice.\n *\n * @param {Array\x3cT\x3e} arr The array to be sorted.\n * @param {?function(T, T): number\x3d} opt_compareFn Optional comparison function\n *     by which the array is to be ordered. Should take 2 arguments to compare,\n *     and return a negative number, zero, or a positive number depending on\n *     whether the first argument is less than, equal to, or greater than the\n *     second.\n * @template T\n */\ngoog.array.stableSort \x3d function(arr, opt_compareFn) {\n  var compArr \x3d new Array(arr.length);\n  for (var i \x3d 0; i \x3c arr.length; i++) {\n    compArr[i] \x3d {index: i, value: arr[i]};\n  }\n  var valueCompareFn \x3d opt_compareFn || goog.array.defaultCompare;\n  function stableCompareFn(obj1, obj2) {\n    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;\n  }\n  goog.array.sort(compArr, stableCompareFn);\n  for (var i \x3d 0; i \x3c arr.length; i++) {\n    arr[i] \x3d compArr[i].value;\n  }\n};\n\n\n/**\n * Sort the specified array into ascending order based on item keys\n * returned by the specified key function.\n * If no opt_compareFn is specified, the keys are compared in ascending order\n * using \x3ccode\x3egoog.array.defaultCompare\x3c/code\x3e.\n *\n * Runtime: O(S(f(n)), where S is runtime of \x3ccode\x3egoog.array.sort\x3c/code\x3e\n * and f(n) is runtime of the key function.\n *\n * @param {Array\x3cT\x3e} arr The array to be sorted.\n * @param {function(T): K} keyFn Function taking array element and returning\n *     a key used for sorting this element.\n * @param {?function(K, K): number\x3d} opt_compareFn Optional comparison function\n *     by which the keys are to be ordered. Should take 2 arguments to compare,\n *     and return a negative number, zero, or a positive number depending on\n *     whether the first argument is less than, equal to, or greater than the\n *     second.\n * @template T,K\n */\ngoog.array.sortByKey \x3d function(arr, keyFn, opt_compareFn) {\n  var keyCompareFn \x3d opt_compareFn || goog.array.defaultCompare;\n  goog.array.sort(\n      arr, function(a, b) { return keyCompareFn(keyFn(a), keyFn(b)); });\n};\n\n\n/**\n * Sorts an array of objects by the specified object key and compare\n * function. If no compare function is provided, the key values are\n * compared in ascending order using \x3ccode\x3egoog.array.defaultCompare\x3c/code\x3e.\n * This won\x27t work for keys that get renamed by the compiler. So use\n * {\x27foo\x27: 1, \x27bar\x27: 2} rather than {foo: 1, bar: 2}.\n * @param {Array\x3cObject\x3e} arr An array of objects to sort.\n * @param {string} key The object key to sort by.\n * @param {Function\x3d} opt_compareFn The function to use to compare key\n *     values.\n */\ngoog.array.sortObjectsByKey \x3d function(arr, key, opt_compareFn) {\n  goog.array.sortByKey(arr, function(obj) { return obj[key]; }, opt_compareFn);\n};\n\n\n/**\n * Tells if the array is sorted.\n * @param {!IArrayLike\x3cT\x3e} arr The array.\n * @param {?function(T,T):number\x3d} opt_compareFn Function to compare the\n *     array elements.\n *     Should take 2 arguments to compare, and return a negative number, zero,\n *     or a positive number depending on whether the first argument is less\n *     than, equal to, or greater than the second.\n * @param {boolean\x3d} opt_strict If true no equal elements are allowed.\n * @return {boolean} Whether the array is sorted.\n * @template T\n */\ngoog.array.isSorted \x3d function(arr, opt_compareFn, opt_strict) {\n  var compare \x3d opt_compareFn || goog.array.defaultCompare;\n  for (var i \x3d 1; i \x3c arr.length; i++) {\n    var compareResult \x3d compare(arr[i - 1], arr[i]);\n    if (compareResult \x3e 0 || compareResult \x3d\x3d 0 \x26\x26 opt_strict) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * Compares two arrays for equality. Two arrays are considered equal if they\n * have the same length and their corresponding elements are equal according to\n * the comparison function.\n *\n * @param {IArrayLike\x3c?\x3e} arr1 The first array to compare.\n * @param {IArrayLike\x3c?\x3e} arr2 The second array to compare.\n * @param {Function\x3d} opt_equalsFn Optional comparison function.\n *     Should take 2 arguments to compare, and return true if the arguments\n *     are equal. Defaults to {@link goog.array.defaultCompareEquality} which\n *     compares the elements using the built-in \x27\x3d\x3d\x3d\x27 operator.\n * @return {boolean} Whether the two arrays are equal.\n */\ngoog.array.equals \x3d function(arr1, arr2, opt_equalsFn) {\n  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) ||\n      arr1.length !\x3d arr2.length) {\n    return false;\n  }\n  var l \x3d arr1.length;\n  var equalsFn \x3d opt_equalsFn || goog.array.defaultCompareEquality;\n  for (var i \x3d 0; i \x3c l; i++) {\n    if (!equalsFn(arr1[i], arr2[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * 3-way array compare function.\n * @param {!IArrayLike\x3cVALUE\x3e} arr1 The first array to\n *     compare.\n * @param {!IArrayLike\x3cVALUE\x3e} arr2 The second array to\n *     compare.\n * @param {function(VALUE, VALUE): number\x3d} opt_compareFn Optional comparison\n *     function by which the array is to be ordered. Should take 2 arguments to\n *     compare, and return a negative number, zero, or a positive number\n *     depending on whether the first argument is less than, equal to, or\n *     greater than the second.\n * @return {number} Negative number, zero, or a positive number depending on\n *     whether the first argument is less than, equal to, or greater than the\n *     second.\n * @template VALUE\n */\ngoog.array.compare3 \x3d function(arr1, arr2, opt_compareFn) {\n  var compare \x3d opt_compareFn || goog.array.defaultCompare;\n  var l \x3d Math.min(arr1.length, arr2.length);\n  for (var i \x3d 0; i \x3c l; i++) {\n    var result \x3d compare(arr1[i], arr2[i]);\n    if (result !\x3d 0) {\n      return result;\n    }\n  }\n  return goog.array.defaultCompare(arr1.length, arr2.length);\n};\n\n\n/**\n * Compares its two arguments for order, using the built in \x3c and \x3e\n * operators.\n * @param {VALUE} a The first object to be compared.\n * @param {VALUE} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second,\n *     respectively.\n * @template VALUE\n */\ngoog.array.defaultCompare \x3d function(a, b) {\n  return a \x3e b ? 1 : a \x3c b ? -1 : 0;\n};\n\n\n/**\n * Compares its two arguments for inverse order, using the built in \x3c and \x3e\n * operators.\n * @param {VALUE} a The first object to be compared.\n * @param {VALUE} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is greater than, equal to, or less than the second,\n *     respectively.\n * @template VALUE\n */\ngoog.array.inverseDefaultCompare \x3d function(a, b) {\n  return -goog.array.defaultCompare(a, b);\n};\n\n\n/**\n * Compares its two arguments for equality, using the built in \x3d\x3d\x3d operator.\n * @param {*} a The first object to compare.\n * @param {*} b The second object to compare.\n * @return {boolean} True if the two arguments are equal, false otherwise.\n */\ngoog.array.defaultCompareEquality \x3d function(a, b) {\n  return a \x3d\x3d\x3d b;\n};\n\n\n/**\n * Inserts a value into a sorted array. The array is not modified if the\n * value is already present.\n * @param {IArrayLike\x3cVALUE\x3e} array The array to modify.\n * @param {VALUE} value The object to insert.\n * @param {function(VALUE, VALUE): number\x3d} opt_compareFn Optional comparison\n *     function by which the array is ordered. Should take 2 arguments to\n *     compare, and return a negative number, zero, or a positive number\n *     depending on whether the first argument is less than, equal to, or\n *     greater than the second.\n * @return {boolean} True if an element was inserted.\n * @template VALUE\n */\ngoog.array.binaryInsert \x3d function(array, value, opt_compareFn) {\n  var index \x3d goog.array.binarySearch(array, value, opt_compareFn);\n  if (index \x3c 0) {\n    goog.array.insertAt(array, value, -(index + 1));\n    return true;\n  }\n  return false;\n};\n\n\n/**\n * Removes a value from a sorted array.\n * @param {!IArrayLike\x3cVALUE\x3e} array The array to modify.\n * @param {VALUE} value The object to remove.\n * @param {function(VALUE, VALUE): number\x3d} opt_compareFn Optional comparison\n *     function by which the array is ordered. Should take 2 arguments to\n *     compare, and return a negative number, zero, or a positive number\n *     depending on whether the first argument is less than, equal to, or\n *     greater than the second.\n * @return {boolean} True if an element was removed.\n * @template VALUE\n */\ngoog.array.binaryRemove \x3d function(array, value, opt_compareFn) {\n  var index \x3d goog.array.binarySearch(array, value, opt_compareFn);\n  return (index \x3e\x3d 0) ? goog.array.removeAt(array, index) : false;\n};\n\n\n/**\n * Splits an array into disjoint buckets according to a splitting function.\n * @param {IArrayLike\x3cT\x3e} array The array.\n * @param {function(this:S, T, number, !IArrayLike\x3cT\x3e):?} sorter Function to\n *     call for every element.  This takes 3 arguments (the element, the index\n *     and the array) and must return a valid object key (a string, number,\n *     etc), or undefined, if that object should not be placed in a bucket.\n * @param {S\x3d} opt_obj The object to be used as the value of \x27this\x27 within\n *     sorter.\n * @return {!Object\x3c!Array\x3cT\x3e\x3e} An object, with keys being all of the unique\n *     return values of sorter, and values being arrays containing the items for\n *     which the splitter returned that key.\n * @template T,S\n */\ngoog.array.bucket \x3d function(array, sorter, opt_obj) {\n  var buckets \x3d {};\n\n  for (var i \x3d 0; i \x3c array.length; i++) {\n    var value \x3d array[i];\n    var key \x3d sorter.call(/** @type {?} */ (opt_obj), value, i, array);\n    if (goog.isDef(key)) {\n      // Push the value to the right bucket, creating it if necessary.\n      var bucket \x3d buckets[key] || (buckets[key] \x3d []);\n      bucket.push(value);\n    }\n  }\n\n  return buckets;\n};\n\n\n/**\n * Creates a new object built from the provided array and the key-generation\n * function.\n * @param {IArrayLike\x3cT\x3e} arr Array or array like object over\n *     which to iterate whose elements will be the values in the new object.\n * @param {?function(this:S, T, number, ?) : string} keyFunc The function to\n *     call for every element. This function takes 3 arguments (the element, the\n *     index and the array) and should return a string that will be used as the\n *     key for the element in the new object. If the function returns the same\n *     key for more than one element, the value for that key is\n *     implementation-defined.\n * @param {S\x3d} opt_obj The object to be used as the value of \x27this\x27\n *     within keyFunc.\n * @return {!Object\x3cT\x3e} The new object.\n * @template T,S\n */\ngoog.array.toObject \x3d function(arr, keyFunc, opt_obj) {\n  var ret \x3d {};\n  goog.array.forEach(arr, function(element, index) {\n    ret[keyFunc.call(/** @type {?} */ (opt_obj), element, index, arr)] \x3d\n        element;\n  });\n  return ret;\n};\n\n\n/**\n * Creates a range of numbers in an arithmetic progression.\n *\n * Range takes 1, 2, or 3 arguments:\n * \x3cpre\x3e\n * range(5) is the same as range(0, 5, 1) and produces [0, 1, 2, 3, 4]\n * range(2, 5) is the same as range(2, 5, 1) and produces [2, 3, 4]\n * range(-2, -5, -1) produces [-2, -3, -4]\n * range(-2, -5, 1) produces [], since stepping by 1 wouldn\x27t ever reach -5.\n * \x3c/pre\x3e\n *\n * @param {number} startOrEnd The starting value of the range if an end argument\n *     is provided. Otherwise, the start value is 0, and this is the end value.\n * @param {number\x3d} opt_end The optional end value of the range.\n * @param {number\x3d} opt_step The step size between range values. Defaults to 1\n *     if opt_step is undefined or 0.\n * @return {!Array\x3cnumber\x3e} An array of numbers for the requested range. May be\n *     an empty array if adding the step would not converge toward the end\n *     value.\n */\ngoog.array.range \x3d function(startOrEnd, opt_end, opt_step) {\n  var array \x3d [];\n  var start \x3d 0;\n  var end \x3d startOrEnd;\n  var step \x3d opt_step || 1;\n  if (opt_end !\x3d\x3d undefined) {\n    start \x3d startOrEnd;\n    end \x3d opt_end;\n  }\n\n  if (step * (end - start) \x3c 0) {\n    // Sign mismatch: start + step will never reach the end value.\n    return [];\n  }\n\n  if (step \x3e 0) {\n    for (var i \x3d start; i \x3c end; i +\x3d step) {\n      array.push(i);\n    }\n  } else {\n    for (var i \x3d start; i \x3e end; i +\x3d step) {\n      array.push(i);\n    }\n  }\n  return array;\n};\n\n\n/**\n * Returns an array consisting of the given value repeated N times.\n *\n * @param {VALUE} value The value to repeat.\n * @param {number} n The repeat count.\n * @return {!Array\x3cVALUE\x3e} An array with the repeated value.\n * @template VALUE\n */\ngoog.array.repeat \x3d function(value, n) {\n  var array \x3d [];\n  for (var i \x3d 0; i \x3c n; i++) {\n    array[i] \x3d value;\n  }\n  return array;\n};\n\n\n/**\n * Returns an array consisting of every argument with all arrays\n * expanded in-place recursively.\n *\n * @param {...*} var_args The values to flatten.\n * @return {!Array\x3c?\x3e} An array containing the flattened values.\n */\ngoog.array.flatten \x3d function(var_args) {\n  var CHUNK_SIZE \x3d 8192;\n\n  var result \x3d [];\n  for (var i \x3d 0; i \x3c arguments.length; i++) {\n    var element \x3d arguments[i];\n    if (goog.isArray(element)) {\n      for (var c \x3d 0; c \x3c element.length; c +\x3d CHUNK_SIZE) {\n        var chunk \x3d goog.array.slice(element, c, c + CHUNK_SIZE);\n        var recurseResult \x3d goog.array.flatten.apply(null, chunk);\n        for (var r \x3d 0; r \x3c recurseResult.length; r++) {\n          result.push(recurseResult[r]);\n        }\n      }\n    } else {\n      result.push(element);\n    }\n  }\n  return result;\n};\n\n\n/**\n * Rotates an array in-place. After calling this method, the element at\n * index i will be the element previously at index (i - n) %\n * array.length, for all values of i between 0 and array.length - 1,\n * inclusive.\n *\n * For example, suppose list comprises [t, a, n, k, s]. After invoking\n * rotate(array, 1) (or rotate(array, -4)), array will comprise [s, t, a, n, k].\n *\n * @param {!Array\x3cT\x3e} array The array to rotate.\n * @param {number} n The amount to rotate.\n * @return {!Array\x3cT\x3e} The array.\n * @template T\n */\ngoog.array.rotate \x3d function(array, n) {\n  goog.asserts.assert(array.length !\x3d null);\n\n  if (array.length) {\n    n %\x3d array.length;\n    if (n \x3e 0) {\n      Array.prototype.unshift.apply(array, array.splice(-n, n));\n    } else if (n \x3c 0) {\n      Array.prototype.push.apply(array, array.splice(0, -n));\n    }\n  }\n  return array;\n};\n\n\n/**\n * Moves one item of an array to a new position keeping the order of the rest\n * of the items. Example use case: keeping a list of JavaScript objects\n * synchronized with the corresponding list of DOM elements after one of the\n * elements has been dragged to a new position.\n * @param {!IArrayLike\x3c?\x3e} arr The array to modify.\n * @param {number} fromIndex Index of the item to move between 0 and\n *     {@code arr.length - 1}.\n * @param {number} toIndex Target index between 0 and {@code arr.length - 1}.\n */\ngoog.array.moveItem \x3d function(arr, fromIndex, toIndex) {\n  goog.asserts.assert(fromIndex \x3e\x3d 0 \x26\x26 fromIndex \x3c arr.length);\n  goog.asserts.assert(toIndex \x3e\x3d 0 \x26\x26 toIndex \x3c arr.length);\n  // Remove 1 item at fromIndex.\n  var removedItems \x3d Array.prototype.splice.call(arr, fromIndex, 1);\n  // Insert the removed item at toIndex.\n  Array.prototype.splice.call(arr, toIndex, 0, removedItems[0]);\n  // We don\x27t use goog.array.insertAt and goog.array.removeAt, because they\x27re\n  // significantly slower than splice.\n};\n\n\n/**\n * Creates a new array for which the element at position i is an array of the\n * ith element of the provided arrays.  The returned array will only be as long\n * as the shortest array provided; additional values are ignored.  For example,\n * the result of zipping [1, 2] and [3, 4, 5] is [[1,3], [2, 4]].\n *\n * This is similar to the zip() function in Python.  See {@link\n * http://docs.python.org/library/functions.html#zip}\n *\n * @param {...!IArrayLike\x3c?\x3e} var_args Arrays to be combined.\n * @return {!Array\x3c!Array\x3c?\x3e\x3e} A new array of arrays created from\n *     provided arrays.\n */\ngoog.array.zip \x3d function(var_args) {\n  if (!arguments.length) {\n    return [];\n  }\n  var result \x3d [];\n  var minLen \x3d arguments[0].length;\n  for (var i \x3d 1; i \x3c arguments.length; i++) {\n    if (arguments[i].length \x3c minLen) {\n      minLen \x3d arguments[i].length;\n    }\n  }\n  for (var i \x3d 0; i \x3c minLen; i++) {\n    var value \x3d [];\n    for (var j \x3d 0; j \x3c arguments.length; j++) {\n      value.push(arguments[j][i]);\n    }\n    result.push(value);\n  }\n  return result;\n};\n\n\n/**\n * Shuffles the values in the specified array using the Fisher-Yates in-place\n * shuffle (also known as the Knuth Shuffle). By default, calls Math.random()\n * and so resets the state of that random number generator. Similarly, may reset\n * the state of the any other specified random number generator.\n *\n * Runtime: O(n)\n *\n * @param {!Array\x3c?\x3e} arr The array to be shuffled.\n * @param {function():number\x3d} opt_randFn Optional random function to use for\n *     shuffling.\n *     Takes no arguments, and returns a random number on the interval [0, 1).\n *     Defaults to Math.random() using JavaScript\x27s built-in Math library.\n */\ngoog.array.shuffle \x3d function(arr, opt_randFn) {\n  var randFn \x3d opt_randFn || Math.random;\n\n  for (var i \x3d arr.length - 1; i \x3e 0; i--) {\n    // Choose a random array index in [0, i] (inclusive with i).\n    var j \x3d Math.floor(randFn() * (i + 1));\n\n    var tmp \x3d arr[i];\n    arr[i] \x3d arr[j];\n    arr[j] \x3d tmp;\n  }\n};\n\n\n/**\n * Returns a new array of elements from arr, based on the indexes of elements\n * provided by index_arr. For example, the result of index copying\n * [\x27a\x27, \x27b\x27, \x27c\x27] with index_arr [1,0,0,2] is [\x27b\x27, \x27a\x27, \x27a\x27, \x27c\x27].\n *\n * @param {!IArrayLike\x3cT\x3e} arr The array to get a indexed copy from.\n * @param {!IArrayLike\x3cnumber\x3e} index_arr An array of indexes to get from arr.\n * @return {!Array\x3cT\x3e} A new array of elements from arr in index_arr order.\n * @template T\n */\ngoog.array.copyByIndex \x3d function(arr, index_arr) {\n  var result \x3d [];\n  goog.array.forEach(index_arr, function(index) { result.push(arr[index]); });\n  return result;\n};\n\n\n/**\n * Maps each element of the input array into zero or more elements of the output\n * array.\n *\n * @param {!IArrayLike\x3cVALUE\x3e|string} arr Array or array like object\n *     over which to iterate.\n * @param {function(this:THIS, VALUE, number, ?): !Array\x3cRESULT\x3e} f The function\n *     to call for every element. This function takes 3 arguments (the element,\n *     the index and the array) and should return an array. The result will be\n *     used to extend a new array.\n * @param {THIS\x3d} opt_obj The object to be used as the value of \x27this\x27 within f.\n * @return {!Array\x3cRESULT\x3e} a new array with the concatenation of all arrays\n *     returned from f.\n * @template THIS, VALUE, RESULT\n */\ngoog.array.concatMap \x3d function(arr, f, opt_obj) {\n  return goog.array.concat.apply([], goog.array.map(arr, f, opt_obj));\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/array/array.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/crypt/crypt.js";
eval("// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Namespace with crypto related helper functions.\n * @author pupius@google.com (Daniel Pupius)\n */\n\ngoog.provide(\x27goog.crypt\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\n\n\n/**\n * Turns a string into an array of bytes; a \x22byte\x22 being a JS number in the\n * range 0-255. Multi-byte characters are written as little-endian.\n * @param {string} str String value to arrify.\n * @return {!Array\x3cnumber\x3e} Array of numbers corresponding to the\n *     UCS character codes of each character in str.\n */\ngoog.crypt.stringToByteArray \x3d function(str) {\n  var output \x3d [], p \x3d 0;\n  for (var i \x3d 0; i \x3c str.length; i++) {\n    var c \x3d str.charCodeAt(i);\n    // NOTE: c \x3c\x3d 0xffff since JavaScript strings are UTF-16.\n    if (c \x3e 0xff) {\n      output[p++] \x3d c \x26 0xff;\n      c \x3e\x3e\x3d 8;\n    }\n    output[p++] \x3d c;\n  }\n  return output;\n};\n\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param {!Uint8Array|!Array\x3cnumber\x3e} bytes Array of numbers representing\n *     characters.\n * @return {string} Stringification of the array.\n */\ngoog.crypt.byteArrayToString \x3d function(bytes) {\n  var CHUNK_SIZE \x3d 8192;\n\n  // Special-case the simple case for speed\x27s sake.\n  if (bytes.length \x3c\x3d CHUNK_SIZE) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n\n  // The remaining logic splits conversion by chunks since\n  // Function#apply() has a maximum parameter count.\n  // See discussion: http://goo.gl/LrWmZ9\n\n  var str \x3d \x27\x27;\n  for (var i \x3d 0; i \x3c bytes.length; i +\x3d CHUNK_SIZE) {\n    var chunk \x3d goog.array.slice(bytes, i, i + CHUNK_SIZE);\n    str +\x3d String.fromCharCode.apply(null, chunk);\n  }\n  return str;\n};\n\n\n/**\n * Turns an array of numbers into the hex string given by the concatenation of\n * the hex values to which the numbers correspond.\n * @param {Uint8Array|Array\x3cnumber\x3e} array Array of numbers representing\n *     characters.\n * @param {string\x3d} opt_separator Optional separator between values\n * @return {string} Hex string.\n */\ngoog.crypt.byteArrayToHex \x3d function(array, opt_separator) {\n  return goog.array\n      .map(\n          array,\n          function(numByte) {\n            var hexByte \x3d numByte.toString(16);\n            return hexByte.length \x3e 1 ? hexByte : \x270\x27 + hexByte;\n          })\n      .join(opt_separator || \x27\x27);\n};\n\n\n/**\n * Converts a hex string into an integer array.\n * @param {string} hexString Hex string of 16-bit integers (two characters\n *     per integer).\n * @return {!Array\x3cnumber\x3e} Array of {0,255} integers for the given string.\n */\ngoog.crypt.hexToByteArray \x3d function(hexString) {\n  goog.asserts.assert(\n      hexString.length % 2 \x3d\x3d 0, \x27Key string length must be multiple of 2\x27);\n  var arr \x3d [];\n  for (var i \x3d 0; i \x3c hexString.length; i +\x3d 2) {\n    arr.push(parseInt(hexString.substring(i, i + 2), 16));\n  }\n  return arr;\n};\n\n\n/**\n * Converts a JS string to a UTF-8 \x22byte\x22 array.\n * @param {string} str 16-bit unicode string.\n * @return {!Array\x3cnumber\x3e} UTF-8 byte array.\n */\ngoog.crypt.stringToUtf8ByteArray \x3d function(str) {\n  // TODO(pupius): Use native implementations if/when available\n  var out \x3d [], p \x3d 0;\n  for (var i \x3d 0; i \x3c str.length; i++) {\n    var c \x3d str.charCodeAt(i);\n    if (c \x3c 128) {\n      out[p++] \x3d c;\n    } else if (c \x3c 2048) {\n      out[p++] \x3d (c \x3e\x3e 6) | 192;\n      out[p++] \x3d (c \x26 63) | 128;\n    } else if (\n        ((c \x26 0xFC00) \x3d\x3d 0xD800) \x26\x26 (i + 1) \x3c str.length \x26\x26\n        ((str.charCodeAt(i + 1) \x26 0xFC00) \x3d\x3d 0xDC00)) {\n      // Surrogate Pair\n      c \x3d 0x10000 + ((c \x26 0x03FF) \x3c\x3c 10) + (str.charCodeAt(++i) \x26 0x03FF);\n      out[p++] \x3d (c \x3e\x3e 18) | 240;\n      out[p++] \x3d ((c \x3e\x3e 12) \x26 63) | 128;\n      out[p++] \x3d ((c \x3e\x3e 6) \x26 63) | 128;\n      out[p++] \x3d (c \x26 63) | 128;\n    } else {\n      out[p++] \x3d (c \x3e\x3e 12) | 224;\n      out[p++] \x3d ((c \x3e\x3e 6) \x26 63) | 128;\n      out[p++] \x3d (c \x26 63) | 128;\n    }\n  }\n  return out;\n};\n\n\n/**\n * Converts a UTF-8 byte array to JavaScript\x27s 16-bit Unicode.\n * @param {Uint8Array|Array\x3cnumber\x3e} bytes UTF-8 byte array.\n * @return {string} 16-bit Unicode string.\n */\ngoog.crypt.utf8ByteArrayToString \x3d function(bytes) {\n  // TODO(pupius): Use native implementations if/when available\n  var out \x3d [], pos \x3d 0, c \x3d 0;\n  while (pos \x3c bytes.length) {\n    var c1 \x3d bytes[pos++];\n    if (c1 \x3c 128) {\n      out[c++] \x3d String.fromCharCode(c1);\n    } else if (c1 \x3e 191 \x26\x26 c1 \x3c 224) {\n      var c2 \x3d bytes[pos++];\n      out[c++] \x3d String.fromCharCode((c1 \x26 31) \x3c\x3c 6 | c2 \x26 63);\n    } else if (c1 \x3e 239 \x26\x26 c1 \x3c 365) {\n      // Surrogate Pair\n      var c2 \x3d bytes[pos++];\n      var c3 \x3d bytes[pos++];\n      var c4 \x3d bytes[pos++];\n      var u \x3d ((c1 \x26 7) \x3c\x3c 18 | (c2 \x26 63) \x3c\x3c 12 | (c3 \x26 63) \x3c\x3c 6 | c4 \x26 63) -\n          0x10000;\n      out[c++] \x3d String.fromCharCode(0xD800 + (u \x3e\x3e 10));\n      out[c++] \x3d String.fromCharCode(0xDC00 + (u \x26 1023));\n    } else {\n      var c2 \x3d bytes[pos++];\n      var c3 \x3d bytes[pos++];\n      out[c++] \x3d\n          String.fromCharCode((c1 \x26 15) \x3c\x3c 12 | (c2 \x26 63) \x3c\x3c 6 | c3 \x26 63);\n    }\n  }\n  return out.join(\x27\x27);\n};\n\n\n/**\n * XOR two byte arrays.\n * @param {!Uint8Array|!Int8Array|!Array\x3cnumber\x3e} bytes1 Byte array 1.\n * @param {!Uint8Array|!Int8Array|!Array\x3cnumber\x3e} bytes2 Byte array 2.\n * @return {!Array\x3cnumber\x3e} Resulting XOR of the two byte arrays.\n */\ngoog.crypt.xorByteArray \x3d function(bytes1, bytes2) {\n  goog.asserts.assert(\n      bytes1.length \x3d\x3d bytes2.length, \x27XOR array lengths must match\x27);\n\n  var result \x3d [];\n  for (var i \x3d 0; i \x3c bytes1.length; i++) {\n    result.push(bytes1[i] ^ bytes2[i]);\n  }\n  return result;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/crypt/crypt.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/string/string.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utilities for string manipulation.\n * @author pupius@google.com (Daniel Pupius)\n * @author arv@google.com (Erik Arvidsson)\n */\n\n\n/**\n * Namespace for string utilities\n */\ngoog.provide(\x27goog.string\x27);\ngoog.provide(\x27goog.string.Unicode\x27);\n\n\n/**\n * @define {boolean} Enables HTML escaping of lowercase letter \x22e\x22 which helps\n * with detection of double-escaping as this letter is frequently used.\n */\ngoog.define(\x27goog.string.DETECT_DOUBLE_ESCAPING\x27, false);\n\n\n/**\n * @define {boolean} Whether to force non-dom html unescaping.\n */\ngoog.define(\x27goog.string.FORCE_NON_DOM_HTML_UNESCAPING\x27, false);\n\n\n/**\n * Common Unicode string characters.\n * @enum {string}\n */\ngoog.string.Unicode \x3d {\n  NBSP: \x27\\xa0\x27\n};\n\n\n/**\n * Fast prefix-checker.\n * @param {string} str The string to check.\n * @param {string} prefix A string to look for at the start of `str`.\n * @return {boolean} True if `str` begins with `prefix`.\n */\ngoog.string.startsWith \x3d function(str, prefix) {\n  return str.lastIndexOf(prefix, 0) \x3d\x3d 0;\n};\n\n\n/**\n * Fast suffix-checker.\n * @param {string} str The string to check.\n * @param {string} suffix A string to look for at the end of `str`.\n * @return {boolean} True if `str` ends with `suffix`.\n */\ngoog.string.endsWith \x3d function(str, suffix) {\n  var l \x3d str.length - suffix.length;\n  return l \x3e\x3d 0 \x26\x26 str.indexOf(suffix, l) \x3d\x3d l;\n};\n\n\n/**\n * Case-insensitive prefix-checker.\n * @param {string} str The string to check.\n * @param {string} prefix  A string to look for at the end of `str`.\n * @return {boolean} True if `str` begins with `prefix` (ignoring\n *     case).\n */\ngoog.string.caseInsensitiveStartsWith \x3d function(str, prefix) {\n  return goog.string.caseInsensitiveCompare(\n             prefix, str.substr(0, prefix.length)) \x3d\x3d 0;\n};\n\n\n/**\n * Case-insensitive suffix-checker.\n * @param {string} str The string to check.\n * @param {string} suffix A string to look for at the end of `str`.\n * @return {boolean} True if `str` ends with `suffix` (ignoring\n *     case).\n */\ngoog.string.caseInsensitiveEndsWith \x3d function(str, suffix) {\n  return (\n      goog.string.caseInsensitiveCompare(\n          suffix, str.substr(str.length - suffix.length, suffix.length)) \x3d\x3d 0);\n};\n\n\n/**\n * Case-insensitive equality checker.\n * @param {string} str1 First string to check.\n * @param {string} str2 Second string to check.\n * @return {boolean} True if `str1` and `str2` are the same string,\n *     ignoring case.\n */\ngoog.string.caseInsensitiveEquals \x3d function(str1, str2) {\n  return str1.toLowerCase() \x3d\x3d str2.toLowerCase();\n};\n\n\n/**\n * Does simple python-style string substitution.\n * subs(\x22foo%s hot%s\x22, \x22bar\x22, \x22dog\x22) becomes \x22foobar hotdog\x22.\n * @param {string} str The string containing the pattern.\n * @param {...*} var_args The items to substitute into the pattern.\n * @return {string} A copy of `str` in which each occurrence of\n *     {@code %s} has been replaced an argument from `var_args`.\n */\ngoog.string.subs \x3d function(str, var_args) {\n  var splitParts \x3d str.split(\x27%s\x27);\n  var returnString \x3d \x27\x27;\n\n  var subsArguments \x3d Array.prototype.slice.call(arguments, 1);\n  while (subsArguments.length \x26\x26\n         // Replace up to the last split part. We are inserting in the\n         // positions between split parts.\n         splitParts.length \x3e 1) {\n    returnString +\x3d splitParts.shift() + subsArguments.shift();\n  }\n\n  return returnString + splitParts.join(\x27%s\x27);  // Join unused \x27%s\x27\n};\n\n\n/**\n * Converts multiple whitespace chars (spaces, non-breaking-spaces, new lines\n * and tabs) to a single space, and strips leading and trailing whitespace.\n * @param {string} str Input string.\n * @return {string} A copy of `str` with collapsed whitespace.\n */\ngoog.string.collapseWhitespace \x3d function(str) {\n  // Since IE doesn\x27t include non-breaking-space (0xa0) in their \\s character\n  // class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  // include it in the regexp to enforce consistent cross-browser behavior.\n  return str.replace(/[\\s\\xa0]+/g, \x27 \x27).replace(/^\\s+|\\s+$/g, \x27\x27);\n};\n\n\n/**\n * Checks if a string is empty or contains only whitespaces.\n * @param {string} str The string to check.\n * @return {boolean} Whether `str` is empty or whitespace only.\n */\ngoog.string.isEmptyOrWhitespace \x3d function(str) {\n  // testing length \x3d\x3d 0 first is actually slower in all browsers (about the\n  // same in Opera).\n  // Since IE doesn\x27t include non-breaking-space (0xa0) in their \\s character\n  // class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  // include it in the regexp to enforce consistent cross-browser behavior.\n  return /^[\\s\\xa0]*$/.test(str);\n};\n\n\n/**\n * Checks if a string is empty.\n * @param {string} str The string to check.\n * @return {boolean} Whether `str` is empty.\n */\ngoog.string.isEmptyString \x3d function(str) {\n  return str.length \x3d\x3d 0;\n};\n\n\n/**\n * Checks if a string is empty or contains only whitespaces.\n *\n * @param {string} str The string to check.\n * @return {boolean} Whether `str` is empty or whitespace only.\n * @deprecated Use goog.string.isEmptyOrWhitespace instead.\n */\ngoog.string.isEmpty \x3d goog.string.isEmptyOrWhitespace;\n\n\n/**\n * Checks if a string is null, undefined, empty or contains only whitespaces.\n * @param {*} str The string to check.\n * @return {boolean} Whether `str` is null, undefined, empty, or\n *     whitespace only.\n * @deprecated Use goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str))\n *     instead.\n */\ngoog.string.isEmptyOrWhitespaceSafe \x3d function(str) {\n  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));\n};\n\n\n/**\n * Checks if a string is null, undefined, empty or contains only whitespaces.\n *\n * @param {*} str The string to check.\n * @return {boolean} Whether `str` is null, undefined, empty, or\n *     whitespace only.\n * @deprecated Use goog.string.isEmptyOrWhitespace instead.\n */\ngoog.string.isEmptySafe \x3d goog.string.isEmptyOrWhitespaceSafe;\n\n\n/**\n * Checks if a string is all breaking whitespace.\n * @param {string} str The string to check.\n * @return {boolean} Whether the string is all breaking whitespace.\n */\ngoog.string.isBreakingWhitespace \x3d function(str) {\n  return !/[^\\t\\n\\r ]/.test(str);\n};\n\n\n/**\n * Checks if a string contains all letters.\n * @param {string} str string to check.\n * @return {boolean} True if `str` consists entirely of letters.\n */\ngoog.string.isAlpha \x3d function(str) {\n  return !/[^a-zA-Z]/.test(str);\n};\n\n\n/**\n * Checks if a string contains only numbers.\n * @param {*} str string to check. If not a string, it will be\n *     casted to one.\n * @return {boolean} True if `str` is numeric.\n */\ngoog.string.isNumeric \x3d function(str) {\n  return !/[^0-9]/.test(str);\n};\n\n\n/**\n * Checks if a string contains only numbers or letters.\n * @param {string} str string to check.\n * @return {boolean} True if `str` is alphanumeric.\n */\ngoog.string.isAlphaNumeric \x3d function(str) {\n  return !/[^a-zA-Z0-9]/.test(str);\n};\n\n\n/**\n * Checks if a character is a space character.\n * @param {string} ch Character to check.\n * @return {boolean} True if `ch` is a space.\n */\ngoog.string.isSpace \x3d function(ch) {\n  return ch \x3d\x3d \x27 \x27;\n};\n\n\n/**\n * Checks if a character is a valid unicode character.\n * @param {string} ch Character to check.\n * @return {boolean} True if `ch` is a valid unicode character.\n */\ngoog.string.isUnicodeChar \x3d function(ch) {\n  return ch.length \x3d\x3d 1 \x26\x26 ch \x3e\x3d \x27 \x27 \x26\x26 ch \x3c\x3d \x27~\x27 ||\n      ch \x3e\x3d \x27\\u0080\x27 \x26\x26 ch \x3c\x3d \x27\\uFFFD\x27;\n};\n\n\n/**\n * Takes a string and replaces newlines with a space. Multiple lines are\n * replaced with a single space.\n * @param {string} str The string from which to strip newlines.\n * @return {string} A copy of `str` stripped of newlines.\n */\ngoog.string.stripNewlines \x3d function(str) {\n  return str.replace(/(\\r\\n|\\r|\\n)+/g, \x27 \x27);\n};\n\n\n/**\n * Replaces Windows and Mac new lines with unix style: \\r or \\r\\n with \\n.\n * @param {string} str The string to in which to canonicalize newlines.\n * @return {string} `str` A copy of {@code} with canonicalized newlines.\n */\ngoog.string.canonicalizeNewlines \x3d function(str) {\n  return str.replace(/(\\r\\n|\\r|\\n)/g, \x27\\n\x27);\n};\n\n\n/**\n * Normalizes whitespace in a string, replacing all whitespace chars with\n * a space.\n * @param {string} str The string in which to normalize whitespace.\n * @return {string} A copy of `str` with all whitespace normalized.\n */\ngoog.string.normalizeWhitespace \x3d function(str) {\n  return str.replace(/\\xa0|\\s/g, \x27 \x27);\n};\n\n\n/**\n * Normalizes spaces in a string, replacing all consecutive spaces and tabs\n * with a single space. Replaces non-breaking space with a space.\n * @param {string} str The string in which to normalize spaces.\n * @return {string} A copy of `str` with all consecutive spaces and tabs\n *    replaced with a single space.\n */\ngoog.string.normalizeSpaces \x3d function(str) {\n  return str.replace(/\\xa0|[ \\t]+/g, \x27 \x27);\n};\n\n\n/**\n * Removes the breaking spaces from the left and right of the string and\n * collapses the sequences of breaking spaces in the middle into single spaces.\n * The original and the result strings render the same way in HTML.\n * @param {string} str A string in which to collapse spaces.\n * @return {string} Copy of the string with normalized breaking spaces.\n */\ngoog.string.collapseBreakingSpaces \x3d function(str) {\n  return str.replace(/[\\t\\r\\n ]+/g, \x27 \x27)\n      .replace(/^[\\t\\r\\n ]+|[\\t\\r\\n ]+$/g, \x27\x27);\n};\n\n\n/**\n * Trims white spaces to the left and right of a string.\n * @param {string} str The string to trim.\n * @return {string} A trimmed copy of `str`.\n */\ngoog.string.trim \x3d\n    (goog.TRUSTED_SITE \x26\x26 String.prototype.trim) ? function(str) {\n      return str.trim();\n    } : function(str) {\n      // Since IE doesn\x27t include non-breaking-space (0xa0) in their \\s\n      // character class (as required by section 7.2 of the ECMAScript spec),\n      // we explicitly include it in the regexp to enforce consistent\n      // cross-browser behavior.\n      // NOTE: We don\x27t use String#replace because it might have side effects\n      // causing this function to not compile to 0 bytes.\n      return /^[\\s\\xa0]*([\\s\\S]*?)[\\s\\xa0]*$/.exec(str)[1];\n    };\n\n\n/**\n * Trims whitespaces at the left end of a string.\n * @param {string} str The string to left trim.\n * @return {string} A trimmed copy of `str`.\n */\ngoog.string.trimLeft \x3d function(str) {\n  // Since IE doesn\x27t include non-breaking-space (0xa0) in their \\s character\n  // class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  // include it in the regexp to enforce consistent cross-browser behavior.\n  return str.replace(/^[\\s\\xa0]+/, \x27\x27);\n};\n\n\n/**\n * Trims whitespaces at the right end of a string.\n * @param {string} str The string to right trim.\n * @return {string} A trimmed copy of `str`.\n */\ngoog.string.trimRight \x3d function(str) {\n  // Since IE doesn\x27t include non-breaking-space (0xa0) in their \\s character\n  // class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  // include it in the regexp to enforce consistent cross-browser behavior.\n  return str.replace(/[\\s\\xa0]+$/, \x27\x27);\n};\n\n\n/**\n * A string comparator that ignores case.\n * -1 \x3d str1 less than str2\n *  0 \x3d str1 equals str2\n *  1 \x3d str1 greater than str2\n *\n * @param {string} str1 The string to compare.\n * @param {string} str2 The string to compare `str1` to.\n * @return {number} The comparator result, as described above.\n */\ngoog.string.caseInsensitiveCompare \x3d function(str1, str2) {\n  var test1 \x3d String(str1).toLowerCase();\n  var test2 \x3d String(str2).toLowerCase();\n\n  if (test1 \x3c test2) {\n    return -1;\n  } else if (test1 \x3d\x3d test2) {\n    return 0;\n  } else {\n    return 1;\n  }\n};\n\n\n/**\n * Compares two strings interpreting their numeric substrings as numbers.\n *\n * @param {string} str1 First string.\n * @param {string} str2 Second string.\n * @param {!RegExp} tokenizerRegExp Splits a string into substrings of\n *     non-negative integers, non-numeric characters and optionally fractional\n *     numbers starting with a decimal point.\n * @return {number} Negative if str1 \x3c str2, 0 is str1 \x3d\x3d str2, positive if\n *     str1 \x3e str2.\n * @private\n */\ngoog.string.numberAwareCompare_ \x3d function(str1, str2, tokenizerRegExp) {\n  if (str1 \x3d\x3d str2) {\n    return 0;\n  }\n  if (!str1) {\n    return -1;\n  }\n  if (!str2) {\n    return 1;\n  }\n\n  // Using match to split the entire string ahead of time turns out to be faster\n  // for most inputs than using RegExp.exec or iterating over each character.\n  var tokens1 \x3d str1.toLowerCase().match(tokenizerRegExp);\n  var tokens2 \x3d str2.toLowerCase().match(tokenizerRegExp);\n\n  var count \x3d Math.min(tokens1.length, tokens2.length);\n\n  for (var i \x3d 0; i \x3c count; i++) {\n    var a \x3d tokens1[i];\n    var b \x3d tokens2[i];\n\n    // Compare pairs of tokens, returning if one token sorts before the other.\n    if (a !\x3d b) {\n      // Only if both tokens are integers is a special comparison required.\n      // Decimal numbers are sorted as strings (e.g., \x27.09\x27 \x3c \x27.1\x27).\n      var num1 \x3d parseInt(a, 10);\n      if (!isNaN(num1)) {\n        var num2 \x3d parseInt(b, 10);\n        if (!isNaN(num2) \x26\x26 num1 - num2) {\n          return num1 - num2;\n        }\n      }\n      return a \x3c b ? -1 : 1;\n    }\n  }\n\n  // If one string is a substring of the other, the shorter string sorts first.\n  if (tokens1.length !\x3d tokens2.length) {\n    return tokens1.length - tokens2.length;\n  }\n\n  // The two strings must be equivalent except for case (perfect equality is\n  // tested at the head of the function.) Revert to default ASCII string\n  // comparison to stabilize the sort.\n  return str1 \x3c str2 ? -1 : 1;\n};\n\n\n/**\n * String comparison function that handles non-negative integer numbers in a\n * way humans might expect. Using this function, the string \x27File 2.jpg\x27 sorts\n * before \x27File 10.jpg\x27, and \x27Version 1.9\x27 before \x27Version 1.10\x27. The comparison\n * is mostly case-insensitive, though strings that are identical except for case\n * are sorted with the upper-case strings before lower-case.\n *\n * This comparison function is up to 50x slower than either the default or the\n * case-insensitive compare. It should not be used in time-critical code, but\n * should be fast enough to sort several hundred short strings (like filenames)\n * with a reasonable delay.\n *\n * @param {string} str1 The string to compare in a numerically sensitive way.\n * @param {string} str2 The string to compare `str1` to.\n * @return {number} less than 0 if str1 \x3c str2, 0 if str1 \x3d\x3d str2, greater than\n *     0 if str1 \x3e str2.\n */\ngoog.string.intAwareCompare \x3d function(str1, str2) {\n  return goog.string.numberAwareCompare_(str1, str2, /\\d+|\\D+/g);\n};\n\n\n/**\n * String comparison function that handles non-negative integer and fractional\n * numbers in a way humans might expect. Using this function, the string\n * \x27File 2.jpg\x27 sorts before \x27File 10.jpg\x27, and \x273.14\x27 before \x273.2\x27. Equivalent\n * to {@link goog.string.intAwareCompare} apart from the way how it interprets\n * dots.\n *\n * @param {string} str1 The string to compare in a numerically sensitive way.\n * @param {string} str2 The string to compare `str1` to.\n * @return {number} less than 0 if str1 \x3c str2, 0 if str1 \x3d\x3d str2, greater than\n *     0 if str1 \x3e str2.\n */\ngoog.string.floatAwareCompare \x3d function(str1, str2) {\n  return goog.string.numberAwareCompare_(str1, str2, /\\d+|\\.\\d+|\\D+/g);\n};\n\n\n/**\n * Alias for {@link goog.string.floatAwareCompare}.\n *\n * @param {string} str1\n * @param {string} str2\n * @return {number}\n */\ngoog.string.numerateCompare \x3d goog.string.floatAwareCompare;\n\n\n/**\n * URL-encodes a string\n * @param {*} str The string to url-encode.\n * @return {string} An encoded copy of `str` that is safe for urls.\n *     Note that \x27#\x27, \x27:\x27, and other characters used to delimit portions\n *     of URLs *will* be encoded.\n */\ngoog.string.urlEncode \x3d function(str) {\n  return encodeURIComponent(String(str));\n};\n\n\n/**\n * URL-decodes the string. We need to specially handle \x27+\x27s because\n * the javascript library doesn\x27t convert them to spaces.\n * @param {string} str The string to url decode.\n * @return {string} The decoded `str`.\n */\ngoog.string.urlDecode \x3d function(str) {\n  return decodeURIComponent(str.replace(/\\+/g, \x27 \x27));\n};\n\n\n/**\n * Converts \\n to \x3cbr\x3es or \x3cbr /\x3es.\n * @param {string} str The string in which to convert newlines.\n * @param {boolean\x3d} opt_xml Whether to use XML compatible tags.\n * @return {string} A copy of `str` with converted newlines.\n */\ngoog.string.newLineToBr \x3d function(str, opt_xml) {\n  return str.replace(/(\\r\\n|\\r|\\n)/g, opt_xml ? \x27\x3cbr /\x3e\x27 : \x27\x3cbr\x3e\x27);\n};\n\n\n/**\n * Escapes double quote \x27\x22\x27 and single quote \x27\\\x27\x27 characters in addition to\n * \x27\x26\x27, \x27\x3c\x27, and \x27\x3e\x27 so that a string can be included in an HTML tag attribute\n * value within double or single quotes.\n *\n * It should be noted that \x3e doesn\x27t need to be escaped for the HTML or XML to\n * be valid, but it has been decided to escape it for consistency with other\n * implementations.\n *\n * With goog.string.DETECT_DOUBLE_ESCAPING, this function escapes also the\n * lowercase letter \x22e\x22.\n *\n * NOTE(pupius):\n * HtmlEscape is often called during the generation of large blocks of HTML.\n * Using statics for the regular expressions and strings is an optimization\n * that can more than half the amount of time IE spends in this function for\n * large apps, since strings and regexes both contribute to GC allocations.\n *\n * Testing for the presence of a character before escaping increases the number\n * of function calls, but actually provides a speed increase for the average\n * case -- since the average case often doesn\x27t require the escaping of all 4\n * characters and indexOf() is much cheaper than replace().\n * The worst case does suffer slightly from the additional calls, therefore the\n * opt_isLikelyToContainHtmlChars option has been included for situations\n * where all 4 HTML entities are very likely to be present and need escaping.\n *\n * Some benchmarks (times tended to fluctuate +-0.05ms):\n *                                     FireFox                     IE6\n * (no chars / average (mix of cases) / all 4 chars)\n * no checks                     0.13 / 0.22 / 0.22         0.23 / 0.53 / 0.80\n * indexOf                       0.08 / 0.17 / 0.26         0.22 / 0.54 / 0.84\n * indexOf + re test             0.07 / 0.17 / 0.28         0.19 / 0.50 / 0.85\n *\n * An additional advantage of checking if replace actually needs to be called\n * is a reduction in the number of object allocations, so as the size of the\n * application grows the difference between the various methods would increase.\n *\n * @param {string} str string to be escaped.\n * @param {boolean\x3d} opt_isLikelyToContainHtmlChars Don\x27t perform a check to see\n *     if the character needs replacing - use this option if you expect each of\n *     the characters to appear often. Leave false if you expect few html\n *     characters to occur in your strings, such as if you are escaping HTML.\n * @return {string} An escaped copy of `str`.\n */\ngoog.string.htmlEscape \x3d function(str, opt_isLikelyToContainHtmlChars) {\n\n  if (opt_isLikelyToContainHtmlChars) {\n    str \x3d str.replace(goog.string.AMP_RE_, \x27\x26amp;\x27)\n              .replace(goog.string.LT_RE_, \x27\x26lt;\x27)\n              .replace(goog.string.GT_RE_, \x27\x26gt;\x27)\n              .replace(goog.string.QUOT_RE_, \x27\x26quot;\x27)\n              .replace(goog.string.SINGLE_QUOTE_RE_, \x27\x26#39;\x27)\n              .replace(goog.string.NULL_RE_, \x27\x26#0;\x27);\n    if (goog.string.DETECT_DOUBLE_ESCAPING) {\n      str \x3d str.replace(goog.string.E_RE_, \x27\x26#101;\x27);\n    }\n    return str;\n\n  } else {\n    // quick test helps in the case when there are no chars to replace, in\n    // worst case this makes barely a difference to the time taken\n    if (!goog.string.ALL_RE_.test(str)) return str;\n\n    // str.indexOf is faster than regex.test in this case\n    if (str.indexOf(\x27\x26\x27) !\x3d -1) {\n      str \x3d str.replace(goog.string.AMP_RE_, \x27\x26amp;\x27);\n    }\n    if (str.indexOf(\x27\x3c\x27) !\x3d -1) {\n      str \x3d str.replace(goog.string.LT_RE_, \x27\x26lt;\x27);\n    }\n    if (str.indexOf(\x27\x3e\x27) !\x3d -1) {\n      str \x3d str.replace(goog.string.GT_RE_, \x27\x26gt;\x27);\n    }\n    if (str.indexOf(\x27\x22\x27) !\x3d -1) {\n      str \x3d str.replace(goog.string.QUOT_RE_, \x27\x26quot;\x27);\n    }\n    if (str.indexOf(\x27\\\x27\x27) !\x3d -1) {\n      str \x3d str.replace(goog.string.SINGLE_QUOTE_RE_, \x27\x26#39;\x27);\n    }\n    if (str.indexOf(\x27\\x00\x27) !\x3d -1) {\n      str \x3d str.replace(goog.string.NULL_RE_, \x27\x26#0;\x27);\n    }\n    if (goog.string.DETECT_DOUBLE_ESCAPING \x26\x26 str.indexOf(\x27e\x27) !\x3d -1) {\n      str \x3d str.replace(goog.string.E_RE_, \x27\x26#101;\x27);\n    }\n    return str;\n  }\n};\n\n\n/**\n * Regular expression that matches an ampersand, for use in escaping.\n * @const {!RegExp}\n * @private\n */\ngoog.string.AMP_RE_ \x3d /\x26/g;\n\n\n/**\n * Regular expression that matches a less than sign, for use in escaping.\n * @const {!RegExp}\n * @private\n */\ngoog.string.LT_RE_ \x3d /\x3c/g;\n\n\n/**\n * Regular expression that matches a greater than sign, for use in escaping.\n * @const {!RegExp}\n * @private\n */\ngoog.string.GT_RE_ \x3d /\x3e/g;\n\n\n/**\n * Regular expression that matches a double quote, for use in escaping.\n * @const {!RegExp}\n * @private\n */\ngoog.string.QUOT_RE_ \x3d /\x22/g;\n\n\n/**\n * Regular expression that matches a single quote, for use in escaping.\n * @const {!RegExp}\n * @private\n */\ngoog.string.SINGLE_QUOTE_RE_ \x3d /\x27/g;\n\n\n/**\n * Regular expression that matches null character, for use in escaping.\n * @const {!RegExp}\n * @private\n */\ngoog.string.NULL_RE_ \x3d /\\x00/g;\n\n\n/**\n * Regular expression that matches a lowercase letter \x22e\x22, for use in escaping.\n * @const {!RegExp}\n * @private\n */\ngoog.string.E_RE_ \x3d /e/g;\n\n\n/**\n * Regular expression that matches any character that needs to be escaped.\n * @const {!RegExp}\n * @private\n */\ngoog.string.ALL_RE_ \x3d\n    (goog.string.DETECT_DOUBLE_ESCAPING ? /[\\x00\x26\x3c\x3e\x22\x27e]/ : /[\\x00\x26\x3c\x3e\x22\x27]/);\n\n\n/**\n * Unescapes an HTML string.\n *\n * @param {string} str The string to unescape.\n * @return {string} An unescaped copy of `str`.\n */\ngoog.string.unescapeEntities \x3d function(str) {\n  if (goog.string.contains(str, \x27\x26\x27)) {\n    // We are careful not to use a DOM if we do not have one or we explicitly\n    // requested non-DOM html unescaping.\n    if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING \x26\x26\n        \x27document\x27 in goog.global) {\n      return goog.string.unescapeEntitiesUsingDom_(str);\n    } else {\n      // Fall back on pure XML entities\n      return goog.string.unescapePureXmlEntities_(str);\n    }\n  }\n  return str;\n};\n\n\n/**\n * Unescapes a HTML string using the provided document.\n *\n * @param {string} str The string to unescape.\n * @param {!Document} document A document to use in escaping the string.\n * @return {string} An unescaped copy of `str`.\n */\ngoog.string.unescapeEntitiesWithDocument \x3d function(str, document) {\n  if (goog.string.contains(str, \x27\x26\x27)) {\n    return goog.string.unescapeEntitiesUsingDom_(str, document);\n  }\n  return str;\n};\n\n\n/**\n * Unescapes an HTML string using a DOM to resolve non-XML, non-numeric\n * entities. This function is XSS-safe and whitespace-preserving.\n * @private\n * @param {string} str The string to unescape.\n * @param {Document\x3d} opt_document An optional document to use for creating\n *     elements. If this is not specified then the default window.document\n *     will be used.\n * @return {string} The unescaped `str` string.\n */\ngoog.string.unescapeEntitiesUsingDom_ \x3d function(str, opt_document) {\n  /** @type {!Object\x3cstring, string\x3e} */\n  var seen \x3d {\x27\x26amp;\x27: \x27\x26\x27, \x27\x26lt;\x27: \x27\x3c\x27, \x27\x26gt;\x27: \x27\x3e\x27, \x27\x26quot;\x27: \x27\x22\x27};\n  var div;\n  if (opt_document) {\n    div \x3d opt_document.createElement(\x27div\x27);\n  } else {\n    div \x3d goog.global.document.createElement(\x27div\x27);\n  }\n  // Match as many valid entity characters as possible. If the actual entity\n  // happens to be shorter, it will still work as innerHTML will return the\n  // trailing characters unchanged. Since the entity characters do not include\n  // open angle bracket, there is no chance of XSS from the innerHTML use.\n  // Since no whitespace is passed to innerHTML, whitespace is preserved.\n  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {\n    // Check for cached entity.\n    var value \x3d seen[s];\n    if (value) {\n      return value;\n    }\n    // Check for numeric entity.\n    if (entity.charAt(0) \x3d\x3d \x27#\x27) {\n      // Prefix with 0 so that hex entities (e.g. \x26#x10) parse as hex numbers.\n      var n \x3d Number(\x270\x27 + entity.substr(1));\n      if (!isNaN(n)) {\n        value \x3d String.fromCharCode(n);\n      }\n    }\n    // Fall back to innerHTML otherwise.\n    if (!value) {\n      // Append a non-entity character to avoid a bug in Webkit that parses\n      // an invalid entity at the end of innerHTML text as the empty string.\n      div.innerHTML \x3d s + \x27 \x27;\n      // Then remove the trailing character from the result.\n      value \x3d div.firstChild.nodeValue.slice(0, -1);\n    }\n    // Cache and return.\n    return seen[s] \x3d value;\n  });\n};\n\n\n/**\n * Unescapes XML entities.\n * @private\n * @param {string} str The string to unescape.\n * @return {string} An unescaped copy of `str`.\n */\ngoog.string.unescapePureXmlEntities_ \x3d function(str) {\n  return str.replace(/\x26([^;]+);/g, function(s, entity) {\n    switch (entity) {\n      case \x27amp\x27:\n        return \x27\x26\x27;\n      case \x27lt\x27:\n        return \x27\x3c\x27;\n      case \x27gt\x27:\n        return \x27\x3e\x27;\n      case \x27quot\x27:\n        return \x27\x22\x27;\n      default:\n        if (entity.charAt(0) \x3d\x3d \x27#\x27) {\n          // Prefix with 0 so that hex entities (e.g. \x26#x10) parse as hex.\n          var n \x3d Number(\x270\x27 + entity.substr(1));\n          if (!isNaN(n)) {\n            return String.fromCharCode(n);\n          }\n        }\n        // For invalid entities we just return the entity\n        return s;\n    }\n  });\n};\n\n\n/**\n * Regular expression that matches an HTML entity.\n * See also HTML5: Tokenization / Tokenizing character references.\n * @private\n * @type {!RegExp}\n */\ngoog.string.HTML_ENTITY_PATTERN_ \x3d /\x26([^;\\s\x3c\x26]+);?/g;\n\n\n/**\n * Do escaping of whitespace to preserve spatial formatting. We use character\n * entity #160 to make it safer for xml.\n * @param {string} str The string in which to escape whitespace.\n * @param {boolean\x3d} opt_xml Whether to use XML compatible tags.\n * @return {string} An escaped copy of `str`.\n */\ngoog.string.whitespaceEscape \x3d function(str, opt_xml) {\n  // This doesn\x27t use goog.string.preserveSpaces for backwards compatibility.\n  return goog.string.newLineToBr(str.replace(/  /g, \x27 \x26#160;\x27), opt_xml);\n};\n\n\n/**\n * Preserve spaces that would be otherwise collapsed in HTML by replacing them\n * with non-breaking space Unicode characters.\n * @param {string} str The string in which to preserve whitespace.\n * @return {string} A copy of `str` with preserved whitespace.\n */\ngoog.string.preserveSpaces \x3d function(str) {\n  return str.replace(/(^|[\\n ]) /g, \x27$1\x27 + goog.string.Unicode.NBSP);\n};\n\n\n/**\n * Strip quote characters around a string.  The second argument is a string of\n * characters to treat as quotes.  This can be a single character or a string of\n * multiple character and in that case each of those are treated as possible\n * quote characters. For example:\n *\n * \x3cpre\x3e\n * goog.string.stripQuotes(\x27\x22abc\x22\x27, \x27\x22`\x27) --\x3e \x27abc\x27\n * goog.string.stripQuotes(\x27`abc`\x27, \x27\x22`\x27) --\x3e \x27abc\x27\n * \x3c/pre\x3e\n *\n * @param {string} str The string to strip.\n * @param {string} quoteChars The quote characters to strip.\n * @return {string} A copy of `str` without the quotes.\n */\ngoog.string.stripQuotes \x3d function(str, quoteChars) {\n  var length \x3d quoteChars.length;\n  for (var i \x3d 0; i \x3c length; i++) {\n    var quoteChar \x3d length \x3d\x3d 1 ? quoteChars : quoteChars.charAt(i);\n    if (str.charAt(0) \x3d\x3d quoteChar \x26\x26 str.charAt(str.length - 1) \x3d\x3d quoteChar) {\n      return str.substring(1, str.length - 1);\n    }\n  }\n  return str;\n};\n\n\n/**\n * Truncates a string to a certain length and adds \x27...\x27 if necessary.  The\n * length also accounts for the ellipsis, so a maximum length of 10 and a string\n * \x27Hello World!\x27 produces \x27Hello W...\x27.\n * @param {string} str The string to truncate.\n * @param {number} chars Max number of characters.\n * @param {boolean\x3d} opt_protectEscapedCharacters Whether to protect escaped\n *     characters from being cut off in the middle.\n * @return {string} The truncated `str` string.\n */\ngoog.string.truncate \x3d function(str, chars, opt_protectEscapedCharacters) {\n  if (opt_protectEscapedCharacters) {\n    str \x3d goog.string.unescapeEntities(str);\n  }\n\n  if (str.length \x3e chars) {\n    str \x3d str.substring(0, chars - 3) + \x27...\x27;\n  }\n\n  if (opt_protectEscapedCharacters) {\n    str \x3d goog.string.htmlEscape(str);\n  }\n\n  return str;\n};\n\n\n/**\n * Truncate a string in the middle, adding \x22...\x22 if necessary,\n * and favoring the beginning of the string.\n * @param {string} str The string to truncate the middle of.\n * @param {number} chars Max number of characters.\n * @param {boolean\x3d} opt_protectEscapedCharacters Whether to protect escaped\n *     characters from being cutoff in the middle.\n * @param {number\x3d} opt_trailingChars Optional number of trailing characters to\n *     leave at the end of the string, instead of truncating as close to the\n *     middle as possible.\n * @return {string} A truncated copy of `str`.\n */\ngoog.string.truncateMiddle \x3d function(\n    str, chars, opt_protectEscapedCharacters, opt_trailingChars) {\n  if (opt_protectEscapedCharacters) {\n    str \x3d goog.string.unescapeEntities(str);\n  }\n\n  if (opt_trailingChars \x26\x26 str.length \x3e chars) {\n    if (opt_trailingChars \x3e chars) {\n      opt_trailingChars \x3d chars;\n    }\n    var endPoint \x3d str.length - opt_trailingChars;\n    var startPoint \x3d chars - opt_trailingChars;\n    str \x3d str.substring(0, startPoint) + \x27...\x27 + str.substring(endPoint);\n  } else if (str.length \x3e chars) {\n    // Favor the beginning of the string:\n    var half \x3d Math.floor(chars / 2);\n    var endPos \x3d str.length - half;\n    half +\x3d chars % 2;\n    str \x3d str.substring(0, half) + \x27...\x27 + str.substring(endPos);\n  }\n\n  if (opt_protectEscapedCharacters) {\n    str \x3d goog.string.htmlEscape(str);\n  }\n\n  return str;\n};\n\n\n/**\n * Special chars that need to be escaped for goog.string.quote.\n * @private {!Object\x3cstring, string\x3e}\n */\ngoog.string.specialEscapeChars_ \x3d {\n  \x27\\0\x27: \x27\\\\0\x27,\n  \x27\\b\x27: \x27\\\\b\x27,\n  \x27\\f\x27: \x27\\\\f\x27,\n  \x27\\n\x27: \x27\\\\n\x27,\n  \x27\\r\x27: \x27\\\\r\x27,\n  \x27\\t\x27: \x27\\\\t\x27,\n  \x27\\x0B\x27: \x27\\\\x0B\x27,  // \x27\\v\x27 is not supported in JScript\n  \x27\x22\x27: \x27\\\\\x22\x27,\n  \x27\\\\\x27: \x27\\\\\\\\\x27,\n  // To support the use case of embedding quoted strings inside of script\n  // tags, we have to make sure HTML comments and opening/closing script tags do\n  // not appear in the resulting string. The specific strings that must be\n  // escaped are documented at:\n  // http://www.w3.org/TR/html51/semantics.html#restrictions-for-contents-of-script-elements\n  \x27\x3c\x27: \x27\\x3c\x27\n};\n\n\n/**\n * Character mappings used internally for goog.string.escapeChar.\n * @private {!Object\x3cstring, string\x3e}\n */\ngoog.string.jsEscapeCache_ \x3d {\n  \x27\\\x27\x27: \x27\\\\\\\x27\x27\n};\n\n\n/**\n * Encloses a string in double quotes and escapes characters so that the\n * string is a valid JS string. The resulting string is safe to embed in\n * `\x3cscript\x3e` tags as \x22\x3c\x22 is escaped.\n * @param {string} s The string to quote.\n * @return {string} A copy of `s` surrounded by double quotes.\n */\ngoog.string.quote \x3d function(s) {\n  s \x3d String(s);\n  var sb \x3d [\x27\x22\x27];\n  for (var i \x3d 0; i \x3c s.length; i++) {\n    var ch \x3d s.charAt(i);\n    var cc \x3d ch.charCodeAt(0);\n    sb[i + 1] \x3d goog.string.specialEscapeChars_[ch] ||\n        ((cc \x3e 31 \x26\x26 cc \x3c 127) ? ch : goog.string.escapeChar(ch));\n  }\n  sb.push(\x27\x22\x27);\n  return sb.join(\x27\x27);\n};\n\n\n/**\n * Takes a string and returns the escaped string for that input string.\n * @param {string} str The string to escape.\n * @return {string} An escaped string representing `str`.\n */\ngoog.string.escapeString \x3d function(str) {\n  var sb \x3d [];\n  for (var i \x3d 0; i \x3c str.length; i++) {\n    sb[i] \x3d goog.string.escapeChar(str.charAt(i));\n  }\n  return sb.join(\x27\x27);\n};\n\n\n/**\n * Takes a character and returns the escaped string for that character. For\n * example escapeChar(String.fromCharCode(15)) -\x3e \x22\\\\x0E\x22.\n * @param {string} c The character to escape.\n * @return {string} An escaped string representing `c`.\n */\ngoog.string.escapeChar \x3d function(c) {\n  if (c in goog.string.jsEscapeCache_) {\n    return goog.string.jsEscapeCache_[c];\n  }\n\n  if (c in goog.string.specialEscapeChars_) {\n    return goog.string.jsEscapeCache_[c] \x3d goog.string.specialEscapeChars_[c];\n  }\n\n  var rv \x3d c;\n  var cc \x3d c.charCodeAt(0);\n  if (cc \x3e 31 \x26\x26 cc \x3c 127) {\n    rv \x3d c;\n  } else {\n    // tab is 9 but handled above\n    if (cc \x3c 256) {\n      rv \x3d \x27\\\\x\x27;\n      if (cc \x3c 16 || cc \x3e 256) {\n        rv +\x3d \x270\x27;\n      }\n    } else {\n      rv \x3d \x27\\\\u\x27;\n      if (cc \x3c 4096) {  // \\u1000\n        rv +\x3d \x270\x27;\n      }\n    }\n    rv +\x3d cc.toString(16).toUpperCase();\n  }\n\n  return goog.string.jsEscapeCache_[c] \x3d rv;\n};\n\n\n/**\n * Determines whether a string contains a substring.\n * @param {string} str The string to search.\n * @param {string} subString The substring to search for.\n * @return {boolean} Whether `str` contains `subString`.\n */\ngoog.string.contains \x3d function(str, subString) {\n  return str.indexOf(subString) !\x3d -1;\n};\n\n\n/**\n * Determines whether a string contains a substring, ignoring case.\n * @param {string} str The string to search.\n * @param {string} subString The substring to search for.\n * @return {boolean} Whether `str` contains `subString`.\n */\ngoog.string.caseInsensitiveContains \x3d function(str, subString) {\n  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());\n};\n\n\n/**\n * Returns the non-overlapping occurrences of ss in s.\n * If either s or ss evalutes to false, then returns zero.\n * @param {string} s The string to look in.\n * @param {string} ss The string to look for.\n * @return {number} Number of occurrences of ss in s.\n */\ngoog.string.countOf \x3d function(s, ss) {\n  return s \x26\x26 ss ? s.split(ss).length - 1 : 0;\n};\n\n\n/**\n * Removes a substring of a specified length at a specific\n * index in a string.\n * @param {string} s The base string from which to remove.\n * @param {number} index The index at which to remove the substring.\n * @param {number} stringLength The length of the substring to remove.\n * @return {string} A copy of `s` with the substring removed or the full\n *     string if nothing is removed or the input is invalid.\n */\ngoog.string.removeAt \x3d function(s, index, stringLength) {\n  var resultStr \x3d s;\n  // If the index is greater or equal to 0 then remove substring\n  if (index \x3e\x3d 0 \x26\x26 index \x3c s.length \x26\x26 stringLength \x3e 0) {\n    resultStr \x3d s.substr(0, index) +\n        s.substr(index + stringLength, s.length - index - stringLength);\n  }\n  return resultStr;\n};\n\n\n/**\n * Removes the first occurrence of a substring from a string.\n * @param {string} str The base string from which to remove.\n * @param {string} substr The string to remove.\n * @return {string} A copy of `str` with `substr` removed or the\n *     full string if nothing is removed.\n */\ngoog.string.remove \x3d function(str, substr) {\n  return str.replace(substr, \x27\x27);\n};\n\n\n/**\n *  Removes all occurrences of a substring from a string.\n *  @param {string} s The base string from which to remove.\n *  @param {string} ss The string to remove.\n *  @return {string} A copy of `s` with `ss` removed or the full\n *      string if nothing is removed.\n */\ngoog.string.removeAll \x3d function(s, ss) {\n  var re \x3d new RegExp(goog.string.regExpEscape(ss), \x27g\x27);\n  return s.replace(re, \x27\x27);\n};\n\n\n/**\n *  Replaces all occurrences of a substring of a string with a new substring.\n *  @param {string} s The base string from which to remove.\n *  @param {string} ss The string to replace.\n *  @param {string} replacement The replacement string.\n *  @return {string} A copy of `s` with `ss` replaced by\n *      `replacement` or the original string if nothing is replaced.\n */\ngoog.string.replaceAll \x3d function(s, ss, replacement) {\n  var re \x3d new RegExp(goog.string.regExpEscape(ss), \x27g\x27);\n  return s.replace(re, replacement.replace(/\\$/g, \x27$$$$\x27));\n};\n\n\n/**\n * Escapes characters in the string that are not safe to use in a RegExp.\n * @param {*} s The string to escape. If not a string, it will be casted\n *     to one.\n * @return {string} A RegExp safe, escaped copy of `s`.\n */\ngoog.string.regExpEscape \x3d function(s) {\n  return String(s)\n      .replace(/([-()\\[\\]{}+?*.$\\^|,:#\x3c!\\\\])/g, \x27\\\\$1\x27)\n      .replace(/\\x08/g, \x27\\\\x08\x27);\n};\n\n\n/**\n * Repeats a string n times.\n * @param {string} string The string to repeat.\n * @param {number} length The number of times to repeat.\n * @return {string} A string containing `length` repetitions of\n *     `string`.\n */\ngoog.string.repeat \x3d (String.prototype.repeat) ? function(string, length) {\n  // The native method is over 100 times faster than the alternative.\n  return string.repeat(length);\n} : function(string, length) {\n  return new Array(length + 1).join(string);\n};\n\n\n/**\n * Pads number to given length and optionally rounds it to a given precision.\n * For example:\n * \x3cpre\x3epadNumber(1.25, 2, 3) -\x3e \x2701.250\x27\n * padNumber(1.25, 2) -\x3e \x2701.25\x27\n * padNumber(1.25, 2, 1) -\x3e \x2701.3\x27\n * padNumber(1.25, 0) -\x3e \x271.25\x27\x3c/pre\x3e\n *\n * @param {number} num The number to pad.\n * @param {number} length The desired length.\n * @param {number\x3d} opt_precision The desired precision.\n * @return {string} `num` as a string with the given options.\n */\ngoog.string.padNumber \x3d function(num, length, opt_precision) {\n  var s \x3d goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);\n  var index \x3d s.indexOf(\x27.\x27);\n  if (index \x3d\x3d -1) {\n    index \x3d s.length;\n  }\n  return goog.string.repeat(\x270\x27, Math.max(0, length - index)) + s;\n};\n\n\n/**\n * Returns a string representation of the given object, with\n * null and undefined being returned as the empty string.\n *\n * @param {*} obj The object to convert.\n * @return {string} A string representation of the `obj`.\n */\ngoog.string.makeSafe \x3d function(obj) {\n  return obj \x3d\x3d null ? \x27\x27 : String(obj);\n};\n\n\n/**\n * Concatenates string expressions. This is useful\n * since some browsers are very inefficient when it comes to using plus to\n * concat strings. Be careful when using null and undefined here since\n * these will not be included in the result. If you need to represent these\n * be sure to cast the argument to a String first.\n * For example:\n * \x3cpre\x3ebuildString(\x27a\x27, \x27b\x27, \x27c\x27, \x27d\x27) -\x3e \x27abcd\x27\n * buildString(null, undefined) -\x3e \x27\x27\n * \x3c/pre\x3e\n * @param {...*} var_args A list of strings to concatenate. If not a string,\n *     it will be casted to one.\n * @return {string} The concatenation of `var_args`.\n */\ngoog.string.buildString \x3d function(var_args) {\n  return Array.prototype.join.call(arguments, \x27\x27);\n};\n\n\n/**\n * Returns a string with at least 64-bits of randomness.\n *\n * Doesn\x27t trust Javascript\x27s random function entirely. Uses a combination of\n * random and current timestamp, and then encodes the string in base-36 to\n * make it shorter.\n *\n * @return {string} A random string, e.g. sn1s7vb4gcic.\n */\ngoog.string.getRandomString \x3d function() {\n  var x \x3d 2147483648;\n  return Math.floor(Math.random() * x).toString(36) +\n      Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);\n};\n\n\n/**\n * Compares two version numbers.\n *\n * @param {string|number} version1 Version of first item.\n * @param {string|number} version2 Version of second item.\n *\n * @return {number}  1 if `version1` is higher.\n *                   0 if arguments are equal.\n *                  -1 if `version2` is higher.\n */\ngoog.string.compareVersions \x3d function(version1, version2) {\n  var order \x3d 0;\n  // Trim leading and trailing whitespace and split the versions into\n  // subversions.\n  var v1Subs \x3d goog.string.trim(String(version1)).split(\x27.\x27);\n  var v2Subs \x3d goog.string.trim(String(version2)).split(\x27.\x27);\n  var subCount \x3d Math.max(v1Subs.length, v2Subs.length);\n\n  // Iterate over the subversions, as long as they appear to be equivalent.\n  for (var subIdx \x3d 0; order \x3d\x3d 0 \x26\x26 subIdx \x3c subCount; subIdx++) {\n    var v1Sub \x3d v1Subs[subIdx] || \x27\x27;\n    var v2Sub \x3d v2Subs[subIdx] || \x27\x27;\n\n    do {\n      // Split the subversions into pairs of numbers and qualifiers (like \x27b\x27).\n      // Two different RegExp objects are use to make it clear the code\n      // is side-effect free\n      var v1Comp \x3d /(\\d*)(\\D*)(.*)/.exec(v1Sub) || [\x27\x27, \x27\x27, \x27\x27, \x27\x27];\n      var v2Comp \x3d /(\\d*)(\\D*)(.*)/.exec(v2Sub) || [\x27\x27, \x27\x27, \x27\x27, \x27\x27];\n      // Break if there are no more matches.\n      if (v1Comp[0].length \x3d\x3d 0 \x26\x26 v2Comp[0].length \x3d\x3d 0) {\n        break;\n      }\n\n      // Parse the numeric part of the subversion. A missing number is\n      // equivalent to 0.\n      var v1CompNum \x3d v1Comp[1].length \x3d\x3d 0 ? 0 : parseInt(v1Comp[1], 10);\n      var v2CompNum \x3d v2Comp[1].length \x3d\x3d 0 ? 0 : parseInt(v2Comp[1], 10);\n\n      // Compare the subversion components. The number has the highest\n      // precedence. Next, if the numbers are equal, a subversion without any\n      // qualifier is always higher than a subversion with any qualifier. Next,\n      // the qualifiers are compared as strings.\n      order \x3d goog.string.compareElements_(v1CompNum, v2CompNum) ||\n          goog.string.compareElements_(\n              v1Comp[2].length \x3d\x3d 0, v2Comp[2].length \x3d\x3d 0) ||\n          goog.string.compareElements_(v1Comp[2], v2Comp[2]);\n      // Stop as soon as an inequality is discovered.\n\n      v1Sub \x3d v1Comp[3];\n      v2Sub \x3d v2Comp[3];\n    } while (order \x3d\x3d 0);\n  }\n\n  return order;\n};\n\n\n/**\n * Compares elements of a version number.\n *\n * @param {string|number|boolean} left An element from a version number.\n * @param {string|number|boolean} right An element from a version number.\n *\n * @return {number}  1 if `left` is higher.\n *                   0 if arguments are equal.\n *                  -1 if `right` is higher.\n * @private\n */\ngoog.string.compareElements_ \x3d function(left, right) {\n  if (left \x3c right) {\n    return -1;\n  } else if (left \x3e right) {\n    return 1;\n  }\n  return 0;\n};\n\n\n/**\n * String hash function similar to java.lang.String.hashCode().\n * The hash code for a string is computed as\n * s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n * where s[i] is the ith character of the string and n is the length of\n * the string. We mod the result to make it between 0 (inclusive) and 2^32\n * (exclusive).\n * @param {string} str A string.\n * @return {number} Hash value for `str`, between 0 (inclusive) and 2^32\n *  (exclusive). The empty string returns 0.\n */\ngoog.string.hashCode \x3d function(str) {\n  var result \x3d 0;\n  for (var i \x3d 0; i \x3c str.length; ++i) {\n    // Normalize to 4 byte range, 0 ... 2^32.\n    result \x3d (31 * result + str.charCodeAt(i)) \x3e\x3e\x3e 0;\n  }\n  return result;\n};\n\n\n/**\n * The most recent unique ID. |0 is equivalent to Math.floor in this case.\n * @type {number}\n * @private\n */\ngoog.string.uniqueStringCounter_ \x3d Math.random() * 0x80000000 | 0;\n\n\n/**\n * Generates and returns a string which is unique in the current document.\n * This is useful, for example, to create unique IDs for DOM elements.\n * @return {string} A unique id.\n */\ngoog.string.createUniqueString \x3d function() {\n  return \x27goog_\x27 + goog.string.uniqueStringCounter_++;\n};\n\n\n/**\n * Converts the supplied string to a number, which may be Infinity or NaN.\n * This function strips whitespace: (toNumber(\x27 123\x27) \x3d\x3d\x3d 123)\n * This function accepts scientific notation: (toNumber(\x271e1\x27) \x3d\x3d\x3d 10)\n *\n * This is better than Javascript\x27s built-in conversions because, sadly:\n *     (Number(\x27 \x27) \x3d\x3d\x3d 0) and (parseFloat(\x27123a\x27) \x3d\x3d\x3d 123)\n *\n * @param {string} str The string to convert.\n * @return {number} The number the supplied string represents, or NaN.\n */\ngoog.string.toNumber \x3d function(str) {\n  var num \x3d Number(str);\n  if (num \x3d\x3d 0 \x26\x26 goog.string.isEmptyOrWhitespace(str)) {\n    return NaN;\n  }\n  return num;\n};\n\n\n/**\n * Returns whether the given string is lower camel case (e.g. \x22isFooBar\x22).\n *\n * Note that this assumes the string is entirely letters.\n * @see http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms\n *\n * @param {string} str String to test.\n * @return {boolean} Whether the string is lower camel case.\n */\ngoog.string.isLowerCamelCase \x3d function(str) {\n  return /^[a-z]+([A-Z][a-z]*)*$/.test(str);\n};\n\n\n/**\n * Returns whether the given string is upper camel case (e.g. \x22FooBarBaz\x22).\n *\n * Note that this assumes the string is entirely letters.\n * @see http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms\n *\n * @param {string} str String to test.\n * @return {boolean} Whether the string is upper camel case.\n */\ngoog.string.isUpperCamelCase \x3d function(str) {\n  return /^([A-Z][a-z]*)+$/.test(str);\n};\n\n\n/**\n * Converts a string from selector-case to camelCase (e.g. from\n * \x22multi-part-string\x22 to \x22multiPartString\x22), useful for converting\n * CSS selectors and HTML dataset keys to their equivalent JS properties.\n * @param {string} str The string in selector-case form.\n * @return {string} The string in camelCase form.\n */\ngoog.string.toCamelCase \x3d function(str) {\n  return String(str).replace(\n      /\\-([a-z])/g, function(all, match) { return match.toUpperCase(); });\n};\n\n\n/**\n * Converts a string from camelCase to selector-case (e.g. from\n * \x22multiPartString\x22 to \x22multi-part-string\x22), useful for converting JS\n * style and dataset properties to equivalent CSS selectors and HTML keys.\n * @param {string} str The string in camelCase form.\n * @return {string} The string in selector-case form.\n */\ngoog.string.toSelectorCase \x3d function(str) {\n  return String(str).replace(/([A-Z])/g, \x27-$1\x27).toLowerCase();\n};\n\n\n/**\n * Converts a string into TitleCase. First character of the string is always\n * capitalized in addition to the first letter of every subsequent word.\n * Words are delimited by one or more whitespaces by default. Custom delimiters\n * can optionally be specified to replace the default, which doesn\x27t preserve\n * whitespace delimiters and instead must be explicitly included if needed.\n *\n * Default delimiter \x3d\x3e \x22 \x22:\n *    goog.string.toTitleCase(\x27oneTwoThree\x27)    \x3d\x3e \x27OneTwoThree\x27\n *    goog.string.toTitleCase(\x27one two three\x27)  \x3d\x3e \x27One Two Three\x27\n *    goog.string.toTitleCase(\x27  one   two   \x27) \x3d\x3e \x27  One   Two   \x27\n *    goog.string.toTitleCase(\x27one_two_three\x27)  \x3d\x3e \x27One_two_three\x27\n *    goog.string.toTitleCase(\x27one-two-three\x27)  \x3d\x3e \x27One-two-three\x27\n *\n * Custom delimiter \x3d\x3e \x22_-.\x22:\n *    goog.string.toTitleCase(\x27oneTwoThree\x27, \x27_-.\x27)       \x3d\x3e \x27OneTwoThree\x27\n *    goog.string.toTitleCase(\x27one two three\x27, \x27_-.\x27)     \x3d\x3e \x27One two three\x27\n *    goog.string.toTitleCase(\x27  one   two   \x27, \x27_-.\x27)    \x3d\x3e \x27  one   two   \x27\n *    goog.string.toTitleCase(\x27one_two_three\x27, \x27_-.\x27)     \x3d\x3e \x27One_Two_Three\x27\n *    goog.string.toTitleCase(\x27one-two-three\x27, \x27_-.\x27)     \x3d\x3e \x27One-Two-Three\x27\n *    goog.string.toTitleCase(\x27one...two...three\x27, \x27_-.\x27) \x3d\x3e \x27One...Two...Three\x27\n *    goog.string.toTitleCase(\x27one. two. three\x27, \x27_-.\x27)   \x3d\x3e \x27One. two. three\x27\n *    goog.string.toTitleCase(\x27one-two.three\x27, \x27_-.\x27)     \x3d\x3e \x27One-Two.Three\x27\n *\n * @param {string} str String value in camelCase form.\n * @param {string\x3d} opt_delimiters Custom delimiter character set used to\n *      distinguish words in the string value. Each character represents a\n *      single delimiter. When provided, default whitespace delimiter is\n *      overridden and must be explicitly included if needed.\n * @return {string} String value in TitleCase form.\n */\ngoog.string.toTitleCase \x3d function(str, opt_delimiters) {\n  var delimiters \x3d goog.isString(opt_delimiters) ?\n      goog.string.regExpEscape(opt_delimiters) :\n      \x27\\\\s\x27;\n\n  // For IE8, we need to prevent using an empty character set. Otherwise,\n  // incorrect matching will occur.\n  delimiters \x3d delimiters ? \x27|[\x27 + delimiters + \x27]+\x27 : \x27\x27;\n\n  var regexp \x3d new RegExp(\x27(^\x27 + delimiters + \x27)([a-z])\x27, \x27g\x27);\n  return str.replace(\n      regexp, function(all, p1, p2) { return p1 + p2.toUpperCase(); });\n};\n\n\n/**\n * Capitalizes a string, i.e. converts the first letter to uppercase\n * and all other letters to lowercase, e.g.:\n *\n * goog.string.capitalize(\x27one\x27)     \x3d\x3e \x27One\x27\n * goog.string.capitalize(\x27ONE\x27)     \x3d\x3e \x27One\x27\n * goog.string.capitalize(\x27one two\x27) \x3d\x3e \x27One two\x27\n *\n * Note that this function does not trim initial whitespace.\n *\n * @param {string} str String value to capitalize.\n * @return {string} String value with first letter in uppercase.\n */\ngoog.string.capitalize \x3d function(str) {\n  return String(str.charAt(0)).toUpperCase() +\n      String(str.substr(1)).toLowerCase();\n};\n\n\n/**\n * Parse a string in decimal or hexidecimal (\x270xFFFF\x27) form.\n *\n * To parse a particular radix, please use parseInt(string, radix) directly. See\n * https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseInt\n *\n * This is a wrapper for the built-in parseInt function that will only parse\n * numbers as base 10 or base 16.  Some JS implementations assume strings\n * starting with \x220\x22 are intended to be octal. ES3 allowed but discouraged\n * this behavior. ES5 forbids it.  This function emulates the ES5 behavior.\n *\n * For more information, see Mozilla JS Reference: http://goo.gl/8RiFj\n *\n * @param {string|number|null|undefined} value The value to be parsed.\n * @return {number} The number, parsed. If the string failed to parse, this\n *     will be NaN.\n */\ngoog.string.parseInt \x3d function(value) {\n  // Force finite numbers to strings.\n  if (isFinite(value)) {\n    value \x3d String(value);\n  }\n\n  if (goog.isString(value)) {\n    // If the string starts with \x270x\x27 or \x27-0x\x27, parse as hex.\n    return /^\\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);\n  }\n\n  return NaN;\n};\n\n\n/**\n * Splits a string on a separator a limited number of times.\n *\n * This implementation is more similar to Python or Java, where the limit\n * parameter specifies the maximum number of splits rather than truncating\n * the number of results.\n *\n * See http://docs.python.org/2/library/stdtypes.html#str.split\n * See JavaDoc: http://goo.gl/F2AsY\n * See Mozilla reference: http://goo.gl/dZdZs\n *\n * @param {string} str String to split.\n * @param {string} separator The separator.\n * @param {number} limit The limit to the number of splits. The resulting array\n *     will have a maximum length of limit+1.  Negative numbers are the same\n *     as zero.\n * @return {!Array\x3cstring\x3e} The string, split.\n */\ngoog.string.splitLimit \x3d function(str, separator, limit) {\n  var parts \x3d str.split(separator);\n  var returnVal \x3d [];\n\n  // Only continue doing this while we haven\x27t hit the limit and we have\n  // parts left.\n  while (limit \x3e 0 \x26\x26 parts.length) {\n    returnVal.push(parts.shift());\n    limit--;\n  }\n\n  // If there are remaining parts, append them to the end.\n  if (parts.length) {\n    returnVal.push(parts.join(separator));\n  }\n\n  return returnVal;\n};\n\n\n/**\n * Finds the characters to the right of the last instance of any separator\n *\n * This function is similar to goog.string.path.baseName, except it can take a\n * list of characters to split the string on. It will return the rightmost\n * grouping of characters to the right of any separator as a left-to-right\n * oriented string.\n *\n * @see goog.string.path.baseName\n * @param {string} str The string\n * @param {string|!Array\x3cstring\x3e} separators A list of separator characters\n * @return {string} The last part of the string with respect to the separators\n */\ngoog.string.lastComponent \x3d function(str, separators) {\n  if (!separators) {\n    return str;\n  } else if (typeof separators \x3d\x3d \x27string\x27) {\n    separators \x3d [separators];\n  }\n\n  var lastSeparatorIndex \x3d -1;\n  for (var i \x3d 0; i \x3c separators.length; i++) {\n    if (separators[i] \x3d\x3d \x27\x27) {\n      continue;\n    }\n    var currentSeparatorIndex \x3d str.lastIndexOf(separators[i]);\n    if (currentSeparatorIndex \x3e lastSeparatorIndex) {\n      lastSeparatorIndex \x3d currentSeparatorIndex;\n    }\n  }\n  if (lastSeparatorIndex \x3d\x3d -1) {\n    return str;\n  }\n  return str.slice(lastSeparatorIndex + 1);\n};\n\n\n/**\n * Computes the Levenshtein edit distance between two strings.\n * @param {string} a\n * @param {string} b\n * @return {number} The edit distance between the two strings.\n */\ngoog.string.editDistance \x3d function(a, b) {\n  var v0 \x3d [];\n  var v1 \x3d [];\n\n  if (a \x3d\x3d b) {\n    return 0;\n  }\n\n  if (!a.length || !b.length) {\n    return Math.max(a.length, b.length);\n  }\n\n  for (var i \x3d 0; i \x3c b.length + 1; i++) {\n    v0[i] \x3d i;\n  }\n\n  for (var i \x3d 0; i \x3c a.length; i++) {\n    v1[0] \x3d i + 1;\n\n    for (var j \x3d 0; j \x3c b.length; j++) {\n      var cost \x3d Number(a[i] !\x3d b[j]);\n      // Cost for the substring is the minimum of adding one character, removing\n      // one character, or a swap.\n      v1[j + 1] \x3d Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);\n    }\n\n    for (var j \x3d 0; j \x3c v0.length; j++) {\n      v0[j] \x3d v1[j];\n    }\n  }\n\n  return v1[b.length];\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/string/string.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/labs/useragent/util.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utilities used by goog.labs.userAgent tools. These functions\n * should not be used outside of goog.labs.userAgent.*.\n *\n * @visibility {//javascript/abc/libs/objects3d:__subpackages__}\n * @visibility {//javascript/closure/bin/sizetests:__pkg__}\n * @visibility {//javascript/closure/dom:__subpackages__}\n * @visibility {//javascript/closure/style:__pkg__}\n * @visibility {//javascript/closure/testing:__pkg__}\n * @visibility {//javascript/closure/useragent:__subpackages__}\n * @visibility {//testing/puppet/modules:__pkg__}\n * @visibility {:util_legacy_users}\n *\n * @author nnaze@google.com (Nathan Naze)\n */\n\ngoog.provide(\x27goog.labs.userAgent.util\x27);\n\ngoog.require(\x27goog.string\x27);\n\n\n/**\n * Gets the native userAgent string from navigator if it exists.\n * If navigator or navigator.userAgent string is missing, returns an empty\n * string.\n * @return {string}\n * @private\n */\ngoog.labs.userAgent.util.getNativeUserAgentString_ \x3d function() {\n  var navigator \x3d goog.labs.userAgent.util.getNavigator_();\n  if (navigator) {\n    var userAgent \x3d navigator.userAgent;\n    if (userAgent) {\n      return userAgent;\n    }\n  }\n  return \x27\x27;\n};\n\n\n/**\n * Getter for the native navigator.\n * This is a separate function so it can be stubbed out in testing.\n * @return {Navigator}\n * @private\n */\ngoog.labs.userAgent.util.getNavigator_ \x3d function() {\n  return goog.global.navigator;\n};\n\n\n/**\n * A possible override for applications which wish to not check\n * navigator.userAgent but use a specified value for detection instead.\n * @private {string}\n */\ngoog.labs.userAgent.util.userAgent_ \x3d\n    goog.labs.userAgent.util.getNativeUserAgentString_();\n\n\n/**\n * Applications may override browser detection on the built in\n * navigator.userAgent object by setting this string. Set to null to use the\n * browser object instead.\n * @param {?string\x3d} opt_userAgent The User-Agent override.\n */\ngoog.labs.userAgent.util.setUserAgent \x3d function(opt_userAgent) {\n  goog.labs.userAgent.util.userAgent_ \x3d\n      opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();\n};\n\n\n/**\n * @return {string} The user agent string.\n */\ngoog.labs.userAgent.util.getUserAgent \x3d function() {\n  return goog.labs.userAgent.util.userAgent_;\n};\n\n\n/**\n * @param {string} str\n * @return {boolean} Whether the user agent contains the given string.\n */\ngoog.labs.userAgent.util.matchUserAgent \x3d function(str) {\n  var userAgent \x3d goog.labs.userAgent.util.getUserAgent();\n  return goog.string.contains(userAgent, str);\n};\n\n\n/**\n * @param {string} str\n * @return {boolean} Whether the user agent contains the given string, ignoring\n *     case.\n */\ngoog.labs.userAgent.util.matchUserAgentIgnoreCase \x3d function(str) {\n  var userAgent \x3d goog.labs.userAgent.util.getUserAgent();\n  return goog.string.caseInsensitiveContains(userAgent, str);\n};\n\n\n/**\n * Parses the user agent into tuples for each section.\n * @param {string} userAgent\n * @return {!Array\x3c!Array\x3cstring\x3e\x3e} Tuples of key, version, and the contents\n *     of the parenthetical.\n */\ngoog.labs.userAgent.util.extractVersionTuples \x3d function(userAgent) {\n  // Matches each section of a user agent string.\n  // Example UA:\n  // Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us)\n  // AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405\n  // This has three version tuples: Mozilla, AppleWebKit, and Mobile.\n\n  var versionRegExp \x3d new RegExp(\n      // Key. Note that a key may have a space.\n      // (i.e. \x27Mobile Safari\x27 in \x27Mobile Safari/5.0\x27)\n      \x27(\\\\w[\\\\w ]+)\x27 +\n\n          \x27/\x27 +                // slash\n          \x27([^\\\\s]+)\x27 +        // version (i.e. \x275.0b\x27)\n          \x27\\\\s*\x27 +             // whitespace\n          \x27(?:\\\\((.*?)\\\\))?\x27,  // parenthetical info. parentheses not matched.\n      \x27g\x27);\n\n  var data \x3d [];\n  var match;\n\n  // Iterate and collect the version tuples.  Each iteration will be the\n  // next regex match.\n  while (match \x3d versionRegExp.exec(userAgent)) {\n    data.push([\n      match[1],  // key\n      match[2],  // value\n      // || undefined as this is not undefined in IE7 and IE8\n      match[3] || undefined  // info\n    ]);\n  }\n\n  return data;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/labs/useragent/util.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/object/object.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utilities for manipulating objects/maps/hashes.\n * @author pupius@google.com (Daniel Pupius)\n * @author arv@google.com (Erik Arvidsson)\n * @author pallosp@google.com (Peter Pallos)\n */\n\ngoog.provide(\x27goog.object\x27);\n\n\n/**\n * Whether two values are not observably distinguishable. This\n * correctly detects that 0 is not the same as -0 and two NaNs are\n * practically equivalent.\n *\n * The implementation is as suggested by harmony:egal proposal.\n *\n * @param {*} v The first value to compare.\n * @param {*} v2 The second value to compare.\n * @return {boolean} Whether two values are not observably distinguishable.\n * @see http://wiki.ecmascript.org/doku.php?id\x3dharmony:egal\n */\ngoog.object.is \x3d function(v, v2) {\n  if (v \x3d\x3d\x3d v2) {\n    // 0 \x3d\x3d\x3d -0, but they are not identical.\n    // We need the cast because the compiler requires that v2 is a\n    // number (although 1/v2 works with non-number). We cast to ? to\n    // stop the compiler from type-checking this statement.\n    return v !\x3d\x3d 0 || 1 / v \x3d\x3d\x3d 1 / /** @type {?} */ (v2);\n  }\n\n  // NaN is non-reflexive: NaN !\x3d\x3d NaN, although they are identical.\n  return v !\x3d\x3d v \x26\x26 v2 !\x3d\x3d v2;\n};\n\n\n/**\n * Calls a function for each element in an object/map/hash.\n *\n * @param {Object\x3cK,V\x3e} obj The object over which to iterate.\n * @param {function(this:T,V,?,Object\x3cK,V\x3e):?} f The function to call\n *     for every element. This function takes 3 arguments (the value, the\n *     key and the object) and the return value is ignored.\n * @param {T\x3d} opt_obj This is used as the \x27this\x27 object within f.\n * @template T,K,V\n */\ngoog.object.forEach \x3d function(obj, f, opt_obj) {\n  for (var key in obj) {\n    f.call(/** @type {?} */ (opt_obj), obj[key], key, obj);\n  }\n};\n\n\n/**\n * Calls a function for each element in an object/map/hash. If that call returns\n * true, adds the element to a new object.\n *\n * @param {Object\x3cK,V\x3e} obj The object over which to iterate.\n * @param {function(this:T,V,?,Object\x3cK,V\x3e):boolean} f The function to call\n *     for every element. This\n *     function takes 3 arguments (the value, the key and the object)\n *     and should return a boolean. If the return value is true the\n *     element is added to the result object. If it is false the\n *     element is not included.\n * @param {T\x3d} opt_obj This is used as the \x27this\x27 object within f.\n * @return {!Object\x3cK,V\x3e} a new object in which only elements that passed the\n *     test are present.\n * @template T,K,V\n */\ngoog.object.filter \x3d function(obj, f, opt_obj) {\n  var res \x3d {};\n  for (var key in obj) {\n    if (f.call(/** @type {?} */ (opt_obj), obj[key], key, obj)) {\n      res[key] \x3d obj[key];\n    }\n  }\n  return res;\n};\n\n\n/**\n * For every element in an object/map/hash calls a function and inserts the\n * result into a new object.\n *\n * @param {Object\x3cK,V\x3e} obj The object over which to iterate.\n * @param {function(this:T,V,?,Object\x3cK,V\x3e):R} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the value, the key and the object)\n *     and should return something. The result will be inserted\n *     into a new object.\n * @param {T\x3d} opt_obj This is used as the \x27this\x27 object within f.\n * @return {!Object\x3cK,R\x3e} a new object with the results from f.\n * @template T,K,V,R\n */\ngoog.object.map \x3d function(obj, f, opt_obj) {\n  var res \x3d {};\n  for (var key in obj) {\n    res[key] \x3d f.call(/** @type {?} */ (opt_obj), obj[key], key, obj);\n  }\n  return res;\n};\n\n\n/**\n * Calls a function for each element in an object/map/hash. If any\n * call returns true, returns true (without checking the rest). If\n * all calls return false, returns false.\n *\n * @param {Object\x3cK,V\x3e} obj The object to check.\n * @param {function(this:T,V,?,Object\x3cK,V\x3e):boolean} f The function to\n *     call for every element. This function\n *     takes 3 arguments (the value, the key and the object) and should\n *     return a boolean.\n * @param {T\x3d} opt_obj This is used as the \x27this\x27 object within f.\n * @return {boolean} true if any element passes the test.\n * @template T,K,V\n */\ngoog.object.some \x3d function(obj, f, opt_obj) {\n  for (var key in obj) {\n    if (f.call(/** @type {?} */ (opt_obj), obj[key], key, obj)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Calls a function for each element in an object/map/hash. If\n * all calls return true, returns true. If any call returns false, returns\n * false at this point and does not continue to check the remaining elements.\n *\n * @param {Object\x3cK,V\x3e} obj The object to check.\n * @param {?function(this:T,V,?,Object\x3cK,V\x3e):boolean} f The function to\n *     call for every element. This function\n *     takes 3 arguments (the value, the key and the object) and should\n *     return a boolean.\n * @param {T\x3d} opt_obj This is used as the \x27this\x27 object within f.\n * @return {boolean} false if any element fails the test.\n * @template T,K,V\n */\ngoog.object.every \x3d function(obj, f, opt_obj) {\n  for (var key in obj) {\n    if (!f.call(/** @type {?} */ (opt_obj), obj[key], key, obj)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * Returns the number of key-value pairs in the object map.\n *\n * @param {Object} obj The object for which to get the number of key-value\n *     pairs.\n * @return {number} The number of key-value pairs in the object map.\n */\ngoog.object.getCount \x3d function(obj) {\n  var rv \x3d 0;\n  for (var key in obj) {\n    rv++;\n  }\n  return rv;\n};\n\n\n/**\n * Returns one key from the object map, if any exists.\n * For map literals the returned key will be the first one in most of the\n * browsers (a know exception is Konqueror).\n *\n * @param {Object} obj The object to pick a key from.\n * @return {string|undefined} The key or undefined if the object is empty.\n */\ngoog.object.getAnyKey \x3d function(obj) {\n  for (var key in obj) {\n    return key;\n  }\n};\n\n\n/**\n * Returns one value from the object map, if any exists.\n * For map literals the returned value will be the first one in most of the\n * browsers (a know exception is Konqueror).\n *\n * @param {Object\x3cK,V\x3e} obj The object to pick a value from.\n * @return {V|undefined} The value or undefined if the object is empty.\n * @template K,V\n */\ngoog.object.getAnyValue \x3d function(obj) {\n  for (var key in obj) {\n    return obj[key];\n  }\n};\n\n\n/**\n * Whether the object/hash/map contains the given object as a value.\n * An alias for goog.object.containsValue(obj, val).\n *\n * @param {Object\x3cK,V\x3e} obj The object in which to look for val.\n * @param {V} val The object for which to check.\n * @return {boolean} true if val is present.\n * @template K,V\n */\ngoog.object.contains \x3d function(obj, val) {\n  return goog.object.containsValue(obj, val);\n};\n\n\n/**\n * Returns the values of the object/map/hash.\n *\n * @param {Object\x3cK,V\x3e} obj The object from which to get the values.\n * @return {!Array\x3cV\x3e} The values in the object/map/hash.\n * @template K,V\n */\ngoog.object.getValues \x3d function(obj) {\n  var res \x3d [];\n  var i \x3d 0;\n  for (var key in obj) {\n    res[i++] \x3d obj[key];\n  }\n  return res;\n};\n\n\n/**\n * Returns the keys of the object/map/hash.\n *\n * @param {Object} obj The object from which to get the keys.\n * @return {!Array\x3cstring\x3e} Array of property keys.\n */\ngoog.object.getKeys \x3d function(obj) {\n  var res \x3d [];\n  var i \x3d 0;\n  for (var key in obj) {\n    res[i++] \x3d key;\n  }\n  return res;\n};\n\n\n/**\n * Get a value from an object multiple levels deep.  This is useful for\n * pulling values from deeply nested objects, such as JSON responses.\n * Example usage: getValueByKeys(jsonObj, \x27foo\x27, \x27entries\x27, 3)\n *\n * @param {!Object} obj An object to get the value from.  Can be array-like.\n * @param {...(string|number|!IArrayLike\x3cnumber|string\x3e)}\n *     var_args A number of keys\n *     (as strings, or numbers, for array-like objects).  Can also be\n *     specified as a single array of keys.\n * @return {*} The resulting value.  If, at any point, the value for a key\n *     in the current object is null or undefined, returns undefined.\n */\ngoog.object.getValueByKeys \x3d function(obj, var_args) {\n  var isArrayLike \x3d goog.isArrayLike(var_args);\n  var keys \x3d isArrayLike ?\n      /** @type {!IArrayLike\x3cnumber|string\x3e} */ (var_args) :\n      arguments;\n\n  // Start with the 2nd parameter for the variable parameters syntax.\n  for (var i \x3d isArrayLike ? 0 : 1; i \x3c keys.length; i++) {\n    if (obj \x3d\x3d null) return undefined;\n    obj \x3d obj[keys[i]];\n  }\n\n  return obj;\n};\n\n\n/**\n * Whether the object/map/hash contains the given key.\n *\n * @param {Object} obj The object in which to look for key.\n * @param {?} key The key for which to check.\n * @return {boolean} true If the map contains the key.\n */\ngoog.object.containsKey \x3d function(obj, key) {\n  return obj !\x3d\x3d null \x26\x26 key in obj;\n};\n\n\n/**\n * Whether the object/map/hash contains the given value. This is O(n).\n *\n * @param {Object\x3cK,V\x3e} obj The object in which to look for val.\n * @param {V} val The value for which to check.\n * @return {boolean} true If the map contains the value.\n * @template K,V\n */\ngoog.object.containsValue \x3d function(obj, val) {\n  for (var key in obj) {\n    if (obj[key] \x3d\x3d val) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Searches an object for an element that satisfies the given condition and\n * returns its key.\n * @param {Object\x3cK,V\x3e} obj The object to search in.\n * @param {function(this:T,V,string,Object\x3cK,V\x3e):boolean} f The\n *      function to call for every element. Takes 3 arguments (the value,\n *     the key and the object) and should return a boolean.\n * @param {T\x3d} opt_this An optional \x22this\x22 context for the function.\n * @return {string|undefined} The key of an element for which the function\n *     returns true or undefined if no such element is found.\n * @template T,K,V\n */\ngoog.object.findKey \x3d function(obj, f, opt_this) {\n  for (var key in obj) {\n    if (f.call(/** @type {?} */ (opt_this), obj[key], key, obj)) {\n      return key;\n    }\n  }\n  return undefined;\n};\n\n\n/**\n * Searches an object for an element that satisfies the given condition and\n * returns its value.\n * @param {Object\x3cK,V\x3e} obj The object to search in.\n * @param {function(this:T,V,string,Object\x3cK,V\x3e):boolean} f The function\n *     to call for every element. Takes 3 arguments (the value, the key\n *     and the object) and should return a boolean.\n * @param {T\x3d} opt_this An optional \x22this\x22 context for the function.\n * @return {V} The value of an element for which the function returns true or\n *     undefined if no such element is found.\n * @template T,K,V\n */\ngoog.object.findValue \x3d function(obj, f, opt_this) {\n  var key \x3d goog.object.findKey(obj, f, opt_this);\n  return key \x26\x26 obj[key];\n};\n\n\n/**\n * Whether the object/map/hash is empty.\n *\n * @param {Object} obj The object to test.\n * @return {boolean} true if obj is empty.\n */\ngoog.object.isEmpty \x3d function(obj) {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\n\n/**\n * Removes all key value pairs from the object/map/hash.\n *\n * @param {Object} obj The object to clear.\n */\ngoog.object.clear \x3d function(obj) {\n  for (var i in obj) {\n    delete obj[i];\n  }\n};\n\n\n/**\n * Removes a key-value pair based on the key.\n *\n * @param {Object} obj The object from which to remove the key.\n * @param {?} key The key to remove.\n * @return {boolean} Whether an element was removed.\n */\ngoog.object.remove \x3d function(obj, key) {\n  var rv;\n  if (rv \x3d key in /** @type {!Object} */ (obj)) {\n    delete obj[key];\n  }\n  return rv;\n};\n\n\n/**\n * Adds a key-value pair to the object. Throws an exception if the key is\n * already in use. Use set if you want to change an existing pair.\n *\n * @param {Object\x3cK,V\x3e} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {V} val The value to add.\n * @template K,V\n */\ngoog.object.add \x3d function(obj, key, val) {\n  if (obj !\x3d\x3d null \x26\x26 key in obj) {\n    throw new Error(\x27The object already contains the key \x22\x27 + key + \x27\x22\x27);\n  }\n  goog.object.set(obj, key, val);\n};\n\n\n/**\n * Returns the value for the given key.\n *\n * @param {Object\x3cK,V\x3e} obj The object from which to get the value.\n * @param {string} key The key for which to get the value.\n * @param {R\x3d} opt_val The value to return if no item is found for the given\n *     key (default is undefined).\n * @return {V|R|undefined} The value for the given key.\n * @template K,V,R\n */\ngoog.object.get \x3d function(obj, key, opt_val) {\n  if (obj !\x3d\x3d null \x26\x26 key in obj) {\n    return obj[key];\n  }\n  return opt_val;\n};\n\n\n/**\n * Adds a key-value pair to the object/map/hash.\n *\n * @param {Object\x3cK,V\x3e} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {V} value The value to add.\n * @template K,V\n */\ngoog.object.set \x3d function(obj, key, value) {\n  obj[key] \x3d value;\n};\n\n\n/**\n * Adds a key-value pair to the object/map/hash if it doesn\x27t exist yet.\n *\n * @param {Object\x3cK,V\x3e} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {V} value The value to add if the key wasn\x27t present.\n * @return {V} The value of the entry at the end of the function.\n * @template K,V\n */\ngoog.object.setIfUndefined \x3d function(obj, key, value) {\n  return key in /** @type {!Object} */ (obj) ? obj[key] : (obj[key] \x3d value);\n};\n\n\n/**\n * Sets a key and value to an object if the key is not set. The value will be\n * the return value of the given function. If the key already exists, the\n * object will not be changed and the function will not be called (the function\n * will be lazily evaluated -- only called if necessary).\n *\n * This function is particularly useful for use with a map used a as a cache.\n *\n * @param {!Object\x3cK,V\x3e} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {function():V} f The value to add if the key wasn\x27t present.\n * @return {V} The value of the entry at the end of the function.\n * @template K,V\n */\ngoog.object.setWithReturnValueIfNotSet \x3d function(obj, key, f) {\n  if (key in obj) {\n    return obj[key];\n  }\n\n  var val \x3d f();\n  obj[key] \x3d val;\n  return val;\n};\n\n\n/**\n * Compares two objects for equality using \x3d\x3d\x3d on the values.\n *\n * @param {!Object\x3cK,V\x3e} a\n * @param {!Object\x3cK,V\x3e} b\n * @return {boolean}\n * @template K,V\n */\ngoog.object.equals \x3d function(a, b) {\n  for (var k in a) {\n    if (!(k in b) || a[k] !\x3d\x3d b[k]) {\n      return false;\n    }\n  }\n  for (var k in b) {\n    if (!(k in a)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * Returns a shallow clone of the object.\n *\n * @param {Object\x3cK,V\x3e} obj Object to clone.\n * @return {!Object\x3cK,V\x3e} Clone of the input object.\n * @template K,V\n */\ngoog.object.clone \x3d function(obj) {\n  // We cannot use the prototype trick because a lot of methods depend on where\n  // the actual key is set.\n\n  var res \x3d {};\n  for (var key in obj) {\n    res[key] \x3d obj[key];\n  }\n  return res;\n  // We could also use goog.mixin but I wanted this to be independent from that.\n};\n\n\n/**\n * Clones a value. The input may be an Object, Array, or basic type. Objects and\n * arrays will be cloned recursively.\n *\n * WARNINGS:\n * \x3ccode\x3egoog.object.unsafeClone\x3c/code\x3e does not detect reference loops. Objects\n * that refer to themselves will cause infinite recursion.\n *\n * \x3ccode\x3egoog.object.unsafeClone\x3c/code\x3e is unaware of unique identifiers, and\n * copies UIDs created by \x3ccode\x3egetUid\x3c/code\x3e into cloned results.\n *\n * @param {T} obj The value to clone.\n * @return {T} A clone of the input value.\n * @template T\n */\ngoog.object.unsafeClone \x3d function(obj) {\n  var type \x3d goog.typeOf(obj);\n  if (type \x3d\x3d \x27object\x27 || type \x3d\x3d \x27array\x27) {\n    if (goog.isFunction(obj.clone)) {\n      return obj.clone();\n    }\n    var clone \x3d type \x3d\x3d \x27array\x27 ? [] : {};\n    for (var key in obj) {\n      clone[key] \x3d goog.object.unsafeClone(obj[key]);\n    }\n    return clone;\n  }\n\n  return obj;\n};\n\n\n/**\n * Returns a new object in which all the keys and values are interchanged\n * (keys become values and values become keys). If multiple keys map to the\n * same value, the chosen transposed value is implementation-dependent.\n *\n * @param {Object} obj The object to transpose.\n * @return {!Object} The transposed object.\n */\ngoog.object.transpose \x3d function(obj) {\n  var transposed \x3d {};\n  for (var key in obj) {\n    transposed[obj[key]] \x3d key;\n  }\n  return transposed;\n};\n\n\n/**\n * The names of the fields that are defined on Object.prototype.\n * @type {Array\x3cstring\x3e}\n * @private\n */\ngoog.object.PROTOTYPE_FIELDS_ \x3d [\n  \x27constructor\x27, \x27hasOwnProperty\x27, \x27isPrototypeOf\x27, \x27propertyIsEnumerable\x27,\n  \x27toLocaleString\x27, \x27toString\x27, \x27valueOf\x27\n];\n\n\n/**\n * Extends an object with another object.\n * This operates \x27in-place\x27; it does not create a new Object.\n *\n * Example:\n * var o \x3d {};\n * goog.object.extend(o, {a: 0, b: 1});\n * o; // {a: 0, b: 1}\n * goog.object.extend(o, {b: 2, c: 3});\n * o; // {a: 0, b: 2, c: 3}\n *\n * @param {Object} target The object to modify. Existing properties will be\n *     overwritten if they are also present in one of the objects in\n *     `var_args`.\n * @param {...Object} var_args The objects from which values will be copied.\n */\ngoog.object.extend \x3d function(target, var_args) {\n  var key, source;\n  for (var i \x3d 1; i \x3c arguments.length; i++) {\n    source \x3d arguments[i];\n    for (key in source) {\n      target[key] \x3d source[key];\n    }\n\n    // For IE the for-in-loop does not contain any properties that are not\n    // enumerable on the prototype object (for example isPrototypeOf from\n    // Object.prototype) and it will also not include \x27replace\x27 on objects that\n    // extend String and change \x27replace\x27 (not that it is common for anyone to\n    // extend anything except Object).\n\n    for (var j \x3d 0; j \x3c goog.object.PROTOTYPE_FIELDS_.length; j++) {\n      key \x3d goog.object.PROTOTYPE_FIELDS_[j];\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] \x3d source[key];\n      }\n    }\n  }\n};\n\n\n/**\n * Creates a new object built from the key-value pairs provided as arguments.\n * @param {...*} var_args If only one argument is provided and it is an array\n *     then this is used as the arguments, otherwise even arguments are used as\n *     the property names and odd arguments are used as the property values.\n * @return {!Object} The new object.\n * @throws {Error} If there are uneven number of arguments or there is only one\n *     non array argument.\n */\ngoog.object.create \x3d function(var_args) {\n  var argLength \x3d arguments.length;\n  if (argLength \x3d\x3d 1 \x26\x26 goog.isArray(arguments[0])) {\n    return goog.object.create.apply(null, arguments[0]);\n  }\n\n  if (argLength % 2) {\n    throw new Error(\x27Uneven number of arguments\x27);\n  }\n\n  var rv \x3d {};\n  for (var i \x3d 0; i \x3c argLength; i +\x3d 2) {\n    rv[arguments[i]] \x3d arguments[i + 1];\n  }\n  return rv;\n};\n\n\n/**\n * Creates a new object where the property names come from the arguments but\n * the value is always set to true\n * @param {...*} var_args If only one argument is provided and it is an array\n *     then this is used as the arguments, otherwise the arguments are used\n *     as the property names.\n * @return {!Object} The new object.\n */\ngoog.object.createSet \x3d function(var_args) {\n  var argLength \x3d arguments.length;\n  if (argLength \x3d\x3d 1 \x26\x26 goog.isArray(arguments[0])) {\n    return goog.object.createSet.apply(null, arguments[0]);\n  }\n\n  var rv \x3d {};\n  for (var i \x3d 0; i \x3c argLength; i++) {\n    rv[arguments[i]] \x3d true;\n  }\n  return rv;\n};\n\n\n/**\n * Creates an immutable view of the underlying object, if the browser\n * supports immutable objects.\n *\n * In default mode, writes to this view will fail silently. In strict mode,\n * they will throw an error.\n *\n * @param {!Object\x3cK,V\x3e} obj An object.\n * @return {!Object\x3cK,V\x3e} An immutable view of that object, or the\n *     original object if this browser does not support immutables.\n * @template K,V\n */\ngoog.object.createImmutableView \x3d function(obj) {\n  var result \x3d obj;\n  if (Object.isFrozen \x26\x26 !Object.isFrozen(obj)) {\n    result \x3d Object.create(obj);\n    Object.freeze(result);\n  }\n  return result;\n};\n\n\n/**\n * @param {!Object} obj An object.\n * @return {boolean} Whether this is an immutable view of the object.\n */\ngoog.object.isImmutableView \x3d function(obj) {\n  return !!Object.isFrozen \x26\x26 Object.isFrozen(obj);\n};\n\n\n/**\n * Get all properties names on a given Object regardless of enumerability.\n *\n * \x3cp\x3e If the browser does not support `Object.getOwnPropertyNames` nor\n * `Object.getPrototypeOf` then this is equivalent to using\n * `goog.object.getKeys`\n *\n * @param {?Object} obj The object to get the properties of.\n * @param {boolean\x3d} opt_includeObjectPrototype Whether properties defined on\n *     `Object.prototype` should be included in the result.\n * @param {boolean\x3d} opt_includeFunctionPrototype Whether properties defined on\n *     `Function.prototype` should be included in the result.\n * @return {!Array\x3cstring\x3e}\n * @public\n */\ngoog.object.getAllPropertyNames \x3d function(\n    obj, opt_includeObjectPrototype, opt_includeFunctionPrototype) {\n  if (!obj) {\n    return [];\n  }\n\n  // Naively use a for..in loop to get the property names if the browser doesn\x27t\n  // support any other APIs for getting it.\n  if (!Object.getOwnPropertyNames || !Object.getPrototypeOf) {\n    return goog.object.getKeys(obj);\n  }\n\n  var visitedSet \x3d {};\n\n  // Traverse the prototype chain and add all properties to the visited set.\n  var proto \x3d obj;\n  while (proto \x26\x26\n         (proto !\x3d\x3d Object.prototype || !!opt_includeObjectPrototype) \x26\x26\n         (proto !\x3d\x3d Function.prototype || !!opt_includeFunctionPrototype)) {\n    var names \x3d Object.getOwnPropertyNames(proto);\n    for (var i \x3d 0; i \x3c names.length; i++) {\n      visitedSet[names[i]] \x3d true;\n    }\n    proto \x3d Object.getPrototypeOf(proto);\n  }\n\n  return goog.object.getKeys(visitedSet);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/object/object.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/labs/useragent/browser.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Closure user agent detection (Browser).\n * @see \x3ca href\x3d\x22http://www.useragentstring.com/\x22\x3eUser agent strings\x3c/a\x3e\n * For more information on rendering engine, platform, or device see the other\n * sub-namespaces in goog.labs.userAgent, goog.labs.userAgent.platform,\n * goog.labs.userAgent.device respectively.)\n *\n * @author vbhasin@google.com (Vipul Bhasin)\n * @author martone@google.com (Andy Martone)\n */\n\ngoog.provide(\x27goog.labs.userAgent.browser\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.labs.userAgent.util\x27);\ngoog.require(\x27goog.object\x27);\ngoog.require(\x27goog.string\x27);\n\n\n// TODO(nnaze): Refactor to remove excessive exclusion logic in matching\n// functions.\n\n\n/**\n * @return {boolean} Whether the user\x27s browser is Opera.  Note: Chromium\n *     based Opera (Opera 15+) is detected as Chrome to avoid unnecessary\n *     special casing.\n * @private\n */\ngoog.labs.userAgent.browser.matchOpera_ \x3d function() {\n  return goog.labs.userAgent.util.matchUserAgent(\x27Opera\x27);\n};\n\n\n/**\n * @return {boolean} Whether the user\x27s browser is IE.\n * @private\n */\ngoog.labs.userAgent.browser.matchIE_ \x3d function() {\n  return goog.labs.userAgent.util.matchUserAgent(\x27Trident\x27) ||\n      goog.labs.userAgent.util.matchUserAgent(\x27MSIE\x27);\n};\n\n\n/**\n * @return {boolean} Whether the user\x27s browser is Edge.\n * @private\n */\ngoog.labs.userAgent.browser.matchEdge_ \x3d function() {\n  return goog.labs.userAgent.util.matchUserAgent(\x27Edge\x27);\n};\n\n\n/**\n * @return {boolean} Whether the user\x27s browser is Firefox.\n * @private\n */\ngoog.labs.userAgent.browser.matchFirefox_ \x3d function() {\n  return goog.labs.userAgent.util.matchUserAgent(\x27Firefox\x27);\n};\n\n\n/**\n * @return {boolean} Whether the user\x27s browser is Safari.\n * @private\n */\ngoog.labs.userAgent.browser.matchSafari_ \x3d function() {\n  return goog.labs.userAgent.util.matchUserAgent(\x27Safari\x27) \x26\x26\n      !(goog.labs.userAgent.browser.matchChrome_() ||\n        goog.labs.userAgent.browser.matchCoast_() ||\n        goog.labs.userAgent.browser.matchOpera_() ||\n        goog.labs.userAgent.browser.matchEdge_() ||\n        goog.labs.userAgent.browser.isSilk() ||\n        goog.labs.userAgent.util.matchUserAgent(\x27Android\x27));\n};\n\n\n/**\n * @return {boolean} Whether the user\x27s browser is Coast (Opera\x27s Webkit-based\n *     iOS browser).\n * @private\n */\ngoog.labs.userAgent.browser.matchCoast_ \x3d function() {\n  return goog.labs.userAgent.util.matchUserAgent(\x27Coast\x27);\n};\n\n\n/**\n * @return {boolean} Whether the user\x27s browser is iOS Webview.\n * @private\n */\ngoog.labs.userAgent.browser.matchIosWebview_ \x3d function() {\n  // iOS Webview does not show up as Chrome or Safari. Also check for Opera\x27s\n  // WebKit-based iOS browser, Coast.\n  return (goog.labs.userAgent.util.matchUserAgent(\x27iPad\x27) ||\n          goog.labs.userAgent.util.matchUserAgent(\x27iPhone\x27)) \x26\x26\n      !goog.labs.userAgent.browser.matchSafari_() \x26\x26\n      !goog.labs.userAgent.browser.matchChrome_() \x26\x26\n      !goog.labs.userAgent.browser.matchCoast_() \x26\x26\n      goog.labs.userAgent.util.matchUserAgent(\x27AppleWebKit\x27);\n};\n\n\n/**\n * @return {boolean} Whether the user\x27s browser is Chrome.\n * @private\n */\ngoog.labs.userAgent.browser.matchChrome_ \x3d function() {\n  return (goog.labs.userAgent.util.matchUserAgent(\x27Chrome\x27) ||\n          goog.labs.userAgent.util.matchUserAgent(\x27CriOS\x27)) \x26\x26\n      !goog.labs.userAgent.browser.matchEdge_();\n};\n\n\n/**\n * @return {boolean} Whether the user\x27s browser is the Android browser.\n * @private\n */\ngoog.labs.userAgent.browser.matchAndroidBrowser_ \x3d function() {\n  // Android can appear in the user agent string for Chrome on Android.\n  // This is not the Android standalone browser if it does.\n  return goog.labs.userAgent.util.matchUserAgent(\x27Android\x27) \x26\x26\n      !(goog.labs.userAgent.browser.isChrome() ||\n        goog.labs.userAgent.browser.isFirefox() ||\n        goog.labs.userAgent.browser.isOpera() ||\n        goog.labs.userAgent.browser.isSilk());\n};\n\n\n/**\n * @return {boolean} Whether the user\x27s browser is Opera.\n */\ngoog.labs.userAgent.browser.isOpera \x3d goog.labs.userAgent.browser.matchOpera_;\n\n\n/**\n * @return {boolean} Whether the user\x27s browser is IE.\n */\ngoog.labs.userAgent.browser.isIE \x3d goog.labs.userAgent.browser.matchIE_;\n\n\n/**\n * @return {boolean} Whether the user\x27s browser is Edge.\n */\ngoog.labs.userAgent.browser.isEdge \x3d goog.labs.userAgent.browser.matchEdge_;\n\n\n/**\n * @return {boolean} Whether the user\x27s browser is Firefox.\n */\ngoog.labs.userAgent.browser.isFirefox \x3d\n    goog.labs.userAgent.browser.matchFirefox_;\n\n\n/**\n * @return {boolean} Whether the user\x27s browser is Safari.\n */\ngoog.labs.userAgent.browser.isSafari \x3d goog.labs.userAgent.browser.matchSafari_;\n\n\n/**\n * @return {boolean} Whether the user\x27s browser is Coast (Opera\x27s Webkit-based\n *     iOS browser).\n */\ngoog.labs.userAgent.browser.isCoast \x3d goog.labs.userAgent.browser.matchCoast_;\n\n\n/**\n * @return {boolean} Whether the user\x27s browser is iOS Webview.\n */\ngoog.labs.userAgent.browser.isIosWebview \x3d\n    goog.labs.userAgent.browser.matchIosWebview_;\n\n\n/**\n * @return {boolean} Whether the user\x27s browser is Chrome.\n */\ngoog.labs.userAgent.browser.isChrome \x3d goog.labs.userAgent.browser.matchChrome_;\n\n\n/**\n * @return {boolean} Whether the user\x27s browser is the Android browser.\n */\ngoog.labs.userAgent.browser.isAndroidBrowser \x3d\n    goog.labs.userAgent.browser.matchAndroidBrowser_;\n\n\n/**\n * For more information, see:\n * http://docs.aws.amazon.com/silk/latest/developerguide/user-agent.html\n * @return {boolean} Whether the user\x27s browser is Silk.\n */\ngoog.labs.userAgent.browser.isSilk \x3d function() {\n  return goog.labs.userAgent.util.matchUserAgent(\x27Silk\x27);\n};\n\n\n/**\n * @return {string} The browser version or empty string if version cannot be\n *     determined. Note that for Internet Explorer, this returns the version of\n *     the browser, not the version of the rendering engine. (IE 8 in\n *     compatibility mode will return 8.0 rather than 7.0. To determine the\n *     rendering engine version, look at document.documentMode instead. See\n *     http://msdn.microsoft.com/en-us/library/cc196988(v\x3dvs.85).aspx for more\n *     details.)\n */\ngoog.labs.userAgent.browser.getVersion \x3d function() {\n  var userAgentString \x3d goog.labs.userAgent.util.getUserAgent();\n  // Special case IE since IE\x27s version is inside the parenthesis and\n  // without the \x27/\x27.\n  if (goog.labs.userAgent.browser.isIE()) {\n    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);\n  }\n\n  var versionTuples \x3d\n      goog.labs.userAgent.util.extractVersionTuples(userAgentString);\n\n  // Construct a map for easy lookup.\n  var versionMap \x3d {};\n  goog.array.forEach(versionTuples, function(tuple) {\n    // Note that the tuple is of length three, but we only care about the\n    // first two.\n    var key \x3d tuple[0];\n    var value \x3d tuple[1];\n    versionMap[key] \x3d value;\n  });\n\n  var versionMapHasKey \x3d goog.partial(goog.object.containsKey, versionMap);\n\n  // Gives the value with the first key it finds, otherwise empty string.\n  function lookUpValueWithKeys(keys) {\n    var key \x3d goog.array.find(keys, versionMapHasKey);\n    return versionMap[key] || \x27\x27;\n  }\n\n  // Check Opera before Chrome since Opera 15+ has \x22Chrome\x22 in the string.\n  // See\n  // http://my.opera.com/ODIN/blog/2013/07/15/opera-user-agent-strings-opera-15-and-beyond\n  if (goog.labs.userAgent.browser.isOpera()) {\n    // Opera 10 has Version/10.0 but Opera/9.8, so look for \x22Version\x22 first.\n    // Opera uses \x27OPR\x27 for more recent UAs.\n    return lookUpValueWithKeys([\x27Version\x27, \x27Opera\x27]);\n  }\n\n  // Check Edge before Chrome since it has Chrome in the string.\n  if (goog.labs.userAgent.browser.isEdge()) {\n    return lookUpValueWithKeys([\x27Edge\x27]);\n  }\n\n  if (goog.labs.userAgent.browser.isChrome()) {\n    return lookUpValueWithKeys([\x27Chrome\x27, \x27CriOS\x27]);\n  }\n\n  // Usually products browser versions are in the third tuple after \x22Mozilla\x22\n  // and the engine.\n  var tuple \x3d versionTuples[2];\n  return tuple \x26\x26 tuple[1] || \x27\x27;\n};\n\n\n/**\n * @param {string|number} version The version to check.\n * @return {boolean} Whether the browser version is higher or the same as the\n *     given version.\n */\ngoog.labs.userAgent.browser.isVersionOrHigher \x3d function(version) {\n  return goog.string.compareVersions(\n             goog.labs.userAgent.browser.getVersion(), version) \x3e\x3d 0;\n};\n\n\n/**\n * Determines IE version. More information:\n * http://msdn.microsoft.com/en-us/library/ie/bg182625(v\x3dvs.85).aspx#uaString\n * http://msdn.microsoft.com/en-us/library/hh869301(v\x3dvs.85).aspx\n * http://blogs.msdn.com/b/ie/archive/2010/03/23/introducing-ie9-s-user-agent-string.aspx\n * http://blogs.msdn.com/b/ie/archive/2009/01/09/the-internet-explorer-8-user-agent-string-updated-edition.aspx\n *\n * @param {string} userAgent the User-Agent.\n * @return {string}\n * @private\n */\ngoog.labs.userAgent.browser.getIEVersion_ \x3d function(userAgent) {\n  // IE11 may identify itself as MSIE 9.0 or MSIE 10.0 due to an IE 11 upgrade\n  // bug. Example UA:\n  // Mozilla/5.0 (MSIE 9.0; Windows NT 6.1; WOW64; Trident/7.0; rv:11.0)\n  // like Gecko.\n  // See http://www.whatismybrowser.com/developers/unknown-user-agent-fragments.\n  var rv \x3d /rv: *([\\d\\.]*)/.exec(userAgent);\n  if (rv \x26\x26 rv[1]) {\n    return rv[1];\n  }\n\n  var version \x3d \x27\x27;\n  var msie \x3d /MSIE +([\\d\\.]+)/.exec(userAgent);\n  if (msie \x26\x26 msie[1]) {\n    // IE in compatibility mode usually identifies itself as MSIE 7.0; in this\n    // case, use the Trident version to determine the version of IE. For more\n    // details, see the links above.\n    var tridentVersion \x3d /Trident\\/(\\d.\\d)/.exec(userAgent);\n    if (msie[1] \x3d\x3d \x277.0\x27) {\n      if (tridentVersion \x26\x26 tridentVersion[1]) {\n        switch (tridentVersion[1]) {\n          case \x274.0\x27:\n            version \x3d \x278.0\x27;\n            break;\n          case \x275.0\x27:\n            version \x3d \x279.0\x27;\n            break;\n          case \x276.0\x27:\n            version \x3d \x2710.0\x27;\n            break;\n          case \x277.0\x27:\n            version \x3d \x2711.0\x27;\n            break;\n        }\n      } else {\n        version \x3d \x277.0\x27;\n      }\n    } else {\n      version \x3d msie[1];\n    }\n  }\n  return version;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/labs/useragent/browser.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/labs/useragent/platform.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Closure user agent platform detection.\n * @see \x3ca href\x3d\x22http://www.useragentstring.com/\x22\x3eUser agent strings\x3c/a\x3e\n * For more information on browser brand, rendering engine, or device see the\n * other sub-namespaces in goog.labs.userAgent (browser, engine, and device\n * respectively).\n *\n * @author vbhasin@google.com (Vipul Bhasin)\n */\n\ngoog.provide(\x27goog.labs.userAgent.platform\x27);\n\ngoog.require(\x27goog.labs.userAgent.util\x27);\ngoog.require(\x27goog.string\x27);\n\n\n/**\n * @return {boolean} Whether the platform is Android.\n */\ngoog.labs.userAgent.platform.isAndroid \x3d function() {\n  return goog.labs.userAgent.util.matchUserAgent(\x27Android\x27);\n};\n\n\n/**\n * @return {boolean} Whether the platform is iPod.\n */\ngoog.labs.userAgent.platform.isIpod \x3d function() {\n  return goog.labs.userAgent.util.matchUserAgent(\x27iPod\x27);\n};\n\n\n/**\n * @return {boolean} Whether the platform is iPhone.\n */\ngoog.labs.userAgent.platform.isIphone \x3d function() {\n  return goog.labs.userAgent.util.matchUserAgent(\x27iPhone\x27) \x26\x26\n      !goog.labs.userAgent.util.matchUserAgent(\x27iPod\x27) \x26\x26\n      !goog.labs.userAgent.util.matchUserAgent(\x27iPad\x27);\n};\n\n\n/**\n * @return {boolean} Whether the platform is iPad.\n */\ngoog.labs.userAgent.platform.isIpad \x3d function() {\n  return goog.labs.userAgent.util.matchUserAgent(\x27iPad\x27);\n};\n\n\n/**\n * @return {boolean} Whether the platform is iOS.\n */\ngoog.labs.userAgent.platform.isIos \x3d function() {\n  return goog.labs.userAgent.platform.isIphone() ||\n      goog.labs.userAgent.platform.isIpad() ||\n      goog.labs.userAgent.platform.isIpod();\n};\n\n\n/**\n * @return {boolean} Whether the platform is Mac.\n */\ngoog.labs.userAgent.platform.isMacintosh \x3d function() {\n  return goog.labs.userAgent.util.matchUserAgent(\x27Macintosh\x27);\n};\n\n\n/**\n * Note: ChromeOS is not considered to be Linux as it does not report itself\n * as Linux in the user agent string.\n * @return {boolean} Whether the platform is Linux.\n */\ngoog.labs.userAgent.platform.isLinux \x3d function() {\n  return goog.labs.userAgent.util.matchUserAgent(\x27Linux\x27);\n};\n\n\n/**\n * @return {boolean} Whether the platform is Windows.\n */\ngoog.labs.userAgent.platform.isWindows \x3d function() {\n  return goog.labs.userAgent.util.matchUserAgent(\x27Windows\x27);\n};\n\n\n/**\n * @return {boolean} Whether the platform is ChromeOS.\n */\ngoog.labs.userAgent.platform.isChromeOS \x3d function() {\n  return goog.labs.userAgent.util.matchUserAgent(\x27CrOS\x27);\n};\n\n/**\n * @return {boolean} Whether the platform is Chromecast.\n */\ngoog.labs.userAgent.platform.isChromecast \x3d function() {\n  return goog.labs.userAgent.util.matchUserAgent(\x27CrKey\x27);\n};\n\n/**\n * The version of the platform. We only determine the version for Windows,\n * Mac, and Chrome OS. It doesn\x27t make much sense on Linux. For Windows, we only\n * look at the NT version. Non-NT-based versions (e.g. 95, 98, etc.) are given\n * version 0.0.\n *\n * @return {string} The platform version or empty string if version cannot be\n *     determined.\n */\ngoog.labs.userAgent.platform.getVersion \x3d function() {\n  var userAgentString \x3d goog.labs.userAgent.util.getUserAgent();\n  var version \x3d \x27\x27, re;\n  if (goog.labs.userAgent.platform.isWindows()) {\n    re \x3d /Windows (?:NT|Phone) ([0-9.]+)/;\n    var match \x3d re.exec(userAgentString);\n    if (match) {\n      version \x3d match[1];\n    } else {\n      version \x3d \x270.0\x27;\n    }\n  } else if (goog.labs.userAgent.platform.isIos()) {\n    re \x3d /(?:iPhone|iPod|iPad|CPU)\\s+OS\\s+(\\S+)/;\n    var match \x3d re.exec(userAgentString);\n    // Report the version as x.y.z and not x_y_z\n    version \x3d match \x26\x26 match[1].replace(/_/g, \x27.\x27);\n  } else if (goog.labs.userAgent.platform.isMacintosh()) {\n    re \x3d /Mac OS X ([0-9_.]+)/;\n    var match \x3d re.exec(userAgentString);\n    // Note: some old versions of Camino do not report an OSX version.\n    // Default to 10.\n    version \x3d match ? match[1].replace(/_/g, \x27.\x27) : \x2710\x27;\n  } else if (goog.labs.userAgent.platform.isAndroid()) {\n    re \x3d /Android\\s+([^\\);]+)(\\)|;)/;\n    var match \x3d re.exec(userAgentString);\n    version \x3d match \x26\x26 match[1];\n  } else if (goog.labs.userAgent.platform.isChromeOS()) {\n    re \x3d /(?:CrOS\\s+(?:i686|x86_64)\\s+([0-9.]+))/;\n    var match \x3d re.exec(userAgentString);\n    version \x3d match \x26\x26 match[1];\n  }\n  return version || \x27\x27;\n};\n\n\n/**\n * @param {string|number} version The version to check.\n * @return {boolean} Whether the browser version is higher or the same as the\n *     given version.\n */\ngoog.labs.userAgent.platform.isVersionOrHigher \x3d function(version) {\n  return goog.string.compareVersions(\n             goog.labs.userAgent.platform.getVersion(), version) \x3e\x3d 0;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/labs/useragent/platform.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/labs/useragent/engine.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Closure user agent detection.\n * @see http://en.wikipedia.org/wiki/User_agent\n * For more information on browser brand, platform, or device see the other\n * sub-namespaces in goog.labs.userAgent (browser, platform, and device).\n *\n * @author vbhasin@google.com (Vipul Bhasin)\n */\n\ngoog.provide(\x27goog.labs.userAgent.engine\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.labs.userAgent.util\x27);\ngoog.require(\x27goog.string\x27);\n\n\n/**\n * @return {boolean} Whether the rendering engine is Presto.\n */\ngoog.labs.userAgent.engine.isPresto \x3d function() {\n  return goog.labs.userAgent.util.matchUserAgent(\x27Presto\x27);\n};\n\n\n/**\n * @return {boolean} Whether the rendering engine is Trident.\n */\ngoog.labs.userAgent.engine.isTrident \x3d function() {\n  // IE only started including the Trident token in IE8.\n  return goog.labs.userAgent.util.matchUserAgent(\x27Trident\x27) ||\n      goog.labs.userAgent.util.matchUserAgent(\x27MSIE\x27);\n};\n\n\n/**\n * @return {boolean} Whether the rendering engine is Edge.\n */\ngoog.labs.userAgent.engine.isEdge \x3d function() {\n  return goog.labs.userAgent.util.matchUserAgent(\x27Edge\x27);\n};\n\n\n/**\n * @return {boolean} Whether the rendering engine is WebKit.\n */\ngoog.labs.userAgent.engine.isWebKit \x3d function() {\n  return goog.labs.userAgent.util.matchUserAgentIgnoreCase(\x27WebKit\x27) \x26\x26\n      !goog.labs.userAgent.engine.isEdge();\n};\n\n\n/**\n * @return {boolean} Whether the rendering engine is Gecko.\n */\ngoog.labs.userAgent.engine.isGecko \x3d function() {\n  return goog.labs.userAgent.util.matchUserAgent(\x27Gecko\x27) \x26\x26\n      !goog.labs.userAgent.engine.isWebKit() \x26\x26\n      !goog.labs.userAgent.engine.isTrident() \x26\x26\n      !goog.labs.userAgent.engine.isEdge();\n};\n\n\n/**\n * @return {string} The rendering engine\x27s version or empty string if version\n *     can\x27t be determined.\n */\ngoog.labs.userAgent.engine.getVersion \x3d function() {\n  var userAgentString \x3d goog.labs.userAgent.util.getUserAgent();\n  if (userAgentString) {\n    var tuples \x3d goog.labs.userAgent.util.extractVersionTuples(userAgentString);\n\n    var engineTuple \x3d goog.labs.userAgent.engine.getEngineTuple_(tuples);\n    if (engineTuple) {\n      // In Gecko, the version string is either in the browser info or the\n      // Firefox version.  See Gecko user agent string reference:\n      // http://goo.gl/mULqa\n      if (engineTuple[0] \x3d\x3d \x27Gecko\x27) {\n        return goog.labs.userAgent.engine.getVersionForKey_(tuples, \x27Firefox\x27);\n      }\n\n      return engineTuple[1];\n    }\n\n    // MSIE has only one version identifier, and the Trident version is\n    // specified in the parenthetical. IE Edge is covered in the engine tuple\n    // detection.\n    var browserTuple \x3d tuples[0];\n    var info;\n    if (browserTuple \x26\x26 (info \x3d browserTuple[2])) {\n      var match \x3d /Trident\\/([^\\s;]+)/.exec(info);\n      if (match) {\n        return match[1];\n      }\n    }\n  }\n  return \x27\x27;\n};\n\n\n/**\n * @param {!Array\x3c!Array\x3cstring\x3e\x3e} tuples Extracted version tuples.\n * @return {!Array\x3cstring\x3e|undefined} The engine tuple or undefined if not\n *     found.\n * @private\n */\ngoog.labs.userAgent.engine.getEngineTuple_ \x3d function(tuples) {\n  if (!goog.labs.userAgent.engine.isEdge()) {\n    return tuples[1];\n  }\n  for (var i \x3d 0; i \x3c tuples.length; i++) {\n    var tuple \x3d tuples[i];\n    if (tuple[0] \x3d\x3d \x27Edge\x27) {\n      return tuple;\n    }\n  }\n};\n\n\n/**\n * @param {string|number} version The version to check.\n * @return {boolean} Whether the rendering engine version is higher or the same\n *     as the given version.\n */\ngoog.labs.userAgent.engine.isVersionOrHigher \x3d function(version) {\n  return goog.string.compareVersions(\n             goog.labs.userAgent.engine.getVersion(), version) \x3e\x3d 0;\n};\n\n\n/**\n * @param {!Array\x3c!Array\x3cstring\x3e\x3e} tuples Version tuples.\n * @param {string} key The key to look for.\n * @return {string} The version string of the given key, if present.\n *     Otherwise, the empty string.\n * @private\n */\ngoog.labs.userAgent.engine.getVersionForKey_ \x3d function(tuples, key) {\n  // TODO(nnaze): Move to util if useful elsewhere.\n\n  var pair \x3d goog.array.find(tuples, function(pair) { return key \x3d\x3d pair[0]; });\n\n  return pair \x26\x26 pair[1] || \x27\x27;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/labs/useragent/engine.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/reflect/reflect.js";
eval("// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Useful compiler idioms.\n *\n * @author mgoodman@google.com (Mark Goodman)\n * @author johnlenz@google.com (John Lenz)\n */\n\ngoog.provide(\x27goog.reflect\x27);\n\n\n/**\n * Syntax for object literal casts.\n * @see http://go/jscompiler-renaming\n * @see https://goo.gl/CRs09P\n *\n * Use this if you have an object literal whose keys need to have the same names\n * as the properties of some class even after they are renamed by the compiler.\n *\n * @param {!Function} type Type to cast to.\n * @param {Object} object Object literal to cast.\n * @return {Object} The object literal.\n */\ngoog.reflect.object \x3d function(type, object) {\n  return object;\n};\n\n/**\n * Syntax for renaming property strings.\n * @see http://go/jscompiler-renaming\n * @see https://goo.gl/CRs09P\n *\n * Use this if you have an need to access a property as a string, but want\n * to also have the property renamed by the compiler. In contrast to\n * goog.reflect.object, this method takes an instance of an object.\n *\n * Properties must be simple names (not qualified names).\n *\n * @param {string} prop Name of the property\n * @param {!Object} object Instance of the object whose type will be used\n *     for renaming\n * @return {string} The renamed property.\n */\ngoog.reflect.objectProperty \x3d function(prop, object) {\n  return prop;\n};\n\n/**\n * To assert to the compiler that an operation is needed when it would\n * otherwise be stripped. For example:\n * \x3ccode\x3e\n *     // Force a layout\n *     goog.reflect.sinkValue(dialog.offsetHeight);\n * \x3c/code\x3e\n * @param {T} x\n * @return {T}\n * @template T\n */\ngoog.reflect.sinkValue \x3d function(x) {\n  goog.reflect.sinkValue[\x27 \x27](x);\n  return x;\n};\n\n\n/**\n * The compiler should optimize this function away iff no one ever uses\n * goog.reflect.sinkValue.\n */\ngoog.reflect.sinkValue[\x27 \x27] \x3d goog.nullFunction;\n\n\n/**\n * Check if a property can be accessed without throwing an exception.\n * @param {Object} obj The owner of the property.\n * @param {string} prop The property name.\n * @return {boolean} Whether the property is accessible. Will also return true\n *     if obj is null.\n */\ngoog.reflect.canAccessProperty \x3d function(obj, prop) {\n\n  try {\n    goog.reflect.sinkValue(obj[prop]);\n    return true;\n  } catch (e) {\n  }\n  return false;\n};\n\n\n/**\n * Retrieves a value from a cache given a key. The compiler provides special\n * consideration for this call such that it is generally considered side-effect\n * free. However, if the `opt_keyFn` or `valueFn` have side-effects\n * then the entire call is considered to have side-effects.\n *\n * Conventionally storing the value on the cache would be considered a\n * side-effect and preclude unused calls from being pruned, ie. even if\n * the value was never used, it would still always be stored in the cache.\n *\n * Providing a side-effect free `valueFn` and `opt_keyFn`\n * allows unused calls to `goog.reflect.cache` to be pruned.\n *\n * @param {!Object\x3cK, V\x3e} cacheObj The object that contains the cached values.\n * @param {?} key The key to lookup in the cache. If it is not string or number\n *     then a `opt_keyFn` should be provided. The key is also used as the\n *     parameter to the `valueFn`.\n * @param {function(?):V} valueFn The value provider to use to calculate the\n *     value to store in the cache. This function should be side-effect free\n *     to take advantage of the optimization.\n * @param {function(?):K\x3d} opt_keyFn The key provider to determine the cache\n *     map key. This should be used if the given key is not a string or number.\n *     If not provided then the given key is used. This function should be\n *     side-effect free to take advantage of the optimization.\n * @return {V} The cached or calculated value.\n * @template K\n * @template V\n */\ngoog.reflect.cache \x3d function(cacheObj, key, valueFn, opt_keyFn) {\n  var storedKey \x3d opt_keyFn ? opt_keyFn(key) : key;\n\n  if (Object.prototype.hasOwnProperty.call(cacheObj, storedKey)) {\n    return cacheObj[storedKey];\n  }\n\n  return (cacheObj[storedKey] \x3d valueFn(key));\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/reflect/reflect.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/useragent/useragent.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Rendering engine detection.\n * @see \x3ca href\x3d\x22http://www.useragentstring.com/\x22\x3eUser agent strings\x3c/a\x3e\n * For information on the browser brand (such as Safari versus Chrome), see\n * goog.userAgent.product.\n * @author pupius@google.com (Daniel Pupius)\n * @author arv@google.com (Erik Arvidsson)\n * @see ../demos/useragent.html\n */\n\ngoog.provide(\x27goog.userAgent\x27);\n\ngoog.require(\x27goog.labs.userAgent.browser\x27);\ngoog.require(\x27goog.labs.userAgent.engine\x27);\ngoog.require(\x27goog.labs.userAgent.platform\x27);\ngoog.require(\x27goog.labs.userAgent.util\x27);\ngoog.require(\x27goog.reflect\x27);\ngoog.require(\x27goog.string\x27);\n\n\n/**\n * @define {boolean} Whether we know at compile-time that the browser is IE.\n */\ngoog.define(\x27goog.userAgent.ASSUME_IE\x27, false);\n\n\n/**\n * @define {boolean} Whether we know at compile-time that the browser is EDGE.\n */\ngoog.define(\x27goog.userAgent.ASSUME_EDGE\x27, false);\n\n\n/**\n * @define {boolean} Whether we know at compile-time that the browser is GECKO.\n */\ngoog.define(\x27goog.userAgent.ASSUME_GECKO\x27, false);\n\n\n/**\n * @define {boolean} Whether we know at compile-time that the browser is WEBKIT.\n */\ngoog.define(\x27goog.userAgent.ASSUME_WEBKIT\x27, false);\n\n\n/**\n * @define {boolean} Whether we know at compile-time that the browser is a\n *     mobile device running WebKit e.g. iPhone or Android.\n */\ngoog.define(\x27goog.userAgent.ASSUME_MOBILE_WEBKIT\x27, false);\n\n\n/**\n * @define {boolean} Whether we know at compile-time that the browser is OPERA.\n */\ngoog.define(\x27goog.userAgent.ASSUME_OPERA\x27, false);\n\n\n/**\n * @define {boolean} Whether the\n *     `goog.userAgent.isVersionOrHigher`\n *     function will return true for any version.\n */\ngoog.define(\x27goog.userAgent.ASSUME_ANY_VERSION\x27, false);\n\n\n/**\n * Whether we know the browser engine at compile-time.\n * @type {boolean}\n * @private\n */\ngoog.userAgent.BROWSER_KNOWN_ \x3d goog.userAgent.ASSUME_IE ||\n    goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_GECKO ||\n    goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT ||\n    goog.userAgent.ASSUME_OPERA;\n\n\n/**\n * Returns the userAgent string for the current browser.\n *\n * @return {string} The userAgent string.\n */\ngoog.userAgent.getUserAgentString \x3d function() {\n  return goog.labs.userAgent.util.getUserAgent();\n};\n\n\n/**\n * @return {?Navigator} The native navigator object.\n */\ngoog.userAgent.getNavigatorTyped \x3d function() {\n  // Need a local navigator reference instead of using the global one,\n  // to avoid the rare case where they reference different objects.\n  // (in a WorkerPool, for example).\n  return goog.global[\x27navigator\x27] || null;\n};\n\n\n/**\n * TODO(nnaze): Change type to \x22Navigator\x22 and update compilation targets.\n * @return {?Object} The native navigator object.\n */\ngoog.userAgent.getNavigator \x3d function() {\n  return goog.userAgent.getNavigatorTyped();\n};\n\n\n/**\n * Whether the user agent is Opera.\n * @type {boolean}\n */\ngoog.userAgent.OPERA \x3d goog.userAgent.BROWSER_KNOWN_ ?\n    goog.userAgent.ASSUME_OPERA :\n    goog.labs.userAgent.browser.isOpera();\n\n\n/**\n * Whether the user agent is Internet Explorer.\n * @type {boolean}\n */\ngoog.userAgent.IE \x3d goog.userAgent.BROWSER_KNOWN_ ?\n    goog.userAgent.ASSUME_IE :\n    goog.labs.userAgent.browser.isIE();\n\n\n/**\n * Whether the user agent is Microsoft Edge.\n * @type {boolean}\n */\ngoog.userAgent.EDGE \x3d goog.userAgent.BROWSER_KNOWN_ ?\n    goog.userAgent.ASSUME_EDGE :\n    goog.labs.userAgent.engine.isEdge();\n\n\n/**\n * Whether the user agent is MS Internet Explorer or MS Edge.\n * @type {boolean}\n */\ngoog.userAgent.EDGE_OR_IE \x3d goog.userAgent.EDGE || goog.userAgent.IE;\n\n\n/**\n * Whether the user agent is Gecko. Gecko is the rendering engine used by\n * Mozilla, Firefox, and others.\n * @type {boolean}\n */\ngoog.userAgent.GECKO \x3d goog.userAgent.BROWSER_KNOWN_ ?\n    goog.userAgent.ASSUME_GECKO :\n    goog.labs.userAgent.engine.isGecko();\n\n\n/**\n * Whether the user agent is WebKit. WebKit is the rendering engine that\n * Safari, Android and others use.\n * @type {boolean}\n */\ngoog.userAgent.WEBKIT \x3d goog.userAgent.BROWSER_KNOWN_ ?\n    goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT :\n    goog.labs.userAgent.engine.isWebKit();\n\n\n/**\n * Whether the user agent is running on a mobile device.\n *\n * This is a separate function so that the logic can be tested.\n *\n * TODO(nnaze): Investigate swapping in goog.labs.userAgent.device.isMobile().\n *\n * @return {boolean} Whether the user agent is running on a mobile device.\n * @private\n */\ngoog.userAgent.isMobile_ \x3d function() {\n  return goog.userAgent.WEBKIT \x26\x26\n      goog.labs.userAgent.util.matchUserAgent(\x27Mobile\x27);\n};\n\n\n/**\n * Whether the user agent is running on a mobile device.\n *\n * TODO(nnaze): Consider deprecating MOBILE when labs.userAgent\n *   is promoted as the gecko/webkit logic is likely inaccurate.\n *\n * @type {boolean}\n */\ngoog.userAgent.MOBILE \x3d\n    goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();\n\n\n/**\n * Used while transitioning code to use WEBKIT instead.\n * @type {boolean}\n * @deprecated Use {@link goog.userAgent.product.SAFARI} instead.\n * TODO(nicksantos): Delete this from goog.userAgent.\n */\ngoog.userAgent.SAFARI \x3d goog.userAgent.WEBKIT;\n\n\n/**\n * @return {string} the platform (operating system) the user agent is running\n *     on. Default to empty string because navigator.platform may not be defined\n *     (on Rhino, for example).\n * @private\n */\ngoog.userAgent.determinePlatform_ \x3d function() {\n  var navigator \x3d goog.userAgent.getNavigatorTyped();\n  return navigator \x26\x26 navigator.platform || \x27\x27;\n};\n\n\n/**\n * The platform (operating system) the user agent is running on. Default to\n * empty string because navigator.platform may not be defined (on Rhino, for\n * example).\n * @type {string}\n */\ngoog.userAgent.PLATFORM \x3d goog.userAgent.determinePlatform_();\n\n\n/**\n * @define {boolean} Whether the user agent is running on a Macintosh operating\n *     system.\n */\ngoog.define(\x27goog.userAgent.ASSUME_MAC\x27, false);\n\n\n/**\n * @define {boolean} Whether the user agent is running on a Windows operating\n *     system.\n */\ngoog.define(\x27goog.userAgent.ASSUME_WINDOWS\x27, false);\n\n\n/**\n * @define {boolean} Whether the user agent is running on a Linux operating\n *     system.\n */\ngoog.define(\x27goog.userAgent.ASSUME_LINUX\x27, false);\n\n\n/**\n * @define {boolean} Whether the user agent is running on a X11 windowing\n *     system.\n */\ngoog.define(\x27goog.userAgent.ASSUME_X11\x27, false);\n\n\n/**\n * @define {boolean} Whether the user agent is running on Android.\n */\ngoog.define(\x27goog.userAgent.ASSUME_ANDROID\x27, false);\n\n\n/**\n * @define {boolean} Whether the user agent is running on an iPhone.\n */\ngoog.define(\x27goog.userAgent.ASSUME_IPHONE\x27, false);\n\n\n/**\n * @define {boolean} Whether the user agent is running on an iPad.\n */\ngoog.define(\x27goog.userAgent.ASSUME_IPAD\x27, false);\n\n\n/**\n * @define {boolean} Whether the user agent is running on an iPod.\n */\ngoog.define(\x27goog.userAgent.ASSUME_IPOD\x27, false);\n\n\n/**\n * @type {boolean}\n * @private\n */\ngoog.userAgent.PLATFORM_KNOWN_ \x3d goog.userAgent.ASSUME_MAC ||\n    goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX ||\n    goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID ||\n    goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD ||\n    goog.userAgent.ASSUME_IPOD;\n\n\n/**\n * Whether the user agent is running on a Macintosh operating system.\n * @type {boolean}\n */\ngoog.userAgent.MAC \x3d goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_MAC :\n    goog.labs.userAgent.platform.isMacintosh();\n\n\n/**\n * Whether the user agent is running on a Windows operating system.\n * @type {boolean}\n */\ngoog.userAgent.WINDOWS \x3d goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_WINDOWS :\n    goog.labs.userAgent.platform.isWindows();\n\n\n/**\n * Whether the user agent is Linux per the legacy behavior of\n * goog.userAgent.LINUX, which considered ChromeOS to also be\n * Linux.\n * @return {boolean}\n * @private\n */\ngoog.userAgent.isLegacyLinux_ \x3d function() {\n  return goog.labs.userAgent.platform.isLinux() ||\n      goog.labs.userAgent.platform.isChromeOS();\n};\n\n\n/**\n * Whether the user agent is running on a Linux operating system.\n *\n * Note that goog.userAgent.LINUX considers ChromeOS to be Linux,\n * while goog.labs.userAgent.platform considers ChromeOS and\n * Linux to be different OSes.\n *\n * @type {boolean}\n */\ngoog.userAgent.LINUX \x3d goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_LINUX :\n    goog.userAgent.isLegacyLinux_();\n\n\n/**\n * @return {boolean} Whether the user agent is an X11 windowing system.\n * @private\n */\ngoog.userAgent.isX11_ \x3d function() {\n  var navigator \x3d goog.userAgent.getNavigatorTyped();\n  return !!navigator \x26\x26\n      goog.string.contains(navigator[\x27appVersion\x27] || \x27\x27, \x27X11\x27);\n};\n\n\n/**\n * Whether the user agent is running on a X11 windowing system.\n * @type {boolean}\n */\ngoog.userAgent.X11 \x3d goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_X11 :\n    goog.userAgent.isX11_();\n\n\n/**\n * Whether the user agent is running on Android.\n * @type {boolean}\n */\ngoog.userAgent.ANDROID \x3d goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_ANDROID :\n    goog.labs.userAgent.platform.isAndroid();\n\n\n/**\n * Whether the user agent is running on an iPhone.\n * @type {boolean}\n */\ngoog.userAgent.IPHONE \x3d goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_IPHONE :\n    goog.labs.userAgent.platform.isIphone();\n\n\n/**\n * Whether the user agent is running on an iPad.\n * @type {boolean}\n */\ngoog.userAgent.IPAD \x3d goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_IPAD :\n    goog.labs.userAgent.platform.isIpad();\n\n\n/**\n * Whether the user agent is running on an iPod.\n * @type {boolean}\n */\ngoog.userAgent.IPOD \x3d goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_IPOD :\n    goog.labs.userAgent.platform.isIpod();\n\n\n/**\n * Whether the user agent is running on iOS.\n * @type {boolean}\n */\ngoog.userAgent.IOS \x3d goog.userAgent.PLATFORM_KNOWN_ ?\n    (goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD ||\n     goog.userAgent.ASSUME_IPOD) :\n    goog.labs.userAgent.platform.isIos();\n\n/**\n * @return {string} The string that describes the version number of the user\n *     agent.\n * @private\n */\ngoog.userAgent.determineVersion_ \x3d function() {\n  // All browsers have different ways to detect the version and they all have\n  // different naming schemes.\n  // version is a string rather than a number because it may contain \x27b\x27, \x27a\x27,\n  // and so on.\n  var version \x3d \x27\x27;\n  var arr \x3d goog.userAgent.getVersionRegexResult_();\n  if (arr) {\n    version \x3d arr ? arr[1] : \x27\x27;\n  }\n\n  if (goog.userAgent.IE) {\n    // IE9 can be in document mode 9 but be reporting an inconsistent user agent\n    // version.  If it is identifying as a version lower than 9 we take the\n    // documentMode as the version instead.  IE8 has similar behavior.\n    // It is recommended to set the X-UA-Compatible header to ensure that IE9\n    // uses documentMode 9.\n    var docMode \x3d goog.userAgent.getDocumentMode_();\n    if (docMode !\x3d null \x26\x26 docMode \x3e parseFloat(version)) {\n      return String(docMode);\n    }\n  }\n\n  return version;\n};\n\n\n/**\n * @return {?IArrayLike\x3cstring\x3e|undefined} The version regex matches from\n *     parsing the user\n *     agent string. These regex statements must be executed inline so they can\n *     be compiled out by the closure compiler with the rest of the useragent\n *     detection logic when ASSUME_* is specified.\n * @private\n */\ngoog.userAgent.getVersionRegexResult_ \x3d function() {\n  var userAgent \x3d goog.userAgent.getUserAgentString();\n  if (goog.userAgent.GECKO) {\n    return /rv\\:([^\\);]+)(\\)|;)/.exec(userAgent);\n  }\n  if (goog.userAgent.EDGE) {\n    return /Edge\\/([\\d\\.]+)/.exec(userAgent);\n  }\n  if (goog.userAgent.IE) {\n    return /\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(userAgent);\n  }\n  if (goog.userAgent.WEBKIT) {\n    // WebKit/125.4\n    return /WebKit\\/(\\S+)/.exec(userAgent);\n  }\n  if (goog.userAgent.OPERA) {\n    // If none of the above browsers were detected but the browser is Opera, the\n    // only string that is of interest is \x27Version/\x3cnumber\x3e\x27.\n    return /(?:Version)[ \\/]?(\\S+)/.exec(userAgent);\n  }\n  return undefined;\n};\n\n\n/**\n * @return {number|undefined} Returns the document mode (for testing).\n * @private\n */\ngoog.userAgent.getDocumentMode_ \x3d function() {\n  // NOTE(pupius): goog.userAgent may be used in context where there is no DOM.\n  var doc \x3d goog.global[\x27document\x27];\n  return doc ? doc[\x27documentMode\x27] : undefined;\n};\n\n\n/**\n * The version of the user agent. This is a string because it might contain\n * \x27b\x27 (as in beta) as well as multiple dots.\n * @type {string}\n */\ngoog.userAgent.VERSION \x3d goog.userAgent.determineVersion_();\n\n\n/**\n * Compares two version numbers.\n *\n * @param {string} v1 Version of first item.\n * @param {string} v2 Version of second item.\n *\n * @return {number}  1 if first argument is higher\n *                   0 if arguments are equal\n *                  -1 if second argument is higher.\n * @deprecated Use goog.string.compareVersions.\n */\ngoog.userAgent.compare \x3d function(v1, v2) {\n  return goog.string.compareVersions(v1, v2);\n};\n\n\n/**\n * Cache for {@link goog.userAgent.isVersionOrHigher}.\n * Calls to compareVersions are surprisingly expensive and, as a browser\x27s\n * version number is unlikely to change during a session, we cache the results.\n * @const\n * @private\n */\ngoog.userAgent.isVersionOrHigherCache_ \x3d {};\n\n\n/**\n * Whether the user agent version is higher or the same as the given version.\n * NOTE: When checking the version numbers for Firefox and Safari, be sure to\n * use the engine\x27s version, not the browser\x27s version number.  For example,\n * Firefox 3.0 corresponds to Gecko 1.9 and Safari 3.0 to Webkit 522.11.\n * Opera and Internet Explorer versions match the product release number.\x3cbr\x3e\n * @see \x3ca href\x3d\x22http://en.wikipedia.org/wiki/Safari_version_history\x22\x3e\n *     Webkit\x3c/a\x3e\n * @see \x3ca href\x3d\x22http://en.wikipedia.org/wiki/Gecko_engine\x22\x3eGecko\x3c/a\x3e\n *\n * @param {string|number} version The version to check.\n * @return {boolean} Whether the user agent version is higher or the same as\n *     the given version.\n */\ngoog.userAgent.isVersionOrHigher \x3d function(version) {\n  return goog.userAgent.ASSUME_ANY_VERSION ||\n      goog.reflect.cache(\n          goog.userAgent.isVersionOrHigherCache_, version, function() {\n            return goog.string.compareVersions(\n                       goog.userAgent.VERSION, version) \x3e\x3d 0;\n          });\n};\n\n\n/**\n * Deprecated alias to `goog.userAgent.isVersionOrHigher`.\n * @param {string|number} version The version to check.\n * @return {boolean} Whether the user agent version is higher or the same as\n *     the given version.\n * @deprecated Use goog.userAgent.isVersionOrHigher().\n */\ngoog.userAgent.isVersion \x3d goog.userAgent.isVersionOrHigher;\n\n\n/**\n * Whether the IE effective document mode is higher or the same as the given\n * document mode version.\n * NOTE: Only for IE, return false for another browser.\n *\n * @param {number} documentMode The document mode version to check.\n * @return {boolean} Whether the IE effective document mode is higher or the\n *     same as the given version.\n */\ngoog.userAgent.isDocumentModeOrHigher \x3d function(documentMode) {\n  return Number(goog.userAgent.DOCUMENT_MODE) \x3e\x3d documentMode;\n};\n\n\n/**\n * Deprecated alias to `goog.userAgent.isDocumentModeOrHigher`.\n * @param {number} version The version to check.\n * @return {boolean} Whether the IE effective document mode is higher or the\n *      same as the given version.\n * @deprecated Use goog.userAgent.isDocumentModeOrHigher().\n */\ngoog.userAgent.isDocumentMode \x3d goog.userAgent.isDocumentModeOrHigher;\n\n\n/**\n * For IE version \x3c 7, documentMode is undefined, so attempt to use the\n * CSS1Compat property to see if we are in standards mode. If we are in\n * standards mode, treat the browser version as the document mode. Otherwise,\n * IE is emulating version 5.\n * @type {number|undefined}\n * @const\n */\ngoog.userAgent.DOCUMENT_MODE \x3d (function() {\n  var doc \x3d goog.global[\x27document\x27];\n  var mode \x3d goog.userAgent.getDocumentMode_();\n  if (!doc || !goog.userAgent.IE) {\n    return undefined;\n  }\n  return mode || (doc[\x27compatMode\x27] \x3d\x3d \x27CSS1Compat\x27 ?\n                      parseInt(goog.userAgent.VERSION, 10) :\n                      5);\n})();\n\n//# sourceURL\x3dhttps://qs/javascript/closure/useragent/useragent.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/useragent/product.js";
eval("// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Detects the specific browser and not just the rendering engine.\n *\n * @author andybons@google.com (Andrew Bonventre)\n */\n\ngoog.provide(\x27goog.userAgent.product\x27);\n\ngoog.require(\x27goog.labs.userAgent.browser\x27);\ngoog.require(\x27goog.labs.userAgent.platform\x27);\ngoog.require(\x27goog.userAgent\x27);\n\n\n/**\n * @define {boolean} Whether the code is running on the Firefox web browser.\n */\ngoog.define(\x27goog.userAgent.product.ASSUME_FIREFOX\x27, false);\n\n\n/**\n * @define {boolean} Whether we know at compile-time that the product is an\n *     iPhone.\n */\ngoog.define(\x27goog.userAgent.product.ASSUME_IPHONE\x27, false);\n\n\n/**\n * @define {boolean} Whether we know at compile-time that the product is an\n *     iPad.\n */\ngoog.define(\x27goog.userAgent.product.ASSUME_IPAD\x27, false);\n\n\n/**\n * @define {boolean} Whether we know at compile-time that the product is an\n *     AOSP browser or WebView inside a pre KitKat Android phone or tablet.\n */\ngoog.define(\x27goog.userAgent.product.ASSUME_ANDROID\x27, false);\n\n\n/**\n * @define {boolean} Whether the code is running on the Chrome web browser on\n * any platform or AOSP browser or WebView in a KitKat+ Android phone or tablet.\n */\ngoog.define(\x27goog.userAgent.product.ASSUME_CHROME\x27, false);\n\n\n/**\n * @define {boolean} Whether the code is running on the Safari web browser.\n */\ngoog.define(\x27goog.userAgent.product.ASSUME_SAFARI\x27, false);\n\n\n/**\n * Whether we know the product type at compile-time.\n * @type {boolean}\n * @private\n */\ngoog.userAgent.product.PRODUCT_KNOWN_ \x3d goog.userAgent.ASSUME_IE ||\n    goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_OPERA ||\n    goog.userAgent.product.ASSUME_FIREFOX ||\n    goog.userAgent.product.ASSUME_IPHONE ||\n    goog.userAgent.product.ASSUME_IPAD ||\n    goog.userAgent.product.ASSUME_ANDROID ||\n    goog.userAgent.product.ASSUME_CHROME ||\n    goog.userAgent.product.ASSUME_SAFARI;\n\n\n/**\n * Whether the code is running on the Opera web browser.\n * @type {boolean}\n */\ngoog.userAgent.product.OPERA \x3d goog.userAgent.OPERA;\n\n\n/**\n * Whether the code is running on an IE web browser.\n * @type {boolean}\n */\ngoog.userAgent.product.IE \x3d goog.userAgent.IE;\n\n\n/**\n * Whether the code is running on an Edge web browser.\n * @type {boolean}\n */\ngoog.userAgent.product.EDGE \x3d goog.userAgent.EDGE;\n\n\n/**\n * Whether the code is running on the Firefox web browser.\n * @type {boolean}\n */\ngoog.userAgent.product.FIREFOX \x3d goog.userAgent.product.PRODUCT_KNOWN_ ?\n    goog.userAgent.product.ASSUME_FIREFOX :\n    goog.labs.userAgent.browser.isFirefox();\n\n\n/**\n * Whether the user agent is an iPhone or iPod (as in iPod touch).\n * @return {boolean}\n * @private\n */\ngoog.userAgent.product.isIphoneOrIpod_ \x3d function() {\n  return goog.labs.userAgent.platform.isIphone() ||\n      goog.labs.userAgent.platform.isIpod();\n};\n\n\n/**\n * Whether the code is running on an iPhone or iPod touch.\n *\n * iPod touch is considered an iPhone for legacy reasons.\n * @type {boolean}\n */\ngoog.userAgent.product.IPHONE \x3d goog.userAgent.product.PRODUCT_KNOWN_ ?\n    goog.userAgent.product.ASSUME_IPHONE :\n    goog.userAgent.product.isIphoneOrIpod_();\n\n\n/**\n * Whether the code is running on an iPad.\n * @type {boolean}\n */\ngoog.userAgent.product.IPAD \x3d goog.userAgent.product.PRODUCT_KNOWN_ ?\n    goog.userAgent.product.ASSUME_IPAD :\n    goog.labs.userAgent.platform.isIpad();\n\n\n/**\n * Whether the code is running on AOSP browser or WebView inside\n * a pre KitKat Android phone or tablet.\n * @type {boolean}\n */\ngoog.userAgent.product.ANDROID \x3d goog.userAgent.product.PRODUCT_KNOWN_ ?\n    goog.userAgent.product.ASSUME_ANDROID :\n    goog.labs.userAgent.browser.isAndroidBrowser();\n\n\n/**\n * Whether the code is running on the Chrome web browser on any platform\n * or AOSP browser or WebView in a KitKat+ Android phone or tablet.\n * @type {boolean}\n */\ngoog.userAgent.product.CHROME \x3d goog.userAgent.product.PRODUCT_KNOWN_ ?\n    goog.userAgent.product.ASSUME_CHROME :\n    goog.labs.userAgent.browser.isChrome();\n\n\n/**\n * @return {boolean} Whether the browser is Safari on desktop.\n * @private\n */\ngoog.userAgent.product.isSafariDesktop_ \x3d function() {\n  return goog.labs.userAgent.browser.isSafari() \x26\x26\n      !goog.labs.userAgent.platform.isIos();\n};\n\n\n/**\n * Whether the code is running on the desktop Safari web browser.\n * Note: the legacy behavior here is only true for Safari not running\n * on iOS.\n * @type {boolean}\n */\ngoog.userAgent.product.SAFARI \x3d goog.userAgent.product.PRODUCT_KNOWN_ ?\n    goog.userAgent.product.ASSUME_SAFARI :\n    goog.userAgent.product.isSafariDesktop_();\n\n//# sourceURL\x3dhttps://qs/javascript/closure/useragent/product.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/crypt/base64.js";
eval("// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Base64 en/decoding. Not much to say here except that we\n * work with decoded values in arrays of bytes. By \x22byte\x22 I mean a number\n * in [0, 255].\n *\n * @author doughtie@google.com (Gavin Doughtie)\n * @author fschneider@google.com (Fritz Schneider)\n */\n\ngoog.provide(\x27goog.crypt.base64\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.crypt\x27);\ngoog.require(\x27goog.string\x27);\ngoog.require(\x27goog.userAgent\x27);\ngoog.require(\x27goog.userAgent.product\x27);\n\n// Static lookup maps, lazily populated by init_()\n\n\n/**\n * Maps bytes to characters.\n * @type {Object}\n * @private\n */\ngoog.crypt.base64.byteToCharMap_ \x3d null;\n\n\n/**\n * Maps characters to bytes. Used for normal and websafe characters.\n * @type {Object}\n * @private\n */\ngoog.crypt.base64.charToByteMap_ \x3d null;\n\n\n/**\n * Maps bytes to websafe characters.\n * @type {Object}\n * @private\n */\ngoog.crypt.base64.byteToCharMapWebSafe_ \x3d null;\n\n\n/**\n * Our default alphabet, shared between\n * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n * @type {string}\n */\ngoog.crypt.base64.ENCODED_VALS_BASE \x3d \x27ABCDEFGHIJKLMNOPQRSTUVWXYZ\x27 +\n    \x27abcdefghijklmnopqrstuvwxyz\x27 +\n    \x270123456789\x27;\n\n\n/**\n * Our default alphabet. Value 64 (\x3d) is special; it means \x22nothing.\x22\n * @type {string}\n */\ngoog.crypt.base64.ENCODED_VALS \x3d goog.crypt.base64.ENCODED_VALS_BASE + \x27+/\x3d\x27;\n\n\n/**\n * Our websafe alphabet.\n * @type {string}\n */\ngoog.crypt.base64.ENCODED_VALS_WEBSAFE \x3d\n    goog.crypt.base64.ENCODED_VALS_BASE + \x27-_.\x27;\n\n\n/**\n * White list of implementations with known-good native atob and btoa functions.\n * Listing these explicitly (via the ASSUME_* wrappers) benefits dead-code\n * removal in per-browser compilations.\n * @private {boolean}\n */\ngoog.crypt.base64.ASSUME_NATIVE_SUPPORT_ \x3d goog.userAgent.GECKO ||\n    (goog.userAgent.WEBKIT \x26\x26 !goog.userAgent.product.SAFARI) ||\n    goog.userAgent.OPERA;\n\n\n/**\n * Does this browser have a working btoa function?\n * @private {boolean}\n */\ngoog.crypt.base64.HAS_NATIVE_ENCODE_ \x3d\n    goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ ||\n    typeof(goog.global.btoa) \x3d\x3d \x27function\x27;\n\n\n/**\n * Does this browser have a working atob function?\n * We blacklist known-bad implementations:\n *  - IE (10+) added atob() but it does not tolerate whitespace on the input.\n * @private {boolean}\n */\ngoog.crypt.base64.HAS_NATIVE_DECODE_ \x3d\n    goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ ||\n    (!goog.userAgent.product.SAFARI \x26\x26 !goog.userAgent.IE \x26\x26\n     typeof(goog.global.atob) \x3d\x3d \x27function\x27);\n\n\n/**\n * Base64-encode an array of bytes.\n *\n * @param {Array\x3cnumber\x3e|Uint8Array} input An array of bytes (numbers with\n *     value in [0, 255]) to encode.\n * @param {boolean\x3d} opt_webSafe True indicates we should use the alternative\n *     alphabet, which does not require escaping for use in URLs.\n * @return {string} The base64 encoded string.\n */\ngoog.crypt.base64.encodeByteArray \x3d function(input, opt_webSafe) {\n  // Assert avoids runtime dependency on goog.isArrayLike, which helps reduce\n  // size of jscompiler output, and which yields slight performance increase.\n  goog.asserts.assert(\n      goog.isArrayLike(input), \x27encodeByteArray takes an array as a parameter\x27);\n\n  goog.crypt.base64.init_();\n\n  var byteToCharMap \x3d opt_webSafe ? goog.crypt.base64.byteToCharMapWebSafe_ :\n                                    goog.crypt.base64.byteToCharMap_;\n\n  var output \x3d [];\n\n  for (var i \x3d 0; i \x3c input.length; i +\x3d 3) {\n    var byte1 \x3d input[i];\n    var haveByte2 \x3d i + 1 \x3c input.length;\n    var byte2 \x3d haveByte2 ? input[i + 1] : 0;\n    var haveByte3 \x3d i + 2 \x3c input.length;\n    var byte3 \x3d haveByte3 ? input[i + 2] : 0;\n\n    var outByte1 \x3d byte1 \x3e\x3e 2;\n    var outByte2 \x3d ((byte1 \x26 0x03) \x3c\x3c 4) | (byte2 \x3e\x3e 4);\n    var outByte3 \x3d ((byte2 \x26 0x0F) \x3c\x3c 2) | (byte3 \x3e\x3e 6);\n    var outByte4 \x3d byte3 \x26 0x3F;\n\n    if (!haveByte3) {\n      outByte4 \x3d 64;\n\n      if (!haveByte2) {\n        outByte3 \x3d 64;\n      }\n    }\n\n    output.push(\n        byteToCharMap[outByte1], byteToCharMap[outByte2],\n        byteToCharMap[outByte3], byteToCharMap[outByte4]);\n  }\n\n  return output.join(\x27\x27);\n};\n\n\n/**\n * Base64-encode a string.\n *\n * @param {string} input A string to encode.\n * @param {boolean\x3d} opt_webSafe True indicates we should use the alternative\n *     alphabet, which does not require escaping for use in URLs.\n * @return {string} The base64 encoded string.\n */\ngoog.crypt.base64.encodeString \x3d function(input, opt_webSafe) {\n  // Shortcut for browsers that implement\n  // a native base64 encoder in the form of \x22btoa/atob\x22\n  if (goog.crypt.base64.HAS_NATIVE_ENCODE_ \x26\x26 !opt_webSafe) {\n    return goog.global.btoa(input);\n  }\n  return goog.crypt.base64.encodeByteArray(\n      goog.crypt.stringToByteArray(input), opt_webSafe);\n};\n\n\n/**\n * Base64-decode a string.\n *\n * @param {string} input Input to decode. Any whitespace is ignored, and the\n *     input maybe encoded with either supported alphabet (or a mix thereof).\n * @param {boolean\x3d} opt_webSafe True indicates we should use the alternative\n *     alphabet, which does not require escaping for use in URLs. Note that\n *     passing false may also still allow webSafe input decoding, when the\n *     fallback decoder is used on browsers without native support.\n * @return {string} string representing the decoded value.\n */\ngoog.crypt.base64.decodeString \x3d function(input, opt_webSafe) {\n  // Shortcut for browsers that implement\n  // a native base64 encoder in the form of \x22btoa/atob\x22\n  if (goog.crypt.base64.HAS_NATIVE_DECODE_ \x26\x26 !opt_webSafe) {\n    return goog.global.atob(input);\n  }\n  var output \x3d \x27\x27;\n  function pushByte(b) { output +\x3d String.fromCharCode(b); }\n\n  goog.crypt.base64.decodeStringInternal_(input, pushByte);\n\n  return output;\n};\n\n\n/**\n * Base64-decode a string to an Array of numbers.\n *\n * In base-64 decoding, groups of four characters are converted into three\n * bytes.  If the encoder did not apply padding, the input length may not\n * be a multiple of 4.\n *\n * In this case, the last group will have fewer than 4 characters, and\n * padding will be inferred.  If the group has one or two characters, it decodes\n * to one byte.  If the group has three characters, it decodes to two bytes.\n *\n * @param {string} input Input to decode. Any whitespace is ignored, and the\n *     input maybe encoded with either supported alphabet (or a mix thereof).\n * @param {boolean\x3d} opt_ignored Unused parameter, retained for compatibility.\n * @return {!Array\x3cnumber\x3e} bytes representing the decoded value.\n */\ngoog.crypt.base64.decodeStringToByteArray \x3d function(input, opt_ignored) {\n  var output \x3d [];\n  function pushByte(b) { output.push(b); }\n\n  goog.crypt.base64.decodeStringInternal_(input, pushByte);\n\n  return output;\n};\n\n\n/**\n * Base64-decode a string to a Uint8Array.\n *\n * Note that Uint8Array is not supported on older browsers, e.g. IE \x3c 10.\n * @see http://caniuse.com/uint8array\n *\n * In base-64 decoding, groups of four characters are converted into three\n * bytes.  If the encoder did not apply padding, the input length may not\n * be a multiple of 4.\n *\n * In this case, the last group will have fewer than 4 characters, and\n * padding will be inferred.  If the group has one or two characters, it decodes\n * to one byte.  If the group has three characters, it decodes to two bytes.\n *\n * @param {string} input Input to decode. Any whitespace is ignored, and the\n *     input maybe encoded with either supported alphabet (or a mix thereof).\n * @return {!Uint8Array} bytes representing the decoded value.\n */\ngoog.crypt.base64.decodeStringToUint8Array \x3d function(input) {\n  goog.asserts.assert(\n      !goog.userAgent.IE || goog.userAgent.isVersionOrHigher(\x2710\x27),\n      \x27Browser does not support typed arrays\x27);\n  var len \x3d input.length;\n  // Check if there are trailing \x27\x3d\x27 as padding in the b64 string.\n  var placeholders \x3d 0;\n  if (input[len - 2] \x3d\x3d\x3d \x27\x3d\x27) {\n    placeholders \x3d 2;\n  } else if (input[len - 1] \x3d\x3d\x3d \x27\x3d\x27) {\n    placeholders \x3d 1;\n  }\n  var output \x3d new Uint8Array(Math.ceil(len * 3 / 4) - placeholders);\n  var outLen \x3d 0;\n  function pushByte(b) {\n    output[outLen++] \x3d b;\n  }\n\n  goog.crypt.base64.decodeStringInternal_(input, pushByte);\n\n  return output.subarray(0, outLen);\n};\n\n\n/**\n * @param {string} input Input to decode.\n * @param {function(number):void} pushByte result accumulator.\n * @private\n */\ngoog.crypt.base64.decodeStringInternal_ \x3d function(input, pushByte) {\n  goog.crypt.base64.init_();\n\n  var nextCharIndex \x3d 0;\n  /**\n   * @param {number} default_val Used for end-of-input.\n   * @return {number} The next 6-bit value, or the default for end-of-input.\n   */\n  function getByte(default_val) {\n    while (nextCharIndex \x3c input.length) {\n      var ch \x3d input.charAt(nextCharIndex++);\n      var b \x3d goog.crypt.base64.charToByteMap_[ch];\n      if (b !\x3d null) {\n        return b;  // Common case: decoded the char.\n      }\n      if (!goog.string.isEmptyOrWhitespace(ch)) {\n        throw new Error(\x27Unknown base64 encoding at char: \x27 + ch);\n      }\n      // We encountered whitespace: loop around to the next input char.\n    }\n    return default_val;  // No more input remaining.\n  }\n\n  while (true) {\n    var byte1 \x3d getByte(-1);\n    var byte2 \x3d getByte(0);\n    var byte3 \x3d getByte(64);\n    var byte4 \x3d getByte(64);\n\n    // The common case is that all four bytes are present, so if we have byte4\n    // we can skip over the truncated input special case handling.\n    if (byte4 \x3d\x3d\x3d 64) {\n      if (byte1 \x3d\x3d\x3d -1) {\n        return;  // Terminal case: no input left to decode.\n      }\n      // Here we know an intermediate number of bytes are missing.\n      // The defaults for byte2, byte3 and byte4 apply the inferred padding\n      // rules per the public API documentation. i.e: 1 byte\n      // missing should yield 2 bytes of output, but 2 or 3 missing bytes yield\n      // a single byte of output. (Recall that 64 corresponds the padding char).\n    }\n\n    var outByte1 \x3d (byte1 \x3c\x3c 2) | (byte2 \x3e\x3e 4);\n    pushByte(outByte1);\n\n    if (byte3 !\x3d 64) {\n      var outByte2 \x3d ((byte2 \x3c\x3c 4) \x26 0xF0) | (byte3 \x3e\x3e 2);\n      pushByte(outByte2);\n\n      if (byte4 !\x3d 64) {\n        var outByte3 \x3d ((byte3 \x3c\x3c 6) \x26 0xC0) | byte4;\n        pushByte(outByte3);\n      }\n    }\n  }\n};\n\n\n/**\n * Lazy static initialization function. Called before\n * accessing any of the static map variables.\n * @private\n */\ngoog.crypt.base64.init_ \x3d function() {\n  if (!goog.crypt.base64.byteToCharMap_) {\n    goog.crypt.base64.byteToCharMap_ \x3d {};\n    goog.crypt.base64.charToByteMap_ \x3d {};\n    goog.crypt.base64.byteToCharMapWebSafe_ \x3d {};\n\n    // We want quick mappings back and forth, so we precompute two maps.\n    for (var i \x3d 0; i \x3c goog.crypt.base64.ENCODED_VALS.length; i++) {\n      goog.crypt.base64.byteToCharMap_[i] \x3d\n          goog.crypt.base64.ENCODED_VALS.charAt(i);\n      goog.crypt.base64.charToByteMap_[goog.crypt.base64.byteToCharMap_[i]] \x3d i;\n      goog.crypt.base64.byteToCharMapWebSafe_[i] \x3d\n          goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(i);\n\n      // Be forgiving when decoding and correctly decode both encodings.\n      if (i \x3e\x3d goog.crypt.base64.ENCODED_VALS_BASE.length) {\n        goog.crypt.base64\n            .charToByteMap_[goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(i)] \x3d\n            i;\n      }\n    }\n  }\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/crypt/base64.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/jspb/binary/utils.js";
eval("/**\n * @fileoverview This file contains helper code used by jspb.BinaryReader\n * and BinaryWriter.\n *\n * @author aappleby@google.com (Austin Appleby)\n */\n\ngoog.provide(\x27jspb.utils\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.crypt\x27);\ngoog.require(\x27goog.crypt.base64\x27);\ngoog.require(\x27goog.string\x27);\ngoog.require(\x27jspb.BinaryConstants\x27);\n\n\n/**\n * Javascript can\x27t natively handle 64-bit data types, so to manipulate them we\n * have to split them into two 32-bit halves and do the math manually.\n *\n * Instead of instantiating and passing small structures around to do this, we\n * instead just use two global temporary values. This one stores the low 32\n * bits of a split value - for example, if the original value was a 64-bit\n * integer, this temporary value will contain the low 32 bits of that integer.\n * If the original value was a double, this temporary value will contain the\n * low 32 bits of the binary representation of that double, etcetera.\n * @type {number}\n */\njspb.utils.split64Low \x3d 0;\n\n\n/**\n * And correspondingly, this temporary variable will contain the high 32 bits\n * of whatever value was split.\n * @type {number}\n */\njspb.utils.split64High \x3d 0;\n\n\n/**\n * Splits an unsigned Javascript integer into two 32-bit halves and stores it\n * in the temp values above.\n * @param {number} value The number to split.\n */\njspb.utils.splitUint64 \x3d function(value) {\n  // Extract low 32 bits and high 32 bits as unsigned integers.\n  var lowBits \x3d value \x3e\x3e\x3e 0;\n  var highBits \x3d Math.floor((value - lowBits) /\n                            jspb.BinaryConstants.TWO_TO_32) \x3e\x3e\x3e 0;\n\n  jspb.utils.split64Low \x3d lowBits;\n  jspb.utils.split64High \x3d highBits;\n};\n\n\n/**\n * Splits a signed Javascript integer into two 32-bit halves and stores it in\n * the temp values above.\n * @param {number} value The number to split.\n */\njspb.utils.splitInt64 \x3d function(value) {\n  // Convert to sign-magnitude representation.\n  var sign \x3d (value \x3c 0);\n  value \x3d Math.abs(value);\n\n  // Extract low 32 bits and high 32 bits as unsigned integers.\n  var lowBits \x3d value \x3e\x3e\x3e 0;\n  var highBits \x3d Math.floor((value - lowBits) /\n                            jspb.BinaryConstants.TWO_TO_32);\n  highBits \x3d highBits \x3e\x3e\x3e 0;\n\n  // Perform two\x27s complement conversion if the sign bit was set.\n  if (sign) {\n    highBits \x3d ~highBits \x3e\x3e\x3e 0;\n    lowBits \x3d ~lowBits \x3e\x3e\x3e 0;\n    lowBits +\x3d 1;\n    if (lowBits \x3e 0xFFFFFFFF) {\n      lowBits \x3d 0;\n      highBits++;\n      if (highBits \x3e 0xFFFFFFFF) highBits \x3d 0;\n    }\n  }\n\n  jspb.utils.split64Low \x3d lowBits;\n  jspb.utils.split64High \x3d highBits;\n};\n\n\n/**\n * Convers a signed Javascript integer into zigzag format, splits it into two\n * 32-bit halves, and stores it in the temp values above.\n * @param {number} value The number to split.\n */\njspb.utils.splitZigzag64 \x3d function(value) {\n  // Convert to sign-magnitude and scale by 2 before we split the value.\n  var sign \x3d (value \x3c 0);\n  value \x3d Math.abs(value) * 2;\n\n  jspb.utils.splitUint64(value);\n  var lowBits \x3d jspb.utils.split64Low;\n  var highBits \x3d jspb.utils.split64High;\n\n  // If the value is negative, subtract 1 from the split representation so we\n  // don\x27t lose the sign bit due to precision issues.\n  if (sign) {\n    if (lowBits \x3d\x3d 0) {\n      if (highBits \x3d\x3d 0) {\n        lowBits \x3d 0xFFFFFFFF;\n        highBits \x3d 0xFFFFFFFF;\n      } else {\n        highBits--;\n        lowBits \x3d 0xFFFFFFFF;\n      }\n    } else {\n      lowBits--;\n    }\n  }\n\n  jspb.utils.split64Low \x3d lowBits;\n  jspb.utils.split64High \x3d highBits;\n};\n\n\n/**\n * Converts a floating-point number into 32-bit IEEE representation and stores\n * it in the temp values above.\n * @param {number} value\n */\njspb.utils.splitFloat32 \x3d function(value) {\n  var sign \x3d (value \x3c 0) ? 1 : 0;\n  value \x3d sign ? -value : value;\n  var exp;\n  var mant;\n\n  // Handle zeros.\n  if (value \x3d\x3d\x3d 0) {\n    if ((1 / value) \x3e 0) {\n      // Positive zero.\n      jspb.utils.split64High \x3d 0;\n      jspb.utils.split64Low \x3d 0x00000000;\n    } else {\n      // Negative zero.\n      jspb.utils.split64High \x3d 0;\n      jspb.utils.split64Low \x3d 0x80000000;\n    }\n    return;\n  }\n\n  // Handle nans.\n  if (isNaN(value)) {\n    jspb.utils.split64High \x3d 0;\n    jspb.utils.split64Low \x3d 0x7FFFFFFF;\n    return;\n  }\n\n  // Handle infinities.\n  if (value \x3e jspb.BinaryConstants.FLOAT32_MAX) {\n    jspb.utils.split64High \x3d 0;\n    jspb.utils.split64Low \x3d ((sign \x3c\x3c 31) | (0x7F800000)) \x3e\x3e\x3e 0;\n    return;\n  }\n\n  // Handle denormals.\n  if (value \x3c jspb.BinaryConstants.FLOAT32_MIN) {\n    // Number is a denormal.\n    mant \x3d Math.round(value / Math.pow(2, -149));\n    jspb.utils.split64High \x3d 0;\n    jspb.utils.split64Low \x3d ((sign \x3c\x3c 31) | mant) \x3e\x3e\x3e 0;\n    return;\n  }\n\n  exp \x3d Math.floor(Math.log(value) / Math.LN2);\n  mant \x3d value * Math.pow(2, -exp);\n  mant \x3d Math.round(mant * jspb.BinaryConstants.TWO_TO_23) \x26 0x7FFFFF;\n\n  jspb.utils.split64High \x3d 0;\n  jspb.utils.split64Low \x3d ((sign \x3c\x3c 31) | ((exp + 127) \x3c\x3c 23) | mant) \x3e\x3e\x3e 0;\n};\n\n\n/**\n * Converts a floating-point number into 64-bit IEEE representation and stores\n * it in the temp values above.\n * @param {number} value\n */\njspb.utils.splitFloat64 \x3d function(value) {\n  var sign \x3d (value \x3c 0) ? 1 : 0;\n  value \x3d sign ? -value : value;\n\n  // Handle zeros.\n  if (value \x3d\x3d\x3d 0) {\n    if ((1 / value) \x3e 0) {\n      // Positive zero.\n      jspb.utils.split64High \x3d 0x00000000;\n      jspb.utils.split64Low \x3d 0x00000000;\n    } else {\n      // Negative zero.\n      jspb.utils.split64High \x3d 0x80000000;\n      jspb.utils.split64Low \x3d 0x00000000;\n    }\n    return;\n  }\n\n  // Handle nans.\n  if (isNaN(value)) {\n    jspb.utils.split64High \x3d 0x7FFFFFFF;\n    jspb.utils.split64Low \x3d 0xFFFFFFFF;\n    return;\n  }\n\n  // Handle infinities.\n  if (value \x3e jspb.BinaryConstants.FLOAT64_MAX) {\n    jspb.utils.split64High \x3d ((sign \x3c\x3c 31) | (0x7FF00000)) \x3e\x3e\x3e 0;\n    jspb.utils.split64Low \x3d 0;\n    return;\n  }\n\n  // Handle denormals.\n  if (value \x3c jspb.BinaryConstants.FLOAT64_MIN) {\n    // Number is a denormal.\n    var mant \x3d value / Math.pow(2, -1074);\n    var mantHigh \x3d (mant / jspb.BinaryConstants.TWO_TO_32);\n    jspb.utils.split64High \x3d ((sign \x3c\x3c 31) | mantHigh) \x3e\x3e\x3e 0;\n    jspb.utils.split64Low \x3d (mant \x3e\x3e\x3e 0);\n    return;\n  }\n\n  var exp \x3d Math.floor(Math.log(value) / Math.LN2);\n  if (exp \x3d\x3d 1024) exp \x3d 1023;\n  var mant \x3d value * Math.pow(2, -exp);\n\n  var mantHigh \x3d (mant * jspb.BinaryConstants.TWO_TO_20) \x26 0xFFFFF;\n  var mantLow \x3d (mant * jspb.BinaryConstants.TWO_TO_52) \x3e\x3e\x3e 0;\n\n  jspb.utils.split64High \x3d\n      ((sign \x3c\x3c 31) | ((exp + 1023) \x3c\x3c 20) | mantHigh) \x3e\x3e\x3e 0;\n  jspb.utils.split64Low \x3d mantLow;\n};\n\n\n/**\n * Converts an 8-character hash string into two 32-bit numbers and stores them\n * in the temp values above.\n * @param {string} hash\n */\njspb.utils.splitHash64 \x3d function(hash) {\n  var a \x3d hash.charCodeAt(0);\n  var b \x3d hash.charCodeAt(1);\n  var c \x3d hash.charCodeAt(2);\n  var d \x3d hash.charCodeAt(3);\n  var e \x3d hash.charCodeAt(4);\n  var f \x3d hash.charCodeAt(5);\n  var g \x3d hash.charCodeAt(6);\n  var h \x3d hash.charCodeAt(7);\n\n  jspb.utils.split64Low \x3d (a + (b \x3c\x3c 8) + (c \x3c\x3c 16) + (d \x3c\x3c 24)) \x3e\x3e\x3e 0;\n  jspb.utils.split64High \x3d (e + (f \x3c\x3c 8) + (g \x3c\x3c 16) + (h \x3c\x3c 24)) \x3e\x3e\x3e 0;\n};\n\n\n/**\n * Joins two 32-bit values into a 64-bit unsigned integer. Precision will be\n * lost if the result is greater than 2^52.\n * @param {number} bitsLow\n * @param {number} bitsHigh\n * @return {number}\n */\njspb.utils.joinUint64 \x3d function(bitsLow, bitsHigh) {\n  return bitsHigh * jspb.BinaryConstants.TWO_TO_32 + bitsLow;\n};\n\n\n/**\n * Joins two 32-bit values into a 64-bit signed integer. Precision will be lost\n * if the result is greater than 2^52.\n * @param {number} bitsLow\n * @param {number} bitsHigh\n * @return {number}\n */\njspb.utils.joinInt64 \x3d function(bitsLow, bitsHigh) {\n  // If the high bit is set, do a manual two\x27s complement conversion.\n  var sign \x3d (bitsHigh \x26 0x80000000);\n  if (sign) {\n    bitsLow \x3d (~bitsLow + 1) \x3e\x3e\x3e 0;\n    bitsHigh \x3d ~bitsHigh \x3e\x3e\x3e 0;\n    if (bitsLow \x3d\x3d 0) {\n      bitsHigh \x3d (bitsHigh + 1) \x3e\x3e\x3e 0;\n    }\n  }\n\n  var result \x3d jspb.utils.joinUint64(bitsLow, bitsHigh);\n  return sign ? -result : result;\n};\n\n\n/**\n * Joins two 32-bit values into a 64-bit unsigned integer and applies zigzag\n * decoding. Precision will be lost if the result is greater than 2^52.\n * @param {number} bitsLow\n * @param {number} bitsHigh\n * @return {number}\n */\njspb.utils.joinZigzag64 \x3d function(bitsLow, bitsHigh) {\n  // Extract the sign bit and shift right by one.\n  var sign \x3d bitsLow \x26 1;\n  bitsLow \x3d ((bitsLow \x3e\x3e\x3e 1) | (bitsHigh \x3c\x3c 31)) \x3e\x3e\x3e 0;\n  bitsHigh \x3d bitsHigh \x3e\x3e\x3e 1;\n\n  // Increment the split value if the sign bit was set.\n  if (sign) {\n    bitsLow \x3d (bitsLow + 1) \x3e\x3e\x3e 0;\n    if (bitsLow \x3d\x3d 0) {\n      bitsHigh \x3d (bitsHigh + 1) \x3e\x3e\x3e 0;\n    }\n  }\n\n  var result \x3d jspb.utils.joinUint64(bitsLow, bitsHigh);\n  return sign ? -result : result;\n};\n\n\n/**\n * Joins two 32-bit values into a 32-bit IEEE floating point number and\n * converts it back into a Javascript number.\n * @param {number} bitsLow The low 32 bits of the binary number;\n * @param {number} bitsHigh The high 32 bits of the binary number.\n * @return {number}\n */\njspb.utils.joinFloat32 \x3d function(bitsLow, bitsHigh) {\n  var sign \x3d ((bitsLow \x3e\x3e 31) * 2 + 1);\n  var exp \x3d (bitsLow \x3e\x3e\x3e 23) \x26 0xFF;\n  var mant \x3d bitsLow \x26 0x7FFFFF;\n\n  if (exp \x3d\x3d 0xFF) {\n    if (mant) {\n      return NaN;\n    } else {\n      return sign * Infinity;\n    }\n  }\n\n  if (exp \x3d\x3d 0) {\n    // Denormal.\n    return sign * Math.pow(2, -149) * mant;\n  } else {\n    return sign * Math.pow(2, exp - 150) *\n           (mant + Math.pow(2, 23));\n  }\n};\n\n\n/**\n * Joins two 32-bit values into a 64-bit IEEE floating point number and\n * converts it back into a Javascript number.\n * @param {number} bitsLow The low 32 bits of the binary number;\n * @param {number} bitsHigh The high 32 bits of the binary number.\n * @return {number}\n */\njspb.utils.joinFloat64 \x3d function(bitsLow, bitsHigh) {\n  var sign \x3d ((bitsHigh \x3e\x3e 31) * 2 + 1);\n  var exp \x3d (bitsHigh \x3e\x3e\x3e 20) \x26 0x7FF;\n  var mant \x3d jspb.BinaryConstants.TWO_TO_32 * (bitsHigh \x26 0xFFFFF) + bitsLow;\n\n  if (exp \x3d\x3d 0x7FF) {\n    if (mant) {\n      return NaN;\n    } else {\n      return sign * Infinity;\n    }\n  }\n\n  if (exp \x3d\x3d 0) {\n    // Denormal.\n    return sign * Math.pow(2, -1074) * mant;\n  } else {\n    return sign * Math.pow(2, exp - 1075) *\n           (mant + jspb.BinaryConstants.TWO_TO_52);\n  }\n};\n\n\n/**\n * Joins two 32-bit values into an 8-character hash string.\n * @param {number} bitsLow\n * @param {number} bitsHigh\n * @return {string}\n */\njspb.utils.joinHash64 \x3d function(bitsLow, bitsHigh) {\n  var a \x3d (bitsLow \x3e\x3e\x3e 0) \x26 0xFF;\n  var b \x3d (bitsLow \x3e\x3e\x3e 8) \x26 0xFF;\n  var c \x3d (bitsLow \x3e\x3e\x3e 16) \x26 0xFF;\n  var d \x3d (bitsLow \x3e\x3e\x3e 24) \x26 0xFF;\n  var e \x3d (bitsHigh \x3e\x3e\x3e 0) \x26 0xFF;\n  var f \x3d (bitsHigh \x3e\x3e\x3e 8) \x26 0xFF;\n  var g \x3d (bitsHigh \x3e\x3e\x3e 16) \x26 0xFF;\n  var h \x3d (bitsHigh \x3e\x3e\x3e 24) \x26 0xFF;\n\n  return String.fromCharCode(a, b, c, d, e, f, g, h);\n};\n\n\n/**\n * Individual digits for number-\x3estring conversion.\n * @const {!Array\x3cstring\x3e}\n */\njspb.utils.DIGITS \x3d [\n  \x270\x27, \x271\x27, \x272\x27, \x273\x27, \x274\x27, \x275\x27, \x276\x27, \x277\x27,\n  \x278\x27, \x279\x27, \x27a\x27, \x27b\x27, \x27c\x27, \x27d\x27, \x27e\x27, \x27f\x27\n];\n\n\n/**\n * Losslessly converts a 64-bit unsigned integer in 32:32 split representation\n * into a decimal string.\n * @param {number} bitsLow The low 32 bits of the binary number;\n * @param {number} bitsHigh The high 32 bits of the binary number.\n * @return {string} The binary number represented as a string.\n */\njspb.utils.joinUnsignedDecimalString \x3d function(bitsLow, bitsHigh) {\n  // Skip the expensive conversion if the number is small enough to use the\n  // built-in conversions.\n  if (bitsHigh \x3c\x3d 0x1FFFFF) {\n    return \x27\x27 + (jspb.BinaryConstants.TWO_TO_32 * bitsHigh + bitsLow);\n  }\n\n  // What this code is doing is essentially converting the input number from\n  // base-2 to base-1e7, which allows us to represent the 64-bit range with\n  // only 3 (very large) digits. Those digits are then trivial to convert to\n  // a base-10 string.\n\n  // The magic numbers used here are -\n  // 2^24 \x3d 16777216 \x3d (1,6777216) in base-1e7.\n  // 2^48 \x3d 281474976710656 \x3d (2,8147497,6710656) in base-1e7.\n\n  // Split 32:32 representation into 16:24:24 representation so our\n  // intermediate digits don\x27t overflow.\n  var low \x3d bitsLow \x26 0xFFFFFF;\n  var mid \x3d (((bitsLow \x3e\x3e\x3e 24) | (bitsHigh \x3c\x3c 8)) \x3e\x3e\x3e 0) \x26 0xFFFFFF;\n  var high \x3d (bitsHigh \x3e\x3e 16) \x26 0xFFFF;\n\n  // Assemble our three base-1e7 digits, ignoring carries. The maximum\n  // value in a digit at this step is representable as a 48-bit integer, which\n  // can be stored in a 64-bit floating point number.\n  var digitA \x3d low + (mid * 6777216) + (high * 6710656);\n  var digitB \x3d mid + (high * 8147497);\n  var digitC \x3d (high * 2);\n\n  // Apply carries from A to B and from B to C.\n  var base \x3d 10000000;\n  if (digitA \x3e\x3d base) {\n    digitB +\x3d Math.floor(digitA / base);\n    digitA %\x3d base;\n  }\n\n  if (digitB \x3e\x3d base) {\n    digitC +\x3d Math.floor(digitB / base);\n    digitB %\x3d base;\n  }\n\n  // Convert base-1e7 digits to base-10, omitting leading zeroes.\n  var table \x3d jspb.utils.DIGITS;\n  var start \x3d false;\n  var result \x3d \x27\x27;\n\n  function emit(digit) {\n    var temp \x3d base;\n    for (var i \x3d 0; i \x3c 7; i++) {\n      temp /\x3d 10;\n      var decimalDigit \x3d ((digit / temp) % 10) \x3e\x3e\x3e 0;\n      if ((decimalDigit \x3d\x3d 0) \x26\x26 !start) continue;\n      start \x3d true;\n      result +\x3d table[decimalDigit];\n    }\n  }\n\n  if (digitC || start) emit(digitC);\n  if (digitB || start) emit(digitB);\n  if (digitA || start) emit(digitA);\n\n  return result;\n};\n\n\n/**\n * Losslessly converts a 64-bit signed integer in 32:32 split representation\n * into a decimal string.\n * @param {number} bitsLow The low 32 bits of the binary number;\n * @param {number} bitsHigh The high 32 bits of the binary number.\n * @return {string} The binary number represented as a string.\n */\njspb.utils.joinSignedDecimalString \x3d function(bitsLow, bitsHigh) {\n  // If we\x27re treating the input as a signed value and the high bit is set, do\n  // a manual two\x27s complement conversion before the decimal conversion.\n  var negative \x3d (bitsHigh \x26 0x80000000);\n  if (negative) {\n    bitsLow \x3d (~bitsLow + 1) \x3e\x3e\x3e 0;\n    var carry \x3d (bitsLow \x3d\x3d 0) ? 1 : 0;\n    bitsHigh \x3d (~bitsHigh + carry) \x3e\x3e\x3e 0;\n  }\n\n  var result \x3d jspb.utils.joinUnsignedDecimalString(bitsLow, bitsHigh);\n  return negative ? \x27-\x27 + result : result;\n};\n\n\n/**\n * Convert an 8-character hash string representing either a signed or unsigned\n * 64-bit integer into its decimal representation without losing accuracy.\n * @param {string} hash The hash string to convert.\n * @param {boolean} signed True if we should treat the hash string as encoding\n *     a signed integer.\n * @return {string}\n */\njspb.utils.hash64ToDecimalString \x3d function(hash, signed) {\n  jspb.utils.splitHash64(hash);\n  var bitsLow \x3d jspb.utils.split64Low;\n  var bitsHigh \x3d jspb.utils.split64High;\n  return signed ?\n      jspb.utils.joinSignedDecimalString(bitsLow, bitsHigh) :\n      jspb.utils.joinUnsignedDecimalString(bitsLow, bitsHigh);\n};\n\n\n/**\n * Converts an array of 8-character hash strings into their decimal\n * representations.\n * @param {!Array\x3cstring\x3e} hashes The array of hash strings to convert.\n * @param {boolean} signed True if we should treat the hash string as encoding\n *     a signed integer.\n * @return {!Array\x3cstring\x3e}\n */\njspb.utils.hash64ArrayToDecimalStrings \x3d function(hashes, signed) {\n  var result \x3d new Array(hashes.length);\n  for (var i \x3d 0; i \x3c hashes.length; i++) {\n    result[i] \x3d jspb.utils.hash64ToDecimalString(hashes[i], signed);\n  }\n  return result;\n};\n\n\n/**\n * Converts a signed or unsigned decimal string into its hash string\n * representation.\n * @param {string} dec\n * @return {string}\n */\njspb.utils.decimalStringToHash64 \x3d function(dec) {\n  goog.asserts.assert(dec.length \x3e 0);\n\n  // Check for minus sign.\n  var minus \x3d false;\n  if (dec[0] \x3d\x3d\x3d \x27-\x27) {\n    minus \x3d true;\n    dec \x3d dec.slice(1);\n  }\n\n  // Store result as a byte array.\n  var resultBytes \x3d [0, 0, 0, 0, 0, 0, 0, 0];\n\n  // Set result to m*result + c.\n  function muladd(m, c) {\n    for (var i \x3d 0; i \x3c 8 \x26\x26 (m !\x3d\x3d 1 || c \x3e 0); i++) {\n      var r \x3d m * resultBytes[i] + c;\n      resultBytes[i] \x3d r \x26 0xFF;\n      c \x3d r \x3e\x3e\x3e 8;\n    }\n  }\n\n  // Negate the result bits.\n  function neg() {\n    for (var i \x3d 0; i \x3c 8; i++) {\n      resultBytes[i] \x3d (~resultBytes[i]) \x26 0xFF;\n    }\n  }\n\n  // For each decimal digit, set result to 10*result + digit.\n  for (var i \x3d 0; i \x3c dec.length; i++) {\n    muladd(10, jspb.utils.DIGITS.indexOf(dec[i]));\n  }\n\n  // If there\x27s a minus sign, convert into two\x27s complement.\n  if (minus) {\n    neg();\n    muladd(1, 1);\n  }\n\n  return goog.crypt.byteArrayToString(resultBytes);\n};\n\n\n/**\n * Converts a signed or unsigned decimal string into two 32-bit halves, and\n * stores them in the temp variables listed above.\n * @param {string} value The decimal string to convert.\n */\njspb.utils.splitDecimalString \x3d function(value) {\n  jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(value));\n};\n\n\n/**\n * Converts an 8-character hash string into its hexadecimal representation.\n * @param {string} hash\n * @return {string}\n */\njspb.utils.hash64ToHexString \x3d function(hash) {\n  var temp \x3d new Array(18);\n  temp[0] \x3d \x270\x27;\n  temp[1] \x3d \x27x\x27;\n\n  for (var i \x3d 0; i \x3c 8; i++) {\n    var c \x3d hash.charCodeAt(7 - i);\n    temp[i * 2 + 2] \x3d jspb.utils.DIGITS[c \x3e\x3e 4];\n    temp[i * 2 + 3] \x3d jspb.utils.DIGITS[c \x26 0xF];\n  }\n\n  var result \x3d temp.join(\x27\x27);\n  return result;\n};\n\n\n/**\n * Converts a \x270x\x3c16 digits\x3e\x27 hex string into its hash string representation.\n * @param {string} hex\n * @return {string}\n */\njspb.utils.hexStringToHash64 \x3d function(hex) {\n  hex \x3d hex.toLowerCase();\n  goog.asserts.assert(hex.length \x3d\x3d 18);\n  goog.asserts.assert(hex[0] \x3d\x3d \x270\x27);\n  goog.asserts.assert(hex[1] \x3d\x3d \x27x\x27);\n\n  var result \x3d \x27\x27;\n  for (var i \x3d 0; i \x3c 8; i++) {\n    var hi \x3d jspb.utils.DIGITS.indexOf(hex[i * 2 + 2]);\n    var lo \x3d jspb.utils.DIGITS.indexOf(hex[i * 2 + 3]);\n    result \x3d String.fromCharCode(hi * 16 + lo) + result;\n  }\n\n  return result;\n};\n\n\n/**\n * Convert an 8-character hash string representing either a signed or unsigned\n * 64-bit integer into a Javascript number. Will lose accuracy if the result is\n * larger than 2^52.\n * @param {string} hash The hash string to convert.\n * @param {boolean} signed True if the has should be interpreted as a signed\n *     number.\n * @return {number}\n */\njspb.utils.hash64ToNumber \x3d function(hash, signed) {\n  jspb.utils.splitHash64(hash);\n  var bitsLow \x3d jspb.utils.split64Low;\n  var bitsHigh \x3d jspb.utils.split64High;\n  return signed ? jspb.utils.joinInt64(bitsLow, bitsHigh) :\n                  jspb.utils.joinUint64(bitsLow, bitsHigh);\n};\n\n\n/**\n * Convert a Javascript number into an 8-character hash string. Will lose\n * precision if the value is non-integral or greater than 2^64.\n * @param {number} value The integer to convert.\n * @return {string}\n */\njspb.utils.numberToHash64 \x3d function(value) {\n  jspb.utils.splitInt64(value);\n  return jspb.utils.joinHash64(jspb.utils.split64Low,\n                                  jspb.utils.split64High);\n};\n\n\n/**\n * Counts the number of contiguous varints in a buffer.\n * @param {!Uint8Array} buffer The buffer to scan.\n * @param {number} start The starting point in the buffer to scan.\n * @param {number} end The end point in the buffer to scan.\n * @return {number} The number of varints in the buffer.\n */\njspb.utils.countVarints \x3d function(buffer, start, end) {\n  // Count how many high bits of each byte were set in the buffer.\n  var count \x3d 0;\n  for (var i \x3d start; i \x3c end; i++) {\n    count +\x3d buffer[i] \x3e\x3e 7;\n  }\n\n  // The number of varints in the buffer equals the size of the buffer minus\n  // the number of non-terminal bytes in the buffer (those with the high bit\n  // set).\n  return (end - start) - count;\n};\n\n\n/**\n * Counts the number of contiguous varint fields with the given field number in\n * the buffer.\n * @param {!Uint8Array} buffer The buffer to scan.\n * @param {number} start The starting point in the buffer to scan.\n * @param {number} end The end point in the buffer to scan.\n * @param {number} field The field number to count.\n * @return {number} The number of matching fields in the buffer.\n */\njspb.utils.countVarintFields \x3d function(buffer, start, end, field) {\n  var count \x3d 0;\n  var cursor \x3d start;\n  var tag \x3d field * 8 + jspb.BinaryConstants.WireType.VARINT;\n\n  if (tag \x3c 128) {\n    // Single-byte field tag, we can use a slightly quicker count.\n    while (cursor \x3c end) {\n      // Skip the field tag, or exit if we find a non-matching tag.\n      if (buffer[cursor++] !\x3d tag) return count;\n\n      // Field tag matches, we\x27ve found a valid field.\n      count++;\n\n      // Skip the varint.\n      while (1) {\n        var x \x3d buffer[cursor++];\n        if ((x \x26 0x80) \x3d\x3d 0) break;\n      }\n    }\n  } else {\n    while (cursor \x3c end) {\n      // Skip the field tag, or exit if we find a non-matching tag.\n      var temp \x3d tag;\n      while (temp \x3e 128) {\n        if (buffer[cursor] !\x3d ((temp \x26 0x7F) | 0x80)) return count;\n        cursor++;\n        temp \x3e\x3e\x3d 7;\n      }\n      if (buffer[cursor++] !\x3d temp) return count;\n\n      // Field tag matches, we\x27ve found a valid field.\n      count++;\n\n      // Skip the varint.\n      while (1) {\n        var x \x3d buffer[cursor++];\n        if ((x \x26 0x80) \x3d\x3d 0) break;\n      }\n    }\n  }\n  return count;\n};\n\n\n/**\n * Counts the number of contiguous fixed32 fields with the given tag in the\n * buffer.\n * @param {!Uint8Array} buffer The buffer to scan.\n * @param {number} start The starting point in the buffer to scan.\n * @param {number} end The end point in the buffer to scan.\n * @param {number} tag The tag value to count.\n * @param {number} stride The number of bytes to skip per field.\n * @return {number} The number of fields with a matching tag in the buffer.\n * @private\n */\njspb.utils.countFixedFields_ \x3d\n    function(buffer, start, end, tag, stride) {\n  var count \x3d 0;\n  var cursor \x3d start;\n\n  if (tag \x3c 128) {\n    // Single-byte field tag, we can use a slightly quicker count.\n    while (cursor \x3c end) {\n      // Skip the field tag, or exit if we find a non-matching tag.\n      if (buffer[cursor++] !\x3d tag) return count;\n\n      // Field tag matches, we\x27ve found a valid field.\n      count++;\n\n      // Skip the value.\n      cursor +\x3d stride;\n    }\n  } else {\n    while (cursor \x3c end) {\n      // Skip the field tag, or exit if we find a non-matching tag.\n      var temp \x3d tag;\n      while (temp \x3e 128) {\n        if (buffer[cursor++] !\x3d ((temp \x26 0x7F) | 0x80)) return count;\n        temp \x3e\x3e\x3d 7;\n      }\n      if (buffer[cursor++] !\x3d temp) return count;\n\n      // Field tag matches, we\x27ve found a valid field.\n      count++;\n\n      // Skip the value.\n      cursor +\x3d stride;\n    }\n  }\n  return count;\n};\n\n\n/**\n * Counts the number of contiguous fixed32 fields with the given field number\n * in the buffer.\n * @param {!Uint8Array} buffer The buffer to scan.\n * @param {number} start The starting point in the buffer to scan.\n * @param {number} end The end point in the buffer to scan.\n * @param {number} field The field number to count.\n * @return {number} The number of matching fields in the buffer.\n */\njspb.utils.countFixed32Fields \x3d function(buffer, start, end, field) {\n  var tag \x3d field * 8 + jspb.BinaryConstants.WireType.FIXED32;\n  return jspb.utils.countFixedFields_(buffer, start, end, tag, 4);\n};\n\n\n/**\n * Counts the number of contiguous fixed64 fields with the given field number\n * in the buffer.\n * @param {!Uint8Array} buffer The buffer to scan.\n * @param {number} start The starting point in the buffer to scan.\n * @param {number} end The end point in the buffer to scan.\n * @param {number} field The field number to count\n * @return {number} The number of matching fields in the buffer.\n */\njspb.utils.countFixed64Fields \x3d function(buffer, start, end, field) {\n  var tag \x3d field * 8 + jspb.BinaryConstants.WireType.FIXED64;\n  return jspb.utils.countFixedFields_(buffer, start, end, tag, 8);\n};\n\n\n/**\n * Counts the number of contiguous delimited fields with the given field number\n * in the buffer.\n * @param {!Uint8Array} buffer The buffer to scan.\n * @param {number} start The starting point in the buffer to scan.\n * @param {number} end The end point in the buffer to scan.\n * @param {number} field The field number to count.\n * @return {number} The number of matching fields in the buffer.\n */\njspb.utils.countDelimitedFields \x3d function(buffer, start, end, field) {\n  var count \x3d 0;\n  var cursor \x3d start;\n  var tag \x3d field * 8 + jspb.BinaryConstants.WireType.DELIMITED;\n\n  while (cursor \x3c end) {\n    // Skip the field tag, or exit if we find a non-matching tag.\n    var temp \x3d tag;\n    while (temp \x3e 128) {\n      if (buffer[cursor++] !\x3d ((temp \x26 0x7F) | 0x80)) return count;\n      temp \x3e\x3e\x3d 7;\n    }\n    if (buffer[cursor++] !\x3d temp) return count;\n\n    // Field tag matches, we\x27ve found a valid field.\n    count++;\n\n    // Decode the length prefix.\n    var length \x3d 0;\n    var shift \x3d 1;\n    while (1) {\n      temp \x3d buffer[cursor++];\n      length +\x3d (temp \x26 0x7f) * shift;\n      shift *\x3d 128;\n      if ((temp \x26 0x80) \x3d\x3d 0) break;\n    }\n\n    // Advance the cursor past the blob.\n    cursor +\x3d length;\n  }\n  return count;\n};\n\n\n/**\n * String-ify bytes for text format. Should be optimized away in non-debug.\n * The returned string uses \\xXX escapes for all values and is itself quoted.\n * [1, 31] serializes to \x27\x22\\x01\\x1f\x22\x27.\n * @param {jspb.ByteSource} byteSource The bytes to serialize.\n * @return {string} Stringified bytes for text format.\n */\njspb.utils.debugBytesToTextFormat \x3d function(byteSource) {\n  var s \x3d \x27\x22\x27;\n  if (byteSource) {\n    var bytes \x3d jspb.utils.byteSourceToUint8Array(byteSource);\n    for (var i \x3d 0; i \x3c bytes.length; i++) {\n      s +\x3d \x27\\\\x\x27;\n      if (bytes[i] \x3c 16) s +\x3d \x270\x27;\n      s +\x3d bytes[i].toString(16);\n    }\n  }\n  return s + \x27\x22\x27;\n};\n\n\n/**\n * String-ify a scalar for text format. Should be optimized away in non-debug.\n * @param {string|number|boolean} scalar The scalar to stringify.\n * @return {string} Stringified scalar for text format.\n */\njspb.utils.debugScalarToTextFormat \x3d function(scalar) {\n  if (goog.isString(scalar)) {\n    return goog.string.quote(scalar);\n  } else {\n    return scalar.toString();\n  }\n};\n\n\n/**\n * Utility function: convert a string with codepoints 0--255 inclusive to a\n * Uint8Array. If any codepoints greater than 255 exist in the string, throws an\n * exception.\n * @param {string} str\n * @return {!Uint8Array}\n */\njspb.utils.stringToByteArray \x3d function(str) {\n  var arr \x3d new Uint8Array(str.length);\n  for (var i \x3d 0; i \x3c str.length; i++) {\n    var codepoint \x3d str.charCodeAt(i);\n    if (codepoint \x3e 255) {\n      throw new Error(\x27Conversion error: string contains codepoint \x27 +\n                      \x27outside of byte range\x27);\n    }\n    arr[i] \x3d codepoint;\n  }\n  return arr;\n};\n\n\n/**\n * Converts any type defined in jspb.ByteSource into a Uint8Array.\n * @param {!jspb.ByteSource} data\n * @return {!Uint8Array}\n * @suppress {invalidCasts}\n */\njspb.utils.byteSourceToUint8Array \x3d function(data) {\n  if (data.constructor \x3d\x3d\x3d Uint8Array) {\n    return /** @type {!Uint8Array} */(data);\n  }\n\n  if (data.constructor \x3d\x3d\x3d ArrayBuffer) {\n    data \x3d /** @type {!ArrayBuffer} */(data);\n    return /** @type {!Uint8Array} */(new Uint8Array(data));\n  }\n\n  if (data.constructor \x3d\x3d\x3d Array) {\n    data \x3d /** @type {!Array\x3cnumber\x3e} */(data);\n    return /** @type {!Uint8Array} */(new Uint8Array(data));\n  }\n\n  if (data.constructor \x3d\x3d\x3d String) {\n    data \x3d /** @type {string} */(data);\n    return goog.crypt.base64.decodeStringToUint8Array(data);\n  }\n\n  goog.asserts.fail(\x27Type not convertible to Uint8Array.\x27);\n  return /** @type {!Uint8Array} */(new Uint8Array(0));\n};\n\n//# sourceURL\x3dhttps://qs/javascript/apps/jspb/binary/utils.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/jspb/binary/decoder.js";
eval("/**\n * @fileoverview This file contains utilities for decoding primitive values\n * (signed and unsigned integers, varints, booleans, enums, hashes, strings,\n * and raw bytes) embedded in Uint8Arrays into their corresponding Javascript\n * types.\n *\n * Major caveat - Javascript is unable to accurately represent integers larger\n * than 2^53 due to its use of a double-precision floating point format or all\n * numbers. If you need to guarantee that 64-bit values survive with all bits\n * intact, you _must_ read them using one of the Hash64 methods, which return\n * an 8-character string.\n *\n * @author aappleby@google.com (Austin Appleby)\n */\n\ngoog.provide(\x27jspb.BinaryDecoder\x27);\ngoog.provide(\x27jspb.BinaryIterator\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.crypt\x27);\ngoog.require(\x27jspb.utils\x27);\n\n\n\n/**\n * Simple helper class for traversing the contents of repeated scalar fields.\n * that may or may not have been packed into a wire-format blob.\n * @param {?jspb.BinaryDecoder\x3d} opt_decoder\n * @param {?function(this:jspb.BinaryDecoder):(number|boolean|string)\x3d}\n *     opt_next The decoder method to use for next().\n * @param {?Array\x3cnumber|boolean|string\x3e\x3d} opt_elements\n * @constructor\n * @struct\n */\njspb.BinaryIterator \x3d function(opt_decoder, opt_next, opt_elements) {\n  /** @private {jspb.BinaryDecoder} */\n  this.decoder_ \x3d null;\n\n  /**\n   * The BinaryDecoder member function used when iterating over packed data.\n   * @private {?function(this:jspb.BinaryDecoder):(number|boolean|string)}\n   */\n  this.nextMethod_ \x3d null;\n\n  /** @private {?Array\x3cnumber|boolean|string\x3e} */\n  this.elements_ \x3d null;\n\n  /** @private {number} */\n  this.cursor_ \x3d 0;\n\n  /** @private {number|boolean|string|null} */\n  this.nextValue_ \x3d null;\n\n  /** @private {boolean} */\n  this.atEnd_ \x3d true;\n\n  this.init_(opt_decoder, opt_next, opt_elements);\n};\n\n\n/**\n * @param {?jspb.BinaryDecoder\x3d} opt_decoder\n * @param {?function(this:jspb.BinaryDecoder):(number|boolean|string)\x3d}\n *     opt_next The decoder method to use for next().\n * @param {?Array\x3cnumber|boolean|string\x3e\x3d} opt_elements\n * @private\n */\njspb.BinaryIterator.prototype.init_ \x3d\n    function(opt_decoder, opt_next, opt_elements) {\n  if (opt_decoder \x26\x26 opt_next) {\n    this.decoder_ \x3d opt_decoder;\n    this.nextMethod_ \x3d opt_next;\n  }\n  this.elements_ \x3d opt_elements || null;\n  this.cursor_ \x3d 0;\n  this.nextValue_ \x3d null;\n  this.atEnd_ \x3d !this.decoder_ \x26\x26 !this.elements_;\n\n  this.next();\n};\n\n\n/**\n * Global pool of BinaryIterator instances.\n * @private {!Array\x3c!jspb.BinaryIterator\x3e}\n */\njspb.BinaryIterator.instanceCache_ \x3d [];\n\n\n/**\n * Allocates a BinaryIterator from the cache, creating a new one if the cache\n * is empty.\n * @param {?jspb.BinaryDecoder\x3d} opt_decoder\n * @param {?function(this:jspb.BinaryDecoder):(number|boolean|string)\x3d}\n *     opt_next The decoder method to use for next().\n * @param {?Array\x3cnumber|boolean|string\x3e\x3d} opt_elements\n * @return {!jspb.BinaryIterator}\n */\njspb.BinaryIterator.alloc \x3d function(opt_decoder, opt_next, opt_elements) {\n  if (jspb.BinaryIterator.instanceCache_.length) {\n    var iterator \x3d jspb.BinaryIterator.instanceCache_.pop();\n    iterator.init_(opt_decoder, opt_next, opt_elements);\n    return iterator;\n  } else {\n    return new jspb.BinaryIterator(opt_decoder, opt_next, opt_elements);\n  }\n};\n\n\n/**\n * Puts this instance back in the instance cache.\n */\njspb.BinaryIterator.prototype.free \x3d function() {\n  this.clear();\n  if (jspb.BinaryIterator.instanceCache_.length \x3c 100) {\n    jspb.BinaryIterator.instanceCache_.push(this);\n  }\n};\n\n\n/**\n * Clears the iterator.\n */\njspb.BinaryIterator.prototype.clear \x3d function() {\n  if (this.decoder_) {\n    this.decoder_.free();\n  }\n  this.decoder_ \x3d null;\n  this.nextMethod_ \x3d null;\n  this.elements_ \x3d null;\n  this.cursor_ \x3d 0;\n  this.nextValue_ \x3d null;\n  this.atEnd_ \x3d true;\n};\n\n\n/**\n * Returns the element at the iterator, or null if the iterator is invalid or\n * past the end of the decoder/array.\n * @return {number|boolean|string|null}\n */\njspb.BinaryIterator.prototype.get \x3d function() {\n  return this.nextValue_;\n};\n\n\n/**\n * Returns true if the iterator is at the end of the decoder/array.\n * @return {boolean}\n */\njspb.BinaryIterator.prototype.atEnd \x3d function() {\n  return this.atEnd_;\n};\n\n\n/**\n * Returns the element at the iterator and steps to the next element,\n * equivalent to \x27*pointer++\x27 in C.\n * @return {number|boolean|string|null}\n */\njspb.BinaryIterator.prototype.next \x3d function() {\n  var lastValue \x3d this.nextValue_;\n  if (this.decoder_) {\n    if (this.decoder_.atEnd()) {\n      this.nextValue_ \x3d null;\n      this.atEnd_ \x3d true;\n    } else {\n      this.nextValue_ \x3d this.nextMethod_.call(this.decoder_);\n    }\n  } else if (this.elements_) {\n    if (this.cursor_ \x3d\x3d this.elements_.length) {\n      this.nextValue_ \x3d null;\n      this.atEnd_ \x3d true;\n    } else {\n      this.nextValue_ \x3d this.elements_[this.cursor_++];\n    }\n  }\n  return lastValue;\n};\n\n\n\n/**\n * BinaryDecoder implements the decoders for all the wire types specified in\n * https://developers.google.com/protocol-buffers/docs/encoding.\n *\n * @param {jspb.ByteSource\x3d} opt_bytes The bytes we\x27re reading from.\n * @param {number\x3d} opt_start The optional offset to start reading at.\n * @param {number\x3d} opt_length The optional length of the block to read -\n *     we\x27ll throw an assertion if we go off the end of the block.\n * @constructor\n * @struct\n */\njspb.BinaryDecoder \x3d function(opt_bytes, opt_start, opt_length) {\n  /**\n   * Typed byte-wise view of the source buffer.\n   * @private {?Uint8Array}\n   */\n  this.bytes_ \x3d null;\n\n  /**\n   * Start point of the block to read.\n   * @private {number}\n   */\n  this.start_ \x3d 0;\n\n  /**\n   * End point of the block to read.\n   * @private {number}\n   */\n  this.end_ \x3d 0;\n\n  /**\n   * Current read location in bytes_.\n   * @private {number}\n   */\n  this.cursor_ \x3d 0;\n\n  /**\n   * Temporary storage for the low 32 bits of 64-bit data types that we\x27re\n   * decoding.\n   * @private {number}\n   */\n  this.tempLow_ \x3d 0;\n\n  /**\n   * Temporary storage for the high 32 bits of 64-bit data types that we\x27re\n   * decoding.\n   * @private {number}\n   */\n  this.tempHigh_ \x3d 0;\n\n  /**\n   * Set to true if this decoder encountered an error due to corrupt data.\n   * @private {boolean}\n   */\n  this.error_ \x3d false;\n\n  if (opt_bytes) {\n    this.setBlock(opt_bytes, opt_start, opt_length);\n  }\n};\n\n\n/**\n * Global pool of BinaryDecoder instances.\n * @private {!Array\x3c!jspb.BinaryDecoder\x3e}\n */\njspb.BinaryDecoder.instanceCache_ \x3d [];\n\n\n/**\n * Pops an instance off the instance cache, or creates one if the cache is\n * empty.\n * @param {jspb.ByteSource\x3d} opt_bytes The bytes we\x27re reading from.\n * @param {number\x3d} opt_start The optional offset to start reading at.\n * @param {number\x3d} opt_length The optional length of the block to read -\n *     we\x27ll throw an assertion if we go off the end of the block.\n * @return {!jspb.BinaryDecoder}\n */\njspb.BinaryDecoder.alloc \x3d function(opt_bytes, opt_start, opt_length) {\n  if (jspb.BinaryDecoder.instanceCache_.length) {\n    var newDecoder \x3d jspb.BinaryDecoder.instanceCache_.pop();\n    if (opt_bytes) {\n      newDecoder.setBlock(opt_bytes, opt_start, opt_length);\n    }\n    return newDecoder;\n  } else {\n    return new jspb.BinaryDecoder(opt_bytes, opt_start, opt_length);\n  }\n};\n\n\n/**\n * Puts this instance back in the instance cache.\n */\njspb.BinaryDecoder.prototype.free \x3d function() {\n  this.clear();\n  if (jspb.BinaryDecoder.instanceCache_.length \x3c 100) {\n    jspb.BinaryDecoder.instanceCache_.push(this);\n  }\n};\n\n\n/**\n * Makes a copy of this decoder.\n * @return {!jspb.BinaryDecoder}\n */\njspb.BinaryDecoder.prototype.clone \x3d function() {\n  return jspb.BinaryDecoder.alloc(this.bytes_,\n      this.start_, this.end_ - this.start_);\n};\n\n\n/**\n * Clears the decoder.\n */\njspb.BinaryDecoder.prototype.clear \x3d function() {\n  this.bytes_ \x3d null;\n  this.start_ \x3d 0;\n  this.end_ \x3d 0;\n  this.cursor_ \x3d 0;\n  this.error_ \x3d false;\n};\n\n\n/**\n * Returns the raw buffer.\n * @return {?Uint8Array} The raw buffer.\n */\njspb.BinaryDecoder.prototype.getBuffer \x3d function() {\n  return this.bytes_;\n};\n\n\n/**\n * Changes the block of bytes we\x27re decoding.\n * @param {!jspb.ByteSource} data The bytes we\x27re reading from.\n * @param {number\x3d} opt_start The optional offset to start reading at.\n * @param {number\x3d} opt_length The optional length of the block to read -\n *     we\x27ll throw an assertion if we go off the end of the block.\n */\njspb.BinaryDecoder.prototype.setBlock \x3d\n    function(data, opt_start, opt_length) {\n  this.bytes_ \x3d jspb.utils.byteSourceToUint8Array(data);\n  this.start_ \x3d goog.isDef(opt_start) ? opt_start : 0;\n  this.end_ \x3d\n      goog.isDef(opt_length) ? this.start_ + opt_length : this.bytes_.length;\n  this.cursor_ \x3d this.start_;\n};\n\n\n/**\n * @return {number}\n */\njspb.BinaryDecoder.prototype.getEnd \x3d function() {\n  return this.end_;\n};\n\n\n/**\n * @param {number} end\n */\njspb.BinaryDecoder.prototype.setEnd \x3d function(end) {\n  this.end_ \x3d end;\n};\n\n\n/**\n * Moves the read cursor back to the start of the block.\n */\njspb.BinaryDecoder.prototype.reset \x3d function() {\n  this.cursor_ \x3d this.start_;\n};\n\n\n/**\n * Returns the internal read cursor.\n * @return {number} The internal read cursor.\n */\njspb.BinaryDecoder.prototype.getCursor \x3d function() {\n  return this.cursor_;\n};\n\n\n/**\n * Returns the internal read cursor.\n * @param {number} cursor The new cursor.\n */\njspb.BinaryDecoder.prototype.setCursor \x3d function(cursor) {\n  this.cursor_ \x3d cursor;\n};\n\n\n/**\n * Advances the stream cursor by the given number of bytes.\n * @param {number} count The number of bytes to advance by.\n */\njspb.BinaryDecoder.prototype.advance \x3d function(count) {\n  this.cursor_ +\x3d count;\n  goog.asserts.assert(this.cursor_ \x3c\x3d this.end_);\n};\n\n\n/**\n * Returns true if this decoder is at the end of the block.\n * @return {boolean}\n */\njspb.BinaryDecoder.prototype.atEnd \x3d function() {\n  return this.cursor_ \x3d\x3d this.end_;\n};\n\n\n/**\n * Returns true if this decoder is at the end of the block.\n * @return {boolean}\n */\njspb.BinaryDecoder.prototype.pastEnd \x3d function() {\n  return this.cursor_ \x3e this.end_;\n};\n\n\n/**\n * Returns true if this decoder encountered an error due to corrupt data.\n * @return {boolean}\n */\njspb.BinaryDecoder.prototype.getError \x3d function() {\n  return this.error_ ||\n         (this.cursor_ \x3c 0) ||\n         (this.cursor_ \x3e this.end_);\n};\n\n\n/**\n * Reads an unsigned varint from the binary stream and stores it as a split\n * 64-bit integer. Since this does not convert the value to a number, no\n * precision is lost.\n *\n * It\x27s possible for an unsigned varint to be incorrectly encoded - more than\n * 64 bits\x27 worth of data could be present. If this happens, this method will\n * throw an error.\n *\n * Decoding varints requires doing some funny base-128 math - for more\n * details on the format, see\n * https://developers.google.com/protocol-buffers/docs/encoding\n *\n * @private\n */\njspb.BinaryDecoder.prototype.readSplitVarint64_ \x3d function() {\n  var temp;\n  var lowBits \x3d 0;\n  var highBits \x3d 0;\n\n  // Read the first four bytes of the varint, stopping at the terminator if we\n  // see it.\n  for (var i \x3d 0; i \x3c 4; i++) {\n    temp \x3d this.bytes_[this.cursor_++];\n    lowBits |\x3d (temp \x26 0x7F) \x3c\x3c (i * 7);\n    if (temp \x3c 128) {\n      this.tempLow_ \x3d lowBits \x3e\x3e\x3e 0;\n      this.tempHigh_ \x3d 0;\n      return;\n    }\n  }\n\n  // Read the fifth byte, which straddles the low and high dwords.\n  temp \x3d this.bytes_[this.cursor_++];\n  lowBits |\x3d (temp \x26 0x7F) \x3c\x3c 28;\n  highBits |\x3d (temp \x26 0x7F) \x3e\x3e 4;\n  if (temp \x3c 128) {\n    this.tempLow_ \x3d lowBits \x3e\x3e\x3e 0;\n    this.tempHigh_ \x3d highBits \x3e\x3e\x3e 0;\n    return;\n  }\n\n  // Read the sixth through tenth byte.\n  for (var i \x3d 0; i \x3c 5; i++) {\n    temp \x3d this.bytes_[this.cursor_++];\n    highBits |\x3d (temp \x26 0x7F) \x3c\x3c (i * 7 + 3);\n    if (temp \x3c 128) {\n      this.tempLow_ \x3d lowBits \x3e\x3e\x3e 0;\n      this.tempHigh_ \x3d highBits \x3e\x3e\x3e 0;\n      return;\n    }\n  }\n\n  // If we did not see the terminator, the encoding was invalid.\n  goog.asserts.fail(\x27Failed to read varint, encoding is invalid.\x27);\n  this.error_ \x3d true;\n};\n\n\n/**\n * Skips over a varint in the block without decoding it.\n */\njspb.BinaryDecoder.prototype.skipVarint \x3d function() {\n  while (this.bytes_[this.cursor_] \x26 0x80) {\n    this.cursor_++;\n  }\n  this.cursor_++;\n};\n\n\n/**\n * Skips backwards over a varint in the block - to do this correctly, we have\n * to know the value we\x27re skipping backwards over or things are ambiguous.\n * @param {number} value The varint value to unskip.\n */\njspb.BinaryDecoder.prototype.unskipVarint \x3d function(value) {\n  while (value \x3e 128) {\n    this.cursor_--;\n    value \x3d value \x3e\x3e\x3e 7;\n  }\n  this.cursor_--;\n};\n\n\n/**\n * Reads a 32-bit varint from the binary stream. Due to a quirk of the encoding\n * format and Javascript\x27s handling of bitwise math, this actually works\n * correctly for both signed and unsigned 32-bit varints.\n *\n * This function is called vastly more frequently than any other in\n * BinaryDecoder, so it has been unrolled and tweaked for performance.\n *\n * If there are more than 32 bits of data in the varint, it _must_ be due to\n * sign-extension. If we\x27re in debug mode and the high 32 bits don\x27t match the\n * expected sign extension, this method will throw an error.\n *\n * Decoding varints requires doing some funny base-128 math - for more\n * details on the format, see\n * https://developers.google.com/protocol-buffers/docs/encoding\n *\n * @return {number} The decoded unsigned 32-bit varint.\n */\njspb.BinaryDecoder.prototype.readUnsignedVarint32 \x3d function() {\n  var temp;\n  var bytes \x3d this.bytes_;\n\n  temp \x3d bytes[this.cursor_ + 0];\n  var x \x3d (temp \x26 0x7F);\n  if (temp \x3c 128) {\n    this.cursor_ +\x3d 1;\n    goog.asserts.assert(this.cursor_ \x3c\x3d this.end_);\n    return x;\n  }\n\n  temp \x3d bytes[this.cursor_ + 1];\n  x |\x3d (temp \x26 0x7F) \x3c\x3c 7;\n  if (temp \x3c 128) {\n    this.cursor_ +\x3d 2;\n    goog.asserts.assert(this.cursor_ \x3c\x3d this.end_);\n    return x;\n  }\n\n  temp \x3d bytes[this.cursor_ + 2];\n  x |\x3d (temp \x26 0x7F) \x3c\x3c 14;\n  if (temp \x3c 128) {\n    this.cursor_ +\x3d 3;\n    goog.asserts.assert(this.cursor_ \x3c\x3d this.end_);\n    return x;\n  }\n\n  temp \x3d bytes[this.cursor_ + 3];\n  x |\x3d (temp \x26 0x7F) \x3c\x3c 21;\n  if (temp \x3c 128) {\n    this.cursor_ +\x3d 4;\n    goog.asserts.assert(this.cursor_ \x3c\x3d this.end_);\n    return x;\n  }\n\n  temp \x3d bytes[this.cursor_ + 4];\n  x |\x3d (temp \x26 0x0F) \x3c\x3c 28;\n  if (temp \x3c 128) {\n    // We\x27re reading the high bits of an unsigned varint. The byte we just read\n    // also contains bits 33 through 35, which we\x27re going to discard.\n    this.cursor_ +\x3d 5;\n    goog.asserts.assert(this.cursor_ \x3c\x3d this.end_);\n    return x \x3e\x3e\x3e 0;\n  }\n\n  // If we get here, we need to truncate coming bytes. However we need to make\n  // sure cursor place is correct.\n  this.cursor_ +\x3d 5;\n  if (bytes[this.cursor_++] \x3e\x3d 128 \x26\x26\n      bytes[this.cursor_++] \x3e\x3d 128 \x26\x26\n      bytes[this.cursor_++] \x3e\x3d 128 \x26\x26\n      bytes[this.cursor_++] \x3e\x3d 128 \x26\x26\n      bytes[this.cursor_++] \x3e\x3d 128) {\n    // If we get here, the varint is too long.\n    goog.asserts.assert(false);\n  }\n\n  goog.asserts.assert(this.cursor_ \x3c\x3d this.end_);\n  return x;\n};\n\n\n/**\n * The readUnsignedVarint32 above deals with signed 32-bit varints correctly,\n * so this is just an alias.\n *\n * @return {number} The decoded signed 32-bit varint.\n */\njspb.BinaryDecoder.prototype.readSignedVarint32 \x3d\n    jspb.BinaryDecoder.prototype.readUnsignedVarint32;\n\n\n/**\n * Reads a 32-bit unsigned variant and returns its value as a string.\n *\n * @return {string} The decoded unsigned 32-bit varint as a string.\n */\njspb.BinaryDecoder.prototype.readUnsignedVarint32String \x3d function() {\n  // 32-bit integers fit in JavaScript numbers without loss of precision, so\n  // string variants of 32-bit varint readers can simply delegate then convert\n  // to string.\n  var value \x3d this.readUnsignedVarint32();\n  return value.toString();\n};\n\n\n/**\n * Reads a 32-bit signed variant and returns its value as a string.\n *\n * @return {string} The decoded signed 32-bit varint as a string.\n */\njspb.BinaryDecoder.prototype.readSignedVarint32String \x3d function() {\n  // 32-bit integers fit in JavaScript numbers without loss of precision, so\n  // string variants of 32-bit varint readers can simply delegate then convert\n  // to string.\n  var value \x3d this.readSignedVarint32();\n  return value.toString();\n};\n\n\n/**\n * Reads a signed, zigzag-encoded 32-bit varint from the binary stream.\n *\n * Zigzag encoding is a modification of varint encoding that reduces the\n * storage overhead for small negative integers - for more details on the\n * format, see https://developers.google.com/protocol-buffers/docs/encoding\n *\n * @return {number} The decoded signed, zigzag-encoded 32-bit varint.\n */\njspb.BinaryDecoder.prototype.readZigzagVarint32 \x3d function() {\n  var result \x3d this.readUnsignedVarint32();\n  return (result \x3e\x3e\x3e 1) ^ - (result \x26 1);\n};\n\n\n/**\n * Reads an unsigned 64-bit varint from the binary stream. Note that since\n * Javascript represents all numbers as double-precision floats, there will be\n * precision lost if the absolute value of the varint is larger than 2^53.\n *\n * @return {number} The decoded unsigned varint. Precision will be lost if the\n *     integer exceeds 2^53.\n */\njspb.BinaryDecoder.prototype.readUnsignedVarint64 \x3d function() {\n  this.readSplitVarint64_();\n  return jspb.utils.joinUint64(this.tempLow_, this.tempHigh_);\n};\n\n\n/**\n * Reads an unsigned 64-bit varint from the binary stream and returns the value\n * as a decimal string.\n *\n * @return {string} The decoded unsigned varint as a decimal string.\n */\njspb.BinaryDecoder.prototype.readUnsignedVarint64String \x3d function() {\n  this.readSplitVarint64_();\n  return jspb.utils.joinUnsignedDecimalString(this.tempLow_, this.tempHigh_);\n};\n\n\n/**\n * Reads a signed 64-bit varint from the binary stream. Note that since\n * Javascript represents all numbers as double-precision floats, there will be\n * precision lost if the absolute value of the varint is larger than 2^53.\n *\n * @return {number} The decoded signed varint. Precision will be lost if the\n *     integer exceeds 2^53.\n */\njspb.BinaryDecoder.prototype.readSignedVarint64 \x3d function() {\n  this.readSplitVarint64_();\n  return jspb.utils.joinInt64(this.tempLow_, this.tempHigh_);\n};\n\n\n/**\n * Reads an signed 64-bit varint from the binary stream and returns the value\n * as a decimal string.\n *\n * @return {string} The decoded signed varint as a decimal string.\n */\njspb.BinaryDecoder.prototype.readSignedVarint64String \x3d function() {\n  this.readSplitVarint64_();\n  return jspb.utils.joinSignedDecimalString(this.tempLow_, this.tempHigh_);\n};\n\n\n/**\n * Reads a signed, zigzag-encoded 64-bit varint from the binary stream. Note\n * that since Javascript represents all numbers as double-precision floats,\n * there will be precision lost if the absolute value of the varint is larger\n * than 2^53.\n *\n * Zigzag encoding is a modification of varint encoding that reduces the\n * storage overhead for small negative integers - for more details on the\n * format, see https://developers.google.com/protocol-buffers/docs/encoding\n *\n * @return {number} The decoded zigzag varint. Precision will be lost if the\n *     integer exceeds 2^53.\n */\njspb.BinaryDecoder.prototype.readZigzagVarint64 \x3d function() {\n  this.readSplitVarint64_();\n  return jspb.utils.joinZigzag64(this.tempLow_, this.tempHigh_);\n};\n\n\n/**\n * Reads a signed, zigzag-encoded 64-bit varint from the binary stream and\n * returns its valud as a string.\n *\n * Zigzag encoding is a modification of varint encoding that reduces the\n * storage overhead for small negative integers - for more details on the\n * format, see https://developers.google.com/protocol-buffers/docs/encoding\n *\n * @return {string} The decoded signed, zigzag-encoded 64-bit varint as a\n * string.\n */\njspb.BinaryDecoder.prototype.readZigzagVarint64String \x3d function() {\n  // TODO(haberman): write lossless 64-bit zig-zag math.\n  var value \x3d this.readZigzagVarint64();\n  return value.toString();\n};\n\n\n/**\n * Reads a raw unsigned 8-bit integer from the binary stream.\n *\n * @return {number} The unsigned 8-bit integer read from the binary stream.\n */\njspb.BinaryDecoder.prototype.readUint8 \x3d function() {\n  var a \x3d this.bytes_[this.cursor_ + 0];\n  this.cursor_ +\x3d 1;\n  goog.asserts.assert(this.cursor_ \x3c\x3d this.end_);\n  return a;\n};\n\n\n/**\n * Reads a raw unsigned 16-bit integer from the binary stream.\n *\n * @return {number} The unsigned 16-bit integer read from the binary stream.\n */\njspb.BinaryDecoder.prototype.readUint16 \x3d function() {\n  var a \x3d this.bytes_[this.cursor_ + 0];\n  var b \x3d this.bytes_[this.cursor_ + 1];\n  this.cursor_ +\x3d 2;\n  goog.asserts.assert(this.cursor_ \x3c\x3d this.end_);\n  return (a \x3c\x3c 0) | (b \x3c\x3c 8);\n};\n\n\n/**\n * Reads a raw unsigned 32-bit integer from the binary stream.\n *\n * @return {number} The unsigned 32-bit integer read from the binary stream.\n */\njspb.BinaryDecoder.prototype.readUint32 \x3d function() {\n  var a \x3d this.bytes_[this.cursor_ + 0];\n  var b \x3d this.bytes_[this.cursor_ + 1];\n  var c \x3d this.bytes_[this.cursor_ + 2];\n  var d \x3d this.bytes_[this.cursor_ + 3];\n  this.cursor_ +\x3d 4;\n  goog.asserts.assert(this.cursor_ \x3c\x3d this.end_);\n  return ((a \x3c\x3c 0) | (b \x3c\x3c 8) | (c \x3c\x3c 16) | (d \x3c\x3c 24)) \x3e\x3e\x3e 0;\n};\n\n\n/**\n * Reads a raw unsigned 64-bit integer from the binary stream. Note that since\n * Javascript represents all numbers as double-precision floats, there will be\n * precision lost if the absolute value of the integer is larger than 2^53.\n *\n * @return {number} The unsigned 64-bit integer read from the binary stream.\n *     Precision will be lost if the integer exceeds 2^53.\n */\njspb.BinaryDecoder.prototype.readUint64 \x3d function() {\n  var bitsLow \x3d this.readUint32();\n  var bitsHigh \x3d this.readUint32();\n  return jspb.utils.joinUint64(bitsLow, bitsHigh);\n};\n\n\n/**\n * Reads a raw unsigned 64-bit integer from the binary stream. Note that since\n * Javascript represents all numbers as double-precision floats, there will be\n * precision lost if the absolute value of the integer is larger than 2^53.\n *\n * @return {string} The unsigned 64-bit integer read from the binary stream.\n */\njspb.BinaryDecoder.prototype.readUint64String \x3d function() {\n  var bitsLow \x3d this.readUint32();\n  var bitsHigh \x3d this.readUint32();\n  return jspb.utils.joinUnsignedDecimalString(bitsLow, bitsHigh);\n};\n\n\n/**\n * Reads a raw signed 8-bit integer from the binary stream.\n *\n * @return {number} The signed 8-bit integer read from the binary stream.\n */\njspb.BinaryDecoder.prototype.readInt8 \x3d function() {\n  var a \x3d this.bytes_[this.cursor_ + 0];\n  this.cursor_ +\x3d 1;\n  goog.asserts.assert(this.cursor_ \x3c\x3d this.end_);\n  return (a \x3c\x3c 24) \x3e\x3e 24;\n};\n\n\n/**\n * Reads a raw signed 16-bit integer from the binary stream.\n *\n * @return {number} The signed 16-bit integer read from the binary stream.\n */\njspb.BinaryDecoder.prototype.readInt16 \x3d function() {\n  var a \x3d this.bytes_[this.cursor_ + 0];\n  var b \x3d this.bytes_[this.cursor_ + 1];\n  this.cursor_ +\x3d 2;\n  goog.asserts.assert(this.cursor_ \x3c\x3d this.end_);\n  return (((a \x3c\x3c 0) | (b \x3c\x3c 8)) \x3c\x3c 16) \x3e\x3e 16;\n};\n\n\n/**\n * Reads a raw signed 32-bit integer from the binary stream.\n *\n * @return {number} The signed 32-bit integer read from the binary stream.\n */\njspb.BinaryDecoder.prototype.readInt32 \x3d function() {\n  var a \x3d this.bytes_[this.cursor_ + 0];\n  var b \x3d this.bytes_[this.cursor_ + 1];\n  var c \x3d this.bytes_[this.cursor_ + 2];\n  var d \x3d this.bytes_[this.cursor_ + 3];\n  this.cursor_ +\x3d 4;\n  goog.asserts.assert(this.cursor_ \x3c\x3d this.end_);\n  return (a \x3c\x3c 0) | (b \x3c\x3c 8) | (c \x3c\x3c 16) | (d \x3c\x3c 24);\n};\n\n\n/**\n * Reads a raw signed 64-bit integer from the binary stream. Note that since\n * Javascript represents all numbers as double-precision floats, there will be\n * precision lost if the absolute vlaue of the integer is larger than 2^53.\n *\n * @return {number} The signed 64-bit integer read from the binary stream.\n *     Precision will be lost if the integer exceeds 2^53.\n */\njspb.BinaryDecoder.prototype.readInt64 \x3d function() {\n  var bitsLow \x3d this.readUint32();\n  var bitsHigh \x3d this.readUint32();\n  return jspb.utils.joinInt64(bitsLow, bitsHigh);\n};\n\n\n/**\n * Reads a raw signed 64-bit integer from the binary stream and returns it as a\n * string.\n *\n * @return {string} The signed 64-bit integer read from the binary stream.\n *     Precision will be lost if the integer exceeds 2^53.\n */\njspb.BinaryDecoder.prototype.readInt64String \x3d function() {\n  var bitsLow \x3d this.readUint32();\n  var bitsHigh \x3d this.readUint32();\n  return jspb.utils.joinSignedDecimalString(bitsLow, bitsHigh);\n};\n\n\n/**\n * Reads a 32-bit floating-point number from the binary stream, using the\n * temporary buffer to realign the data.\n *\n * @return {number} The float read from the binary stream.\n */\njspb.BinaryDecoder.prototype.readFloat \x3d function() {\n  var bitsLow \x3d this.readUint32();\n  var bitsHigh \x3d 0;\n  return jspb.utils.joinFloat32(bitsLow, bitsHigh);\n};\n\n\n/**\n * Reads a 64-bit floating-point number from the binary stream, using the\n * temporary buffer to realign the data.\n *\n * @return {number} The double read from the binary stream.\n */\njspb.BinaryDecoder.prototype.readDouble \x3d function() {\n  var bitsLow \x3d this.readUint32();\n  var bitsHigh \x3d this.readUint32();\n  return jspb.utils.joinFloat64(bitsLow, bitsHigh);\n};\n\n\n/**\n * Reads a boolean value from the binary stream.\n * @return {boolean} The boolean read from the binary stream.\n */\njspb.BinaryDecoder.prototype.readBool \x3d function() {\n  return !!this.bytes_[this.cursor_++];\n};\n\n\n/**\n * Reads an enum value from the binary stream, which are always encoded as\n * signed varints.\n * @return {number} The enum value read from the binary stream.\n */\njspb.BinaryDecoder.prototype.readEnum \x3d function() {\n  return this.readSignedVarint32();\n};\n\n\n/**\n * Reads and parses a UTF-8 encoded unicode string from the stream.\n * The code is inspired by maps.vectortown.parse.StreamedDataViewReader.\n * Supports codepoints from U+0000 up to U+10FFFF.\n * (http://en.wikipedia.org/wiki/UTF-8).\n * @param {number} length The length of the string to read.\n * @return {string} The decoded string.\n */\njspb.BinaryDecoder.prototype.readString \x3d function(length) {\n  var bytes \x3d this.bytes_;\n  var cursor \x3d this.cursor_;\n  var end \x3d cursor + length;\n  var codeUnits \x3d [];\n\n  var result \x3d \x27\x27;\n  while (cursor \x3c end) {\n    var c \x3d bytes[cursor++];\n    if (c \x3c 128) { // Regular 7-bit ASCII.\n      codeUnits.push(c);\n    } else if (c \x3c 192) {\n      // UTF-8 continuation mark. We are out of sync. This\n      // might happen if we attempted to read a character\n      // with more than four bytes.\n      continue;\n    } else if (c \x3c 224) { // UTF-8 with two bytes.\n      var c2 \x3d bytes[cursor++];\n      codeUnits.push(((c \x26 31) \x3c\x3c 6) | (c2 \x26 63));\n    } else if (c \x3c 240) { // UTF-8 with three bytes.\n      var c2 \x3d bytes[cursor++];\n      var c3 \x3d bytes[cursor++];\n      codeUnits.push(((c \x26 15) \x3c\x3c 12) | ((c2 \x26 63) \x3c\x3c 6) | (c3 \x26 63));\n    } else if (c \x3c 248) { // UTF-8 with 4 bytes.\n      var c2 \x3d bytes[cursor++];\n      var c3 \x3d bytes[cursor++];\n      var c4 \x3d bytes[cursor++];\n      // Characters written on 4 bytes have 21 bits for a codepoint.\n      // We can\x27t fit that on 16bit characters, so we use surrogates.\n      var codepoint \x3d ((c \x26 7) \x3c\x3c 18) | ((c2 \x26 63) \x3c\x3c 12) | ((c3 \x26 63) \x3c\x3c 6) | (c4 \x26 63);\n      // Surrogates formula from wikipedia.\n      // 1. Subtract 0x10000 from codepoint\n      codepoint -\x3d 0x10000;\n      // 2. Split this into the high 10-bit value and the low 10-bit value\n      // 3. Add 0xD800 to the high value to form the high surrogate\n      // 4. Add 0xDC00 to the low value to form the low surrogate:\n      var low \x3d (codepoint \x26 1023) + 0xDC00;\n      var high \x3d ((codepoint \x3e\x3e 10) \x26 1023) + 0xD800;\n      codeUnits.push(high, low);\n    }\n\n    // Avoid exceeding the maximum stack size when calling `apply`.\n    if (codeUnits.length \x3e\x3d 8192) {\n      result +\x3d String.fromCharCode.apply(null, codeUnits);\n      codeUnits.length \x3d 0;\n    }\n  }\n  result +\x3d goog.crypt.byteArrayToString(codeUnits);\n  this.cursor_ \x3d cursor;\n  return result;\n};\n\n\n/**\n * Reads and parses a UTF-8 encoded unicode string (with length prefix) from\n * the stream.\n * @return {string} The decoded string.\n */\njspb.BinaryDecoder.prototype.readStringWithLength \x3d function() {\n  var length \x3d this.readUnsignedVarint32();\n  return this.readString(length);\n};\n\n\n/**\n * Reads a block of raw bytes from the binary stream.\n *\n * @param {number} length The number of bytes to read.\n * @return {!Uint8Array} The decoded block of bytes, or an empty block if the\n *     length was invalid.\n */\njspb.BinaryDecoder.prototype.readBytes \x3d function(length) {\n  if (length \x3c 0 ||\n      this.cursor_ + length \x3e this.bytes_.length) {\n    this.error_ \x3d true;\n    goog.asserts.fail(\x27Invalid byte length!\x27);\n    return new Uint8Array(0);\n  }\n\n  var result \x3d this.bytes_.subarray(this.cursor_, this.cursor_ + length);\n\n  this.cursor_ +\x3d length;\n  goog.asserts.assert(this.cursor_ \x3c\x3d this.end_);\n  return result;\n};\n\n\n/**\n * Reads a 64-bit varint from the stream and returns it as an 8-character\n * Unicode string for use as a hash table key.\n *\n * @return {string} The hash value.\n */\njspb.BinaryDecoder.prototype.readVarintHash64 \x3d function() {\n  this.readSplitVarint64_();\n  return jspb.utils.joinHash64(this.tempLow_, this.tempHigh_);\n};\n\n\n/**\n * Reads a 64-bit fixed-width value from the stream and returns it as an\n * 8-character Unicode string for use as a hash table key.\n *\n * @return {string} The hash value.\n */\njspb.BinaryDecoder.prototype.readFixedHash64 \x3d function() {\n  var bytes \x3d this.bytes_;\n  var cursor \x3d this.cursor_;\n\n  var a \x3d bytes[cursor + 0];\n  var b \x3d bytes[cursor + 1];\n  var c \x3d bytes[cursor + 2];\n  var d \x3d bytes[cursor + 3];\n  var e \x3d bytes[cursor + 4];\n  var f \x3d bytes[cursor + 5];\n  var g \x3d bytes[cursor + 6];\n  var h \x3d bytes[cursor + 7];\n\n  this.cursor_ +\x3d 8;\n\n  return String.fromCharCode(a, b, c, d, e, f, g, h);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/apps/jspb/binary/decoder.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/jspb/binary/reader.js";
eval("/**\n * @fileoverview This file contains utilities for converting binary,\n * wire-format protocol buffers into Javascript data structures.\n *\n * jspb\x27s BinaryReader class wraps the BinaryDecoder class to add methods\n * that understand the protocol buffer syntax and can do the type checking and\n * bookkeeping necessary to parse trees of nested messages.\n *\n * Major caveat - Users of this library _must_ keep their Javascript proto\n * parsing code in sync with the original .proto file - presumably you\x27ll be\n * using the typed jspb code generator, but if you bypass that you\x27ll need\n * to keep things in sync by hand.\n *\n * @author aappleby@google.com (Austin Appleby)\n */\n\ngoog.provide(\x27jspb.BinaryReader\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27jspb.BinaryConstants\x27);\ngoog.require(\x27jspb.BinaryDecoder\x27);\n\n\n\n/**\n * BinaryReader implements the decoders for all the wire types specified in\n * https://developers.google.com/protocol-buffers/docs/encoding.\n *\n * @param {jspb.ByteSource\x3d} opt_bytes The bytes we\x27re reading from.\n * @param {number\x3d} opt_start The optional offset to start reading at.\n * @param {number\x3d} opt_length The optional length of the block to read -\n *     we\x27ll throw an assertion if we go off the end of the block.\n * @constructor\n * @struct\n */\njspb.BinaryReader \x3d function(opt_bytes, opt_start, opt_length) {\n  /**\n   * Wire-format decoder.\n   * @private {!jspb.BinaryDecoder}\n   */\n  this.decoder_ \x3d jspb.BinaryDecoder.alloc(opt_bytes, opt_start, opt_length);\n\n  /**\n   * Cursor immediately before the field tag.\n   * @private {number}\n   */\n  this.fieldCursor_ \x3d this.decoder_.getCursor();\n\n  /**\n   * Field number of the next field in the buffer, filled in by nextField().\n   * @private {number}\n   */\n  this.nextField_ \x3d jspb.BinaryConstants.INVALID_FIELD_NUMBER;\n\n  /**\n   * Wire type of the next proto field in the buffer, filled in by\n   * nextField().\n   * @private {jspb.BinaryConstants.WireType}\n   */\n  this.nextWireType_ \x3d jspb.BinaryConstants.WireType.INVALID;\n\n  /**\n   * Set to true if this reader encountered an error due to corrupt data.\n   * @private {boolean}\n   */\n  this.error_ \x3d false;\n\n  /**\n   * User-defined reader callbacks.\n   * @private {Object\x3cstring, function(!jspb.BinaryReader):*\x3e}\n   */\n  this.readCallbacks_ \x3d null;\n};\n\n\n/**\n * Global pool of BinaryReader instances.\n * @private {!Array\x3c!jspb.BinaryReader\x3e}\n */\njspb.BinaryReader.instanceCache_ \x3d [];\n\n\n/**\n * Pops an instance off the instance cache, or creates one if the cache is\n * empty.\n * @param {jspb.ByteSource\x3d} opt_bytes The bytes we\x27re reading from.\n * @param {number\x3d} opt_start The optional offset to start reading at.\n * @param {number\x3d} opt_length The optional length of the block to read -\n *     we\x27ll throw an assertion if we go off the end of the block.\n * @return {!jspb.BinaryReader}\n */\njspb.BinaryReader.alloc \x3d\n    function(opt_bytes, opt_start, opt_length) {\n  if (jspb.BinaryReader.instanceCache_.length) {\n    var newReader \x3d jspb.BinaryReader.instanceCache_.pop();\n    if (opt_bytes) {\n      newReader.decoder_.setBlock(opt_bytes, opt_start, opt_length);\n    }\n    return newReader;\n  } else {\n    return new jspb.BinaryReader(opt_bytes, opt_start, opt_length);\n  }\n};\n\n\n/**\n * Alias for the above method.\n * @param {jspb.ByteSource\x3d} opt_bytes The bytes we\x27re reading from.\n * @param {number\x3d} opt_start The optional offset to start reading at.\n * @param {number\x3d} opt_length The optional length of the block to read -\n *     we\x27ll throw an assertion if we go off the end of the block.\n * @return {!jspb.BinaryReader}\n */\njspb.BinaryReader.prototype.alloc \x3d jspb.BinaryReader.alloc;\n\n\n/**\n * Puts this instance back in the instance cache.\n */\njspb.BinaryReader.prototype.free \x3d function() {\n  this.decoder_.clear();\n  this.nextField_ \x3d jspb.BinaryConstants.INVALID_FIELD_NUMBER;\n  this.nextWireType_ \x3d jspb.BinaryConstants.WireType.INVALID;\n  this.error_ \x3d false;\n  this.readCallbacks_ \x3d null;\n\n  if (jspb.BinaryReader.instanceCache_.length \x3c 100) {\n    jspb.BinaryReader.instanceCache_.push(this);\n  }\n};\n\n\n/**\n * Returns the cursor immediately before the current field\x27s tag.\n * @return {number} The internal read cursor.\n */\njspb.BinaryReader.prototype.getFieldCursor \x3d function() {\n  return this.fieldCursor_;\n};\n\n\n/**\n * Returns the internal read cursor.\n * @return {number} The internal read cursor.\n */\njspb.BinaryReader.prototype.getCursor \x3d function() {\n  return this.decoder_.getCursor();\n};\n\n\n/**\n * Returns the raw buffer.\n * @return {?Uint8Array} The raw buffer.\n */\njspb.BinaryReader.prototype.getBuffer \x3d function() {\n  return this.decoder_.getBuffer();\n};\n\n\n/**\n * @return {number} The field number of the next field in the buffer, or\n *     INVALID_FIELD_NUMBER if there is no next field.\n */\njspb.BinaryReader.prototype.getFieldNumber \x3d function() {\n  return this.nextField_;\n};\n\n\n/**\n * @return {jspb.BinaryConstants.WireType} The wire type of the next field\n *     in the stream, or WireType.INVALID if there is no next field.\n */\njspb.BinaryReader.prototype.getWireType \x3d function() {\n  return this.nextWireType_;\n};\n\n\n/**\n * @return {boolean} Whether the current wire type is an end-group tag. Used as\n * an exit condition in decoder loops in generated code.\n */\njspb.BinaryReader.prototype.isEndGroup \x3d function() {\n  return this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.END_GROUP;\n};\n\n\n/**\n * Returns true if this reader hit an error due to corrupt data.\n * @return {boolean}\n */\njspb.BinaryReader.prototype.getError \x3d function() {\n  return this.error_ || this.decoder_.getError();\n};\n\n\n/**\n * Points this reader at a new block of bytes.\n * @param {!Uint8Array} bytes The block of bytes we\x27re reading from.\n * @param {number} start The offset to start reading at.\n * @param {number} length The length of the block to read.\n */\njspb.BinaryReader.prototype.setBlock \x3d function(bytes, start, length) {\n  this.decoder_.setBlock(bytes, start, length);\n  this.nextField_ \x3d jspb.BinaryConstants.INVALID_FIELD_NUMBER;\n  this.nextWireType_ \x3d jspb.BinaryConstants.WireType.INVALID;\n};\n\n\n/**\n * Rewinds the stream cursor to the beginning of the buffer and resets all\n * internal state.\n */\njspb.BinaryReader.prototype.reset \x3d function() {\n  this.decoder_.reset();\n  this.nextField_ \x3d jspb.BinaryConstants.INVALID_FIELD_NUMBER;\n  this.nextWireType_ \x3d jspb.BinaryConstants.WireType.INVALID;\n};\n\n\n/**\n * Advances the stream cursor by the given number of bytes.\n * @param {number} count The number of bytes to advance by.\n */\njspb.BinaryReader.prototype.advance \x3d function(count) {\n  this.decoder_.advance(count);\n};\n\n\n/**\n * Reads the next field header in the stream if there is one, returns true if\n * we saw a valid field header or false if we\x27ve read the whole stream.\n * Throws an error if we encountered a deprecated START_GROUP/END_GROUP field.\n * @return {boolean} True if the stream contains more fields.\n */\njspb.BinaryReader.prototype.nextField \x3d function() {\n  // If we\x27re at the end of the block, there are no more fields.\n  if (this.decoder_.atEnd()) {\n    return false;\n  }\n\n  // If we hit an error decoding the previous field, stop now before we\n  // try to decode anything else\n  if (this.getError()) {\n    goog.asserts.fail(\x27Decoder hit an error\x27);\n    return false;\n  }\n\n  // Otherwise just read the header of the next field.\n  this.fieldCursor_ \x3d this.decoder_.getCursor();\n  var header \x3d this.decoder_.readUnsignedVarint32();\n\n  var nextField \x3d header \x3e\x3e\x3e 3;\n  var nextWireType \x3d /** @type {jspb.BinaryConstants.WireType} */\n      (header \x26 0x7);\n\n  // If the wire type isn\x27t one of the valid ones, something\x27s broken.\n  if (nextWireType !\x3d jspb.BinaryConstants.WireType.VARINT \x26\x26\n      nextWireType !\x3d jspb.BinaryConstants.WireType.FIXED32 \x26\x26\n      nextWireType !\x3d jspb.BinaryConstants.WireType.FIXED64 \x26\x26\n      nextWireType !\x3d jspb.BinaryConstants.WireType.DELIMITED \x26\x26\n      nextWireType !\x3d jspb.BinaryConstants.WireType.START_GROUP \x26\x26\n      nextWireType !\x3d jspb.BinaryConstants.WireType.END_GROUP) {\n    goog.asserts.fail(\x27Invalid wire type\x27);\n    this.error_ \x3d true;\n    return false;\n  }\n\n  this.nextField_ \x3d nextField;\n  this.nextWireType_ \x3d nextWireType;\n\n  return true;\n};\n\n\n/**\n * Winds the reader back to just before this field\x27s header.\n */\njspb.BinaryReader.prototype.unskipHeader \x3d function() {\n  this.decoder_.unskipVarint((this.nextField_ \x3c\x3c 3) | this.nextWireType_);\n};\n\n\n/**\n * Skips all contiguous fields whose header matches the one we just read.\n */\njspb.BinaryReader.prototype.skipMatchingFields \x3d function() {\n  var field \x3d this.nextField_;\n  this.unskipHeader();\n\n  while (this.nextField() \x26\x26 (this.getFieldNumber() \x3d\x3d field)) {\n    this.skipField();\n  }\n\n  if (!this.decoder_.atEnd()) {\n    this.unskipHeader();\n  }\n};\n\n\n/**\n * Skips over the next varint field in the binary stream.\n */\njspb.BinaryReader.prototype.skipVarintField \x3d function() {\n  if (this.nextWireType_ !\x3d jspb.BinaryConstants.WireType.VARINT) {\n    goog.asserts.fail(\x27Invalid wire type for skipVarintField\x27);\n    this.skipField();\n    return;\n  }\n\n  this.decoder_.skipVarint();\n};\n\n\n/**\n * Skips over the next delimited field in the binary stream.\n */\njspb.BinaryReader.prototype.skipDelimitedField \x3d function() {\n  if (this.nextWireType_ !\x3d jspb.BinaryConstants.WireType.DELIMITED) {\n    goog.asserts.fail(\x27Invalid wire type for skipDelimitedField\x27);\n    this.skipField();\n    return;\n  }\n\n  var length \x3d this.decoder_.readUnsignedVarint32();\n  this.decoder_.advance(length);\n};\n\n\n/**\n * Skips over the next fixed32 field in the binary stream.\n */\njspb.BinaryReader.prototype.skipFixed32Field \x3d function() {\n  if (this.nextWireType_ !\x3d jspb.BinaryConstants.WireType.FIXED32) {\n    goog.asserts.fail(\x27Invalid wire type for skipFixed32Field\x27);\n    this.skipField();\n    return;\n  }\n\n  this.decoder_.advance(4);\n};\n\n\n/**\n * Skips over the next fixed64 field in the binary stream.\n */\njspb.BinaryReader.prototype.skipFixed64Field \x3d function() {\n  if (this.nextWireType_ !\x3d jspb.BinaryConstants.WireType.FIXED64) {\n    goog.asserts.fail(\x27Invalid wire type for skipFixed64Field\x27);\n    this.skipField();\n    return;\n  }\n\n  this.decoder_.advance(8);\n};\n\n\n/**\n * Skips over the next group field in the binary stream.\n */\njspb.BinaryReader.prototype.skipGroup \x3d function() {\n  // Keep a stack of start-group tags that must be matched by end-group tags.\n  var nestedGroups \x3d [this.nextField_];\n  do {\n    if (!this.nextField()) {\n      goog.asserts.fail(\x27Unmatched start-group tag: stream EOF\x27);\n      this.error_ \x3d true;\n      return;\n    }\n    if (this.nextWireType_ \x3d\x3d\n        jspb.BinaryConstants.WireType.START_GROUP) {\n      // Nested group start.\n      nestedGroups.push(this.nextField_);\n    } else if (this.nextWireType_ \x3d\x3d\n               jspb.BinaryConstants.WireType.END_GROUP) {\n      // Group end: check that it matches top-of-stack.\n      if (this.nextField_ !\x3d nestedGroups.pop()) {\n        goog.asserts.fail(\x27Unmatched end-group tag\x27);\n        this.error_ \x3d true;\n        return;\n      }\n    }\n  } while (nestedGroups.length \x3e 0);\n};\n\n\n/**\n * Skips over the next field in the binary stream - this is useful if we\x27re\n * decoding a message that contain unknown fields.\n */\njspb.BinaryReader.prototype.skipField \x3d function() {\n  switch (this.nextWireType_) {\n    case jspb.BinaryConstants.WireType.VARINT:\n      this.skipVarintField();\n      break;\n    case jspb.BinaryConstants.WireType.FIXED64:\n      this.skipFixed64Field();\n      break;\n    case jspb.BinaryConstants.WireType.DELIMITED:\n      this.skipDelimitedField();\n      break;\n    case jspb.BinaryConstants.WireType.FIXED32:\n      this.skipFixed32Field();\n      break;\n    case jspb.BinaryConstants.WireType.START_GROUP:\n      this.skipGroup();\n      break;\n    default:\n      goog.asserts.fail(\x27Invalid wire encoding for field.\x27);\n  }\n};\n\n\n/**\n * Registers a user-defined read callback.\n * @param {string} callbackName\n * @param {function(!jspb.BinaryReader):*} callback\n */\njspb.BinaryReader.prototype.registerReadCallback \x3d\n    function(callbackName, callback) {\n  if (goog.isNull(this.readCallbacks_)) {\n    this.readCallbacks_ \x3d {};\n  }\n  goog.asserts.assert(!this.readCallbacks_[callbackName]);\n  this.readCallbacks_[callbackName] \x3d callback;\n};\n\n\n/**\n * Runs a registered read callback.\n * @param {string} callbackName The name the callback is registered under.\n * @return {*} The value returned by the callback.\n */\njspb.BinaryReader.prototype.runReadCallback \x3d function(callbackName) {\n  goog.asserts.assert(!goog.isNull(this.readCallbacks_));\n  var callback \x3d this.readCallbacks_[callbackName];\n  goog.asserts.assert(callback);\n  return callback(this);\n};\n\n\n/**\n * Reads a field of any valid non-message type from the binary stream.\n * @param {jspb.BinaryConstants.FieldType} fieldType\n * @return {jspb.AnyFieldType}\n */\njspb.BinaryReader.prototype.readAny \x3d function(fieldType) {\n  this.nextWireType_ \x3d jspb.BinaryConstants.FieldTypeToWireType(fieldType);\n  var fieldTypes \x3d jspb.BinaryConstants.FieldType;\n  switch (fieldType) {\n    case fieldTypes.DOUBLE:\n      return this.readDouble();\n    case fieldTypes.FLOAT:\n      return this.readFloat();\n    case fieldTypes.INT64:\n      return this.readInt64();\n    case fieldTypes.UINT64:\n      return this.readUint64();\n    case fieldTypes.INT32:\n      return this.readInt32();\n    case fieldTypes.FIXED64:\n      return this.readFixed64();\n    case fieldTypes.FIXED32:\n      return this.readFixed32();\n    case fieldTypes.BOOL:\n      return this.readBool();\n    case fieldTypes.STRING:\n      return this.readString();\n    case fieldTypes.GROUP:\n      goog.asserts.fail(\x27Group field type not supported in readAny()\x27);\n    case fieldTypes.MESSAGE:\n      goog.asserts.fail(\x27Message field type not supported in readAny()\x27);\n    case fieldTypes.BYTES:\n      return this.readBytes();\n    case fieldTypes.UINT32:\n      return this.readUint32();\n    case fieldTypes.ENUM:\n      return this.readEnum();\n    case fieldTypes.SFIXED32:\n      return this.readSfixed32();\n    case fieldTypes.SFIXED64:\n      return this.readSfixed64();\n    case fieldTypes.SINT32:\n      return this.readSint32();\n    case fieldTypes.SINT64:\n      return this.readSint64();\n    case fieldTypes.FHASH64:\n      return this.readFixedHash64();\n    case fieldTypes.VHASH64:\n      return this.readVarintHash64();\n    default:\n      goog.asserts.fail(\x27Invalid field type in readAny()\x27);\n  }\n  return 0;\n};\n\n\n/**\n * Deserialize a proto into the provided message object using the provided\n * reader function. This function is templated as we currently have one client\n * who is using manual deserialization instead of the code-generated versions.\n * @template T\n * @param {T} message\n * @param {function(T, !jspb.BinaryReader)} reader\n */\njspb.BinaryReader.prototype.readMessage \x3d function(message, reader) {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.DELIMITED);\n\n  // Save the current endpoint of the decoder and move it to the end of the\n  // embedded message.\n  var oldEnd \x3d this.decoder_.getEnd();\n  var length \x3d this.decoder_.readUnsignedVarint32();\n  var newEnd \x3d this.decoder_.getCursor() + length;\n  this.decoder_.setEnd(newEnd);\n\n  // Deserialize the embedded message.\n  reader(message, this);\n\n  // Advance the decoder past the embedded message and restore the endpoint.\n  this.decoder_.setCursor(newEnd);\n  this.decoder_.setEnd(oldEnd);\n};\n\n\n/**\n * Deserialize a proto into the provided message object using the provided\n * reader function, assuming that the message is serialized as a group\n * with the given tag.\n * @template T\n * @param {number} field\n * @param {T} message\n * @param {function(T, !jspb.BinaryReader)} reader\n */\njspb.BinaryReader.prototype.readGroup \x3d\n    function(field, message, reader) {\n  // Ensure that the wire type is correct.\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.START_GROUP);\n  // Ensure that the field number is correct.\n  goog.asserts.assert(this.nextField_ \x3d\x3d field);\n\n  // Deserialize the message. The deserialization will stop at an END_GROUP tag.\n  reader(message, this);\n\n  if (!this.error_ \x26\x26\n      this.nextWireType_ !\x3d jspb.BinaryConstants.WireType.END_GROUP) {\n    goog.asserts.fail(\x27Group submessage did not end with an END_GROUP tag\x27);\n    this.error_ \x3d true;\n  }\n};\n\n\n/**\n * Return a decoder that wraps the current delimited field.\n * @return {!jspb.BinaryDecoder}\n */\njspb.BinaryReader.prototype.getFieldDecoder \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.DELIMITED);\n\n  var length \x3d this.decoder_.readUnsignedVarint32();\n  var start \x3d this.decoder_.getCursor();\n  var end \x3d start + length;\n\n  var innerDecoder \x3d\n      jspb.BinaryDecoder.alloc(this.decoder_.getBuffer(), start, length);\n  this.decoder_.setCursor(end);\n  return innerDecoder;\n};\n\n\n/**\n * Reads a signed 32-bit integer field from the binary stream, or throws an\n * error if the next field in the stream is not of the correct wire type.\n *\n * @return {number} The value of the signed 32-bit integer field.\n */\njspb.BinaryReader.prototype.readInt32 \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.VARINT);\n  return this.decoder_.readSignedVarint32();\n};\n\n\n/**\n * Reads a signed 32-bit integer field from the binary stream, or throws an\n * error if the next field in the stream is not of the correct wire type.\n *\n * Returns the value as a string.\n *\n * @return {string} The value of the signed 32-bit integer field as a decimal\n * string.\n */\njspb.BinaryReader.prototype.readInt32String \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.VARINT);\n  return this.decoder_.readSignedVarint32String();\n};\n\n\n/**\n * Reads a signed 64-bit integer field from the binary stream, or throws an\n * error if the next field in the stream is not of the correct wire type.\n *\n * @return {number} The value of the signed 64-bit integer field.\n */\njspb.BinaryReader.prototype.readInt64 \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.VARINT);\n  return this.decoder_.readSignedVarint64();\n};\n\n\n/**\n * Reads a signed 64-bit integer field from the binary stream, or throws an\n * error if the next field in the stream is not of the correct wire type.\n *\n * Returns the value as a string.\n *\n * @return {string} The value of the signed 64-bit integer field as a decimal\n * string.\n */\njspb.BinaryReader.prototype.readInt64String \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.VARINT);\n  return this.decoder_.readSignedVarint64String();\n};\n\n\n/**\n * Reads an unsigned 32-bit integer field from the binary stream, or throws an\n * error if the next field in the stream is not of the correct wire type.\n *\n * @return {number} The value of the unsigned 32-bit integer field.\n */\njspb.BinaryReader.prototype.readUint32 \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.VARINT);\n  return this.decoder_.readUnsignedVarint32();\n};\n\n\n/**\n * Reads an unsigned 32-bit integer field from the binary stream, or throws an\n * error if the next field in the stream is not of the correct wire type.\n *\n * Returns the value as a string.\n *\n * @return {string} The value of the unsigned 32-bit integer field as a decimal\n * string.\n */\njspb.BinaryReader.prototype.readUint32String \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.VARINT);\n  return this.decoder_.readUnsignedVarint32String();\n};\n\n\n/**\n * Reads an unsigned 64-bit integer field from the binary stream, or throws an\n * error if the next field in the stream is not of the correct wire type.\n *\n * @return {number} The value of the unsigned 64-bit integer field.\n */\njspb.BinaryReader.prototype.readUint64 \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.VARINT);\n  return this.decoder_.readUnsignedVarint64();\n};\n\n\n/**\n * Reads an unsigned 64-bit integer field from the binary stream, or throws an\n * error if the next field in the stream is not of the correct wire type.\n *\n * Returns the value as a string.\n *\n * @return {string} The value of the unsigned 64-bit integer field as a decimal\n * string.\n */\njspb.BinaryReader.prototype.readUint64String \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.VARINT);\n  return this.decoder_.readUnsignedVarint64String();\n};\n\n\n/**\n * Reads a signed zigzag-encoded 32-bit integer field from the binary stream,\n * or throws an error if the next field in the stream is not of the correct\n * wire type.\n *\n * @return {number} The value of the signed 32-bit integer field.\n */\njspb.BinaryReader.prototype.readSint32 \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.VARINT);\n  return this.decoder_.readZigzagVarint32();\n};\n\n\n/**\n * Reads a signed zigzag-encoded 64-bit integer field from the binary stream,\n * or throws an error if the next field in the stream is not of the correct\n * wire type.\n *\n * @return {number} The value of the signed 64-bit integer field.\n */\njspb.BinaryReader.prototype.readSint64 \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.VARINT);\n  return this.decoder_.readZigzagVarint64();\n};\n\n\n/**\n * Reads a signed zigzag-encoded 64-bit integer field from the binary stream,\n * or throws an error if the next field in the stream is not of the correct\n * wire type.\n *\n * @return {string} The value of the signed 64-bit integer field as a decimal string.\n */\njspb.BinaryReader.prototype.readSint64String \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.VARINT);\n  return this.decoder_.readZigzagVarint64String();\n};\n\n\n/**\n * Reads an unsigned 32-bit fixed-length integer fiield from the binary stream,\n * or throws an error if the next field in the stream is not of the correct\n * wire type.\n *\n * @return {number} The value of the double field.\n */\njspb.BinaryReader.prototype.readFixed32 \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.FIXED32);\n  return this.decoder_.readUint32();\n};\n\n\n/**\n * Reads an unsigned 64-bit fixed-length integer fiield from the binary stream,\n * or throws an error if the next field in the stream is not of the correct\n * wire type.\n *\n * @return {number} The value of the float field.\n */\njspb.BinaryReader.prototype.readFixed64 \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.FIXED64);\n  return this.decoder_.readUint64();\n};\n\n\n/**\n * Reads a signed 64-bit integer field from the binary stream as a string, or\n * throws an error if the next field in the stream is not of the correct wire\n * type.\n *\n * Returns the value as a string.\n *\n * @return {string} The value of the unsigned 64-bit integer field as a decimal\n * string.\n */\njspb.BinaryReader.prototype.readFixed64String \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.FIXED64);\n  return this.decoder_.readUint64String();\n};\n\n\n/**\n * Reads a signed 32-bit fixed-length integer fiield from the binary stream, or\n * throws an error if the next field in the stream is not of the correct wire\n * type.\n *\n * @return {number} The value of the signed 32-bit integer field.\n */\njspb.BinaryReader.prototype.readSfixed32 \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.FIXED32);\n  return this.decoder_.readInt32();\n};\n\n\n/**\n * Reads a signed 32-bit fixed-length integer fiield from the binary stream, or\n * throws an error if the next field in the stream is not of the correct wire\n * type.\n *\n * @return {string} The value of the signed 32-bit integer field as a decimal\n * string.\n */\njspb.BinaryReader.prototype.readSfixed32String \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.FIXED32);\n  return this.decoder_.readInt32().toString();\n};\n\n\n/**\n * Reads a signed 64-bit fixed-length integer fiield from the binary stream, or\n * throws an error if the next field in the stream is not of the correct wire\n * type.\n *\n * @return {number} The value of the sfixed64 field.\n */\njspb.BinaryReader.prototype.readSfixed64 \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.FIXED64);\n  return this.decoder_.readInt64();\n};\n\n\n/**\n * Reads a signed 64-bit fixed-length integer fiield from the binary stream, or\n * throws an error if the next field in the stream is not of the correct wire\n * type.\n *\n * Returns the value as a string.\n *\n * @return {string} The value of the sfixed64 field as a decimal string.\n */\njspb.BinaryReader.prototype.readSfixed64String \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.FIXED64);\n  return this.decoder_.readInt64String();\n};\n\n\n/**\n * Reads a 32-bit floating-point field from the binary stream, or throws an\n * error if the next field in the stream is not of the correct wire type.\n *\n * @return {number} The value of the float field.\n */\njspb.BinaryReader.prototype.readFloat \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.FIXED32);\n  return this.decoder_.readFloat();\n};\n\n\n/**\n * Reads a 64-bit floating-point field from the binary stream, or throws an\n * error if the next field in the stream is not of the correct wire type.\n *\n * @return {number} The value of the double field.\n */\njspb.BinaryReader.prototype.readDouble \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.FIXED64);\n  return this.decoder_.readDouble();\n};\n\n\n/**\n * Reads a boolean field from the binary stream, or throws an error if the next\n * field in the stream is not of the correct wire type.\n *\n * @return {boolean} The value of the boolean field.\n */\njspb.BinaryReader.prototype.readBool \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.VARINT);\n  return !!this.decoder_.readUnsignedVarint32();\n};\n\n\n/**\n * Reads an enum field from the binary stream, or throws an error if the next\n * field in the stream is not of the correct wire type.\n *\n * @return {number} The value of the enum field.\n */\njspb.BinaryReader.prototype.readEnum \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.VARINT);\n  return this.decoder_.readSignedVarint64();\n};\n\n\n/**\n * Reads a string field from the binary stream, or throws an error if the next\n * field in the stream is not of the correct wire type.\n *\n * @return {string} The value of the string field.\n */\njspb.BinaryReader.prototype.readString \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.DELIMITED);\n  var length \x3d this.decoder_.readUnsignedVarint32();\n  return this.decoder_.readString(length);\n};\n\n\n/**\n * Reads a length-prefixed block of bytes from the binary stream, or returns\n * null if the next field in the stream has an invalid length value.\n *\n * @return {!Uint8Array} The block of bytes.\n */\njspb.BinaryReader.prototype.readBytes \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.DELIMITED);\n  var length \x3d this.decoder_.readUnsignedVarint32();\n  return this.decoder_.readBytes(length);\n};\n\n\n/**\n * Reads a 64-bit varint or fixed64 field from the stream and returns it as a\n * 8-character Unicode string for use as a hash table key, or throws an error\n * if the next field in the stream is not of the correct wire type.\n *\n * @return {string} The hash value.\n */\njspb.BinaryReader.prototype.readVarintHash64 \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.VARINT);\n  return this.decoder_.readVarintHash64();\n};\n\n\n/**\n * Reads a 64-bit varint or fixed64 field from the stream and returns it as a\n * 8-character Unicode string for use as a hash table key, or throws an error\n * if the next field in the stream is not of the correct wire type.\n *\n * @return {string} The hash value.\n */\njspb.BinaryReader.prototype.readFixedHash64 \x3d function() {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.FIXED64);\n  return this.decoder_.readFixedHash64();\n};\n\n\n/**\n * Reads a packed scalar field using the supplied raw reader function.\n * @param {function(this:jspb.BinaryDecoder)} decodeMethod\n * @return {!Array}\n * @private\n */\njspb.BinaryReader.prototype.readPackedField_ \x3d function(decodeMethod) {\n  goog.asserts.assert(\n      this.nextWireType_ \x3d\x3d jspb.BinaryConstants.WireType.DELIMITED);\n  var length \x3d this.decoder_.readUnsignedVarint32();\n  var end \x3d this.decoder_.getCursor() + length;\n  var result \x3d [];\n  while (this.decoder_.getCursor() \x3c end) {\n    // TODO(aappleby): .call is slow\n    result.push(decodeMethod.call(this.decoder_));\n  }\n  return result;\n};\n\n\n/**\n * Reads a packed int32 field, which consists of a length header and a list of\n * signed varints.\n * @return {!Array\x3cnumber\x3e}\n */\njspb.BinaryReader.prototype.readPackedInt32 \x3d function() {\n  return this.readPackedField_(this.decoder_.readSignedVarint32);\n};\n\n\n/**\n * Reads a packed int32 field, which consists of a length header and a list of\n * signed varints. Returns a list of strings.\n * @return {!Array\x3cstring\x3e}\n */\njspb.BinaryReader.prototype.readPackedInt32String \x3d function() {\n  return this.readPackedField_(this.decoder_.readSignedVarint32String);\n};\n\n\n/**\n * Reads a packed int64 field, which consists of a length header and a list of\n * signed varints.\n * @return {!Array\x3cnumber\x3e}\n */\njspb.BinaryReader.prototype.readPackedInt64 \x3d function() {\n  return this.readPackedField_(this.decoder_.readSignedVarint64);\n};\n\n\n/**\n * Reads a packed int64 field, which consists of a length header and a list of\n * signed varints. Returns a list of strings.\n * @return {!Array\x3cstring\x3e}\n */\njspb.BinaryReader.prototype.readPackedInt64String \x3d function() {\n  return this.readPackedField_(this.decoder_.readSignedVarint64String);\n};\n\n\n/**\n * Reads a packed uint32 field, which consists of a length header and a list of\n * unsigned varints.\n * @return {!Array\x3cnumber\x3e}\n */\njspb.BinaryReader.prototype.readPackedUint32 \x3d function() {\n  return this.readPackedField_(this.decoder_.readUnsignedVarint32);\n};\n\n\n/**\n * Reads a packed uint32 field, which consists of a length header and a list of\n * unsigned varints. Returns a list of strings.\n * @return {!Array\x3cstring\x3e}\n */\njspb.BinaryReader.prototype.readPackedUint32String \x3d function() {\n  return this.readPackedField_(this.decoder_.readUnsignedVarint32String);\n};\n\n\n/**\n * Reads a packed uint64 field, which consists of a length header and a list of\n * unsigned varints.\n * @return {!Array\x3cnumber\x3e}\n */\njspb.BinaryReader.prototype.readPackedUint64 \x3d function() {\n  return this.readPackedField_(this.decoder_.readUnsignedVarint64);\n};\n\n\n/**\n * Reads a packed uint64 field, which consists of a length header and a list of\n * unsigned varints. Returns a list of strings.\n * @return {!Array\x3cstring\x3e}\n */\njspb.BinaryReader.prototype.readPackedUint64String \x3d function() {\n  return this.readPackedField_(this.decoder_.readUnsignedVarint64String);\n};\n\n\n/**\n * Reads a packed sint32 field, which consists of a length header and a list of\n * zigzag varints.\n * @return {!Array\x3cnumber\x3e}\n */\njspb.BinaryReader.prototype.readPackedSint32 \x3d function() {\n  return this.readPackedField_(this.decoder_.readZigzagVarint32);\n};\n\n\n/**\n * Reads a packed sint64 field, which consists of a length header and a list of\n * zigzag varints.\n * @return {!Array\x3cnumber\x3e}\n */\njspb.BinaryReader.prototype.readPackedSint64 \x3d function() {\n  return this.readPackedField_(this.decoder_.readZigzagVarint64);\n};\n\n\n/**\n * Reads a packed sint64 field, which consists of a length header and a list of\n * zigzag varints.  Returns a list of strings.\n * @return {!Array\x3cstring\x3e}\n */\njspb.BinaryReader.prototype.readPackedSint64String \x3d function() {\n  return this.readPackedField_(this.decoder_.readZigzagVarint64String);\n};\n\n\n/**\n * Reads a packed fixed32 field, which consists of a length header and a list\n * of unsigned 32-bit ints.\n * @return {!Array\x3cnumber\x3e}\n */\njspb.BinaryReader.prototype.readPackedFixed32 \x3d function() {\n  return this.readPackedField_(this.decoder_.readUint32);\n};\n\n\n/**\n * Reads a packed fixed64 field, which consists of a length header and a list\n * of unsigned 64-bit ints.\n * @return {!Array\x3cnumber\x3e}\n */\njspb.BinaryReader.prototype.readPackedFixed64 \x3d function() {\n  return this.readPackedField_(this.decoder_.readUint64);\n};\n\n\n/**\n * Reads a packed fixed64 field, which consists of a length header and a list\n * of unsigned 64-bit ints.  Returns a list of strings.\n * @return {!Array\x3cnumber\x3e}\n */\njspb.BinaryReader.prototype.readPackedFixed64String \x3d function() {\n  return this.readPackedField_(this.decoder_.readUint64String);\n};\n\n\n/**\n * Reads a packed sfixed32 field, which consists of a length header and a list\n * of 32-bit ints.\n * @return {!Array\x3cnumber\x3e}\n */\njspb.BinaryReader.prototype.readPackedSfixed32 \x3d function() {\n  return this.readPackedField_(this.decoder_.readInt32);\n};\n\n\n/**\n * Reads a packed sfixed64 field, which consists of a length header and a list\n * of 64-bit ints.\n * @return {!Array\x3cnumber\x3e}\n */\njspb.BinaryReader.prototype.readPackedSfixed64 \x3d function() {\n  return this.readPackedField_(this.decoder_.readInt64);\n};\n\n\n/**\n * Reads a packed sfixed64 field, which consists of a length header and a list\n * of 64-bit ints.  Returns a list of strings.\n * @return {!Array\x3cstring\x3e}\n */\njspb.BinaryReader.prototype.readPackedSfixed64String \x3d function() {\n  return this.readPackedField_(this.decoder_.readInt64String);\n};\n\n\n/**\n * Reads a packed float field, which consists of a length header and a list of\n * floats.\n * @return {!Array\x3cnumber\x3e}\n */\njspb.BinaryReader.prototype.readPackedFloat \x3d function() {\n  return this.readPackedField_(this.decoder_.readFloat);\n};\n\n\n/**\n * Reads a packed double field, which consists of a length header and a list of\n * doubles.\n * @return {!Array\x3cnumber\x3e}\n */\njspb.BinaryReader.prototype.readPackedDouble \x3d function() {\n  return this.readPackedField_(this.decoder_.readDouble);\n};\n\n\n/**\n * Reads a packed bool field, which consists of a length header and a list of\n * unsigned varints.\n * @return {!Array\x3cboolean\x3e}\n */\njspb.BinaryReader.prototype.readPackedBool \x3d function() {\n  return this.readPackedField_(this.decoder_.readBool);\n};\n\n\n/**\n * Reads a packed enum field, which consists of a length header and a list of\n * unsigned varints.\n * @return {!Array\x3cnumber\x3e}\n */\njspb.BinaryReader.prototype.readPackedEnum \x3d function() {\n  return this.readPackedField_(this.decoder_.readEnum);\n};\n\n\n/**\n * Reads a packed varint hash64 field, which consists of a length header and a\n * list of varint hash64s.\n * @return {!Array\x3cstring\x3e}\n */\njspb.BinaryReader.prototype.readPackedVarintHash64 \x3d function() {\n  return this.readPackedField_(this.decoder_.readVarintHash64);\n};\n\n\n/**\n * Reads a packed fixed hash64 field, which consists of a length header and a\n * list of fixed hash64s.\n * @return {!Array\x3cstring\x3e}\n */\njspb.BinaryReader.prototype.readPackedFixedHash64 \x3d function() {\n  return this.readPackedField_(this.decoder_.readFixedHash64);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/apps/jspb/binary/reader.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/jspb/binary/arith.js";
eval("/**\n * @fileoverview This file contains helper code used by jspb.utils to\n * handle 64-bit integer conversion to/from strings.\n *\n * @author cfallin@google.com (Chris Fallin)\n *\n * TODO(haberman): move this to javascript/closure/math?\n */\n\ngoog.provide(\x27jspb.arith.Int64\x27);\ngoog.provide(\x27jspb.arith.UInt64\x27);\n\n/**\n * UInt64 implements some 64-bit arithmetic routines necessary for properly\n * handling 64-bit integer fields. It implements lossless integer arithmetic on\n * top of JavaScript\x27s number type, which has only 53 bits of precision, by\n * representing 64-bit integers as two 32-bit halves.\n *\n * @param {number} lo The low 32 bits.\n * @param {number} hi The high 32 bits.\n * @constructor\n */\njspb.arith.UInt64 \x3d function(lo, hi) {\n  /**\n   * The low 32 bits.\n   * @public {number}\n   */\n  this.lo \x3d lo;\n  /**\n   * The high 32 bits.\n   * @public {number}\n   */\n  this.hi \x3d hi;\n};\n\n\n/**\n * Compare two 64-bit numbers. Returns -1 if the first is\n * less, +1 if the first is greater, or 0 if both are equal.\n * @param {!jspb.arith.UInt64} other\n * @return {number}\n */\njspb.arith.UInt64.prototype.cmp \x3d function(other) {\n  if (this.hi \x3c other.hi || (this.hi \x3d\x3d other.hi \x26\x26 this.lo \x3c other.lo)) {\n    return -1;\n  } else if (this.hi \x3d\x3d other.hi \x26\x26 this.lo \x3d\x3d other.lo) {\n    return 0;\n  } else {\n    return 1;\n  }\n};\n\n\n/**\n * Right-shift this number by one bit.\n * @return {!jspb.arith.UInt64}\n */\njspb.arith.UInt64.prototype.rightShift \x3d function() {\n  var hi \x3d this.hi \x3e\x3e\x3e 1;\n  var lo \x3d (this.lo \x3e\x3e\x3e 1) | ((this.hi \x26 1) \x3c\x3c 31);\n  return new jspb.arith.UInt64(lo \x3e\x3e\x3e 0, hi \x3e\x3e\x3e 0);\n};\n\n\n/**\n * Left-shift this number by one bit.\n * @return {!jspb.arith.UInt64}\n */\njspb.arith.UInt64.prototype.leftShift \x3d function() {\n  var lo \x3d this.lo \x3c\x3c 1;\n  var hi \x3d (this.hi \x3c\x3c 1) | (this.lo \x3e\x3e\x3e 31);\n  return new jspb.arith.UInt64(lo \x3e\x3e\x3e 0, hi \x3e\x3e\x3e 0);\n};\n\n\n/**\n * Test the MSB.\n * @return {boolean}\n */\njspb.arith.UInt64.prototype.msb \x3d function() {\n  return !!(this.hi \x26 0x80000000);\n};\n\n\n/**\n * Test the LSB.\n * @return {boolean}\n */\njspb.arith.UInt64.prototype.lsb \x3d function() {\n  return !!(this.lo \x26 1);\n};\n\n\n/**\n * Test whether this number is zero.\n * @return {boolean}\n */\njspb.arith.UInt64.prototype.zero \x3d function() {\n  return this.lo \x3d\x3d 0 \x26\x26 this.hi \x3d\x3d 0;\n};\n\n\n/**\n * Add two 64-bit numbers to produce a 64-bit number.\n * @param {!jspb.arith.UInt64} other\n * @return {!jspb.arith.UInt64}\n */\njspb.arith.UInt64.prototype.add \x3d function(other) {\n  var lo \x3d ((this.lo + other.lo) \x26 0xffffffff) \x3e\x3e\x3e 0;\n  var hi \x3d\n      (((this.hi + other.hi) \x26 0xffffffff) \x3e\x3e\x3e 0) +\n      (((this.lo + other.lo) \x3e\x3d 0x100000000) ? 1 : 0);\n  return new jspb.arith.UInt64(lo \x3e\x3e\x3e 0, hi \x3e\x3e\x3e 0);\n};\n\n\n/**\n * Subtract two 64-bit numbers to produce a 64-bit number.\n * @param {!jspb.arith.UInt64} other\n * @return {!jspb.arith.UInt64}\n */\njspb.arith.UInt64.prototype.sub \x3d function(other) {\n  var lo \x3d ((this.lo - other.lo) \x26 0xffffffff) \x3e\x3e\x3e 0;\n  var hi \x3d\n      (((this.hi - other.hi) \x26 0xffffffff) \x3e\x3e\x3e 0) -\n      (((this.lo - other.lo) \x3c 0) ? 1 : 0);\n  return new jspb.arith.UInt64(lo \x3e\x3e\x3e 0, hi \x3e\x3e\x3e 0);\n};\n\n\n/**\n * Multiply two 32-bit numbers to produce a 64-bit number.\n * @param {number} a The first integer:  must be in [0, 2^32-1).\n * @param {number} b The second integer: must be in [0, 2^32-1).\n * @return {!jspb.arith.UInt64}\n */\njspb.arith.UInt64.mul32x32 \x3d function(a, b) {\n  // Directly multiplying two 32-bit numbers may produce up to 64 bits of\n  // precision, thus losing precision because of the 53-bit mantissa of\n  // JavaScript numbers. So we multiply with 16-bit digits (radix 65536)\n  // instead.\n  var aLow \x3d (a \x26 0xffff);\n  var aHigh \x3d (a \x3e\x3e\x3e 16);\n  var bLow \x3d (b \x26 0xffff);\n  var bHigh \x3d (b \x3e\x3e\x3e 16);\n  var productLow \x3d\n      // 32-bit result, result bits 0-31, take all 32 bits\n      (aLow * bLow) +\n      // 32-bit result, result bits 16-47, take bottom 16 as our top 16\n      ((aLow * bHigh) \x26 0xffff) * 0x10000 +\n      // 32-bit result, result bits 16-47, take bottom 16 as our top 16\n      ((aHigh * bLow) \x26 0xffff) * 0x10000;\n  var productHigh \x3d\n      // 32-bit result, result bits 32-63, take all 32 bits\n      (aHigh * bHigh) +\n      // 32-bit result, result bits 16-47, take top 16 as our bottom 16\n      ((aLow * bHigh) \x3e\x3e\x3e 16) +\n      // 32-bit result, result bits 16-47, take top 16 as our bottom 16\n      ((aHigh * bLow) \x3e\x3e\x3e 16);\n\n  // Carry. Note that we actually have up to *two* carries due to addition of\n  // three terms.\n  while (productLow \x3e\x3d 0x100000000) {\n    productLow -\x3d 0x100000000;\n    productHigh +\x3d 1;\n  }\n\n  return new jspb.arith.UInt64(productLow \x3e\x3e\x3e 0, productHigh \x3e\x3e\x3e 0);\n};\n\n\n/**\n * Multiply this number by a 32-bit number, producing a 96-bit number, then\n * truncate the top 32 bits.\n * @param {number} a The multiplier.\n * @return {!jspb.arith.UInt64}\n */\njspb.arith.UInt64.prototype.mul \x3d function(a) {\n  // Produce two parts: at bits 0-63, and 32-95.\n  var lo \x3d jspb.arith.UInt64.mul32x32(this.lo, a);\n  var hi \x3d jspb.arith.UInt64.mul32x32(this.hi, a);\n  // Left-shift hi by 32 bits, truncating its top bits. The parts will then be\n  // aligned for addition.\n  hi.hi \x3d hi.lo;\n  hi.lo \x3d 0;\n  return lo.add(hi);\n};\n\n\n/**\n * Divide a 64-bit number by a 32-bit number to produce a\n * 64-bit quotient and a 32-bit remainder.\n * @param {number} _divisor\n * @return {Array\x3cjspb.arith.UInt64\x3e} array of [quotient, remainder],\n * unless divisor is 0, in which case an empty array is returned.\n */\njspb.arith.UInt64.prototype.div \x3d function(_divisor) {\n  if (_divisor \x3d\x3d 0) {\n    return [];\n  }\n\n  // We perform long division using a radix-2 algorithm, for simplicity (i.e.,\n  // one bit at a time). TODO: optimize to a radix-2^32 algorithm, taking care\n  // to get the variable shifts right.\n  var quotient \x3d new jspb.arith.UInt64(0, 0);\n  var remainder \x3d new jspb.arith.UInt64(this.lo, this.hi);\n  var divisor \x3d new jspb.arith.UInt64(_divisor, 0);\n  var unit \x3d new jspb.arith.UInt64(1, 0);\n\n  // Left-shift the divisor and unit until the high bit of divisor is set.\n  while (!divisor.msb()) {\n    divisor \x3d divisor.leftShift();\n    unit \x3d unit.leftShift();\n  }\n\n  // Perform long division one bit at a time.\n  while (!unit.zero()) {\n    // If divisor \x3c remainder, add unit to quotient and subtract divisor from\n    // remainder.\n    if (divisor.cmp(remainder) \x3c\x3d 0) {\n      quotient \x3d quotient.add(unit);\n      remainder \x3d remainder.sub(divisor);\n    }\n    // Right-shift the divisor and unit.\n    divisor \x3d divisor.rightShift();\n    unit \x3d unit.rightShift();\n  }\n\n  return [quotient, remainder];\n};\n\n\n/**\n * Convert a 64-bit number to a string.\n * @return {string}\n * @override\n */\njspb.arith.UInt64.prototype.toString \x3d function() {\n  var result \x3d \x27\x27;\n  var num \x3d this;\n  while (!num.zero()) {\n    var divResult \x3d num.div(10);\n    var quotient \x3d divResult[0], remainder \x3d divResult[1];\n    result \x3d remainder.lo + result;\n    num \x3d quotient;\n  }\n  if (result \x3d\x3d \x27\x27) {\n    result \x3d \x270\x27;\n  }\n  return result;\n};\n\n\n/**\n * Parse a string into a 64-bit number. Returns `null` on a parse error.\n * @param {string} s\n * @return {?jspb.arith.UInt64}\n */\njspb.arith.UInt64.fromString \x3d function(s) {\n  var result \x3d new jspb.arith.UInt64(0, 0);\n  // optimization: reuse this instance for each digit.\n  var digit64 \x3d new jspb.arith.UInt64(0, 0);\n  for (var i \x3d 0; i \x3c s.length; i++) {\n    if (s[i] \x3c \x270\x27 || s[i] \x3e \x279\x27) {\n      return null;\n    }\n    var digit \x3d parseInt(s[i], 10);\n    digit64.lo \x3d digit;\n    result \x3d result.mul(10).add(digit64);\n  }\n  return result;\n};\n\n\n/**\n * Make a copy of the uint64.\n * @return {!jspb.arith.UInt64}\n */\njspb.arith.UInt64.prototype.clone \x3d function() {\n  return new jspb.arith.UInt64(this.lo, this.hi);\n};\n\n\n/**\n * Int64 is like UInt64, but modifies string conversions to interpret the stored\n * 64-bit value as a twos-complement-signed integer. It does *not* support the\n * full range of operations that UInt64 does: only add, subtract, and string\n * conversions.\n *\n * N.B. that multiply and divide routines are *NOT* supported. They will throw\n * exceptions. (They are not necessary to implement string conversions, which\n * are the only operations we really need in jspb.)\n *\n * @param {number} lo The low 32 bits.\n * @param {number} hi The high 32 bits.\n * @constructor\n */\njspb.arith.Int64 \x3d function(lo, hi) {\n  /**\n   * The low 32 bits.\n   * @public {number}\n   */\n  this.lo \x3d lo;\n  /**\n   * The high 32 bits.\n   * @public {number}\n   */\n  this.hi \x3d hi;\n};\n\n\n/**\n * Add two 64-bit numbers to produce a 64-bit number.\n * @param {!jspb.arith.Int64} other\n * @return {!jspb.arith.Int64}\n */\njspb.arith.Int64.prototype.add \x3d function(other) {\n  var lo \x3d ((this.lo + other.lo) \x26 0xffffffff) \x3e\x3e\x3e 0;\n  var hi \x3d\n      (((this.hi + other.hi) \x26 0xffffffff) \x3e\x3e\x3e 0) +\n      (((this.lo + other.lo) \x3e\x3d 0x100000000) ? 1 : 0);\n  return new jspb.arith.Int64(lo \x3e\x3e\x3e 0, hi \x3e\x3e\x3e 0);\n};\n\n\n/**\n * Subtract two 64-bit numbers to produce a 64-bit number.\n * @param {!jspb.arith.Int64} other\n * @return {!jspb.arith.Int64}\n */\njspb.arith.Int64.prototype.sub \x3d function(other) {\n  var lo \x3d ((this.lo - other.lo) \x26 0xffffffff) \x3e\x3e\x3e 0;\n  var hi \x3d\n      (((this.hi - other.hi) \x26 0xffffffff) \x3e\x3e\x3e 0) -\n      (((this.lo - other.lo) \x3c 0) ? 1 : 0);\n  return new jspb.arith.Int64(lo \x3e\x3e\x3e 0, hi \x3e\x3e\x3e 0);\n};\n\n\n/**\n * Make a copy of the int64.\n * @return {!jspb.arith.Int64}\n */\njspb.arith.Int64.prototype.clone \x3d function() {\n  return new jspb.arith.Int64(this.lo, this.hi);\n};\n\n\n/**\n * Convert a 64-bit number to a string.\n * @return {string}\n * @override\n */\njspb.arith.Int64.prototype.toString \x3d function() {\n  // If the number is negative, find its twos-complement inverse.\n  var sign \x3d (this.hi \x26 0x80000000) !\x3d 0;\n  var num \x3d new jspb.arith.UInt64(this.lo, this.hi);\n  if (sign) {\n    num \x3d new jspb.arith.UInt64(0, 0).sub(num);\n  }\n  return (sign ? \x27-\x27 : \x27\x27) + num.toString();\n};\n\n\n/**\n * Parse a string into a 64-bit number. Returns `null` on a parse error.\n * @param {string} s\n * @return {?jspb.arith.Int64}\n */\njspb.arith.Int64.fromString \x3d function(s) {\n  var hasNegative \x3d (s.length \x3e 0 \x26\x26 s[0] \x3d\x3d \x27-\x27);\n  if (hasNegative) {\n    s \x3d s.substring(1);\n  }\n  var num \x3d jspb.arith.UInt64.fromString(s);\n  if (num \x3d\x3d\x3d null) {\n    return null;\n  }\n  if (hasNegative) {\n    num \x3d new jspb.arith.UInt64(0, 0).sub(num);\n  }\n  return new jspb.arith.Int64(num.lo, num.hi);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/apps/jspb/binary/arith.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/jspb/binary/encoder.js";
eval("/**\n * @fileoverview BinaryEncode defines methods for encoding Javascript values\n * into arrays of bytes compatible with the Protocol Buffer wire format.\n *\n * @author aappleby@google.com (Austin Appleby)\n */\n\ngoog.provide(\x27jspb.BinaryEncoder\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27jspb.BinaryConstants\x27);\ngoog.require(\x27jspb.utils\x27);\n\n\n\n/**\n * BinaryEncoder implements encoders for all the wire types specified in\n * https://developers.google.com/protocol-buffers/docs/encoding.\n *\n * @constructor\n * @struct\n */\njspb.BinaryEncoder \x3d function() {\n  /** @private {!Array\x3cnumber\x3e} */\n  this.buffer_ \x3d [];\n};\n\n\n/**\n * @return {number}\n */\njspb.BinaryEncoder.prototype.length \x3d function() {\n  return this.buffer_.length;\n};\n\n\n/**\n * @return {!Array\x3cnumber\x3e}\n */\njspb.BinaryEncoder.prototype.end \x3d function() {\n  var buffer \x3d this.buffer_;\n  this.buffer_ \x3d [];\n  return buffer;\n};\n\n\n/**\n * Encodes a 64-bit integer in 32:32 split representation into its wire-format\n * varint representation and stores it in the buffer.\n * @param {number} lowBits The low 32 bits of the int.\n * @param {number} highBits The high 32 bits of the int.\n */\njspb.BinaryEncoder.prototype.writeSplitVarint64 \x3d function(lowBits, highBits) {\n  goog.asserts.assert(lowBits \x3d\x3d Math.floor(lowBits));\n  goog.asserts.assert(highBits \x3d\x3d Math.floor(highBits));\n  goog.asserts.assert((lowBits \x3e\x3d 0) \x26\x26\n                      (lowBits \x3c jspb.BinaryConstants.TWO_TO_32));\n  goog.asserts.assert((highBits \x3e\x3d 0) \x26\x26\n                      (highBits \x3c jspb.BinaryConstants.TWO_TO_32));\n\n  // Break the binary representation into chunks of 7 bits, set the 8th bit\n  // in each chunk if it\x27s not the final chunk, and append to the result.\n  while (highBits \x3e 0 || lowBits \x3e 127) {\n    this.buffer_.push((lowBits \x26 0x7f) | 0x80);\n    lowBits \x3d ((lowBits \x3e\x3e\x3e 7) | (highBits \x3c\x3c 25)) \x3e\x3e\x3e 0;\n    highBits \x3d highBits \x3e\x3e\x3e 7;\n  }\n  this.buffer_.push(lowBits);\n};\n\n\n/**\n * Encodes a 64-bit integer in 32:32 split representation into its wire-format\n * fixed representation and stores it in the buffer.\n * @param {number} lowBits The low 32 bits of the int.\n * @param {number} highBits The high 32 bits of the int.\n */\njspb.BinaryEncoder.prototype.writeSplitFixed64 \x3d function(lowBits, highBits) {\n  goog.asserts.assert(lowBits \x3d\x3d Math.floor(lowBits));\n  goog.asserts.assert(highBits \x3d\x3d Math.floor(highBits));\n  goog.asserts.assert((lowBits \x3e\x3d 0) \x26\x26\n                      (lowBits \x3c jspb.BinaryConstants.TWO_TO_32));\n  goog.asserts.assert((highBits \x3e\x3d 0) \x26\x26\n                      (highBits \x3c jspb.BinaryConstants.TWO_TO_32));\n  this.writeUint32(lowBits);\n  this.writeUint32(highBits);\n};\n\n\n/**\n * Encodes a 32-bit unsigned integer into its wire-format varint representation\n * and stores it in the buffer.\n * @param {number} value The integer to convert.\n */\njspb.BinaryEncoder.prototype.writeUnsignedVarint32 \x3d function(value) {\n  goog.asserts.assert(value \x3d\x3d Math.floor(value));\n  goog.asserts.assert((value \x3e\x3d 0) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_32));\n\n  while (value \x3e 127) {\n    this.buffer_.push((value \x26 0x7f) | 0x80);\n    value \x3d value \x3e\x3e\x3e 7;\n  }\n\n  this.buffer_.push(value);\n};\n\n\n/**\n * Encodes a 32-bit signed integer into its wire-format varint representation\n * and stores it in the buffer.\n * @param {number} value The integer to convert.\n */\njspb.BinaryEncoder.prototype.writeSignedVarint32 \x3d function(value) {\n  goog.asserts.assert(value \x3d\x3d Math.floor(value));\n  goog.asserts.assert((value \x3e\x3d -jspb.BinaryConstants.TWO_TO_31) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_31));\n\n  // Use the unsigned version if the value is not negative.\n  if (value \x3e\x3d 0) {\n    this.writeUnsignedVarint32(value);\n    return;\n  }\n\n  // Write nine bytes with a _signed_ right shift so we preserve the sign bit.\n  for (var i \x3d 0; i \x3c 9; i++) {\n    this.buffer_.push((value \x26 0x7f) | 0x80);\n    value \x3d value \x3e\x3e 7;\n  }\n\n  // The above loop writes out 63 bits, so the last byte is always the sign bit\n  // which is always set for negative numbers.\n  this.buffer_.push(1);\n};\n\n\n/**\n * Encodes a 64-bit unsigned integer into its wire-format varint representation\n * and stores it in the buffer. Integers that are not representable in 64 bits\n * will be truncated.\n * @param {number} value The integer to convert.\n */\njspb.BinaryEncoder.prototype.writeUnsignedVarint64 \x3d function(value) {\n  goog.asserts.assert(value \x3d\x3d Math.floor(value));\n  goog.asserts.assert((value \x3e\x3d 0) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_64));\n  jspb.utils.splitInt64(value);\n  this.writeSplitVarint64(jspb.utils.split64Low,\n                          jspb.utils.split64High);\n};\n\n\n/**\n * Encodes a 64-bit signed integer into its wire-format varint representation\n * and stores it in the buffer. Integers that are not representable in 64 bits\n * will be truncated.\n * @param {number} value The integer to convert.\n */\njspb.BinaryEncoder.prototype.writeSignedVarint64 \x3d function(value) {\n  goog.asserts.assert(value \x3d\x3d Math.floor(value));\n  goog.asserts.assert((value \x3e\x3d -jspb.BinaryConstants.TWO_TO_63) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_63));\n  jspb.utils.splitInt64(value);\n  this.writeSplitVarint64(jspb.utils.split64Low,\n                          jspb.utils.split64High);\n};\n\n\n/**\n * Encodes a JavaScript integer into its wire-format, zigzag-encoded varint\n * representation and stores it in the buffer.\n * @param {number} value The integer to convert.\n */\njspb.BinaryEncoder.prototype.writeZigzagVarint32 \x3d function(value) {\n  goog.asserts.assert(value \x3d\x3d Math.floor(value));\n  goog.asserts.assert((value \x3e\x3d -jspb.BinaryConstants.TWO_TO_31) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_31));\n  this.writeUnsignedVarint32(((value \x3c\x3c 1) ^ (value \x3e\x3e 31)) \x3e\x3e\x3e 0);\n};\n\n\n/**\n * Encodes a JavaScript integer into its wire-format, zigzag-encoded varint\n * representation and stores it in the buffer. Integers not representable in 64\n * bits will be truncated.\n * @param {number} value The integer to convert.\n */\njspb.BinaryEncoder.prototype.writeZigzagVarint64 \x3d function(value) {\n  goog.asserts.assert(value \x3d\x3d Math.floor(value));\n  goog.asserts.assert((value \x3e\x3d -jspb.BinaryConstants.TWO_TO_63) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_63));\n  jspb.utils.splitZigzag64(value);\n  this.writeSplitVarint64(jspb.utils.split64Low,\n                          jspb.utils.split64High);\n};\n\n\n/**\n * Encodes a JavaScript decimal string into its wire-format, zigzag-encoded\n * varint representation and stores it in the buffer. Integers not representable\n * in 64 bits will be truncated.\n * @param {string} value The integer to convert.\n */\njspb.BinaryEncoder.prototype.writeZigzagVarint64String \x3d function(value) {\n  // TODO(haberman): write lossless 64-bit zig-zag math.\n  this.writeZigzagVarint64(parseInt(value, 10));\n};\n\n\n/**\n * Writes a 8-bit unsigned integer to the buffer. Numbers outside the range\n * [0,2^8) will be truncated.\n * @param {number} value The value to write.\n */\njspb.BinaryEncoder.prototype.writeUint8 \x3d function(value) {\n  goog.asserts.assert(value \x3d\x3d Math.floor(value));\n  goog.asserts.assert((value \x3e\x3d 0) \x26\x26 (value \x3c 256));\n  this.buffer_.push((value \x3e\x3e\x3e 0) \x26 0xFF);\n};\n\n\n/**\n * Writes a 16-bit unsigned integer to the buffer. Numbers outside the\n * range [0,2^16) will be truncated.\n * @param {number} value The value to write.\n */\njspb.BinaryEncoder.prototype.writeUint16 \x3d function(value) {\n  goog.asserts.assert(value \x3d\x3d Math.floor(value));\n  goog.asserts.assert((value \x3e\x3d 0) \x26\x26 (value \x3c 65536));\n  this.buffer_.push((value \x3e\x3e\x3e 0) \x26 0xFF);\n  this.buffer_.push((value \x3e\x3e\x3e 8) \x26 0xFF);\n};\n\n\n/**\n * Writes a 32-bit unsigned integer to the buffer. Numbers outside the\n * range [0,2^32) will be truncated.\n * @param {number} value The value to write.\n */\njspb.BinaryEncoder.prototype.writeUint32 \x3d function(value) {\n  goog.asserts.assert(value \x3d\x3d Math.floor(value));\n  goog.asserts.assert((value \x3e\x3d 0) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_32));\n  this.buffer_.push((value \x3e\x3e\x3e 0) \x26 0xFF);\n  this.buffer_.push((value \x3e\x3e\x3e 8) \x26 0xFF);\n  this.buffer_.push((value \x3e\x3e\x3e 16) \x26 0xFF);\n  this.buffer_.push((value \x3e\x3e\x3e 24) \x26 0xFF);\n};\n\n\n/**\n * Writes a 64-bit unsigned integer to the buffer. Numbers outside the\n * range [0,2^64) will be truncated.\n * @param {number} value The value to write.\n */\njspb.BinaryEncoder.prototype.writeUint64 \x3d function(value) {\n  goog.asserts.assert(value \x3d\x3d Math.floor(value));\n  goog.asserts.assert((value \x3e\x3d 0) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_64));\n  jspb.utils.splitUint64(value);\n  this.writeUint32(jspb.utils.split64Low);\n  this.writeUint32(jspb.utils.split64High);\n};\n\n\n/**\n * Writes a 8-bit integer to the buffer. Numbers outside the range\n * [-2^7,2^7) will be truncated.\n * @param {number} value The value to write.\n */\njspb.BinaryEncoder.prototype.writeInt8 \x3d function(value) {\n  goog.asserts.assert(value \x3d\x3d Math.floor(value));\n  goog.asserts.assert((value \x3e\x3d -128) \x26\x26 (value \x3c 128));\n  this.buffer_.push((value \x3e\x3e\x3e 0) \x26 0xFF);\n};\n\n\n/**\n * Writes a 16-bit integer to the buffer. Numbers outside the range\n * [-2^15,2^15) will be truncated.\n * @param {number} value The value to write.\n */\njspb.BinaryEncoder.prototype.writeInt16 \x3d function(value) {\n  goog.asserts.assert(value \x3d\x3d Math.floor(value));\n  goog.asserts.assert((value \x3e\x3d -32768) \x26\x26 (value \x3c 32768));\n  this.buffer_.push((value \x3e\x3e\x3e 0) \x26 0xFF);\n  this.buffer_.push((value \x3e\x3e\x3e 8) \x26 0xFF);\n};\n\n\n/**\n * Writes a 32-bit integer to the buffer. Numbers outside the range\n * [-2^31,2^31) will be truncated.\n * @param {number} value The value to write.\n */\njspb.BinaryEncoder.prototype.writeInt32 \x3d function(value) {\n  goog.asserts.assert(value \x3d\x3d Math.floor(value));\n  goog.asserts.assert((value \x3e\x3d -jspb.BinaryConstants.TWO_TO_31) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_31));\n  this.buffer_.push((value \x3e\x3e\x3e 0) \x26 0xFF);\n  this.buffer_.push((value \x3e\x3e\x3e 8) \x26 0xFF);\n  this.buffer_.push((value \x3e\x3e\x3e 16) \x26 0xFF);\n  this.buffer_.push((value \x3e\x3e\x3e 24) \x26 0xFF);\n};\n\n\n/**\n * Writes a 64-bit integer to the buffer. Numbers outside the range\n * [-2^63,2^63) will be truncated.\n * @param {number} value The value to write.\n */\njspb.BinaryEncoder.prototype.writeInt64 \x3d function(value) {\n  goog.asserts.assert(value \x3d\x3d Math.floor(value));\n  goog.asserts.assert((value \x3e\x3d -jspb.BinaryConstants.TWO_TO_63) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_63));\n  jspb.utils.splitInt64(value);\n  this.writeSplitFixed64(jspb.utils.split64Low, jspb.utils.split64High);\n};\n\n\n/**\n * Writes a 64-bit integer decimal strings to the buffer. Numbers outside the\n * range [-2^63,2^63) will be truncated.\n * @param {string} value The value to write.\n */\njspb.BinaryEncoder.prototype.writeInt64String \x3d function(value) {\n  goog.asserts.assert(value \x3d\x3d Math.floor(value));\n  goog.asserts.assert((+value \x3e\x3d -jspb.BinaryConstants.TWO_TO_63) \x26\x26\n                      (+value \x3c jspb.BinaryConstants.TWO_TO_63));\n  jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(value));\n  this.writeSplitFixed64(jspb.utils.split64Low, jspb.utils.split64High);\n};\n\n\n/**\n * Writes a single-precision floating point value to the buffer. Numbers\n * requiring more than 32 bits of precision will be truncated.\n * @param {number} value The value to write.\n */\njspb.BinaryEncoder.prototype.writeFloat \x3d function(value) {\n  goog.asserts.assert((value \x3e\x3d -jspb.BinaryConstants.FLOAT32_MAX) \x26\x26\n                      (value \x3c\x3d jspb.BinaryConstants.FLOAT32_MAX));\n  jspb.utils.splitFloat32(value);\n  this.writeUint32(jspb.utils.split64Low);\n};\n\n\n/**\n * Writes a double-precision floating point value to the buffer. As this is\n * the native format used by JavaScript, no precision will be lost.\n * @param {number} value The value to write.\n */\njspb.BinaryEncoder.prototype.writeDouble \x3d function(value) {\n  goog.asserts.assert((value \x3e\x3d -jspb.BinaryConstants.FLOAT64_MAX) \x26\x26\n                      (value \x3c\x3d jspb.BinaryConstants.FLOAT64_MAX));\n  jspb.utils.splitFloat64(value);\n  this.writeUint32(jspb.utils.split64Low);\n  this.writeUint32(jspb.utils.split64High);\n};\n\n\n/**\n * Writes a boolean value to the buffer as a varint. We allow numbers as input\n * because the JSPB code generator uses 0/1 instead of true/false to save space\n * in the string representation of the proto.\n * @param {boolean|number} value The value to write.\n */\njspb.BinaryEncoder.prototype.writeBool \x3d function(value) {\n  goog.asserts.assert(goog.isBoolean(value) || goog.isNumber(value));\n  this.buffer_.push(value ? 1 : 0);\n};\n\n\n/**\n * Writes an enum value to the buffer as a varint.\n * @param {number} value The value to write.\n */\njspb.BinaryEncoder.prototype.writeEnum \x3d function(value) {\n  goog.asserts.assert(value \x3d\x3d Math.floor(value));\n  goog.asserts.assert((value \x3e\x3d -jspb.BinaryConstants.TWO_TO_31) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_31));\n  this.writeSignedVarint32(value);\n};\n\n\n/**\n * Writes an arbitrary byte array to the buffer.\n * @param {!Uint8Array} bytes The array of bytes to write.\n */\njspb.BinaryEncoder.prototype.writeBytes \x3d function(bytes) {\n  this.buffer_.push.apply(this.buffer_, bytes);\n};\n\n\n/**\n * Writes a 64-bit hash string (8 characters @ 8 bits of data each) to the\n * buffer as a varint.\n * @param {string} hash The hash to write.\n */\njspb.BinaryEncoder.prototype.writeVarintHash64 \x3d function(hash) {\n  jspb.utils.splitHash64(hash);\n  this.writeSplitVarint64(jspb.utils.split64Low,\n                          jspb.utils.split64High);\n};\n\n\n/**\n * Writes a 64-bit hash string (8 characters @ 8 bits of data each) to the\n * buffer as a fixed64.\n * @param {string} hash The hash to write.\n */\njspb.BinaryEncoder.prototype.writeFixedHash64 \x3d function(hash) {\n  jspb.utils.splitHash64(hash);\n  this.writeUint32(jspb.utils.split64Low);\n  this.writeUint32(jspb.utils.split64High);\n};\n\n\n/**\n * Writes a UTF16 Javascript string to the buffer encoded as UTF8.\n * TODO(aappleby): Add support for surrogate pairs, reject unpaired surrogates.\n * @param {string} value The string to write.\n * @return {number} The number of bytes used to encode the string.\n */\njspb.BinaryEncoder.prototype.writeString \x3d function(value) {\n  var oldLength \x3d this.buffer_.length;\n\n  for (var i \x3d 0; i \x3c value.length; i++) {\n\n    var c \x3d value.charCodeAt(i);\n\n    if (c \x3c 128) {\n      this.buffer_.push(c);\n    } else if (c \x3c 2048) {\n      this.buffer_.push((c \x3e\x3e 6) | 192);\n      this.buffer_.push((c \x26 63) | 128);\n    } else if (c \x3c 65536) {\n      // Look for surrogates\n      if (c \x3e\x3d 0xD800 \x26\x26 c \x3c\x3d 0xDBFF \x26\x26 i + 1 \x3c value.length) {\n        var second \x3d value.charCodeAt(i + 1);\n        if (second \x3e\x3d 0xDC00 \x26\x26 second \x3c\x3d 0xDFFF) { // low surrogate\n          // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n          c \x3d (c - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\n          this.buffer_.push((c \x3e\x3e 18) | 240);\n          this.buffer_.push(((c \x3e\x3e 12) \x26 63 ) | 128);\n          this.buffer_.push(((c \x3e\x3e 6) \x26 63) | 128);\n          this.buffer_.push((c \x26 63) | 128);\n          i++;\n        }\n      }\n      else {\n        this.buffer_.push((c \x3e\x3e 12) | 224);\n        this.buffer_.push(((c \x3e\x3e 6) \x26 63) | 128);\n        this.buffer_.push((c \x26 63) | 128);\n      }\n    }\n  }\n\n  var length \x3d this.buffer_.length - oldLength;\n  return length;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/apps/jspb/binary/encoder.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/jspb/binary/writer.js";
eval("/**\n * @fileoverview This file contains utilities for encoding Javascript objects\n * into binary, wire-format protocol buffers (in the form of Uint8Arrays) that\n * a server can consume directly.\n *\n * jspb\x27s BinaryWriter class defines methods for efficiently encoding\n * Javascript objects into binary, wire-format protocol buffers and supports\n * all the fundamental field types used in protocol buffers.\n *\n * Major caveat 1 - Users of this library _must_ keep their Javascript proto\n * parsing code in sync with the original .proto file - presumably you\x27ll be\n * using the typed jspb code generator, but if you bypass that you\x27ll need\n * to keep things in sync by hand.\n *\n * Major caveat 2 - Javascript is unable to accurately represent integers\n * larger than 2^53 due to its use of a double-precision floating point format\n * for all numbers. BinaryWriter does not make any special effort to preserve\n * precision for values above this limit - if you need to pass 64-bit integers\n * (hash codes, for example) between the client and server without precision\n * loss, do _not_ use this library.\n *\n * Major caveat 3 - This class uses typed arrays and must not be used on older\n * browsers that do not support them.\n *\n * @author aappleby@google.com (Austin Appleby)\n */\n\ngoog.provide(\x27jspb.BinaryWriter\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.crypt.base64\x27);\ngoog.require(\x27jspb.BinaryConstants\x27);\ngoog.require(\x27jspb.BinaryEncoder\x27);\ngoog.require(\x27jspb.arith.Int64\x27);\ngoog.require(\x27jspb.arith.UInt64\x27);\ngoog.require(\x27jspb.utils\x27);\n\n\n\n/**\n * BinaryWriter implements encoders for all the wire types specified in\n * https://developers.google.com/protocol-buffers/docs/encoding.\n *\n * @constructor\n * @struct\n */\njspb.BinaryWriter \x3d function() {\n  /**\n   * Blocks of serialized data that will be concatenated once all messages have\n   * been written.\n   * @private {!Array\x3c!Uint8Array|!Array\x3cnumber\x3e\x3e}\n   */\n  this.blocks_ \x3d [];\n\n  /**\n   * Total number of bytes in the blocks_ array. Does _not_ include bytes in\n   * the encoder below.\n   * @private {number}\n   */\n  this.totalLength_ \x3d 0;\n\n  /**\n   * Binary encoder holding pieces of a message that we\x27re still serializing.\n   * When we get to a stopping point (either the start of a new submessage, or\n   * when we need to append a raw Uint8Array), the encoder\x27s buffer will be\n   * added to the block array above and the encoder will be reset.\n   * @private {!jspb.BinaryEncoder}\n   */\n  this.encoder_ \x3d new jspb.BinaryEncoder();\n\n  /**\n   * A stack of bookmarks containing the parent blocks for each message started\n   * via beginSubMessage(), needed as bookkeeping for endSubMessage().\n   * TODO(aappleby): Deprecated, users should be calling writeMessage().\n   * @private {!Array\x3c!Array\x3cnumber\x3e\x3e}\n   */\n  this.bookmarks_ \x3d [];\n};\n\n\n/**\n * Append a typed array of bytes onto the buffer.\n *\n * @param {!Uint8Array} arr The byte array to append.\n * @private\n */\njspb.BinaryWriter.prototype.appendUint8Array_ \x3d function(arr) {\n  var temp \x3d this.encoder_.end();\n  this.blocks_.push(temp);\n  this.blocks_.push(arr);\n  this.totalLength_ +\x3d temp.length + arr.length;\n};\n\n\n/**\n * Begins a new message by writing the field header and returning a bookmark\n * which we will use to patch in the message length to in endDelimited_ below.\n * @param {number} field\n * @return {!Array\x3cnumber\x3e}\n * @private\n */\njspb.BinaryWriter.prototype.beginDelimited_ \x3d function(field) {\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.DELIMITED);\n  var bookmark \x3d this.encoder_.end();\n  this.blocks_.push(bookmark);\n  this.totalLength_ +\x3d bookmark.length;\n  bookmark.push(this.totalLength_);\n  return bookmark;\n};\n\n\n/**\n * Ends a message by encoding the _change_ in length of the buffer to the\n * parent block and adds the number of bytes needed to encode that length to\n * the total byte length.\n * @param {!Array\x3cnumber\x3e} bookmark\n * @private\n */\njspb.BinaryWriter.prototype.endDelimited_ \x3d function(bookmark) {\n  var oldLength \x3d bookmark.pop();\n  var messageLength \x3d this.totalLength_ + this.encoder_.length() - oldLength;\n  goog.asserts.assert(messageLength \x3e\x3d 0);\n\n  while (messageLength \x3e 127) {\n    bookmark.push((messageLength \x26 0x7f) | 0x80);\n    messageLength \x3d messageLength \x3e\x3e\x3e 7;\n    this.totalLength_++;\n  }\n\n  bookmark.push(messageLength);\n  this.totalLength_++;\n};\n\n\n/**\n * Writes a pre-serialized message to the buffer.\n * @param {!Uint8Array} bytes The array of bytes to write.\n * @param {number} start The start of the range to write.\n * @param {number} end The end of the range to write.\n */\njspb.BinaryWriter.prototype.writeSerializedMessage \x3d function(\n    bytes, start, end) {\n  this.appendUint8Array_(bytes.subarray(start, end));\n};\n\n\n/**\n * Writes a pre-serialized message to the buffer if the message and endpoints\n * are non-null.\n * @param {?Uint8Array} bytes The array of bytes to write.\n * @param {?number} start The start of the range to write.\n * @param {?number} end The end of the range to write.\n */\njspb.BinaryWriter.prototype.maybeWriteSerializedMessage \x3d function(\n    bytes, start, end) {\n  if (bytes !\x3d null \x26\x26 start !\x3d null \x26\x26 end !\x3d null) {\n    this.writeSerializedMessage(bytes, start, end);\n  }\n};\n\n\n/**\n * Resets the writer, throwing away any accumulated buffers.\n */\njspb.BinaryWriter.prototype.reset \x3d function() {\n  this.blocks_ \x3d [];\n  this.encoder_.end();\n  this.totalLength_ \x3d 0;\n  this.bookmarks_ \x3d [];\n};\n\n\n/**\n * Converts the encoded data into a Uint8Array.\n * @return {!Uint8Array}\n */\njspb.BinaryWriter.prototype.getResultBuffer \x3d function() {\n  goog.asserts.assert(this.bookmarks_.length \x3d\x3d 0);\n\n  var flat \x3d new Uint8Array(this.totalLength_ + this.encoder_.length());\n\n  var blocks \x3d this.blocks_;\n  var blockCount \x3d blocks.length;\n  var offset \x3d 0;\n\n  for (var i \x3d 0; i \x3c blockCount; i++) {\n    var block \x3d blocks[i];\n    flat.set(block, offset);\n    offset +\x3d block.length;\n  }\n\n  var tail \x3d this.encoder_.end();\n  flat.set(tail, offset);\n  offset +\x3d tail.length;\n\n  // Post condition: `flattened` must have had every byte written.\n  goog.asserts.assert(offset \x3d\x3d flat.length);\n\n  // Replace our block list with the flattened block, which lets GC reclaim\n  // the temp blocks sooner.\n  this.blocks_ \x3d [flat];\n\n  return flat;\n};\n\n\n/**\n * Converts the encoded data into a base64-encoded string.\n * @param {boolean\x3d} opt_webSafe True indicates we should use a websafe\n *     alphabet, which does not require escaping for use in URLs.\n * @return {string}\n */\njspb.BinaryWriter.prototype.getResultBase64String \x3d function(opt_webSafe) {\n  return goog.crypt.base64.encodeByteArray(this.getResultBuffer(), opt_webSafe);\n};\n\n\n/**\n * Begins a new sub-message. The client must call endSubMessage() when they\x27re\n * done.\n * TODO(aappleby): Deprecated. Move callers to writeMessage().\n * @param {number} field The field number of the sub-message.\n */\njspb.BinaryWriter.prototype.beginSubMessage \x3d function(field) {\n  this.bookmarks_.push(this.beginDelimited_(field));\n};\n\n\n/**\n * Finishes a sub-message and packs it into the parent messages\x27 buffer.\n * TODO(aappleby): Deprecated. Move callers to writeMessage().\n */\njspb.BinaryWriter.prototype.endSubMessage \x3d function() {\n  goog.asserts.assert(this.bookmarks_.length \x3e\x3d 0);\n  this.endDelimited_(this.bookmarks_.pop());\n};\n\n\n/**\n * Encodes a (field number, wire type) tuple into a wire-format field header\n * and stores it in the buffer as a varint.\n * @param {number} field The field number.\n * @param {number} wireType The wire-type of the field, as specified in the\n *     protocol buffer documentation.\n * @private\n */\njspb.BinaryWriter.prototype.writeFieldHeader_ \x3d\n    function(field, wireType) {\n  goog.asserts.assert(field \x3e\x3d 1 \x26\x26 field \x3d\x3d Math.floor(field));\n  var x \x3d field * 8 + wireType;\n  this.encoder_.writeUnsignedVarint32(x);\n};\n\n\n/**\n * Writes a field of any valid scalar type to the binary stream.\n * @param {jspb.BinaryConstants.FieldType} fieldType\n * @param {number} field\n * @param {jspb.AnyFieldType} value\n */\njspb.BinaryWriter.prototype.writeAny \x3d function(fieldType, field, value) {\n  var fieldTypes \x3d jspb.BinaryConstants.FieldType;\n  switch (fieldType) {\n    case fieldTypes.DOUBLE:\n      this.writeDouble(field, /** @type {number} */(value));\n      return;\n    case fieldTypes.FLOAT:\n      this.writeFloat(field, /** @type {number} */(value));\n      return;\n    case fieldTypes.INT64:\n      this.writeInt64(field, /** @type {number} */(value));\n      return;\n    case fieldTypes.UINT64:\n      this.writeUint64(field, /** @type {number} */(value));\n      return;\n    case fieldTypes.INT32:\n      this.writeInt32(field, /** @type {number} */(value));\n      return;\n    case fieldTypes.FIXED64:\n      this.writeFixed64(field, /** @type {number} */(value));\n      return;\n    case fieldTypes.FIXED32:\n      this.writeFixed32(field, /** @type {number} */(value));\n      return;\n    case fieldTypes.BOOL:\n      this.writeBool(field, /** @type {boolean} */(value));\n      return;\n    case fieldTypes.STRING:\n      this.writeString(field, /** @type {string} */(value));\n      return;\n    case fieldTypes.GROUP:\n      goog.asserts.fail(\x27Group field type not supported in writeAny()\x27);\n      return;\n    case fieldTypes.MESSAGE:\n      goog.asserts.fail(\x27Message field type not supported in writeAny()\x27);\n      return;\n    case fieldTypes.BYTES:\n      this.writeBytes(field, /** @type {?Uint8Array} */(value));\n      return;\n    case fieldTypes.UINT32:\n      this.writeUint32(field, /** @type {number} */(value));\n      return;\n    case fieldTypes.ENUM:\n      this.writeEnum(field, /** @type {number} */(value));\n      return;\n    case fieldTypes.SFIXED32:\n      this.writeSfixed32(field, /** @type {number} */(value));\n      return;\n    case fieldTypes.SFIXED64:\n      this.writeSfixed64(field, /** @type {number} */(value));\n      return;\n    case fieldTypes.SINT32:\n      this.writeSint32(field, /** @type {number} */(value));\n      return;\n    case fieldTypes.SINT64:\n      this.writeSint64(field, /** @type {number} */(value));\n      return;\n    case fieldTypes.FHASH64:\n      this.writeFixedHash64(field, /** @type {string} */(value));\n      return;\n    case fieldTypes.VHASH64:\n      this.writeVarintHash64(field, /** @type {string} */(value));\n      return;\n    default:\n      goog.asserts.fail(\x27Invalid field type in writeAny()\x27);\n      return;\n  }\n};\n\n\n/**\n * Writes a varint field to the buffer without range checking.\n * @param {number} field The field number.\n * @param {number?} value The value to write.\n * @private\n */\njspb.BinaryWriter.prototype.writeUnsignedVarint32_ \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.VARINT);\n  this.encoder_.writeUnsignedVarint32(value);\n};\n\n\n/**\n * Writes a varint field to the buffer without range checking.\n * @param {number} field The field number.\n * @param {number?} value The value to write.\n * @private\n */\njspb.BinaryWriter.prototype.writeSignedVarint32_ \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.VARINT);\n  this.encoder_.writeSignedVarint32(value);\n};\n\n\n/**\n * Writes a varint field to the buffer without range checking.\n * @param {number} field The field number.\n * @param {number?} value The value to write.\n * @private\n */\njspb.BinaryWriter.prototype.writeUnsignedVarint64_ \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.VARINT);\n  this.encoder_.writeUnsignedVarint64(value);\n};\n\n\n/**\n * Writes a varint field to the buffer without range checking.\n * @param {number} field The field number.\n * @param {number?} value The value to write.\n * @private\n */\njspb.BinaryWriter.prototype.writeSignedVarint64_ \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.VARINT);\n  this.encoder_.writeSignedVarint64(value);\n};\n\n\n/**\n * Writes a zigzag varint field to the buffer without range checking.\n * @param {number} field The field number.\n * @param {number?} value The value to write.\n * @private\n */\njspb.BinaryWriter.prototype.writeZigzagVarint32_ \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.VARINT);\n  this.encoder_.writeZigzagVarint32(value);\n};\n\n\n/**\n * Writes a zigzag varint field to the buffer without range checking.\n * @param {number} field The field number.\n * @param {number?} value The value to write.\n * @private\n */\njspb.BinaryWriter.prototype.writeZigzagVarint64_ \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.VARINT);\n  this.encoder_.writeZigzagVarint64(value);\n};\n\n\n/**\n * Writes a zigzag varint field to the buffer without range checking.\n * @param {number} field The field number.\n * @param {string?} value The value to write.\n * @private\n */\njspb.BinaryWriter.prototype.writeZigzagVarint64String_ \x3d function(\n    field, value) {\n  if (value \x3d\x3d null) return;\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.VARINT);\n  this.encoder_.writeZigzagVarint64String(value);\n};\n\n\n/**\n * Writes an int32 field to the buffer. Numbers outside the range [-2^31,2^31)\n * will be truncated.\n * @param {number} field The field number.\n * @param {number?} value The value to write.\n */\njspb.BinaryWriter.prototype.writeInt32 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  goog.asserts.assert((value \x3e\x3d -jspb.BinaryConstants.TWO_TO_31) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_31));\n  this.writeSignedVarint32_(field, value);\n};\n\n\n/**\n * Writes an int32 field represented as a string to the buffer. Numbers outside\n * the range [-2^31,2^31) will be truncated.\n * @param {number} field The field number.\n * @param {string?} value The value to write.\n */\njspb.BinaryWriter.prototype.writeInt32String \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  var intValue \x3d /** {number} */ parseInt(value, 10);\n  goog.asserts.assert((intValue \x3e\x3d -jspb.BinaryConstants.TWO_TO_31) \x26\x26\n                      (intValue \x3c jspb.BinaryConstants.TWO_TO_31));\n  this.writeSignedVarint32_(field, intValue);\n};\n\n\n/**\n * Writes an int64 field to the buffer. Numbers outside the range [-2^63,2^63)\n * will be truncated.\n * @param {number} field The field number.\n * @param {number?} value The value to write.\n */\njspb.BinaryWriter.prototype.writeInt64 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  goog.asserts.assert((value \x3e\x3d -jspb.BinaryConstants.TWO_TO_63) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_63));\n  this.writeSignedVarint64_(field, value);\n};\n\n\n/**\n * Writes a int64 field (with value as a string) to the buffer.\n * @param {number} field The field number.\n * @param {string?} value The value to write.\n */\njspb.BinaryWriter.prototype.writeInt64String \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  var num \x3d jspb.arith.Int64.fromString(value);\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.VARINT);\n  this.encoder_.writeSplitVarint64(num.lo, num.hi);\n};\n\n\n/**\n * Writes a uint32 field to the buffer. Numbers outside the range [0,2^32)\n * will be truncated.\n * @param {number} field The field number.\n * @param {number?} value The value to write.\n */\njspb.BinaryWriter.prototype.writeUint32 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  goog.asserts.assert((value \x3e\x3d 0) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_32));\n  this.writeUnsignedVarint32_(field, value);\n};\n\n\n/**\n * Writes a uint32 field represented as a string to the buffer. Numbers outside\n * the range [0,2^32) will be truncated.\n * @param {number} field The field number.\n * @param {string?} value The value to write.\n */\njspb.BinaryWriter.prototype.writeUint32String \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  var intValue \x3d /** {number} */ parseInt(value, 10);\n  goog.asserts.assert((intValue \x3e\x3d 0) \x26\x26\n                      (intValue \x3c jspb.BinaryConstants.TWO_TO_32));\n  this.writeUnsignedVarint32_(field, intValue);\n};\n\n\n/**\n * Writes a uint64 field to the buffer. Numbers outside the range [0,2^64)\n * will be truncated.\n * @param {number} field The field number.\n * @param {number?} value The value to write.\n */\njspb.BinaryWriter.prototype.writeUint64 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  goog.asserts.assert((value \x3e\x3d 0) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_64));\n  this.writeUnsignedVarint64_(field, value);\n};\n\n\n/**\n * Writes a uint64 field (with value as a string) to the buffer.\n * @param {number} field The field number.\n * @param {string?} value The value to write.\n */\njspb.BinaryWriter.prototype.writeUint64String \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  var num \x3d jspb.arith.UInt64.fromString(value);\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.VARINT);\n  this.encoder_.writeSplitVarint64(num.lo, num.hi);\n};\n\n\n/**\n * Writes a sint32 field to the buffer. Numbers outside the range [-2^31,2^31)\n * will be truncated.\n * @param {number} field The field number.\n * @param {number?} value The value to write.\n */\njspb.BinaryWriter.prototype.writeSint32 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  goog.asserts.assert((value \x3e\x3d -jspb.BinaryConstants.TWO_TO_31) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_31));\n  this.writeZigzagVarint32_(field, value);\n};\n\n\n/**\n * Writes a sint64 field to the buffer. Numbers outside the range [-2^63,2^63)\n * will be truncated.\n * @param {number} field The field number.\n * @param {number?} value The value to write.\n */\njspb.BinaryWriter.prototype.writeSint64 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  goog.asserts.assert((value \x3e\x3d -jspb.BinaryConstants.TWO_TO_63) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_63));\n  this.writeZigzagVarint64_(field, value);\n};\n\n\n/**\n * Writes a sint64 field to the buffer. Numbers outside the range [-2^63,2^63)\n * will be truncated.\n * @param {number} field The field number.\n * @param {string?} value The decimal string to write.\n */\njspb.BinaryWriter.prototype.writeSint64String \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  goog.asserts.assert((+value \x3e\x3d -jspb.BinaryConstants.TWO_TO_63) \x26\x26\n                      (+value \x3c jspb.BinaryConstants.TWO_TO_63));\n  this.writeZigzagVarint64String_(field, value);\n};\n\n\n/**\n * Writes a fixed32 field to the buffer. Numbers outside the range [0,2^32)\n * will be truncated.\n * @param {number} field The field number.\n * @param {number?} value The value to write.\n */\njspb.BinaryWriter.prototype.writeFixed32 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  goog.asserts.assert((value \x3e\x3d 0) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_32));\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.FIXED32);\n  this.encoder_.writeUint32(value);\n};\n\n\n/**\n * Writes a fixed64 field to the buffer. Numbers outside the range [0,2^64)\n * will be truncated.\n * @param {number} field The field number.\n * @param {number?} value The value to write.\n */\njspb.BinaryWriter.prototype.writeFixed64 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  goog.asserts.assert((value \x3e\x3d 0) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_64));\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.FIXED64);\n  this.encoder_.writeUint64(value);\n};\n\n\n/**\n * Writes a fixed64 field (with value as a string) to the buffer.\n * @param {number} field The field number.\n * @param {string?} value The value to write.\n */\njspb.BinaryWriter.prototype.writeFixed64String \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  var num \x3d jspb.arith.UInt64.fromString(value);\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.FIXED64);\n  this.encoder_.writeSplitFixed64(num.lo, num.hi);\n};\n\n\n/**\n * Writes a sfixed32 field to the buffer. Numbers outside the range\n * [-2^31,2^31) will be truncated.\n * @param {number} field The field number.\n * @param {number?} value The value to write.\n */\njspb.BinaryWriter.prototype.writeSfixed32 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  goog.asserts.assert((value \x3e\x3d -jspb.BinaryConstants.TWO_TO_31) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_31));\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.FIXED32);\n  this.encoder_.writeInt32(value);\n};\n\n\n/**\n * Writes a sfixed64 field to the buffer. Numbers outside the range\n * [-2^63,2^63) will be truncated.\n * @param {number} field The field number.\n * @param {number?} value The value to write.\n */\njspb.BinaryWriter.prototype.writeSfixed64 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  goog.asserts.assert((value \x3e\x3d -jspb.BinaryConstants.TWO_TO_63) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_63));\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.FIXED64);\n  this.encoder_.writeInt64(value);\n};\n\n\n/**\n * Writes a sfixed64 string field to the buffer. Numbers outside the range\n * [-2^63,2^63) will be truncated.\n * @param {number} field The field number.\n * @param {string?} value The value to write.\n */\njspb.BinaryWriter.prototype.writeSfixed64String \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  var num \x3d jspb.arith.Int64.fromString(value);\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.FIXED64);\n  this.encoder_.writeSplitFixed64(num.lo, num.hi);\n};\n\n\n/**\n * Writes a single-precision floating point field to the buffer. Numbers\n * requiring more than 32 bits of precision will be truncated.\n * @param {number} field The field number.\n * @param {number?} value The value to write.\n */\njspb.BinaryWriter.prototype.writeFloat \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.FIXED32);\n  this.encoder_.writeFloat(value);\n};\n\n\n/**\n * Writes a double-precision floating point field to the buffer. As this is the\n * native format used by JavaScript, no precision will be lost.\n * @param {number} field The field number.\n * @param {number?} value The value to write.\n */\njspb.BinaryWriter.prototype.writeDouble \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.FIXED64);\n  this.encoder_.writeDouble(value);\n};\n\n\n/**\n * Writes a boolean field to the buffer. We allow numbers as input\n * because the JSPB code generator uses 0/1 instead of true/false to save space\n * in the string representation of the proto.\n * @param {number} field The field number.\n * @param {boolean?|number?} value The value to write.\n */\njspb.BinaryWriter.prototype.writeBool \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  goog.asserts.assert(goog.isBoolean(value) || goog.isNumber(value));\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.VARINT);\n  this.encoder_.writeBool(value);\n};\n\n\n/**\n * Writes an enum field to the buffer.\n * @param {number} field The field number.\n * @param {number?} value The value to write.\n */\njspb.BinaryWriter.prototype.writeEnum \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  goog.asserts.assert((value \x3e\x3d -jspb.BinaryConstants.TWO_TO_31) \x26\x26\n                      (value \x3c jspb.BinaryConstants.TWO_TO_31));\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.VARINT);\n  this.encoder_.writeSignedVarint32(value);\n};\n\n\n/**\n * Writes a string field to the buffer.\n * @param {number} field The field number.\n * @param {string?} value The string to write.\n */\njspb.BinaryWriter.prototype.writeString \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  var bookmark \x3d this.beginDelimited_(field);\n  this.encoder_.writeString(value);\n  this.endDelimited_(bookmark);\n};\n\n\n/**\n * Writes an arbitrary byte field to the buffer. Note - to match the behavior\n * of the C++ implementation, empty byte arrays _are_ serialized.\n * @param {number} field The field number.\n * @param {?jspb.ByteSource} value The array of bytes to write.\n */\njspb.BinaryWriter.prototype.writeBytes \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  var bytes \x3d jspb.utils.byteSourceToUint8Array(value);\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.DELIMITED);\n  this.encoder_.writeUnsignedVarint32(bytes.length);\n  this.appendUint8Array_(bytes);\n};\n\n\n/**\n * Writes a message to the buffer.\n * @param {number} field The field number.\n * @param {?MessageType} value The message to write.\n * @param {function(MessageTypeNonNull, !jspb.BinaryWriter)} writerCallback\n *     Will be invoked with the value to write and the writer to write it with.\n * @template MessageType\n * Use go/closure-ttl to declare a non-nullable version of MessageType.  Replace\n * the null in blah|null with none.  This is necessary because the compiler will\n * infer MessageType to be nullable if the value parameter is nullable.\n * @template MessageTypeNonNull :\x3d\n *     cond(isUnknown(MessageType), unknown(),\n *       mapunion(MessageType, (X) \x3d\x3e\n *         cond(eq(X, \x27null\x27), none(), X)))\n * \x3d:\n */\njspb.BinaryWriter.prototype.writeMessage \x3d function(\n    field, value, writerCallback) {\n  if (value \x3d\x3d null) return;\n  var bookmark \x3d this.beginDelimited_(field);\n  writerCallback(value, this);\n  this.endDelimited_(bookmark);\n};\n\n\n/**\n * Writes a group message to the buffer.\n *\n * @param {number} field The field number.\n * @param {?MessageType} value The message to write, wrapped with START_GROUP /\n *     END_GROUP tags. Will be a no-op if \x27value\x27 is null.\n * @param {function(MessageTypeNonNull, !jspb.BinaryWriter)} writerCallback\n *     Will be invoked with the value to write and the writer to write it with.\n * @template MessageType\n * Use go/closure-ttl to declare a non-nullable version of MessageType.  Replace\n * the null in blah|null with none.  This is necessary because the compiler will\n * infer MessageType to be nullable if the value parameter is nullable.\n * @template MessageTypeNonNull :\x3d\n *     cond(isUnknown(MessageType), unknown(),\n *       mapunion(MessageType, (X) \x3d\x3e\n *         cond(eq(X, \x27null\x27), none(), X)))\n * \x3d:\n */\njspb.BinaryWriter.prototype.writeGroup \x3d function(\n    field, value, writerCallback) {\n  if (value \x3d\x3d null) return;\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.START_GROUP);\n  writerCallback(value, this);\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.END_GROUP);\n};\n\n\n/**\n * Writes a 64-bit hash string field (8 characters @ 8 bits of data each) to\n * the buffer.\n * @param {number} field The field number.\n * @param {string?} value The hash string.\n */\njspb.BinaryWriter.prototype.writeFixedHash64 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  goog.asserts.assert(value.length \x3d\x3d 8);\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.FIXED64);\n  this.encoder_.writeFixedHash64(value);\n};\n\n\n/**\n * Writes a 64-bit hash string field (8 characters @ 8 bits of data each) to\n * the buffer.\n * @param {number} field The field number.\n * @param {string?} value The hash string.\n */\njspb.BinaryWriter.prototype.writeVarintHash64 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  goog.asserts.assert(value.length \x3d\x3d 8);\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.VARINT);\n  this.encoder_.writeVarintHash64(value);\n};\n\n\n/**\n * Writes an array of numbers to the buffer as a repeated 32-bit int field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedInt32 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeSignedVarint32_(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array of numbers formatted as strings to the buffer as a repeated\n * 32-bit int field.\n * @param {number} field The field number.\n * @param {?Array\x3cstring\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedInt32String \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeInt32String(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array of numbers to the buffer as a repeated 64-bit int field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedInt64 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeSignedVarint64_(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array of numbers formatted as strings to the buffer as a repeated\n * 64-bit int field.\n * @param {number} field The field number.\n * @param {?Array\x3cstring\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedInt64String \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeInt64String(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array numbers to the buffer as a repeated unsigned 32-bit int\n *     field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedUint32 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeUnsignedVarint32_(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array of numbers formatted as strings to the buffer as a repeated\n * unsigned 32-bit int field.\n * @param {number} field The field number.\n * @param {?Array\x3cstring\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedUint32String \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeUint32String(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array numbers to the buffer as a repeated unsigned 64-bit int\n *     field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedUint64 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeUnsignedVarint64_(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array of numbers formatted as strings to the buffer as a repeated\n * unsigned 64-bit int field.\n * @param {number} field The field number.\n * @param {?Array\x3cstring\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedUint64String \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeUint64String(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array numbers to the buffer as a repeated signed 32-bit int field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedSint32 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeZigzagVarint32_(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array numbers to the buffer as a repeated signed 64-bit int field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedSint64 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeZigzagVarint64_(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array numbers to the buffer as a repeated signed 64-bit int field.\n * @param {number} field The field number.\n * @param {?Array\x3cstring\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedSint64String \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeZigzagVarint64String_(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array of numbers to the buffer as a repeated fixed32 field. This\n * works for both signed and unsigned fixed32s.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedFixed32 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeFixed32(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array of numbers to the buffer as a repeated fixed64 field. This\n * works for both signed and unsigned fixed64s.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedFixed64 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeFixed64(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array of numbers to the buffer as a repeated fixed64 field. This\n * works for both signed and unsigned fixed64s.\n * @param {number} field The field number.\n * @param {?Array\x3cstring\x3e} value The array of decimal strings to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedFixed64String \x3d function(\n    field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeFixed64String(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array of numbers to the buffer as a repeated sfixed32 field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedSfixed32 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeSfixed32(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array of numbers to the buffer as a repeated sfixed64 field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedSfixed64 \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeSfixed64(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array of decimal strings to the buffer as a repeated sfixed64\n * field.\n * @param {number} field The field number.\n * @param {?Array\x3cstring\x3e} value The array of decimal strings to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedSfixed64String \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeSfixed64String(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array of numbers to the buffer as a repeated float field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedFloat \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeFloat(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array of numbers to the buffer as a repeated double field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedDouble \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeDouble(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array of booleans to the buffer as a repeated bool field.\n * @param {number} field The field number.\n * @param {?Array\x3cboolean\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedBool \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeBool(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array of enums to the buffer as a repeated enum field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedEnum \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeEnum(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array of strings to the buffer as a repeated string field.\n * @param {number} field The field number.\n * @param {?Array\x3cstring\x3e} value The array of strings to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedString \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeString(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array of arbitrary byte fields to the buffer.\n * @param {number} field The field number.\n * @param {?Array\x3c!jspb.ByteSource\x3e} value The arrays of arrays of bytes to\n *     write.\n */\njspb.BinaryWriter.prototype.writeRepeatedBytes \x3d function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeBytes(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array of messages to the buffer.\n * @template MessageType\n * @param {number} field The field number.\n * @param {?Array\x3cMessageType\x3e} value The array of messages to\n *    write.\n * @param {function(MessageType, !jspb.BinaryWriter)} writerCallback\n *     Will be invoked with the value to write and the writer to write it with.\n */\njspb.BinaryWriter.prototype.writeRepeatedMessage \x3d function(\n    field, value, writerCallback) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    var bookmark \x3d this.beginDelimited_(field);\n    writerCallback(value[i], this);\n    this.endDelimited_(bookmark);\n  }\n};\n\n\n/**\n * Writes an array of group messages to the buffer.\n * @template MessageType\n * @param {number} field The field number.\n * @param {?Array\x3cMessageType\x3e} value The array of messages to\n *    write.\n * @param {function(MessageType, !jspb.BinaryWriter)} writerCallback\n *     Will be invoked with the value to write and the writer to write it with.\n */\njspb.BinaryWriter.prototype.writeRepeatedGroup \x3d function(\n    field, value, writerCallback) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.START_GROUP);\n    writerCallback(value[i], this);\n    this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.END_GROUP);\n  }\n};\n\n\n/**\n * Writes a 64-bit hash string field (8 characters @ 8 bits of data each) to\n * the buffer.\n * @param {number} field The field number.\n * @param {?Array\x3cstring\x3e} value The array of hashes to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedFixedHash64 \x3d\n    function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeFixedHash64(field, value[i]);\n  }\n};\n\n\n/**\n * Writes a repeated 64-bit hash string field (8 characters @ 8 bits of data\n * each) to the buffer.\n * @param {number} field The field number.\n * @param {?Array\x3cstring\x3e} value The array of hashes to write.\n */\njspb.BinaryWriter.prototype.writeRepeatedVarintHash64 \x3d\n    function(field, value) {\n  if (value \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.writeVarintHash64(field, value[i]);\n  }\n};\n\n\n/**\n * Writes an array of numbers to the buffer as a packed 32-bit int field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writePackedInt32 \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  var bookmark \x3d this.beginDelimited_(field);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.encoder_.writeSignedVarint32(value[i]);\n  }\n  this.endDelimited_(bookmark);\n};\n\n\n/**\n * Writes an array of numbers represented as strings to the buffer as a packed\n * 32-bit int field.\n * @param {number} field\n * @param {?Array\x3cstring\x3e} value\n */\njspb.BinaryWriter.prototype.writePackedInt32String \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  var bookmark \x3d this.beginDelimited_(field);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.encoder_.writeSignedVarint32(parseInt(value[i], 10));\n  }\n  this.endDelimited_(bookmark);\n};\n\n\n/**\n * Writes an array of numbers to the buffer as a packed 64-bit int field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writePackedInt64 \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  var bookmark \x3d this.beginDelimited_(field);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.encoder_.writeSignedVarint64(value[i]);\n  }\n  this.endDelimited_(bookmark);\n};\n\n\n/**\n * Writes an array of numbers represented as strings to the buffer as a packed\n * 64-bit int field.\n * @param {number} field\n * @param {?Array\x3cstring\x3e} value\n */\njspb.BinaryWriter.prototype.writePackedInt64String \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  var bookmark \x3d this.beginDelimited_(field);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    var num \x3d jspb.arith.Int64.fromString(value[i]);\n    this.encoder_.writeSplitVarint64(num.lo, num.hi);\n  }\n  this.endDelimited_(bookmark);\n};\n\n\n/**\n * Writes an array numbers to the buffer as a packed unsigned 32-bit int field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writePackedUint32 \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  var bookmark \x3d this.beginDelimited_(field);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.encoder_.writeUnsignedVarint32(value[i]);\n  }\n  this.endDelimited_(bookmark);\n};\n\n\n/**\n * Writes an array of numbers represented as strings to the buffer as a packed\n * unsigned 32-bit int field.\n * @param {number} field\n * @param {?Array\x3cstring\x3e} value\n */\njspb.BinaryWriter.prototype.writePackedUint32String \x3d\n    function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  var bookmark \x3d this.beginDelimited_(field);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.encoder_.writeUnsignedVarint32(parseInt(value[i], 10));\n  }\n  this.endDelimited_(bookmark);\n};\n\n\n/**\n * Writes an array numbers to the buffer as a packed unsigned 64-bit int field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writePackedUint64 \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  var bookmark \x3d this.beginDelimited_(field);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.encoder_.writeUnsignedVarint64(value[i]);\n  }\n  this.endDelimited_(bookmark);\n};\n\n\n/**\n * Writes an array of numbers represented as strings to the buffer as a packed\n * unsigned 64-bit int field.\n * @param {number} field\n * @param {?Array\x3cstring\x3e} value\n */\njspb.BinaryWriter.prototype.writePackedUint64String \x3d\n    function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  var bookmark \x3d this.beginDelimited_(field);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    var num \x3d jspb.arith.UInt64.fromString(value[i]);\n    this.encoder_.writeSplitVarint64(num.lo, num.hi);\n  }\n  this.endDelimited_(bookmark);\n};\n\n\n/**\n * Writes an array numbers to the buffer as a packed signed 32-bit int field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writePackedSint32 \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  var bookmark \x3d this.beginDelimited_(field);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.encoder_.writeZigzagVarint32(value[i]);\n  }\n  this.endDelimited_(bookmark);\n};\n\n\n/**\n * Writes an array of numbers to the buffer as a packed signed 64-bit int field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writePackedSint64 \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  var bookmark \x3d this.beginDelimited_(field);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.encoder_.writeZigzagVarint64(value[i]);\n  }\n  this.endDelimited_(bookmark);\n};\n\n\n/**\n * Writes an array of decimal strings to the buffer as a packed signed 64-bit\n * int field.\n * @param {number} field The field number.\n * @param {?Array\x3cstring\x3e} value The array of decimal strings to write.\n */\njspb.BinaryWriter.prototype.writePackedSint64String \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  var bookmark \x3d this.beginDelimited_(field);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    // TODO(haberman): make lossless\n    this.encoder_.writeZigzagVarint64(parseInt(value[i], 10));\n  }\n  this.endDelimited_(bookmark);\n};\n\n\n/**\n * Writes an array of numbers to the buffer as a packed fixed32 field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writePackedFixed32 \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.DELIMITED);\n  this.encoder_.writeUnsignedVarint32(value.length * 4);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.encoder_.writeUint32(value[i]);\n  }\n};\n\n\n/**\n * Writes an array of numbers to the buffer as a packed fixed64 field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writePackedFixed64 \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.DELIMITED);\n  this.encoder_.writeUnsignedVarint32(value.length * 8);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.encoder_.writeUint64(value[i]);\n  }\n};\n\n\n/**\n * Writes an array of numbers represented as strings to the buffer as a packed\n * fixed64 field.\n * @param {number} field The field number.\n * @param {?Array\x3cstring\x3e} value The array of strings to write.\n */\njspb.BinaryWriter.prototype.writePackedFixed64String \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.DELIMITED);\n  this.encoder_.writeUnsignedVarint32(value.length * 8);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    var num \x3d jspb.arith.UInt64.fromString(value[i]);\n    this.encoder_.writeSplitFixed64(num.lo, num.hi);\n  }\n};\n\n\n/**\n * Writes an array of numbers to the buffer as a packed sfixed32 field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writePackedSfixed32 \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.DELIMITED);\n  this.encoder_.writeUnsignedVarint32(value.length * 4);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.encoder_.writeInt32(value[i]);\n  }\n};\n\n\n/**\n * Writes an array of numbers to the buffer as a packed sfixed64 field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writePackedSfixed64 \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.DELIMITED);\n  this.encoder_.writeUnsignedVarint32(value.length * 8);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.encoder_.writeInt64(value[i]);\n  }\n};\n\n\n/**\n * Writes an array of numbers to the buffer as a packed sfixed64 field.\n * @param {number} field The field number.\n * @param {?Array\x3cstring\x3e} value The array of decimal strings to write.\n */\njspb.BinaryWriter.prototype.writePackedSfixed64String \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.DELIMITED);\n  this.encoder_.writeUnsignedVarint32(value.length * 8);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.encoder_.writeInt64String(value[i]);\n  }\n};\n\n\n/**\n * Writes an array of numbers to the buffer as a packed float field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writePackedFloat \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.DELIMITED);\n  this.encoder_.writeUnsignedVarint32(value.length * 4);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.encoder_.writeFloat(value[i]);\n  }\n};\n\n\n/**\n * Writes an array of numbers to the buffer as a packed double field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writePackedDouble \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.DELIMITED);\n  this.encoder_.writeUnsignedVarint32(value.length * 8);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.encoder_.writeDouble(value[i]);\n  }\n};\n\n\n/**\n * Writes an array of booleans to the buffer as a packed bool field.\n * @param {number} field The field number.\n * @param {?Array\x3cboolean\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writePackedBool \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.DELIMITED);\n  this.encoder_.writeUnsignedVarint32(value.length);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.encoder_.writeBool(value[i]);\n  }\n};\n\n\n/**\n * Writes an array of enums to the buffer as a packed enum field.\n * @param {number} field The field number.\n * @param {?Array\x3cnumber\x3e} value The array of ints to write.\n */\njspb.BinaryWriter.prototype.writePackedEnum \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  var bookmark \x3d this.beginDelimited_(field);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.encoder_.writeEnum(value[i]);\n  }\n  this.endDelimited_(bookmark);\n};\n\n\n/**\n * Writes a 64-bit hash string field (8 characters @ 8 bits of data each) to\n * the buffer.\n * @param {number} field The field number.\n * @param {?Array\x3cstring\x3e} value The array of hashes to write.\n */\njspb.BinaryWriter.prototype.writePackedFixedHash64 \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  this.writeFieldHeader_(field, jspb.BinaryConstants.WireType.DELIMITED);\n  this.encoder_.writeUnsignedVarint32(value.length * 8);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.encoder_.writeFixedHash64(value[i]);\n  }\n};\n\n\n/**\n * Writes a 64-bit hash string field (8 characters @ 8 bits of data each) to\n * the buffer.\n * @param {number} field The field number.\n * @param {?Array\x3cstring\x3e} value The array of hashes to write.\n */\njspb.BinaryWriter.prototype.writePackedVarintHash64 \x3d function(field, value) {\n  if (value \x3d\x3d null || !value.length) return;\n  var bookmark \x3d this.beginDelimited_(field);\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    this.encoder_.writeVarintHash64(value[i]);\n  }\n  this.endDelimited_(bookmark);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/apps/jspb/binary/writer.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/location/location.js";
eval("/**\n * @fileoverview GWS Location Library\n * This is intended to be the lowest level of location features (below\n * historyState which is below gws.nav).\n */\n\ngoog.provide(\x27gws.location\x27);\n\n\n/**\n * http://go/gws-location-deprecated-for-features\n *\n * As a GWS reviewer, if you see this in code review that\x27s touching\n * non-framework code, you should read the rest of this comment and almost\n * certainly push back.\n *\n * Questions? Contact gws-ui-eng and/or gws-javascript-team.\n *\n * Intended usage:\n * - This should not be used by feature developers.  Feature developers\n * should use gws.historyState or the higher level functions in gws.nav for\n * any new logic.\n * - For infrastructure implementors and legacy logic: This can be used to\n * READ state expected from window.location.  See\n * gws.location.pushLocationHash() and gws.location.replaceLocationHash() for\n * instrastructure support for modifying the hash, and see\n * gws.location.getLocationForHardNav() for modifying the base URL.\n * - See quantum_conformance_proto.txt in\n * googledata/html/templates/gws/head/xjs/conformance for status\n * of legacy usage and restricting of new usage.\n *\n * One of the purposes of this API is to accommodate integration with\n * an alternative location management model such as the AGSA as the location\n * owner.  Such an implementation may not provide window.location hence\n * imposes the restrictions above.\n *\n * Note that this is implemented as a getter instead of a simple alias to\n * circumvent a Safari bug.  When loading a page from Safari\x27s page cache,\n * window.location appears to be replaced with a new object, invalidating any\n * references to the old location object (which seems to be stripped of all its\n * properties, like href).\n *\n * Furthermore, this means that it\x27s important to use actual getter functions\n * and not (for example) generated functions such as those provided by\n * goog.functions.constant. With goog.functions.constant, the value of\n * window.location at the time the function is created will be used, which will\n * be incorrect in the Safari-page-cache case.\n *\n * @return {!Location} Object supporting read operations of window.location.\n */\ngws.location.getLocation \x3d function() {\n  return /** @type {!Location} */ (goog.global.location);\n};\n\n\n/**\n * Intended usage:\n * - This should not be used by feature developers.  Feature developers\n * should use higher level GWS APIs such as gws.nav.go().\n * - For infrastructure implementors and legacy logic: This can be\n * used to get a window.location object on which hard navigation\n * operations such as assigning to .href or the .replace() method can\n * be called.  This must NOT be used for operations changing the hash\n * value only.  See\n * gws.location.pushLocationHash() and gws.location.replaceLocationHash() for\n * that.\n *\n * One of the purposes of this API is to accommodate integration with\n * an alternative location management model such as the AGSA as the location\n * owner.  In the AGSA case although this will currently still be\n * providing the actual window.location, the hash state is managed\n * separately by AGSA will not be available for reading or modifying.\n * That is a source of the restrictions above.\n * See http://b/18226632 for a description and tracking of the current\n * state of the model.\n *\n * @return {!Location} Object supporting hard nav operations of window.location.\n */\ngws.location.getLocationForHardNav \x3d function() {\n  return /** @type {!Location} */ (goog.global.location);\n};\n\n/**\n * @return {string} The current page\x27s location hash.\n */\ngws.location.getLocationHash \x3d function() {\n  const loc \x3d gws.location.getLocation();\n  // There is a bug in Firefox where location.hash returns a decoded URL, so we\n  // read location.href instead.\n  // https://bugzilla.mozilla.org/show_bug.cgi?id\x3d483304\n  return loc.hash ? loc.href.substr(loc.href.indexOf(\x27#\x27)) : \x27\x27;\n};\n\n\n/**\n * The HTTP protocol and host.\n * @return {string} The protocol and host name of the url. The host will include\n * a port if there is one.\n */\ngws.location.getProtocolAndHost \x3d function() {\n  return gws.location.getLocation().protocol + \x27//\x27 +\n      gws.location.getLocation().host;\n};\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/location/location.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/function/back_button.js";
goog.loadModule("goog.module(\x27search.function.isBackButton\x27);\n\nconst TYPE_BACK_FORWARD \x3d 2;\n\n/**\n * Returns true if this was a result of a backbutton navigation.\n * @return {boolean}\n */\nfunction isBackButton() {\n  const navigation \x3d window.performance \x26\x26 window.performance.navigation;\n  return Boolean(navigation \x26\x26 navigation.type \x3d\x3d TYPE_BACK_FORWARD);\n}\n\nexports \x3d isBackButton;\n\n//# sourceURL\x3dhttps://qs/gws/js/function/back_button.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/dom/browserfeature.js";
eval("// Copyright 2010 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Browser capability checks for the dom package.\n *\n * @author zhyder@google.com (Zohair Hyder)\n */\n\n\ngoog.provide(\x27goog.dom.BrowserFeature\x27);\n\ngoog.require(\x27goog.userAgent\x27);\n\n\n/**\n * Enum of browser capabilities.\n * @enum {boolean}\n */\ngoog.dom.BrowserFeature \x3d {\n  /**\n   * Whether attributes \x27name\x27 and \x27type\x27 can be added to an element after it\x27s\n   * created. False in Internet Explorer prior to version 9.\n   */\n  CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:\n      !goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9),\n\n  /**\n   * Whether we can use element.children to access an element\x27s Element\n   * children. Available since Gecko 1.9.1, IE 9. (IE\x3c9 also includes comment\n   * nodes in the collection.)\n   */\n  CAN_USE_CHILDREN_ATTRIBUTE: !goog.userAgent.GECKO \x26\x26 !goog.userAgent.IE ||\n      goog.userAgent.IE \x26\x26 goog.userAgent.isDocumentModeOrHigher(9) ||\n      goog.userAgent.GECKO \x26\x26 goog.userAgent.isVersionOrHigher(\x271.9.1\x27),\n\n  /**\n   * Opera, Safari 3, and Internet Explorer 9 all support innerText but they\n   * include text nodes in script and style tags. Not document-mode-dependent.\n   */\n  CAN_USE_INNER_TEXT:\n      (goog.userAgent.IE \x26\x26 !goog.userAgent.isVersionOrHigher(\x279\x27)),\n\n  /**\n   * MSIE, Opera, and Safari\x3e\x3d4 support element.parentElement to access an\n   * element\x27s parent if it is an Element.\n   */\n  CAN_USE_PARENT_ELEMENT_PROPERTY:\n      goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT,\n\n  /**\n   * Whether NoScope elements need a scoped element written before them in\n   * innerHTML.\n   * MSDN: http://msdn.microsoft.com/en-us/library/ms533897(VS.85).aspx#1\n   */\n  INNER_HTML_NEEDS_SCOPED_ELEMENT: goog.userAgent.IE,\n\n  /**\n   * Whether we use legacy IE range API.\n   */\n  LEGACY_IE_RANGES:\n      goog.userAgent.IE \x26\x26 !goog.userAgent.isDocumentModeOrHigher(9)\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/dom/browserfeature.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/dom/asserts.js";
eval("// Copyright 2017 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ngoog.provide(\x27goog.dom.asserts\x27);\n\ngoog.require(\x27goog.asserts\x27);\n\n/**\n * @fileoverview Custom assertions to ensure that an element has the appropriate\n * type.\n *\n * Using a goog.dom.safe wrapper on an object on the incorrect type (via an\n * incorrect static type cast) can result in security bugs: For instance,\n * g.d.s.setAnchorHref ensures that the URL assigned to the .href attribute\n * satisfies the SafeUrl contract, i.e., is safe to dereference as a hyperlink.\n * However, the value assigned to a HTMLLinkElement\x27s .href property requires\n * the stronger TrustedResourceUrl contract, since it can refer to a stylesheet.\n * Thus, using g.d.s.setAnchorHref on an (incorrectly statically typed) object\n * of type HTMLLinkElement can result in a security vulnerability.\n * Assertions of the correct run-time type help prevent such incorrect use.\n *\n * In some cases, code using the DOM API is tested using mock objects (e.g., a\n * plain object such as {\x27href\x27: url} instead of an actual Location object).\n * To allow such mocking, the assertions permit objects of types that are not\n * relevant DOM API objects at all (for instance, not Element or Location).\n *\n * Note that instanceof checks don\x27t work straightforwardly in older versions of\n * IE, or across frames (see,\n * http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object,\n * http://stackoverflow.com/questions/26248599/instanceof-htmlelement-in-iframe-is-not-element-or-object).\n *\n * Hence, these assertions may pass vacuously in such scenarios. The resulting\n * risk of security bugs is limited by the following factors:\n *  - A bug can only arise in scenarios involving incorrect static typing (the\n *    wrapper methods are statically typed to demand objects of the appropriate,\n *    precise type).\n *  - Typically, code is tested and exercised in multiple browsers.\n */\n\n/**\n * Asserts that a given object is a Location.\n *\n * To permit this assertion to pass in the context of tests where DOM APIs might\n * be mocked, also accepts any other type except for subtypes of {!Element}.\n * This is to ensure that, for instance, HTMLLinkElement is not being used in\n * place of a Location, since this could result in security bugs due to stronger\n * contracts required for assignments to the href property of the latter.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!Location}\n */\ngoog.dom.asserts.assertIsLocation \x3d function(o) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win \x3d goog.dom.asserts.getWindow_(o);\n    if (typeof win.Location !\x3d \x27undefined\x27 \x26\x26\n        typeof win.Element !\x3d \x27undefined\x27) {\n      goog.asserts.assert(\n          o \x26\x26 (o instanceof win.Location || !(o instanceof win.Element)),\n          \x27Argument is not a Location (or a non-Element mock); got: %s\x27,\n          goog.dom.asserts.debugStringForType_(o));\n    }\n  }\n  return /** @type {!Location} */ (o);\n};\n\n\n/**\n * Asserts that a given object is either the given subtype of Element\n * or a non-Element, non-Location Mock.\n *\n * To permit this assertion to pass in the context of tests where DOM\n * APIs might be mocked, also accepts any other type except for\n * subtypes of {!Element}.  This is to ensure that, for instance,\n * HTMLScriptElement is not being used in place of a HTMLImageElement,\n * since this could result in security bugs due to stronger contracts\n * required for assignments to the src property of the latter.\n *\n * The DOM type is looked up in the window the object belongs to.  In\n * some contexts, this might not be possible (e.g. when running tests\n * outside a browser, cross-domain lookup). In this case, the\n * assertions are skipped.\n *\n * @param {?Object} o The object whose type to assert.\n * @param {string} typename The name of the DOM type.\n * @return {!Element} The object.\n * @private\n */\n// TODO(bangert): Make an analog of goog.dom.TagName to correctly handle casts?\ngoog.dom.asserts.assertIsElementType_ \x3d function(o, typename) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win \x3d goog.dom.asserts.getWindow_(o);\n    if (typeof win[typename] !\x3d \x27undefined\x27 \x26\x26\n        typeof win.Location !\x3d \x27undefined\x27 \x26\x26\n        typeof win.Element !\x3d \x27undefined\x27) {\n      goog.asserts.assert(\n          o \x26\x26\n              (o instanceof win[typename] ||\n               !((o instanceof win.Location) || (o instanceof win.Element))),\n          \x27Argument is not a %s (or a non-Element, non-Location mock); got: %s\x27,\n          typename, goog.dom.asserts.debugStringForType_(o));\n    }\n  }\n  return /** @type {!Element} */ (o);\n};\n\n/**\n * Asserts that a given object is a HTMLAnchorElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not of type Location nor a subtype\n * of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLAnchorElement}\n */\ngoog.dom.asserts.assertIsHTMLAnchorElement \x3d function(o) {\n  return /** @type {!HTMLAnchorElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, \x27HTMLAnchorElement\x27));\n};\n\n/**\n * Asserts that a given object is a HTMLButtonElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLButtonElement}\n */\ngoog.dom.asserts.assertIsHTMLButtonElement \x3d function(o) {\n  return /** @type {!HTMLButtonElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, \x27HTMLButtonElement\x27));\n};\n\n/**\n * Asserts that a given object is a HTMLLinkElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLLinkElement}\n */\ngoog.dom.asserts.assertIsHTMLLinkElement \x3d function(o) {\n  return /** @type {!HTMLLinkElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, \x27HTMLLinkElement\x27));\n};\n\n/**\n * Asserts that a given object is a HTMLImageElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLImageElement}\n */\ngoog.dom.asserts.assertIsHTMLImageElement \x3d function(o) {\n  return /** @type {!HTMLImageElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, \x27HTMLImageElement\x27));\n};\n\n/**\n * Asserts that a given object is a HTMLVideoElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLVideoElement}\n */\ngoog.dom.asserts.assertIsHTMLVideoElement \x3d function(o) {\n  return /** @type {!HTMLVideoElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, \x27HTMLVideoElement\x27));\n};\n\n/**\n * Asserts that a given object is a HTMLInputElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLInputElement}\n */\ngoog.dom.asserts.assertIsHTMLInputElement \x3d function(o) {\n  return /** @type {!HTMLInputElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, \x27HTMLInputElement\x27));\n};\n\n/**\n * Asserts that a given object is a HTMLEmbedElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLEmbedElement}\n */\ngoog.dom.asserts.assertIsHTMLEmbedElement \x3d function(o) {\n  return /** @type {!HTMLEmbedElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, \x27HTMLEmbedElement\x27));\n};\n\n/**\n * Asserts that a given object is a HTMLFormElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLFormElement}\n */\ngoog.dom.asserts.assertIsHTMLFormElement \x3d function(o) {\n  return /** @type {!HTMLFormElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, \x27HTMLFormElement\x27));\n};\n\n/**\n * Asserts that a given object is a HTMLFrameElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLFrameElement}\n */\ngoog.dom.asserts.assertIsHTMLFrameElement \x3d function(o) {\n  return /** @type {!HTMLFrameElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, \x27HTMLFrameElement\x27));\n};\n\n/**\n * Asserts that a given object is a HTMLIFrameElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLIFrameElement}\n */\ngoog.dom.asserts.assertIsHTMLIFrameElement \x3d function(o) {\n  return /** @type {!HTMLIFrameElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, \x27HTMLIFrameElement\x27));\n};\n\n/**\n * Asserts that a given object is a HTMLObjectElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLObjectElement}\n */\ngoog.dom.asserts.assertIsHTMLObjectElement \x3d function(o) {\n  return /** @type {!HTMLObjectElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, \x27HTMLObjectElement\x27));\n};\n\n/**\n * Asserts that a given object is a HTMLScriptElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLScriptElement}\n */\ngoog.dom.asserts.assertIsHTMLScriptElement \x3d function(o) {\n  return /** @type {!HTMLScriptElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, \x27HTMLScriptElement\x27));\n};\n\n/**\n * Returns a string representation of a value\x27s type.\n *\n * @param {*} value An object, or primitive.\n * @return {string} The best display name for the value.\n * @private\n */\ngoog.dom.asserts.debugStringForType_ \x3d function(value) {\n  if (goog.isObject(value)) {\n    return value.constructor.displayName || value.constructor.name ||\n        Object.prototype.toString.call(value);\n  } else {\n    return value \x3d\x3d\x3d undefined ? \x27undefined\x27 :\n                                 value \x3d\x3d\x3d null ? \x27null\x27 : typeof value;\n  }\n};\n\n/**\n * Gets window of element.\n * @param {?Object} o\n * @return {!Window}\n * @private\n * @suppress {strictMissingProperties} ownerDocument not defined on Object\n */\ngoog.dom.asserts.getWindow_ \x3d function(o) {\n  var doc \x3d o \x26\x26 o.ownerDocument;\n  var win \x3d doc \x26\x26 /** @type {?Window} */ (doc.defaultView || doc.parentWindow);\n  return win || /** @type {!Window} */ (goog.global);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/dom/asserts.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/dom/htmlelement.js";
eval("// Copyright 2017 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ngoog.provide(\x27goog.dom.HtmlElement\x27);\n\n\n\n/**\n * This subclass of HTMLElement is used when only a HTMLElement is possible and\n * not any of its subclasses. Normally, a type can refer to an instance of\n * itself or an instance of any subtype. More concretely, if HTMLElement is used\n * then the compiler must assume that it might still be e.g. HTMLScriptElement.\n * With this, the type check knows that it couldn\x27t be any special element.\n *\n * @constructor\n * @extends {HTMLElement}\n */\ngoog.dom.HtmlElement \x3d function() {};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/dom/htmlelement.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/dom/tagname.js";
eval("// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Defines the goog.dom.TagName class. Its constants enumerate\n * all HTML tag names specified in either the the W3C HTML 4.01 index of\n * elements or the HTML5.1 specification.\n *\n * References:\n * https://www.w3.org/TR/html401/index/elements.html\n * https://www.w3.org/TR/html51/dom.html#elements\n */\ngoog.provide(\x27goog.dom.TagName\x27);\n\ngoog.require(\x27goog.dom.HtmlElement\x27);\n\n\n/**\n * A tag name with the type of the element stored in the generic.\n * @param {string} tagName\n * @constructor\n * @template T\n */\ngoog.dom.TagName \x3d function(tagName) {\n  /** @private {string} */\n  this.tagName_ \x3d tagName;\n};\n\n\n/**\n * Returns the tag name.\n * @return {string}\n * @override\n */\ngoog.dom.TagName.prototype.toString \x3d function() {\n  return this.tagName_;\n};\n\n\n// Closure Compiler unconditionally converts the following constants to their\n// string value (goog.dom.TagName.A -\x3e \x27A\x27). These are the consequences:\n// 1. Don\x27t add any members or static members to goog.dom.TagName as they\n//    couldn\x27t be accessed after this optimization.\n// 2. Keep the constant name and its string value the same:\n//    goog.dom.TagName.X \x3d new goog.dom.TagName(\x27Y\x27);\n//    is converted to \x27X\x27, not \x27Y\x27.\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLAnchorElement\x3e} */\ngoog.dom.TagName.A \x3d new goog.dom.TagName(\x27A\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.ABBR \x3d new goog.dom.TagName(\x27ABBR\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.ACRONYM \x3d new goog.dom.TagName(\x27ACRONYM\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.ADDRESS \x3d new goog.dom.TagName(\x27ADDRESS\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLAppletElement\x3e} */\ngoog.dom.TagName.APPLET \x3d new goog.dom.TagName(\x27APPLET\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLAreaElement\x3e} */\ngoog.dom.TagName.AREA \x3d new goog.dom.TagName(\x27AREA\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.ARTICLE \x3d new goog.dom.TagName(\x27ARTICLE\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.ASIDE \x3d new goog.dom.TagName(\x27ASIDE\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLAudioElement\x3e} */\ngoog.dom.TagName.AUDIO \x3d new goog.dom.TagName(\x27AUDIO\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.B \x3d new goog.dom.TagName(\x27B\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLBaseElement\x3e} */\ngoog.dom.TagName.BASE \x3d new goog.dom.TagName(\x27BASE\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLBaseFontElement\x3e} */\ngoog.dom.TagName.BASEFONT \x3d new goog.dom.TagName(\x27BASEFONT\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.BDI \x3d new goog.dom.TagName(\x27BDI\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.BDO \x3d new goog.dom.TagName(\x27BDO\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.BIG \x3d new goog.dom.TagName(\x27BIG\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLQuoteElement\x3e} */\ngoog.dom.TagName.BLOCKQUOTE \x3d new goog.dom.TagName(\x27BLOCKQUOTE\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLBodyElement\x3e} */\ngoog.dom.TagName.BODY \x3d new goog.dom.TagName(\x27BODY\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLBRElement\x3e} */\ngoog.dom.TagName.BR \x3d new goog.dom.TagName(\x27BR\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLButtonElement\x3e} */\ngoog.dom.TagName.BUTTON \x3d new goog.dom.TagName(\x27BUTTON\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLCanvasElement\x3e} */\ngoog.dom.TagName.CANVAS \x3d new goog.dom.TagName(\x27CANVAS\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLTableCaptionElement\x3e} */\ngoog.dom.TagName.CAPTION \x3d new goog.dom.TagName(\x27CAPTION\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.CENTER \x3d new goog.dom.TagName(\x27CENTER\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.CITE \x3d new goog.dom.TagName(\x27CITE\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.CODE \x3d new goog.dom.TagName(\x27CODE\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLTableColElement\x3e} */\ngoog.dom.TagName.COL \x3d new goog.dom.TagName(\x27COL\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLTableColElement\x3e} */\ngoog.dom.TagName.COLGROUP \x3d new goog.dom.TagName(\x27COLGROUP\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.COMMAND \x3d new goog.dom.TagName(\x27COMMAND\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.DATA \x3d new goog.dom.TagName(\x27DATA\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLDataListElement\x3e} */\ngoog.dom.TagName.DATALIST \x3d new goog.dom.TagName(\x27DATALIST\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.DD \x3d new goog.dom.TagName(\x27DD\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLModElement\x3e} */\ngoog.dom.TagName.DEL \x3d new goog.dom.TagName(\x27DEL\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLDetailsElement\x3e} */\ngoog.dom.TagName.DETAILS \x3d new goog.dom.TagName(\x27DETAILS\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.DFN \x3d new goog.dom.TagName(\x27DFN\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLDialogElement\x3e} */\ngoog.dom.TagName.DIALOG \x3d new goog.dom.TagName(\x27DIALOG\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLDirectoryElement\x3e} */\ngoog.dom.TagName.DIR \x3d new goog.dom.TagName(\x27DIR\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLDivElement\x3e} */\ngoog.dom.TagName.DIV \x3d new goog.dom.TagName(\x27DIV\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLDListElement\x3e} */\ngoog.dom.TagName.DL \x3d new goog.dom.TagName(\x27DL\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.DT \x3d new goog.dom.TagName(\x27DT\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.EM \x3d new goog.dom.TagName(\x27EM\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLEmbedElement\x3e} */\ngoog.dom.TagName.EMBED \x3d new goog.dom.TagName(\x27EMBED\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLFieldSetElement\x3e} */\ngoog.dom.TagName.FIELDSET \x3d new goog.dom.TagName(\x27FIELDSET\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.FIGCAPTION \x3d new goog.dom.TagName(\x27FIGCAPTION\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.FIGURE \x3d new goog.dom.TagName(\x27FIGURE\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLFontElement\x3e} */\ngoog.dom.TagName.FONT \x3d new goog.dom.TagName(\x27FONT\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.FOOTER \x3d new goog.dom.TagName(\x27FOOTER\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLFormElement\x3e} */\ngoog.dom.TagName.FORM \x3d new goog.dom.TagName(\x27FORM\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLFrameElement\x3e} */\ngoog.dom.TagName.FRAME \x3d new goog.dom.TagName(\x27FRAME\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLFrameSetElement\x3e} */\ngoog.dom.TagName.FRAMESET \x3d new goog.dom.TagName(\x27FRAMESET\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLHeadingElement\x3e} */\ngoog.dom.TagName.H1 \x3d new goog.dom.TagName(\x27H1\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLHeadingElement\x3e} */\ngoog.dom.TagName.H2 \x3d new goog.dom.TagName(\x27H2\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLHeadingElement\x3e} */\ngoog.dom.TagName.H3 \x3d new goog.dom.TagName(\x27H3\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLHeadingElement\x3e} */\ngoog.dom.TagName.H4 \x3d new goog.dom.TagName(\x27H4\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLHeadingElement\x3e} */\ngoog.dom.TagName.H5 \x3d new goog.dom.TagName(\x27H5\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLHeadingElement\x3e} */\ngoog.dom.TagName.H6 \x3d new goog.dom.TagName(\x27H6\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLHeadElement\x3e} */\ngoog.dom.TagName.HEAD \x3d new goog.dom.TagName(\x27HEAD\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.HEADER \x3d new goog.dom.TagName(\x27HEADER\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.HGROUP \x3d new goog.dom.TagName(\x27HGROUP\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLHRElement\x3e} */\ngoog.dom.TagName.HR \x3d new goog.dom.TagName(\x27HR\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLHtmlElement\x3e} */\ngoog.dom.TagName.HTML \x3d new goog.dom.TagName(\x27HTML\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.I \x3d new goog.dom.TagName(\x27I\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLIFrameElement\x3e} */\ngoog.dom.TagName.IFRAME \x3d new goog.dom.TagName(\x27IFRAME\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLImageElement\x3e} */\ngoog.dom.TagName.IMG \x3d new goog.dom.TagName(\x27IMG\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLInputElement\x3e} */\ngoog.dom.TagName.INPUT \x3d new goog.dom.TagName(\x27INPUT\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLModElement\x3e} */\ngoog.dom.TagName.INS \x3d new goog.dom.TagName(\x27INS\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLIsIndexElement\x3e} */\ngoog.dom.TagName.ISINDEX \x3d new goog.dom.TagName(\x27ISINDEX\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.KBD \x3d new goog.dom.TagName(\x27KBD\x27);\n\n\n// HTMLKeygenElement is deprecated.\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.KEYGEN \x3d new goog.dom.TagName(\x27KEYGEN\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLLabelElement\x3e} */\ngoog.dom.TagName.LABEL \x3d new goog.dom.TagName(\x27LABEL\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLLegendElement\x3e} */\ngoog.dom.TagName.LEGEND \x3d new goog.dom.TagName(\x27LEGEND\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLLIElement\x3e} */\ngoog.dom.TagName.LI \x3d new goog.dom.TagName(\x27LI\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLLinkElement\x3e} */\ngoog.dom.TagName.LINK \x3d new goog.dom.TagName(\x27LINK\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.MAIN \x3d new goog.dom.TagName(\x27MAIN\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLMapElement\x3e} */\ngoog.dom.TagName.MAP \x3d new goog.dom.TagName(\x27MAP\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.MARK \x3d new goog.dom.TagName(\x27MARK\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.MATH \x3d new goog.dom.TagName(\x27MATH\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLMenuElement\x3e} */\ngoog.dom.TagName.MENU \x3d new goog.dom.TagName(\x27MENU\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLMenuItemElement\x3e} */\ngoog.dom.TagName.MENUITEM \x3d new goog.dom.TagName(\x27MENUITEM\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLMetaElement\x3e} */\ngoog.dom.TagName.META \x3d new goog.dom.TagName(\x27META\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLMeterElement\x3e} */\ngoog.dom.TagName.METER \x3d new goog.dom.TagName(\x27METER\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.NAV \x3d new goog.dom.TagName(\x27NAV\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.NOFRAMES \x3d new goog.dom.TagName(\x27NOFRAMES\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.NOSCRIPT \x3d new goog.dom.TagName(\x27NOSCRIPT\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLObjectElement\x3e} */\ngoog.dom.TagName.OBJECT \x3d new goog.dom.TagName(\x27OBJECT\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLOListElement\x3e} */\ngoog.dom.TagName.OL \x3d new goog.dom.TagName(\x27OL\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLOptGroupElement\x3e} */\ngoog.dom.TagName.OPTGROUP \x3d new goog.dom.TagName(\x27OPTGROUP\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLOptionElement\x3e} */\ngoog.dom.TagName.OPTION \x3d new goog.dom.TagName(\x27OPTION\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLOutputElement\x3e} */\ngoog.dom.TagName.OUTPUT \x3d new goog.dom.TagName(\x27OUTPUT\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLParagraphElement\x3e} */\ngoog.dom.TagName.P \x3d new goog.dom.TagName(\x27P\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLParamElement\x3e} */\ngoog.dom.TagName.PARAM \x3d new goog.dom.TagName(\x27PARAM\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLPictureElement\x3e} */\ngoog.dom.TagName.PICTURE \x3d new goog.dom.TagName(\x27PICTURE\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLPreElement\x3e} */\ngoog.dom.TagName.PRE \x3d new goog.dom.TagName(\x27PRE\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLProgressElement\x3e} */\ngoog.dom.TagName.PROGRESS \x3d new goog.dom.TagName(\x27PROGRESS\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLQuoteElement\x3e} */\ngoog.dom.TagName.Q \x3d new goog.dom.TagName(\x27Q\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.RP \x3d new goog.dom.TagName(\x27RP\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.RT \x3d new goog.dom.TagName(\x27RT\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.RTC \x3d new goog.dom.TagName(\x27RTC\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.RUBY \x3d new goog.dom.TagName(\x27RUBY\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.S \x3d new goog.dom.TagName(\x27S\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.SAMP \x3d new goog.dom.TagName(\x27SAMP\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLScriptElement\x3e} */\ngoog.dom.TagName.SCRIPT \x3d new goog.dom.TagName(\x27SCRIPT\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.SECTION \x3d new goog.dom.TagName(\x27SECTION\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLSelectElement\x3e} */\ngoog.dom.TagName.SELECT \x3d new goog.dom.TagName(\x27SELECT\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.SMALL \x3d new goog.dom.TagName(\x27SMALL\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLSourceElement\x3e} */\ngoog.dom.TagName.SOURCE \x3d new goog.dom.TagName(\x27SOURCE\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLSpanElement\x3e} */\ngoog.dom.TagName.SPAN \x3d new goog.dom.TagName(\x27SPAN\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.STRIKE \x3d new goog.dom.TagName(\x27STRIKE\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.STRONG \x3d new goog.dom.TagName(\x27STRONG\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLStyleElement\x3e} */\ngoog.dom.TagName.STYLE \x3d new goog.dom.TagName(\x27STYLE\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.SUB \x3d new goog.dom.TagName(\x27SUB\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.SUMMARY \x3d new goog.dom.TagName(\x27SUMMARY\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.SUP \x3d new goog.dom.TagName(\x27SUP\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.SVG \x3d new goog.dom.TagName(\x27SVG\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLTableElement\x3e} */\ngoog.dom.TagName.TABLE \x3d new goog.dom.TagName(\x27TABLE\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLTableSectionElement\x3e} */\ngoog.dom.TagName.TBODY \x3d new goog.dom.TagName(\x27TBODY\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLTableCellElement\x3e} */\ngoog.dom.TagName.TD \x3d new goog.dom.TagName(\x27TD\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLTemplateElement\x3e} */\ngoog.dom.TagName.TEMPLATE \x3d new goog.dom.TagName(\x27TEMPLATE\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLTextAreaElement\x3e} */\ngoog.dom.TagName.TEXTAREA \x3d new goog.dom.TagName(\x27TEXTAREA\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLTableSectionElement\x3e} */\ngoog.dom.TagName.TFOOT \x3d new goog.dom.TagName(\x27TFOOT\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLTableCellElement\x3e} */\ngoog.dom.TagName.TH \x3d new goog.dom.TagName(\x27TH\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLTableSectionElement\x3e} */\ngoog.dom.TagName.THEAD \x3d new goog.dom.TagName(\x27THEAD\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.TIME \x3d new goog.dom.TagName(\x27TIME\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLTitleElement\x3e} */\ngoog.dom.TagName.TITLE \x3d new goog.dom.TagName(\x27TITLE\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLTableRowElement\x3e} */\ngoog.dom.TagName.TR \x3d new goog.dom.TagName(\x27TR\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLTrackElement\x3e} */\ngoog.dom.TagName.TRACK \x3d new goog.dom.TagName(\x27TRACK\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.TT \x3d new goog.dom.TagName(\x27TT\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.U \x3d new goog.dom.TagName(\x27U\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLUListElement\x3e} */\ngoog.dom.TagName.UL \x3d new goog.dom.TagName(\x27UL\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.VAR \x3d new goog.dom.TagName(\x27VAR\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!HTMLVideoElement\x3e} */\ngoog.dom.TagName.VIDEO \x3d new goog.dom.TagName(\x27VIDEO\x27);\n\n\n/** @type {!goog.dom.TagName\x3c!goog.dom.HtmlElement\x3e} */\ngoog.dom.TagName.WBR \x3d new goog.dom.TagName(\x27WBR\x27);\n\n//# sourceURL\x3dhttps://qs/javascript/closure/dom/tagname.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/dom/tags.js";
eval("// Copyright 2014 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utilities for HTML element tag names.\n */\ngoog.provide(\x27goog.dom.tags\x27);\n\ngoog.require(\x27goog.object\x27);\n\n\n/**\n * The void elements specified by\n * http://www.w3.org/TR/html-markup/syntax.html#void-elements.\n * @const @private {!Object\x3cstring, boolean\x3e}\n */\ngoog.dom.tags.VOID_TAGS_ \x3d goog.object.createSet(\n    \x27area\x27, \x27base\x27, \x27br\x27, \x27col\x27, \x27command\x27, \x27embed\x27, \x27hr\x27, \x27img\x27, \x27input\x27,\n    \x27keygen\x27, \x27link\x27, \x27meta\x27, \x27param\x27, \x27source\x27, \x27track\x27, \x27wbr\x27);\n\n\n/**\n * Checks whether the tag is void (with no contents allowed and no legal end\n * tag), for example \x27br\x27.\n * @param {string} tagName The tag name in lower case.\n * @return {boolean}\n */\ngoog.dom.tags.isVoidTag \x3d function(tagName) {\n  return goog.dom.tags.VOID_TAGS_[tagName] \x3d\x3d\x3d true;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/dom/tags.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/string/typedstring.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ngoog.provide(\x27goog.string.TypedString\x27);\n\n\n\n/**\n * Wrapper for strings that conform to a data type or language.\n *\n * Implementations of this interface are wrappers for strings, and typically\n * associate a type contract with the wrapped string.  Concrete implementations\n * of this interface may choose to implement additional run-time type checking,\n * see for example `goog.html.SafeHtml`. If available, client code that\n * needs to ensure type membership of an object should use the type\x27s function\n * to assert type membership, such as `goog.html.SafeHtml.unwrap`.\n * @interface\n */\ngoog.string.TypedString \x3d function() {};\n\n\n/**\n * Interface marker of the TypedString interface.\n *\n * This property can be used to determine at runtime whether or not an object\n * implements this interface.  All implementations of this interface set this\n * property to `true`.\n * @type {boolean}\n */\ngoog.string.TypedString.prototype.implementsGoogStringTypedString;\n\n\n/**\n * Retrieves this wrapped string\x27s value.\n * @return {string} The wrapped string\x27s value.\n */\ngoog.string.TypedString.prototype.getTypedStringValue;\n\n//# sourceURL\x3dhttps://qs/javascript/closure/string/typedstring.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/string/const.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ngoog.provide(\x27goog.string.Const\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.string.TypedString\x27);\n\n\n\n/**\n * Wrapper for compile-time-constant strings.\n *\n * Const is a wrapper for strings that can only be created from program\n * constants (i.e., string literals).  This property relies on a custom Closure\n * compiler check that `goog.string.Const.from` is only invoked on\n * compile-time-constant expressions.\n *\n * Const is useful in APIs whose correct and secure use requires that certain\n * arguments are not attacker controlled: Compile-time constants are inherently\n * under the control of the application and not under control of external\n * attackers, and hence are safe to use in such contexts.\n *\n * Instances of this type must be created via its factory method\n * `goog.string.Const.from` and not by invoking its constructor.  The\n * constructor intentionally takes no parameters and the type is immutable;\n * hence only a default instance corresponding to the empty string can be\n * obtained via constructor invocation.\n *\n * @see goog.string.Const#from\n * @constructor\n * @final\n * @struct\n * @implements {goog.string.TypedString}\n */\ngoog.string.Const \x3d function() {\n  /**\n   * The wrapped value of this Const object.  The field has a purposely ugly\n   * name to make (non-compiled) code that attempts to directly access this\n   * field stand out.\n   * @private {string}\n   */\n  this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ \x3d \x27\x27;\n\n  /**\n   * A type marker used to implement additional run-time type checking.\n   * @see goog.string.Const#unwrap\n   * @const {!Object}\n   * @private\n   */\n  this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ \x3d\n      goog.string.Const.TYPE_MARKER_;\n};\n\n\n/**\n * @override\n * @const\n */\ngoog.string.Const.prototype.implementsGoogStringTypedString \x3d true;\n\n\n/**\n * Returns this Const\x27s value a string.\n *\n * IMPORTANT: In code where it is security-relevant that an object\x27s type is\n * indeed `goog.string.Const`, use `goog.string.Const.unwrap`\n * instead of this method.\n *\n * @see goog.string.Const#unwrap\n * @override\n */\ngoog.string.Const.prototype.getTypedStringValue \x3d function() {\n  return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;\n};\n\n\n/**\n * Returns a debug-string representation of this value.\n *\n * To obtain the actual string value wrapped inside an object of this type,\n * use `goog.string.Const.unwrap`.\n *\n * @see goog.string.Const#unwrap\n * @override\n */\ngoog.string.Const.prototype.toString \x3d function() {\n  return \x27Const{\x27 +\n      this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ +\n      \x27}\x27;\n};\n\n\n/**\n * Performs a runtime check that the provided object is indeed an instance\n * of `goog.string.Const`, and returns its value.\n * @param {!goog.string.Const} stringConst The object to extract from.\n * @return {string} The Const object\x27s contained string, unless the run-time\n *     type check fails. In that case, `unwrap` returns an innocuous\n *     string, or, if assertions are enabled, throws\n *     `goog.asserts.AssertionError`.\n */\ngoog.string.Const.unwrap \x3d function(stringConst) {\n  // Perform additional run-time type-checking to ensure that stringConst is\n  // indeed an instance of the expected type.  This provides some additional\n  // protection against security bugs due to application code that disables type\n  // checks.\n  if (stringConst instanceof goog.string.Const \x26\x26\n      stringConst.constructor \x3d\x3d\x3d goog.string.Const \x26\x26\n      stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ \x3d\x3d\x3d\n          goog.string.Const.TYPE_MARKER_) {\n    return stringConst\n        .stringConstValueWithSecurityContract__googStringSecurityPrivate_;\n  } else {\n    goog.asserts.fail(\n        \x27expected object of type Const, got \\\x27\x27 + stringConst + \x27\\\x27\x27);\n    return \x27type_error:Const\x27;\n  }\n};\n\n\n/**\n * Creates a Const object from a compile-time constant string.\n *\n * It is illegal to invoke this function on an expression whose\n * compile-time-contant value cannot be determined by the Closure compiler.\n *\n * Correct invocations include,\n * \x3cpre\x3e\n *   var s \x3d goog.string.Const.from(\x27hello\x27);\n *   var t \x3d goog.string.Const.from(\x27hello\x27 + \x27world\x27);\n * \x3c/pre\x3e\n *\n * In contrast, the following are illegal:\n * \x3cpre\x3e\n *   var s \x3d goog.string.Const.from(getHello());\n *   var t \x3d goog.string.Const.from(\x27hello\x27 + world);\n * \x3c/pre\x3e\n *\n * @param {string} s A constant string from which to create a Const.\n * @return {!goog.string.Const} A Const object initialized to stringConst.\n */\ngoog.string.Const.from \x3d function(s) {\n  return goog.string.Const.create__googStringSecurityPrivate_(s);\n};\n\n\n/**\n * Type marker for the Const type, used to implement additional run-time\n * type checking.\n * @const {!Object}\n * @private\n */\ngoog.string.Const.TYPE_MARKER_ \x3d {};\n\n\n/**\n * Utility method to create Const instances.\n * @param {string} s The string to initialize the Const object with.\n * @return {!goog.string.Const} The initialized Const object.\n * @private\n */\ngoog.string.Const.create__googStringSecurityPrivate_ \x3d function(s) {\n  var stringConst \x3d new goog.string.Const();\n  stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_ \x3d\n      s;\n  return stringConst;\n};\n\n\n/**\n * A Const instance wrapping the empty string.\n * @const {!goog.string.Const}\n */\ngoog.string.Const.EMPTY \x3d goog.string.Const.from(\x27\x27);\n\n//# sourceURL\x3dhttps://qs/javascript/closure/string/const.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/html/safescript.js";
eval("// Copyright 2014 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview The SafeScript type and its builders.\n *\n * TODO(xtof): Link to document stating type contract.\n */\n\ngoog.provide(\x27goog.html.SafeScript\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.string.Const\x27);\ngoog.require(\x27goog.string.TypedString\x27);\n\n\n\n/**\n * A string-like object which represents JavaScript code and that carries the\n * security type contract that its value, as a string, will not cause execution\n * of unconstrained attacker controlled code (XSS) when evaluated as JavaScript\n * in a browser.\n *\n * Instances of this type must be created via the factory method\n * `goog.html.SafeScript.fromConstant` and not by invoking its\n * constructor. The constructor intentionally takes no parameters and the type\n * is immutable; hence only a default instance corresponding to the empty string\n * can be obtained via constructor invocation.\n *\n * A SafeScript\x27s string representation can safely be interpolated as the\n * content of a script element within HTML. The SafeScript string should not be\n * escaped before interpolation.\n *\n * Note that the SafeScript might contain text that is attacker-controlled but\n * that text should have been interpolated with appropriate escaping,\n * sanitization and/or validation into the right location in the script, such\n * that it is highly constrained in its effect (for example, it had to match a\n * set of whitelisted words).\n *\n * A SafeScript can be constructed via security-reviewed unchecked\n * conversions. In this case producers of SafeScript must ensure themselves that\n * the SafeScript does not contain unsafe script. Note in particular that\n * {@code \x26lt;} is dangerous, even when inside JavaScript strings, and so should\n * always be forbidden or JavaScript escaped in user controlled input. For\n * example, if {@code \x26lt;/script\x26gt;\x26lt;script\x26gt;evil\x26lt;/script\x26gt;\x22} were\n * interpolated inside a JavaScript string, it would break out of the context\n * of the original script element and `evil` would execute. Also note\n * that within an HTML script (raw text) element, HTML character references,\n * such as \x22\x26lt;\x22 are not allowed. See\n * http://www.w3.org/TR/html5/scripting-1.html#restrictions-for-contents-of-script-elements.\n *\n * @see goog.html.SafeScript#fromConstant\n * @constructor\n * @final\n * @struct\n * @implements {goog.string.TypedString}\n */\ngoog.html.SafeScript \x3d function() {\n  /**\n   * The contained value of this SafeScript.  The field has a purposely\n   * ugly name to make (non-compiled) code that attempts to directly access this\n   * field stand out.\n   * @private {string}\n   */\n  this.privateDoNotAccessOrElseSafeScriptWrappedValue_ \x3d \x27\x27;\n\n  /**\n   * A type marker used to implement additional run-time type checking.\n   * @see goog.html.SafeScript#unwrap\n   * @const {!Object}\n   * @private\n   */\n  this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ \x3d\n      goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;\n};\n\n\n/**\n * @override\n * @const\n */\ngoog.html.SafeScript.prototype.implementsGoogStringTypedString \x3d true;\n\n\n/**\n * Type marker for the SafeScript type, used to implement additional\n * run-time type checking.\n * @const {!Object}\n * @private\n */\ngoog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ \x3d {};\n\n\n/**\n * Creates a SafeScript object from a compile-time constant string.\n *\n * @param {!goog.string.Const} script A compile-time-constant string from which\n *     to create a SafeScript.\n * @return {!goog.html.SafeScript} A SafeScript object initialized to\n *     `script`.\n */\ngoog.html.SafeScript.fromConstant \x3d function(script) {\n  var scriptString \x3d goog.string.Const.unwrap(script);\n  if (scriptString.length \x3d\x3d\x3d 0) {\n    return goog.html.SafeScript.EMPTY;\n  }\n  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(\n      scriptString);\n};\n\n\n/**\n * Creates a SafeScript from a compile-time constant string but with arguments\n * that can vary at run-time. The code argument should be formatted as an\n * inline function (see example below). The arguments will be JSON-encoded and\n * provided as input to the function specified in code.\n *\n * Example Usage:\n *\n *     let safeScript \x3d SafeScript.fromConstantAndArgs(\n *         Const.from(\x27function(arg1, arg2) { doSomething(arg1, arg2); }\x27),\n *         arg1,\n *         arg2);\n *\n * This produces a SafeScript equivalent to the following:\n *\n *     (function(arg1, arg2) { doSomething(arg1, arg2); })(\x22value1\x22, \x22value2\x22);\n *\n * @param {!goog.string.Const} code\n * @param {...*} var_args\n * @return {!goog.html.SafeScript}\n */\ngoog.html.SafeScript.fromConstantAndArgs \x3d function(code, var_args) {\n  var args \x3d [];\n  for (var i \x3d 1; i \x3c arguments.length; i++) {\n    args.push(goog.html.SafeScript.stringify_(arguments[i]));\n  }\n  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(\n      \x27(\x27 + goog.string.Const.unwrap(code) + \x27)(\x27 + args.join(\x27, \x27) + \x27);\x27);\n};\n\n\n/**\n * Returns this SafeScript\x27s value as a string.\n *\n * IMPORTANT: In code where it is security relevant that an object\x27s type is\n * indeed `SafeScript`, use `goog.html.SafeScript.unwrap` instead of\n * this method. If in doubt, assume that it\x27s security relevant. In particular,\n * note that goog.html functions which return a goog.html type do not guarantee\n * the returned instance is of the right type. For example:\n *\n * \x3cpre\x3e\n * var fakeSafeHtml \x3d new String(\x27fake\x27);\n * fakeSafeHtml.__proto__ \x3d goog.html.SafeHtml.prototype;\n * var newSafeHtml \x3d goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\n * // newSafeHtml is just an alias for fakeSafeHtml, it\x27s passed through by\n * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml\n * // instanceof goog.html.SafeHtml.\n * \x3c/pre\x3e\n *\n * @see goog.html.SafeScript#unwrap\n * @override\n */\ngoog.html.SafeScript.prototype.getTypedStringValue \x3d function() {\n  return this.privateDoNotAccessOrElseSafeScriptWrappedValue_;\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Returns a debug string-representation of this value.\n   *\n   * To obtain the actual string value wrapped in a SafeScript, use\n   * `goog.html.SafeScript.unwrap`.\n   *\n   * @see goog.html.SafeScript#unwrap\n   * @override\n   */\n  goog.html.SafeScript.prototype.toString \x3d function() {\n    return \x27SafeScript{\x27 +\n        this.privateDoNotAccessOrElseSafeScriptWrappedValue_ + \x27}\x27;\n  };\n}\n\n\n/**\n * Performs a runtime check that the provided object is indeed a\n * SafeScript object, and returns its value.\n *\n * @param {!goog.html.SafeScript} safeScript The object to extract from.\n * @return {string} The safeScript object\x27s contained string, unless\n *     the run-time type check fails. In that case, `unwrap` returns an\n *     innocuous string, or, if assertions are enabled, throws\n *     `goog.asserts.AssertionError`.\n */\ngoog.html.SafeScript.unwrap \x3d function(safeScript) {\n  // Perform additional Run-time type-checking to ensure that\n  // safeScript is indeed an instance of the expected type.  This\n  // provides some additional protection against security bugs due to\n  // application code that disables type checks.\n  // Specifically, the following checks are performed:\n  // 1. The object is an instance of the expected type.\n  // 2. The object is not an instance of a subclass.\n  // 3. The object carries a type marker for the expected type. \x22Faking\x22 an\n  // object requires a reference to the type marker, which has names intended\n  // to stand out in code reviews.\n  if (safeScript instanceof goog.html.SafeScript \x26\x26\n      safeScript.constructor \x3d\x3d\x3d goog.html.SafeScript \x26\x26\n      safeScript.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ \x3d\x3d\x3d\n          goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {\n    return safeScript.privateDoNotAccessOrElseSafeScriptWrappedValue_;\n  } else {\n    goog.asserts.fail(\x27expected object of type SafeScript, got \\\x27\x27 +\n        safeScript + \x27\\\x27 of type \x27 + goog.typeOf(safeScript));\n    return \x27type_error:SafeScript\x27;\n  }\n};\n\n\n/**\n * Converts the given value to a embeddabel JSON string and returns it. The\n * resulting string can be embedded in HTML because the \x27\x3c\x27 character is\n * encoded.\n *\n * @param {*} val\n * @return {string}\n * @private\n */\ngoog.html.SafeScript.stringify_ \x3d function(val) {\n  var json \x3d JSON.stringify(val);\n  return json.replace(/\x3c/g, \x27\\\\x3c\x27);\n};\n\n/**\n * Package-internal utility method to create SafeScript instances.\n *\n * @param {string} script The string to initialize the SafeScript object with.\n * @return {!goog.html.SafeScript} The initialized SafeScript object.\n * @package\n */\ngoog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse \x3d\n    function(script) {\n  return new goog.html.SafeScript().initSecurityPrivateDoNotAccessOrElse_(\n      script);\n};\n\n\n/**\n * Called from createSafeScriptSecurityPrivateDoNotAccessOrElse(). This\n * method exists only so that the compiler can dead code eliminate static\n * fields (like EMPTY) when they\x27re not accessed.\n * @param {string} script\n * @return {!goog.html.SafeScript}\n * @private\n */\ngoog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_ \x3d function(\n    script) {\n  this.privateDoNotAccessOrElseSafeScriptWrappedValue_ \x3d script;\n  return this;\n};\n\n\n/**\n * A SafeScript instance corresponding to the empty string.\n * @const {!goog.html.SafeScript}\n */\ngoog.html.SafeScript.EMPTY \x3d\n    goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(\x27\x27);\n\n//# sourceURL\x3dhttps://qs/javascript/closure/html/safescript.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/fs/url.js";
eval("// Copyright 2015 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Wrapper for URL and its createObjectUrl and revokeObjectUrl\n * methods that are part of the HTML5 File API.\n */\n\ngoog.provide(\x27goog.fs.url\x27);\n\n\n/**\n * Creates a blob URL for a blob object.\n * Throws an error if the browser does not support Object Urls.\n *\n * @param {!Blob} blob The object for which to create the URL.\n * @return {string} The URL for the object.\n */\ngoog.fs.url.createObjectUrl \x3d function(blob) {\n  return goog.fs.url.getUrlObject_().createObjectURL(blob);\n};\n\n\n/**\n * Revokes a URL created by {@link goog.fs.url.createObjectUrl}.\n * Throws an error if the browser does not support Object Urls.\n *\n * @param {string} url The URL to revoke.\n */\ngoog.fs.url.revokeObjectUrl \x3d function(url) {\n  goog.fs.url.getUrlObject_().revokeObjectURL(url);\n};\n\n\n/**\n * @typedef {{createObjectURL: (function(!Blob): string),\n *            revokeObjectURL: function(string): void}}\n */\ngoog.fs.url.UrlObject_;\n\n\n/**\n * Get the object that has the createObjectURL and revokeObjectURL functions for\n * this browser.\n *\n * @return {goog.fs.url.UrlObject_} The object for this browser.\n * @private\n */\ngoog.fs.url.getUrlObject_ \x3d function() {\n  var urlObject \x3d goog.fs.url.findUrlObject_();\n  if (urlObject !\x3d null) {\n    return urlObject;\n  } else {\n    throw new Error(\x27This browser doesn\\\x27t seem to support blob URLs\x27);\n  }\n};\n\n\n/**\n * Finds the object that has the createObjectURL and revokeObjectURL functions\n * for this browser.\n *\n * @return {?goog.fs.url.UrlObject_} The object for this browser or null if the\n *     browser does not support Object Urls.\n * @private\n */\ngoog.fs.url.findUrlObject_ \x3d function() {\n  // This is what the spec says to do\n  // http://dev.w3.org/2006/webapi/FileAPI/#dfn-createObjectURL\n  if (goog.isDef(goog.global.URL) \x26\x26\n      goog.isDef(goog.global.URL.createObjectURL)) {\n    return /** @type {goog.fs.url.UrlObject_} */ (goog.global.URL);\n    // This is what Chrome does (as of 10.0.648.6 dev)\n  } else if (\n      goog.isDef(goog.global.webkitURL) \x26\x26\n      goog.isDef(goog.global.webkitURL.createObjectURL)) {\n    return /** @type {goog.fs.url.UrlObject_} */ (goog.global.webkitURL);\n    // This is what the spec used to say to do\n  } else if (goog.isDef(goog.global.createObjectURL)) {\n    return /** @type {goog.fs.url.UrlObject_} */ (goog.global);\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * Checks whether this browser supports Object Urls. If not, calls to\n * createObjectUrl and revokeObjectUrl will result in an error.\n *\n * @return {boolean} True if this browser supports Object Urls.\n */\ngoog.fs.url.browserSupportsObjectUrls \x3d function() {\n  return goog.fs.url.findUrlObject_() !\x3d null;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/fs/url.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/i18n/bidi.js";
eval("// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utility functions for supporting Bidi issues.\n * @author shanjian@google.com (Shanjian Li)\n * @author dougfelt@google.com (Doug Felt)\n */\n\n\n/**\n * Namespace for bidi supporting functions.\n */\ngoog.provide(\x27goog.i18n.bidi\x27);\ngoog.provide(\x27goog.i18n.bidi.Dir\x27);\ngoog.provide(\x27goog.i18n.bidi.DirectionalString\x27);\ngoog.provide(\x27goog.i18n.bidi.Format\x27);\n\n\n/**\n * @define {boolean} FORCE_RTL forces the {@link goog.i18n.bidi.IS_RTL} constant\n * to say that the current locale is a RTL locale.  This should only be used\n * if you want to override the default behavior for deciding whether the\n * current locale is RTL or not.\n *\n * {@see goog.i18n.bidi.IS_RTL}\n */\ngoog.define(\x27goog.i18n.bidi.FORCE_RTL\x27, false);\n\n\n/**\n * Constant that defines whether or not the current locale is a RTL locale.\n * If {@link goog.i18n.bidi.FORCE_RTL} is not true, this constant will default\n * to check that {@link goog.LOCALE} is one of a few major RTL locales.\n *\n * \x3cp\x3eThis is designed to be a maximally efficient compile-time constant. For\n * example, for the default goog.LOCALE, compiling\n * \x22if (goog.i18n.bidi.IS_RTL) alert(\x27rtl\x27) else {}\x22 should produce no code. It\n * is this design consideration that limits the implementation to only\n * supporting a few major RTL locales, as opposed to the broader repertoire of\n * something like goog.i18n.bidi.isRtlLanguage.\n *\n * \x3cp\x3eSince this constant refers to the directionality of the locale, it is up\n * to the caller to determine if this constant should also be used for the\n * direction of the UI.\n *\n * {@see goog.LOCALE}\n *\n * @type {boolean}\n *\n * TODO(aharon): write a test that checks that this is a compile-time constant.\n */\ngoog.i18n.bidi.IS_RTL \x3d goog.i18n.bidi.FORCE_RTL ||\n    ((goog.LOCALE.substring(0, 2).toLowerCase() \x3d\x3d \x27ar\x27 ||\n      goog.LOCALE.substring(0, 2).toLowerCase() \x3d\x3d \x27fa\x27 ||\n      goog.LOCALE.substring(0, 2).toLowerCase() \x3d\x3d \x27he\x27 ||\n      goog.LOCALE.substring(0, 2).toLowerCase() \x3d\x3d \x27iw\x27 ||\n      goog.LOCALE.substring(0, 2).toLowerCase() \x3d\x3d \x27ps\x27 ||\n      goog.LOCALE.substring(0, 2).toLowerCase() \x3d\x3d \x27sd\x27 ||\n      goog.LOCALE.substring(0, 2).toLowerCase() \x3d\x3d \x27ug\x27 ||\n      goog.LOCALE.substring(0, 2).toLowerCase() \x3d\x3d \x27ur\x27 ||\n      goog.LOCALE.substring(0, 2).toLowerCase() \x3d\x3d \x27yi\x27) \x26\x26\n     (goog.LOCALE.length \x3d\x3d 2 || goog.LOCALE.substring(2, 3) \x3d\x3d \x27-\x27 ||\n      goog.LOCALE.substring(2, 3) \x3d\x3d \x27_\x27)) ||\n    (goog.LOCALE.length \x3e\x3d 3 \x26\x26\n     goog.LOCALE.substring(0, 3).toLowerCase() \x3d\x3d \x27ckb\x27 \x26\x26\n     (goog.LOCALE.length \x3d\x3d 3 || goog.LOCALE.substring(3, 4) \x3d\x3d \x27-\x27 ||\n      goog.LOCALE.substring(3, 4) \x3d\x3d \x27_\x27));\n\n\n/**\n * Unicode formatting characters and directionality string constants.\n * @enum {string}\n */\ngoog.i18n.bidi.Format \x3d {\n  /** Unicode \x22Left-To-Right Embedding\x22 (LRE) character. */\n  LRE: \x27\\u202A\x27,\n  /** Unicode \x22Right-To-Left Embedding\x22 (RLE) character. */\n  RLE: \x27\\u202B\x27,\n  /** Unicode \x22Pop Directional Formatting\x22 (PDF) character. */\n  PDF: \x27\\u202C\x27,\n  /** Unicode \x22Left-To-Right Mark\x22 (LRM) character. */\n  LRM: \x27\\u200E\x27,\n  /** Unicode \x22Right-To-Left Mark\x22 (RLM) character. */\n  RLM: \x27\\u200F\x27\n};\n\n\n/**\n * Directionality enum.\n * @enum {number}\n */\ngoog.i18n.bidi.Dir \x3d {\n  /**\n   * Left-to-right.\n   */\n  LTR: 1,\n\n  /**\n   * Right-to-left.\n   */\n  RTL: -1,\n\n  /**\n   * Neither left-to-right nor right-to-left.\n   */\n  NEUTRAL: 0\n};\n\n\n/**\n * \x27right\x27 string constant.\n * @type {string}\n */\ngoog.i18n.bidi.RIGHT \x3d \x27right\x27;\n\n\n/**\n * \x27left\x27 string constant.\n * @type {string}\n */\ngoog.i18n.bidi.LEFT \x3d \x27left\x27;\n\n\n/**\n * \x27left\x27 if locale is RTL, \x27right\x27 if not.\n * @type {string}\n */\ngoog.i18n.bidi.I18N_RIGHT \x3d\n    goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT : goog.i18n.bidi.RIGHT;\n\n\n/**\n * \x27right\x27 if locale is RTL, \x27left\x27 if not.\n * @type {string}\n */\ngoog.i18n.bidi.I18N_LEFT \x3d\n    goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;\n\n\n/**\n * Convert a directionality given in various formats to a goog.i18n.bidi.Dir\n * constant. Useful for interaction with different standards of directionality\n * representation.\n *\n * @param {goog.i18n.bidi.Dir|number|boolean|null} givenDir Directionality given\n *     in one of the following formats:\n *     1. A goog.i18n.bidi.Dir constant.\n *     2. A number (positive \x3d LTR, negative \x3d RTL, 0 \x3d neutral).\n *     3. A boolean (true \x3d RTL, false \x3d LTR).\n *     4. A null for unknown directionality.\n * @param {boolean\x3d} opt_noNeutral Whether a givenDir of zero or\n *     goog.i18n.bidi.Dir.NEUTRAL should be treated as null, i.e. unknown, in\n *     order to preserve legacy behavior.\n * @return {?goog.i18n.bidi.Dir} A goog.i18n.bidi.Dir constant matching the\n *     given directionality. If given null, returns null (i.e. unknown).\n */\ngoog.i18n.bidi.toDir \x3d function(givenDir, opt_noNeutral) {\n  if (typeof givenDir \x3d\x3d \x27number\x27) {\n    // This includes the non-null goog.i18n.bidi.Dir case.\n    return givenDir \x3e 0 ? goog.i18n.bidi.Dir.LTR : givenDir \x3c 0 ?\n                          goog.i18n.bidi.Dir.RTL :\n                          opt_noNeutral ? null : goog.i18n.bidi.Dir.NEUTRAL;\n  } else if (givenDir \x3d\x3d null) {\n    return null;\n  } else {\n    // Must be typeof givenDir \x3d\x3d \x27boolean\x27.\n    return givenDir ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;\n  }\n};\n\n\n/**\n * A practical pattern to identify strong LTR characters. This pattern is not\n * theoretically correct according to the Unicode standard. It is simplified for\n * performance and small code size.\n * @type {string}\n * @private\n */\ngoog.i18n.bidi.ltrChars_ \x3d\n    \x27A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\x27 +\n    \x27\\u200E\\u2C00-\\uFB1C\\uFE00-\\uFE6F\\uFEFD-\\uFFFF\x27;\n\n\n/**\n * A practical pattern to identify strong RTL character. This pattern is not\n * theoretically correct according to the Unicode standard. It is simplified\n * for performance and small code size.\n * @type {string}\n * @private\n */\ngoog.i18n.bidi.rtlChars_ \x3d\n    \x27\\u0591-\\u06EF\\u06FA-\\u07FF\\u200F\\uFB1D-\\uFDFF\\uFE70-\\uFEFC\x27;\n\n\n/**\n * Simplified regular expression for an HTML tag (opening or closing) or an HTML\n * escape. We might want to skip over such expressions when estimating the text\n * directionality.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.htmlSkipReg_ \x3d /\x3c[^\x3e]*\x3e|\x26[^;]+;/g;\n\n\n/**\n * Returns the input text with spaces instead of HTML tags or HTML escapes, if\n * opt_isStripNeeded is true. Else returns the input as is.\n * Useful for text directionality estimation.\n * Note: the function should not be used in other contexts; it is not 100%\n * correct, but rather a good-enough implementation for directionality\n * estimation purposes.\n * @param {string} str The given string.\n * @param {boolean\x3d} opt_isStripNeeded Whether to perform the stripping.\n *     Default: false (to retain consistency with calling functions).\n * @return {string} The given string cleaned of HTML tags / escapes.\n * @private\n */\ngoog.i18n.bidi.stripHtmlIfNeeded_ \x3d function(str, opt_isStripNeeded) {\n  return opt_isStripNeeded ? str.replace(goog.i18n.bidi.htmlSkipReg_, \x27\x27) : str;\n};\n\n\n/**\n * Regular expression to check for RTL characters.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.rtlCharReg_ \x3d new RegExp(\x27[\x27 + goog.i18n.bidi.rtlChars_ + \x27]\x27);\n\n\n/**\n * Regular expression to check for LTR characters.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.ltrCharReg_ \x3d new RegExp(\x27[\x27 + goog.i18n.bidi.ltrChars_ + \x27]\x27);\n\n\n/**\n * Test whether the given string has any RTL characters in it.\n * @param {string} str The given string that need to be tested.\n * @param {boolean\x3d} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether the string contains RTL characters.\n */\ngoog.i18n.bidi.hasAnyRtl \x3d function(str, opt_isHtml) {\n  return goog.i18n.bidi.rtlCharReg_.test(\n      goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));\n};\n\n\n/**\n * Test whether the given string has any RTL characters in it.\n * @param {string} str The given string that need to be tested.\n * @return {boolean} Whether the string contains RTL characters.\n * @deprecated Use hasAnyRtl.\n */\ngoog.i18n.bidi.hasRtlChar \x3d goog.i18n.bidi.hasAnyRtl;\n\n\n/**\n * Test whether the given string has any LTR characters in it.\n * @param {string} str The given string that need to be tested.\n * @param {boolean\x3d} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether the string contains LTR characters.\n */\ngoog.i18n.bidi.hasAnyLtr \x3d function(str, opt_isHtml) {\n  return goog.i18n.bidi.ltrCharReg_.test(\n      goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));\n};\n\n\n/**\n * Regular expression pattern to check if the first character in the string\n * is LTR.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.ltrRe_ \x3d new RegExp(\x27^[\x27 + goog.i18n.bidi.ltrChars_ + \x27]\x27);\n\n\n/**\n * Regular expression pattern to check if the first character in the string\n * is RTL.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.rtlRe_ \x3d new RegExp(\x27^[\x27 + goog.i18n.bidi.rtlChars_ + \x27]\x27);\n\n\n/**\n * Check if the first character in the string is RTL or not.\n * @param {string} str The given string that need to be tested.\n * @return {boolean} Whether the first character in str is an RTL char.\n */\ngoog.i18n.bidi.isRtlChar \x3d function(str) {\n  return goog.i18n.bidi.rtlRe_.test(str);\n};\n\n\n/**\n * Check if the first character in the string is LTR or not.\n * @param {string} str The given string that need to be tested.\n * @return {boolean} Whether the first character in str is an LTR char.\n */\ngoog.i18n.bidi.isLtrChar \x3d function(str) {\n  return goog.i18n.bidi.ltrRe_.test(str);\n};\n\n\n/**\n * Check if the first character in the string is neutral or not.\n * @param {string} str The given string that need to be tested.\n * @return {boolean} Whether the first character in str is a neutral char.\n */\ngoog.i18n.bidi.isNeutralChar \x3d function(str) {\n  return !goog.i18n.bidi.isLtrChar(str) \x26\x26 !goog.i18n.bidi.isRtlChar(str);\n};\n\n\n/**\n * Regular expressions to check if a piece of text is of LTR directionality\n * on first character with strong directionality.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.ltrDirCheckRe_ \x3d new RegExp(\n    \x27^[^\x27 + goog.i18n.bidi.rtlChars_ + \x27]*[\x27 + goog.i18n.bidi.ltrChars_ + \x27]\x27);\n\n\n/**\n * Regular expressions to check if a piece of text is of RTL directionality\n * on first character with strong directionality.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.rtlDirCheckRe_ \x3d new RegExp(\n    \x27^[^\x27 + goog.i18n.bidi.ltrChars_ + \x27]*[\x27 + goog.i18n.bidi.rtlChars_ + \x27]\x27);\n\n\n/**\n * Check whether the first strongly directional character (if any) is RTL.\n * @param {string} str String being checked.\n * @param {boolean\x3d} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether RTL directionality is detected using the first\n *     strongly-directional character method.\n */\ngoog.i18n.bidi.startsWithRtl \x3d function(str, opt_isHtml) {\n  return goog.i18n.bidi.rtlDirCheckRe_.test(\n      goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));\n};\n\n\n/**\n * Check whether the first strongly directional character (if any) is RTL.\n * @param {string} str String being checked.\n * @param {boolean\x3d} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether RTL directionality is detected using the first\n *     strongly-directional character method.\n * @deprecated Use startsWithRtl.\n */\ngoog.i18n.bidi.isRtlText \x3d goog.i18n.bidi.startsWithRtl;\n\n\n/**\n * Check whether the first strongly directional character (if any) is LTR.\n * @param {string} str String being checked.\n * @param {boolean\x3d} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether LTR directionality is detected using the first\n *     strongly-directional character method.\n */\ngoog.i18n.bidi.startsWithLtr \x3d function(str, opt_isHtml) {\n  return goog.i18n.bidi.ltrDirCheckRe_.test(\n      goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));\n};\n\n\n/**\n * Check whether the first strongly directional character (if any) is LTR.\n * @param {string} str String being checked.\n * @param {boolean\x3d} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether LTR directionality is detected using the first\n *     strongly-directional character method.\n * @deprecated Use startsWithLtr.\n */\ngoog.i18n.bidi.isLtrText \x3d goog.i18n.bidi.startsWithLtr;\n\n\n/**\n * Regular expression to check if a string looks like something that must\n * always be LTR even in RTL text, e.g. a URL. When estimating the\n * directionality of text containing these, we treat these as weakly LTR,\n * like numbers.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.isRequiredLtrRe_ \x3d /^http:\\/\\/.*/;\n\n\n/**\n * Check whether the input string either contains no strongly directional\n * characters or looks like a url.\n * @param {string} str String being checked.\n * @param {boolean\x3d} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether neutral directionality is detected.\n */\ngoog.i18n.bidi.isNeutralText \x3d function(str, opt_isHtml) {\n  str \x3d goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml);\n  return goog.i18n.bidi.isRequiredLtrRe_.test(str) ||\n      !goog.i18n.bidi.hasAnyLtr(str) \x26\x26 !goog.i18n.bidi.hasAnyRtl(str);\n};\n\n\n/**\n * Regular expressions to check if the last strongly-directional character in a\n * piece of text is LTR.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.ltrExitDirCheckRe_ \x3d new RegExp(\n    \x27[\x27 + goog.i18n.bidi.ltrChars_ + \x27][^\x27 + goog.i18n.bidi.rtlChars_ + \x27]*$\x27);\n\n\n/**\n * Regular expressions to check if the last strongly-directional character in a\n * piece of text is RTL.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.rtlExitDirCheckRe_ \x3d new RegExp(\n    \x27[\x27 + goog.i18n.bidi.rtlChars_ + \x27][^\x27 + goog.i18n.bidi.ltrChars_ + \x27]*$\x27);\n\n\n/**\n * Check if the exit directionality a piece of text is LTR, i.e. if the last\n * strongly-directional character in the string is LTR.\n * @param {string} str String being checked.\n * @param {boolean\x3d} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether LTR exit directionality was detected.\n */\ngoog.i18n.bidi.endsWithLtr \x3d function(str, opt_isHtml) {\n  return goog.i18n.bidi.ltrExitDirCheckRe_.test(\n      goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));\n};\n\n\n/**\n * Check if the exit directionality a piece of text is LTR, i.e. if the last\n * strongly-directional character in the string is LTR.\n * @param {string} str String being checked.\n * @param {boolean\x3d} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether LTR exit directionality was detected.\n * @deprecated Use endsWithLtr.\n */\ngoog.i18n.bidi.isLtrExitText \x3d goog.i18n.bidi.endsWithLtr;\n\n\n/**\n * Check if the exit directionality a piece of text is RTL, i.e. if the last\n * strongly-directional character in the string is RTL.\n * @param {string} str String being checked.\n * @param {boolean\x3d} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether RTL exit directionality was detected.\n */\ngoog.i18n.bidi.endsWithRtl \x3d function(str, opt_isHtml) {\n  return goog.i18n.bidi.rtlExitDirCheckRe_.test(\n      goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));\n};\n\n\n/**\n * Check if the exit directionality a piece of text is RTL, i.e. if the last\n * strongly-directional character in the string is RTL.\n * @param {string} str String being checked.\n * @param {boolean\x3d} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether RTL exit directionality was detected.\n * @deprecated Use endsWithRtl.\n */\ngoog.i18n.bidi.isRtlExitText \x3d goog.i18n.bidi.endsWithRtl;\n\n\n/**\n * A regular expression for matching right-to-left language codes.\n * See {@link #isRtlLanguage} for the design.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.rtlLocalesRe_ \x3d new RegExp(\n    \x27^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|\x27 +\n        \x27.*[-_](Arab|Hebr|Thaa|Nkoo|Tfng))\x27 +\n        \x27(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)\x27,\n    \x27i\x27);\n\n\n/**\n * Check if a BCP 47 / III language code indicates an RTL language, i.e. either:\n * - a language code explicitly specifying one of the right-to-left scripts,\n *   e.g. \x22az-Arab\x22, or\x3cp\x3e\n * - a language code specifying one of the languages normally written in a\n *   right-to-left script, e.g. \x22fa\x22 (Farsi), except ones explicitly specifying\n *   Latin or Cyrillic script (which are the usual LTR alternatives).\x3cp\x3e\n * The list of right-to-left scripts appears in the 100-199 range in\n * http://www.unicode.org/iso15924/iso15924-num.html, of which Arabic and\n * Hebrew are by far the most widely used. We also recognize Thaana, N\x27Ko, and\n * Tifinagh, which also have significant modern usage. The rest (Syriac,\n * Samaritan, Mandaic, etc.) seem to have extremely limited or no modern usage\n * and are not recognized to save on code size.\n * The languages usually written in a right-to-left script are taken as those\n * with Suppress-Script: Hebr|Arab|Thaa|Nkoo|Tfng  in\n * http://www.iana.org/assignments/language-subtag-registry,\n * as well as Central (or Sorani) Kurdish (ckb), Sindhi (sd) and Uyghur (ug).\n * Other subtags of the language code, e.g. regions like EG (Egypt), are\n * ignored.\n * @param {string} lang BCP 47 (a.k.a III) language code.\n * @return {boolean} Whether the language code is an RTL language.\n */\ngoog.i18n.bidi.isRtlLanguage \x3d function(lang) {\n  return goog.i18n.bidi.rtlLocalesRe_.test(lang);\n};\n\n\n/**\n * Regular expression for bracket guard replacement in text.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.bracketGuardTextRe_ \x3d\n    /(\\(.*?\\)+)|(\\[.*?\\]+)|(\\{.*?\\}+)|(\x3c.*?\x3e+)/g;\n\n\n/**\n * Apply bracket guard using LRM and RLM. This is to address the problem of\n * messy bracket display frequently happens in RTL layout.\n * This function works for plain text, not for HTML. In HTML, the opening\n * bracket might be in a different context than the closing bracket (such as\n * an attribute value).\n * @param {string} s The string that need to be processed.\n * @param {boolean\x3d} opt_isRtlContext specifies default direction (usually\n *     direction of the UI).\n * @return {string} The processed string, with all bracket guarded.\n */\ngoog.i18n.bidi.guardBracketInText \x3d function(s, opt_isRtlContext) {\n  var useRtl \x3d opt_isRtlContext \x3d\x3d\x3d undefined ? goog.i18n.bidi.hasAnyRtl(s) :\n                                                opt_isRtlContext;\n  var mark \x3d useRtl ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;\n  return s.replace(goog.i18n.bidi.bracketGuardTextRe_, mark + \x27$\x26\x27 + mark);\n};\n\n\n/**\n * Enforce the html snippet in RTL directionality regardless overall context.\n * If the html piece was enclosed by tag, dir will be applied to existing\n * tag, otherwise a span tag will be added as wrapper. For this reason, if\n * html snippet start with with tag, this tag must enclose the whole piece. If\n * the tag already has a dir specified, this new one will override existing\n * one in behavior (tested on FF and IE).\n * @param {string} html The string that need to be processed.\n * @return {string} The processed string, with directionality enforced to RTL.\n */\ngoog.i18n.bidi.enforceRtlInHtml \x3d function(html) {\n  if (html.charAt(0) \x3d\x3d \x27\x3c\x27) {\n    return html.replace(/\x3c\\w+/, \x27$\x26 dir\x3drtl\x27);\n  }\n  // \x27\\n\x27 is important for FF so that it won\x27t incorrectly merge span groups\n  return \x27\\n\x3cspan dir\x3drtl\x3e\x27 + html + \x27\x3c/span\x3e\x27;\n};\n\n\n/**\n * Enforce RTL on both end of the given text piece using unicode BiDi formatting\n * characters RLE and PDF.\n * @param {string} text The piece of text that need to be wrapped.\n * @return {string} The wrapped string after process.\n */\ngoog.i18n.bidi.enforceRtlInText \x3d function(text) {\n  return goog.i18n.bidi.Format.RLE + text + goog.i18n.bidi.Format.PDF;\n};\n\n\n/**\n * Enforce the html snippet in RTL directionality regardless overall context.\n * If the html piece was enclosed by tag, dir will be applied to existing\n * tag, otherwise a span tag will be added as wrapper. For this reason, if\n * html snippet start with with tag, this tag must enclose the whole piece. If\n * the tag already has a dir specified, this new one will override existing\n * one in behavior (tested on FF and IE).\n * @param {string} html The string that need to be processed.\n * @return {string} The processed string, with directionality enforced to RTL.\n */\ngoog.i18n.bidi.enforceLtrInHtml \x3d function(html) {\n  if (html.charAt(0) \x3d\x3d \x27\x3c\x27) {\n    return html.replace(/\x3c\\w+/, \x27$\x26 dir\x3dltr\x27);\n  }\n  // \x27\\n\x27 is important for FF so that it won\x27t incorrectly merge span groups\n  return \x27\\n\x3cspan dir\x3dltr\x3e\x27 + html + \x27\x3c/span\x3e\x27;\n};\n\n\n/**\n * Enforce LTR on both end of the given text piece using unicode BiDi formatting\n * characters LRE and PDF.\n * @param {string} text The piece of text that need to be wrapped.\n * @return {string} The wrapped string after process.\n */\ngoog.i18n.bidi.enforceLtrInText \x3d function(text) {\n  return goog.i18n.bidi.Format.LRE + text + goog.i18n.bidi.Format.PDF;\n};\n\n\n/**\n * Regular expression to find dimensions such as \x22padding: .3 0.4ex 5px 6;\x22\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.dimensionsRe_ \x3d\n    /:\\s*([.\\d][.\\w]*)\\s+([.\\d][.\\w]*)\\s+([.\\d][.\\w]*)\\s+([.\\d][.\\w]*)/g;\n\n\n/**\n * Regular expression for left.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.leftRe_ \x3d /left/gi;\n\n\n/**\n * Regular expression for right.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.rightRe_ \x3d /right/gi;\n\n\n/**\n * Placeholder regular expression for swapping.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.tempRe_ \x3d /%%%%/g;\n\n\n/**\n * Swap location parameters and \x27left\x27/\x27right\x27 in CSS specification. The\n * processed string will be suited for RTL layout. Though this function can\n * cover most cases, there are always exceptions. It is suggested to put\n * those exceptions in separate group of CSS string.\n * @param {string} cssStr CSS spefication string.\n * @return {string} Processed CSS specification string.\n */\ngoog.i18n.bidi.mirrorCSS \x3d function(cssStr) {\n  return cssStr\n      .\n      // reverse dimensions\n      replace(goog.i18n.bidi.dimensionsRe_, \x27:$1 $4 $3 $2\x27)\n      .replace(goog.i18n.bidi.leftRe_, \x27%%%%\x27)\n      .  // swap left and right\n      replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT)\n      .replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT);\n};\n\n\n/**\n * Regular expression for hebrew double quote substitution, finding quote\n * directly after hebrew characters.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.doubleQuoteSubstituteRe_ \x3d /([\\u0591-\\u05f2])\x22/g;\n\n\n/**\n * Regular expression for hebrew single quote substitution, finding quote\n * directly after hebrew characters.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.singleQuoteSubstituteRe_ \x3d /([\\u0591-\\u05f2])\x27/g;\n\n\n/**\n * Replace the double and single quote directly after a Hebrew character with\n * GERESH and GERSHAYIM. In such case, most likely that\x27s user intention.\n * @param {string} str String that need to be processed.\n * @return {string} Processed string with double/single quote replaced.\n */\ngoog.i18n.bidi.normalizeHebrewQuote \x3d function(str) {\n  return str.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, \x27$1\\u05f4\x27)\n      .replace(goog.i18n.bidi.singleQuoteSubstituteRe_, \x27$1\\u05f3\x27);\n};\n\n\n/**\n * Regular expression to split a string into \x22words\x22 for directionality\n * estimation based on relative word counts.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.wordSeparatorRe_ \x3d /\\s+/;\n\n\n/**\n * Regular expression to check if a string contains any numerals. Used to\n * differentiate between completely neutral strings and those containing\n * numbers, which are weakly LTR.\n *\n * Native Arabic digits (\\u0660 - \\u0669) are not included because although they\n * do flow left-to-right inside a number, this is the case even if the  overall\n * directionality is RTL, and a mathematical expression using these digits is\n * supposed to flow right-to-left overall, including unary plus and minus\n * appearing to the right of a number, and this does depend on the overall\n * directionality being RTL. The digits used in Farsi (\\u06F0 - \\u06F9), on the\n * other hand, are included, since Farsi math (including unary plus and minus)\n * does flow left-to-right.\n *\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.hasNumeralsRe_ \x3d /[\\d\\u06f0-\\u06f9]/;\n\n\n/**\n * This constant controls threshold of RTL directionality.\n * @type {number}\n * @private\n */\ngoog.i18n.bidi.rtlDetectionThreshold_ \x3d 0.40;\n\n\n/**\n * Estimates the directionality of a string based on relative word counts.\n * If the number of RTL words is above a certain percentage of the total number\n * of strongly directional words, returns RTL.\n * Otherwise, if any words are strongly or weakly LTR, returns LTR.\n * Otherwise, returns UNKNOWN, which is used to mean \x22neutral\x22.\n * Numbers are counted as weakly LTR.\n * @param {string} str The string to be checked.\n * @param {boolean\x3d} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {goog.i18n.bidi.Dir} Estimated overall directionality of `str`.\n */\ngoog.i18n.bidi.estimateDirection \x3d function(str, opt_isHtml) {\n  var rtlCount \x3d 0;\n  var totalCount \x3d 0;\n  var hasWeaklyLtr \x3d false;\n  var tokens \x3d goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml)\n                   .split(goog.i18n.bidi.wordSeparatorRe_);\n  for (var i \x3d 0; i \x3c tokens.length; i++) {\n    var token \x3d tokens[i];\n    if (goog.i18n.bidi.startsWithRtl(token)) {\n      rtlCount++;\n      totalCount++;\n    } else if (goog.i18n.bidi.isRequiredLtrRe_.test(token)) {\n      hasWeaklyLtr \x3d true;\n    } else if (goog.i18n.bidi.hasAnyLtr(token)) {\n      totalCount++;\n    } else if (goog.i18n.bidi.hasNumeralsRe_.test(token)) {\n      hasWeaklyLtr \x3d true;\n    }\n  }\n\n  return totalCount \x3d\x3d 0 ?\n      (hasWeaklyLtr ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.NEUTRAL) :\n      (rtlCount / totalCount \x3e goog.i18n.bidi.rtlDetectionThreshold_ ?\n           goog.i18n.bidi.Dir.RTL :\n           goog.i18n.bidi.Dir.LTR);\n};\n\n\n/**\n * Check the directionality of a piece of text, return true if the piece of\n * text should be laid out in RTL direction.\n * @param {string} str The piece of text that need to be detected.\n * @param {boolean\x3d} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether this piece of text should be laid out in RTL.\n */\ngoog.i18n.bidi.detectRtlDirectionality \x3d function(str, opt_isHtml) {\n  return goog.i18n.bidi.estimateDirection(str, opt_isHtml) \x3d\x3d\n      goog.i18n.bidi.Dir.RTL;\n};\n\n\n/**\n * Sets text input element\x27s directionality and text alignment based on a\n * given directionality. Does nothing if the given directionality is unknown or\n * neutral.\n * @param {Element} element Input field element to set directionality to.\n * @param {goog.i18n.bidi.Dir|number|boolean|null} dir Desired directionality,\n *     given in one of the following formats:\n *     1. A goog.i18n.bidi.Dir constant.\n *     2. A number (positive \x3d LRT, negative \x3d RTL, 0 \x3d neutral).\n *     3. A boolean (true \x3d RTL, false \x3d LTR).\n *     4. A null for unknown directionality.\n */\ngoog.i18n.bidi.setElementDirAndAlign \x3d function(element, dir) {\n  if (element) {\n    var htmlElement \x3d /** @type {!HTMLElement} */ (element);\n    dir \x3d goog.i18n.bidi.toDir(dir);\n    if (dir) {\n      htmlElement.style.textAlign \x3d dir \x3d\x3d goog.i18n.bidi.Dir.RTL ?\n          goog.i18n.bidi.RIGHT :\n          goog.i18n.bidi.LEFT;\n      htmlElement.dir \x3d dir \x3d\x3d goog.i18n.bidi.Dir.RTL ? \x27rtl\x27 : \x27ltr\x27;\n    }\n  }\n};\n\n\n/**\n * Sets element dir based on estimated directionality of the given text.\n * @param {!Element} element\n * @param {string} text\n */\ngoog.i18n.bidi.setElementDirByTextDirectionality \x3d function(element, text) {\n  var htmlElement \x3d /** @type {!HTMLElement} */ (element);\n  switch (goog.i18n.bidi.estimateDirection(text)) {\n    case (goog.i18n.bidi.Dir.LTR):\n      htmlElement.dir \x3d \x27ltr\x27;\n      break;\n    case (goog.i18n.bidi.Dir.RTL):\n      htmlElement.dir \x3d \x27rtl\x27;\n      break;\n    default:\n      // Default for no direction, inherit from document.\n      htmlElement.removeAttribute(\x27dir\x27);\n  }\n};\n\n\n\n/**\n * Strings that have an (optional) known direction.\n *\n * Implementations of this interface are string-like objects that carry an\n * attached direction, if known.\n * @interface\n */\ngoog.i18n.bidi.DirectionalString \x3d function() {};\n\n\n/**\n * Interface marker of the DirectionalString interface.\n *\n * This property can be used to determine at runtime whether or not an object\n * implements this interface.  All implementations of this interface set this\n * property to `true`.\n * @type {boolean}\n */\ngoog.i18n.bidi.DirectionalString.prototype\n    .implementsGoogI18nBidiDirectionalString;\n\n\n/**\n * Retrieves this object\x27s known direction (if any).\n * @return {?goog.i18n.bidi.Dir} The known direction. Null if unknown.\n */\ngoog.i18n.bidi.DirectionalString.prototype.getDirection;\n\n//# sourceURL\x3dhttps://qs/javascript/closure/i18n/bidi.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/html/trustedresourceurl.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview The TrustedResourceUrl type and its builders.\n *\n * TODO(xtof): Link to document stating type contract.\n */\n\ngoog.provide(\x27goog.html.TrustedResourceUrl\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.i18n.bidi.Dir\x27);\ngoog.require(\x27goog.i18n.bidi.DirectionalString\x27);\ngoog.require(\x27goog.string.Const\x27);\ngoog.require(\x27goog.string.TypedString\x27);\n\n\n\n/**\n * A URL which is under application control and from which script, CSS, and\n * other resources that represent executable code, can be fetched.\n *\n * Given that the URL can only be constructed from strings under application\n * control and is used to load resources, bugs resulting in a malformed URL\n * should not have a security impact and are likely to be easily detectable\n * during testing. Given the wide number of non-RFC compliant URLs in use,\n * stricter validation could prevent some applications from being able to use\n * this type.\n *\n * Instances of this type must be created via the factory method,\n * (`fromConstant`, `fromConstants`, `format` or\n * `formatWithParams`), and not by invoking its constructor. The constructor\n * intentionally takes no parameters and the type is immutable; hence only a\n * default instance corresponding to the empty string can be obtained via\n * constructor invocation.\n *\n * @see goog.html.TrustedResourceUrl#fromConstant\n * @constructor\n * @final\n * @struct\n * @implements {goog.i18n.bidi.DirectionalString}\n * @implements {goog.string.TypedString}\n */\ngoog.html.TrustedResourceUrl \x3d function() {\n  /**\n   * The contained value of this TrustedResourceUrl.  The field has a purposely\n   * ugly name to make (non-compiled) code that attempts to directly access this\n   * field stand out.\n   * @private {string}\n   */\n  this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ \x3d \x27\x27;\n\n  /**\n   * A type marker used to implement additional run-time type checking.\n   * @see goog.html.TrustedResourceUrl#unwrap\n   * @const {!Object}\n   * @private\n   */\n  this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ \x3d\n      goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;\n};\n\n\n/**\n * @override\n * @const\n */\ngoog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString \x3d true;\n\n\n/**\n * Returns this TrustedResourceUrl\x27s value as a string.\n *\n * IMPORTANT: In code where it is security relevant that an object\x27s type is\n * indeed `TrustedResourceUrl`, use\n * `goog.html.TrustedResourceUrl.unwrap` instead of this method. If in\n * doubt, assume that it\x27s security relevant. In particular, note that\n * goog.html functions which return a goog.html type do not guarantee that\n * the returned instance is of the right type. For example:\n *\n * \x3cpre\x3e\n * var fakeSafeHtml \x3d new String(\x27fake\x27);\n * fakeSafeHtml.__proto__ \x3d goog.html.SafeHtml.prototype;\n * var newSafeHtml \x3d goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\n * // newSafeHtml is just an alias for fakeSafeHtml, it\x27s passed through by\n * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml instanceof\n * // goog.html.SafeHtml.\n * \x3c/pre\x3e\n *\n * @see goog.html.TrustedResourceUrl#unwrap\n * @override\n */\ngoog.html.TrustedResourceUrl.prototype.getTypedStringValue \x3d function() {\n  return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;\n};\n\n\n/**\n * @override\n * @const\n */\ngoog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString \x3d\n    true;\n\n\n/**\n * Returns this URLs directionality, which is always `LTR`.\n * @override\n */\ngoog.html.TrustedResourceUrl.prototype.getDirection \x3d function() {\n  return goog.i18n.bidi.Dir.LTR;\n};\n\n\n/**\n * Creates a new TrustedResourceUrl with params added to URL.\n * @param {!Object\x3cstring, *\x3e} params Parameters to add to URL. Parameters with\n *     value `null` or `undefined` are skipped. Both keys and values\n *     are encoded. If the value is an array then the same parameter is added\n *     for every element in the array. Note that JavaScript doesn\x27t guarantee\n *     the order of values in an object which might result in non-deterministic\n *     order of the parameters. However, browsers currently preserve the order.\n * @return {!goog.html.TrustedResourceUrl} New TrustedResourceUrl with params.\n */\ngoog.html.TrustedResourceUrl.prototype.cloneWithParams \x3d function(params) {\n  var url \x3d goog.html.TrustedResourceUrl.unwrap(this);\n  var separator \x3d /\\?/.test(url) ? \x27\x26\x27 : \x27?\x27;\n  for (var key in params) {\n    var values \x3d goog.isArray(params[key]) ?\n        /** @type {!Array\x3c*\x3e} */ (params[key]) :\n        [params[key]];\n    for (var i \x3d 0; i \x3c values.length; i++) {\n      if (values[i] \x3d\x3d null) {\n        continue;\n      }\n      url +\x3d separator + encodeURIComponent(key) + \x27\x3d\x27 +\n          encodeURIComponent(String(values[i]));\n      separator \x3d \x27\x26\x27;\n    }\n  }\n  return goog.html.TrustedResourceUrl\n      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Returns a debug string-representation of this value.\n   *\n   * To obtain the actual string value wrapped in a TrustedResourceUrl, use\n   * `goog.html.TrustedResourceUrl.unwrap`.\n   *\n   * @see goog.html.TrustedResourceUrl#unwrap\n   * @override\n   */\n  goog.html.TrustedResourceUrl.prototype.toString \x3d function() {\n    return \x27TrustedResourceUrl{\x27 +\n        this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ + \x27}\x27;\n  };\n}\n\n\n/**\n * Performs a runtime check that the provided object is indeed a\n * TrustedResourceUrl object, and returns its value.\n *\n * @param {!goog.html.TrustedResourceUrl} trustedResourceUrl The object to\n *     extract from.\n * @return {string} The trustedResourceUrl object\x27s contained string, unless\n *     the run-time type check fails. In that case, `unwrap` returns an\n *     innocuous string, or, if assertions are enabled, throws\n *     `goog.asserts.AssertionError`.\n */\ngoog.html.TrustedResourceUrl.unwrap \x3d function(trustedResourceUrl) {\n  // Perform additional Run-time type-checking to ensure that\n  // trustedResourceUrl is indeed an instance of the expected type.  This\n  // provides some additional protection against security bugs due to\n  // application code that disables type checks.\n  // Specifically, the following checks are performed:\n  // 1. The object is an instance of the expected type.\n  // 2. The object is not an instance of a subclass.\n  // 3. The object carries a type marker for the expected type. \x22Faking\x22 an\n  // object requires a reference to the type marker, which has names intended\n  // to stand out in code reviews.\n  if (trustedResourceUrl instanceof goog.html.TrustedResourceUrl \x26\x26\n      trustedResourceUrl.constructor \x3d\x3d\x3d goog.html.TrustedResourceUrl \x26\x26\n      trustedResourceUrl\n              .TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ \x3d\x3d\x3d\n          goog.html.TrustedResourceUrl\n              .TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {\n    return trustedResourceUrl\n        .privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;\n  } else {\n    goog.asserts.fail(\x27expected object of type TrustedResourceUrl, got \\\x27\x27 +\n        trustedResourceUrl + \x27\\\x27 of type \x27 + goog.typeOf(trustedResourceUrl));\n    return \x27type_error:TrustedResourceUrl\x27;\n  }\n};\n\n\n/**\n * Creates a TrustedResourceUrl from a format string and arguments.\n *\n * The arguments for interpolation into the format string map labels to values.\n * Values of type `goog.string.Const` are interpolated without modifcation.\n * Values of other types are cast to string and encoded with\n * encodeURIComponent.\n *\n * `%{\x3clabel\x3e}` markers are used in the format string to indicate locations\n * to be interpolated with the valued mapped to the given label. `\x3clabel\x3e`\n * must contain only alphanumeric and `_` characters.\n *\n * The format string must start with one of the following:\n * - `https://\x3corigin\x3e/`\n * - `//\x3corigin\x3e/`\n * - `/\x3cpathStart\x3e`\n * - `about:blank#`\n *\n * `\x3corigin\x3e` must contain only alphanumeric or any of the following: `-.:[]`.\n * `\x3cpathStart\x3e` is any character except `/` and `\\`.\n *\n * Example usage:\n *\n *    var url \x3d goog.html.TrustedResourceUrl.format(goog.string.Const.from(\n *        \x27https://www.google.com/search?q\x3d%{query}\x27), {\x27query\x27: searchTerm});\n *\n *    var url \x3d goog.html.TrustedResourceUrl.format(goog.string.Const.from(\n *        \x27//www.youtube.com/v/%{videoId}?hl\x3den\x26fs\x3d1%{autoplay}\x27), {\n *        \x27videoId\x27: videoId,\n *        \x27autoplay\x27: opt_autoplay ?\n *            goog.string.Const.from(\x27\x26autoplay\x3d1\x27) : goog.string.Const.EMPTY\n *    });\n *\n * While this function can be used to create a TrustedResourceUrl from only\n * constants, fromConstant() and fromConstants() are generally preferable for\n * that purpose.\n *\n * @param {!goog.string.Const} format The format string.\n * @param {!Object\x3cstring, (string|number|!goog.string.Const)\x3e} args Mapping\n *     of labels to values to be interpolated into the format string.\n *     goog.string.Const values are interpolated without encoding.\n * @return {!goog.html.TrustedResourceUrl}\n * @throws {!Error} On an invalid format string or if a label used in the\n *     the format string is not present in args.\n */\ngoog.html.TrustedResourceUrl.format \x3d function(format, args) {\n  var formatStr \x3d goog.string.Const.unwrap(format);\n  if (!goog.html.TrustedResourceUrl.BASE_URL_.test(formatStr)) {\n    throw new Error(\x27Invalid TrustedResourceUrl format: \x27 + formatStr);\n  }\n  var result \x3d formatStr.replace(\n      goog.html.TrustedResourceUrl.FORMAT_MARKER_, function(match, id) {\n        if (!Object.prototype.hasOwnProperty.call(args, id)) {\n          throw new Error(\n              \x27Found marker, \x22\x27 + id + \x27\x22, in format string, \x22\x27 + formatStr +\n              \x27\x22, but no valid label mapping found \x27 +\n              \x27in args: \x27 + JSON.stringify(args));\n        }\n        var arg \x3d args[id];\n        if (arg instanceof goog.string.Const) {\n          return goog.string.Const.unwrap(arg);\n        } else {\n          return encodeURIComponent(String(arg));\n        }\n      });\n  return goog.html.TrustedResourceUrl\n      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(result);\n};\n\n\n/**\n * @private @const {!RegExp}\n */\ngoog.html.TrustedResourceUrl.FORMAT_MARKER_ \x3d /%{(\\w+)}/g;\n\n\n/**\n * The URL must be absolute, scheme-relative or path-absolute. So it must\n * start with:\n * - https:// followed by allowed origin characters.\n * - // followed by allowed origin characters.\n * - / not followed by / or \\. There will only be an absolute path.\n *\n * Based on\n * https://url.spec.whatwg.org/commit-snapshots/56b74ce7cca8883eab62e9a12666e2fac665d03d/#url-parsing\n * an initial / which is not followed by another / or \\ will end up in the \x22path\n * state\x22 and from there it can only go to \x22fragment state\x22 and \x22query state\x22.\n *\n * We don\x27t enforce a well-formed domain name. So \x27.\x27 or \x271.2\x27 are valid.\n * That\x27s ok because the origin comes from a compile-time constant.\n *\n * A regular expression is used instead of goog.uri for several reasons:\n * - Strictness. E.g. we don\x27t want any userinfo component and we don\x27t\n *   want \x27/./, nor \\\x27 in the first path component.\n * - Small trusted base. goog.uri is generic and might need to change,\n *   reasoning about all the ways it can parse a URL now and in the future\n *   is error-prone.\n * - Code size. We expect many calls to .format(), many of which might\n *   not be using goog.uri.\n * - Simplicity. Using goog.uri would likely not result in simpler nor shorter\n *   code.\n * @private @const {!RegExp}\n */\ngoog.html.TrustedResourceUrl.BASE_URL_ \x3d\n    /^(?:https:)?\\/\\/[0-9a-z.:[\\]-]+\\/|^\\/[^\\/\\\\]|^about:blank#/i;\n\n\n/**\n * Formats the URL same as TrustedResourceUrl.format and then adds extra URL\n * parameters.\n *\n * Example usage:\n *\n *     // Creates \x27//www.youtube.com/v/abc?autoplay\x3d1\x27 for videoId\x3d\x27abc\x27 and\n *     // opt_autoplay\x3d1. Creates \x27//www.youtube.com/v/abc\x27 for videoId\x3d\x27abc\x27\n *     // and opt_autoplay\x3dundefined.\n *     var url \x3d goog.html.TrustedResourceUrl.formatWithParams(\n *         goog.string.Const.from(\x27//www.youtube.com/v/%{videoId}\x27),\n *         {\x27videoId\x27: videoId},\n *         {\x27autoplay\x27: opt_autoplay});\n *\n * @param {!goog.string.Const} format The format string.\n * @param {!Object\x3cstring, (string|number|!goog.string.Const)\x3e} args Mapping\n *     of labels to values to be interpolated into the format string.\n *     goog.string.Const values are interpolated without encoding.\n * @param {!Object\x3cstring, *\x3e} params Parameters to add to URL. Parameters with\n *     value `null` or `undefined` are skipped. Both keys and values\n *     are encoded. If the value is an array then the same parameter is added\n *     for every element in the array. Note that JavaScript doesn\x27t guarantee\n *     the order of values in an object which might result in non-deterministic\n *     order of the parameters. However, browsers currently preserve the order.\n * @return {!goog.html.TrustedResourceUrl}\n * @throws {!Error} On an invalid format string or if a label used in the\n *     the format string is not present in args.\n */\ngoog.html.TrustedResourceUrl.formatWithParams \x3d function(format, args, params) {\n  var url \x3d goog.html.TrustedResourceUrl.format(format, args);\n  return url.cloneWithParams(params);\n};\n\n\n/**\n * Creates a TrustedResourceUrl object from a compile-time constant string.\n *\n * Compile-time constant strings are inherently program-controlled and hence\n * trusted.\n *\n * @param {!goog.string.Const} url A compile-time-constant string from which to\n *     create a TrustedResourceUrl.\n * @return {!goog.html.TrustedResourceUrl} A TrustedResourceUrl object\n *     initialized to `url`.\n */\ngoog.html.TrustedResourceUrl.fromConstant \x3d function(url) {\n  return goog.html.TrustedResourceUrl\n      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(\n          goog.string.Const.unwrap(url));\n};\n\n\n/**\n * Creates a TrustedResourceUrl object from a compile-time constant strings.\n *\n * Compile-time constant strings are inherently program-controlled and hence\n * trusted.\n *\n * @param {!Array\x3c!goog.string.Const\x3e} parts Compile-time-constant strings from\n *     which to create a TrustedResourceUrl.\n * @return {!goog.html.TrustedResourceUrl} A TrustedResourceUrl object\n *     initialized to concatenation of `parts`.\n */\ngoog.html.TrustedResourceUrl.fromConstants \x3d function(parts) {\n  var unwrapped \x3d \x27\x27;\n  for (var i \x3d 0; i \x3c parts.length; i++) {\n    unwrapped +\x3d goog.string.Const.unwrap(parts[i]);\n  }\n  return goog.html.TrustedResourceUrl\n      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(unwrapped);\n};\n\n\n/**\n * Type marker for the TrustedResourceUrl type, used to implement additional\n * run-time type checking.\n * @const {!Object}\n * @private\n */\ngoog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ \x3d {};\n\n\n/**\n * Package-internal utility method to create TrustedResourceUrl instances.\n *\n * @param {string} url The string to initialize the TrustedResourceUrl object\n *     with.\n * @return {!goog.html.TrustedResourceUrl} The initialized TrustedResourceUrl\n *     object.\n * @package\n */\ngoog.html.TrustedResourceUrl\n    .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse \x3d function(url) {\n  var trustedResourceUrl \x3d new goog.html.TrustedResourceUrl();\n  trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ \x3d\n      url;\n  return trustedResourceUrl;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/html/trustedresourceurl.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/html/safeurl.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview The SafeUrl type and its builders.\n *\n * TODO(xtof): Link to document stating type contract.\n */\n\ngoog.provide(\x27goog.html.SafeUrl\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.fs.url\x27);\ngoog.require(\x27goog.html.TrustedResourceUrl\x27);\ngoog.require(\x27goog.i18n.bidi.Dir\x27);\ngoog.require(\x27goog.i18n.bidi.DirectionalString\x27);\ngoog.require(\x27goog.string\x27);\ngoog.require(\x27goog.string.Const\x27);\ngoog.require(\x27goog.string.TypedString\x27);\n\n\n\n/**\n * A string that is safe to use in URL context in DOM APIs and HTML documents.\n *\n * A SafeUrl is a string-like object that carries the security type contract\n * that its value as a string will not cause untrusted script execution\n * when evaluated as a hyperlink URL in a browser.\n *\n * Values of this type are guaranteed to be safe to use in URL/hyperlink\n * contexts, such as assignment to URL-valued DOM properties, in the sense that\n * the use will not result in a Cross-Site-Scripting vulnerability. Similarly,\n * SafeUrls can be interpolated into the URL context of an HTML template (e.g.,\n * inside a href attribute). However, appropriate HTML-escaping must still be\n * applied.\n *\n * Note that, as documented in `goog.html.SafeUrl.unwrap`, this type\x27s\n * contract does not guarantee that instances are safe to interpolate into HTML\n * without appropriate escaping.\n *\n * Note also that this type\x27s contract does not imply any guarantees regarding\n * the resource the URL refers to.  In particular, SafeUrls are \x3cb\x3enot\x3c/b\x3e\n * safe to use in a context where the referred-to resource is interpreted as\n * trusted code, e.g., as the src of a script tag.\n *\n * Instances of this type must be created via the factory methods\n * (`goog.html.SafeUrl.fromConstant`, `goog.html.SafeUrl.sanitize`),\n * etc and not by invoking its constructor.  The constructor intentionally\n * takes no parameters and the type is immutable; hence only a default instance\n * corresponding to the empty string can be obtained via constructor invocation.\n *\n * @see goog.html.SafeUrl#fromConstant\n * @see goog.html.SafeUrl#from\n * @see goog.html.SafeUrl#sanitize\n * @constructor\n * @final\n * @struct\n * @implements {goog.i18n.bidi.DirectionalString}\n * @implements {goog.string.TypedString}\n */\ngoog.html.SafeUrl \x3d function() {\n  /**\n   * The contained value of this SafeUrl.  The field has a purposely ugly\n   * name to make (non-compiled) code that attempts to directly access this\n   * field stand out.\n   * @private {string}\n   */\n  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ \x3d \x27\x27;\n\n  /**\n   * A type marker used to implement additional run-time type checking.\n   * @see goog.html.SafeUrl#unwrap\n   * @const {!Object}\n   * @private\n   */\n  this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ \x3d\n      goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;\n};\n\n\n/**\n * The innocuous string generated by goog.html.SafeUrl.sanitize when passed\n * an unsafe URL.\n *\n * about:invalid is registered in\n * http://www.w3.org/TR/css3-values/#about-invalid.\n * http://tools.ietf.org/html/rfc6694#section-2.2.1 permits about URLs to\n * contain a fragment, which is not to be considered when determining if an\n * about URL is well-known.\n *\n * Using about:invalid seems preferable to using a fixed data URL, since\n * browsers might choose to not report CSP violations on it, as legitimate\n * CSS function calls to attr() can result in this URL being produced. It is\n * also a standard URL which matches exactly the semantics we need:\n * \x22The about:invalid URI references a non-existent document with a generic\n * error condition. It can be used when a URI is necessary, but the default\n * value shouldn\x27t be resolveable as any type of document\x22.\n *\n * @const {string}\n */\ngoog.html.SafeUrl.INNOCUOUS_STRING \x3d \x27about:invalid#zClosurez\x27;\n\n\n/**\n * @override\n * @const\n */\ngoog.html.SafeUrl.prototype.implementsGoogStringTypedString \x3d true;\n\n\n/**\n * Returns this SafeUrl\x27s value a string.\n *\n * IMPORTANT: In code where it is security relevant that an object\x27s type is\n * indeed `SafeUrl`, use `goog.html.SafeUrl.unwrap` instead of this\n * method. If in doubt, assume that it\x27s security relevant. In particular, note\n * that goog.html functions which return a goog.html type do not guarantee that\n * the returned instance is of the right type. For example:\n *\n * \x3cpre\x3e\n * var fakeSafeHtml \x3d new String(\x27fake\x27);\n * fakeSafeHtml.__proto__ \x3d goog.html.SafeHtml.prototype;\n * var newSafeHtml \x3d goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\n * // newSafeHtml is just an alias for fakeSafeHtml, it\x27s passed through by\n * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml instanceof\n * // goog.html.SafeHtml.\n * \x3c/pre\x3e\n *\n * IMPORTANT: The guarantees of the SafeUrl type contract only extend to the\n * behavior of browsers when interpreting URLs. Values of SafeUrl objects MUST\n * be appropriately escaped before embedding in a HTML document. Note that the\n * required escaping is context-sensitive (e.g. a different escaping is\n * required for embedding a URL in a style property within a style\n * attribute, as opposed to embedding in a href attribute).\n *\n * @see goog.html.SafeUrl#unwrap\n * @override\n */\ngoog.html.SafeUrl.prototype.getTypedStringValue \x3d function() {\n  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;\n};\n\n\n/**\n * @override\n * @const\n */\ngoog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString \x3d true;\n\n\n/**\n * Returns this URLs directionality, which is always `LTR`.\n * @override\n */\ngoog.html.SafeUrl.prototype.getDirection \x3d function() {\n  return goog.i18n.bidi.Dir.LTR;\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Returns a debug string-representation of this value.\n   *\n   * To obtain the actual string value wrapped in a SafeUrl, use\n   * `goog.html.SafeUrl.unwrap`.\n   *\n   * @see goog.html.SafeUrl#unwrap\n   * @override\n   */\n  goog.html.SafeUrl.prototype.toString \x3d function() {\n    return \x27SafeUrl{\x27 + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ +\n        \x27}\x27;\n  };\n}\n\n\n/**\n * Performs a runtime check that the provided object is indeed a SafeUrl\n * object, and returns its value.\n *\n * IMPORTANT: The guarantees of the SafeUrl type contract only extend to the\n * behavior of  browsers when interpreting URLs. Values of SafeUrl objects MUST\n * be appropriately escaped before embedding in a HTML document. Note that the\n * required escaping is context-sensitive (e.g. a different escaping is\n * required for embedding a URL in a style property within a style\n * attribute, as opposed to embedding in a href attribute).\n *\n * @param {!goog.html.SafeUrl} safeUrl The object to extract from.\n * @return {string} The SafeUrl object\x27s contained string, unless the run-time\n *     type check fails. In that case, `unwrap` returns an innocuous\n *     string, or, if assertions are enabled, throws\n *     `goog.asserts.AssertionError`.\n */\ngoog.html.SafeUrl.unwrap \x3d function(safeUrl) {\n  // Perform additional Run-time type-checking to ensure that safeUrl is indeed\n  // an instance of the expected type.  This provides some additional protection\n  // against security bugs due to application code that disables type checks.\n  // Specifically, the following checks are performed:\n  // 1. The object is an instance of the expected type.\n  // 2. The object is not an instance of a subclass.\n  // 3. The object carries a type marker for the expected type. \x22Faking\x22 an\n  // object requires a reference to the type marker, which has names intended\n  // to stand out in code reviews.\n  if (safeUrl instanceof goog.html.SafeUrl \x26\x26\n      safeUrl.constructor \x3d\x3d\x3d goog.html.SafeUrl \x26\x26\n      safeUrl.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ \x3d\x3d\x3d\n          goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {\n    return safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_;\n  } else {\n    goog.asserts.fail(\x27expected object of type SafeUrl, got \\\x27\x27 +\n        safeUrl + \x27\\\x27 of type \x27 + goog.typeOf(safeUrl));\n    return \x27type_error:SafeUrl\x27;\n  }\n};\n\n\n/**\n * Creates a SafeUrl object from a compile-time constant string.\n *\n * Compile-time constant strings are inherently program-controlled and hence\n * trusted.\n *\n * @param {!goog.string.Const} url A compile-time-constant string from which to\n *         create a SafeUrl.\n * @return {!goog.html.SafeUrl} A SafeUrl object initialized to `url`.\n */\ngoog.html.SafeUrl.fromConstant \x3d function(url) {\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n      goog.string.Const.unwrap(url));\n};\n\n\n/**\n * A pattern that matches Blob or data types that can have SafeUrls created\n * from URL.createObjectURL(blob) or via a data: URI.\n * @const\n * @private\n */\ngoog.html.SAFE_MIME_TYPE_PATTERN_ \x3d new RegExp(\n    // Note: Due to content-sniffing concerns, only add MIME types for\n    // media formats.\n    \x27^(?:audio/(?:3gpp|3gpp2|aac|midi|mp4|mpeg|ogg|x-m4a|x-wav|webm)|\x27 +\n        \x27image/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|\x27 +\n        // TODO(b/68188949): Due to content-sniffing concerns, text/csv should\n        // be removed from the whitelist.\n        \x27text/csv|\x27 +\n        \x27video/(?:mpeg|mp4|ogg|webm|quicktime))$\x27,\n    \x27i\x27);\n\n\n/**\n * Creates a SafeUrl wrapping a blob URL for the given `blob`.\n *\n * The blob URL is created with `URL.createObjectURL`. If the MIME type\n * for `blob` is not of a known safe audio, image or video MIME type,\n * then the SafeUrl will wrap {@link #INNOCUOUS_STRING}.\n *\n * @see http://www.w3.org/TR/FileAPI/#url\n * @param {!Blob} blob\n * @return {!goog.html.SafeUrl} The blob URL, or an innocuous string wrapped\n *   as a SafeUrl.\n */\ngoog.html.SafeUrl.fromBlob \x3d function(blob) {\n  var url \x3d goog.html.SAFE_MIME_TYPE_PATTERN_.test(blob.type) ?\n      goog.fs.url.createObjectUrl(blob) :\n      goog.html.SafeUrl.INNOCUOUS_STRING;\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n\n\n/**\n * Matches a base-64 data URL, with the first match group being the MIME type.\n * @const\n * @private\n */\ngoog.html.DATA_URL_PATTERN_ \x3d /^data:([^;,]*);base64,[a-z0-9+\\/]+\x3d*$/i;\n\n\n/**\n * Creates a SafeUrl wrapping a data: URL, after validating it matches a\n * known-safe audio, image or video MIME type.\n *\n * @param {string} dataUrl A valid base64 data URL with one of the whitelisted\n *     audio, image or video MIME types.\n * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}\n *     wrapped as a SafeUrl if it does not pass.\n */\ngoog.html.SafeUrl.fromDataUrl \x3d function(dataUrl) {\n  // There\x27s a slight risk here that a browser sniffs the content type if it\n  // doesn\x27t know the MIME type and executes HTML within the data: URL. For this\n  // to cause XSS it would also have to execute the HTML in the same origin\n  // of the page with the link. It seems unlikely that both of these will\n  // happen, particularly in not really old IEs.\n  var match \x3d dataUrl.match(goog.html.DATA_URL_PATTERN_);\n  var valid \x3d match \x26\x26 goog.html.SAFE_MIME_TYPE_PATTERN_.test(match[1]);\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n      valid ? dataUrl : goog.html.SafeUrl.INNOCUOUS_STRING);\n};\n\n\n/**\n * Creates a SafeUrl wrapping a tel: URL.\n *\n * @param {string} telUrl A tel URL.\n * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}\n *     wrapped as a SafeUrl if it does not pass.\n */\ngoog.html.SafeUrl.fromTelUrl \x3d function(telUrl) {\n  // There\x27s a risk that a tel: URL could immediately place a call once\n  // clicked, without requiring user confirmation. For that reason it is\n  // handled in this separate function.\n  if (!goog.string.caseInsensitiveStartsWith(telUrl, \x27tel:\x27)) {\n    telUrl \x3d goog.html.SafeUrl.INNOCUOUS_STRING;\n  }\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n      telUrl);\n};\n\n\n/**\n * Creates a SafeUrl from TrustedResourceUrl. This is safe because\n * TrustedResourceUrl is more tightly restricted than SafeUrl.\n *\n * @param {!goog.html.TrustedResourceUrl} trustedResourceUrl\n * @return {!goog.html.SafeUrl}\n */\ngoog.html.SafeUrl.fromTrustedResourceUrl \x3d function(trustedResourceUrl) {\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n      goog.html.TrustedResourceUrl.unwrap(trustedResourceUrl));\n};\n\n\n/**\n * A pattern that recognizes a commonly useful subset of URLs that satisfy\n * the SafeUrl contract.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy\x27s EscapingConventions):\n * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * @private\n * @const {!RegExp}\n */\ngoog.html.SAFE_URL_PATTERN_ \x3d\n    /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;\n\n\n/**\n * Creates a SafeUrl object from `url`. If `url` is a\n * goog.html.SafeUrl then it is simply returned. Otherwise the input string is\n * validated to match a pattern of commonly used safe URLs.\n *\n * `url` may be a URL with the http, https, mailto or ftp scheme,\n * or a relative URL (i.e., a URL without a scheme; specifically, a\n * scheme-relative, absolute-path-relative, or path-relative URL).\n *\n * @see http://url.spec.whatwg.org/#concept-relative-url\n * @param {string|!goog.string.TypedString} url The URL to validate.\n * @return {!goog.html.SafeUrl} The validated URL, wrapped as a SafeUrl.\n */\ngoog.html.SafeUrl.sanitize \x3d function(url) {\n  if (url instanceof goog.html.SafeUrl) {\n    return url;\n  } else if (url.implementsGoogStringTypedString) {\n    url \x3d /** @type {!goog.string.TypedString} */ (url).getTypedStringValue();\n  } else {\n    url \x3d String(url);\n  }\n  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {\n    url \x3d goog.html.SafeUrl.INNOCUOUS_STRING;\n  }\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n\n/**\n * Creates a SafeUrl object from `url`. If `url` is a\n * goog.html.SafeUrl then it is simply returned. Otherwise the input string is\n * validated to match a pattern of commonly used safe URLs.\n *\n * `url` may be a URL with the http, https, mailto or ftp scheme,\n * or a relative URL (i.e., a URL without a scheme; specifically, a\n * scheme-relative, absolute-path-relative, or path-relative URL).\n *\n * This function asserts (using goog.asserts) that the URL matches this pattern.\n * If it does not, in addition to failing the assert, an innocous URL will be\n * returned.\n *\n * @see http://url.spec.whatwg.org/#concept-relative-url\n * @param {string|!goog.string.TypedString} url The URL to validate.\n * @return {!goog.html.SafeUrl} The validated URL, wrapped as a SafeUrl.\n */\ngoog.html.SafeUrl.sanitizeAssertUnchanged \x3d function(url) {\n  if (url instanceof goog.html.SafeUrl) {\n    return url;\n  } else if (url.implementsGoogStringTypedString) {\n    url \x3d /** @type {!goog.string.TypedString} */ (url).getTypedStringValue();\n  } else {\n    url \x3d String(url);\n  }\n  if (!goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(url))) {\n    url \x3d goog.html.SafeUrl.INNOCUOUS_STRING;\n  }\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n\n\n\n/**\n * Type marker for the SafeUrl type, used to implement additional run-time\n * type checking.\n * @const {!Object}\n * @private\n */\ngoog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ \x3d {};\n\n\n/**\n * Package-internal utility method to create SafeUrl instances.\n *\n * @param {string} url The string to initialize the SafeUrl object with.\n * @return {!goog.html.SafeUrl} The initialized SafeUrl object.\n * @package\n */\ngoog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse \x3d function(\n    url) {\n  var safeUrl \x3d new goog.html.SafeUrl();\n  safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_ \x3d url;\n  return safeUrl;\n};\n\n\n/**\n * A SafeUrl corresponding to the special about:blank url.\n * @const {!goog.html.SafeUrl}\n */\ngoog.html.SafeUrl.ABOUT_BLANK \x3d\n    goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n        \x27about:blank\x27);\n\n//# sourceURL\x3dhttps://qs/javascript/closure/html/safeurl.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/html/safestyle.js";
eval("// Copyright 2014 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview The SafeStyle type and its builders.\n *\n * TODO(xtof): Link to document stating type contract.\n */\n\ngoog.provide(\x27goog.html.SafeStyle\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.html.SafeUrl\x27);\ngoog.require(\x27goog.string\x27);\ngoog.require(\x27goog.string.Const\x27);\ngoog.require(\x27goog.string.TypedString\x27);\n\n\n\n/**\n * A string-like object which represents a sequence of CSS declarations\n * ({@code propertyName1: propertyvalue1; propertyName2: propertyValue2; ...})\n * and that carries the security type contract that its value, as a string,\n * will not cause untrusted script execution (XSS) when evaluated as CSS in a\n * browser.\n *\n * Instances of this type must be created via the factory methods\n * (`goog.html.SafeStyle.create` or\n * `goog.html.SafeStyle.fromConstant`) and not by invoking its\n * constructor. The constructor intentionally takes no parameters and the type\n * is immutable; hence only a default instance corresponding to the empty string\n * can be obtained via constructor invocation.\n *\n * SafeStyle\x27s string representation can safely be:\n * \x3cul\x3e\n *   \x3cli\x3eInterpolated as the content of a *quoted* HTML style attribute.\n *       However, the SafeStyle string *must be HTML-attribute-escaped* before\n *       interpolation.\n *   \x3cli\x3eInterpolated as the content of a {}-wrapped block within a stylesheet.\n *       \x27\x3c\x27 characters in the SafeStyle string *must be CSS-escaped* before\n *       interpolation. The SafeStyle string is also guaranteed not to be able\n *       to introduce new properties or elide existing ones.\n *   \x3cli\x3eInterpolated as the content of a {}-wrapped block within an HTML\n *       \x26lt;style\x26gt; element. \x27\x3c\x27 characters in the SafeStyle string\n *       *must be CSS-escaped* before interpolation.\n *   \x3cli\x3eAssigned to the style property of a DOM node. The SafeStyle string\n *       should not be escaped before being assigned to the property.\n * \x3c/ul\x3e\n *\n * A SafeStyle may never contain literal angle brackets. Otherwise, it could\n * be unsafe to place a SafeStyle into a \x26lt;style\x26gt; tag (where it can\x27t\n * be HTML escaped). For example, if the SafeStyle containing\n * \x22{@code font: \x27foo \x26lt;style/\x26gt;\x26lt;script\x26gt;evil\x26lt;/script\x26gt;\x27}\x22 were\n * interpolated within a \x26lt;style\x26gt; tag, this would then break out of the\n * style context into HTML.\n *\n * A SafeStyle may contain literal single or double quotes, and as such the\n * entire style string must be escaped when used in a style attribute (if\n * this were not the case, the string could contain a matching quote that\n * would escape from the style attribute).\n *\n * Values of this type must be composable, i.e. for any two values\n * `style1` and `style2` of this type,\n * {@code goog.html.SafeStyle.unwrap(style1) +\n * goog.html.SafeStyle.unwrap(style2)} must itself be a value that satisfies\n * the SafeStyle type constraint. This requirement implies that for any value\n * `style` of this type, `goog.html.SafeStyle.unwrap(style)` must\n * not end in a \x22property value\x22 or \x22property name\x22 context. For example,\n * a value of {@code background:url(\x22} or {@code font-} would not satisfy the\n * SafeStyle contract. This is because concatenating such strings with a\n * second value that itself does not contain unsafe CSS can result in an\n * overall string that does. For example, if {@code javascript:evil())\x22} is\n * appended to {@code background:url(\x22}, the resulting string may result in\n * the execution of a malicious script.\n *\n * TODO(mlourenco): Consider whether we should implement UTF-8 interchange\n * validity checks and blacklisting of newlines (including Unicode ones) and\n * other whitespace characters (\\t, \\f). Document here if so and also update\n * SafeStyle.fromConstant().\n *\n * The following example values comply with this type\x27s contract:\n * \x3cul\x3e\n *   \x3cli\x3e\x3cpre\x3ewidth: 1em;\x3c/pre\x3e\n *   \x3cli\x3e\x3cpre\x3eheight:1em;\x3c/pre\x3e\n *   \x3cli\x3e\x3cpre\x3ewidth: 1em;height: 1em;\x3c/pre\x3e\n *   \x3cli\x3e\x3cpre\x3ebackground:url(\x27http://url\x27);\x3c/pre\x3e\n * \x3c/ul\x3e\n * In addition, the empty string is safe for use in a CSS attribute.\n *\n * The following example values do NOT comply with this type\x27s contract:\n * \x3cul\x3e\n *   \x3cli\x3e\x3cpre\x3ebackground: red\x3c/pre\x3e (missing a trailing semi-colon)\n *   \x3cli\x3e\x3cpre\x3ebackground:\x3c/pre\x3e (missing a value and a trailing semi-colon)\n *   \x3cli\x3e\x3cpre\x3e1em\x3c/pre\x3e (missing an attribute name, which provides context for\n *       the value)\n * \x3c/ul\x3e\n *\n * @see goog.html.SafeStyle#create\n * @see goog.html.SafeStyle#fromConstant\n * @see http://www.w3.org/TR/css3-syntax/\n * @constructor\n * @final\n * @struct\n * @implements {goog.string.TypedString}\n */\ngoog.html.SafeStyle \x3d function() {\n  /**\n   * The contained value of this SafeStyle.  The field has a purposely\n   * ugly name to make (non-compiled) code that attempts to directly access this\n   * field stand out.\n   * @private {string}\n   */\n  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ \x3d \x27\x27;\n\n  /**\n   * A type marker used to implement additional run-time type checking.\n   * @see goog.html.SafeStyle#unwrap\n   * @const {!Object}\n   * @private\n   */\n  this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ \x3d\n      goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;\n};\n\n\n/**\n * @override\n * @const\n */\ngoog.html.SafeStyle.prototype.implementsGoogStringTypedString \x3d true;\n\n\n/**\n * Type marker for the SafeStyle type, used to implement additional\n * run-time type checking.\n * @const {!Object}\n * @private\n */\ngoog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ \x3d {};\n\n\n/**\n * Creates a SafeStyle object from a compile-time constant string.\n *\n * `style` should be in the format\n * {@code name: value; [name: value; ...]} and must not have any \x3c or \x3e\n * characters in it. This is so that SafeStyle\x27s contract is preserved,\n * allowing the SafeStyle to correctly be interpreted as a sequence of CSS\n * declarations and without affecting the syntactic structure of any\n * surrounding CSS and HTML.\n *\n * This method performs basic sanity checks on the format of `style`\n * but does not constrain the format of `name` and `value`, except\n * for disallowing tag characters.\n *\n * @param {!goog.string.Const} style A compile-time-constant string from which\n *     to create a SafeStyle.\n * @return {!goog.html.SafeStyle} A SafeStyle object initialized to\n *     `style`.\n */\ngoog.html.SafeStyle.fromConstant \x3d function(style) {\n  var styleString \x3d goog.string.Const.unwrap(style);\n  if (styleString.length \x3d\x3d\x3d 0) {\n    return goog.html.SafeStyle.EMPTY;\n  }\n  goog.html.SafeStyle.checkStyle_(styleString);\n  goog.asserts.assert(\n      goog.string.endsWith(styleString, \x27;\x27),\n      \x27Last character of style string is not \\\x27;\\\x27: \x27 + styleString);\n  goog.asserts.assert(\n      goog.string.contains(styleString, \x27:\x27),\n      \x27Style string must contain at least one \\\x27:\\\x27, to \x27 +\n          \x27specify a \x22name: value\x22 pair: \x27 + styleString);\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\n      styleString);\n};\n\n\n/**\n * Checks if the style definition is valid.\n * @param {string} style\n * @private\n */\ngoog.html.SafeStyle.checkStyle_ \x3d function(style) {\n  goog.asserts.assert(\n      !/[\x3c\x3e]/.test(style), \x27Forbidden characters in style string: \x27 + style);\n};\n\n\n/**\n * Returns this SafeStyle\x27s value as a string.\n *\n * IMPORTANT: In code where it is security relevant that an object\x27s type is\n * indeed `SafeStyle`, use `goog.html.SafeStyle.unwrap` instead of\n * this method. If in doubt, assume that it\x27s security relevant. In particular,\n * note that goog.html functions which return a goog.html type do not guarantee\n * the returned instance is of the right type. For example:\n *\n * \x3cpre\x3e\n * var fakeSafeHtml \x3d new String(\x27fake\x27);\n * fakeSafeHtml.__proto__ \x3d goog.html.SafeHtml.prototype;\n * var newSafeHtml \x3d goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\n * // newSafeHtml is just an alias for fakeSafeHtml, it\x27s passed through by\n * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml\n * // instanceof goog.html.SafeHtml.\n * \x3c/pre\x3e\n *\n * @see goog.html.SafeStyle#unwrap\n * @override\n */\ngoog.html.SafeStyle.prototype.getTypedStringValue \x3d function() {\n  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Returns a debug string-representation of this value.\n   *\n   * To obtain the actual string value wrapped in a SafeStyle, use\n   * `goog.html.SafeStyle.unwrap`.\n   *\n   * @see goog.html.SafeStyle#unwrap\n   * @override\n   */\n  goog.html.SafeStyle.prototype.toString \x3d function() {\n    return \x27SafeStyle{\x27 + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ +\n        \x27}\x27;\n  };\n}\n\n\n/**\n * Performs a runtime check that the provided object is indeed a\n * SafeStyle object, and returns its value.\n *\n * @param {!goog.html.SafeStyle} safeStyle The object to extract from.\n * @return {string} The safeStyle object\x27s contained string, unless\n *     the run-time type check fails. In that case, `unwrap` returns an\n *     innocuous string, or, if assertions are enabled, throws\n *     `goog.asserts.AssertionError`.\n */\ngoog.html.SafeStyle.unwrap \x3d function(safeStyle) {\n  // Perform additional Run-time type-checking to ensure that\n  // safeStyle is indeed an instance of the expected type.  This\n  // provides some additional protection against security bugs due to\n  // application code that disables type checks.\n  // Specifically, the following checks are performed:\n  // 1. The object is an instance of the expected type.\n  // 2. The object is not an instance of a subclass.\n  // 3. The object carries a type marker for the expected type. \x22Faking\x22 an\n  // object requires a reference to the type marker, which has names intended\n  // to stand out in code reviews.\n  if (safeStyle instanceof goog.html.SafeStyle \x26\x26\n      safeStyle.constructor \x3d\x3d\x3d goog.html.SafeStyle \x26\x26\n      safeStyle.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ \x3d\x3d\x3d\n          goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {\n    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;\n  } else {\n    goog.asserts.fail(\x27expected object of type SafeStyle, got \\\x27\x27 +\n        safeStyle + \x27\\\x27 of type \x27 + goog.typeOf(safeStyle));\n    return \x27type_error:SafeStyle\x27;\n  }\n};\n\n\n/**\n * Package-internal utility method to create SafeStyle instances.\n *\n * @param {string} style The string to initialize the SafeStyle object with.\n * @return {!goog.html.SafeStyle} The initialized SafeStyle object.\n * @package\n */\ngoog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse \x3d function(\n    style) {\n  return new goog.html.SafeStyle().initSecurityPrivateDoNotAccessOrElse_(style);\n};\n\n\n/**\n * Called from createSafeStyleSecurityPrivateDoNotAccessOrElse(). This\n * method exists only so that the compiler can dead code eliminate static\n * fields (like EMPTY) when they\x27re not accessed.\n * @param {string} style\n * @return {!goog.html.SafeStyle}\n * @private\n */\ngoog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_ \x3d function(\n    style) {\n  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ \x3d style;\n  return this;\n};\n\n\n/**\n * A SafeStyle instance corresponding to the empty string.\n * @const {!goog.html.SafeStyle}\n */\ngoog.html.SafeStyle.EMPTY \x3d\n    goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\x27\x27);\n\n\n/**\n * The innocuous string generated by goog.html.SafeStyle.create when passed\n * an unsafe value.\n * @const {string}\n */\ngoog.html.SafeStyle.INNOCUOUS_STRING \x3d \x27zClosurez\x27;\n\n\n/**\n * A single property value.\n * @typedef {string|!goog.string.Const|!goog.html.SafeUrl}\n */\ngoog.html.SafeStyle.PropertyValue;\n\n\n/**\n * Mapping of property names to their values.\n * We don\x27t support numbers even though some values might be numbers (e.g.\n * line-height or 0 for any length). The reason is that most numeric values need\n * units (e.g. \x271px\x27) and allowing numbers could cause users forgetting about\n * them.\n * @typedef {!Object\x3cstring, ?goog.html.SafeStyle.PropertyValue|\n *     ?Array\x3c!goog.html.SafeStyle.PropertyValue\x3e\x3e}\n */\ngoog.html.SafeStyle.PropertyMap;\n\n\n/**\n * Creates a new SafeStyle object from the properties specified in the map.\n * @param {goog.html.SafeStyle.PropertyMap} map Mapping of property names to\n *     their values, for example {\x27margin\x27: \x271px\x27}. Names must consist of\n *     [-_a-zA-Z0-9]. Values might be strings consisting of\n *     [-,.\x27\x22%_!# a-zA-Z0-9], where \x22 and \x27 must be properly balanced. We also\n *     allow simple functions like rgb() and url() which sanitizes its contents.\n *     Other values must be wrapped in goog.string.Const. URLs might be passed\n *     as goog.html.SafeUrl which will be wrapped into url(\x22\x22). We also support\n *     array whose elements are joined with \x27 \x27. Null value causes skipping the\n *     property.\n * @return {!goog.html.SafeStyle}\n * @throws {Error} If invalid name is provided.\n * @throws {goog.asserts.AssertionError} If invalid value is provided. With\n *     disabled assertions, invalid value is replaced by\n *     goog.html.SafeStyle.INNOCUOUS_STRING.\n */\ngoog.html.SafeStyle.create \x3d function(map) {\n  var style \x3d \x27\x27;\n  for (var name in map) {\n    if (!/^[-_a-zA-Z0-9]+$/.test(name)) {\n      throw new Error(\x27Name allows only [-_a-zA-Z0-9], got: \x27 + name);\n    }\n    var value \x3d map[name];\n    if (value \x3d\x3d null) {\n      continue;\n    }\n    if (goog.isArray(value)) {\n      value \x3d goog.array.map(value, goog.html.SafeStyle.sanitizePropertyValue_)\n                  .join(\x27 \x27);\n    } else {\n      value \x3d goog.html.SafeStyle.sanitizePropertyValue_(value);\n    }\n    style +\x3d name + \x27:\x27 + value + \x27;\x27;\n  }\n  if (!style) {\n    return goog.html.SafeStyle.EMPTY;\n  }\n  goog.html.SafeStyle.checkStyle_(style);\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\n      style);\n};\n\n\n/**\n * Checks and converts value to string.\n * @param {!goog.html.SafeStyle.PropertyValue} value\n * @return {string}\n * @private\n */\ngoog.html.SafeStyle.sanitizePropertyValue_ \x3d function(value) {\n  if (value instanceof goog.html.SafeUrl) {\n    var url \x3d goog.html.SafeUrl.unwrap(value);\n    return \x27url(\x22\x27 + url.replace(/\x3c/g, \x27%3c\x27).replace(/[\\\\\x22]/g, \x27\\\\$\x26\x27) + \x27\x22)\x27;\n  }\n  var result \x3d value instanceof goog.string.Const ?\n      goog.string.Const.unwrap(value) :\n      goog.html.SafeStyle.sanitizePropertyValueString_(String(value));\n  // These characters can be used to change context and we don\x27t want that even\n  // with const values.\n  goog.asserts.assert(!/[{;}]/.test(result), \x27Value does not allow [{;}].\x27);\n  return result;\n};\n\n\n/**\n * Checks string value.\n * @param {string} value\n * @return {string}\n * @private\n */\ngoog.html.SafeStyle.sanitizePropertyValueString_ \x3d function(value) {\n  var valueWithoutFunctions \x3d\n      value.replace(goog.html.SafeStyle.FUNCTIONS_RE_, \x27$1\x27)\n          .replace(goog.html.SafeStyle.URL_RE_, \x27url\x27);\n  if (!goog.html.SafeStyle.VALUE_RE_.test(valueWithoutFunctions)) {\n    goog.asserts.fail(\n        \x27String value allows only \x27 + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ +\n        \x27 and simple functions, got: \x27 + value);\n    return goog.html.SafeStyle.INNOCUOUS_STRING;\n  } else if (!goog.html.SafeStyle.hasBalancedQuotes_(value)) {\n    goog.asserts.fail(\x27String value requires balanced quotes, got: \x27 + value);\n    return goog.html.SafeStyle.INNOCUOUS_STRING;\n  }\n  return goog.html.SafeStyle.sanitizeUrl_(value);\n};\n\n\n/**\n * Checks that quotes (\x22 and \x27) are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n * @param {string} value Untrusted CSS property value.\n * @return {boolean} True if property value is safe with respect to quote\n *     balancedness.\n * @private\n */\ngoog.html.SafeStyle.hasBalancedQuotes_ \x3d function(value) {\n  var outsideSingle \x3d true;\n  var outsideDouble \x3d true;\n  for (var i \x3d 0; i \x3c value.length; i++) {\n    var c \x3d value.charAt(i);\n    if (c \x3d\x3d \x22\x27\x22 \x26\x26 outsideDouble) {\n      outsideSingle \x3d !outsideSingle;\n    } else if (c \x3d\x3d \x27\x22\x27 \x26\x26 outsideSingle) {\n      outsideDouble \x3d !outsideDouble;\n    }\n  }\n  return outsideSingle \x26\x26 outsideDouble;\n};\n\n\n/**\n * Characters allowed in goog.html.SafeStyle.VALUE_RE_.\n * @private {string}\n */\ngoog.html.SafeStyle.VALUE_ALLOWED_CHARS_ \x3d \x27[-,.\x22\\\x27%_!# a-zA-Z0-9]\x27;\n\n\n/**\n * Regular expression for safe values.\n *\n * Quotes (\x22 and \x27) are allowed, but a check must be done elsewhere to ensure\n * they\x27re balanced.\n *\n * \x27,\x27 allows multiple values to be assigned to the same property\n * (e.g. background-attachment or font-family) and hence could allow\n * multiple values to get injected, but that should pose no risk of XSS.\n *\n * The expression checks only for XSS safety, not for CSS validity.\n * @const {!RegExp}\n * @private\n */\ngoog.html.SafeStyle.VALUE_RE_ \x3d\n    new RegExp(\x27^\x27 + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ + \x27+$\x27);\n\n\n/**\n * Regular expression for url(). We support URLs allowed by\n * https://www.w3.org/TR/css-syntax-3/#url-token-diagram without using escape\n * sequences. Use percent-encoding if you need to use special characters like\n * backslash.\n * @private @const {!RegExp}\n */\ngoog.html.SafeStyle.URL_RE_ \x3d new RegExp(\n    \x27\\\\b(url\\\\([ \\t\\n]*)(\x27 +\n        \x27\\\x27[ -\x26(-\\\\[\\\\]-~]*\\\x27\x27 +  // Printable characters except \x27 and \\.\n        \x27|\x22[ !#-\\\\[\\\\]-~]*\x22\x27 +    // Printable characters except \x22 and \\.\n        \x27|[!#-\x26*-\\\\[\\\\]-~]*\x27 +    // Printable characters except [ \x22\x27()\\\\].\n        \x27)([ \\t\\n]*\\\\))\x27,\n    \x27g\x27);\n\n\n/**\n * Regular expression for simple functions.\n * @private @const {!RegExp}\n */\ngoog.html.SafeStyle.FUNCTIONS_RE_ \x3d new RegExp(\n    \x27\\\\b(hsl|hsla|rgb|rgba|matrix|(rotate|scale|translate)(X|Y|Z|3d)?)\x27 +\n        \x27\\\\([-0-9a-z.%, ]+\\\\)\x27,\n    \x27g\x27);\n\n\n/**\n * Sanitize URLs inside url().\n *\n * NOTE: We could also consider using CSS.escape once that\x27s available in the\n * browsers. However, loosely matching URL e.g. with url\\(.*\\) and then escaping\n * the contents would result in a slightly different language than CSS leading\n * to confusion of users. E.g. url(\x22)\x22) is valid in CSS but it would be invalid\n * as seen by our parser. On the other hand, url(\\) is invalid in CSS but our\n * parser would be fine with it.\n *\n * @param {string} value Untrusted CSS property value.\n * @return {string}\n * @private\n */\ngoog.html.SafeStyle.sanitizeUrl_ \x3d function(value) {\n  return value.replace(\n      goog.html.SafeStyle.URL_RE_, function(match, before, url, after) {\n        var quote \x3d \x27\x27;\n        url \x3d url.replace(/^([\x27\x22])(.*)\\1$/, function(match, start, inside) {\n          quote \x3d start;\n          return inside;\n        });\n        var sanitized \x3d goog.html.SafeUrl.sanitize(url).getTypedStringValue();\n        return before + quote + sanitized + quote + after;\n      });\n};\n\n\n/**\n * Creates a new SafeStyle object by concatenating the values.\n * @param {...(!goog.html.SafeStyle|!Array\x3c!goog.html.SafeStyle\x3e)} var_args\n *     SafeStyles to concatenate.\n * @return {!goog.html.SafeStyle}\n */\ngoog.html.SafeStyle.concat \x3d function(var_args) {\n  var style \x3d \x27\x27;\n\n  /**\n   * @param {!goog.html.SafeStyle|!Array\x3c!goog.html.SafeStyle\x3e} argument\n   */\n  var addArgument \x3d function(argument) {\n    if (goog.isArray(argument)) {\n      goog.array.forEach(argument, addArgument);\n    } else {\n      style +\x3d goog.html.SafeStyle.unwrap(argument);\n    }\n  };\n\n  goog.array.forEach(arguments, addArgument);\n  if (!style) {\n    return goog.html.SafeStyle.EMPTY;\n  }\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\n      style);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/html/safestyle.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/html/safestylesheet.js";
eval("// Copyright 2014 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview The SafeStyleSheet type and its builders.\n *\n * TODO(xtof): Link to document stating type contract.\n */\n\ngoog.provide(\x27goog.html.SafeStyleSheet\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.html.SafeStyle\x27);\ngoog.require(\x27goog.object\x27);\ngoog.require(\x27goog.string\x27);\ngoog.require(\x27goog.string.Const\x27);\ngoog.require(\x27goog.string.TypedString\x27);\n\n\n\n/**\n * A string-like object which represents a CSS style sheet and that carries the\n * security type contract that its value, as a string, will not cause untrusted\n * script execution (XSS) when evaluated as CSS in a browser.\n *\n * Instances of this type must be created via the factory method\n * `goog.html.SafeStyleSheet.fromConstant` and not by invoking its\n * constructor. The constructor intentionally takes no parameters and the type\n * is immutable; hence only a default instance corresponding to the empty string\n * can be obtained via constructor invocation.\n *\n * A SafeStyleSheet\x27s string representation can safely be interpolated as the\n * content of a style element within HTML. The SafeStyleSheet string should\n * not be escaped before interpolation.\n *\n * Values of this type must be composable, i.e. for any two values\n * `styleSheet1` and `styleSheet2` of this type,\n * {@code goog.html.SafeStyleSheet.unwrap(styleSheet1) +\n * goog.html.SafeStyleSheet.unwrap(styleSheet2)} must itself be a value that\n * satisfies the SafeStyleSheet type constraint. This requirement implies that\n * for any value `styleSheet` of this type,\n * `goog.html.SafeStyleSheet.unwrap(styleSheet1)` must end in\n * \x22beginning of rule\x22 context.\n\n * A SafeStyleSheet can be constructed via security-reviewed unchecked\n * conversions. In this case producers of SafeStyleSheet must ensure themselves\n * that the SafeStyleSheet does not contain unsafe script. Note in particular\n * that {@code \x26lt;} is dangerous, even when inside CSS strings, and so should\n * always be forbidden or CSS-escaped in user controlled input. For example, if\n * {@code \x26lt;/style\x26gt;\x26lt;script\x26gt;evil\x26lt;/script\x26gt;\x22} were interpolated\n * inside a CSS string, it would break out of the context of the original\n * style element and `evil` would execute. Also note that within an HTML\n * style (raw text) element, HTML character references, such as\n * {@code \x26amp;lt;}, are not allowed. See\n *\n http://www.w3.org/TR/html5/scripting-1.html#restrictions-for-contents-of-script-elements\n * (similar considerations apply to the style element).\n *\n * @see goog.html.SafeStyleSheet#fromConstant\n * @constructor\n * @final\n * @struct\n * @implements {goog.string.TypedString}\n */\ngoog.html.SafeStyleSheet \x3d function() {\n  /**\n   * The contained value of this SafeStyleSheet.  The field has a purposely\n   * ugly name to make (non-compiled) code that attempts to directly access this\n   * field stand out.\n   * @private {string}\n   */\n  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ \x3d \x27\x27;\n\n  /**\n   * A type marker used to implement additional run-time type checking.\n   * @see goog.html.SafeStyleSheet#unwrap\n   * @const {!Object}\n   * @private\n   */\n  this.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ \x3d\n      goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;\n};\n\n\n/**\n * @override\n * @const\n */\ngoog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString \x3d true;\n\n\n/**\n * Type marker for the SafeStyleSheet type, used to implement additional\n * run-time type checking.\n * @const {!Object}\n * @private\n */\ngoog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ \x3d {};\n\n\n/**\n * Creates a style sheet consisting of one selector and one style definition.\n * Use {@link goog.html.SafeStyleSheet.concat} to create longer style sheets.\n * This function doesn\x27t support @import, @media and similar constructs.\n * @param {string} selector CSS selector, e.g. \x27#id\x27 or \x27tag .class, #id\x27. We\n *     support CSS3 selectors: https://w3.org/TR/css3-selectors/#selectors.\n * @param {!goog.html.SafeStyle.PropertyMap|!goog.html.SafeStyle} style Style\n *     definition associated with the selector.\n * @return {!goog.html.SafeStyleSheet}\n * @throws {Error} If invalid selector is provided.\n */\ngoog.html.SafeStyleSheet.createRule \x3d function(selector, style) {\n  if (goog.string.contains(selector, \x27\x3c\x27)) {\n    throw new Error(\x27Selector does not allow \\\x27\x3c\\\x27, got: \x27 + selector);\n  }\n\n  // Remove strings.\n  var selectorToCheck \x3d\n      selector.replace(/(\x27|\x22)((?!\\1)[^\\r\\n\\f\\\\]|\\\\[\\s\\S])*\\1/g, \x27\x27);\n\n  // Check characters allowed in CSS3 selectors.\n  if (!/^[-_a-zA-Z0-9#.:* ,\x3e+~[\\]()\x3d^$|]+$/.test(selectorToCheck)) {\n    throw new Error(\n        \x27Selector allows only [-_a-zA-Z0-9#.:* ,\x3e+~[\\\\]()\x3d^$|] and \x27 +\n        \x27strings, got: \x27 + selector);\n  }\n\n  // Check balanced () and [].\n  if (!goog.html.SafeStyleSheet.hasBalancedBrackets_(selectorToCheck)) {\n    throw new Error(\x27() and [] in selector must be balanced, got: \x27 + selector);\n  }\n\n  if (!(style instanceof goog.html.SafeStyle)) {\n    style \x3d goog.html.SafeStyle.create(style);\n  }\n  var styleSheet \x3d selector + \x27{\x27 + goog.html.SafeStyle.unwrap(style) + \x27}\x27;\n  return goog.html.SafeStyleSheet\n      .createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheet);\n};\n\n\n/**\n * Checks if a string has balanced () and [] brackets.\n * @param {string} s String to check.\n * @return {boolean}\n * @private\n */\ngoog.html.SafeStyleSheet.hasBalancedBrackets_ \x3d function(s) {\n  var brackets \x3d {\x27(\x27: \x27)\x27, \x27[\x27: \x27]\x27};\n  var expectedBrackets \x3d [];\n  for (var i \x3d 0; i \x3c s.length; i++) {\n    var ch \x3d s[i];\n    if (brackets[ch]) {\n      expectedBrackets.push(brackets[ch]);\n    } else if (goog.object.contains(brackets, ch)) {\n      if (expectedBrackets.pop() !\x3d ch) {\n        return false;\n      }\n    }\n  }\n  return expectedBrackets.length \x3d\x3d 0;\n};\n\n\n/**\n * Creates a new SafeStyleSheet object by concatenating values.\n * @param {...(!goog.html.SafeStyleSheet|!Array\x3c!goog.html.SafeStyleSheet\x3e)}\n *     var_args Values to concatenate.\n * @return {!goog.html.SafeStyleSheet}\n */\ngoog.html.SafeStyleSheet.concat \x3d function(var_args) {\n  var result \x3d \x27\x27;\n\n  /**\n   * @param {!goog.html.SafeStyleSheet|!Array\x3c!goog.html.SafeStyleSheet\x3e}\n   *     argument\n   */\n  var addArgument \x3d function(argument) {\n    if (goog.isArray(argument)) {\n      goog.array.forEach(argument, addArgument);\n    } else {\n      result +\x3d goog.html.SafeStyleSheet.unwrap(argument);\n    }\n  };\n\n  goog.array.forEach(arguments, addArgument);\n  return goog.html.SafeStyleSheet\n      .createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(result);\n};\n\n\n/**\n * Creates a SafeStyleSheet object from a compile-time constant string.\n *\n * `styleSheet` must not have any \x26lt; characters in it, so that\n * the syntactic structure of the surrounding HTML is not affected.\n *\n * @param {!goog.string.Const} styleSheet A compile-time-constant string from\n *     which to create a SafeStyleSheet.\n * @return {!goog.html.SafeStyleSheet} A SafeStyleSheet object initialized to\n *     `styleSheet`.\n */\ngoog.html.SafeStyleSheet.fromConstant \x3d function(styleSheet) {\n  var styleSheetString \x3d goog.string.Const.unwrap(styleSheet);\n  if (styleSheetString.length \x3d\x3d\x3d 0) {\n    return goog.html.SafeStyleSheet.EMPTY;\n  }\n  // \x3e is a valid character in CSS selectors and there\x27s no strict need to\n  // block it if we already block \x3c.\n  goog.asserts.assert(\n      !goog.string.contains(styleSheetString, \x27\x3c\x27),\n      \x22Forbidden \x27\x3c\x27 character in style sheet string: \x22 + styleSheetString);\n  return goog.html.SafeStyleSheet\n      .createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheetString);\n};\n\n\n/**\n * Returns this SafeStyleSheet\x27s value as a string.\n *\n * IMPORTANT: In code where it is security relevant that an object\x27s type is\n * indeed `SafeStyleSheet`, use `goog.html.SafeStyleSheet.unwrap`\n * instead of this method. If in doubt, assume that it\x27s security relevant. In\n * particular, note that goog.html functions which return a goog.html type do\n * not guarantee the returned instance is of the right type. For example:\n *\n * \x3cpre\x3e\n * var fakeSafeHtml \x3d new String(\x27fake\x27);\n * fakeSafeHtml.__proto__ \x3d goog.html.SafeHtml.prototype;\n * var newSafeHtml \x3d goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\n * // newSafeHtml is just an alias for fakeSafeHtml, it\x27s passed through by\n * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml\n * // instanceof goog.html.SafeHtml.\n * \x3c/pre\x3e\n *\n * @see goog.html.SafeStyleSheet#unwrap\n * @override\n */\ngoog.html.SafeStyleSheet.prototype.getTypedStringValue \x3d function() {\n  return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Returns a debug string-representation of this value.\n   *\n   * To obtain the actual string value wrapped in a SafeStyleSheet, use\n   * `goog.html.SafeStyleSheet.unwrap`.\n   *\n   * @see goog.html.SafeStyleSheet#unwrap\n   * @override\n   */\n  goog.html.SafeStyleSheet.prototype.toString \x3d function() {\n    return \x27SafeStyleSheet{\x27 +\n        this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ + \x27}\x27;\n  };\n}\n\n\n/**\n * Performs a runtime check that the provided object is indeed a\n * SafeStyleSheet object, and returns its value.\n *\n * @param {!goog.html.SafeStyleSheet} safeStyleSheet The object to extract from.\n * @return {string} The safeStyleSheet object\x27s contained string, unless\n *     the run-time type check fails. In that case, `unwrap` returns an\n *     innocuous string, or, if assertions are enabled, throws\n *     `goog.asserts.AssertionError`.\n */\ngoog.html.SafeStyleSheet.unwrap \x3d function(safeStyleSheet) {\n  // Perform additional Run-time type-checking to ensure that\n  // safeStyleSheet is indeed an instance of the expected type.  This\n  // provides some additional protection against security bugs due to\n  // application code that disables type checks.\n  // Specifically, the following checks are performed:\n  // 1. The object is an instance of the expected type.\n  // 2. The object is not an instance of a subclass.\n  // 3. The object carries a type marker for the expected type. \x22Faking\x22 an\n  // object requires a reference to the type marker, which has names intended\n  // to stand out in code reviews.\n  if (safeStyleSheet instanceof goog.html.SafeStyleSheet \x26\x26\n      safeStyleSheet.constructor \x3d\x3d\x3d goog.html.SafeStyleSheet \x26\x26\n      safeStyleSheet\n              .SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ \x3d\x3d\x3d\n          goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {\n    return safeStyleSheet.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;\n  } else {\n    goog.asserts.fail(\x27expected object of type SafeStyleSheet, got \\\x27\x27 +\n        safeStyleSheet + \x27\\\x27 of type \x27 + goog.typeOf(safeStyleSheet));\n    return \x27type_error:SafeStyleSheet\x27;\n  }\n};\n\n\n/**\n * Package-internal utility method to create SafeStyleSheet instances.\n *\n * @param {string} styleSheet The string to initialize the SafeStyleSheet\n *     object with.\n * @return {!goog.html.SafeStyleSheet} The initialized SafeStyleSheet object.\n * @package\n */\ngoog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse \x3d\n    function(styleSheet) {\n  return new goog.html.SafeStyleSheet().initSecurityPrivateDoNotAccessOrElse_(\n      styleSheet);\n};\n\n\n/**\n * Called from createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(). This\n * method exists only so that the compiler can dead code eliminate static\n * fields (like EMPTY) when they\x27re not accessed.\n * @param {string} styleSheet\n * @return {!goog.html.SafeStyleSheet}\n * @private\n */\ngoog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_ \x3d\n    function(styleSheet) {\n  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ \x3d styleSheet;\n  return this;\n};\n\n\n/**\n * A SafeStyleSheet instance corresponding to the empty string.\n * @const {!goog.html.SafeStyleSheet}\n */\ngoog.html.SafeStyleSheet.EMPTY \x3d\n    goog.html.SafeStyleSheet\n        .createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(\x27\x27);\n\n//# sourceURL\x3dhttps://qs/javascript/closure/html/safestylesheet.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/html/safehtml.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/**\n * @fileoverview The SafeHtml type and its builders.\n *\n * TODO(xtof): Link to document stating type contract.\n */\n\ngoog.provide(\x27goog.html.SafeHtml\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.dom.TagName\x27);\ngoog.require(\x27goog.dom.tags\x27);\ngoog.require(\x27goog.html.SafeScript\x27);\ngoog.require(\x27goog.html.SafeStyle\x27);\ngoog.require(\x27goog.html.SafeStyleSheet\x27);\ngoog.require(\x27goog.html.SafeUrl\x27);\ngoog.require(\x27goog.html.TrustedResourceUrl\x27);\ngoog.require(\x27goog.i18n.bidi.Dir\x27);\ngoog.require(\x27goog.i18n.bidi.DirectionalString\x27);\ngoog.require(\x27goog.labs.userAgent.browser\x27);\ngoog.require(\x27goog.object\x27);\ngoog.require(\x27goog.string\x27);\ngoog.require(\x27goog.string.Const\x27);\ngoog.require(\x27goog.string.TypedString\x27);\n\n\n\n/**\n * A string that is safe to use in HTML context in DOM APIs and HTML documents.\n *\n * A SafeHtml is a string-like object that carries the security type contract\n * that its value as a string will not cause untrusted script execution when\n * evaluated as HTML in a browser.\n *\n * Values of this type are guaranteed to be safe to use in HTML contexts,\n * such as, assignment to the innerHTML DOM property, or interpolation into\n * a HTML template in HTML PC_DATA context, in the sense that the use will not\n * result in a Cross-Site-Scripting vulnerability.\n *\n * Instances of this type must be created via the factory methods\n * (`goog.html.SafeHtml.create`, `goog.html.SafeHtml.htmlEscape`),\n * etc and not by invoking its constructor.  The constructor intentionally\n * takes no parameters and the type is immutable; hence only a default instance\n * corresponding to the empty string can be obtained via constructor invocation.\n *\n * @see goog.html.SafeHtml#create\n * @see goog.html.SafeHtml#htmlEscape\n * @constructor\n * @final\n * @struct\n * @implements {goog.i18n.bidi.DirectionalString}\n * @implements {goog.string.TypedString}\n */\ngoog.html.SafeHtml \x3d function() {\n  /**\n   * The contained value of this SafeHtml.  The field has a purposely ugly\n   * name to make (non-compiled) code that attempts to directly access this\n   * field stand out.\n   * @private {string}\n   */\n  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ \x3d \x27\x27;\n\n  /**\n   * A type marker used to implement additional run-time type checking.\n   * @see goog.html.SafeHtml#unwrap\n   * @const {!Object}\n   * @private\n   */\n  this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ \x3d\n      goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;\n\n  /**\n   * This SafeHtml\x27s directionality, or null if unknown.\n   * @private {?goog.i18n.bidi.Dir}\n   */\n  this.dir_ \x3d null;\n};\n\n\n/**\n * @override\n * @const\n */\ngoog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString \x3d true;\n\n\n/** @override */\ngoog.html.SafeHtml.prototype.getDirection \x3d function() {\n  return this.dir_;\n};\n\n\n/**\n * @override\n * @const\n */\ngoog.html.SafeHtml.prototype.implementsGoogStringTypedString \x3d true;\n\n\n/**\n * Returns this SafeHtml\x27s value as string.\n *\n * IMPORTANT: In code where it is security relevant that an object\x27s type is\n * indeed `SafeHtml`, use `goog.html.SafeHtml.unwrap` instead of\n * this method. If in doubt, assume that it\x27s security relevant. In particular,\n * note that goog.html functions which return a goog.html type do not guarantee\n * that the returned instance is of the right type. For example:\n *\n * \x3cpre\x3e\n * var fakeSafeHtml \x3d new String(\x27fake\x27);\n * fakeSafeHtml.__proto__ \x3d goog.html.SafeHtml.prototype;\n * var newSafeHtml \x3d goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\n * // newSafeHtml is just an alias for fakeSafeHtml, it\x27s passed through by\n * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml\n * // instanceof goog.html.SafeHtml.\n * \x3c/pre\x3e\n *\n * @see goog.html.SafeHtml#unwrap\n * @override\n */\ngoog.html.SafeHtml.prototype.getTypedStringValue \x3d function() {\n  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Returns a debug string-representation of this value.\n   *\n   * To obtain the actual string value wrapped in a SafeHtml, use\n   * `goog.html.SafeHtml.unwrap`.\n   *\n   * @see goog.html.SafeHtml#unwrap\n   * @override\n   */\n  goog.html.SafeHtml.prototype.toString \x3d function() {\n    return \x27SafeHtml{\x27 + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ +\n        \x27}\x27;\n  };\n}\n\n\n/**\n * Performs a runtime check that the provided object is indeed a SafeHtml\n * object, and returns its value.\n * @param {!goog.html.SafeHtml} safeHtml The object to extract from.\n * @return {string} The SafeHtml object\x27s contained string, unless the run-time\n *     type check fails. In that case, `unwrap` returns an innocuous\n *     string, or, if assertions are enabled, throws\n *     `goog.asserts.AssertionError`.\n */\ngoog.html.SafeHtml.unwrap \x3d function(safeHtml) {\n  // Perform additional run-time type-checking to ensure that safeHtml is indeed\n  // an instance of the expected type.  This provides some additional protection\n  // against security bugs due to application code that disables type checks.\n  // Specifically, the following checks are performed:\n  // 1. The object is an instance of the expected type.\n  // 2. The object is not an instance of a subclass.\n  // 3. The object carries a type marker for the expected type. \x22Faking\x22 an\n  // object requires a reference to the type marker, which has names intended\n  // to stand out in code reviews.\n  if (safeHtml instanceof goog.html.SafeHtml \x26\x26\n      safeHtml.constructor \x3d\x3d\x3d goog.html.SafeHtml \x26\x26\n      safeHtml.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ \x3d\x3d\x3d\n          goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {\n    return safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_;\n  } else {\n    goog.asserts.fail(\x27expected object of type SafeHtml, got \\\x27\x27 +\n        safeHtml + \x27\\\x27 of type \x27 + goog.typeOf(safeHtml));\n    return \x27type_error:SafeHtml\x27;\n  }\n};\n\n\n/**\n * Shorthand for union of types that can sensibly be converted to strings\n * or might already be SafeHtml (as SafeHtml is a goog.string.TypedString).\n * @private\n * @typedef {string|number|boolean|!goog.string.TypedString|\n *           !goog.i18n.bidi.DirectionalString}\n */\ngoog.html.SafeHtml.TextOrHtml_;\n\n\n/**\n * Returns HTML-escaped text as a SafeHtml object.\n *\n * If text is of a type that implements\n * `goog.i18n.bidi.DirectionalString`, the directionality of the new\n * `SafeHtml` object is set to `text`\x27s directionality, if known.\n * Otherwise, the directionality of the resulting SafeHtml is unknown (i.e.,\n * `null`).\n *\n * @param {!goog.html.SafeHtml.TextOrHtml_} textOrHtml The text to escape. If\n *     the parameter is of type SafeHtml it is returned directly (no escaping\n *     is done).\n * @return {!goog.html.SafeHtml} The escaped text, wrapped as a SafeHtml.\n */\ngoog.html.SafeHtml.htmlEscape \x3d function(textOrHtml) {\n  if (textOrHtml instanceof goog.html.SafeHtml) {\n    return textOrHtml;\n  }\n  var dir \x3d null;\n  if (textOrHtml.implementsGoogI18nBidiDirectionalString) {\n    dir \x3d /** @type {!goog.i18n.bidi.DirectionalString} */ (textOrHtml)\n              .getDirection();\n  }\n  var textAsString;\n  if (textOrHtml.implementsGoogStringTypedString) {\n    textAsString \x3d /** @type {!goog.string.TypedString} */ (textOrHtml)\n                       .getTypedStringValue();\n  } else {\n    textAsString \x3d String(textOrHtml);\n  }\n  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n      goog.string.htmlEscape(textAsString), dir);\n};\n\n\n/**\n * Returns HTML-escaped text as a SafeHtml object, with newlines changed to\n * \x26lt;br\x26gt;.\n * @param {!goog.html.SafeHtml.TextOrHtml_} textOrHtml The text to escape. If\n *     the parameter is of type SafeHtml it is returned directly (no escaping\n *     is done).\n * @return {!goog.html.SafeHtml} The escaped text, wrapped as a SafeHtml.\n */\ngoog.html.SafeHtml.htmlEscapePreservingNewlines \x3d function(textOrHtml) {\n  if (textOrHtml instanceof goog.html.SafeHtml) {\n    return textOrHtml;\n  }\n  var html \x3d goog.html.SafeHtml.htmlEscape(textOrHtml);\n  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n      goog.string.newLineToBr(goog.html.SafeHtml.unwrap(html)),\n      html.getDirection());\n};\n\n\n/**\n * Returns HTML-escaped text as a SafeHtml object, with newlines changed to\n * \x26lt;br\x26gt; and escaping whitespace to preserve spatial formatting. Character\n * entity #160 is used to make it safer for XML.\n * @param {!goog.html.SafeHtml.TextOrHtml_} textOrHtml The text to escape. If\n *     the parameter is of type SafeHtml it is returned directly (no escaping\n *     is done).\n * @return {!goog.html.SafeHtml} The escaped text, wrapped as a SafeHtml.\n */\ngoog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces \x3d function(\n    textOrHtml) {\n  if (textOrHtml instanceof goog.html.SafeHtml) {\n    return textOrHtml;\n  }\n  var html \x3d goog.html.SafeHtml.htmlEscape(textOrHtml);\n  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n      goog.string.whitespaceEscape(goog.html.SafeHtml.unwrap(html)),\n      html.getDirection());\n};\n\n\n/**\n * Coerces an arbitrary object into a SafeHtml object.\n *\n * If `textOrHtml` is already of type `goog.html.SafeHtml`, the same\n * object is returned. Otherwise, `textOrHtml` is coerced to string, and\n * HTML-escaped. If `textOrHtml` is of a type that implements\n * `goog.i18n.bidi.DirectionalString`, its directionality, if known, is\n * preserved.\n *\n * @param {!goog.html.SafeHtml.TextOrHtml_} textOrHtml The text or SafeHtml to\n *     coerce.\n * @return {!goog.html.SafeHtml} The resulting SafeHtml object.\n * @deprecated Use goog.html.SafeHtml.htmlEscape.\n */\ngoog.html.SafeHtml.from \x3d goog.html.SafeHtml.htmlEscape;\n\n\n/**\n * @const\n * @private\n */\ngoog.html.SafeHtml.VALID_NAMES_IN_TAG_ \x3d /^[a-zA-Z0-9-]+$/;\n\n\n/**\n * Set of attributes containing URL as defined at\n * http://www.w3.org/TR/html5/index.html#attributes-1.\n * @private @const {!Object\x3cstring,boolean\x3e}\n */\ngoog.html.SafeHtml.URL_ATTRIBUTES_ \x3d goog.object.createSet(\n    \x27action\x27, \x27cite\x27, \x27data\x27, \x27formaction\x27, \x27href\x27, \x27manifest\x27, \x27poster\x27,\n    \x27src\x27);\n\n\n/**\n * Tags which are unsupported via create(). They might be supported via a\n * tag-specific create method. These are tags which might require a\n * TrustedResourceUrl in one of their attributes or a restricted type for\n * their content.\n * @private @const {!Object\x3cstring,boolean\x3e}\n */\ngoog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_ \x3d goog.object.createSet(\n    goog.dom.TagName.APPLET, goog.dom.TagName.BASE, goog.dom.TagName.EMBED,\n    goog.dom.TagName.IFRAME, goog.dom.TagName.LINK, goog.dom.TagName.MATH,\n    goog.dom.TagName.META, goog.dom.TagName.OBJECT, goog.dom.TagName.SCRIPT,\n    goog.dom.TagName.STYLE, goog.dom.TagName.SVG, goog.dom.TagName.TEMPLATE);\n\n\n/**\n * @typedef {string|number|goog.string.TypedString|\n *     goog.html.SafeStyle.PropertyMap|undefined}\n */\ngoog.html.SafeHtml.AttributeValue;\n\n\n/**\n * Creates a SafeHtml content consisting of a tag with optional attributes and\n * optional content.\n *\n * For convenience tag names and attribute names are accepted as regular\n * strings, instead of goog.string.Const. Nevertheless, you should not pass\n * user-controlled values to these parameters. Note that these parameters are\n * syntactically validated at runtime, and invalid values will result in\n * an exception.\n *\n * Example usage:\n *\n * goog.html.SafeHtml.create(\x27br\x27);\n * goog.html.SafeHtml.create(\x27div\x27, {\x27class\x27: \x27a\x27});\n * goog.html.SafeHtml.create(\x27p\x27, {}, \x27a\x27);\n * goog.html.SafeHtml.create(\x27p\x27, {}, goog.html.SafeHtml.create(\x27br\x27));\n *\n * goog.html.SafeHtml.create(\x27span\x27, {\n *   \x27style\x27: {\x27margin\x27: \x270\x27}\n * });\n *\n * To guarantee SafeHtml\x27s type contract is upheld there are restrictions on\n * attribute values and tag names.\n *\n * - For attributes which contain script code (on*), a goog.string.Const is\n *   required.\n * - For attributes which contain style (style), a goog.html.SafeStyle or a\n *   goog.html.SafeStyle.PropertyMap is required.\n * - For attributes which are interpreted as URLs (e.g. src, href) a\n *   goog.html.SafeUrl, goog.string.Const or string is required. If a string\n *   is passed, it will be sanitized with SafeUrl.sanitize().\n * - For tags which can load code or set security relevant page metadata,\n *   more specific goog.html.SafeHtml.create*() functions must be used. Tags\n *   which are not supported by this function are applet, base, embed, iframe,\n *   link, math, object, script, style, svg, and template.\n *\n * @param {!goog.dom.TagName|string} tagName The name of the tag. Only tag names\n *     consisting of [a-zA-Z0-9-] are allowed. Tag names documented above are\n *     disallowed.\n * @param {?Object\x3cstring, ?goog.html.SafeHtml.AttributeValue\x3e\x3d} opt_attributes\n *     Mapping from attribute names to their values. Only attribute names\n *     consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined causes\n *     the attribute to be omitted.\n * @param {!goog.html.SafeHtml.TextOrHtml_|\n *     !Array\x3c!goog.html.SafeHtml.TextOrHtml_\x3e\x3d} opt_content Content to\n *     HTML-escape and put inside the tag. This must be empty for void tags\n *     like \x3cbr\x3e. Array elements are concatenated.\n * @return {!goog.html.SafeHtml} The SafeHtml content with the tag.\n * @throws {Error} If invalid tag name, attribute name, or attribute value is\n *     provided.\n * @throws {goog.asserts.AssertionError} If content for void tag is provided.\n */\ngoog.html.SafeHtml.create \x3d function(tagName, opt_attributes, opt_content) {\n  goog.html.SafeHtml.verifyTagName(String(tagName));\n  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\n      String(tagName), opt_attributes, opt_content);\n};\n\n\n/**\n * Verifies if the tag name is valid and if it doesn\x27t change the context.\n * E.g. STRONG is fine but SCRIPT throws because it changes context. See\n * goog.html.SafeHtml.create for an explanation of allowed tags.\n * @param {string} tagName\n * @throws {Error} If invalid tag name is provided.\n * @package\n */\ngoog.html.SafeHtml.verifyTagName \x3d function(tagName) {\n  if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(tagName)) {\n    throw new Error(\x27Invalid tag name \x3c\x27 + tagName + \x27\x3e.\x27);\n  }\n  if (tagName.toUpperCase() in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_) {\n    throw new Error(\x27Tag name \x3c\x27 + tagName + \x27\x3e is not allowed for SafeHtml.\x27);\n  }\n};\n\n\n/**\n * Creates a SafeHtml representing an iframe tag.\n *\n * This by default restricts the iframe as much as possible by setting the\n * sandbox attribute to the empty string. If the iframe requires less\n * restrictions, set the sandbox attribute as tight as possible, but do not rely\n * on the sandbox as a security feature because it is not supported by older\n * browsers. If a sandbox is essential to security (e.g. for third-party\n * frames), use createSandboxIframe which checks for browser support.\n *\n * @see https://developer.mozilla.org/en/docs/Web/HTML/Element/iframe#attr-sandbox\n *\n * @param {?goog.html.TrustedResourceUrl\x3d} opt_src The value of the src\n *     attribute. If null or undefined src will not be set.\n * @param {?goog.html.SafeHtml\x3d} opt_srcdoc The value of the srcdoc attribute.\n *     If null or undefined srcdoc will not be set.\n * @param {?Object\x3cstring, ?goog.html.SafeHtml.AttributeValue\x3e\x3d} opt_attributes\n *     Mapping from attribute names to their values. Only attribute names\n *     consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined causes\n *     the attribute to be omitted.\n * @param {!goog.html.SafeHtml.TextOrHtml_|\n *     !Array\x3c!goog.html.SafeHtml.TextOrHtml_\x3e\x3d} opt_content Content to\n *     HTML-escape and put inside the tag. Array elements are concatenated.\n * @return {!goog.html.SafeHtml} The SafeHtml content with the tag.\n * @throws {Error} If invalid tag name, attribute name, or attribute value is\n *     provided. If opt_attributes contains the src or srcdoc attributes.\n */\ngoog.html.SafeHtml.createIframe \x3d function(\n    opt_src, opt_srcdoc, opt_attributes, opt_content) {\n  if (opt_src) {\n    // Check whether this is really TrustedResourceUrl.\n    goog.html.TrustedResourceUrl.unwrap(opt_src);\n  }\n\n  var fixedAttributes \x3d {};\n  fixedAttributes[\x27src\x27] \x3d opt_src || null;\n  fixedAttributes[\x27srcdoc\x27] \x3d\n      opt_srcdoc \x26\x26 goog.html.SafeHtml.unwrap(opt_srcdoc);\n  var defaultAttributes \x3d {\x27sandbox\x27: \x27\x27};\n  var attributes \x3d goog.html.SafeHtml.combineAttributes(\n      fixedAttributes, defaultAttributes, opt_attributes);\n  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\n      \x27iframe\x27, attributes, opt_content);\n};\n\n\n/**\n * Creates a SafeHtml representing a sandboxed iframe tag.\n *\n * The sandbox attribute is enforced in its most restrictive mode, an empty\n * string. Consequently, the security requirements for the src and srcdoc\n * attributes are relaxed compared to SafeHtml.createIframe. This function\n * will throw on browsers that do not support the sandbox attribute, as\n * determined by SafeHtml.canUseSandboxIframe.\n *\n * The SafeHtml returned by this function can trigger downloads with no\n * user interaction on Chrome (though only a few, further attempts are blocked).\n * Firefox and IE will block all downloads from the sandbox.\n *\n * @see https://developer.mozilla.org/en/docs/Web/HTML/Element/iframe#attr-sandbox\n * @see https://lists.w3.org/Archives/Public/public-whatwg-archive/2013Feb/0112.html\n *\n * @param {string|!goog.html.SafeUrl\x3d} opt_src The value of the src\n *     attribute. If null or undefined src will not be set.\n * @param {string\x3d} opt_srcdoc The value of the srcdoc attribute.\n *     If null or undefined srcdoc will not be set. Will not be sanitized.\n * @param {!Object\x3cstring, ?goog.html.SafeHtml.AttributeValue\x3e\x3d} opt_attributes\n *     Mapping from attribute names to their values. Only attribute names\n *     consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined causes\n *     the attribute to be omitted.\n * @param {!goog.html.SafeHtml.TextOrHtml_|\n *     !Array\x3c!goog.html.SafeHtml.TextOrHtml_\x3e\x3d} opt_content Content to\n *     HTML-escape and put inside the tag. Array elements are concatenated.\n * @return {!goog.html.SafeHtml} The SafeHtml content with the tag.\n * @throws {Error} If invalid tag name, attribute name, or attribute value is\n *     provided. If opt_attributes contains the src, srcdoc or sandbox\n *     attributes. If browser does not support the sandbox attribute on iframe.\n */\ngoog.html.SafeHtml.createSandboxIframe \x3d function(\n    opt_src, opt_srcdoc, opt_attributes, opt_content) {\n  if (!goog.html.SafeHtml.canUseSandboxIframe()) {\n    throw new Error(\x27The browser does not support sandboxed iframes.\x27);\n  }\n\n  var fixedAttributes \x3d {};\n  if (opt_src) {\n    // Note that sanitize is a no-op on SafeUrl.\n    fixedAttributes[\x27src\x27] \x3d\n        goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(opt_src));\n  } else {\n    fixedAttributes[\x27src\x27] \x3d null;\n  }\n  fixedAttributes[\x27srcdoc\x27] \x3d opt_srcdoc || null;\n  fixedAttributes[\x27sandbox\x27] \x3d \x27\x27;\n  var attributes \x3d\n      goog.html.SafeHtml.combineAttributes(fixedAttributes, {}, opt_attributes);\n  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\n      \x27iframe\x27, attributes, opt_content);\n};\n\n\n/**\n * Checks if the user agent supports sandboxed iframes.\n * @return {boolean}\n */\ngoog.html.SafeHtml.canUseSandboxIframe \x3d function() {\n  return goog.global[\x27HTMLIFrameElement\x27] \x26\x26\n      (\x27sandbox\x27 in goog.global[\x27HTMLIFrameElement\x27].prototype);\n};\n\n\n/**\n * Creates a SafeHtml representing a script tag with the src attribute.\n * @param {!goog.html.TrustedResourceUrl} src The value of the src\n * attribute.\n * @param {?Object\x3cstring, ?goog.html.SafeHtml.AttributeValue\x3e\x3d}\n * opt_attributes\n *     Mapping from attribute names to their values. Only attribute names\n *     consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined\n *     causes the attribute to be omitted.\n * @return {!goog.html.SafeHtml} The SafeHtml content with the tag.\n * @throws {Error} If invalid attribute name or value is provided. If\n *     opt_attributes contains the src attribute.\n */\ngoog.html.SafeHtml.createScriptSrc \x3d function(src, opt_attributes) {\n  // TODO(mlourenco): The charset attribute should probably be blocked. If\n  // its value is attacker controlled, the script contains attacker controlled\n  // sub-strings (even if properly escaped) and the server does not set charset\n  // then XSS is likely possible.\n  // https://html.spec.whatwg.org/multipage/scripting.html#dom-script-charset\n\n  // Check whether this is really TrustedResourceUrl.\n  goog.html.TrustedResourceUrl.unwrap(src);\n\n  var fixedAttributes \x3d {\x27src\x27: src};\n  var defaultAttributes \x3d {};\n  var attributes \x3d goog.html.SafeHtml.combineAttributes(\n      fixedAttributes, defaultAttributes, opt_attributes);\n  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\n      \x27script\x27, attributes);\n};\n\n\n/**\n * Creates a SafeHtml representing a script tag. Does not allow the language,\n * src, text or type attributes to be set.\n * @param {!goog.html.SafeScript|!Array\x3c!goog.html.SafeScript\x3e}\n *     script Content to put inside the tag. Array elements are\n *     concatenated.\n * @param {?Object\x3cstring, ?goog.html.SafeHtml.AttributeValue\x3e\x3d} opt_attributes\n *     Mapping from attribute names to their values. Only attribute names\n *     consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined causes\n *     the attribute to be omitted.\n * @return {!goog.html.SafeHtml} The SafeHtml content with the tag.\n * @throws {Error} If invalid attribute name or attribute value is provided. If\n *     opt_attributes contains the language, src, text or type attribute.\n */\ngoog.html.SafeHtml.createScript \x3d function(script, opt_attributes) {\n  for (var attr in opt_attributes) {\n    var attrLower \x3d attr.toLowerCase();\n    if (attrLower \x3d\x3d \x27language\x27 || attrLower \x3d\x3d \x27src\x27 || attrLower \x3d\x3d \x27text\x27 ||\n        attrLower \x3d\x3d \x27type\x27) {\n      throw new Error(\x27Cannot set \x22\x27 + attrLower + \x27\x22 attribute\x27);\n    }\n  }\n\n  var content \x3d \x27\x27;\n  script \x3d goog.array.concat(script);\n  for (var i \x3d 0; i \x3c script.length; i++) {\n    content +\x3d goog.html.SafeScript.unwrap(script[i]);\n  }\n  // Convert to SafeHtml so that it\x27s not HTML-escaped. This is safe because\n  // as part of its contract, SafeScript should have no dangerous \x27\x3c\x27.\n  var htmlContent \x3d\n      goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n          content, goog.i18n.bidi.Dir.NEUTRAL);\n  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\n      \x27script\x27, opt_attributes, htmlContent);\n};\n\n\n/**\n * Creates a SafeHtml representing a style tag. The type attribute is set\n * to \x22text/css\x22.\n * @param {!goog.html.SafeStyleSheet|!Array\x3c!goog.html.SafeStyleSheet\x3e}\n *     styleSheet Content to put inside the tag. Array elements are\n *     concatenated.\n * @param {?Object\x3cstring, ?goog.html.SafeHtml.AttributeValue\x3e\x3d} opt_attributes\n *     Mapping from attribute names to their values. Only attribute names\n *     consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined causes\n *     the attribute to be omitted.\n * @return {!goog.html.SafeHtml} The SafeHtml content with the tag.\n * @throws {Error} If invalid attribute name or attribute value is provided. If\n *     opt_attributes contains the type attribute.\n */\ngoog.html.SafeHtml.createStyle \x3d function(styleSheet, opt_attributes) {\n  var fixedAttributes \x3d {\x27type\x27: \x27text/css\x27};\n  var defaultAttributes \x3d {};\n  var attributes \x3d goog.html.SafeHtml.combineAttributes(\n      fixedAttributes, defaultAttributes, opt_attributes);\n\n  var content \x3d \x27\x27;\n  styleSheet \x3d goog.array.concat(styleSheet);\n  for (var i \x3d 0; i \x3c styleSheet.length; i++) {\n    content +\x3d goog.html.SafeStyleSheet.unwrap(styleSheet[i]);\n  }\n  // Convert to SafeHtml so that it\x27s not HTML-escaped. This is safe because\n  // as part of its contract, SafeStyleSheet should have no dangerous \x27\x3c\x27.\n  var htmlContent \x3d\n      goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n          content, goog.i18n.bidi.Dir.NEUTRAL);\n  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\n      \x27style\x27, attributes, htmlContent);\n};\n\n\n/**\n * Creates a SafeHtml representing a meta refresh tag.\n * @param {!goog.html.SafeUrl|string} url Where to redirect. If a string is\n *     passed, it will be sanitized with SafeUrl.sanitize().\n * @param {number\x3d} opt_secs Number of seconds until the page should be\n *     reloaded. Will be set to 0 if unspecified.\n * @return {!goog.html.SafeHtml} The SafeHtml content with the tag.\n */\ngoog.html.SafeHtml.createMetaRefresh \x3d function(url, opt_secs) {\n\n  // Note that sanitize is a no-op on SafeUrl.\n  var unwrappedUrl \x3d goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(url));\n\n  if (goog.labs.userAgent.browser.isIE() ||\n      goog.labs.userAgent.browser.isEdge()) {\n    // IE/EDGE can\x27t parse the content attribute if the url contains a\n    // semicolon. We can fix this by adding quotes around the url, but then we\n    // can\x27t parse quotes in the URL correctly. Also, it seems that IE/EDGE\n    // did not unescape semicolons in these URLs at some point in the past. We\n    // take a best-effort approach.\n    //\n    // If the URL has semicolons (which may happen in some cases, see\n    // http://www.w3.org/TR/1999/REC-html401-19991224/appendix/notes.html#h-B.2\n    // for instance), wrap it in single quotes to protect the semicolons.\n    // If the URL has semicolons and single quotes, url-encode the single quotes\n    // as well.\n    //\n    // This is imperfect. Notice that both \x27 and ; are reserved characters in\n    // URIs, so this could do the wrong thing, but at least it will do the wrong\n    // thing in only rare cases.\n    if (goog.string.contains(unwrappedUrl, \x27;\x27)) {\n      unwrappedUrl \x3d \x22\x27\x22 + unwrappedUrl.replace(/\x27/g, \x27%27\x27) + \x22\x27\x22;\n    }\n  }\n  var attributes \x3d {\n    \x27http-equiv\x27: \x27refresh\x27,\n    \x27content\x27: (opt_secs || 0) + \x27; url\x3d\x27 + unwrappedUrl\n  };\n\n  // This function will handle the HTML escaping for attributes.\n  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\n      \x27meta\x27, attributes);\n};\n\n\n/**\n * @param {string} tagName The tag name.\n * @param {string} name The attribute name.\n * @param {!goog.html.SafeHtml.AttributeValue} value The attribute value.\n * @return {string} A \x22name\x3dvalue\x22 string.\n * @throws {Error} If attribute value is unsafe for the given tag and attribute.\n * @private\n */\ngoog.html.SafeHtml.getAttrNameAndValue_ \x3d function(tagName, name, value) {\n  // If it\x27s goog.string.Const, allow any valid attribute name.\n  if (value instanceof goog.string.Const) {\n    value \x3d goog.string.Const.unwrap(value);\n  } else if (name.toLowerCase() \x3d\x3d \x27style\x27) {\n    value \x3d goog.html.SafeHtml.getStyleValue_(value);\n  } else if (/^on/i.test(name)) {\n    // TODO(jakubvrana): Disallow more attributes with a special meaning.\n    throw new Error(\n        \x27Attribute \x22\x27 + name + \x27\x22 requires goog.string.Const value, \x22\x27 + value +\n        \x27\x22 given.\x27);\n    // URL attributes handled differently according to tag.\n  } else if (name.toLowerCase() in goog.html.SafeHtml.URL_ATTRIBUTES_) {\n    if (value instanceof goog.html.TrustedResourceUrl) {\n      value \x3d goog.html.TrustedResourceUrl.unwrap(value);\n    } else if (value instanceof goog.html.SafeUrl) {\n      value \x3d goog.html.SafeUrl.unwrap(value);\n    } else if (goog.isString(value)) {\n      value \x3d goog.html.SafeUrl.sanitize(value).getTypedStringValue();\n    } else {\n      throw new Error(\n          \x27Attribute \x22\x27 + name + \x27\x22 on tag \x22\x27 + tagName +\n          \x27\x22 requires goog.html.SafeUrl, goog.string.Const, or string,\x27 +\n          \x27 value \x22\x27 + value + \x27\x22 given.\x27);\n    }\n  }\n\n  // Accept SafeUrl, TrustedResourceUrl, etc. for attributes which only require\n  // HTML-escaping.\n  if (value.implementsGoogStringTypedString) {\n    // Ok to call getTypedStringValue() since there\x27s no reliance on the type\n    // contract for security here.\n    value \x3d\n        /** @type {!goog.string.TypedString} */ (value).getTypedStringValue();\n  }\n\n  goog.asserts.assert(\n      goog.isString(value) || goog.isNumber(value),\n      \x27String or number value expected, got \x27 + (typeof value) +\n          \x27 with value: \x27 + value);\n  return name + \x27\x3d\x22\x27 + goog.string.htmlEscape(String(value)) + \x27\x22\x27;\n};\n\n\n/**\n * Gets value allowed in \x22style\x22 attribute.\n * @param {!goog.html.SafeHtml.AttributeValue} value It could be SafeStyle or a\n *     map which will be passed to goog.html.SafeStyle.create.\n * @return {string} Unwrapped value.\n * @throws {Error} If string value is given.\n * @private\n */\ngoog.html.SafeHtml.getStyleValue_ \x3d function(value) {\n  if (!goog.isObject(value)) {\n    throw new Error(\n        \x27The \x22style\x22 attribute requires goog.html.SafeStyle or map \x27 +\n        \x27of style properties, \x27 + (typeof value) + \x27 given: \x27 + value);\n  }\n  if (!(value instanceof goog.html.SafeStyle)) {\n    // Process the property bag into a style object.\n    value \x3d goog.html.SafeStyle.create(value);\n  }\n  return goog.html.SafeStyle.unwrap(value);\n};\n\n\n/**\n * Creates a SafeHtml content with known directionality consisting of a tag with\n * optional attributes and optional content.\n * @param {!goog.i18n.bidi.Dir} dir Directionality.\n * @param {string} tagName\n * @param {?Object\x3cstring, ?goog.html.SafeHtml.AttributeValue\x3e\x3d} opt_attributes\n * @param {!goog.html.SafeHtml.TextOrHtml_|\n *     !Array\x3c!goog.html.SafeHtml.TextOrHtml_\x3e\x3d} opt_content\n * @return {!goog.html.SafeHtml} The SafeHtml content with the tag.\n */\ngoog.html.SafeHtml.createWithDir \x3d function(\n    dir, tagName, opt_attributes, opt_content) {\n  var html \x3d goog.html.SafeHtml.create(tagName, opt_attributes, opt_content);\n  html.dir_ \x3d dir;\n  return html;\n};\n\n\n/**\n * Creates a new SafeHtml object by concatenating values.\n * @param {...(!goog.html.SafeHtml.TextOrHtml_|\n *     !Array\x3c!goog.html.SafeHtml.TextOrHtml_\x3e)} var_args Values to concatenate.\n * @return {!goog.html.SafeHtml}\n */\ngoog.html.SafeHtml.concat \x3d function(var_args) {\n  var dir \x3d goog.i18n.bidi.Dir.NEUTRAL;\n  var content \x3d \x27\x27;\n\n  /**\n   * @param {!goog.html.SafeHtml.TextOrHtml_|\n   *     !Array\x3c!goog.html.SafeHtml.TextOrHtml_\x3e} argument\n   */\n  var addArgument \x3d function(argument) {\n    if (goog.isArray(argument)) {\n      goog.array.forEach(argument, addArgument);\n    } else {\n      var html \x3d goog.html.SafeHtml.htmlEscape(argument);\n      content +\x3d goog.html.SafeHtml.unwrap(html);\n      var htmlDir \x3d html.getDirection();\n      if (dir \x3d\x3d goog.i18n.bidi.Dir.NEUTRAL) {\n        dir \x3d htmlDir;\n      } else if (htmlDir !\x3d goog.i18n.bidi.Dir.NEUTRAL \x26\x26 dir !\x3d htmlDir) {\n        dir \x3d null;\n      }\n    }\n  };\n\n  goog.array.forEach(arguments, addArgument);\n  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n      content, dir);\n};\n\n\n/**\n * Creates a new SafeHtml object with known directionality by concatenating the\n * values.\n * @param {!goog.i18n.bidi.Dir} dir Directionality.\n * @param {...(!goog.html.SafeHtml.TextOrHtml_|\n *     !Array\x3c!goog.html.SafeHtml.TextOrHtml_\x3e)} var_args Elements of array\n *     arguments would be processed recursively.\n * @return {!goog.html.SafeHtml}\n */\ngoog.html.SafeHtml.concatWithDir \x3d function(dir, var_args) {\n  var html \x3d goog.html.SafeHtml.concat(goog.array.slice(arguments, 1));\n  html.dir_ \x3d dir;\n  return html;\n};\n\n\n/**\n * Type marker for the SafeHtml type, used to implement additional run-time\n * type checking.\n * @const {!Object}\n * @private\n */\ngoog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ \x3d {};\n\n\n/**\n * Package-internal utility method to create SafeHtml instances.\n *\n * @param {string} html The string to initialize the SafeHtml object with.\n * @param {?goog.i18n.bidi.Dir} dir The directionality of the SafeHtml to be\n *     constructed, or null if unknown.\n * @return {!goog.html.SafeHtml} The initialized SafeHtml object.\n * @package\n */\ngoog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse \x3d function(\n    html, dir) {\n  return new goog.html.SafeHtml().initSecurityPrivateDoNotAccessOrElse_(\n      html, dir);\n};\n\n\n/**\n * Called from createSafeHtmlSecurityPrivateDoNotAccessOrElse(). This\n * method exists only so that the compiler can dead code eliminate static\n * fields (like EMPTY) when they\x27re not accessed.\n * @param {string} html\n * @param {?goog.i18n.bidi.Dir} dir\n * @return {!goog.html.SafeHtml}\n * @private\n */\ngoog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_ \x3d function(\n    html, dir) {\n  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ \x3d html;\n  this.dir_ \x3d dir;\n  return this;\n};\n\n\n/**\n * Like create() but does not restrict which tags can be constructed.\n *\n * @param {string} tagName Tag name. Set or validated by caller.\n * @param {?Object\x3cstring, ?goog.html.SafeHtml.AttributeValue\x3e\x3d} opt_attributes\n * @param {(!goog.html.SafeHtml.TextOrHtml_|\n *     !Array\x3c!goog.html.SafeHtml.TextOrHtml_\x3e)\x3d} opt_content\n * @return {!goog.html.SafeHtml}\n * @throws {Error} If invalid or unsafe attribute name or value is provided.\n * @throws {goog.asserts.AssertionError} If content for void tag is provided.\n * @package\n */\ngoog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse \x3d function(\n    tagName, opt_attributes, opt_content) {\n  var dir \x3d null;\n  var result \x3d \x27\x3c\x27 + tagName;\n  result +\x3d goog.html.SafeHtml.stringifyAttributes(tagName, opt_attributes);\n\n  var content \x3d opt_content;\n  if (!goog.isDefAndNotNull(content)) {\n    content \x3d [];\n  } else if (!goog.isArray(content)) {\n    content \x3d [content];\n  }\n\n  if (goog.dom.tags.isVoidTag(tagName.toLowerCase())) {\n    goog.asserts.assert(\n        !content.length, \x27Void tag \x3c\x27 + tagName + \x27\x3e does not allow content.\x27);\n    result +\x3d \x27\x3e\x27;\n  } else {\n    var html \x3d goog.html.SafeHtml.concat(content);\n    result +\x3d \x27\x3e\x27 + goog.html.SafeHtml.unwrap(html) + \x27\x3c/\x27 + tagName + \x27\x3e\x27;\n    dir \x3d html.getDirection();\n  }\n\n  var dirAttribute \x3d opt_attributes \x26\x26 opt_attributes[\x27dir\x27];\n  if (dirAttribute) {\n    if (/^(ltr|rtl|auto)$/i.test(dirAttribute)) {\n      // If the tag has the \x22dir\x22 attribute specified then its direction is\n      // neutral because it can be safely used in any context.\n      dir \x3d goog.i18n.bidi.Dir.NEUTRAL;\n    } else {\n      dir \x3d null;\n    }\n  }\n\n  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n      result, dir);\n};\n\n\n/**\n * Creates a string with attributes to insert after tagName.\n * @param {string} tagName\n * @param {?Object\x3cstring, ?goog.html.SafeHtml.AttributeValue\x3e\x3d} opt_attributes\n * @return {string} Returns an empty string if there are no attributes, returns\n *     a string starting with a space otherwise.\n * @throws {Error} If attribute value is unsafe for the given tag and attribute.\n * @package\n */\ngoog.html.SafeHtml.stringifyAttributes \x3d function(tagName, opt_attributes) {\n  var result \x3d \x27\x27;\n  if (opt_attributes) {\n    for (var name in opt_attributes) {\n      if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(name)) {\n        throw new Error(\x27Invalid attribute name \x22\x27 + name + \x27\x22.\x27);\n      }\n      var value \x3d opt_attributes[name];\n      if (!goog.isDefAndNotNull(value)) {\n        continue;\n      }\n      result +\x3d\n          \x27 \x27 + goog.html.SafeHtml.getAttrNameAndValue_(tagName, name, value);\n    }\n  }\n  return result;\n};\n\n\n/**\n * @param {!Object\x3cstring, ?goog.html.SafeHtml.AttributeValue\x3e} fixedAttributes\n * @param {!Object\x3cstring, string\x3e} defaultAttributes\n * @param {?Object\x3cstring, ?goog.html.SafeHtml.AttributeValue\x3e\x3d} opt_attributes\n *     Optional attributes passed to create*().\n * @return {!Object\x3cstring, ?goog.html.SafeHtml.AttributeValue\x3e}\n * @throws {Error} If opt_attributes contains an attribute with the same name\n *     as an attribute in fixedAttributes.\n * @package\n */\ngoog.html.SafeHtml.combineAttributes \x3d function(\n    fixedAttributes, defaultAttributes, opt_attributes) {\n  var combinedAttributes \x3d {};\n  var name;\n\n  for (name in fixedAttributes) {\n    goog.asserts.assert(name.toLowerCase() \x3d\x3d name, \x27Must be lower case\x27);\n    combinedAttributes[name] \x3d fixedAttributes[name];\n  }\n  for (name in defaultAttributes) {\n    goog.asserts.assert(name.toLowerCase() \x3d\x3d name, \x27Must be lower case\x27);\n    combinedAttributes[name] \x3d defaultAttributes[name];\n  }\n\n  for (name in opt_attributes) {\n    var nameLower \x3d name.toLowerCase();\n    if (nameLower in fixedAttributes) {\n      throw new Error(\n          \x27Cannot override \x22\x27 + nameLower + \x27\x22 attribute, got \x22\x27 + name +\n          \x27\x22 with value \x22\x27 + opt_attributes[name] + \x27\x22\x27);\n    }\n    if (nameLower in defaultAttributes) {\n      delete combinedAttributes[nameLower];\n    }\n    combinedAttributes[name] \x3d opt_attributes[name];\n  }\n\n  return combinedAttributes;\n};\n\n\n/**\n * A SafeHtml instance corresponding to the HTML doctype: \x22\x3c!DOCTYPE html\x3e\x22.\n * @const {!goog.html.SafeHtml}\n */\ngoog.html.SafeHtml.DOCTYPE_HTML \x3d\n    goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n        \x27\x3c!DOCTYPE html\x3e\x27, goog.i18n.bidi.Dir.NEUTRAL);\n\n\n/**\n * A SafeHtml instance corresponding to the empty string.\n * @const {!goog.html.SafeHtml}\n */\ngoog.html.SafeHtml.EMPTY \x3d\n    goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n        \x27\x27, goog.i18n.bidi.Dir.NEUTRAL);\n\n\n/**\n * A SafeHtml instance corresponding to the \x3cbr\x3e tag.\n * @const {!goog.html.SafeHtml}\n */\ngoog.html.SafeHtml.BR \x3d\n    goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n        \x27\x3cbr\x3e\x27, goog.i18n.bidi.Dir.NEUTRAL);\n\n//# sourceURL\x3dhttps://qs/javascript/closure/html/safehtml.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/dom/safe.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Type-safe wrappers for unsafe DOM APIs.\n *\n * This file provides type-safe wrappers for DOM APIs that can result in\n * cross-site scripting (XSS) vulnerabilities, if the API is supplied with\n * untrusted (attacker-controlled) input.  Instead of plain strings, the type\n * safe wrappers consume values of types from the goog.html package whose\n * contract promises that values are safe to use in the corresponding context.\n *\n * Hence, a program that exclusively uses the wrappers in this file (i.e., whose\n * only reference to security-sensitive raw DOM APIs are in this file) is\n * guaranteed to be free of XSS due to incorrect use of such DOM APIs (modulo\n * correctness of code that produces values of the respective goog.html types,\n * and absent code that violates type safety).\n *\n * For example, assigning to an element\x27s .innerHTML property a string that is\n * derived (even partially) from untrusted input typically results in an XSS\n * vulnerability. The type-safe wrapper goog.dom.safe.setInnerHtml consumes a\n * value of type goog.html.SafeHtml, whose contract states that using its values\n * in a HTML context will not result in XSS. Hence a program that is free of\n * direct assignments to any element\x27s innerHTML property (with the exception of\n * the assignment to .innerHTML in this file) is guaranteed to be free of XSS\n * due to assignment of untrusted strings to the innerHTML property.\n */\n\ngoog.provide(\x27goog.dom.safe\x27);\ngoog.provide(\x27goog.dom.safe.InsertAdjacentHtmlPosition\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.dom.asserts\x27);\ngoog.require(\x27goog.html.SafeHtml\x27);\ngoog.require(\x27goog.html.SafeScript\x27);\ngoog.require(\x27goog.html.SafeStyle\x27);\ngoog.require(\x27goog.html.SafeUrl\x27);\ngoog.require(\x27goog.html.TrustedResourceUrl\x27);\ngoog.require(\x27goog.string\x27);\ngoog.require(\x27goog.string.Const\x27);\n\n\n/** @enum {string} */\ngoog.dom.safe.InsertAdjacentHtmlPosition \x3d {\n  AFTERBEGIN: \x27afterbegin\x27,\n  AFTEREND: \x27afterend\x27,\n  BEFOREBEGIN: \x27beforebegin\x27,\n  BEFOREEND: \x27beforeend\x27\n};\n\n\n/**\n * Inserts known-safe HTML into a Node, at the specified position.\n * @param {!Node} node The node on which to call insertAdjacentHTML.\n * @param {!goog.dom.safe.InsertAdjacentHtmlPosition} position Position where\n *     to insert the HTML.\n * @param {!goog.html.SafeHtml} html The known-safe HTML to insert.\n */\ngoog.dom.safe.insertAdjacentHtml \x3d function(node, position, html) {\n  node.insertAdjacentHTML(position, goog.html.SafeHtml.unwrap(html));\n};\n\n\n/**\n * Tags not allowed in goog.dom.safe.setInnerHtml.\n * @private @const {!Object\x3cstring, boolean\x3e}\n */\ngoog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_ \x3d {\n  \x27MATH\x27: true,\n  \x27SCRIPT\x27: true,\n  \x27STYLE\x27: true,\n  \x27SVG\x27: true,\n  \x27TEMPLATE\x27: true\n};\n\n\n/**\n * Assigns known-safe HTML to an element\x27s innerHTML property.\n * @param {!Element} elem The element whose innerHTML is to be assigned to.\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\n * @throws {Error} If called with one of these tags: math, script, style, svg,\n *     template.\n */\ngoog.dom.safe.setInnerHtml \x3d function(elem, html) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var tagName \x3d elem.tagName.toUpperCase();\n    if (goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[tagName]) {\n      throw new Error(\n          \x27goog.dom.safe.setInnerHtml cannot be used to set content of \x27 +\n          elem.tagName + \x27.\x27);\n    }\n  }\n  elem.innerHTML \x3d goog.html.SafeHtml.unwrap(html);\n};\n\n\n/**\n * Assigns known-safe HTML to an element\x27s outerHTML property.\n * @param {!Element} elem The element whose outerHTML is to be assigned to.\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\n */\ngoog.dom.safe.setOuterHtml \x3d function(elem, html) {\n  elem.outerHTML \x3d goog.html.SafeHtml.unwrap(html);\n};\n\n\n/**\n * Safely assigns a URL a form element\x27s action property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * anchor\x27s href property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setFormElementAction(formEl, url);\n * which is a safe alternative to\n *   formEl.action \x3d url;\n * The latter can result in XSS vulnerabilities if url is a\n * user-/attacker-controlled value.\n *\n * @param {!Element} form The form element whose action property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setFormElementAction \x3d function(form, url) {\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl \x3d url;\n  } else {\n    safeUrl \x3d goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  goog.dom.asserts.assertIsHTMLFormElement(form).action \x3d\n      goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Safely assigns a URL to a button element\x27s formaction property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * anchor\x27s href property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setButtonFormAction(buttonEl, url);\n * which is a safe alternative to\n *   buttonEl.action \x3d url;\n * The latter can result in XSS vulnerabilities if url is a\n * user-/attacker-controlled value.\n *\n * @param {!Element} button The button element whose action property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setButtonFormAction \x3d function(button, url) {\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl \x3d url;\n  } else {\n    safeUrl \x3d goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  goog.dom.asserts.assertIsHTMLButtonElement(button).formAction \x3d\n      goog.html.SafeUrl.unwrap(safeUrl);\n};\n/**\n * Safely assigns a URL to an input element\x27s formaction property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * anchor\x27s href property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setInputFormAction(inputEl, url);\n * which is a safe alternative to\n *   inputEl.action \x3d url;\n * The latter can result in XSS vulnerabilities if url is a\n * user-/attacker-controlled value.\n *\n * @param {!Element} input The input element whose action property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setInputFormAction \x3d function(input, url) {\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl \x3d url;\n  } else {\n    safeUrl \x3d goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  goog.dom.asserts.assertIsHTMLInputElement(input).formAction \x3d\n      goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Sets the given element\x27s style property to the contents of the provided\n * SafeStyle object.\n * @param {!Element} elem\n * @param {!goog.html.SafeStyle} style\n */\ngoog.dom.safe.setStyle \x3d function(elem, style) {\n  elem.style.cssText \x3d goog.html.SafeStyle.unwrap(style);\n};\n\n\n/**\n * Writes known-safe HTML to a document.\n * @param {!Document} doc The document to be written to.\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\n */\ngoog.dom.safe.documentWrite \x3d function(doc, html) {\n  doc.write(goog.html.SafeHtml.unwrap(html));\n};\n\n\n/**\n * Safely assigns a URL to an anchor element\x27s href property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * anchor\x27s href property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setAnchorHref(anchorEl, url);\n * which is a safe alternative to\n *   anchorEl.href \x3d url;\n * The latter can result in XSS vulnerabilities if url is a\n * user-/attacker-controlled value.\n *\n * @param {!HTMLAnchorElement} anchor The anchor element whose href property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setAnchorHref \x3d function(anchor, url) {\n  goog.dom.asserts.assertIsHTMLAnchorElement(anchor);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl \x3d url;\n  } else {\n    safeUrl \x3d goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  anchor.href \x3d goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n\n/**\n * Safely assigns a URL to an image element\x27s src property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * image\x27s src property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * @param {!HTMLImageElement} imageElement The image element whose src property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setImageSrc \x3d function(imageElement, url) {\n  goog.dom.asserts.assertIsHTMLImageElement(imageElement);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl \x3d url;\n  } else {\n    safeUrl \x3d goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  imageElement.src \x3d goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Safely assigns a URL to a video element\x27s src property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * video\x27s src property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * @param {!HTMLVideoElement} videoElement The video element whose src property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setVideoSrc \x3d function(videoElement, url) {\n  goog.dom.asserts.assertIsHTMLVideoElement(videoElement);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl \x3d url;\n  } else {\n    safeUrl \x3d goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  videoElement.src \x3d goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Safely assigns a URL to an embed element\x27s src property.\n *\n * Example usage:\n *   goog.dom.safe.setEmbedSrc(embedEl, url);\n * which is a safe alternative to\n *   embedEl.src \x3d url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLEmbedElement} embed The embed element whose src property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setEmbedSrc \x3d function(embed, url) {\n  goog.dom.asserts.assertIsHTMLEmbedElement(embed);\n  embed.src \x3d goog.html.TrustedResourceUrl.unwrap(url);\n};\n\n\n/**\n * Safely assigns a URL to a frame element\x27s src property.\n *\n * Example usage:\n *   goog.dom.safe.setFrameSrc(frameEl, url);\n * which is a safe alternative to\n *   frameEl.src \x3d url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLFrameElement} frame The frame element whose src property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setFrameSrc \x3d function(frame, url) {\n  goog.dom.asserts.assertIsHTMLFrameElement(frame);\n  frame.src \x3d goog.html.TrustedResourceUrl.unwrap(url);\n};\n\n\n/**\n * Safely assigns a URL to an iframe element\x27s src property.\n *\n * Example usage:\n *   goog.dom.safe.setIframeSrc(iframeEl, url);\n * which is a safe alternative to\n *   iframeEl.src \x3d url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLIFrameElement} iframe The iframe element whose src property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setIframeSrc \x3d function(iframe, url) {\n  goog.dom.asserts.assertIsHTMLIFrameElement(iframe);\n  iframe.src \x3d goog.html.TrustedResourceUrl.unwrap(url);\n};\n\n\n/**\n * Safely assigns HTML to an iframe element\x27s srcdoc property.\n *\n * Example usage:\n *   goog.dom.safe.setIframeSrcdoc(iframeEl, safeHtml);\n * which is a safe alternative to\n *   iframeEl.srcdoc \x3d html;\n * The latter can result in loading untrusted code.\n *\n * @param {!HTMLIFrameElement} iframe The iframe element whose srcdoc property\n *     is to be assigned to.\n * @param {!goog.html.SafeHtml} html The HTML to assign.\n */\ngoog.dom.safe.setIframeSrcdoc \x3d function(iframe, html) {\n  goog.dom.asserts.assertIsHTMLIFrameElement(iframe);\n  iframe.srcdoc \x3d goog.html.SafeHtml.unwrap(html);\n};\n\n\n/**\n * Safely sets a link element\x27s href and rel properties. Whether or not\n * the URL assigned to href has to be a goog.html.TrustedResourceUrl\n * depends on the value of the rel property. If rel contains \x22stylesheet\x22\n * then a TrustedResourceUrl is required.\n *\n * Example usage:\n *   goog.dom.safe.setLinkHrefAndRel(linkEl, url, \x27stylesheet\x27);\n * which is a safe alternative to\n *   linkEl.rel \x3d \x27stylesheet\x27;\n *   linkEl.href \x3d url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLLinkElement} link The link element whose href property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl|!goog.html.TrustedResourceUrl} url The URL\n *     to assign to the href property. Must be a TrustedResourceUrl if the\n *     value assigned to rel contains \x22stylesheet\x22. A string value is\n *     sanitized with goog.html.SafeUrl.sanitize.\n * @param {string} rel The value to assign to the rel property.\n * @throws {Error} if rel contains \x22stylesheet\x22 and url is not a\n *     TrustedResourceUrl\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setLinkHrefAndRel \x3d function(link, url, rel) {\n  goog.dom.asserts.assertIsHTMLLinkElement(link);\n  link.rel \x3d rel;\n  if (goog.string.caseInsensitiveContains(rel, \x27stylesheet\x27)) {\n    goog.asserts.assert(\n        url instanceof goog.html.TrustedResourceUrl,\n        \x27URL must be TrustedResourceUrl because \x22rel\x22 contains \x22stylesheet\x22\x27);\n    link.href \x3d goog.html.TrustedResourceUrl.unwrap(url);\n  } else if (url instanceof goog.html.TrustedResourceUrl) {\n    link.href \x3d goog.html.TrustedResourceUrl.unwrap(url);\n  } else if (url instanceof goog.html.SafeUrl) {\n    link.href \x3d goog.html.SafeUrl.unwrap(url);\n  } else {  // string\n    // SafeUrl.sanitize must return legitimate SafeUrl when passed a string.\n    link.href \x3d\n        goog.html.SafeUrl.sanitizeAssertUnchanged(url).getTypedStringValue();\n  }\n};\n\n\n/**\n * Safely assigns a URL to an object element\x27s data property.\n *\n * Example usage:\n *   goog.dom.safe.setObjectData(objectEl, url);\n * which is a safe alternative to\n *   objectEl.data \x3d url;\n * The latter can result in loading untrusted code unless setit is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLObjectElement} object The object element whose data property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setObjectData \x3d function(object, url) {\n  goog.dom.asserts.assertIsHTMLObjectElement(object);\n  object.data \x3d goog.html.TrustedResourceUrl.unwrap(url);\n};\n\n\n/**\n * Safely assigns a URL to a script element\x27s src property.\n *\n * Example usage:\n *   goog.dom.safe.setScriptSrc(scriptEl, url);\n * which is a safe alternative to\n *   scriptEl.src \x3d url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLScriptElement} script The script element whose src property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setScriptSrc \x3d function(script, url) {\n  goog.dom.asserts.assertIsHTMLScriptElement(script);\n  script.src \x3d goog.html.TrustedResourceUrl.unwrap(url);\n\n  // If CSP nonces are used, propagate them to dynamically created scripts.\n  // This is necessary to allow nonce-based CSPs without \x27strict-dynamic\x27.\n  var nonce \x3d goog.getScriptNonce();\n  if (nonce) {\n    script.nonce \x3d nonce;\n  }\n};\n\n\n/**\n * Safely assigns a value to a script element\x27s content.\n *\n * Example usage:\n *   goog.dom.safe.setScriptContent(scriptEl, content);\n * which is a safe alternative to\n *   scriptEl.text \x3d content;\n * The latter can result in executing untrusted code unless it is ensured that\n * the code is loaded from a trustworthy resource.\n *\n * @param {!HTMLScriptElement} script The script element whose content is being\n *     set.\n * @param {!goog.html.SafeScript} content The content to assign.\n */\ngoog.dom.safe.setScriptContent \x3d function(script, content) {\n  goog.dom.asserts.assertIsHTMLScriptElement(script);\n  script.text \x3d goog.html.SafeScript.unwrap(content);\n\n  // If CSP nonces are used, propagate them to dynamically created scripts.\n  // This is necessary to allow nonce-based CSPs without \x27strict-dynamic\x27.\n  var nonce \x3d goog.getScriptNonce();\n  if (nonce) {\n    script.nonce \x3d nonce;\n  }\n};\n\n\n/**\n * Safely assigns a URL to a Location object\x27s href property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * loc\x27s href property.  If url is of type string however, it is first sanitized\n * using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setLocationHref(document.location, redirectUrl);\n * which is a safe alternative to\n *   document.location.href \x3d redirectUrl;\n * The latter can result in XSS vulnerabilities if redirectUrl is a\n * user-/attacker-controlled value.\n *\n * @param {!Location} loc The Location object whose href property is to be\n *     assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setLocationHref \x3d function(loc, url) {\n  goog.dom.asserts.assertIsLocation(loc);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl \x3d url;\n  } else {\n    safeUrl \x3d goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  loc.href \x3d goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n\n/**\n * Safely replaces the URL of a Location object.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and\n * passed to Location#replace. If url is of type string however, it is\n * first sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.replaceHref(document.location, newUrl);\n * which is a safe alternative to\n *   document.location.replace(newUrl);\n * The latter can result in XSS vulnerabilities if newUrl is a\n * user-/attacker-controlled value.\n *\n * @param {!Location} loc The Location object which is to be replaced.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.replaceLocation \x3d function(loc, url) {\n  goog.dom.asserts.assertIsLocation(loc);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl \x3d url;\n  } else {\n    safeUrl \x3d goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  loc.replace(goog.html.SafeUrl.unwrap(safeUrl));\n};\n\n\n/**\n * Safely opens a URL in a new window (via window.open).\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and passed in to\n * window.open.  If url is of type string however, it is first sanitized\n * using goog.html.SafeUrl.sanitize.\n *\n * Note that this function does not prevent leakages via the referer that is\n * sent by window.open. It is advised to only use this to open 1st party URLs.\n *\n * Example usage:\n *   goog.dom.safe.openInWindow(url);\n * which is a safe alternative to\n *   window.open(url);\n * The latter can result in XSS vulnerabilities if redirectUrl is a\n * user-/attacker-controlled value.\n *\n * @param {string|!goog.html.SafeUrl} url The URL to open.\n * @param {Window\x3d} opt_openerWin Window of which to call the .open() method.\n *     Defaults to the global window.\n * @param {!goog.string.Const\x3d} opt_name Name of the window to open in. Can be\n *     _top, etc as allowed by window.open().\n * @param {string\x3d} opt_specs Comma-separated list of specifications, same as\n *     in window.open().\n * @param {boolean\x3d} opt_replace Whether to replace the current entry in browser\n *     history, same as in window.open().\n * @return {Window} Window the url was opened in.\n */\ngoog.dom.safe.openInWindow \x3d function(\n    url, opt_openerWin, opt_name, opt_specs, opt_replace) {\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl \x3d url;\n  } else {\n    safeUrl \x3d goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  var win \x3d opt_openerWin || window;\n  return win.open(\n      goog.html.SafeUrl.unwrap(safeUrl),\n      // If opt_name is undefined, simply passing that in to open() causes IE to\n      // reuse the current window instead of opening a new one. Thus we pass \x27\x27\n      // in instead, which according to spec opens a new window. See\n      // https://html.spec.whatwg.org/multipage/browsers.html#dom-open .\n      opt_name ? goog.string.Const.unwrap(opt_name) : \x27\x27, opt_specs,\n      opt_replace);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/dom/safe.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/html/uncheckedconversions.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Unchecked conversions to create values of goog.html types from\n * plain strings.  Use of these functions could potentially result in instances\n * of goog.html types that violate their type contracts, and hence result in\n * security vulnerabilties.\n *\n * Therefore, all uses of the methods herein must be carefully security\n * reviewed.  Avoid use of the methods in this file whenever possible; instead\n * prefer to create instances of goog.html types using inherently safe builders\n * or template systems.\n *\n * MOE:begin_intracomment_strip\n * See http://go/safehtml-unchecked for guidelines on using these functions.\n * MOE:end_intracomment_strip\n *\n * MOE:begin_intracomment_strip\n * MAINTAINERS: Use of these functions is detected with a Tricorder analyzer.\n * If adding functions here also add them to analyzer\x27s list at\n * j/c/g/devtools/staticanalysis/pipeline/analyzers/shared/SafeHtmlAnalyzers.java.\n * MOE:end_intracomment_strip\n *\n * @visibility {//javascript/closure/html:approved_for_unchecked_conversion}\n * @visibility {//javascript/closure/bin/sizetests:__pkg__}\n */\n\n\ngoog.provide(\x27goog.html.uncheckedconversions\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.html.SafeHtml\x27);\ngoog.require(\x27goog.html.SafeScript\x27);\ngoog.require(\x27goog.html.SafeStyle\x27);\ngoog.require(\x27goog.html.SafeStyleSheet\x27);\ngoog.require(\x27goog.html.SafeUrl\x27);\ngoog.require(\x27goog.html.TrustedResourceUrl\x27);\ngoog.require(\x27goog.string\x27);\ngoog.require(\x27goog.string.Const\x27);\n\n\n/**\n * Performs an \x22unchecked conversion\x22 to SafeHtml from a plain string that is\n * known to satisfy the SafeHtml type contract.\n *\n * IMPORTANT: Uses of this method must be carefully security-reviewed to ensure\n * that the value of `html` satisfies the SafeHtml type contract in all\n * possible program states.\n *\n * MOE:begin_intracomment_strip\n * See http://go/safehtml-unchecked for guidelines on using these functions.\n * MOE:end_intracomment_strip\n *\n * @param {!goog.string.Const} justification A constant string explaining why\n *     this use of this method is safe. May include a security review ticket\n *     number.\n * @param {string} html A string that is claimed to adhere to the SafeHtml\n *     contract.\n * @param {?goog.i18n.bidi.Dir\x3d} opt_dir The optional directionality of the\n *     SafeHtml to be constructed. A null or undefined value signifies an\n *     unknown directionality.\n * @return {!goog.html.SafeHtml} The value of html, wrapped in a SafeHtml\n *     object.\n */\ngoog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract \x3d\n    function(justification, html, opt_dir) {\n  // unwrap() called inside an assert so that justification can be optimized\n  // away in production code.\n  goog.asserts.assertString(\n      goog.string.Const.unwrap(justification), \x27must provide justification\x27);\n  goog.asserts.assert(\n      !goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)),\n      \x27must provide non-empty justification\x27);\n  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n      html, opt_dir || null);\n};\n\n\n/**\n * Performs an \x22unchecked conversion\x22 to SafeScript from a plain string that is\n * known to satisfy the SafeScript type contract.\n *\n * IMPORTANT: Uses of this method must be carefully security-reviewed to ensure\n * that the value of `script` satisfies the SafeScript type contract in\n * all possible program states.\n *\n * MOE:begin_intracomment_strip\n * See http://go/safehtml-unchecked for guidelines on using these functions.\n * MOE:end_intracomment_strip\n *\n * @param {!goog.string.Const} justification A constant string explaining why\n *     this use of this method is safe. May include a security review ticket\n *     number.\n * @param {string} script The string to wrap as a SafeScript.\n * @return {!goog.html.SafeScript} The value of `script`, wrapped in a\n *     SafeScript object.\n */\ngoog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract \x3d\n    function(justification, script) {\n  // unwrap() called inside an assert so that justification can be optimized\n  // away in production code.\n  goog.asserts.assertString(\n      goog.string.Const.unwrap(justification), \x27must provide justification\x27);\n  goog.asserts.assert(\n      !goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)),\n      \x27must provide non-empty justification\x27);\n  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(\n      script);\n};\n\n\n/**\n * Performs an \x22unchecked conversion\x22 to SafeStyle from a plain string that is\n * known to satisfy the SafeStyle type contract.\n *\n * IMPORTANT: Uses of this method must be carefully security-reviewed to ensure\n * that the value of `style` satisfies the SafeStyle type contract in all\n * possible program states.\n *\n * MOE:begin_intracomment_strip\n * See http://go/safehtml-unchecked for guidelines on using these functions.\n * MOE:end_intracomment_strip\n *\n * @param {!goog.string.Const} justification A constant string explaining why\n *     this use of this method is safe. May include a security review ticket\n *     number.\n * @param {string} style The string to wrap as a SafeStyle.\n * @return {!goog.html.SafeStyle} The value of `style`, wrapped in a\n *     SafeStyle object.\n */\ngoog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract \x3d\n    function(justification, style) {\n  // unwrap() called inside an assert so that justification can be optimized\n  // away in production code.\n  goog.asserts.assertString(\n      goog.string.Const.unwrap(justification), \x27must provide justification\x27);\n  goog.asserts.assert(\n      !goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)),\n      \x27must provide non-empty justification\x27);\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\n      style);\n};\n\n\n/**\n * Performs an \x22unchecked conversion\x22 to SafeStyleSheet from a plain string\n * that is known to satisfy the SafeStyleSheet type contract.\n *\n * IMPORTANT: Uses of this method must be carefully security-reviewed to ensure\n * that the value of `styleSheet` satisfies the SafeStyleSheet type\n * contract in all possible program states.\n *\n * MOE:begin_intracomment_strip\n * See http://go/safehtml-unchecked for guidelines on using these functions.\n * MOE:end_intracomment_strip\n *\n * @param {!goog.string.Const} justification A constant string explaining why\n *     this use of this method is safe. May include a security review ticket\n *     number.\n * @param {string} styleSheet The string to wrap as a SafeStyleSheet.\n * @return {!goog.html.SafeStyleSheet} The value of `styleSheet`, wrapped\n *     in a SafeStyleSheet object.\n */\ngoog.html.uncheckedconversions\n    .safeStyleSheetFromStringKnownToSatisfyTypeContract \x3d function(\n    justification, styleSheet) {\n  // unwrap() called inside an assert so that justification can be optimized\n  // away in production code.\n  goog.asserts.assertString(\n      goog.string.Const.unwrap(justification), \x27must provide justification\x27);\n  goog.asserts.assert(\n      !goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)),\n      \x27must provide non-empty justification\x27);\n  return goog.html.SafeStyleSheet\n      .createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheet);\n};\n\n\n/**\n * Performs an \x22unchecked conversion\x22 to SafeUrl from a plain string that is\n * known to satisfy the SafeUrl type contract.\n *\n * IMPORTANT: Uses of this method must be carefully security-reviewed to ensure\n * that the value of `url` satisfies the SafeUrl type contract in all\n * possible program states.\n *\n * MOE:begin_intracomment_strip\n * See http://go/safehtml-unchecked for guidelines on using these functions.\n * MOE:end_intracomment_strip\n *\n * @param {!goog.string.Const} justification A constant string explaining why\n *     this use of this method is safe. May include a security review ticket\n *     number.\n * @param {string} url The string to wrap as a SafeUrl.\n * @return {!goog.html.SafeUrl} The value of `url`, wrapped in a SafeUrl\n *     object.\n */\ngoog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract \x3d\n    function(justification, url) {\n  // unwrap() called inside an assert so that justification can be optimized\n  // away in production code.\n  goog.asserts.assertString(\n      goog.string.Const.unwrap(justification), \x27must provide justification\x27);\n  goog.asserts.assert(\n      !goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)),\n      \x27must provide non-empty justification\x27);\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n\n\n/**\n * Performs an \x22unchecked conversion\x22 to TrustedResourceUrl from a plain string\n * that is known to satisfy the TrustedResourceUrl type contract.\n *\n * IMPORTANT: Uses of this method must be carefully security-reviewed to ensure\n * that the value of `url` satisfies the TrustedResourceUrl type contract\n * in all possible program states.\n *\n * MOE:begin_intracomment_strip\n * See http://go/safehtml-unchecked for guidelines on using these functions.\n * MOE:end_intracomment_strip\n *\n * @param {!goog.string.Const} justification A constant string explaining why\n *     this use of this method is safe. May include a security review ticket\n *     number.\n * @param {string} url The string to wrap as a TrustedResourceUrl.\n * @return {!goog.html.TrustedResourceUrl} The value of `url`, wrapped in\n *     a TrustedResourceUrl object.\n */\ngoog.html.uncheckedconversions\n    .trustedResourceUrlFromStringKnownToSatisfyTypeContract \x3d function(\n    justification, url) {\n  // unwrap() called inside an assert so that justification can be optimized\n  // away in production code.\n  goog.asserts.assertString(\n      goog.string.Const.unwrap(justification), \x27must provide justification\x27);\n  goog.asserts.assert(\n      !goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)),\n      \x27must provide non-empty justification\x27);\n  return goog.html.TrustedResourceUrl\n      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/html/uncheckedconversions.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/math/math.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Additional mathematical functions.\n * @author pupius@google.com (Daniel Pupius)\n */\n\ngoog.provide(\x27goog.math\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\n\n\n/**\n * Returns a random integer greater than or equal to 0 and less than `a`.\n * @param {number} a  The upper bound for the random integer (exclusive).\n * @return {number} A random integer N such that 0 \x3c\x3d N \x3c a.\n */\ngoog.math.randomInt \x3d function(a) {\n  return Math.floor(Math.random() * a);\n};\n\n\n/**\n * Returns a random number greater than or equal to `a` and less than\n * `b`.\n * @param {number} a  The lower bound for the random number (inclusive).\n * @param {number} b  The upper bound for the random number (exclusive).\n * @return {number} A random number N such that a \x3c\x3d N \x3c b.\n */\ngoog.math.uniformRandom \x3d function(a, b) {\n  return a + Math.random() * (b - a);\n};\n\n\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\ngoog.math.clamp \x3d function(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n};\n\n\n/**\n * The % operator in JavaScript returns the remainder of a / b, but differs from\n * some other languages in that the result will have the same sign as the\n * dividend. For example, -1 % 8 \x3d\x3d -1, whereas in some other languages\n * (such as Python) the result would be 7. This function emulates the more\n * correct modulo behavior, which is useful for certain applications such as\n * calculating an offset index in a circular list.\n *\n * @param {number} a The dividend.\n * @param {number} b The divisor.\n * @return {number} a % b where the result is between 0 and b (either 0 \x3c\x3d x \x3c b\n *     or b \x3c x \x3c\x3d 0, depending on the sign of b).\n */\ngoog.math.modulo \x3d function(a, b) {\n  var r \x3d a % b;\n  // If r and b differ in sign, add b to wrap the result to the correct sign.\n  return (r * b \x3c 0) ? r + b : r;\n};\n\n\n/**\n * Performs linear interpolation between values a and b. Returns the value\n * between a and b proportional to x (when x is between 0 and 1. When x is\n * outside this range, the return value is a linear extrapolation).\n * @param {number} a A number.\n * @param {number} b A number.\n * @param {number} x The proportion between a and b.\n * @return {number} The interpolated value between a and b.\n */\ngoog.math.lerp \x3d function(a, b, x) {\n  return a + x * (b - a);\n};\n\n\n/**\n * Tests whether the two values are equal to each other, within a certain\n * tolerance to adjust for floating point errors.\n * @param {number} a A number.\n * @param {number} b A number.\n * @param {number\x3d} opt_tolerance Optional tolerance range. Defaults\n *     to 0.000001. If specified, should be greater than 0.\n * @return {boolean} Whether `a` and `b` are nearly equal.\n */\ngoog.math.nearlyEquals \x3d function(a, b, opt_tolerance) {\n  return Math.abs(a - b) \x3c\x3d (opt_tolerance || 0.000001);\n};\n\n\n// TODO(jrajeshwar): Rename to normalizeAngle, retaining old name as deprecated\n// alias.\n/**\n * Normalizes an angle to be in range [0-360). Angles outside this range will\n * be normalized to be the equivalent angle with that range.\n * @param {number} angle Angle in degrees.\n * @return {number} Standardized angle.\n */\ngoog.math.standardAngle \x3d function(angle) {\n  return goog.math.modulo(angle, 360);\n};\n\n\n/**\n * Normalizes an angle to be in range [0-2*PI). Angles outside this range will\n * be normalized to be the equivalent angle with that range.\n * @param {number} angle Angle in radians.\n * @return {number} Standardized angle.\n */\ngoog.math.standardAngleInRadians \x3d function(angle) {\n  return goog.math.modulo(angle, 2 * Math.PI);\n};\n\n\n/**\n * Converts degrees to radians.\n * @param {number} angleDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\ngoog.math.toRadians \x3d function(angleDegrees) {\n  return angleDegrees * Math.PI / 180;\n};\n\n\n/**\n * Converts radians to degrees.\n * @param {number} angleRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\ngoog.math.toDegrees \x3d function(angleRadians) {\n  return angleRadians * 180 / Math.PI;\n};\n\n\n/**\n * For a given angle and radius, finds the X portion of the offset.\n * @param {number} degrees Angle in degrees (zero points in +X direction).\n * @param {number} radius Radius.\n * @return {number} The x-distance for the angle and radius.\n */\ngoog.math.angleDx \x3d function(degrees, radius) {\n  return radius * Math.cos(goog.math.toRadians(degrees));\n};\n\n\n/**\n * For a given angle and radius, finds the Y portion of the offset.\n * @param {number} degrees Angle in degrees (zero points in +X direction).\n * @param {number} radius Radius.\n * @return {number} The y-distance for the angle and radius.\n */\ngoog.math.angleDy \x3d function(degrees, radius) {\n  return radius * Math.sin(goog.math.toRadians(degrees));\n};\n\n\n/**\n * Computes the angle between two points (x1,y1) and (x2,y2).\n * Angle zero points in the +X direction, 90 degrees points in the +Y\n * direction (down) and from there we grow clockwise towards 360 degrees.\n * @param {number} x1 x of first point.\n * @param {number} y1 y of first point.\n * @param {number} x2 x of second point.\n * @param {number} y2 y of second point.\n * @return {number} Standardized angle in degrees of the vector from\n *     x1,y1 to x2,y2.\n */\ngoog.math.angle \x3d function(x1, y1, x2, y2) {\n  return goog.math.standardAngle(\n      goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));\n};\n\n\n/**\n * Computes the difference between startAngle and endAngle (angles in degrees).\n * @param {number} startAngle  Start angle in degrees.\n * @param {number} endAngle  End angle in degrees.\n * @return {number} The number of degrees that when added to\n *     startAngle will result in endAngle. Positive numbers mean that the\n *     direction is clockwise. Negative numbers indicate a counter-clockwise\n *     direction.\n *     The shortest route (clockwise vs counter-clockwise) between the angles\n *     is used.\n *     When the difference is 180 degrees, the function returns 180 (not -180)\n *     angleDifference(30, 40) is 10, and angleDifference(40, 30) is -10.\n *     angleDifference(350, 10) is 20, and angleDifference(10, 350) is -20.\n */\ngoog.math.angleDifference \x3d function(startAngle, endAngle) {\n  var d \x3d\n      goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);\n  if (d \x3e 180) {\n    d \x3d d - 360;\n  } else if (d \x3c\x3d -180) {\n    d \x3d 360 + d;\n  }\n  return d;\n};\n\n\n/**\n * Returns the sign of a number as per the \x22sign\x22 or \x22signum\x22 function.\n * @param {number} x The number to take the sign of.\n * @return {number} -1 when negative, 1 when positive, 0 when 0. Preserves\n *     signed zeros and NaN.\n */\ngoog.math.sign \x3d function(x) {\n  if (x \x3e 0) {\n    return 1;\n  }\n  if (x \x3c 0) {\n    return -1;\n  }\n  return x;  // Preserves signed zeros and NaN.\n};\n\n\n/**\n * JavaScript implementation of Longest Common Subsequence problem.\n * http://en.wikipedia.org/wiki/Longest_common_subsequence\n *\n * Returns the longest possible array that is subarray of both of given arrays.\n *\n * @param {IArrayLike\x3cS\x3e} array1 First array of objects.\n * @param {IArrayLike\x3cT\x3e} array2 Second array of objects.\n * @param {Function\x3d} opt_compareFn Function that acts as a custom comparator\n *     for the array ojects. Function should return true if objects are equal,\n *     otherwise false.\n * @param {Function\x3d} opt_collectorFn Function used to decide what to return\n *     as a result subsequence. It accepts 2 arguments: index of common element\n *     in the first array and index in the second. The default function returns\n *     element from the first array.\n * @return {!Array\x3cS|T\x3e} A list of objects that are common to both arrays\n *     such that there is no common subsequence with size greater than the\n *     length of the list.\n * @template S,T\n */\ngoog.math.longestCommonSubsequence \x3d function(\n    array1, array2, opt_compareFn, opt_collectorFn) {\n\n  var compare \x3d opt_compareFn || function(a, b) { return a \x3d\x3d b; };\n\n  var collect \x3d opt_collectorFn || function(i1, i2) { return array1[i1]; };\n\n  var length1 \x3d array1.length;\n  var length2 \x3d array2.length;\n\n  var arr \x3d [];\n  for (var i \x3d 0; i \x3c length1 + 1; i++) {\n    arr[i] \x3d [];\n    arr[i][0] \x3d 0;\n  }\n\n  for (var j \x3d 0; j \x3c length2 + 1; j++) {\n    arr[0][j] \x3d 0;\n  }\n\n  for (i \x3d 1; i \x3c\x3d length1; i++) {\n    for (j \x3d 1; j \x3c\x3d length2; j++) {\n      if (compare(array1[i - 1], array2[j - 1])) {\n        arr[i][j] \x3d arr[i - 1][j - 1] + 1;\n      } else {\n        arr[i][j] \x3d Math.max(arr[i - 1][j], arr[i][j - 1]);\n      }\n    }\n  }\n\n  // Backtracking\n  var result \x3d [];\n  var i \x3d length1, j \x3d length2;\n  while (i \x3e 0 \x26\x26 j \x3e 0) {\n    if (compare(array1[i - 1], array2[j - 1])) {\n      result.unshift(collect(i - 1, j - 1));\n      i--;\n      j--;\n    } else {\n      if (arr[i - 1][j] \x3e arr[i][j - 1]) {\n        i--;\n      } else {\n        j--;\n      }\n    }\n  }\n\n  return result;\n};\n\n\n/**\n * Returns the sum of the arguments.\n * @param {...number} var_args Numbers to add.\n * @return {number} The sum of the arguments (0 if no arguments were provided,\n *     `NaN` if any of the arguments is not a valid number).\n */\ngoog.math.sum \x3d function(var_args) {\n  return /** @type {number} */ (\n      goog.array.reduce(\n          arguments, function(sum, value) { return sum + value; }, 0));\n};\n\n\n/**\n * Returns the arithmetic mean of the arguments.\n * @param {...number} var_args Numbers to average.\n * @return {number} The average of the arguments (`NaN` if no arguments\n *     were provided or any of the arguments is not a valid number).\n */\ngoog.math.average \x3d function(var_args) {\n  return goog.math.sum.apply(null, arguments) / arguments.length;\n};\n\n\n/**\n * Returns the unbiased sample variance of the arguments. For a definition,\n * see e.g. http://en.wikipedia.org/wiki/Variance\n * @param {...number} var_args Number samples to analyze.\n * @return {number} The unbiased sample variance of the arguments (0 if fewer\n *     than two samples were provided, or `NaN` if any of the samples is\n *     not a valid number).\n */\ngoog.math.sampleVariance \x3d function(var_args) {\n  var sampleSize \x3d arguments.length;\n  if (sampleSize \x3c 2) {\n    return 0;\n  }\n\n  var mean \x3d goog.math.average.apply(null, arguments);\n  var variance \x3d\n      goog.math.sum.apply(null, goog.array.map(arguments, function(val) {\n        return Math.pow(val - mean, 2);\n      })) / (sampleSize - 1);\n\n  return variance;\n};\n\n\n/**\n * Returns the sample standard deviation of the arguments.  For a definition of\n * sample standard deviation, see e.g.\n * http://en.wikipedia.org/wiki/Standard_deviation\n * @param {...number} var_args Number samples to analyze.\n * @return {number} The sample standard deviation of the arguments (0 if fewer\n *     than two samples were provided, or `NaN` if any of the samples is\n *     not a valid number).\n */\ngoog.math.standardDeviation \x3d function(var_args) {\n  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));\n};\n\n\n/**\n * Returns whether the supplied number represents an integer, i.e. that is has\n * no fractional component.  No range-checking is performed on the number.\n * @param {number} num The number to test.\n * @return {boolean} Whether `num` is an integer.\n */\ngoog.math.isInt \x3d function(num) {\n  return isFinite(num) \x26\x26 num % 1 \x3d\x3d 0;\n};\n\n\n/**\n * Returns whether the supplied number is finite and not NaN.\n * @param {number} num The number to test.\n * @return {boolean} Whether `num` is a finite number.\n * @deprecated Use {@link isFinite} instead.\n */\ngoog.math.isFiniteNumber \x3d function(num) {\n  return isFinite(num);\n};\n\n\n/**\n * @param {number} num The number to test.\n * @return {boolean} Whether it is negative zero.\n */\ngoog.math.isNegativeZero \x3d function(num) {\n  return num \x3d\x3d 0 \x26\x26 1 / num \x3c 0;\n};\n\n\n/**\n * Returns the precise value of floor(log10(num)).\n * Simpler implementations didn\x27t work because of floating point rounding\n * errors. For example\n * \x3cul\x3e\n * \x3cli\x3eMath.floor(Math.log(num) / Math.LN10) is off by one for num \x3d\x3d 1e+3.\n * \x3cli\x3eMath.floor(Math.log(num) * Math.LOG10E) is off by one for num \x3d\x3d 1e+15.\n * \x3cli\x3eMath.floor(Math.log10(num)) is off by one for num \x3d\x3d 1e+15 - 1.\n * \x3c/ul\x3e\n * @param {number} num A floating point number.\n * @return {number} Its logarithm to base 10 rounded down to the nearest\n *     integer if num \x3e 0. -Infinity if num \x3d\x3d 0. NaN if num \x3c 0.\n */\ngoog.math.log10Floor \x3d function(num) {\n  if (num \x3e 0) {\n    var x \x3d Math.round(Math.log(num) * Math.LOG10E);\n    return x - (parseFloat(\x271e\x27 + x) \x3e num ? 1 : 0);\n  }\n  return num \x3d\x3d 0 ? -Infinity : NaN;\n};\n\n\n/**\n * A tweaked variant of `Math.floor` which tolerates if the passed number\n * is infinitesimally smaller than the closest integer. It often happens with\n * the results of floating point calculations because of the finite precision\n * of the intermediate results. For example {@code Math.floor(Math.log(1000) /\n * Math.LN10) \x3d\x3d 2}, not 3 as one would expect.\n * @param {number} num A number.\n * @param {number\x3d} opt_epsilon An infinitesimally small positive number, the\n *     rounding error to tolerate.\n * @return {number} The largest integer less than or equal to `num`.\n */\ngoog.math.safeFloor \x3d function(num, opt_epsilon) {\n  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon \x3e 0);\n  return Math.floor(num + (opt_epsilon || 2e-15));\n};\n\n\n/**\n * A tweaked variant of `Math.ceil`. See `goog.math.safeFloor` for\n * details.\n * @param {number} num A number.\n * @param {number\x3d} opt_epsilon An infinitesimally small positive number, the\n *     rounding error to tolerate.\n * @return {number} The smallest integer greater than or equal to `num`.\n */\ngoog.math.safeCeil \x3d function(num, opt_epsilon) {\n  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon \x3e 0);\n  return Math.ceil(num - (opt_epsilon || 2e-15));\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/math/math.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/math/coordinate.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A utility class for representing two-dimensional positions.\n * @author pupius@google.com (Daniel Pupius)\n */\n\n\ngoog.provide(\x27goog.math.Coordinate\x27);\n\ngoog.require(\x27goog.math\x27);\n\n\n\n/**\n * Class for representing coordinates and positions.\n * @param {number\x3d} opt_x Left, defaults to 0.\n * @param {number\x3d} opt_y Top, defaults to 0.\n * @struct\n * @constructor\n */\ngoog.math.Coordinate \x3d function(opt_x, opt_y) {\n  /**\n   * X-value\n   * @type {number}\n   */\n  this.x \x3d goog.isDef(opt_x) ? opt_x : 0;\n\n  /**\n   * Y-value\n   * @type {number}\n   */\n  this.y \x3d goog.isDef(opt_y) ? opt_y : 0;\n};\n\n\n/**\n * Returns a new copy of the coordinate.\n * @return {!goog.math.Coordinate} A clone of this coordinate.\n */\ngoog.math.Coordinate.prototype.clone \x3d function() {\n  return new goog.math.Coordinate(this.x, this.y);\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Returns a nice string representing the coordinate.\n   * @return {string} In the form (50, 73).\n   * @override\n   */\n  goog.math.Coordinate.prototype.toString \x3d function() {\n    return \x27(\x27 + this.x + \x27, \x27 + this.y + \x27)\x27;\n  };\n}\n\n\n/**\n * Returns whether the specified value is equal to this coordinate.\n * @param {*} other Some other value.\n * @return {boolean} Whether the specified value is equal to this coordinate.\n */\ngoog.math.Coordinate.prototype.equals \x3d function(other) {\n  return other instanceof goog.math.Coordinate \x26\x26\n      goog.math.Coordinate.equals(this, other);\n};\n\n\n/**\n * Compares coordinates for equality.\n * @param {goog.math.Coordinate} a A Coordinate.\n * @param {goog.math.Coordinate} b A Coordinate.\n * @return {boolean} True iff the coordinates are equal, or if both are null.\n */\ngoog.math.Coordinate.equals \x3d function(a, b) {\n  if (a \x3d\x3d b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  return a.x \x3d\x3d b.x \x26\x26 a.y \x3d\x3d b.y;\n};\n\n\n/**\n * Returns the distance between two coordinates.\n * @param {!goog.math.Coordinate} a A Coordinate.\n * @param {!goog.math.Coordinate} b A Coordinate.\n * @return {number} The distance between `a` and `b`.\n */\ngoog.math.Coordinate.distance \x3d function(a, b) {\n  var dx \x3d a.x - b.x;\n  var dy \x3d a.y - b.y;\n  return Math.sqrt(dx * dx + dy * dy);\n};\n\n\n/**\n * Returns the magnitude of a coordinate.\n * @param {!goog.math.Coordinate} a A Coordinate.\n * @return {number} The distance between the origin and `a`.\n */\ngoog.math.Coordinate.magnitude \x3d function(a) {\n  return Math.sqrt(a.x * a.x + a.y * a.y);\n};\n\n\n/**\n * Returns the angle from the origin to a coordinate.\n * @param {!goog.math.Coordinate} a A Coordinate.\n * @return {number} The angle, in degrees, clockwise from the positive X\n *     axis to `a`.\n */\ngoog.math.Coordinate.azimuth \x3d function(a) {\n  return goog.math.angle(0, 0, a.x, a.y);\n};\n\n\n/**\n * Returns the squared distance between two coordinates. Squared distances can\n * be used for comparisons when the actual value is not required.\n *\n * Performance note: eliminating the square root is an optimization often used\n * in lower-level languages, but the speed difference is not nearly as\n * pronounced in JavaScript (only a few percent.)\n *\n * @param {!goog.math.Coordinate} a A Coordinate.\n * @param {!goog.math.Coordinate} b A Coordinate.\n * @return {number} The squared distance between `a` and `b`.\n */\ngoog.math.Coordinate.squaredDistance \x3d function(a, b) {\n  var dx \x3d a.x - b.x;\n  var dy \x3d a.y - b.y;\n  return dx * dx + dy * dy;\n};\n\n\n/**\n * Returns the difference between two coordinates as a new\n * goog.math.Coordinate.\n * @param {!goog.math.Coordinate} a A Coordinate.\n * @param {!goog.math.Coordinate} b A Coordinate.\n * @return {!goog.math.Coordinate} A Coordinate representing the difference\n *     between `a` and `b`.\n */\ngoog.math.Coordinate.difference \x3d function(a, b) {\n  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);\n};\n\n\n/**\n * Returns the sum of two coordinates as a new goog.math.Coordinate.\n * @param {!goog.math.Coordinate} a A Coordinate.\n * @param {!goog.math.Coordinate} b A Coordinate.\n * @return {!goog.math.Coordinate} A Coordinate representing the sum of the two\n *     coordinates.\n */\ngoog.math.Coordinate.sum \x3d function(a, b) {\n  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);\n};\n\n\n/**\n * Rounds the x and y fields to the next larger integer values.\n * @return {!goog.math.Coordinate} This coordinate with ceil\x27d fields.\n */\ngoog.math.Coordinate.prototype.ceil \x3d function() {\n  this.x \x3d Math.ceil(this.x);\n  this.y \x3d Math.ceil(this.y);\n  return this;\n};\n\n\n/**\n * Rounds the x and y fields to the next smaller integer values.\n * @return {!goog.math.Coordinate} This coordinate with floored fields.\n */\ngoog.math.Coordinate.prototype.floor \x3d function() {\n  this.x \x3d Math.floor(this.x);\n  this.y \x3d Math.floor(this.y);\n  return this;\n};\n\n\n/**\n * Rounds the x and y fields to the nearest integer values.\n * @return {!goog.math.Coordinate} This coordinate with rounded fields.\n */\ngoog.math.Coordinate.prototype.round \x3d function() {\n  this.x \x3d Math.round(this.x);\n  this.y \x3d Math.round(this.y);\n  return this;\n};\n\n\n/**\n * Translates this box by the given offsets. If a `goog.math.Coordinate`\n * is given, then the x and y values are translated by the coordinate\x27s x and y.\n * Otherwise, x and y are translated by `tx` and `opt_ty`\n * respectively.\n * @param {number|goog.math.Coordinate} tx The value to translate x by or the\n *     the coordinate to translate this coordinate by.\n * @param {number\x3d} opt_ty The value to translate y by.\n * @return {!goog.math.Coordinate} This coordinate after translating.\n */\ngoog.math.Coordinate.prototype.translate \x3d function(tx, opt_ty) {\n  if (tx instanceof goog.math.Coordinate) {\n    this.x +\x3d tx.x;\n    this.y +\x3d tx.y;\n  } else {\n    this.x +\x3d Number(tx);\n    if (goog.isNumber(opt_ty)) {\n      this.y +\x3d opt_ty;\n    }\n  }\n  return this;\n};\n\n\n/**\n * Scales this coordinate by the given scale factors. The x and y values are\n * scaled by `sx` and `opt_sy` respectively.  If `opt_sy`\n * is not given, then `sx` is used for both x and y.\n * @param {number} sx The scale factor to use for the x dimension.\n * @param {number\x3d} opt_sy The scale factor to use for the y dimension.\n * @return {!goog.math.Coordinate} This coordinate after scaling.\n */\ngoog.math.Coordinate.prototype.scale \x3d function(sx, opt_sy) {\n  var sy \x3d goog.isNumber(opt_sy) ? opt_sy : sx;\n  this.x *\x3d sx;\n  this.y *\x3d sy;\n  return this;\n};\n\n\n/**\n * Rotates this coordinate clockwise about the origin (or, optionally, the given\n * center) by the given angle, in radians.\n * @param {number} radians The angle by which to rotate this coordinate\n *     clockwise about the given center, in radians.\n * @param {!goog.math.Coordinate\x3d} opt_center The center of rotation. Defaults\n *     to (0, 0) if not given.\n */\ngoog.math.Coordinate.prototype.rotateRadians \x3d function(radians, opt_center) {\n  var center \x3d opt_center || new goog.math.Coordinate(0, 0);\n\n  var x \x3d this.x;\n  var y \x3d this.y;\n  var cos \x3d Math.cos(radians);\n  var sin \x3d Math.sin(radians);\n\n  this.x \x3d (x - center.x) * cos - (y - center.y) * sin + center.x;\n  this.y \x3d (x - center.x) * sin + (y - center.y) * cos + center.y;\n};\n\n\n/**\n * Rotates this coordinate clockwise about the origin (or, optionally, the given\n * center) by the given angle, in degrees.\n * @param {number} degrees The angle by which to rotate this coordinate\n *     clockwise about the given center, in degrees.\n * @param {!goog.math.Coordinate\x3d} opt_center The center of rotation. Defaults\n *     to (0, 0) if not given.\n */\ngoog.math.Coordinate.prototype.rotateDegrees \x3d function(degrees, opt_center) {\n  this.rotateRadians(goog.math.toRadians(degrees), opt_center);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/math/coordinate.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/math/size.js";
eval("// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A utility class for representing two-dimensional sizes.\n * @author pupius@google.com (Dan Pupius)\n * @author brenneman@google.com (Shawn Brenneman)\n */\n\n\ngoog.provide(\x27goog.math.Size\x27);\n\n\n\n/**\n * Class for representing sizes consisting of a width and height. Undefined\n * width and height support is deprecated and results in compiler warning.\n * @param {number} width Width.\n * @param {number} height Height.\n * @struct\n * @constructor\n */\ngoog.math.Size \x3d function(width, height) {\n  /**\n   * Width\n   * @type {number}\n   */\n  this.width \x3d width;\n\n  /**\n   * Height\n   * @type {number}\n   */\n  this.height \x3d height;\n};\n\n\n/**\n * Compares sizes for equality.\n * @param {goog.math.Size} a A Size.\n * @param {goog.math.Size} b A Size.\n * @return {boolean} True iff the sizes have equal widths and equal\n *     heights, or if both are null.\n */\ngoog.math.Size.equals \x3d function(a, b) {\n  if (a \x3d\x3d b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  return a.width \x3d\x3d b.width \x26\x26 a.height \x3d\x3d b.height;\n};\n\n\n/**\n * @return {!goog.math.Size} A new copy of the Size.\n */\ngoog.math.Size.prototype.clone \x3d function() {\n  return new goog.math.Size(this.width, this.height);\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Returns a nice string representing size.\n   * @return {string} In the form (50 x 73).\n   * @override\n   */\n  goog.math.Size.prototype.toString \x3d function() {\n    return \x27(\x27 + this.width + \x27 x \x27 + this.height + \x27)\x27;\n  };\n}\n\n\n/**\n * @return {number} The longer of the two dimensions in the size.\n */\ngoog.math.Size.prototype.getLongest \x3d function() {\n  return Math.max(this.width, this.height);\n};\n\n\n/**\n * @return {number} The shorter of the two dimensions in the size.\n */\ngoog.math.Size.prototype.getShortest \x3d function() {\n  return Math.min(this.width, this.height);\n};\n\n\n/**\n * @return {number} The area of the size (width * height).\n */\ngoog.math.Size.prototype.area \x3d function() {\n  return this.width * this.height;\n};\n\n\n/**\n * @return {number} The perimeter of the size (width + height) * 2.\n */\ngoog.math.Size.prototype.perimeter \x3d function() {\n  return (this.width + this.height) * 2;\n};\n\n\n/**\n * @return {number} The ratio of the size\x27s width to its height.\n */\ngoog.math.Size.prototype.aspectRatio \x3d function() {\n  return this.width / this.height;\n};\n\n\n/**\n * @return {boolean} True if the size has zero area, false if both dimensions\n *     are non-zero numbers.\n */\ngoog.math.Size.prototype.isEmpty \x3d function() {\n  return !this.area();\n};\n\n\n/**\n * Clamps the width and height parameters upward to integer values.\n * @return {!goog.math.Size} This size with ceil\x27d components.\n */\ngoog.math.Size.prototype.ceil \x3d function() {\n  this.width \x3d Math.ceil(this.width);\n  this.height \x3d Math.ceil(this.height);\n  return this;\n};\n\n\n/**\n * @param {!goog.math.Size} target The target size.\n * @return {boolean} True if this Size is the same size or smaller than the\n *     target size in both dimensions.\n */\ngoog.math.Size.prototype.fitsInside \x3d function(target) {\n  return this.width \x3c\x3d target.width \x26\x26 this.height \x3c\x3d target.height;\n};\n\n\n/**\n * Clamps the width and height parameters downward to integer values.\n * @return {!goog.math.Size} This size with floored components.\n */\ngoog.math.Size.prototype.floor \x3d function() {\n  this.width \x3d Math.floor(this.width);\n  this.height \x3d Math.floor(this.height);\n  return this;\n};\n\n\n/**\n * Rounds the width and height parameters to integer values.\n * @return {!goog.math.Size} This size with rounded components.\n */\ngoog.math.Size.prototype.round \x3d function() {\n  this.width \x3d Math.round(this.width);\n  this.height \x3d Math.round(this.height);\n  return this;\n};\n\n\n/**\n * Scales this size by the given scale factors. The width and height are scaled\n * by `sx` and `opt_sy` respectively.  If `opt_sy` is not\n * given, then `sx` is used for both the width and height.\n * @param {number} sx The scale factor to use for the width.\n * @param {number\x3d} opt_sy The scale factor to use for the height.\n * @return {!goog.math.Size} This Size object after scaling.\n */\ngoog.math.Size.prototype.scale \x3d function(sx, opt_sy) {\n  var sy \x3d goog.isNumber(opt_sy) ? opt_sy : sx;\n  this.width *\x3d sx;\n  this.height *\x3d sy;\n  return this;\n};\n\n\n/**\n * Uniformly scales the size to perfectly cover the dimensions of a given size.\n * If the size is already larger than the target, it will be scaled down to the\n * minimum size at which it still covers the entire target. The original aspect\n * ratio will be preserved.\n *\n * This function assumes that both Sizes contain strictly positive dimensions.\n * @param {!goog.math.Size} target The target size.\n * @return {!goog.math.Size} This Size object, after optional scaling.\n */\ngoog.math.Size.prototype.scaleToCover \x3d function(target) {\n  var s \x3d this.aspectRatio() \x3c\x3d target.aspectRatio() ?\n      target.width / this.width :\n      target.height / this.height;\n\n  return this.scale(s);\n};\n\n\n/**\n * Uniformly scales the size to fit inside the dimensions of a given size. The\n * original aspect ratio will be preserved.\n *\n * This function assumes that both Sizes contain strictly positive dimensions.\n * @param {!goog.math.Size} target The target size.\n * @return {!goog.math.Size} This Size object, after optional scaling.\n */\ngoog.math.Size.prototype.scaleToFit \x3d function(target) {\n  var s \x3d this.aspectRatio() \x3e target.aspectRatio() ?\n      target.width / this.width :\n      target.height / this.height;\n\n  return this.scale(s);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/math/size.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/dom/dom.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utilities for manipulating the browser\x27s Document Object Model\n * Inspiration taken *heavily* from mochikit (http://mochikit.com/).\n *\n * You can use {@link goog.dom.DomHelper} to create new dom helpers that refer\n * to a different document object.  This is useful if you are working with\n * frames or multiple windows.\n *\n * @author pupius@google.com (Daniel Pupius)\n * @author arv@google.com (Erik Arvidsson)\n * @suppress {strictMissingProperties}\n */\n\n\n// TODO(arv): Rename/refactor getTextContent and getRawTextContent. The problem\n// is that getTextContent should mimic the DOM3 textContent. We should add a\n// getInnerText (or getText) which tries to return the visible text, innerText.\n\n\ngoog.provide(\x27goog.dom\x27);\ngoog.provide(\x27goog.dom.Appendable\x27);\ngoog.provide(\x27goog.dom.DomHelper\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.dom.BrowserFeature\x27);\ngoog.require(\x27goog.dom.NodeType\x27);\ngoog.require(\x27goog.dom.TagName\x27);\ngoog.require(\x27goog.dom.safe\x27);\ngoog.require(\x27goog.html.SafeHtml\x27);\ngoog.require(\x27goog.html.uncheckedconversions\x27);\ngoog.require(\x27goog.math.Coordinate\x27);\ngoog.require(\x27goog.math.Size\x27);\ngoog.require(\x27goog.object\x27);\ngoog.require(\x27goog.string\x27);\ngoog.require(\x27goog.string.Unicode\x27);\ngoog.require(\x27goog.userAgent\x27);\n\n\n/**\n * @define {boolean} Whether we know at compile time that the browser is in\n * quirks mode.\n */\ngoog.define(\x27goog.dom.ASSUME_QUIRKS_MODE\x27, false);\n\n\n/**\n * @define {boolean} Whether we know at compile time that the browser is in\n * standards compliance mode.\n */\ngoog.define(\x27goog.dom.ASSUME_STANDARDS_MODE\x27, false);\n\n\n/**\n * Whether we know the compatibility mode at compile time.\n * @type {boolean}\n * @private\n */\ngoog.dom.COMPAT_MODE_KNOWN_ \x3d\n    goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;\n\n\n/**\n * Gets the DomHelper object for the document where the element resides.\n * @param {(Node|Window)\x3d} opt_element If present, gets the DomHelper for this\n *     element.\n * @return {!goog.dom.DomHelper} The DomHelper.\n */\ngoog.dom.getDomHelper \x3d function(opt_element) {\n  return opt_element ?\n      new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) :\n      (goog.dom.defaultDomHelper_ ||\n       (goog.dom.defaultDomHelper_ \x3d new goog.dom.DomHelper()));\n};\n\n\n/**\n * Cached default DOM helper.\n * @type {!goog.dom.DomHelper|undefined}\n * @private\n */\ngoog.dom.defaultDomHelper_;\n\n\n/**\n * Gets the document object being used by the dom library.\n * @return {!Document} Document object.\n */\ngoog.dom.getDocument \x3d function() {\n  return document;\n};\n\n\n/**\n * Gets an element from the current document by element id.\n *\n * If an Element is passed in, it is returned.\n *\n * @param {string|Element} element Element ID or a DOM node.\n * @return {Element} The element with the given ID, or the node passed in.\n */\ngoog.dom.getElement \x3d function(element) {\n  return goog.dom.getElementHelper_(document, element);\n};\n\n\n/**\n * Gets an element by id from the given document (if present).\n * If an element is given, it is returned.\n * @param {!Document} doc\n * @param {string|Element} element Element ID or a DOM node.\n * @return {Element} The resulting element.\n * @private\n */\ngoog.dom.getElementHelper_ \x3d function(doc, element) {\n  return goog.isString(element) ? doc.getElementById(element) : element;\n};\n\n\n/**\n * Gets an element by id, asserting that the element is found.\n *\n * This is used when an element is expected to exist, and should fail with\n * an assertion error if it does not (if assertions are enabled).\n *\n * @param {string} id Element ID.\n * @return {!Element} The element with the given ID, if it exists.\n */\ngoog.dom.getRequiredElement \x3d function(id) {\n  return goog.dom.getRequiredElementHelper_(document, id);\n};\n\n\n/**\n * Helper function for getRequiredElementHelper functions, both static and\n * on DomHelper.  Asserts the element with the given id exists.\n * @param {!Document} doc\n * @param {string} id\n * @return {!Element} The element with the given ID, if it exists.\n * @private\n */\ngoog.dom.getRequiredElementHelper_ \x3d function(doc, id) {\n  // To prevent users passing in Elements as is permitted in getElement().\n  goog.asserts.assertString(id);\n  var element \x3d goog.dom.getElementHelper_(doc, id);\n  element \x3d\n      goog.asserts.assertElement(element, \x27No element found with id: \x27 + id);\n  return element;\n};\n\n\n/**\n * Alias for getElement.\n * @param {string|Element} element Element ID or a DOM node.\n * @return {Element} The element with the given ID, or the node passed in.\n * @deprecated Use {@link goog.dom.getElement} instead.\n */\ngoog.dom.$ \x3d goog.dom.getElement;\n\n\n/**\n * Gets elements by tag name.\n * @param {!goog.dom.TagName\x3cT\x3e} tagName\n * @param {(!Document|!Element)\x3d} opt_parent Parent element or document where to\n *     look for elements. Defaults to document.\n * @return {!NodeList\x3cR\x3e} List of elements. The members of the list are\n *     {!Element} if tagName is not a member of goog.dom.TagName or more\n *     specific types if it is (e.g. {!HTMLAnchorElement} for\n *     goog.dom.TagName.A).\n * @template T\n * @template R :\x3d cond(isUnknown(T), \x27Element\x27, T) \x3d:\n */\ngoog.dom.getElementsByTagName \x3d function(tagName, opt_parent) {\n  var parent \x3d opt_parent || document;\n  return parent.getElementsByTagName(String(tagName));\n};\n\n\n/**\n * Looks up elements by both tag and class name, using browser native functions\n * (`querySelectorAll`, `getElementsByTagName` or\n * `getElementsByClassName`) where possible. This function\n * is a useful, if limited, way of collecting a list of DOM elements\n * with certain characteristics.  `goog.dom.query` offers a\n * more powerful and general solution which allows matching on CSS3\n * selector expressions, but at increased cost in code size. If all you\n * need is particular tags belonging to a single class, this function\n * is fast and sleek.\n *\n * Note that tag names are case sensitive in the SVG namespace, and this\n * function converts opt_tag to uppercase for comparisons. For queries in the\n * SVG namespace you should use querySelector or querySelectorAll instead.\n * https://bugzilla.mozilla.org/show_bug.cgi?id\x3d963870\n * https://bugs.webkit.org/show_bug.cgi?id\x3d83438\n *\n * @see {goog.dom.query}\n *\n * @param {(string|?goog.dom.TagName\x3cT\x3e)\x3d} opt_tag Element tag name.\n * @param {?string\x3d} opt_class Optional class name.\n * @param {(Document|Element)\x3d} opt_el Optional element to look in.\n * @return {!IArrayLike\x3cR\x3e} Array-like list of elements (only a length property\n *     and numerical indices are guaranteed to exist). The members of the array\n *     are {!Element} if opt_tag is not a member of goog.dom.TagName or more\n *     specific types if it is (e.g. {!HTMLAnchorElement} for\n *     goog.dom.TagName.A).\n * @template T\n * @template R :\x3d cond(isUnknown(T), \x27Element\x27, T) \x3d:\n */\ngoog.dom.getElementsByTagNameAndClass \x3d function(opt_tag, opt_class, opt_el) {\n  return goog.dom.getElementsByTagNameAndClass_(\n      document, opt_tag, opt_class, opt_el);\n};\n\n\n/**\n * Gets the first element matching the tag and the class.\n *\n * @param {(string|?goog.dom.TagName\x3cT\x3e)\x3d} opt_tag Element tag name.\n * @param {?string\x3d} opt_class Optional class name.\n * @param {(Document|Element)\x3d} opt_el Optional element to look in.\n * @return {?R} Reference to a DOM node. The return type is {?Element} if\n *     tagName is a string or a more specific type if it is a member of\n *     goog.dom.TagName (e.g. {?HTMLAnchorElement} for goog.dom.TagName.A).\n * @template T\n * @template R :\x3d cond(isUnknown(T), \x27Element\x27, T) \x3d:\n */\ngoog.dom.getElementByTagNameAndClass \x3d function(opt_tag, opt_class, opt_el) {\n  return goog.dom.getElementByTagNameAndClass_(\n      document, opt_tag, opt_class, opt_el);\n};\n\n\n/**\n * Returns a static, array-like list of the elements with the provided\n * className.\n * @see {goog.dom.query}\n * @param {string} className the name of the class to look for.\n * @param {(Document|Element)\x3d} opt_el Optional element to look in.\n * @return {!IArrayLike\x3c!Element\x3e} The items found with the class name provided.\n */\ngoog.dom.getElementsByClass \x3d function(className, opt_el) {\n  var parent \x3d opt_el || document;\n  if (goog.dom.canUseQuerySelector_(parent)) {\n    return parent.querySelectorAll(\x27.\x27 + className);\n  }\n  return goog.dom.getElementsByTagNameAndClass_(\n      document, \x27*\x27, className, opt_el);\n};\n\n\n/**\n * Returns the first element with the provided className.\n * @see {goog.dom.query}\n * @param {string} className the name of the class to look for.\n * @param {Element|Document\x3d} opt_el Optional element to look in.\n * @return {Element} The first item with the class name provided.\n */\ngoog.dom.getElementByClass \x3d function(className, opt_el) {\n  var parent \x3d opt_el || document;\n  var retVal \x3d null;\n  if (parent.getElementsByClassName) {\n    retVal \x3d parent.getElementsByClassName(className)[0];\n  } else {\n    retVal \x3d\n        goog.dom.getElementByTagNameAndClass_(document, \x27*\x27, className, opt_el);\n  }\n  return retVal || null;\n};\n\n\n/**\n * Ensures an element with the given className exists, and then returns the\n * first element with the provided className.\n * @see {goog.dom.query}\n * @param {string} className the name of the class to look for.\n * @param {!Element|!Document\x3d} opt_root Optional element or document to look\n *     in.\n * @return {!Element} The first item with the class name provided.\n * @throws {goog.asserts.AssertionError} Thrown if no element is found.\n */\ngoog.dom.getRequiredElementByClass \x3d function(className, opt_root) {\n  var retValue \x3d goog.dom.getElementByClass(className, opt_root);\n  return goog.asserts.assert(\n      retValue, \x27No element found with className: \x27 + className);\n};\n\n\n/**\n * Prefer the standardized (http://www.w3.org/TR/selectors-api/), native and\n * fast W3C Selectors API.\n * @param {!(Element|Document)} parent The parent document object.\n * @return {boolean} whether or not we can use parent.querySelector* APIs.\n * @private\n */\ngoog.dom.canUseQuerySelector_ \x3d function(parent) {\n  return !!(parent.querySelectorAll \x26\x26 parent.querySelector);\n};\n\n\n/**\n * Helper for `getElementsByTagNameAndClass`.\n * @param {!Document} doc The document to get the elements in.\n * @param {(string|?goog.dom.TagName\x3cT\x3e)\x3d} opt_tag Element tag name.\n * @param {?string\x3d} opt_class Optional class name.\n * @param {(Document|Element)\x3d} opt_el Optional element to look in.\n * @return {!IArrayLike\x3cR\x3e} Array-like list of elements (only a length property\n *     and numerical indices are guaranteed to exist). The members of the array\n *     are {!Element} if opt_tag is not a member of goog.dom.TagName or more\n *     specific types if it is (e.g. {!HTMLAnchorElement} for\n *     goog.dom.TagName.A).\n * @template T\n * @template R :\x3d cond(isUnknown(T), \x27Element\x27, T) \x3d:\n * @private\n */\ngoog.dom.getElementsByTagNameAndClass_ \x3d function(\n    doc, opt_tag, opt_class, opt_el) {\n  var parent \x3d opt_el || doc;\n  var tagName \x3d\n      (opt_tag \x26\x26 opt_tag !\x3d \x27*\x27) ? String(opt_tag).toUpperCase() : \x27\x27;\n\n  if (goog.dom.canUseQuerySelector_(parent) \x26\x26 (tagName || opt_class)) {\n    var query \x3d tagName + (opt_class ? \x27.\x27 + opt_class : \x27\x27);\n    return parent.querySelectorAll(query);\n  }\n\n  // Use the native getElementsByClassName if available, under the assumption\n  // that even when the tag name is specified, there will be fewer elements to\n  // filter through when going by class than by tag name\n  if (opt_class \x26\x26 parent.getElementsByClassName) {\n    var els \x3d parent.getElementsByClassName(opt_class);\n\n    if (tagName) {\n      var arrayLike \x3d {};\n      var len \x3d 0;\n\n      // Filter for specific tags if requested.\n      for (var i \x3d 0, el; el \x3d els[i]; i++) {\n        if (tagName \x3d\x3d el.nodeName) {\n          arrayLike[len++] \x3d el;\n        }\n      }\n      arrayLike.length \x3d len;\n\n      return /** @type {!IArrayLike\x3c!Element\x3e} */ (arrayLike);\n    } else {\n      return els;\n    }\n  }\n\n  var els \x3d parent.getElementsByTagName(tagName || \x27*\x27);\n\n  if (opt_class) {\n    var arrayLike \x3d {};\n    var len \x3d 0;\n    for (var i \x3d 0, el; el \x3d els[i]; i++) {\n      var className \x3d el.className;\n      // Check if className has a split function since SVG className does not.\n      if (typeof className.split \x3d\x3d \x27function\x27 \x26\x26\n          goog.array.contains(className.split(/\\s+/), opt_class)) {\n        arrayLike[len++] \x3d el;\n      }\n    }\n    arrayLike.length \x3d len;\n    return /** @type {!IArrayLike\x3c!Element\x3e} */ (arrayLike);\n  } else {\n    return els;\n  }\n};\n\n\n/**\n * Helper for goog.dom.getElementByTagNameAndClass.\n *\n * @param {!Document} doc The document to get the elements in.\n * @param {(string|?goog.dom.TagName\x3cT\x3e)\x3d} opt_tag Element tag name.\n * @param {?string\x3d} opt_class Optional class name.\n * @param {(Document|Element)\x3d} opt_el Optional element to look in.\n * @return {?R} Reference to a DOM node. The return type is {?Element} if\n *     tagName is a string or a more specific type if it is a member of\n *     goog.dom.TagName (e.g. {?HTMLAnchorElement} for goog.dom.TagName.A).\n * @template T\n * @template R :\x3d cond(isUnknown(T), \x27Element\x27, T) \x3d:\n * @private\n */\ngoog.dom.getElementByTagNameAndClass_ \x3d function(\n    doc, opt_tag, opt_class, opt_el) {\n  var parent \x3d opt_el || doc;\n  var tag \x3d (opt_tag \x26\x26 opt_tag !\x3d \x27*\x27) ? String(opt_tag).toUpperCase() : \x27\x27;\n  if (goog.dom.canUseQuerySelector_(parent) \x26\x26 (tag || opt_class)) {\n    return parent.querySelector(tag + (opt_class ? \x27.\x27 + opt_class : \x27\x27));\n  }\n  var elements \x3d\n      goog.dom.getElementsByTagNameAndClass_(doc, opt_tag, opt_class, opt_el);\n  return elements[0] || null;\n};\n\n\n\n/**\n * Alias for `getElementsByTagNameAndClass`.\n * @param {(string|?goog.dom.TagName\x3cT\x3e)\x3d} opt_tag Element tag name.\n * @param {?string\x3d} opt_class Optional class name.\n * @param {Element\x3d} opt_el Optional element to look in.\n * @return {!IArrayLike\x3cR\x3e} Array-like list of elements (only a length property\n *     and numerical indices are guaranteed to exist). The members of the array\n *     are {!Element} if opt_tag is not a member of goog.dom.TagName or more\n *     specific types if it is (e.g. {!HTMLAnchorElement} for\n *     goog.dom.TagName.A).\n * @template T\n * @template R :\x3d cond(isUnknown(T), \x27Element\x27, T) \x3d:\n * @deprecated Use {@link goog.dom.getElementsByTagNameAndClass} instead.\n */\ngoog.dom.$$ \x3d goog.dom.getElementsByTagNameAndClass;\n\n\n/**\n * Sets multiple properties, and sometimes attributes, on an element. Note that\n * properties are simply object properties on the element instance, while\n * attributes are visible in the DOM. Many properties map to attributes with the\n * same names, some with different names, and there are also unmappable cases.\n *\n * This method sets properties by default (which means that custom attributes\n * are not supported). These are the exeptions (some of which is legacy):\n * - \x22style\x22: Even though this is an attribute name, it is translated to a\n *   property, \x22style.cssText\x22. Note that this property sanitizes and formats\n *   its value, unlike the attribute.\n * - \x22class\x22: This is an attribute name, it is translated to the \x22className\x22\n *   property.\n * - \x22for\x22: This is an attribute name, it is translated to the \x22htmlFor\x22\n *   property.\n * - Entries in {@see goog.dom.DIRECT_ATTRIBUTE_MAP_} are set as attributes,\n *   this is probably due to browser quirks.\n * - \x22aria-*\x22, \x22data-*\x22: Always set as attributes, they have no property\n *   counterparts.\n *\n * @param {Element} element DOM node to set properties on.\n * @param {Object} properties Hash of property:value pairs.\n *     Property values can be strings or goog.string.TypedString values (such as\n *     goog.html.SafeUrl).\n */\ngoog.dom.setProperties \x3d function(element, properties) {\n  goog.object.forEach(properties, function(val, key) {\n    if (val \x26\x26 val.implementsGoogStringTypedString) {\n      val \x3d val.getTypedStringValue();\n    }\n    if (key \x3d\x3d \x27style\x27) {\n      element.style.cssText \x3d val;\n    } else if (key \x3d\x3d \x27class\x27) {\n      element.className \x3d val;\n    } else if (key \x3d\x3d \x27for\x27) {\n      element.htmlFor \x3d val;\n    } else if (goog.dom.DIRECT_ATTRIBUTE_MAP_.hasOwnProperty(key)) {\n      element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);\n    } else if (\n        goog.string.startsWith(key, \x27aria-\x27) ||\n        goog.string.startsWith(key, \x27data-\x27)) {\n      element.setAttribute(key, val);\n    } else {\n      element[key] \x3d val;\n    }\n  });\n};\n\n\n/**\n * Map of attributes that should be set using\n * element.setAttribute(key, val) instead of element[key] \x3d val.  Used\n * by goog.dom.setProperties.\n *\n * @private {!Object\x3cstring, string\x3e}\n * @const\n */\ngoog.dom.DIRECT_ATTRIBUTE_MAP_ \x3d {\n  \x27cellpadding\x27: \x27cellPadding\x27,\n  \x27cellspacing\x27: \x27cellSpacing\x27,\n  \x27colspan\x27: \x27colSpan\x27,\n  \x27frameborder\x27: \x27frameBorder\x27,\n  \x27height\x27: \x27height\x27,\n  \x27maxlength\x27: \x27maxLength\x27,\n  \x27nonce\x27: \x27nonce\x27,\n  \x27role\x27: \x27role\x27,\n  \x27rowspan\x27: \x27rowSpan\x27,\n  \x27type\x27: \x27type\x27,\n  \x27usemap\x27: \x27useMap\x27,\n  \x27valign\x27: \x27vAlign\x27,\n  \x27width\x27: \x27width\x27\n};\n\n\n/**\n * Gets the dimensions of the viewport.\n *\n * Gecko Standards mode:\n * docEl.clientWidth  Width of viewport excluding scrollbar.\n * win.innerWidth     Width of viewport including scrollbar.\n * body.clientWidth   Width of body element.\n *\n * docEl.clientHeight Height of viewport excluding scrollbar.\n * win.innerHeight    Height of viewport including scrollbar.\n * body.clientHeight  Height of document.\n *\n * Gecko Backwards compatible mode:\n * docEl.clientWidth  Width of viewport excluding scrollbar.\n * win.innerWidth     Width of viewport including scrollbar.\n * body.clientWidth   Width of viewport excluding scrollbar.\n *\n * docEl.clientHeight Height of document.\n * win.innerHeight    Height of viewport including scrollbar.\n * body.clientHeight  Height of viewport excluding scrollbar.\n *\n * IE6/7 Standards mode:\n * docEl.clientWidth  Width of viewport excluding scrollbar.\n * win.innerWidth     Undefined.\n * body.clientWidth   Width of body element.\n *\n * docEl.clientHeight Height of viewport excluding scrollbar.\n * win.innerHeight    Undefined.\n * body.clientHeight  Height of document element.\n *\n * IE5 + IE6/7 Backwards compatible mode:\n * docEl.clientWidth  0.\n * win.innerWidth     Undefined.\n * body.clientWidth   Width of viewport excluding scrollbar.\n *\n * docEl.clientHeight 0.\n * win.innerHeight    Undefined.\n * body.clientHeight  Height of viewport excluding scrollbar.\n *\n * Opera 9 Standards and backwards compatible mode:\n * docEl.clientWidth  Width of viewport excluding scrollbar.\n * win.innerWidth     Width of viewport including scrollbar.\n * body.clientWidth   Width of viewport excluding scrollbar.\n *\n * docEl.clientHeight Height of document.\n * win.innerHeight    Height of viewport including scrollbar.\n * body.clientHeight  Height of viewport excluding scrollbar.\n *\n * WebKit:\n * Safari 2\n * docEl.clientHeight Same as scrollHeight.\n * docEl.clientWidth  Same as innerWidth.\n * win.innerWidth     Width of viewport excluding scrollbar.\n * win.innerHeight    Height of the viewport including scrollbar.\n * frame.innerHeight  Height of the viewport exluding scrollbar.\n *\n * Safari 3 (tested in 522)\n *\n * docEl.clientWidth  Width of viewport excluding scrollbar.\n * docEl.clientHeight Height of viewport excluding scrollbar in strict mode.\n * body.clientHeight  Height of viewport excluding scrollbar in quirks mode.\n *\n * @param {Window\x3d} opt_window Optional window element to test.\n * @return {!goog.math.Size} Object with values \x27width\x27 and \x27height\x27.\n */\ngoog.dom.getViewportSize \x3d function(opt_window) {\n  // TODO(arv): This should not take an argument\n  return goog.dom.getViewportSize_(opt_window || window);\n};\n\n\n/**\n * Helper for `getViewportSize`.\n * @param {Window} win The window to get the view port size for.\n * @return {!goog.math.Size} Object with values \x27width\x27 and \x27height\x27.\n * @private\n */\ngoog.dom.getViewportSize_ \x3d function(win) {\n  var doc \x3d win.document;\n  var el \x3d goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;\n  return new goog.math.Size(el.clientWidth, el.clientHeight);\n};\n\n\n/**\n * Calculates the height of the document.\n *\n * @return {number} The height of the current document.\n */\ngoog.dom.getDocumentHeight \x3d function() {\n  return goog.dom.getDocumentHeight_(window);\n};\n\n/**\n * Calculates the height of the document of the given window.\n *\n * @param {!Window} win The window whose document height to retrieve.\n * @return {number} The height of the document of the given window.\n */\ngoog.dom.getDocumentHeightForWindow \x3d function(win) {\n  return goog.dom.getDocumentHeight_(win);\n};\n\n/**\n * Calculates the height of the document of the given window.\n *\n * Function code copied from the opensocial gadget api:\n *   gadgets.window.adjustHeight(opt_height)\n *\n * @private\n * @param {!Window} win The window whose document height to retrieve.\n * @return {number} The height of the document of the given window.\n */\ngoog.dom.getDocumentHeight_ \x3d function(win) {\n  // NOTE(eae): This method will return the window size rather than the document\n  // size in webkit quirks mode.\n  var doc \x3d win.document;\n  var height \x3d 0;\n\n  if (doc) {\n    // Calculating inner content height is hard and different between\n    // browsers rendering in Strict vs. Quirks mode.  We use a combination of\n    // three properties within document.body and document.documentElement:\n    // - scrollHeight\n    // - offsetHeight\n    // - clientHeight\n    // These values differ significantly between browsers and rendering modes.\n    // But there are patterns.  It just takes a lot of time and persistence\n    // to figure out.\n\n    var body \x3d doc.body;\n    var docEl \x3d /** @type {!HTMLElement} */ (doc.documentElement);\n    if (!(docEl \x26\x26 body)) {\n      return 0;\n    }\n\n    // Get the height of the viewport\n    var vh \x3d goog.dom.getViewportSize_(win).height;\n    if (goog.dom.isCss1CompatMode_(doc) \x26\x26 docEl.scrollHeight) {\n      // In Strict mode:\n      // The inner content height is contained in either:\n      //    document.documentElement.scrollHeight\n      //    document.documentElement.offsetHeight\n      // Based on studying the values output by different browsers,\n      // use the value that\x27s NOT equal to the viewport height found above.\n      height \x3d\n          docEl.scrollHeight !\x3d vh ? docEl.scrollHeight : docEl.offsetHeight;\n    } else {\n      // In Quirks mode:\n      // documentElement.clientHeight is equal to documentElement.offsetHeight\n      // except in IE.  In most browsers, document.documentElement can be used\n      // to calculate the inner content height.\n      // However, in other browsers (e.g. IE), document.body must be used\n      // instead.  How do we know which one to use?\n      // If document.documentElement.clientHeight does NOT equal\n      // document.documentElement.offsetHeight, then use document.body.\n      var sh \x3d docEl.scrollHeight;\n      var oh \x3d docEl.offsetHeight;\n      if (docEl.clientHeight !\x3d oh) {\n        sh \x3d body.scrollHeight;\n        oh \x3d body.offsetHeight;\n      }\n\n      // Detect whether the inner content height is bigger or smaller\n      // than the bounding box (viewport).  If bigger, take the larger\n      // value.  If smaller, take the smaller value.\n      if (sh \x3e vh) {\n        // Content is larger\n        height \x3d sh \x3e oh ? sh : oh;\n      } else {\n        // Content is smaller\n        height \x3d sh \x3c oh ? sh : oh;\n      }\n    }\n  }\n\n  return height;\n};\n\n\n/**\n * Gets the page scroll distance as a coordinate object.\n *\n * @param {Window\x3d} opt_window Optional window element to test.\n * @return {!goog.math.Coordinate} Object with values \x27x\x27 and \x27y\x27.\n * @deprecated Use {@link goog.dom.getDocumentScroll} instead.\n */\ngoog.dom.getPageScroll \x3d function(opt_window) {\n  var win \x3d opt_window || goog.global || window;\n  return goog.dom.getDomHelper(win.document).getDocumentScroll();\n};\n\n\n/**\n * Gets the document scroll distance as a coordinate object.\n *\n * @return {!goog.math.Coordinate} Object with values \x27x\x27 and \x27y\x27.\n */\ngoog.dom.getDocumentScroll \x3d function() {\n  return goog.dom.getDocumentScroll_(document);\n};\n\n\n/**\n * Helper for `getDocumentScroll`.\n *\n * @param {!Document} doc The document to get the scroll for.\n * @return {!goog.math.Coordinate} Object with values \x27x\x27 and \x27y\x27.\n * @private\n */\ngoog.dom.getDocumentScroll_ \x3d function(doc) {\n  var el \x3d goog.dom.getDocumentScrollElement_(doc);\n  var win \x3d goog.dom.getWindow_(doc);\n  if (goog.userAgent.IE \x26\x26 goog.userAgent.isVersionOrHigher(\x2710\x27) \x26\x26\n      win.pageYOffset !\x3d el.scrollTop) {\n    // The keyboard on IE10 touch devices shifts the page using the pageYOffset\n    // without modifying scrollTop. For this case, we want the body scroll\n    // offsets.\n    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);\n  }\n  return new goog.math.Coordinate(\n      win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);\n};\n\n\n/**\n * Gets the document scroll element.\n * @return {!Element} Scrolling element.\n */\ngoog.dom.getDocumentScrollElement \x3d function() {\n  return goog.dom.getDocumentScrollElement_(document);\n};\n\n\n/**\n * Helper for `getDocumentScrollElement`.\n * @param {!Document} doc The document to get the scroll element for.\n * @return {!Element} Scrolling element.\n * @private\n */\ngoog.dom.getDocumentScrollElement_ \x3d function(doc) {\n  // Old WebKit needs body.scrollLeft in both quirks mode and strict mode. We\n  // also default to the documentElement if the document does not have a body\n  // (e.g. a SVG document).\n  // Uses http://dev.w3.org/csswg/cssom-view/#dom-document-scrollingelement to\n  // avoid trying to guess about browser behavior from the UA string.\n  if (doc.scrollingElement) {\n    return doc.scrollingElement;\n  }\n  if (!goog.userAgent.WEBKIT \x26\x26 goog.dom.isCss1CompatMode_(doc)) {\n    return doc.documentElement;\n  }\n  return doc.body || doc.documentElement;\n};\n\n\n/**\n * Gets the window object associated with the given document.\n *\n * @param {Document\x3d} opt_doc  Document object to get window for.\n * @return {!Window} The window associated with the given document.\n */\ngoog.dom.getWindow \x3d function(opt_doc) {\n  // TODO(arv): This should not take an argument.\n  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;\n};\n\n\n/**\n * Helper for `getWindow`.\n *\n * @param {!Document} doc  Document object to get window for.\n * @return {!Window} The window associated with the given document.\n * @private\n */\ngoog.dom.getWindow_ \x3d function(doc) {\n  return /** @type {!Window} */ (doc.parentWindow || doc.defaultView);\n};\n\n\n/**\n * Returns a dom node with a set of attributes.  This function accepts varargs\n * for subsequent nodes to be added.  Subsequent nodes will be added to the\n * first node as childNodes.\n *\n * So:\n * \x3ccode\x3ecreateDom(goog.dom.TagName.DIV, null, createDom(goog.dom.TagName.P),\n * createDom(goog.dom.TagName.P));\x3c/code\x3e would return a div with two child\n * paragraphs\n *\n * For passing properties, please see {@link goog.dom.setProperties} for more\n * information.\n *\n * @param {string|!goog.dom.TagName\x3cT\x3e} tagName Tag to create.\n * @param {?Object|?Array\x3cstring\x3e|string\x3d} opt_attributes If object, then a map\n *     of name-value pairs for attributes. If a string, then this is the\n *     className of the new element. If an array, the elements will be joined\n *     together as the className of the new element.\n * @param {...(Object|string|Array|NodeList)} var_args Further DOM nodes or\n *     strings for text nodes. If one of the var_args is an array or NodeList,\n *     its elements will be added as childNodes instead.\n * @return {R} Reference to a DOM node. The return type is {!Element} if tagName\n *     is a string or a more specific type if it is a member of\n *     goog.dom.TagName (e.g. {!HTMLAnchorElement} for goog.dom.TagName.A).\n * @template T\n * @template R :\x3d cond(isUnknown(T), \x27Element\x27, T) \x3d:\n */\ngoog.dom.createDom \x3d function(tagName, opt_attributes, var_args) {\n  return goog.dom.createDom_(document, arguments);\n};\n\n\n/**\n * Helper for `createDom`.\n * @param {!Document} doc The document to create the DOM in.\n * @param {!Arguments} args Argument object passed from the callers. See\n *     `goog.dom.createDom` for details.\n * @return {!Element} Reference to a DOM node.\n * @private\n */\ngoog.dom.createDom_ \x3d function(doc, args) {\n  var tagName \x3d String(args[0]);\n  var attributes \x3d args[1];\n\n  // Internet Explorer is dumb:\n  // name: https://msdn.microsoft.com/en-us/library/ms534184(v\x3dvs.85).aspx\n  // type: https://msdn.microsoft.com/en-us/library/ms534700(v\x3dvs.85).aspx\n  // Also does not allow setting of \x27type\x27 attribute on \x27input\x27 or \x27button\x27.\n  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES \x26\x26 attributes \x26\x26\n      (attributes.name || attributes.type)) {\n    var tagNameArr \x3d [\x27\x3c\x27, tagName];\n    if (attributes.name) {\n      tagNameArr.push(\x27 name\x3d\x22\x27, goog.string.htmlEscape(attributes.name), \x27\x22\x27);\n    }\n    if (attributes.type) {\n      tagNameArr.push(\x27 type\x3d\x22\x27, goog.string.htmlEscape(attributes.type), \x27\x22\x27);\n\n      // Clone attributes map to remove \x27type\x27 without mutating the input.\n      var clone \x3d {};\n      goog.object.extend(clone, attributes);\n\n      // JSCompiler can\x27t see how goog.object.extend added this property,\n      // because it was essentially added by reflection.\n      // So it needs to be quoted.\n      delete clone[\x27type\x27];\n\n      attributes \x3d clone;\n    }\n    tagNameArr.push(\x27\x3e\x27);\n    tagName \x3d tagNameArr.join(\x27\x27);\n  }\n\n  var element \x3d doc.createElement(tagName);\n\n  if (attributes) {\n    if (goog.isString(attributes)) {\n      element.className \x3d attributes;\n    } else if (goog.isArray(attributes)) {\n      element.className \x3d attributes.join(\x27 \x27);\n    } else {\n      goog.dom.setProperties(element, attributes);\n    }\n  }\n\n  if (args.length \x3e 2) {\n    goog.dom.append_(doc, element, args, 2);\n  }\n\n  return element;\n};\n\n\n/**\n * Appends a node with text or other nodes.\n * @param {!Document} doc The document to create new nodes in.\n * @param {!Node} parent The node to append nodes to.\n * @param {!Arguments} args The values to add. See `goog.dom.append`.\n * @param {number} startIndex The index of the array to start from.\n * @private\n */\ngoog.dom.append_ \x3d function(doc, parent, args, startIndex) {\n  function childHandler(child) {\n    // TODO(pupius): More coercion, ala MochiKit?\n    if (child) {\n      parent.appendChild(\n          goog.isString(child) ? doc.createTextNode(child) : child);\n    }\n  }\n\n  for (var i \x3d startIndex; i \x3c args.length; i++) {\n    var arg \x3d args[i];\n    // TODO(attila): Fix isArrayLike to return false for a text node.\n    if (goog.isArrayLike(arg) \x26\x26 !goog.dom.isNodeLike(arg)) {\n      // If the argument is a node list, not a real array, use a clone,\n      // because forEach can\x27t be used to mutate a NodeList.\n      goog.array.forEach(\n          goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg,\n          childHandler);\n    } else {\n      childHandler(arg);\n    }\n  }\n};\n\n\n/**\n * Alias for `createDom`.\n * @param {string|!goog.dom.TagName\x3cT\x3e} tagName Tag to create.\n * @param {?Object|?Array\x3cstring\x3e|string\x3d} opt_attributes If object, then a map\n *     of name-value pairs for attributes. If a string, then this is the\n *     className of the new element. If an array, the elements will be joined\n *     together as the className of the new element.\n * @param {...(Object|string|Array|NodeList)} var_args Further DOM nodes or\n *     strings for text nodes. If one of the var_args is an array, its\n *     children will be added as childNodes instead.\n * @return {R} Reference to a DOM node. The return type is {!Element} if tagName\n *     is a string or a more specific type if it is a member of\n *     goog.dom.TagName (e.g. {!HTMLAnchorElement} for goog.dom.TagName.A).\n * @template T\n * @template R :\x3d cond(isUnknown(T), \x27Element\x27, T) \x3d:\n * @deprecated Use {@link goog.dom.createDom} instead.\n */\ngoog.dom.$dom \x3d goog.dom.createDom;\n\n\n/**\n * Creates a new element.\n * @param {string|!goog.dom.TagName\x3cT\x3e} name Tag to create.\n * @return {R} The new element. The return type is {!Element} if name is\n *     a string or a more specific type if it is a member of goog.dom.TagName\n *     (e.g. {!HTMLAnchorElement} for goog.dom.TagName.A).\n * @template T\n * @template R :\x3d cond(isUnknown(T), \x27Element\x27, T) \x3d:\n */\ngoog.dom.createElement \x3d function(name) {\n  return goog.dom.createElement_(document, name);\n};\n\n\n/**\n * Creates a new element.\n * @param {!Document} doc The document to create the element in.\n * @param {string|!goog.dom.TagName\x3cT\x3e} name Tag to create.\n * @return {R} The new element. The return type is {!Element} if name is\n *     a string or a more specific type if it is a member of goog.dom.TagName\n *     (e.g. {!HTMLAnchorElement} for goog.dom.TagName.A).\n * @template T\n * @template R :\x3d cond(isUnknown(T), \x27Element\x27, T) \x3d:\n * @private\n */\ngoog.dom.createElement_ \x3d function(doc, name) {\n  return doc.createElement(String(name));\n};\n\n\n/**\n * Creates a new text node.\n * @param {number|string} content Content.\n * @return {!Text} The new text node.\n */\ngoog.dom.createTextNode \x3d function(content) {\n  return document.createTextNode(String(content));\n};\n\n\n/**\n * Create a table.\n * @param {number} rows The number of rows in the table.  Must be \x3e\x3d 1.\n * @param {number} columns The number of columns in the table.  Must be \x3e\x3d 1.\n * @param {boolean\x3d} opt_fillWithNbsp If true, fills table entries with\n *     `goog.string.Unicode.NBSP` characters.\n * @return {!Element} The created table.\n */\ngoog.dom.createTable \x3d function(rows, columns, opt_fillWithNbsp) {\n  // TODO(mlourenco): Return HTMLTableElement, also in prototype function.\n  // Callers need to be updated to e.g. not assign numbers to table.cellSpacing.\n  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);\n};\n\n\n/**\n * Create a table.\n * @param {!Document} doc Document object to use to create the table.\n * @param {number} rows The number of rows in the table.  Must be \x3e\x3d 1.\n * @param {number} columns The number of columns in the table.  Must be \x3e\x3d 1.\n * @param {boolean} fillWithNbsp If true, fills table entries with\n *     `goog.string.Unicode.NBSP` characters.\n * @return {!HTMLTableElement} The created table.\n * @private\n */\ngoog.dom.createTable_ \x3d function(doc, rows, columns, fillWithNbsp) {\n  var table \x3d goog.dom.createElement_(doc, goog.dom.TagName.TABLE);\n  var tbody \x3d\n      table.appendChild(goog.dom.createElement_(doc, goog.dom.TagName.TBODY));\n  for (var i \x3d 0; i \x3c rows; i++) {\n    var tr \x3d goog.dom.createElement_(doc, goog.dom.TagName.TR);\n    for (var j \x3d 0; j \x3c columns; j++) {\n      var td \x3d goog.dom.createElement_(doc, goog.dom.TagName.TD);\n      // IE \x3c\x3d 9 will create a text node if we set text content to the empty\n      // string, so we avoid doing it unless necessary. This ensures that the\n      // same DOM tree is returned on all browsers.\n      if (fillWithNbsp) {\n        goog.dom.setTextContent(td, goog.string.Unicode.NBSP);\n      }\n      tr.appendChild(td);\n    }\n    tbody.appendChild(tr);\n  }\n  return table;\n};\n\n\n\n/**\n * Creates a new Node from constant strings of HTML markup.\n * @param {...!goog.string.Const} var_args The HTML strings to concatenate then\n *     convert into a node.\n * @return {!Node}\n */\ngoog.dom.constHtmlToNode \x3d function(var_args) {\n  var stringArray \x3d goog.array.map(arguments, goog.string.Const.unwrap);\n  var safeHtml \x3d\n      goog.html.uncheckedconversions\n          .safeHtmlFromStringKnownToSatisfyTypeContract(\n              goog.string.Const.from(\n                  \x27Constant HTML string, that gets turned into a \x27 +\n                  \x27Node later, so it will be automatically balanced.\x27),\n              stringArray.join(\x27\x27));\n  return goog.dom.safeHtmlToNode(safeHtml);\n};\n\n\n/**\n * Converts HTML markup into a node. This is a safe version of\n * `goog.dom.htmlToDocumentFragment` which is now deleted.\n * @param {!goog.html.SafeHtml} html The HTML markup to convert.\n * @return {!Node} The resulting node.\n */\ngoog.dom.safeHtmlToNode \x3d function(html) {\n  return goog.dom.safeHtmlToNode_(document, html);\n};\n\n\n/**\n * Helper for `safeHtmlToNode`.\n * @param {!Document} doc The document.\n * @param {!goog.html.SafeHtml} html The HTML markup to convert.\n * @return {!Node} The resulting node.\n * @private\n */\ngoog.dom.safeHtmlToNode_ \x3d function(doc, html) {\n  var tempDiv \x3d goog.dom.createElement_(doc, goog.dom.TagName.DIV);\n  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {\n    goog.dom.safe.setInnerHtml(\n        tempDiv, goog.html.SafeHtml.concat(goog.html.SafeHtml.BR, html));\n    tempDiv.removeChild(tempDiv.firstChild);\n  } else {\n    goog.dom.safe.setInnerHtml(tempDiv, html);\n  }\n  return goog.dom.childrenToNode_(doc, tempDiv);\n};\n\n\n/**\n * Helper for `safeHtmlToNode_`.\n * @param {!Document} doc The document.\n * @param {!Node} tempDiv The input node.\n * @return {!Node} The resulting node.\n * @private\n */\ngoog.dom.childrenToNode_ \x3d function(doc, tempDiv) {\n  if (tempDiv.childNodes.length \x3d\x3d 1) {\n    return tempDiv.removeChild(tempDiv.firstChild);\n  } else {\n    var fragment \x3d doc.createDocumentFragment();\n    while (tempDiv.firstChild) {\n      fragment.appendChild(tempDiv.firstChild);\n    }\n    return fragment;\n  }\n};\n\n\n/**\n * Returns true if the browser is in \x22CSS1-compatible\x22 (standards-compliant)\n * mode, false otherwise.\n * @return {boolean} True if in CSS1-compatible mode.\n */\ngoog.dom.isCss1CompatMode \x3d function() {\n  return goog.dom.isCss1CompatMode_(document);\n};\n\n\n/**\n * Returns true if the browser is in \x22CSS1-compatible\x22 (standards-compliant)\n * mode, false otherwise.\n * @param {!Document} doc The document to check.\n * @return {boolean} True if in CSS1-compatible mode.\n * @private\n */\ngoog.dom.isCss1CompatMode_ \x3d function(doc) {\n  if (goog.dom.COMPAT_MODE_KNOWN_) {\n    return goog.dom.ASSUME_STANDARDS_MODE;\n  }\n\n  return doc.compatMode \x3d\x3d \x27CSS1Compat\x27;\n};\n\n\n/**\n * Determines if the given node can contain children, intended to be used for\n * HTML generation.\n *\n * IE natively supports node.canHaveChildren but has inconsistent behavior.\n * Prior to IE8 the base tag allows children and in IE9 all nodes return true\n * for canHaveChildren.\n *\n * In practice all non-IE browsers allow you to add children to any node, but\n * the behavior is inconsistent:\n *\n * \x3cpre\x3e\n *   var a \x3d goog.dom.createElement(goog.dom.TagName.BR);\n *   a.appendChild(document.createTextNode(\x27foo\x27));\n *   a.appendChild(document.createTextNode(\x27bar\x27));\n *   console.log(a.childNodes.length);  // 2\n *   console.log(a.innerHTML);  // Chrome: \x22\x22, IE9: \x22foobar\x22, FF3.5: \x22foobar\x22\n * \x3c/pre\x3e\n *\n * For more information, see:\n * http://dev.w3.org/html5/markup/syntax.html#syntax-elements\n *\n * TODO(pupius): Rename shouldAllowChildren() ?\n *\n * @param {Node} node The node to check.\n * @return {boolean} Whether the node can contain children.\n */\ngoog.dom.canHaveChildren \x3d function(node) {\n  if (node.nodeType !\x3d goog.dom.NodeType.ELEMENT) {\n    return false;\n  }\n  switch (/** @type {!Element} */ (node).tagName) {\n    case String(goog.dom.TagName.APPLET):\n    case String(goog.dom.TagName.AREA):\n    case String(goog.dom.TagName.BASE):\n    case String(goog.dom.TagName.BR):\n    case String(goog.dom.TagName.COL):\n    case String(goog.dom.TagName.COMMAND):\n    case String(goog.dom.TagName.EMBED):\n    case String(goog.dom.TagName.FRAME):\n    case String(goog.dom.TagName.HR):\n    case String(goog.dom.TagName.IMG):\n    case String(goog.dom.TagName.INPUT):\n    case String(goog.dom.TagName.IFRAME):\n    case String(goog.dom.TagName.ISINDEX):\n    case String(goog.dom.TagName.KEYGEN):\n    case String(goog.dom.TagName.LINK):\n    case String(goog.dom.TagName.NOFRAMES):\n    case String(goog.dom.TagName.NOSCRIPT):\n    case String(goog.dom.TagName.META):\n    case String(goog.dom.TagName.OBJECT):\n    case String(goog.dom.TagName.PARAM):\n    case String(goog.dom.TagName.SCRIPT):\n    case String(goog.dom.TagName.SOURCE):\n    case String(goog.dom.TagName.STYLE):\n    case String(goog.dom.TagName.TRACK):\n    case String(goog.dom.TagName.WBR):\n      return false;\n  }\n  return true;\n};\n\n\n/**\n * Appends a child to a node.\n * @param {Node} parent Parent.\n * @param {Node} child Child.\n */\ngoog.dom.appendChild \x3d function(parent, child) {\n  parent.appendChild(child);\n};\n\n\n/**\n * Appends a node with text or other nodes.\n * @param {!Node} parent The node to append nodes to.\n * @param {...goog.dom.Appendable} var_args The things to append to the node.\n *     If this is a Node it is appended as is.\n *     If this is a string then a text node is appended.\n *     If this is an array like object then fields 0 to length - 1 are appended.\n */\ngoog.dom.append \x3d function(parent, var_args) {\n  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);\n};\n\n\n/**\n * Removes all the child nodes on a DOM node.\n * @param {Node} node Node to remove children from.\n */\ngoog.dom.removeChildren \x3d function(node) {\n  // Note: Iterations over live collections can be slow, this is the fastest\n  // we could find. The double parenthesis are used to prevent JsCompiler and\n  // strict warnings.\n  var child;\n  while ((child \x3d node.firstChild)) {\n    node.removeChild(child);\n  }\n};\n\n\n/**\n * Inserts a new node before an existing reference node (i.e. as the previous\n * sibling). If the reference node has no parent, then does nothing.\n * @param {Node} newNode Node to insert.\n * @param {Node} refNode Reference node to insert before.\n */\ngoog.dom.insertSiblingBefore \x3d function(newNode, refNode) {\n  if (refNode.parentNode) {\n    refNode.parentNode.insertBefore(newNode, refNode);\n  }\n};\n\n\n/**\n * Inserts a new node after an existing reference node (i.e. as the next\n * sibling). If the reference node has no parent, then does nothing.\n * @param {Node} newNode Node to insert.\n * @param {Node} refNode Reference node to insert after.\n */\ngoog.dom.insertSiblingAfter \x3d function(newNode, refNode) {\n  if (refNode.parentNode) {\n    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);\n  }\n};\n\n\n/**\n * Insert a child at a given index. If index is larger than the number of child\n * nodes that the parent currently has, the node is inserted as the last child\n * node.\n * @param {Element} parent The element into which to insert the child.\n * @param {Node} child The element to insert.\n * @param {number} index The index at which to insert the new child node. Must\n *     not be negative.\n */\ngoog.dom.insertChildAt \x3d function(parent, child, index) {\n  // Note that if the second argument is null, insertBefore\n  // will append the child at the end of the list of children.\n  parent.insertBefore(child, parent.childNodes[index] || null);\n};\n\n\n/**\n * Removes a node from its parent.\n * @param {Node} node The node to remove.\n * @return {Node} The node removed if removed; else, null.\n */\ngoog.dom.removeNode \x3d function(node) {\n  return node \x26\x26 node.parentNode ? node.parentNode.removeChild(node) : null;\n};\n\n\n/**\n * Replaces a node in the DOM tree. Will do nothing if `oldNode` has no\n * parent.\n * @param {Node} newNode Node to insert.\n * @param {Node} oldNode Node to replace.\n */\ngoog.dom.replaceNode \x3d function(newNode, oldNode) {\n  var parent \x3d oldNode.parentNode;\n  if (parent) {\n    parent.replaceChild(newNode, oldNode);\n  }\n};\n\n\n/**\n * Flattens an element. That is, removes it and replace it with its children.\n * Does nothing if the element is not in the document.\n * @param {Element} element The element to flatten.\n * @return {Element|undefined} The original element, detached from the document\n *     tree, sans children; or undefined, if the element was not in the document\n *     to begin with.\n */\ngoog.dom.flattenElement \x3d function(element) {\n  var child, parent \x3d element.parentNode;\n  if (parent \x26\x26 parent.nodeType !\x3d goog.dom.NodeType.DOCUMENT_FRAGMENT) {\n    // Use IE DOM method (supported by Opera too) if available\n    if (element.removeNode) {\n      return /** @type {Element} */ (element.removeNode(false));\n    } else {\n      // Move all children of the original node up one level.\n      while ((child \x3d element.firstChild)) {\n        parent.insertBefore(child, element);\n      }\n\n      // Detach the original element.\n      return /** @type {Element} */ (goog.dom.removeNode(element));\n    }\n  }\n};\n\n\n/**\n * Returns an array containing just the element children of the given element.\n * @param {Element} element The element whose element children we want.\n * @return {!(Array\x3c!Element\x3e|NodeList\x3c!Element\x3e)} An array or array-like list\n *     of just the element children of the given element.\n */\ngoog.dom.getChildren \x3d function(element) {\n  // We check if the children attribute is supported for child elements\n  // since IE8 misuses the attribute by also including comments.\n  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE \x26\x26\n      element.children !\x3d undefined) {\n    return element.children;\n  }\n  // Fall back to manually filtering the element\x27s child nodes.\n  return goog.array.filter(element.childNodes, function(node) {\n    return node.nodeType \x3d\x3d goog.dom.NodeType.ELEMENT;\n  });\n};\n\n\n/**\n * Returns the first child node that is an element.\n * @param {Node} node The node to get the first child element of.\n * @return {Element} The first child node of `node` that is an element.\n */\ngoog.dom.getFirstElementChild \x3d function(node) {\n  if (goog.isDef(node.firstElementChild)) {\n    return /** @type {!Element} */ (node).firstElementChild;\n  }\n  return goog.dom.getNextElementNode_(node.firstChild, true);\n};\n\n\n/**\n * Returns the last child node that is an element.\n * @param {Node} node The node to get the last child element of.\n * @return {Element} The last child node of `node` that is an element.\n */\ngoog.dom.getLastElementChild \x3d function(node) {\n  if (goog.isDef(node.lastElementChild)) {\n    return /** @type {!Element} */ (node).lastElementChild;\n  }\n  return goog.dom.getNextElementNode_(node.lastChild, false);\n};\n\n\n/**\n * Returns the first next sibling that is an element.\n * @param {Node} node The node to get the next sibling element of.\n * @return {Element} The next sibling of `node` that is an element.\n */\ngoog.dom.getNextElementSibling \x3d function(node) {\n  if (goog.isDef(node.nextElementSibling)) {\n    return /** @type {!Element} */ (node).nextElementSibling;\n  }\n  return goog.dom.getNextElementNode_(node.nextSibling, true);\n};\n\n\n/**\n * Returns the first previous sibling that is an element.\n * @param {Node} node The node to get the previous sibling element of.\n * @return {Element} The first previous sibling of `node` that is\n *     an element.\n */\ngoog.dom.getPreviousElementSibling \x3d function(node) {\n  if (goog.isDef(node.previousElementSibling)) {\n    return /** @type {!Element} */ (node).previousElementSibling;\n  }\n  return goog.dom.getNextElementNode_(node.previousSibling, false);\n};\n\n\n/**\n * Returns the first node that is an element in the specified direction,\n * starting with `node`.\n * @param {Node} node The node to get the next element from.\n * @param {boolean} forward Whether to look forwards or backwards.\n * @return {Element} The first element.\n * @private\n */\ngoog.dom.getNextElementNode_ \x3d function(node, forward) {\n  while (node \x26\x26 node.nodeType !\x3d goog.dom.NodeType.ELEMENT) {\n    node \x3d forward ? node.nextSibling : node.previousSibling;\n  }\n\n  return /** @type {Element} */ (node);\n};\n\n\n/**\n * Returns the next node in source order from the given node.\n * @param {Node} node The node.\n * @return {Node} The next node in the DOM tree, or null if this was the last\n *     node.\n */\ngoog.dom.getNextNode \x3d function(node) {\n  if (!node) {\n    return null;\n  }\n\n  if (node.firstChild) {\n    return node.firstChild;\n  }\n\n  while (node \x26\x26 !node.nextSibling) {\n    node \x3d node.parentNode;\n  }\n\n  return node ? node.nextSibling : null;\n};\n\n\n/**\n * Returns the previous node in source order from the given node.\n * @param {Node} node The node.\n * @return {Node} The previous node in the DOM tree, or null if this was the\n *     first node.\n */\ngoog.dom.getPreviousNode \x3d function(node) {\n  if (!node) {\n    return null;\n  }\n\n  if (!node.previousSibling) {\n    return node.parentNode;\n  }\n\n  node \x3d node.previousSibling;\n  while (node \x26\x26 node.lastChild) {\n    node \x3d node.lastChild;\n  }\n\n  return node;\n};\n\n\n/**\n * Whether the object looks like a DOM node.\n * @param {?} obj The object being tested for node likeness.\n * @return {boolean} Whether the object looks like a DOM node.\n */\ngoog.dom.isNodeLike \x3d function(obj) {\n  return goog.isObject(obj) \x26\x26 obj.nodeType \x3e 0;\n};\n\n\n/**\n * Whether the object looks like an Element.\n * @param {?} obj The object being tested for Element likeness.\n * @return {boolean} Whether the object looks like an Element.\n */\ngoog.dom.isElement \x3d function(obj) {\n  return goog.isObject(obj) \x26\x26 obj.nodeType \x3d\x3d goog.dom.NodeType.ELEMENT;\n};\n\n\n/**\n * Returns true if the specified value is a Window object. This includes the\n * global window for HTML pages, and iframe windows.\n * @param {?} obj Variable to test.\n * @return {boolean} Whether the variable is a window.\n */\ngoog.dom.isWindow \x3d function(obj) {\n  return goog.isObject(obj) \x26\x26 obj[\x27window\x27] \x3d\x3d obj;\n};\n\n\n/**\n * Returns an element\x27s parent, if it\x27s an Element.\n * @param {Element} element The DOM element.\n * @return {Element} The parent, or null if not an Element.\n */\ngoog.dom.getParentElement \x3d function(element) {\n  var parent;\n  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {\n    var isIe9 \x3d goog.userAgent.IE \x26\x26 goog.userAgent.isVersionOrHigher(\x279\x27) \x26\x26\n        !goog.userAgent.isVersionOrHigher(\x2710\x27);\n    // SVG elements in IE9 can\x27t use the parentElement property.\n    // goog.global[\x27SVGElement\x27] is not defined in IE9 quirks mode.\n    if (!(isIe9 \x26\x26 goog.global[\x27SVGElement\x27] \x26\x26\n          element instanceof goog.global[\x27SVGElement\x27])) {\n      parent \x3d element.parentElement;\n      if (parent) {\n        return parent;\n      }\n    }\n  }\n  parent \x3d element.parentNode;\n  return goog.dom.isElement(parent) ? /** @type {!Element} */ (parent) : null;\n};\n\n\n/**\n * Whether a node contains another node.\n * @param {?Node|undefined} parent The node that should contain the other node.\n * @param {?Node|undefined} descendant The node to test presence of.\n * @return {boolean} Whether the parent node contains the descendent node.\n */\ngoog.dom.contains \x3d function(parent, descendant) {\n  if (!parent || !descendant) {\n    return false;\n  }\n  // We use browser specific methods for this if available since it is faster\n  // that way.\n\n  // IE DOM\n  if (parent.contains \x26\x26 descendant.nodeType \x3d\x3d goog.dom.NodeType.ELEMENT) {\n    return parent \x3d\x3d descendant || parent.contains(descendant);\n  }\n\n  // W3C DOM Level 3\n  if (typeof parent.compareDocumentPosition !\x3d \x27undefined\x27) {\n    return parent \x3d\x3d descendant ||\n        Boolean(parent.compareDocumentPosition(descendant) \x26 16);\n  }\n\n  // W3C DOM Level 1\n  while (descendant \x26\x26 parent !\x3d descendant) {\n    descendant \x3d descendant.parentNode;\n  }\n  return descendant \x3d\x3d parent;\n};\n\n\n/**\n * Compares the document order of two nodes, returning 0 if they are the same\n * node, a negative number if node1 is before node2, and a positive number if\n * node2 is before node1.  Note that we compare the order the tags appear in the\n * document so in the tree \x3cb\x3e\x3ci\x3etext\x3c/i\x3e\x3c/b\x3e the B node is considered to be\n * before the I node.\n *\n * @param {Node} node1 The first node to compare.\n * @param {Node} node2 The second node to compare.\n * @return {number} 0 if the nodes are the same node, a negative number if node1\n *     is before node2, and a positive number if node2 is before node1.\n */\ngoog.dom.compareNodeOrder \x3d function(node1, node2) {\n  // Fall out quickly for equality.\n  if (node1 \x3d\x3d node2) {\n    return 0;\n  }\n\n  // Use compareDocumentPosition where available\n  if (node1.compareDocumentPosition) {\n    // 4 is the bitmask for FOLLOWS.\n    return node1.compareDocumentPosition(node2) \x26 2 ? 1 : -1;\n  }\n\n  // Special case for document nodes on IE 7 and 8.\n  if (goog.userAgent.IE \x26\x26 !goog.userAgent.isDocumentModeOrHigher(9)) {\n    if (node1.nodeType \x3d\x3d goog.dom.NodeType.DOCUMENT) {\n      return -1;\n    }\n    if (node2.nodeType \x3d\x3d goog.dom.NodeType.DOCUMENT) {\n      return 1;\n    }\n  }\n\n  // Process in IE using sourceIndex - we check to see if the first node has\n  // a source index or if its parent has one.\n  if (\x27sourceIndex\x27 in node1 ||\n      (node1.parentNode \x26\x26 \x27sourceIndex\x27 in node1.parentNode)) {\n    var isElement1 \x3d node1.nodeType \x3d\x3d goog.dom.NodeType.ELEMENT;\n    var isElement2 \x3d node2.nodeType \x3d\x3d goog.dom.NodeType.ELEMENT;\n\n    if (isElement1 \x26\x26 isElement2) {\n      return node1.sourceIndex - node2.sourceIndex;\n    } else {\n      var parent1 \x3d node1.parentNode;\n      var parent2 \x3d node2.parentNode;\n\n      if (parent1 \x3d\x3d parent2) {\n        return goog.dom.compareSiblingOrder_(node1, node2);\n      }\n\n      if (!isElement1 \x26\x26 goog.dom.contains(parent1, node2)) {\n        return -1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);\n      }\n\n\n      if (!isElement2 \x26\x26 goog.dom.contains(parent2, node1)) {\n        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);\n      }\n\n      return (isElement1 ? node1.sourceIndex : parent1.sourceIndex) -\n          (isElement2 ? node2.sourceIndex : parent2.sourceIndex);\n    }\n  }\n\n  // For Safari, we compare ranges.\n  var doc \x3d goog.dom.getOwnerDocument(node1);\n\n  var range1, range2;\n  range1 \x3d doc.createRange();\n  range1.selectNode(node1);\n  range1.collapse(true);\n\n  range2 \x3d doc.createRange();\n  range2.selectNode(node2);\n  range2.collapse(true);\n\n  return range1.compareBoundaryPoints(\n      goog.global[\x27Range\x27].START_TO_END, range2);\n};\n\n\n/**\n * Utility function to compare the position of two nodes, when\n * `textNode`\x27s parent is an ancestor of `node`.  If this entry\n * condition is not met, this function will attempt to reference a null object.\n * @param {!Node} textNode The textNode to compare.\n * @param {Node} node The node to compare.\n * @return {number} -1 if node is before textNode, +1 otherwise.\n * @private\n */\ngoog.dom.compareParentsDescendantNodeIe_ \x3d function(textNode, node) {\n  var parent \x3d textNode.parentNode;\n  if (parent \x3d\x3d node) {\n    // If textNode is a child of node, then node comes first.\n    return -1;\n  }\n  var sibling \x3d node;\n  while (sibling.parentNode !\x3d parent) {\n    sibling \x3d sibling.parentNode;\n  }\n  return goog.dom.compareSiblingOrder_(sibling, textNode);\n};\n\n\n/**\n * Utility function to compare the position of two nodes known to be non-equal\n * siblings.\n * @param {Node} node1 The first node to compare.\n * @param {!Node} node2 The second node to compare.\n * @return {number} -1 if node1 is before node2, +1 otherwise.\n * @private\n */\ngoog.dom.compareSiblingOrder_ \x3d function(node1, node2) {\n  var s \x3d node2;\n  while ((s \x3d s.previousSibling)) {\n    if (s \x3d\x3d node1) {\n      // We just found node1 before node2.\n      return -1;\n    }\n  }\n\n  // Since we didn\x27t find it, node1 must be after node2.\n  return 1;\n};\n\n\n/**\n * Find the deepest common ancestor of the given nodes.\n * @param {...Node} var_args The nodes to find a common ancestor of.\n * @return {Node} The common ancestor of the nodes, or null if there is none.\n *     null will only be returned if two or more of the nodes are from different\n *     documents.\n */\ngoog.dom.findCommonAncestor \x3d function(var_args) {\n  var i, count \x3d arguments.length;\n  if (!count) {\n    return null;\n  } else if (count \x3d\x3d 1) {\n    return arguments[0];\n  }\n\n  var paths \x3d [];\n  var minLength \x3d Infinity;\n  for (i \x3d 0; i \x3c count; i++) {\n    // Compute the list of ancestors.\n    var ancestors \x3d [];\n    var node \x3d arguments[i];\n    while (node) {\n      ancestors.unshift(node);\n      node \x3d node.parentNode;\n    }\n\n    // Save the list for comparison.\n    paths.push(ancestors);\n    minLength \x3d Math.min(minLength, ancestors.length);\n  }\n  var output \x3d null;\n  for (i \x3d 0; i \x3c minLength; i++) {\n    var first \x3d paths[0][i];\n    for (var j \x3d 1; j \x3c count; j++) {\n      if (first !\x3d paths[j][i]) {\n        return output;\n      }\n    }\n    output \x3d first;\n  }\n  return output;\n};\n\n\n/**\n * Returns the owner document for a node.\n * @param {Node|Window} node The node to get the document for.\n * @return {!Document} The document owning the node.\n */\ngoog.dom.getOwnerDocument \x3d function(node) {\n  // TODO(nnaze): Update param signature to be non-nullable.\n  goog.asserts.assert(node, \x27Node cannot be null or undefined.\x27);\n  return /** @type {!Document} */ (\n      node.nodeType \x3d\x3d goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument ||\n              node.document);\n};\n\n\n/**\n * Cross-browser function for getting the document element of a frame or iframe.\n * @param {Element} frame Frame element.\n * @return {!Document} The frame content document.\n */\ngoog.dom.getFrameContentDocument \x3d function(frame) {\n  return frame.contentDocument ||\n      /** @type {!HTMLFrameElement} */ (frame).contentWindow.document;\n};\n\n\n/**\n * Cross-browser function for getting the window of a frame or iframe.\n * @param {Element} frame Frame element.\n * @return {Window} The window associated with the given frame, or null if none\n *     exists.\n */\ngoog.dom.getFrameContentWindow \x3d function(frame) {\n  try {\n    return frame.contentWindow ||\n        (frame.contentDocument ? goog.dom.getWindow(frame.contentDocument) :\n                                 null);\n  } catch (e) {\n    // NOTE(jfedor): In IE8, checking the contentWindow or contentDocument\n    // properties will throw a \x22Unspecified Error\x22 exception if the iframe is\n    // not inserted in the DOM. If we get this we can be sure that no window\n    // exists, so return null.\n  }\n  return null;\n};\n\n\n/**\n * Sets the text content of a node, with cross-browser support.\n * @param {Node} node The node to change the text content of.\n * @param {string|number} text The value that should replace the node\x27s content.\n */\ngoog.dom.setTextContent \x3d function(node, text) {\n  goog.asserts.assert(\n      node !\x3d null,\n      \x27goog.dom.setTextContent expects a non-null value for node\x27);\n\n  if (\x27textContent\x27 in node) {\n    node.textContent \x3d text;\n  } else if (node.nodeType \x3d\x3d goog.dom.NodeType.TEXT) {\n    /** @type {!Text} */ (node).data \x3d String(text);\n  } else if (\n      node.firstChild \x26\x26 node.firstChild.nodeType \x3d\x3d goog.dom.NodeType.TEXT) {\n    // If the first child is a text node we just change its data and remove the\n    // rest of the children.\n    while (node.lastChild !\x3d node.firstChild) {\n      node.removeChild(node.lastChild);\n    }\n    /** @type {!Text} */ (node.firstChild).data \x3d String(text);\n  } else {\n    goog.dom.removeChildren(node);\n    var doc \x3d goog.dom.getOwnerDocument(node);\n    node.appendChild(doc.createTextNode(String(text)));\n  }\n};\n\n\n/**\n * Gets the outerHTML of a node, which islike innerHTML, except that it\n * actually contains the HTML of the node itself.\n * @param {Element} element The element to get the HTML of.\n * @return {string} The outerHTML of the given element.\n */\ngoog.dom.getOuterHtml \x3d function(element) {\n  goog.asserts.assert(\n      element !\x3d\x3d null,\n      \x27goog.dom.getOuterHtml expects a non-null value for element\x27);\n  // IE, Opera and WebKit all have outerHTML.\n  if (\x27outerHTML\x27 in element) {\n    return element.outerHTML;\n  } else {\n    var doc \x3d goog.dom.getOwnerDocument(element);\n    var div \x3d goog.dom.createElement_(doc, goog.dom.TagName.DIV);\n    div.appendChild(element.cloneNode(true));\n    return div.innerHTML;\n  }\n};\n\n\n/**\n * Finds the first descendant node that matches the filter function, using\n * a depth first search. This function offers the most general purpose way\n * of finding a matching element. You may also wish to consider\n * `goog.dom.query` which can express many matching criteria using\n * CSS selector expressions. These expressions often result in a more\n * compact representation of the desired result.\n * @see goog.dom.query\n *\n * @param {Node} root The root of the tree to search.\n * @param {function(Node) : boolean} p The filter function.\n * @return {Node|undefined} The found node or undefined if none is found.\n */\ngoog.dom.findNode \x3d function(root, p) {\n  var rv \x3d [];\n  var found \x3d goog.dom.findNodes_(root, p, rv, true);\n  return found ? rv[0] : undefined;\n};\n\n\n/**\n * Finds all the descendant nodes that match the filter function, using a\n * a depth first search. This function offers the most general-purpose way\n * of finding a set of matching elements. You may also wish to consider\n * `goog.dom.query` which can express many matching criteria using\n * CSS selector expressions. These expressions often result in a more\n * compact representation of the desired result.\n\n * @param {Node} root The root of the tree to search.\n * @param {function(Node) : boolean} p The filter function.\n * @return {!Array\x3c!Node\x3e} The found nodes or an empty array if none are found.\n */\ngoog.dom.findNodes \x3d function(root, p) {\n  var rv \x3d [];\n  goog.dom.findNodes_(root, p, rv, false);\n  return rv;\n};\n\n\n/**\n * Finds the first or all the descendant nodes that match the filter function,\n * using a depth first search.\n * @param {Node} root The root of the tree to search.\n * @param {function(Node) : boolean} p The filter function.\n * @param {!Array\x3c!Node\x3e} rv The found nodes are added to this array.\n * @param {boolean} findOne If true we exit after the first found node.\n * @return {boolean} Whether the search is complete or not. True in case findOne\n *     is true and the node is found. False otherwise.\n * @private\n */\ngoog.dom.findNodes_ \x3d function(root, p, rv, findOne) {\n  if (root !\x3d null) {\n    var child \x3d root.firstChild;\n    while (child) {\n      if (p(child)) {\n        rv.push(child);\n        if (findOne) {\n          return true;\n        }\n      }\n      if (goog.dom.findNodes_(child, p, rv, findOne)) {\n        return true;\n      }\n      child \x3d child.nextSibling;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Map of tags whose content to ignore when calculating text length.\n * @private {!Object\x3cstring, number\x3e}\n * @const\n */\ngoog.dom.TAGS_TO_IGNORE_ \x3d {\n  \x27SCRIPT\x27: 1,\n  \x27STYLE\x27: 1,\n  \x27HEAD\x27: 1,\n  \x27IFRAME\x27: 1,\n  \x27OBJECT\x27: 1\n};\n\n\n/**\n * Map of tags which have predefined values with regard to whitespace.\n * @private {!Object\x3cstring, string\x3e}\n * @const\n */\ngoog.dom.PREDEFINED_TAG_VALUES_ \x3d {\n  \x27IMG\x27: \x27 \x27,\n  \x27BR\x27: \x27\\n\x27\n};\n\n\n/**\n * Returns true if the element has a tab index that allows it to receive\n * keyboard focus (tabIndex \x3e\x3d 0), false otherwise.  Note that some elements\n * natively support keyboard focus, even if they have no tab index.\n * @param {!Element} element Element to check.\n * @return {boolean} Whether the element has a tab index that allows keyboard\n *     focus.\n */\ngoog.dom.isFocusableTabIndex \x3d function(element) {\n  return goog.dom.hasSpecifiedTabIndex_(element) \x26\x26\n      goog.dom.isTabIndexFocusable_(element);\n};\n\n\n/**\n * Enables or disables keyboard focus support on the element via its tab index.\n * Only elements for which {@link goog.dom.isFocusableTabIndex} returns true\n * (or elements that natively support keyboard focus, like form elements) can\n * receive keyboard focus.  See http://go/tabindex for more info.\n * @param {Element} element Element whose tab index is to be changed.\n * @param {boolean} enable Whether to set or remove a tab index on the element\n *     that supports keyboard focus.\n */\ngoog.dom.setFocusableTabIndex \x3d function(element, enable) {\n  if (enable) {\n    element.tabIndex \x3d 0;\n  } else {\n    // Set tabIndex to -1 first, then remove it. This is a workaround for\n    // Safari (confirmed in version 4 on Windows). When removing the attribute\n    // without setting it to -1 first, the element remains keyboard focusable\n    // despite not having a tabIndex attribute anymore.\n    element.tabIndex \x3d -1;\n    element.removeAttribute(\x27tabIndex\x27);  // Must be camelCase!\n  }\n};\n\n\n/**\n * Returns true if the element can be focused, i.e. it has a tab index that\n * allows it to receive keyboard focus (tabIndex \x3e\x3d 0), or it is an element\n * that natively supports keyboard focus.\n * @param {!Element} element Element to check.\n * @return {boolean} Whether the element allows keyboard focus.\n */\ngoog.dom.isFocusable \x3d function(element) {\n  var focusable;\n  // Some elements can have unspecified tab index and still receive focus.\n  if (goog.dom.nativelySupportsFocus_(element)) {\n    // Make sure the element is not disabled ...\n    focusable \x3d !element.disabled \x26\x26\n        // ... and if a tab index is specified, it allows focus.\n        (!goog.dom.hasSpecifiedTabIndex_(element) ||\n         goog.dom.isTabIndexFocusable_(element));\n  } else {\n    focusable \x3d goog.dom.isFocusableTabIndex(element);\n  }\n\n  // IE requires elements to be visible in order to focus them.\n  return focusable \x26\x26 goog.userAgent.IE ?\n      goog.dom.hasNonZeroBoundingRect_(/** @type {!HTMLElement} */ (element)) :\n      focusable;\n};\n\n\n/**\n * Returns true if the element has a specified tab index.\n * @param {!Element} element Element to check.\n * @return {boolean} Whether the element has a specified tab index.\n * @private\n */\ngoog.dom.hasSpecifiedTabIndex_ \x3d function(element) {\n  // IE8 and below don\x27t support hasAttribute(), instead check whether the\n  // \x27tabindex\x27 attributeNode is specified. Otherwise check hasAttribute().\n  if (goog.userAgent.IE \x26\x26 !goog.userAgent.isVersionOrHigher(\x279\x27)) {\n    var attrNode \x3d element.getAttributeNode(\x27tabindex\x27);  // Must be lowercase!\n    return goog.isDefAndNotNull(attrNode) \x26\x26 attrNode.specified;\n  } else {\n    return element.hasAttribute(\x27tabindex\x27);\n  }\n};\n\n\n/**\n * Returns true if the element\x27s tab index allows the element to be focused.\n * @param {!Element} element Element to check.\n * @return {boolean} Whether the element\x27s tab index allows focus.\n * @private\n */\ngoog.dom.isTabIndexFocusable_ \x3d function(element) {\n  var index \x3d /** @type {!HTMLElement} */ (element).tabIndex;\n  // NOTE: IE9 puts tabIndex in 16-bit int, e.g. -2 is 65534.\n  return goog.isNumber(index) \x26\x26 index \x3e\x3d 0 \x26\x26 index \x3c 32768;\n};\n\n\n/**\n * Returns true if the element is focusable even when tabIndex is not set.\n * @param {!Element} element Element to check.\n * @return {boolean} Whether the element natively supports focus.\n * @private\n */\ngoog.dom.nativelySupportsFocus_ \x3d function(element) {\n  return element.tagName \x3d\x3d goog.dom.TagName.A ||\n      element.tagName \x3d\x3d goog.dom.TagName.INPUT ||\n      element.tagName \x3d\x3d goog.dom.TagName.TEXTAREA ||\n      element.tagName \x3d\x3d goog.dom.TagName.SELECT ||\n      element.tagName \x3d\x3d goog.dom.TagName.BUTTON;\n};\n\n\n/**\n * Returns true if the element has a bounding rectangle that would be visible\n * (i.e. its width and height are greater than zero).\n * @param {!HTMLElement} element Element to check.\n * @return {boolean} Whether the element has a non-zero bounding rectangle.\n * @private\n */\ngoog.dom.hasNonZeroBoundingRect_ \x3d function(element) {\n  var rect;\n  if (!goog.isFunction(element[\x27getBoundingClientRect\x27]) ||\n      // In IE, getBoundingClientRect throws on detached nodes.\n      (goog.userAgent.IE \x26\x26 element.parentElement \x3d\x3d null)) {\n    rect \x3d {\x27height\x27: element.offsetHeight, \x27width\x27: element.offsetWidth};\n  } else {\n    rect \x3d element.getBoundingClientRect();\n  }\n  return goog.isDefAndNotNull(rect) \x26\x26 rect.height \x3e 0 \x26\x26 rect.width \x3e 0;\n};\n\n\n/**\n * Returns the text content of the current node, without markup and invisible\n * symbols. New lines are stripped and whitespace is collapsed,\n * such that each character would be visible.\n *\n * In browsers that support it, innerText is used.  Other browsers attempt to\n * simulate it via node traversal.  Line breaks are canonicalized in IE.\n *\n * @param {Node} node The node from which we are getting content.\n * @return {string} The text content.\n */\ngoog.dom.getTextContent \x3d function(node) {\n  var textContent;\n  // Note(arv): IE9, Opera, and Safari 3 support innerText but they include\n  // text nodes in script tags. So we revert to use a user agent test here.\n  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT \x26\x26 node !\x3d\x3d null \x26\x26\n      (\x27innerText\x27 in node)) {\n    textContent \x3d goog.string.canonicalizeNewlines(node.innerText);\n    // Unfortunately .innerText() returns text with \x26shy; symbols\n    // We need to filter it out and then remove duplicate whitespaces\n  } else {\n    var buf \x3d [];\n    goog.dom.getTextContent_(node, buf, true);\n    textContent \x3d buf.join(\x27\x27);\n  }\n\n  // Strip \x26shy; entities. goog.format.insertWordBreaks inserts them in Opera.\n  textContent \x3d textContent.replace(/ \\xAD /g, \x27 \x27).replace(/\\xAD/g, \x27\x27);\n  // Strip \x26#8203; entities. goog.format.insertWordBreaks inserts them in IE8.\n  textContent \x3d textContent.replace(/\\u200B/g, \x27\x27);\n\n  // Skip this replacement on old browsers with working innerText, which\n  // automatically turns \x26nbsp; into \x27 \x27 and / +/ into \x27 \x27 when reading\n  // innerText.\n  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {\n    textContent \x3d textContent.replace(/ +/g, \x27 \x27);\n  }\n  if (textContent !\x3d \x27 \x27) {\n    textContent \x3d textContent.replace(/^\\s*/, \x27\x27);\n  }\n\n  return textContent;\n};\n\n\n/**\n * Returns the text content of the current node, without markup.\n *\n * Unlike `getTextContent` this method does not collapse whitespaces\n * or normalize lines breaks.\n *\n * @param {Node} node The node from which we are getting content.\n * @return {string} The raw text content.\n */\ngoog.dom.getRawTextContent \x3d function(node) {\n  var buf \x3d [];\n  goog.dom.getTextContent_(node, buf, false);\n\n  return buf.join(\x27\x27);\n};\n\n\n/**\n * Recursive support function for text content retrieval.\n *\n * @param {Node} node The node from which we are getting content.\n * @param {Array\x3cstring\x3e} buf string buffer.\n * @param {boolean} normalizeWhitespace Whether to normalize whitespace.\n * @private\n */\ngoog.dom.getTextContent_ \x3d function(node, buf, normalizeWhitespace) {\n  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {\n    // ignore certain tags\n  } else if (node.nodeType \x3d\x3d goog.dom.NodeType.TEXT) {\n    if (normalizeWhitespace) {\n      buf.push(String(node.nodeValue).replace(/(\\r\\n|\\r|\\n)/g, \x27\x27));\n    } else {\n      buf.push(node.nodeValue);\n    }\n  } else if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {\n    buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);\n  } else {\n    var child \x3d node.firstChild;\n    while (child) {\n      goog.dom.getTextContent_(child, buf, normalizeWhitespace);\n      child \x3d child.nextSibling;\n    }\n  }\n};\n\n\n/**\n * Returns the text length of the text contained in a node, without markup. This\n * is equivalent to the selection length if the node was selected, or the number\n * of cursor movements to traverse the node. Images \x26 BRs take one space.  New\n * lines are ignored.\n *\n * @param {Node} node The node whose text content length is being calculated.\n * @return {number} The length of `node`\x27s text content.\n */\ngoog.dom.getNodeTextLength \x3d function(node) {\n  return goog.dom.getTextContent(node).length;\n};\n\n\n/**\n * Returns the text offset of a node relative to one of its ancestors. The text\n * length is the same as the length calculated by goog.dom.getNodeTextLength.\n *\n * @param {Node} node The node whose offset is being calculated.\n * @param {Node\x3d} opt_offsetParent The node relative to which the offset will\n *     be calculated. Defaults to the node\x27s owner document\x27s body.\n * @return {number} The text offset.\n */\ngoog.dom.getNodeTextOffset \x3d function(node, opt_offsetParent) {\n  var root \x3d opt_offsetParent || goog.dom.getOwnerDocument(node).body;\n  var buf \x3d [];\n  while (node \x26\x26 node !\x3d root) {\n    var cur \x3d node;\n    while ((cur \x3d cur.previousSibling)) {\n      buf.unshift(goog.dom.getTextContent(cur));\n    }\n    node \x3d node.parentNode;\n  }\n  // Trim left to deal with FF cases when there might be line breaks and empty\n  // nodes at the front of the text\n  return goog.string.trimLeft(buf.join(\x27\x27)).replace(/ +/g, \x27 \x27).length;\n};\n\n\n/**\n * Returns the node at a given offset in a parent node.  If an object is\n * provided for the optional third parameter, the node and the remainder of the\n * offset will stored as properties of this object.\n * @param {Node} parent The parent node.\n * @param {number} offset The offset into the parent node.\n * @param {Object\x3d} opt_result Object to be used to store the return value. The\n *     return value will be stored in the form {node: Node, remainder: number}\n *     if this object is provided.\n * @return {Node} The node at the given offset.\n */\ngoog.dom.getNodeAtOffset \x3d function(parent, offset, opt_result) {\n  var stack \x3d [parent], pos \x3d 0, cur \x3d null;\n  while (stack.length \x3e 0 \x26\x26 pos \x3c offset) {\n    cur \x3d stack.pop();\n    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {\n      // ignore certain tags\n    } else if (cur.nodeType \x3d\x3d goog.dom.NodeType.TEXT) {\n      var text \x3d cur.nodeValue.replace(/(\\r\\n|\\r|\\n)/g, \x27\x27).replace(/ +/g, \x27 \x27);\n      pos +\x3d text.length;\n    } else if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {\n      pos +\x3d goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;\n    } else {\n      for (var i \x3d cur.childNodes.length - 1; i \x3e\x3d 0; i--) {\n        stack.push(cur.childNodes[i]);\n      }\n    }\n  }\n  if (goog.isObject(opt_result)) {\n    opt_result.remainder \x3d cur ? cur.nodeValue.length + offset - pos - 1 : 0;\n    opt_result.node \x3d cur;\n  }\n\n  return cur;\n};\n\n\n/**\n * Returns true if the object is a `NodeList`.  To qualify as a NodeList,\n * the object must have a numeric length property and an item function (which\n * has type \x27string\x27 on IE for some reason).\n * @param {Object} val Object to test.\n * @return {boolean} Whether the object is a NodeList.\n */\ngoog.dom.isNodeList \x3d function(val) {\n  // TODO(attila): Now the isNodeList is part of goog.dom we can use\n  // goog.userAgent to make this simpler.\n  // A NodeList must have a length property of type \x27number\x27 on all platforms.\n  if (val \x26\x26 typeof val.length \x3d\x3d \x27number\x27) {\n    // A NodeList is an object everywhere except Safari, where it\x27s a function.\n    if (goog.isObject(val)) {\n      // A NodeList must have an item function (on non-IE platforms) or an item\n      // property of type \x27string\x27 (on IE).\n      return typeof val.item \x3d\x3d \x27function\x27 || typeof val.item \x3d\x3d \x27string\x27;\n    } else if (goog.isFunction(val)) {\n      // On Safari, a NodeList is a function with an item property that is also\n      // a function.\n      return typeof /** @type {?} */ (val.item) \x3d\x3d \x27function\x27;\n    }\n  }\n\n  // Not a NodeList.\n  return false;\n};\n\n\n/**\n * Walks up the DOM hierarchy returning the first ancestor that has the passed\n * tag name and/or class name. If the passed element matches the specified\n * criteria, the element itself is returned.\n * @param {Node} element The DOM node to start with.\n * @param {?(goog.dom.TagName\x3cT\x3e|string)\x3d} opt_tag The tag name to match (or\n *     null/undefined to match only based on class name).\n * @param {?string\x3d} opt_class The class name to match (or null/undefined to\n *     match only based on tag name).\n * @param {number\x3d} opt_maxSearchSteps Maximum number of levels to search up the\n *     dom.\n * @return {?R} The first ancestor that matches the passed criteria, or\n *     null if no match is found. The return type is {?Element} if opt_tag is\n *     not a member of goog.dom.TagName or a more specific type if it is (e.g.\n *     {?HTMLAnchorElement} for goog.dom.TagName.A).\n * @template T\n * @template R :\x3d cond(isUnknown(T), \x27Element\x27, T) \x3d:\n */\ngoog.dom.getAncestorByTagNameAndClass \x3d function(\n    element, opt_tag, opt_class, opt_maxSearchSteps) {\n  if (!opt_tag \x26\x26 !opt_class) {\n    return null;\n  }\n  var tagName \x3d opt_tag ? String(opt_tag).toUpperCase() : null;\n  return /** @type {Element} */ (goog.dom.getAncestor(element, function(node) {\n    return (!tagName || node.nodeName \x3d\x3d tagName) \x26\x26\n        (!opt_class ||\n         goog.isString(node.className) \x26\x26\n             goog.array.contains(node.className.split(/\\s+/), opt_class));\n  }, true, opt_maxSearchSteps));\n};\n\n\n/**\n * Walks up the DOM hierarchy returning the first ancestor that has the passed\n * class name. If the passed element matches the specified criteria, the\n * element itself is returned.\n * @param {Node} element The DOM node to start with.\n * @param {string} className The class name to match.\n * @param {number\x3d} opt_maxSearchSteps Maximum number of levels to search up the\n *     dom.\n * @return {Element} The first ancestor that matches the passed criteria, or\n *     null if none match.\n */\ngoog.dom.getAncestorByClass \x3d function(element, className, opt_maxSearchSteps) {\n  return goog.dom.getAncestorByTagNameAndClass(\n      element, null, className, opt_maxSearchSteps);\n};\n\n\n/**\n * Walks up the DOM hierarchy returning the first ancestor that passes the\n * matcher function.\n * @param {Node} element The DOM node to start with.\n * @param {function(Node) : boolean} matcher A function that returns true if the\n *     passed node matches the desired criteria.\n * @param {boolean\x3d} opt_includeNode If true, the node itself is included in\n *     the search (the first call to the matcher will pass startElement as\n *     the node to test).\n * @param {number\x3d} opt_maxSearchSteps Maximum number of levels to search up the\n *     dom.\n * @return {Node} DOM node that matched the matcher, or null if there was\n *     no match.\n */\ngoog.dom.getAncestor \x3d function(\n    element, matcher, opt_includeNode, opt_maxSearchSteps) {\n  if (element \x26\x26 !opt_includeNode) {\n    element \x3d element.parentNode;\n  }\n  var steps \x3d 0;\n  while (element \x26\x26\n         (opt_maxSearchSteps \x3d\x3d null || steps \x3c\x3d opt_maxSearchSteps)) {\n    goog.asserts.assert(element.name !\x3d \x27parentNode\x27);\n    if (matcher(element)) {\n      return element;\n    }\n    element \x3d element.parentNode;\n    steps++;\n  }\n  // Reached the root of the DOM without a match\n  return null;\n};\n\n\n/**\n * Determines the active element in the given document.\n * @param {Document} doc The document to look in.\n * @return {Element} The active element.\n */\ngoog.dom.getActiveElement \x3d function(doc) {\n  // While in an iframe, IE9 will throw \x22Unspecified error\x22 when accessing\n  // activeElement.\n  try {\n    var activeElement \x3d doc \x26\x26 doc.activeElement;\n    // While not in an iframe, IE9-11 sometimes gives null.\n    // While in an iframe, IE11 sometimes returns an empty object.\n    return activeElement \x26\x26 activeElement.nodeName ? activeElement : null;\n  } catch (e) {\n    return null;\n  }\n};\n\n\n/**\n * Gives the current devicePixelRatio.\n *\n * By default, this is the value of window.devicePixelRatio (which should be\n * preferred if present).\n *\n * If window.devicePixelRatio is not present, the ratio is calculated with\n * window.matchMedia, if present. Otherwise, gives 1.0.\n *\n * Some browsers (including Chrome) consider the browser zoom level in the pixel\n * ratio, so the value may change across multiple calls.\n *\n * @return {number} The number of actual pixels per virtual pixel.\n */\ngoog.dom.getPixelRatio \x3d function() {\n  var win \x3d goog.dom.getWindow();\n  if (goog.isDef(win.devicePixelRatio)) {\n    return win.devicePixelRatio;\n  } else if (win.matchMedia) {\n    // Should be for IE10 and FF6-17 (this basically clamps to lower)\n    // Note that the order of these statements is important\n    return goog.dom.matchesPixelRatio_(3) || goog.dom.matchesPixelRatio_(2) ||\n           goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(1) ||\n           .75;\n  }\n  return 1;\n};\n\n\n/**\n * Calculates a mediaQuery to check if the current device supports the\n * given actual to virtual pixel ratio.\n * @param {number} pixelRatio The ratio of actual pixels to virtual pixels.\n * @return {number} pixelRatio if applicable, otherwise 0.\n * @private\n */\ngoog.dom.matchesPixelRatio_ \x3d function(pixelRatio) {\n  var win \x3d goog.dom.getWindow();\n  /**\n   * Due to the 1:96 fixed ratio of CSS in to CSS px, 1dppx is equivalent to\n   * 96dpi.\n   * @const {number}\n   */\n  var dpiPerDppx \x3d 96;\n  var query \x3d\n      // FF16-17\n      \x27(min-resolution: \x27 + pixelRatio + \x27dppx),\x27 +\n      // FF6-15\n      \x27(min--moz-device-pixel-ratio: \x27 + pixelRatio + \x27),\x27 +\n      // IE10 (this works for the two browsers above too but I don\x27t want to\n      // trust the 1:96 fixed ratio magic)\n      \x27(min-resolution: \x27 + (pixelRatio * dpiPerDppx) + \x27dpi)\x27;\n  return win.matchMedia(query).matches ? pixelRatio : 0;\n};\n\n\n/**\n * Gets \x272d\x27 context of a canvas. Shortcut for canvas.getContext(\x272d\x27) with a\n * type information.\n * @param {!HTMLCanvasElement} canvas\n * @return {!CanvasRenderingContext2D}\n */\ngoog.dom.getCanvasContext2D \x3d function(canvas) {\n  return /** @type {!CanvasRenderingContext2D} */ (canvas.getContext(\x272d\x27));\n};\n\n\n\n/**\n * Create an instance of a DOM helper with a new document object.\n * @param {Document\x3d} opt_document Document object to associate with this\n *     DOM helper.\n * @constructor\n */\ngoog.dom.DomHelper \x3d function(opt_document) {\n  /**\n   * Reference to the document object to use\n   * @type {!Document}\n   * @private\n   */\n  this.document_ \x3d opt_document || goog.global.document || document;\n};\n\n\n/**\n * Gets the dom helper object for the document where the element resides.\n * @param {Node\x3d} opt_node If present, gets the DomHelper for this node.\n * @return {!goog.dom.DomHelper} The DomHelper.\n */\ngoog.dom.DomHelper.prototype.getDomHelper \x3d goog.dom.getDomHelper;\n\n\n/**\n * Sets the document object.\n * @param {!Document} document Document object.\n */\ngoog.dom.DomHelper.prototype.setDocument \x3d function(document) {\n  this.document_ \x3d document;\n};\n\n\n/**\n * Gets the document object being used by the dom library.\n * @return {!Document} Document object.\n */\ngoog.dom.DomHelper.prototype.getDocument \x3d function() {\n  return this.document_;\n};\n\n\n/**\n * Alias for `getElementById`. If a DOM node is passed in then we just\n * return that.\n * @param {string|Element} element Element ID or a DOM node.\n * @return {Element} The element with the given ID, or the node passed in.\n */\ngoog.dom.DomHelper.prototype.getElement \x3d function(element) {\n  return goog.dom.getElementHelper_(this.document_, element);\n};\n\n\n/**\n * Gets an element by id, asserting that the element is found.\n *\n * This is used when an element is expected to exist, and should fail with\n * an assertion error if it does not (if assertions are enabled).\n *\n * @param {string} id Element ID.\n * @return {!Element} The element with the given ID, if it exists.\n */\ngoog.dom.DomHelper.prototype.getRequiredElement \x3d function(id) {\n  return goog.dom.getRequiredElementHelper_(this.document_, id);\n};\n\n\n/**\n * Alias for `getElement`.\n * @param {string|Element} element Element ID or a DOM node.\n * @return {Element} The element with the given ID, or the node passed in.\n * @deprecated Use {@link goog.dom.DomHelper.prototype.getElement} instead.\n */\ngoog.dom.DomHelper.prototype.$ \x3d goog.dom.DomHelper.prototype.getElement;\n\n\n/**\n * Gets elements by tag name.\n * @param {!goog.dom.TagName\x3cT\x3e} tagName\n * @param {(!Document|!Element)\x3d} opt_parent Parent element or document where to\n *     look for elements. Defaults to document of this DomHelper.\n * @return {!NodeList\x3cR\x3e} List of elements. The members of the list are\n *     {!Element} if tagName is not a member of goog.dom.TagName or more\n *     specific types if it is (e.g. {!HTMLAnchorElement} for\n *     goog.dom.TagName.A).\n * @template T\n * @template R :\x3d cond(isUnknown(T), \x27Element\x27, T) \x3d:\n */\ngoog.dom.DomHelper.prototype.getElementsByTagName \x3d\n    function(tagName, opt_parent) {\n  var parent \x3d opt_parent || this.document_;\n  return parent.getElementsByTagName(String(tagName));\n};\n\n\n/**\n * Looks up elements by both tag and class name, using browser native functions\n * (`querySelectorAll`, `getElementsByTagName` or\n * `getElementsByClassName`) where possible. The returned array is a live\n * NodeList or a static list depending on the code path taken.\n *\n * @see goog.dom.query\n *\n * @param {(string|?goog.dom.TagName\x3cT\x3e)\x3d} opt_tag Element tag name or * for all\n *     tags.\n * @param {?string\x3d} opt_class Optional class name.\n * @param {(Document|Element)\x3d} opt_el Optional element to look in.\n * @return {!IArrayLike\x3cR\x3e} Array-like list of elements (only a length property\n *     and numerical indices are guaranteed to exist). The members of the array\n *     are {!Element} if opt_tag is not a member of goog.dom.TagName or more\n *     specific types if it is (e.g. {!HTMLAnchorElement} for\n *     goog.dom.TagName.A).\n * @template T\n * @template R :\x3d cond(isUnknown(T), \x27Element\x27, T) \x3d:\n */\ngoog.dom.DomHelper.prototype.getElementsByTagNameAndClass \x3d function(\n    opt_tag, opt_class, opt_el) {\n  return goog.dom.getElementsByTagNameAndClass_(\n      this.document_, opt_tag, opt_class, opt_el);\n};\n\n\n/**\n * Gets the first element matching the tag and the class.\n *\n * @param {(string|?goog.dom.TagName\x3cT\x3e)\x3d} opt_tag Element tag name.\n * @param {?string\x3d} opt_class Optional class name.\n * @param {(Document|Element)\x3d} opt_el Optional element to look in.\n * @return {?R} Reference to a DOM node. The return type is {?Element} if\n *     tagName is a string or a more specific type if it is a member of\n *     goog.dom.TagName (e.g. {?HTMLAnchorElement} for goog.dom.TagName.A).\n * @template T\n * @template R :\x3d cond(isUnknown(T), \x27Element\x27, T) \x3d:\n */\ngoog.dom.DomHelper.prototype.getElementByTagNameAndClass \x3d function(\n    opt_tag, opt_class, opt_el) {\n  return goog.dom.getElementByTagNameAndClass_(\n      this.document_, opt_tag, opt_class, opt_el);\n};\n\n\n/**\n * Returns an array of all the elements with the provided className.\n * @see {goog.dom.query}\n * @param {string} className the name of the class to look for.\n * @param {Element|Document\x3d} opt_el Optional element to look in.\n * @return {!IArrayLike\x3c!Element\x3e} The items found with the class name provided.\n */\ngoog.dom.DomHelper.prototype.getElementsByClass \x3d function(className, opt_el) {\n  var doc \x3d opt_el || this.document_;\n  return goog.dom.getElementsByClass(className, doc);\n};\n\n\n/**\n * Returns the first element we find matching the provided class name.\n * @see {goog.dom.query}\n * @param {string} className the name of the class to look for.\n * @param {(Element|Document)\x3d} opt_el Optional element to look in.\n * @return {Element} The first item found with the class name provided.\n */\ngoog.dom.DomHelper.prototype.getElementByClass \x3d function(className, opt_el) {\n  var doc \x3d opt_el || this.document_;\n  return goog.dom.getElementByClass(className, doc);\n};\n\n\n/**\n * Ensures an element with the given className exists, and then returns the\n * first element with the provided className.\n * @see {goog.dom.query}\n * @param {string} className the name of the class to look for.\n * @param {(!Element|!Document)\x3d} opt_root Optional element or document to look\n *     in.\n * @return {!Element} The first item found with the class name provided.\n * @throws {goog.asserts.AssertionError} Thrown if no element is found.\n */\ngoog.dom.DomHelper.prototype.getRequiredElementByClass \x3d function(\n    className, opt_root) {\n  var root \x3d opt_root || this.document_;\n  return goog.dom.getRequiredElementByClass(className, root);\n};\n\n\n/**\n * Alias for `getElementsByTagNameAndClass`.\n * @deprecated Use DomHelper getElementsByTagNameAndClass.\n * @see goog.dom.query\n *\n * @param {(string|?goog.dom.TagName\x3cT\x3e)\x3d} opt_tag Element tag name.\n * @param {?string\x3d} opt_class Optional class name.\n * @param {Element\x3d} opt_el Optional element to look in.\n * @return {!IArrayLike\x3cR\x3e} Array-like list of elements (only a length property\n *     and numerical indices are guaranteed to exist). The members of the array\n *     are {!Element} if opt_tag is a string or more specific types if it is\n *     a member of goog.dom.TagName (e.g. {!HTMLAnchorElement} for\n *     goog.dom.TagName.A).\n * @template T\n * @template R :\x3d cond(isUnknown(T), \x27Element\x27, T) \x3d:\n */\ngoog.dom.DomHelper.prototype.$$ \x3d\n    goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;\n\n\n/**\n * Sets a number of properties on a node.\n * @param {Element} element DOM node to set properties on.\n * @param {Object} properties Hash of property:value pairs.\n */\ngoog.dom.DomHelper.prototype.setProperties \x3d goog.dom.setProperties;\n\n\n/**\n * Gets the dimensions of the viewport.\n * @param {Window\x3d} opt_window Optional window element to test. Defaults to\n *     the window of the Dom Helper.\n * @return {!goog.math.Size} Object with values \x27width\x27 and \x27height\x27.\n */\ngoog.dom.DomHelper.prototype.getViewportSize \x3d function(opt_window) {\n  // TODO(arv): This should not take an argument. That breaks the rule of a\n  // a DomHelper representing a single frame/window/document.\n  return goog.dom.getViewportSize(opt_window || this.getWindow());\n};\n\n\n/**\n * Calculates the height of the document.\n *\n * @return {number} The height of the document.\n */\ngoog.dom.DomHelper.prototype.getDocumentHeight \x3d function() {\n  return goog.dom.getDocumentHeight_(this.getWindow());\n};\n\n\n/**\n * Typedef for use with goog.dom.createDom and goog.dom.append.\n * @typedef {Object|string|Array|NodeList}\n */\ngoog.dom.Appendable;\n\n\n/**\n * Returns a dom node with a set of attributes.  This function accepts varargs\n * for subsequent nodes to be added.  Subsequent nodes will be added to the\n * first node as childNodes.\n *\n * So:\n * \x3ccode\x3ecreateDom(goog.dom.TagName.DIV, null, createDom(goog.dom.TagName.P),\n * createDom(goog.dom.TagName.P));\x3c/code\x3e would return a div with two child\n * paragraphs\n *\n * An easy way to move all child nodes of an existing element to a new parent\n * element is:\n * \x3ccode\x3ecreateDom(goog.dom.TagName.DIV, null, oldElement.childNodes);\x3c/code\x3e\n * which will remove all child nodes from the old element and add them as\n * child nodes of the new DIV.\n *\n * @param {string|!goog.dom.TagName\x3cT\x3e} tagName Tag to create.\n * @param {?Object|?Array\x3cstring\x3e|string\x3d} opt_attributes If object, then a map\n *     of name-value pairs for attributes. If a string, then this is the\n *     className of the new element. If an array, the elements will be joined\n *     together as the className of the new element.\n * @param {...goog.dom.Appendable} var_args Further DOM nodes or\n *     strings for text nodes. If one of the var_args is an array or\n *     NodeList, its elements will be added as childNodes instead.\n * @return {R} Reference to a DOM node. The return type is {!Element} if tagName\n *     is a string or a more specific type if it is a member of\n *     goog.dom.TagName (e.g. {!HTMLAnchorElement} for goog.dom.TagName.A).\n * @template T\n * @template R :\x3d cond(isUnknown(T), \x27Element\x27, T) \x3d:\n */\ngoog.dom.DomHelper.prototype.createDom \x3d function(\n    tagName, opt_attributes, var_args) {\n  return goog.dom.createDom_(this.document_, arguments);\n};\n\n\n/**\n * Alias for `createDom`.\n * @param {string|!goog.dom.TagName\x3cT\x3e} tagName Tag to create.\n * @param {?Object|?Array\x3cstring\x3e|string\x3d} opt_attributes If object, then a map\n *     of name-value pairs for attributes. If a string, then this is the\n *     className of the new element. If an array, the elements will be joined\n *     together as the className of the new element.\n * @param {...goog.dom.Appendable} var_args Further DOM nodes or strings for\n *     text nodes.  If one of the var_args is an array, its children will be\n *     added as childNodes instead.\n * @return {R} Reference to a DOM node. The return type is {!Element} if tagName\n *     is a string or a more specific type if it is a member of\n *     goog.dom.TagName (e.g. {!HTMLAnchorElement} for goog.dom.TagName.A).\n * @template T\n * @template R :\x3d cond(isUnknown(T), \x27Element\x27, T) \x3d:\n * @deprecated Use {@link goog.dom.DomHelper.prototype.createDom} instead.\n */\ngoog.dom.DomHelper.prototype.$dom \x3d goog.dom.DomHelper.prototype.createDom;\n\n\n/**\n * Creates a new element.\n * @param {string|!goog.dom.TagName\x3cT\x3e} name Tag to create.\n * @return {R} The new element. The return type is {!Element} if name is\n *     a string or a more specific type if it is a member of goog.dom.TagName\n *     (e.g. {!HTMLAnchorElement} for goog.dom.TagName.A).\n * @template T\n * @template R :\x3d cond(isUnknown(T), \x27Element\x27, T) \x3d:\n */\ngoog.dom.DomHelper.prototype.createElement \x3d function(name) {\n  return goog.dom.createElement_(this.document_, name);\n};\n\n\n/**\n * Creates a new text node.\n * @param {number|string} content Content.\n * @return {!Text} The new text node.\n */\ngoog.dom.DomHelper.prototype.createTextNode \x3d function(content) {\n  return this.document_.createTextNode(String(content));\n};\n\n\n/**\n * Create a table.\n * @param {number} rows The number of rows in the table.  Must be \x3e\x3d 1.\n * @param {number} columns The number of columns in the table.  Must be \x3e\x3d 1.\n * @param {boolean\x3d} opt_fillWithNbsp If true, fills table entries with\n *     `goog.string.Unicode.NBSP` characters.\n * @return {!HTMLElement} The created table.\n */\ngoog.dom.DomHelper.prototype.createTable \x3d function(\n    rows, columns, opt_fillWithNbsp) {\n  return goog.dom.createTable_(\n      this.document_, rows, columns, !!opt_fillWithNbsp);\n};\n\n\n/**\n * Converts an HTML into a node or a document fragment. A single Node is used if\n * `html` only generates a single node. If `html` generates multiple\n * nodes then these are put inside a `DocumentFragment`. This is a safe\n * version of `goog.dom.DomHelper#htmlToDocumentFragment` which is now\n * deleted.\n * @param {!goog.html.SafeHtml} html The HTML markup to convert.\n * @return {!Node} The resulting node.\n */\ngoog.dom.DomHelper.prototype.safeHtmlToNode \x3d function(html) {\n  return goog.dom.safeHtmlToNode_(this.document_, html);\n};\n\n\n/**\n * Returns true if the browser is in \x22CSS1-compatible\x22 (standards-compliant)\n * mode, false otherwise.\n * @return {boolean} True if in CSS1-compatible mode.\n */\ngoog.dom.DomHelper.prototype.isCss1CompatMode \x3d function() {\n  return goog.dom.isCss1CompatMode_(this.document_);\n};\n\n\n/**\n * Gets the window object associated with the document.\n * @return {!Window} The window associated with the given document.\n */\ngoog.dom.DomHelper.prototype.getWindow \x3d function() {\n  return goog.dom.getWindow_(this.document_);\n};\n\n\n/**\n * Gets the document scroll element.\n * @return {!Element} Scrolling element.\n */\ngoog.dom.DomHelper.prototype.getDocumentScrollElement \x3d function() {\n  return goog.dom.getDocumentScrollElement_(this.document_);\n};\n\n\n/**\n * Gets the document scroll distance as a coordinate object.\n * @return {!goog.math.Coordinate} Object with properties \x27x\x27 and \x27y\x27.\n */\ngoog.dom.DomHelper.prototype.getDocumentScroll \x3d function() {\n  return goog.dom.getDocumentScroll_(this.document_);\n};\n\n\n/**\n * Determines the active element in the given document.\n * @param {Document\x3d} opt_doc The document to look in.\n * @return {Element} The active element.\n */\ngoog.dom.DomHelper.prototype.getActiveElement \x3d function(opt_doc) {\n  return goog.dom.getActiveElement(opt_doc || this.document_);\n};\n\n\n/**\n * Appends a child to a node.\n * @param {Node} parent Parent.\n * @param {Node} child Child.\n */\ngoog.dom.DomHelper.prototype.appendChild \x3d goog.dom.appendChild;\n\n\n/**\n * Appends a node with text or other nodes.\n * @param {!Node} parent The node to append nodes to.\n * @param {...goog.dom.Appendable} var_args The things to append to the node.\n *     If this is a Node it is appended as is.\n *     If this is a string then a text node is appended.\n *     If this is an array like object then fields 0 to length - 1 are appended.\n */\ngoog.dom.DomHelper.prototype.append \x3d goog.dom.append;\n\n\n/**\n * Determines if the given node can contain children, intended to be used for\n * HTML generation.\n *\n * @param {Node} node The node to check.\n * @return {boolean} Whether the node can contain children.\n */\ngoog.dom.DomHelper.prototype.canHaveChildren \x3d goog.dom.canHaveChildren;\n\n\n/**\n * Removes all the child nodes on a DOM node.\n * @param {Node} node Node to remove children from.\n */\ngoog.dom.DomHelper.prototype.removeChildren \x3d goog.dom.removeChildren;\n\n\n/**\n * Inserts a new node before an existing reference node (i.e., as the previous\n * sibling). If the reference node has no parent, then does nothing.\n * @param {Node} newNode Node to insert.\n * @param {Node} refNode Reference node to insert before.\n */\ngoog.dom.DomHelper.prototype.insertSiblingBefore \x3d goog.dom.insertSiblingBefore;\n\n\n/**\n * Inserts a new node after an existing reference node (i.e., as the next\n * sibling). If the reference node has no parent, then does nothing.\n * @param {Node} newNode Node to insert.\n * @param {Node} refNode Reference node to insert after.\n */\ngoog.dom.DomHelper.prototype.insertSiblingAfter \x3d goog.dom.insertSiblingAfter;\n\n\n/**\n * Insert a child at a given index. If index is larger than the number of child\n * nodes that the parent currently has, the node is inserted as the last child\n * node.\n * @param {Element} parent The element into which to insert the child.\n * @param {Node} child The element to insert.\n * @param {number} index The index at which to insert the new child node. Must\n *     not be negative.\n */\ngoog.dom.DomHelper.prototype.insertChildAt \x3d goog.dom.insertChildAt;\n\n\n/**\n * Removes a node from its parent.\n * @param {Node} node The node to remove.\n * @return {Node} The node removed if removed; else, null.\n */\ngoog.dom.DomHelper.prototype.removeNode \x3d goog.dom.removeNode;\n\n\n/**\n * Replaces a node in the DOM tree. Will do nothing if `oldNode` has no\n * parent.\n * @param {Node} newNode Node to insert.\n * @param {Node} oldNode Node to replace.\n */\ngoog.dom.DomHelper.prototype.replaceNode \x3d goog.dom.replaceNode;\n\n\n/**\n * Flattens an element. That is, removes it and replace it with its children.\n * @param {Element} element The element to flatten.\n * @return {Element|undefined} The original element, detached from the document\n *     tree, sans children, or undefined if the element was already not in the\n *     document.\n */\ngoog.dom.DomHelper.prototype.flattenElement \x3d goog.dom.flattenElement;\n\n\n/**\n * Returns an array containing just the element children of the given element.\n * @param {Element} element The element whose element children we want.\n * @return {!(Array\x3c!Element\x3e|NodeList\x3c!Element\x3e)} An array or array-like list\n *     of just the element children of the given element.\n */\ngoog.dom.DomHelper.prototype.getChildren \x3d goog.dom.getChildren;\n\n\n/**\n * Returns the first child node that is an element.\n * @param {Node} node The node to get the first child element of.\n * @return {Element} The first child node of `node` that is an element.\n */\ngoog.dom.DomHelper.prototype.getFirstElementChild \x3d\n    goog.dom.getFirstElementChild;\n\n\n/**\n * Returns the last child node that is an element.\n * @param {Node} node The node to get the last child element of.\n * @return {Element} The last child node of `node` that is an element.\n */\ngoog.dom.DomHelper.prototype.getLastElementChild \x3d goog.dom.getLastElementChild;\n\n\n/**\n * Returns the first next sibling that is an element.\n * @param {Node} node The node to get the next sibling element of.\n * @return {Element} The next sibling of `node` that is an element.\n */\ngoog.dom.DomHelper.prototype.getNextElementSibling \x3d\n    goog.dom.getNextElementSibling;\n\n\n/**\n * Returns the first previous sibling that is an element.\n * @param {Node} node The node to get the previous sibling element of.\n * @return {Element} The first previous sibling of `node` that is\n *     an element.\n */\ngoog.dom.DomHelper.prototype.getPreviousElementSibling \x3d\n    goog.dom.getPreviousElementSibling;\n\n\n/**\n * Returns the next node in source order from the given node.\n * @param {Node} node The node.\n * @return {Node} The next node in the DOM tree, or null if this was the last\n *     node.\n */\ngoog.dom.DomHelper.prototype.getNextNode \x3d goog.dom.getNextNode;\n\n\n/**\n * Returns the previous node in source order from the given node.\n * @param {Node} node The node.\n * @return {Node} The previous node in the DOM tree, or null if this was the\n *     first node.\n */\ngoog.dom.DomHelper.prototype.getPreviousNode \x3d goog.dom.getPreviousNode;\n\n\n/**\n * Whether the object looks like a DOM node.\n * @param {?} obj The object being tested for node likeness.\n * @return {boolean} Whether the object looks like a DOM node.\n */\ngoog.dom.DomHelper.prototype.isNodeLike \x3d goog.dom.isNodeLike;\n\n\n/**\n * Whether the object looks like an Element.\n * @param {?} obj The object being tested for Element likeness.\n * @return {boolean} Whether the object looks like an Element.\n */\ngoog.dom.DomHelper.prototype.isElement \x3d goog.dom.isElement;\n\n\n/**\n * Returns true if the specified value is a Window object. This includes the\n * global window for HTML pages, and iframe windows.\n * @param {?} obj Variable to test.\n * @return {boolean} Whether the variable is a window.\n */\ngoog.dom.DomHelper.prototype.isWindow \x3d goog.dom.isWindow;\n\n\n/**\n * Returns an element\x27s parent, if it\x27s an Element.\n * @param {Element} element The DOM element.\n * @return {Element} The parent, or null if not an Element.\n */\ngoog.dom.DomHelper.prototype.getParentElement \x3d goog.dom.getParentElement;\n\n\n/**\n * Whether a node contains another node.\n * @param {Node} parent The node that should contain the other node.\n * @param {Node} descendant The node to test presence of.\n * @return {boolean} Whether the parent node contains the descendent node.\n */\ngoog.dom.DomHelper.prototype.contains \x3d goog.dom.contains;\n\n\n/**\n * Compares the document order of two nodes, returning 0 if they are the same\n * node, a negative number if node1 is before node2, and a positive number if\n * node2 is before node1.  Note that we compare the order the tags appear in the\n * document so in the tree \x3cb\x3e\x3ci\x3etext\x3c/i\x3e\x3c/b\x3e the B node is considered to be\n * before the I node.\n *\n * @param {Node} node1 The first node to compare.\n * @param {Node} node2 The second node to compare.\n * @return {number} 0 if the nodes are the same node, a negative number if node1\n *     is before node2, and a positive number if node2 is before node1.\n */\ngoog.dom.DomHelper.prototype.compareNodeOrder \x3d goog.dom.compareNodeOrder;\n\n\n/**\n * Find the deepest common ancestor of the given nodes.\n * @param {...Node} var_args The nodes to find a common ancestor of.\n * @return {Node} The common ancestor of the nodes, or null if there is none.\n *     null will only be returned if two or more of the nodes are from different\n *     documents.\n */\ngoog.dom.DomHelper.prototype.findCommonAncestor \x3d goog.dom.findCommonAncestor;\n\n\n/**\n * Returns the owner document for a node.\n * @param {Node} node The node to get the document for.\n * @return {!Document} The document owning the node.\n */\ngoog.dom.DomHelper.prototype.getOwnerDocument \x3d goog.dom.getOwnerDocument;\n\n\n/**\n * Cross browser function for getting the document element of an iframe.\n * @param {Element} iframe Iframe element.\n * @return {!Document} The frame content document.\n */\ngoog.dom.DomHelper.prototype.getFrameContentDocument \x3d\n    goog.dom.getFrameContentDocument;\n\n\n/**\n * Cross browser function for getting the window of a frame or iframe.\n * @param {Element} frame Frame element.\n * @return {Window} The window associated with the given frame.\n */\ngoog.dom.DomHelper.prototype.getFrameContentWindow \x3d\n    goog.dom.getFrameContentWindow;\n\n\n/**\n * Sets the text content of a node, with cross-browser support.\n * @param {Node} node The node to change the text content of.\n * @param {string|number} text The value that should replace the node\x27s content.\n */\ngoog.dom.DomHelper.prototype.setTextContent \x3d goog.dom.setTextContent;\n\n\n/**\n * Gets the outerHTML of a node, which islike innerHTML, except that it\n * actually contains the HTML of the node itself.\n * @param {Element} element The element to get the HTML of.\n * @return {string} The outerHTML of the given element.\n */\ngoog.dom.DomHelper.prototype.getOuterHtml \x3d goog.dom.getOuterHtml;\n\n\n/**\n * Finds the first descendant node that matches the filter function. This does\n * a depth first search.\n * @param {Node} root The root of the tree to search.\n * @param {function(Node) : boolean} p The filter function.\n * @return {Node|undefined} The found node or undefined if none is found.\n */\ngoog.dom.DomHelper.prototype.findNode \x3d goog.dom.findNode;\n\n\n/**\n * Finds all the descendant nodes that matches the filter function. This does a\n * depth first search.\n * @param {Node} root The root of the tree to search.\n * @param {function(Node) : boolean} p The filter function.\n * @return {Array\x3cNode\x3e} The found nodes or an empty array if none are found.\n */\ngoog.dom.DomHelper.prototype.findNodes \x3d goog.dom.findNodes;\n\n\n/**\n * Returns true if the element has a tab index that allows it to receive\n * keyboard focus (tabIndex \x3e\x3d 0), false otherwise.  Note that some elements\n * natively support keyboard focus, even if they have no tab index.\n * @param {!Element} element Element to check.\n * @return {boolean} Whether the element has a tab index that allows keyboard\n *     focus.\n */\ngoog.dom.DomHelper.prototype.isFocusableTabIndex \x3d goog.dom.isFocusableTabIndex;\n\n\n/**\n * Enables or disables keyboard focus support on the element via its tab index.\n * Only elements for which {@link goog.dom.isFocusableTabIndex} returns true\n * (or elements that natively support keyboard focus, like form elements) can\n * receive keyboard focus.  See http://go/tabindex for more info.\n * @param {Element} element Element whose tab index is to be changed.\n * @param {boolean} enable Whether to set or remove a tab index on the element\n *     that supports keyboard focus.\n */\ngoog.dom.DomHelper.prototype.setFocusableTabIndex \x3d\n    goog.dom.setFocusableTabIndex;\n\n\n/**\n * Returns true if the element can be focused, i.e. it has a tab index that\n * allows it to receive keyboard focus (tabIndex \x3e\x3d 0), or it is an element\n * that natively supports keyboard focus.\n * @param {!Element} element Element to check.\n * @return {boolean} Whether the element allows keyboard focus.\n */\ngoog.dom.DomHelper.prototype.isFocusable \x3d goog.dom.isFocusable;\n\n\n/**\n * Returns the text contents of the current node, without markup. New lines are\n * stripped and whitespace is collapsed, such that each character would be\n * visible.\n *\n * In browsers that support it, innerText is used.  Other browsers attempt to\n * simulate it via node traversal.  Line breaks are canonicalized in IE.\n *\n * @param {Node} node The node from which we are getting content.\n * @return {string} The text content.\n */\ngoog.dom.DomHelper.prototype.getTextContent \x3d goog.dom.getTextContent;\n\n\n/**\n * Returns the text length of the text contained in a node, without markup. This\n * is equivalent to the selection length if the node was selected, or the number\n * of cursor movements to traverse the node. Images \x26 BRs take one space.  New\n * lines are ignored.\n *\n * @param {Node} node The node whose text content length is being calculated.\n * @return {number} The length of `node`\x27s text content.\n */\ngoog.dom.DomHelper.prototype.getNodeTextLength \x3d goog.dom.getNodeTextLength;\n\n\n/**\n * Returns the text offset of a node relative to one of its ancestors. The text\n * length is the same as the length calculated by\n * `goog.dom.getNodeTextLength`.\n *\n * @param {Node} node The node whose offset is being calculated.\n * @param {Node\x3d} opt_offsetParent Defaults to the node\x27s owner document\x27s body.\n * @return {number} The text offset.\n */\ngoog.dom.DomHelper.prototype.getNodeTextOffset \x3d goog.dom.getNodeTextOffset;\n\n\n/**\n * Returns the node at a given offset in a parent node.  If an object is\n * provided for the optional third parameter, the node and the remainder of the\n * offset will stored as properties of this object.\n * @param {Node} parent The parent node.\n * @param {number} offset The offset into the parent node.\n * @param {Object\x3d} opt_result Object to be used to store the return value. The\n *     return value will be stored in the form {node: Node, remainder: number}\n *     if this object is provided.\n * @return {Node} The node at the given offset.\n */\ngoog.dom.DomHelper.prototype.getNodeAtOffset \x3d goog.dom.getNodeAtOffset;\n\n\n/**\n * Returns true if the object is a `NodeList`.  To qualify as a NodeList,\n * the object must have a numeric length property and an item function (which\n * has type \x27string\x27 on IE for some reason).\n * @param {Object} val Object to test.\n * @return {boolean} Whether the object is a NodeList.\n */\ngoog.dom.DomHelper.prototype.isNodeList \x3d goog.dom.isNodeList;\n\n\n/**\n * Walks up the DOM hierarchy returning the first ancestor that has the passed\n * tag name and/or class name. If the passed element matches the specified\n * criteria, the element itself is returned.\n * @param {Node} element The DOM node to start with.\n * @param {?(goog.dom.TagName\x3cT\x3e|string)\x3d} opt_tag The tag name to match (or\n *     null/undefined to match only based on class name).\n * @param {?string\x3d} opt_class The class name to match (or null/undefined to\n *     match only based on tag name).\n * @param {number\x3d} opt_maxSearchSteps Maximum number of levels to search up the\n *     dom.\n * @return {?R} The first ancestor that matches the passed criteria, or\n *     null if no match is found. The return type is {?Element} if opt_tag is\n *     not a member of goog.dom.TagName or a more specific type if it is (e.g.\n *     {?HTMLAnchorElement} for goog.dom.TagName.A).\n * @template T\n * @template R :\x3d cond(isUnknown(T), \x27Element\x27, T) \x3d:\n */\ngoog.dom.DomHelper.prototype.getAncestorByTagNameAndClass \x3d\n    goog.dom.getAncestorByTagNameAndClass;\n\n\n/**\n * Walks up the DOM hierarchy returning the first ancestor that has the passed\n * class name. If the passed element matches the specified criteria, the\n * element itself is returned.\n * @param {Node} element The DOM node to start with.\n * @param {string} class The class name to match.\n * @param {number\x3d} opt_maxSearchSteps Maximum number of levels to search up the\n *     dom.\n * @return {Element} The first ancestor that matches the passed criteria, or\n *     null if none match.\n */\ngoog.dom.DomHelper.prototype.getAncestorByClass \x3d goog.dom.getAncestorByClass;\n\n\n/**\n * Walks up the DOM hierarchy returning the first ancestor that passes the\n * matcher function.\n * @param {Node} element The DOM node to start with.\n * @param {function(Node) : boolean} matcher A function that returns true if the\n *     passed node matches the desired criteria.\n * @param {boolean\x3d} opt_includeNode If true, the node itself is included in\n *     the search (the first call to the matcher will pass startElement as\n *     the node to test).\n * @param {number\x3d} opt_maxSearchSteps Maximum number of levels to search up the\n *     dom.\n * @return {Node} DOM node that matched the matcher, or null if there was\n *     no match.\n */\ngoog.dom.DomHelper.prototype.getAncestor \x3d goog.dom.getAncestor;\n\n\n/**\n * Gets \x272d\x27 context of a canvas. Shortcut for canvas.getContext(\x272d\x27) with a\n * type information.\n * @param {!HTMLCanvasElement} canvas\n * @return {!CanvasRenderingContext2D}\n */\ngoog.dom.DomHelper.prototype.getCanvasContext2D \x3d goog.dom.getCanvasContext2D;\n\n//# sourceURL\x3dhttps://qs/javascript/closure/dom/dom.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/debug/entrypointregistry.js";
eval("// Copyright 2010 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A global registry for entry points into a program,\n * so that they can be instrumented. Each module should register their\n * entry points with this registry. Designed to be compiled out\n * if no instrumentation is requested.\n *\n * Entry points may be registered before or after a call to\n * goog.debug.entryPointRegistry.monitorAll. If an entry point is registered\n * later, the existing monitor will instrument the new entry point.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n\ngoog.provide(\x27goog.debug.EntryPointMonitor\x27);\ngoog.provide(\x27goog.debug.entryPointRegistry\x27);\n\ngoog.require(\x27goog.asserts\x27);\n\n\n\n/**\n * @interface\n */\ngoog.debug.EntryPointMonitor \x3d function() {};\n\n\n/**\n * Instruments a function.\n *\n * @param {!Function} fn A function to instrument.\n * @return {!Function} The instrumented function.\n */\ngoog.debug.EntryPointMonitor.prototype.wrap;\n\n\n/**\n * Try to remove an instrumentation wrapper created by this monitor.\n * If the function passed to unwrap is not a wrapper created by this\n * monitor, then we will do nothing.\n *\n * Notice that some wrappers may not be unwrappable. For example, if other\n * monitors have applied their own wrappers, then it will be impossible to\n * unwrap them because their wrappers will have captured our wrapper.\n *\n * So it is important that entry points are unwrapped in the reverse\n * order that they were wrapped.\n *\n * @param {!Function} fn A function to unwrap.\n * @return {!Function} The unwrapped function, or `fn` if it was not\n *     a wrapped function created by this monitor.\n */\ngoog.debug.EntryPointMonitor.prototype.unwrap;\n\n\n/**\n * An array of entry point callbacks.\n * @type {!Array\x3cfunction(!Function)\x3e}\n * @private\n */\ngoog.debug.entryPointRegistry.refList_ \x3d [];\n\n\n/**\n * Monitors that should wrap all the entry points.\n * @type {!Array\x3c!goog.debug.EntryPointMonitor\x3e}\n * @private\n */\ngoog.debug.entryPointRegistry.monitors_ \x3d [];\n\n\n/**\n * Whether goog.debug.entryPointRegistry.monitorAll has ever been called.\n * Checking this allows the compiler to optimize out the registrations.\n * @type {boolean}\n * @private\n */\ngoog.debug.entryPointRegistry.monitorsMayExist_ \x3d false;\n\n\n/**\n * Register an entry point with this module.\n *\n * The entry point will be instrumented when a monitor is passed to\n * goog.debug.entryPointRegistry.monitorAll. If this has already occurred, the\n * entry point is instrumented immediately.\n *\n * @param {function(!Function)} callback A callback function which is called\n *     with a transforming function to instrument the entry point. The callback\n *     is responsible for wrapping the relevant entry point with the\n *     transforming function.\n */\ngoog.debug.entryPointRegistry.register \x3d function(callback) {\n  // Don\x27t use push(), so that this can be compiled out.\n  goog.debug.entryPointRegistry\n      .refList_[goog.debug.entryPointRegistry.refList_.length] \x3d callback;\n  // If no one calls monitorAll, this can be compiled out.\n  if (goog.debug.entryPointRegistry.monitorsMayExist_) {\n    var monitors \x3d goog.debug.entryPointRegistry.monitors_;\n    for (var i \x3d 0; i \x3c monitors.length; i++) {\n      callback(goog.bind(monitors[i].wrap, monitors[i]));\n    }\n  }\n};\n\n\n/**\n * Configures a monitor to wrap all entry points.\n *\n * Entry points that have already been registered are immediately wrapped by\n * the monitor. When an entry point is registered in the future, it will also\n * be wrapped by the monitor when it is registered.\n *\n * @param {!goog.debug.EntryPointMonitor} monitor An entry point monitor.\n */\ngoog.debug.entryPointRegistry.monitorAll \x3d function(monitor) {\n  goog.debug.entryPointRegistry.monitorsMayExist_ \x3d true;\n  var transformer \x3d goog.bind(monitor.wrap, monitor);\n  for (var i \x3d 0; i \x3c goog.debug.entryPointRegistry.refList_.length; i++) {\n    goog.debug.entryPointRegistry.refList_[i](transformer);\n  }\n  goog.debug.entryPointRegistry.monitors_.push(monitor);\n};\n\n\n/**\n * Try to unmonitor all the entry points that have already been registered. If\n * an entry point is registered in the future, it will not be wrapped by the\n * monitor when it is registered. Note that this may fail if the entry points\n * have additional wrapping.\n *\n * @param {!goog.debug.EntryPointMonitor} monitor The last monitor to wrap\n *     the entry points.\n * @throws {Error} If the monitor is not the most recently configured monitor.\n */\ngoog.debug.entryPointRegistry.unmonitorAllIfPossible \x3d function(monitor) {\n  var monitors \x3d goog.debug.entryPointRegistry.monitors_;\n  goog.asserts.assert(\n      monitor \x3d\x3d monitors[monitors.length - 1],\n      \x27Only the most recent monitor can be unwrapped.\x27);\n  var transformer \x3d goog.bind(monitor.unwrap, monitor);\n  for (var i \x3d 0; i \x3c goog.debug.entryPointRegistry.refList_.length; i++) {\n    goog.debug.entryPointRegistry.refList_[i](transformer);\n  }\n  monitors.length--;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/debug/entrypointregistry.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/debug/errorcontext.js";
eval("// Copyright 2017 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Provides methods dealing with context on error objects.\n */\n\ngoog.provide(\x27goog.debug.errorcontext\x27);\n\n\n/**\n * Adds key-value context to the error.\n * @param {!Error} err The error to add context to.\n * @param {string} contextKey Key for the context to be added.\n * @param {string} contextValue Value for the context to be added.\n */\ngoog.debug.errorcontext.addErrorContext \x3d function(\n    err, contextKey, contextValue) {\n  if (!err[goog.debug.errorcontext.CONTEXT_KEY_]) {\n    err[goog.debug.errorcontext.CONTEXT_KEY_] \x3d {};\n  }\n  err[goog.debug.errorcontext.CONTEXT_KEY_][contextKey] \x3d contextValue;\n};\n\n\n/**\n * @param {!Error} err The error to get context from.\n * @return {!Object\x3cstring, string\x3e} The context of the provided error.\n */\ngoog.debug.errorcontext.getErrorContext \x3d function(err) {\n  return err[goog.debug.errorcontext.CONTEXT_KEY_] || {};\n};\n\n\n// TODO(aaronsn): convert this to a Symbol once goog.debug.ErrorReporter is\n// able to use ES6.\n/** @private @const {string} */\ngoog.debug.errorcontext.CONTEXT_KEY_ \x3d \x27__closure__error__context__984382\x27;\n\n//# sourceURL\x3dhttps://qs/javascript/closure/debug/errorcontext.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/debug/debug.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Logging and debugging utilities.\n *\n * @author pupius@google.com (Daniel Pupius)\n * @see ../demos/debug.html\n */\n\ngoog.provide(\x27goog.debug\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.debug.errorcontext\x27);\ngoog.require(\x27goog.userAgent\x27);\n\n\n/** @define {boolean} Whether logging should be enabled. */\ngoog.define(\x27goog.debug.LOGGING_ENABLED\x27, goog.DEBUG);\n\n\n/** @define {boolean} Whether to force \x22sloppy\x22 stack building. */\ngoog.define(\x27goog.debug.FORCE_SLOPPY_STACKS\x27, false);\n\n\n/**\n * Catches onerror events fired by windows and similar objects.\n * @param {function(Object)} logFunc The function to call with the error\n *    information.\n * @param {boolean\x3d} opt_cancel Whether to stop the error from reaching the\n *    browser.\n * @param {Object\x3d} opt_target Object that fires onerror events.\n * @suppress {strictMissingProperties} onerror is not defined as a property\n *    on Object.\n */\ngoog.debug.catchErrors \x3d function(logFunc, opt_cancel, opt_target) {\n  var target \x3d opt_target || goog.global;\n  var oldErrorHandler \x3d target.onerror;\n  var retVal \x3d !!opt_cancel;\n\n  // Chrome interprets onerror return value backwards (http://crbug.com/92062)\n  // until it was fixed in webkit revision r94061 (Webkit 535.3). This\n  // workaround still needs to be skipped in Safari after the webkit change\n  // gets pushed out in Safari.\n  // See https://bugs.webkit.org/show_bug.cgi?id\x3d67119\n  if (goog.userAgent.WEBKIT \x26\x26 !goog.userAgent.isVersionOrHigher(\x27535.3\x27)) {\n    retVal \x3d !retVal;\n  }\n\n  /**\n   * New onerror handler for this target. This onerror handler follows the spec\n   * according to\n   * http://www.whatwg.org/specs/web-apps/current-work/#runtime-script-errors\n   * The spec was changed in August 2013 to support receiving column information\n   * and an error object for all scripts on the same origin or cross origin\n   * scripts with the proper headers. See\n   * https://mikewest.org/2013/08/debugging-runtime-errors-with-window-onerror\n   *\n   * @param {string} message The error message. For cross-origin errors, this\n   *     will be scrubbed to just \x22Script error.\x22. For new browsers that have\n   *     updated to follow the latest spec, errors that come from origins that\n   *     have proper cross origin headers will not be scrubbed.\n   * @param {string} url The URL of the script that caused the error. The URL\n   *     will be scrubbed to \x22\x22 for cross origin scripts unless the script has\n   *     proper cross origin headers and the browser has updated to the latest\n   *     spec.\n   * @param {number} line The line number in the script that the error\n   *     occurred on.\n   * @param {number\x3d} opt_col The optional column number that the error\n   *     occurred on. Only browsers that have updated to the latest spec will\n   *     include this.\n   * @param {Error\x3d} opt_error The optional actual error object for this\n   *     error that should include the stack. Only browsers that have updated\n   *     to the latest spec will inlude this parameter.\n   * @return {boolean} Whether to prevent the error from reaching the browser.\n   */\n  target.onerror \x3d function(message, url, line, opt_col, opt_error) {\n    if (oldErrorHandler) {\n      oldErrorHandler(message, url, line, opt_col, opt_error);\n    }\n    logFunc({\n      message: message,\n      fileName: url,\n      line: line,\n      lineNumber: line,\n      col: opt_col,\n      error: opt_error\n    });\n    return retVal;\n  };\n};\n\n\n/**\n * Creates a string representing an object and all its properties.\n * @param {Object|null|undefined} obj Object to expose.\n * @param {boolean\x3d} opt_showFn Show the functions as well as the properties,\n *     default is false.\n * @return {string} The string representation of `obj`.\n */\ngoog.debug.expose \x3d function(obj, opt_showFn) {\n  if (typeof obj \x3d\x3d \x27undefined\x27) {\n    return \x27undefined\x27;\n  }\n  if (obj \x3d\x3d null) {\n    return \x27NULL\x27;\n  }\n  var str \x3d [];\n\n  for (var x in obj) {\n    if (!opt_showFn \x26\x26 goog.isFunction(obj[x])) {\n      continue;\n    }\n    var s \x3d x + \x27 \x3d \x27;\n\n    try {\n      s +\x3d obj[x];\n    } catch (e) {\n      s +\x3d \x27*** \x27 + e + \x27 ***\x27;\n    }\n    str.push(s);\n  }\n  return str.join(\x27\\n\x27);\n};\n\n\n/**\n * Creates a string representing a given primitive or object, and for an\n * object, all its properties and nested objects. NOTE: The output will include\n * Uids on all objects that were exposed. Any added Uids will be removed before\n * returning.\n * @param {*} obj Object to expose.\n * @param {boolean\x3d} opt_showFn Also show properties that are functions (by\n *     default, functions are omitted).\n * @return {string} A string representation of `obj`.\n */\ngoog.debug.deepExpose \x3d function(obj, opt_showFn) {\n  var str \x3d [];\n\n  // Track any objects where deepExpose added a Uid, so they can be cleaned up\n  // before return. We do this globally, rather than only on ancestors so that\n  // if the same object appears in the output, you can see it.\n  var uidsToCleanup \x3d [];\n  var ancestorUids \x3d {};\n\n  var helper \x3d function(obj, space) {\n    var nestspace \x3d space + \x27  \x27;\n\n    var indentMultiline \x3d function(str) {\n      return str.replace(/\\n/g, \x27\\n\x27 + space);\n    };\n\n\n    try {\n      if (!goog.isDef(obj)) {\n        str.push(\x27undefined\x27);\n      } else if (goog.isNull(obj)) {\n        str.push(\x27NULL\x27);\n      } else if (goog.isString(obj)) {\n        str.push(\x27\x22\x27 + indentMultiline(obj) + \x27\x22\x27);\n      } else if (goog.isFunction(obj)) {\n        str.push(indentMultiline(String(obj)));\n      } else if (goog.isObject(obj)) {\n        // Add a Uid if needed. The struct calls implicitly adds them.\n        if (!goog.hasUid(obj)) {\n          uidsToCleanup.push(obj);\n        }\n        var uid \x3d goog.getUid(obj);\n        if (ancestorUids[uid]) {\n          str.push(\x27*** reference loop detected (id\x3d\x27 + uid + \x27) ***\x27);\n        } else {\n          ancestorUids[uid] \x3d true;\n          str.push(\x27{\x27);\n          for (var x in obj) {\n            if (!opt_showFn \x26\x26 goog.isFunction(obj[x])) {\n              continue;\n            }\n            str.push(\x27\\n\x27);\n            str.push(nestspace);\n            str.push(x + \x27 \x3d \x27);\n            helper(obj[x], nestspace);\n          }\n          str.push(\x27\\n\x27 + space + \x27}\x27);\n          delete ancestorUids[uid];\n        }\n      } else {\n        str.push(obj);\n      }\n    } catch (e) {\n      str.push(\x27*** \x27 + e + \x27 ***\x27);\n    }\n  };\n\n  helper(obj, \x27\x27);\n\n  // Cleanup any Uids that were added by the deepExpose.\n  for (var i \x3d 0; i \x3c uidsToCleanup.length; i++) {\n    goog.removeUid(uidsToCleanup[i]);\n  }\n\n  return str.join(\x27\x27);\n};\n\n\n/**\n * Recursively outputs a nested array as a string.\n * @param {Array\x3c?\x3e} arr The array.\n * @return {string} String representing nested array.\n */\ngoog.debug.exposeArray \x3d function(arr) {\n  var str \x3d [];\n  for (var i \x3d 0; i \x3c arr.length; i++) {\n    if (goog.isArray(arr[i])) {\n      str.push(goog.debug.exposeArray(arr[i]));\n    } else {\n      str.push(arr[i]);\n    }\n  }\n  return \x27[ \x27 + str.join(\x27, \x27) + \x27 ]\x27;\n};\n\n\n/**\n * Normalizes the error/exception object between browsers.\n * @param {*} err Raw error object.\n * @return {{\n *    message: (?|undefined),\n *    name: (?|undefined),\n *    lineNumber: (?|undefined),\n *    fileName: (?|undefined),\n *    stack: (?|undefined)\n * }} Normalized error object.\n * @suppress {strictMissingProperties} properties not defined on err\n */\ngoog.debug.normalizeErrorObject \x3d function(err) {\n  var href \x3d goog.getObjectByName(\x27window.location.href\x27);\n  if (goog.isString(err)) {\n    return {\n      \x27message\x27: err,\n      \x27name\x27: \x27Unknown error\x27,\n      \x27lineNumber\x27: \x27Not available\x27,\n      \x27fileName\x27: href,\n      \x27stack\x27: \x27Not available\x27\n    };\n  }\n\n  var lineNumber, fileName;\n  var threwError \x3d false;\n\n  try {\n    lineNumber \x3d err.lineNumber || err.line || \x27Not available\x27;\n  } catch (e) {\n    // Firefox 2 sometimes throws an error when accessing \x27lineNumber\x27:\n    // Message: Permission denied to get property UnnamedClass.lineNumber\n    lineNumber \x3d \x27Not available\x27;\n    threwError \x3d true;\n  }\n\n  try {\n    fileName \x3d err.fileName || err.filename || err.sourceURL ||\n        // $googDebugFname may be set before a call to eval to set the filename\n        // that the eval is supposed to present.\n        goog.global[\x27$googDebugFname\x27] || href;\n  } catch (e) {\n    // Firefox 2 may also throw an error when accessing \x27filename\x27.\n    fileName \x3d \x27Not available\x27;\n    threwError \x3d true;\n  }\n\n  // The IE Error object contains only the name and the message.\n  // The Safari Error object uses the line and sourceURL fields.\n  if (threwError || !err.lineNumber || !err.fileName || !err.stack ||\n      !err.message || !err.name) {\n    return {\n      \x27message\x27: err.message || \x27Not available\x27,\n      \x27name\x27: err.name || \x27UnknownError\x27,\n      \x27lineNumber\x27: lineNumber,\n      \x27fileName\x27: fileName,\n      \x27stack\x27: err.stack || \x27Not available\x27\n    };\n  }\n\n  // Standards error object\n  // Typed !Object. Should be a subtype of the return type, but it\x27s not.\n  return /** @type {?} */ (err);\n};\n\n\n/**\n * Converts an object to an Error using the object\x27s toString if it\x27s not\n * already an Error, adds a stacktrace if there isn\x27t one, and optionally adds\n * an extra message.\n * @param {*} err The original thrown error, object, or string.\n * @param {string\x3d} opt_message  optional additional message to add to the\n *     error.\n * @return {!Error} If err is an Error, it is enhanced and returned. Otherwise,\n *     it is converted to an Error which is enhanced and returned.\n */\ngoog.debug.enhanceError \x3d function(err, opt_message) {\n  var error;\n  if (!(err instanceof Error)) {\n    error \x3d Error(err);\n    if (Error.captureStackTrace) {\n      // Trim this function off the call stack, if we can.\n      Error.captureStackTrace(error, goog.debug.enhanceError);\n    }\n  } else {\n    error \x3d err;\n  }\n\n  if (!error.stack) {\n    error.stack \x3d goog.debug.getStacktrace(goog.debug.enhanceError);\n  }\n  if (opt_message) {\n    // find the first unoccupied \x27messageX\x27 property\n    var x \x3d 0;\n    while (error[\x27message\x27 + x]) {\n      ++x;\n    }\n    error[\x27message\x27 + x] \x3d String(opt_message);\n  }\n  return error;\n};\n\n\n/**\n * Converts an object to an Error using the object\x27s toString if it\x27s not\n * already an Error, adds a stacktrace if there isn\x27t one, and optionally adds\n * context to the Error, which is reported by the closure error reporter.\n * @param {*} err The original thrown error, object, or string.\n * @param {!Object\x3cstring, string\x3e\x3d} opt_context Key-value context to add to the\n *     Error.\n * @return {!Error} If err is an Error, it is enhanced and returned. Otherwise,\n *     it is converted to an Error which is enhanced and returned.\n */\ngoog.debug.enhanceErrorWithContext \x3d function(err, opt_context) {\n  var error \x3d goog.debug.enhanceError(err);\n  if (opt_context) {\n    for (var key in opt_context) {\n      goog.debug.errorcontext.addErrorContext(error, key, opt_context[key]);\n    }\n  }\n  return error;\n};\n\n\n/**\n * Gets the current stack trace. Simple and iterative - doesn\x27t worry about\n * catching circular references or getting the args.\n * @param {number\x3d} opt_depth Optional maximum depth to trace back to.\n * @return {string} A string with the function names of all functions in the\n *     stack, separated by \\n.\n * @suppress {es5Strict}\n */\ngoog.debug.getStacktraceSimple \x3d function(opt_depth) {\n  if (!goog.debug.FORCE_SLOPPY_STACKS) {\n    var stack \x3d goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);\n    if (stack) {\n      return stack;\n    }\n    // NOTE: browsers that have strict mode support also have native \x22stack\x22\n    // properties.  Fall-through for legacy browser support.\n  }\n\n  var sb \x3d [];\n  var fn \x3d arguments.callee.caller;\n  var depth \x3d 0;\n\n  while (fn \x26\x26 (!opt_depth || depth \x3c opt_depth)) {\n    sb.push(goog.debug.getFunctionName(fn));\n    sb.push(\x27()\\n\x27);\n\n    try {\n      fn \x3d fn.caller;\n    } catch (e) {\n      sb.push(\x27[exception trying to get caller]\\n\x27);\n      break;\n    }\n    depth++;\n    if (depth \x3e\x3d goog.debug.MAX_STACK_DEPTH) {\n      sb.push(\x27[...long stack...]\x27);\n      break;\n    }\n  }\n  if (opt_depth \x26\x26 depth \x3e\x3d opt_depth) {\n    sb.push(\x27[...reached max depth limit...]\x27);\n  } else {\n    sb.push(\x27[end]\x27);\n  }\n\n  return sb.join(\x27\x27);\n};\n\n\n/**\n * Max length of stack to try and output\n * @type {number}\n */\ngoog.debug.MAX_STACK_DEPTH \x3d 50;\n\n\n/**\n * @param {Function} fn The function to start getting the trace from.\n * @return {?string}\n * @private\n */\ngoog.debug.getNativeStackTrace_ \x3d function(fn) {\n  var tempErr \x3d new Error();\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(tempErr, fn);\n    return String(tempErr.stack);\n  } else {\n    // IE10, only adds stack traces when an exception is thrown.\n    try {\n      throw tempErr;\n    } catch (e) {\n      tempErr \x3d e;\n    }\n    var stack \x3d tempErr.stack;\n    if (stack) {\n      return String(stack);\n    }\n  }\n  return null;\n};\n\n\n/**\n * Gets the current stack trace, either starting from the caller or starting\n * from a specified function that\x27s currently on the call stack.\n * @param {?Function\x3d} fn If provided, when collecting the stack trace all\n *     frames above the topmost call to this function, including that call,\n *     will be left out of the stack trace.\n * @return {string} Stack trace.\n * @suppress {es5Strict}\n */\ngoog.debug.getStacktrace \x3d function(fn) {\n  var stack;\n  if (!goog.debug.FORCE_SLOPPY_STACKS) {\n    // Try to get the stack trace from the environment if it is available.\n    var contextFn \x3d fn || goog.debug.getStacktrace;\n    stack \x3d goog.debug.getNativeStackTrace_(contextFn);\n  }\n  if (!stack) {\n    // NOTE: browsers that have strict mode support also have native \x22stack\x22\n    // properties. This function will throw in strict mode.\n    stack \x3d goog.debug.getStacktraceHelper_(fn || arguments.callee.caller, []);\n  }\n  return stack;\n};\n\n\n/**\n * Private helper for getStacktrace().\n * @param {?Function} fn If provided, when collecting the stack trace all\n *     frames above the topmost call to this function, including that call,\n *     will be left out of the stack trace.\n * @param {Array\x3c!Function\x3e} visited List of functions visited so far.\n * @return {string} Stack trace starting from function fn.\n * @suppress {es5Strict}\n * @private\n */\ngoog.debug.getStacktraceHelper_ \x3d function(fn, visited) {\n  var sb \x3d [];\n\n  // Circular reference, certain functions like bind seem to cause a recursive\n  // loop so we need to catch circular references\n  if (goog.array.contains(visited, fn)) {\n    sb.push(\x27[...circular reference...]\x27);\n\n    // Traverse the call stack until function not found or max depth is reached\n  } else if (fn \x26\x26 visited.length \x3c goog.debug.MAX_STACK_DEPTH) {\n    sb.push(goog.debug.getFunctionName(fn) + \x27(\x27);\n    var args \x3d fn.arguments;\n    // Args may be null for some special functions such as host objects or eval.\n    for (var i \x3d 0; args \x26\x26 i \x3c args.length; i++) {\n      if (i \x3e 0) {\n        sb.push(\x27, \x27);\n      }\n      var argDesc;\n      var arg \x3d args[i];\n      switch (typeof arg) {\n        case \x27object\x27:\n          argDesc \x3d arg ? \x27object\x27 : \x27null\x27;\n          break;\n\n        case \x27string\x27:\n          argDesc \x3d arg;\n          break;\n\n        case \x27number\x27:\n          argDesc \x3d String(arg);\n          break;\n\n        case \x27boolean\x27:\n          argDesc \x3d arg ? \x27true\x27 : \x27false\x27;\n          break;\n\n        case \x27function\x27:\n          argDesc \x3d goog.debug.getFunctionName(arg);\n          argDesc \x3d argDesc ? argDesc : \x27[fn]\x27;\n          break;\n\n        case \x27undefined\x27:\n        default:\n          argDesc \x3d typeof arg;\n          break;\n      }\n\n      if (argDesc.length \x3e 40) {\n        argDesc \x3d argDesc.substr(0, 40) + \x27...\x27;\n      }\n      sb.push(argDesc);\n    }\n    visited.push(fn);\n    sb.push(\x27)\\n\x27);\n\n    try {\n      sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));\n    } catch (e) {\n      sb.push(\x27[exception trying to get caller]\\n\x27);\n    }\n\n  } else if (fn) {\n    sb.push(\x27[...long stack...]\x27);\n  } else {\n    sb.push(\x27[end]\x27);\n  }\n  return sb.join(\x27\x27);\n};\n\n\n/**\n * Set a custom function name resolver.\n * @param {function(Function): string} resolver Resolves functions to their\n *     names.\n */\ngoog.debug.setFunctionResolver \x3d function(resolver) {\n  goog.debug.fnNameResolver_ \x3d resolver;\n};\n\n\n/**\n * Gets a function name\n * @param {Function} fn Function to get name of.\n * @return {string} Function\x27s name.\n */\ngoog.debug.getFunctionName \x3d function(fn) {\n  if (goog.debug.fnNameCache_[fn]) {\n    return goog.debug.fnNameCache_[fn];\n  }\n  if (goog.debug.fnNameResolver_) {\n    var name \x3d goog.debug.fnNameResolver_(fn);\n    if (name) {\n      goog.debug.fnNameCache_[fn] \x3d name;\n      return name;\n    }\n  }\n\n  // Heuristically determine function name based on code.\n  var functionSource \x3d String(fn);\n  if (!goog.debug.fnNameCache_[functionSource]) {\n    var matches \x3d /function ([^\\(]+)/.exec(functionSource);\n    if (matches) {\n      var method \x3d matches[1];\n      goog.debug.fnNameCache_[functionSource] \x3d method;\n    } else {\n      goog.debug.fnNameCache_[functionSource] \x3d \x27[Anonymous]\x27;\n    }\n  }\n\n  return goog.debug.fnNameCache_[functionSource];\n};\n\n\n/**\n * Makes whitespace visible by replacing it with printable characters.\n * This is useful in finding diffrences between the expected and the actual\n * output strings of a testcase.\n * @param {string} string whose whitespace needs to be made visible.\n * @return {string} string whose whitespace is made visible.\n */\ngoog.debug.makeWhitespaceVisible \x3d function(string) {\n  return string.replace(/ /g, \x27[_]\x27)\n      .replace(/\\f/g, \x27[f]\x27)\n      .replace(/\\n/g, \x27[n]\\n\x27)\n      .replace(/\\r/g, \x27[r]\x27)\n      .replace(/\\t/g, \x27[t]\x27);\n};\n\n\n/**\n * Returns the type of a value. If a constructor is passed, and a suitable\n * string cannot be found, \x27unknown type name\x27 will be returned.\n *\n * \x3cp\x3eForked rather than moved from {@link goog.asserts.getType_}\n * to avoid adding a dependency to goog.asserts.\n * @param {*} value A constructor, object, or primitive.\n * @return {string} The best display name for the value, or \x27unknown type name\x27.\n */\ngoog.debug.runtimeType \x3d function(value) {\n  if (value instanceof Function) {\n    return value.displayName || value.name || \x27unknown type name\x27;\n  } else if (value instanceof Object) {\n    return /** @type {string} */ (value.constructor.displayName) ||\n        value.constructor.name || Object.prototype.toString.call(value);\n  } else {\n    return value \x3d\x3d\x3d null ? \x27null\x27 : typeof value;\n  }\n};\n\n\n/**\n * Hash map for storing function names that have already been looked up.\n * @type {Object}\n * @private\n */\ngoog.debug.fnNameCache_ \x3d {};\n\n\n/**\n * Resolves functions to their names.  Resolved function names will be cached.\n * @type {function(Function):string}\n * @private\n */\ngoog.debug.fnNameResolver_;\n\n\n/**\n * Private internal function to support goog.debug.freeze.\n * @param {T} arg\n * @return {T}\n * @template T\n * @private\n */\ngoog.debug.freezeInternal_ \x3d goog.DEBUG \x26\x26 Object.freeze || function(arg) {\n  return arg;\n};\n\n\n/**\n * Freezes the given object, but only in debug mode (and in browsers that\n * support it).  Note that this is a shallow freeze, so for deeply nested\n * objects it must be called at every level to ensure deep immutability.\n * @param {T} arg\n * @return {T}\n * @template T\n */\ngoog.debug.freeze \x3d function(arg) {\n  // NOTE: this compiles to nothing, but hides the possible side effect of\n  // freezeInternal_ from the compiler so that the entire call can be\n  // removed if the result is not used.\n  return {\n    valueOf: function() {\n      return goog.debug.freezeInternal_(arg);\n    }\n  }.valueOf();\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/debug/debug.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/events/browserfeature.js";
eval("// Copyright 2010 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Browser capability checks for the events package.\n *\n * @author zhyder@google.com (Zohair Hyder)\n */\n\n\ngoog.provide(\x27goog.events.BrowserFeature\x27);\n\ngoog.require(\x27goog.userAgent\x27);\ngoog.scope(function() {\n\n\n\n/**\n * Enum of browser capabilities.\n * @enum {boolean}\n */\ngoog.events.BrowserFeature \x3d {\n  /**\n   * Whether the button attribute of the event is W3C compliant.  False in\n   * Internet Explorer prior to version 9; document-version dependent.\n   */\n  HAS_W3C_BUTTON:\n      !goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9),\n\n  /**\n   * Whether the browser supports full W3C event model.\n   */\n  HAS_W3C_EVENT_SUPPORT:\n      !goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9),\n\n  /**\n   * To prevent default in IE7-8 for certain keydown events we need set the\n   * keyCode to -1.\n   */\n  SET_KEY_CODE_TO_PREVENT_DEFAULT:\n      goog.userAgent.IE \x26\x26 !goog.userAgent.isVersionOrHigher(\x279\x27),\n\n  /**\n   * Whether the `navigator.onLine` property is supported.\n   */\n  HAS_NAVIGATOR_ONLINE_PROPERTY:\n      !goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher(\x27528\x27),\n\n  /**\n   * Whether HTML5 network online/offline events are supported.\n   */\n  HAS_HTML5_NETWORK_EVENT_SUPPORT:\n      goog.userAgent.GECKO \x26\x26 goog.userAgent.isVersionOrHigher(\x271.9b\x27) ||\n      goog.userAgent.IE \x26\x26 goog.userAgent.isVersionOrHigher(\x278\x27) ||\n      goog.userAgent.OPERA \x26\x26 goog.userAgent.isVersionOrHigher(\x279.5\x27) ||\n      goog.userAgent.WEBKIT \x26\x26 goog.userAgent.isVersionOrHigher(\x27528\x27),\n\n  /**\n   * Whether HTML5 network events fire on document.body, or otherwise the\n   * window.\n   */\n  HTML5_NETWORK_EVENTS_FIRE_ON_BODY:\n      goog.userAgent.GECKO \x26\x26 !goog.userAgent.isVersionOrHigher(\x278\x27) ||\n      goog.userAgent.IE \x26\x26 !goog.userAgent.isVersionOrHigher(\x279\x27),\n\n  /**\n   * Whether touch is enabled in the browser.\n   */\n  TOUCH_ENABLED:\n      (\x27ontouchstart\x27 in goog.global ||\n       !!(goog.global[\x27document\x27] \x26\x26 document.documentElement \x26\x26\n          \x27ontouchstart\x27 in document.documentElement) ||\n       // IE10 uses non-standard touch events, so it has a different check.\n       !!(goog.global[\x27navigator\x27] \x26\x26\n          (goog.global[\x27navigator\x27][\x27maxTouchPoints\x27] ||\n           goog.global[\x27navigator\x27][\x27msMaxTouchPoints\x27]))),\n\n  /**\n   * Whether addEventListener supports W3C standard pointer events.\n   * http://www.w3.org/TR/pointerevents/\n   */\n  POINTER_EVENTS: (\x27PointerEvent\x27 in goog.global),\n\n  /**\n   * Whether addEventListener supports MSPointer events (only used in IE10).\n   * http://msdn.microsoft.com/en-us/library/ie/hh772103(v\x3dvs.85).aspx\n   * http://msdn.microsoft.com/library/hh673557(v\x3dvs.85).aspx\n   */\n  MSPOINTER_EVENTS:\n      (\x27MSPointerEvent\x27 in goog.global \x26\x26\n       !!(goog.global[\x27navigator\x27] \x26\x26\n          goog.global[\x27navigator\x27][\x27msPointerEnabled\x27])),\n\n  /**\n   * Whether addEventListener supports {passive: true}.\n   * https://developers.google.com/web/updates/2016/06/passive-event-listeners\n   */\n  PASSIVE_EVENTS: purify(function() {\n    // If we\x27re in a web worker or other custom environment, we can\x27t tell.\n    if (!goog.global.addEventListener || !Object.defineProperty) {  // IE 8\n      return false;\n    }\n\n    var passive \x3d false;\n    var options \x3d Object.defineProperty({}, \x27passive\x27, {\n      get: function() {\n        passive \x3d true;\n      }\n    });\n    goog.global.addEventListener(\x27test\x27, goog.nullFunction, options);\n    goog.global.removeEventListener(\x27test\x27, goog.nullFunction, options);\n\n    return passive;\n  })\n};\n\n\n/**\n * Tricks Closure Compiler into believing that a function is pure.  The compiler\n * assumes that any `valueOf` function is pure, without analyzing its contents.\n *\n * @param {function(): T} fn\n * @return {T}\n * @template T\n */\nfunction purify(fn) {\n  return ({valueOf: fn}).valueOf();\n}\n});  // goog.scope\n\n//# sourceURL\x3dhttps://qs/javascript/closure/events/browserfeature.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/disposable/idisposable.js";
eval("// Copyright 2011 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Definition of the disposable interface.  A disposable object\n * has a dispose method to to clean up references and resources.\n * @author nnaze@google.com (Nathan Naze)\n */\n\n\ngoog.provide(\x27goog.disposable.IDisposable\x27);\n\n\n\n/**\n * Interface for a disposable object.  If a instance requires cleanup\n * (references COM objects, DOM nodes, or other disposable objects), it should\n * implement this interface (it may subclass goog.Disposable).\n * @record\n */\ngoog.disposable.IDisposable \x3d function() {};\n\n\n/**\n * Disposes of the object and its resources.\n * @return {void} Nothing.\n */\ngoog.disposable.IDisposable.prototype.dispose \x3d goog.abstractMethod;\n\n\n/**\n * @return {boolean} Whether the object has been disposed of.\n */\ngoog.disposable.IDisposable.prototype.isDisposed \x3d goog.abstractMethod;\n\n//# sourceURL\x3dhttps://qs/javascript/closure/disposable/idisposable.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/disposable/disposable.js";
eval("// Copyright 2005 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Implements the disposable interface. The dispose method is used\n * to clean up references and resources.\n * @author arv@google.com (Erik Arvidsson)\n */\n\n\ngoog.provide(\x27goog.Disposable\x27);\ngoog.provide(\x27goog.dispose\x27);\ngoog.provide(\x27goog.disposeAll\x27);\n\ngoog.require(\x27goog.disposable.IDisposable\x27);\n\n\n\n/**\n * Class that provides the basic implementation for disposable objects. If your\n * class holds one or more references to COM objects, DOM nodes, or other\n * disposable objects, it should extend this class or implement the disposable\n * interface (defined in goog.disposable.IDisposable).\n * @constructor\n * @implements {goog.disposable.IDisposable}\n */\ngoog.Disposable \x3d function() {\n  /**\n   * If monitoring the goog.Disposable instances is enabled, stores the creation\n   * stack trace of the Disposable instance.\n   * @type {string|undefined}\n   */\n  this.creationStack;\n\n  if (goog.Disposable.MONITORING_MODE !\x3d goog.Disposable.MonitoringMode.OFF) {\n    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {\n      this.creationStack \x3d new Error().stack;\n    }\n    goog.Disposable.instances_[goog.getUid(this)] \x3d this;\n  }\n  // Support sealing\n  this.disposed_ \x3d this.disposed_;\n  this.onDisposeCallbacks_ \x3d this.onDisposeCallbacks_;\n};\n\n\n/**\n * @enum {number} Different monitoring modes for Disposable.\n */\ngoog.Disposable.MonitoringMode \x3d {\n  /**\n   * No monitoring.\n   */\n  OFF: 0,\n  /**\n   * Creating and disposing the goog.Disposable instances is monitored. All\n   * disposable objects need to call the `goog.Disposable` base\n   * constructor. The PERMANENT mode must be switched on before creating any\n   * goog.Disposable instances.\n   */\n  PERMANENT: 1,\n  /**\n   * INTERACTIVE mode can be switched on and off on the fly without producing\n   * errors. It also doesn\x27t warn if the disposable objects don\x27t call the\n   * `goog.Disposable` base constructor.\n   */\n  INTERACTIVE: 2\n};\n\n\n/**\n * @define {number} The monitoring mode of the goog.Disposable\n *     instances. Default is OFF. Switching on the monitoring is only\n *     recommended for debugging because it has a significant impact on\n *     performance and memory usage. If switched off, the monitoring code\n *     compiles down to 0 bytes.\n */\ngoog.define(\x27goog.Disposable.MONITORING_MODE\x27, 0);\n\n\n/**\n * @define {boolean} Whether to attach creation stack to each created disposable\n *     instance; This is only relevant for when MonitoringMode !\x3d OFF.\n */\ngoog.define(\x27goog.Disposable.INCLUDE_STACK_ON_CREATION\x27, true);\n\n\n/**\n * Maps the unique ID of every undisposed `goog.Disposable` object to\n * the object itself.\n * @type {!Object\x3cnumber, !goog.Disposable\x3e}\n * @private\n */\ngoog.Disposable.instances_ \x3d {};\n\n\n/**\n * @return {!Array\x3c!goog.Disposable\x3e} All `goog.Disposable` objects that\n *     haven\x27t been disposed of.\n */\ngoog.Disposable.getUndisposedObjects \x3d function() {\n  var ret \x3d [];\n  for (var id in goog.Disposable.instances_) {\n    if (goog.Disposable.instances_.hasOwnProperty(id)) {\n      ret.push(goog.Disposable.instances_[Number(id)]);\n    }\n  }\n  return ret;\n};\n\n\n/**\n * Clears the registry of undisposed objects but doesn\x27t dispose of them.\n */\ngoog.Disposable.clearUndisposedObjects \x3d function() {\n  goog.Disposable.instances_ \x3d {};\n};\n\n\n/**\n * Whether the object has been disposed of.\n * @type {boolean}\n * @private\n */\ngoog.Disposable.prototype.disposed_ \x3d false;\n\n\n/**\n * Callbacks to invoke when this object is disposed.\n * @type {Array\x3c!Function\x3e}\n * @private\n */\ngoog.Disposable.prototype.onDisposeCallbacks_;\n\n\n/**\n * @return {boolean} Whether the object has been disposed of.\n * @override\n */\ngoog.Disposable.prototype.isDisposed \x3d function() {\n  return this.disposed_;\n};\n\n\n/**\n * @return {boolean} Whether the object has been disposed of.\n * @deprecated Use {@link #isDisposed} instead.\n */\ngoog.Disposable.prototype.getDisposed \x3d goog.Disposable.prototype.isDisposed;\n\n\n/**\n * Disposes of the object. If the object hasn\x27t already been disposed of, calls\n * {@link #disposeInternal}. Classes that extend `goog.Disposable` should\n * override {@link #disposeInternal} in order to delete references to COM\n * objects, DOM nodes, and other disposable objects. Reentrant.\n *\n * @return {void} Nothing.\n * @override\n */\ngoog.Disposable.prototype.dispose \x3d function() {\n  if (!this.disposed_) {\n    // Set disposed_ to true first, in case during the chain of disposal this\n    // gets disposed recursively.\n    this.disposed_ \x3d true;\n    this.disposeInternal();\n    if (goog.Disposable.MONITORING_MODE !\x3d goog.Disposable.MonitoringMode.OFF) {\n      var uid \x3d goog.getUid(this);\n      if (goog.Disposable.MONITORING_MODE \x3d\x3d\n              goog.Disposable.MonitoringMode.PERMANENT \x26\x26\n          !goog.Disposable.instances_.hasOwnProperty(uid)) {\n        throw new Error(\n            this + \x27 did not call the goog.Disposable base \x27 +\n            \x27constructor or was disposed of after a clearUndisposedObjects \x27 +\n            \x27call\x27);\n      }\n      if (goog.Disposable.MONITORING_MODE !\x3d\n              goog.Disposable.MonitoringMode.OFF \x26\x26\n          this.onDisposeCallbacks_ \x26\x26 this.onDisposeCallbacks_.length \x3e 0) {\n        throw new Error(\n            this + \x27 did not empty its onDisposeCallbacks queue. This \x27 +\n            \x27probably means it overrode dispose() or disposeInternal() \x27 +\n            \x27without calling the superclass\\\x27 method.\x27);\n      }\n      delete goog.Disposable.instances_[uid];\n    }\n  }\n};\n\n\n/**\n * Associates a disposable object with this object so that they will be disposed\n * together.\n * @param {goog.disposable.IDisposable} disposable that will be disposed when\n *     this object is disposed.\n */\ngoog.Disposable.prototype.registerDisposable \x3d function(disposable) {\n  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));\n};\n\n\n/**\n * Invokes a callback function when this object is disposed. Callbacks are\n * invoked in the order in which they were added. If a callback is added to\n * an already disposed Disposable, it will be called immediately.\n * @param {function(this:T):?} callback The callback function.\n * @param {T\x3d} opt_scope An optional scope to call the callback in.\n * @template T\n */\ngoog.Disposable.prototype.addOnDisposeCallback \x3d function(callback, opt_scope) {\n  if (this.disposed_) {\n    goog.isDef(opt_scope) ? callback.call(opt_scope) : callback();\n    return;\n  }\n  if (!this.onDisposeCallbacks_) {\n    this.onDisposeCallbacks_ \x3d [];\n  }\n\n  this.onDisposeCallbacks_.push(\n      goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);\n};\n\n\n/**\n * Deletes or nulls out any references to COM objects, DOM nodes, or other\n * disposable objects. Classes that extend `goog.Disposable` should\n * override this method.\n * Not reentrant. To avoid calling it twice, it must only be called from the\n * subclass\x27 `disposeInternal` method. Everywhere else the public\n * `dispose` method must be used.\n * For example:\n * \x3cpre\x3e\n *   mypackage.MyClass \x3d function() {\n *     mypackage.MyClass.base(this, \x27constructor\x27);\n *     // Constructor logic specific to MyClass.\n *     ...\n *   };\n *   goog.inherits(mypackage.MyClass, goog.Disposable);\n *\n *   mypackage.MyClass.prototype.disposeInternal \x3d function() {\n *     // Dispose logic specific to MyClass.\n *     ...\n *     // Call superclass\x27s disposeInternal at the end of the subclass\x27s, like\n *     // in C++, to avoid hard-to-catch issues.\n *     mypackage.MyClass.base(this, \x27disposeInternal\x27);\n *   };\n * \x3c/pre\x3e\n * @protected\n */\ngoog.Disposable.prototype.disposeInternal \x3d function() {\n  if (this.onDisposeCallbacks_) {\n    while (this.onDisposeCallbacks_.length) {\n      this.onDisposeCallbacks_.shift()();\n    }\n  }\n};\n\n\n/**\n * Returns True if we can verify the object is disposed.\n * Calls `isDisposed` on the argument if it supports it.  If obj\n * is not an object with an isDisposed() method, return false.\n * @param {*} obj The object to investigate.\n * @return {boolean} True if we can verify the object is disposed.\n */\ngoog.Disposable.isDisposed \x3d function(obj) {\n  if (obj \x26\x26 typeof obj.isDisposed \x3d\x3d \x27function\x27) {\n    return obj.isDisposed();\n  }\n  return false;\n};\n\n\n/**\n * Calls `dispose` on the argument if it supports it. If obj is not an\n *     object with a dispose() method, this is a no-op.\n * @param {*} obj The object to dispose of.\n */\ngoog.dispose \x3d function(obj) {\n  if (obj \x26\x26 typeof obj.dispose \x3d\x3d \x27function\x27) {\n    obj.dispose();\n  }\n};\n\n\n/**\n * Calls `dispose` on each member of the list that supports it. (If the\n * member is an ArrayLike, then `goog.disposeAll()` will be called\n * recursively on each of its members.) If the member is not an object with a\n * `dispose()` method, then it is ignored.\n * @param {...*} var_args The list.\n */\ngoog.disposeAll \x3d function(var_args) {\n  for (var i \x3d 0, len \x3d arguments.length; i \x3c len; ++i) {\n    var disposable \x3d arguments[i];\n    if (goog.isArrayLike(disposable)) {\n      goog.disposeAll.apply(null, disposable);\n    } else {\n      goog.dispose(disposable);\n    }\n  }\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/disposable/disposable.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/events/eventid.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ngoog.provide(\x27goog.events.EventId\x27);\n\n\n\n/**\n * A templated class that is used when registering for events. Typical usage:\n *\n *    /** @type {goog.events.EventId\x3cMyEventObj\x3e} *\\\n *    var myEventId \x3d new goog.events.EventId(\n *        goog.events.getUniqueId((\x27someEvent\x27));\n *\n *    // No need to cast or declare here since the compiler knows the\n *    // correct type of \x27evt\x27 (MyEventObj).\n *    something.listen(myEventId, function(evt) {});\n *\n * @param {string} eventId\n * @template T\n * @constructor\n * @struct\n * @final\n */\ngoog.events.EventId \x3d function(eventId) {\n  /** @const */ this.id \x3d eventId;\n};\n\n\n/**\n * @override\n */\ngoog.events.EventId.prototype.toString \x3d function() {\n  return this.id;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/events/eventid.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/events/event.js";
eval("// Copyright 2005 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A base class for event objects.\n *\n * @author pupius@google.com (Daniel Pupius)\n */\n\n\ngoog.provide(\x27goog.events.Event\x27);\ngoog.provide(\x27goog.events.EventLike\x27);\n\n/**\n * goog.events.Event no longer depends on goog.Disposable. Keep requiring\n * goog.Disposable here to not break projects which assume this dependency.\n * @suppress {extraRequire}\n */\ngoog.require(\x27goog.Disposable\x27);\ngoog.require(\x27goog.events.EventId\x27);\n\n\n/**\n * A typedef for event like objects that are dispatchable via the\n * goog.events.dispatchEvent function. strings are treated as the type for a\n * goog.events.Event. Objects are treated as an extension of a new\n * goog.events.Event with the type property of the object being used as the type\n * of the Event.\n * @typedef {string|Object|goog.events.Event|goog.events.EventId}\n */\ngoog.events.EventLike;\n\n\n\n/**\n * A base class for event objects, so that they can support preventDefault and\n * stopPropagation.\n *\n * @suppress {underscore} Several properties on this class are technically\n *     public, but referencing these properties outside this package is strongly\n *     discouraged.\n *\n * @param {string|!goog.events.EventId} type Event Type.\n * @param {Object\x3d} opt_target Reference to the object that is the target of\n *     this event. It has to implement the `EventTarget` interface\n *     declared at {@link http://developer.mozilla.org/en/DOM/EventTarget}.\n * @constructor\n */\ngoog.events.Event \x3d function(type, opt_target) {\n  /**\n   * Event type.\n   * @type {string}\n   */\n  this.type \x3d type instanceof goog.events.EventId ? String(type) : type;\n\n  /**\n   * TODO(tbreisacher): The type should probably be\n   * EventTarget|goog.events.EventTarget.\n   *\n   * Target of the event.\n   * @type {Object|undefined}\n   */\n  this.target \x3d opt_target;\n\n  /**\n   * Object that had the listener attached.\n   * @type {Object|undefined}\n   */\n  this.currentTarget \x3d this.target;\n\n  /**\n   * Whether to cancel the event in internal capture/bubble processing for IE.\n   * @type {boolean}\n   * @public\n   */\n  this.propagationStopped_ \x3d false;\n\n  /**\n   * Whether the default action has been prevented.\n   * This is a property to match the W3C specification at\n   * {@link http://www.w3.org/TR/DOM-Level-3-Events/\n   * #events-event-type-defaultPrevented}.\n   * Must be treated as read-only outside the class.\n   * @type {boolean}\n   */\n  this.defaultPrevented \x3d false;\n\n  /**\n   * Return value for in internal capture/bubble processing for IE.\n   * @type {boolean}\n   * @public\n   */\n  this.returnValue_ \x3d true;\n};\n\n\n/**\n * Stops event propagation.\n */\ngoog.events.Event.prototype.stopPropagation \x3d function() {\n  this.propagationStopped_ \x3d true;\n};\n\n\n/**\n * Prevents the default action, for example a link redirecting to a url.\n */\ngoog.events.Event.prototype.preventDefault \x3d function() {\n  this.defaultPrevented \x3d true;\n  this.returnValue_ \x3d false;\n};\n\n\n/**\n * Stops the propagation of the event. It is equivalent to\n * `e.stopPropagation()`, but can be used as the callback argument of\n * {@link goog.events.listen} without declaring another function.\n * @param {!goog.events.Event} e An event.\n */\ngoog.events.Event.stopPropagation \x3d function(e) {\n  e.stopPropagation();\n};\n\n\n/**\n * Prevents the default action. It is equivalent to\n * `e.preventDefault()`, but can be used as the callback argument of\n * {@link goog.events.listen} without declaring another function.\n * @param {!goog.events.Event} e An event.\n */\ngoog.events.Event.preventDefault \x3d function(e) {\n  e.preventDefault();\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/events/event.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/events/eventtype.js";
eval("// Copyright 2010 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Event Types.\n *\n * @author arv@google.com (Erik Arvidsson)\n * @author mirkov@google.com (Mirko Visontai)\n */\n\n\ngoog.provide(\x27goog.events.EventType\x27);\ngoog.provide(\x27goog.events.PointerAsMouseEventType\x27);\ngoog.provide(\x27goog.events.PointerFallbackEventType\x27);\n\ngoog.require(\x27goog.events.BrowserFeature\x27);\ngoog.require(\x27goog.userAgent\x27);\n\n\n/**\n * Returns a prefixed event name for the current browser.\n * @param {string} eventName The name of the event.\n * @return {string} The prefixed event name.\n * @suppress {missingRequire|missingProvide}\n * @private\n */\ngoog.events.getVendorPrefixedName_ \x3d function(eventName) {\n  return goog.userAgent.WEBKIT ?\n      \x27webkit\x27 + eventName :\n      (goog.userAgent.OPERA ? \x27o\x27 + eventName.toLowerCase() :\n                              eventName.toLowerCase());\n};\n\n\n/**\n * Constants for event names.\n * @enum {string}\n */\ngoog.events.EventType \x3d {\n  // Mouse events\n  CLICK: \x27click\x27,\n  RIGHTCLICK: \x27rightclick\x27,\n  DBLCLICK: \x27dblclick\x27,\n  MOUSEDOWN: \x27mousedown\x27,\n  MOUSEUP: \x27mouseup\x27,\n  MOUSEOVER: \x27mouseover\x27,\n  MOUSEOUT: \x27mouseout\x27,\n  MOUSEMOVE: \x27mousemove\x27,\n  MOUSEENTER: \x27mouseenter\x27,\n  MOUSELEAVE: \x27mouseleave\x27,\n\n  // Non-existent event; will never fire. This exists as a mouse counterpart to\n  // POINTERCANCEL.\n  MOUSECANCEL: \x27mousecancel\x27,\n\n  // Selection events.\n  // https://www.w3.org/TR/selection-api/\n  SELECTIONCHANGE: \x27selectionchange\x27,\n  SELECTSTART: \x27selectstart\x27,  // IE, Safari, Chrome\n\n  // Wheel events\n  // http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents\n  WHEEL: \x27wheel\x27,\n\n  // Key events\n  KEYPRESS: \x27keypress\x27,\n  KEYDOWN: \x27keydown\x27,\n  KEYUP: \x27keyup\x27,\n\n  // Focus\n  BLUR: \x27blur\x27,\n  FOCUS: \x27focus\x27,\n  DEACTIVATE: \x27deactivate\x27,  // IE only\n  FOCUSIN: \x27focusin\x27,\n  FOCUSOUT: \x27focusout\x27,\n\n  // Forms\n  CHANGE: \x27change\x27,\n  RESET: \x27reset\x27,\n  SELECT: \x27select\x27,\n  SUBMIT: \x27submit\x27,\n  INPUT: \x27input\x27,\n  PROPERTYCHANGE: \x27propertychange\x27,  // IE only\n\n  // Drag and drop\n  DRAGSTART: \x27dragstart\x27,\n  DRAG: \x27drag\x27,\n  DRAGENTER: \x27dragenter\x27,\n  DRAGOVER: \x27dragover\x27,\n  DRAGLEAVE: \x27dragleave\x27,\n  DROP: \x27drop\x27,\n  DRAGEND: \x27dragend\x27,\n\n  // Touch events\n  // Note that other touch events exist, but we should follow the W3C list here.\n  // http://www.w3.org/TR/touch-events/#list-of-touchevent-types\n  TOUCHSTART: \x27touchstart\x27,\n  TOUCHMOVE: \x27touchmove\x27,\n  TOUCHEND: \x27touchend\x27,\n  TOUCHCANCEL: \x27touchcancel\x27,\n\n  // Misc\n  BEFOREUNLOAD: \x27beforeunload\x27,\n  CONSOLEMESSAGE: \x27consolemessage\x27,\n  CONTEXTMENU: \x27contextmenu\x27,\n  DEVICECHANGE: \x27devicechange\x27,\n  DEVICEMOTION: \x27devicemotion\x27,\n  DEVICEORIENTATION: \x27deviceorientation\x27,\n  DOMCONTENTLOADED: \x27DOMContentLoaded\x27,\n  ERROR: \x27error\x27,\n  HELP: \x27help\x27,\n  LOAD: \x27load\x27,\n  LOSECAPTURE: \x27losecapture\x27,\n  ORIENTATIONCHANGE: \x27orientationchange\x27,\n  READYSTATECHANGE: \x27readystatechange\x27,\n  RESIZE: \x27resize\x27,\n  SCROLL: \x27scroll\x27,\n  UNLOAD: \x27unload\x27,\n\n  // Media events\n  CANPLAY: \x27canplay\x27,\n  CANPLAYTHROUGH: \x27canplaythrough\x27,\n  DURATIONCHANGE: \x27durationchange\x27,\n  EMPTIED: \x27emptied\x27,\n  ENDED: \x27ended\x27,\n  LOADEDDATA: \x27loadeddata\x27,\n  LOADEDMETADATA: \x27loadedmetadata\x27,\n  PAUSE: \x27pause\x27,\n  PLAY: \x27play\x27,\n  PLAYING: \x27playing\x27,\n  RATECHANGE: \x27ratechange\x27,\n  SEEKED: \x27seeked\x27,\n  SEEKING: \x27seeking\x27,\n  STALLED: \x27stalled\x27,\n  SUSPEND: \x27suspend\x27,\n  TIMEUPDATE: \x27timeupdate\x27,\n  VOLUMECHANGE: \x27volumechange\x27,\n  WAITING: \x27waiting\x27,\n\n  // Media Source Extensions events\n  // https://www.w3.org/TR/media-source/#mediasource-events\n  SOURCEOPEN: \x27sourceopen\x27,\n  SOURCEENDED: \x27sourceended\x27,\n  SOURCECLOSED: \x27sourceclosed\x27,\n  // https://www.w3.org/TR/media-source/#sourcebuffer-events\n  ABORT: \x27abort\x27,\n  UPDATE: \x27update\x27,\n  UPDATESTART: \x27updatestart\x27,\n  UPDATEEND: \x27updateend\x27,\n\n  // HTML 5 History events\n  // See http://www.w3.org/TR/html5/browsers.html#event-definitions-0\n  HASHCHANGE: \x27hashchange\x27,\n  PAGEHIDE: \x27pagehide\x27,\n  PAGESHOW: \x27pageshow\x27,\n  POPSTATE: \x27popstate\x27,\n\n  // Copy and Paste\n  // Support is limited. Make sure it works on your favorite browser\n  // before using.\n  // http://www.quirksmode.org/dom/events/cutcopypaste.html\n  COPY: \x27copy\x27,\n  PASTE: \x27paste\x27,\n  CUT: \x27cut\x27,\n  BEFORECOPY: \x27beforecopy\x27,\n  BEFORECUT: \x27beforecut\x27,\n  BEFOREPASTE: \x27beforepaste\x27,\n\n  // HTML5 online/offline events.\n  // http://www.w3.org/TR/offline-webapps/#related\n  ONLINE: \x27online\x27,\n  OFFLINE: \x27offline\x27,\n\n  // HTML 5 worker events\n  MESSAGE: \x27message\x27,\n  CONNECT: \x27connect\x27,\n\n  // Service Worker Events - ServiceWorkerGlobalScope context\n  // See https://w3c.github.io/ServiceWorker/#execution-context-events\n  // Note: message event defined in worker events section\n  INSTALL: \x27install\x27,\n  ACTIVATE: \x27activate\x27,\n  FETCH: \x27fetch\x27,\n  FOREIGNFETCH: \x27foreignfetch\x27,\n  MESSAGEERROR: \x27messageerror\x27,\n\n  // Service Worker Events - Document context\n  // See https://w3c.github.io/ServiceWorker/#document-context-events\n  STATECHANGE: \x27statechange\x27,\n  UPDATEFOUND: \x27updatefound\x27,\n  CONTROLLERCHANGE: \x27controllerchange\x27,\n\n  // CSS animation events.\n  /** @suppress {missingRequire} */\n  ANIMATIONSTART: goog.events.getVendorPrefixedName_(\x27AnimationStart\x27),\n  /** @suppress {missingRequire} */\n  ANIMATIONEND: goog.events.getVendorPrefixedName_(\x27AnimationEnd\x27),\n  /** @suppress {missingRequire} */\n  ANIMATIONITERATION: goog.events.getVendorPrefixedName_(\x27AnimationIteration\x27),\n\n  // CSS transition events. Based on the browser support described at:\n  // https://developer.mozilla.org/en/css/css_transitions#Browser_compatibility\n  /** @suppress {missingRequire} */\n  TRANSITIONEND: goog.events.getVendorPrefixedName_(\x27TransitionEnd\x27),\n\n  // W3C Pointer Events\n  // http://www.w3.org/TR/pointerevents/\n  POINTERDOWN: \x27pointerdown\x27,\n  POINTERUP: \x27pointerup\x27,\n  POINTERCANCEL: \x27pointercancel\x27,\n  POINTERMOVE: \x27pointermove\x27,\n  POINTEROVER: \x27pointerover\x27,\n  POINTEROUT: \x27pointerout\x27,\n  POINTERENTER: \x27pointerenter\x27,\n  POINTERLEAVE: \x27pointerleave\x27,\n  GOTPOINTERCAPTURE: \x27gotpointercapture\x27,\n  LOSTPOINTERCAPTURE: \x27lostpointercapture\x27,\n\n  // IE specific events.\n  // See http://msdn.microsoft.com/en-us/library/ie/hh772103(v\x3dvs.85).aspx\n  // Note: these events will be supplanted in IE11.\n  MSGESTURECHANGE: \x27MSGestureChange\x27,\n  MSGESTUREEND: \x27MSGestureEnd\x27,\n  MSGESTUREHOLD: \x27MSGestureHold\x27,\n  MSGESTURESTART: \x27MSGestureStart\x27,\n  MSGESTURETAP: \x27MSGestureTap\x27,\n  MSGOTPOINTERCAPTURE: \x27MSGotPointerCapture\x27,\n  MSINERTIASTART: \x27MSInertiaStart\x27,\n  MSLOSTPOINTERCAPTURE: \x27MSLostPointerCapture\x27,\n  MSPOINTERCANCEL: \x27MSPointerCancel\x27,\n  MSPOINTERDOWN: \x27MSPointerDown\x27,\n  MSPOINTERENTER: \x27MSPointerEnter\x27,\n  MSPOINTERHOVER: \x27MSPointerHover\x27,\n  MSPOINTERLEAVE: \x27MSPointerLeave\x27,\n  MSPOINTERMOVE: \x27MSPointerMove\x27,\n  MSPOINTEROUT: \x27MSPointerOut\x27,\n  MSPOINTEROVER: \x27MSPointerOver\x27,\n  MSPOINTERUP: \x27MSPointerUp\x27,\n\n  // Native IMEs/input tools events.\n  TEXT: \x27text\x27,\n  // The textInput event is supported in IE9+, but only in lower case. All other\n  // browsers use the camel-case event name.\n  TEXTINPUT: goog.userAgent.IE ? \x27textinput\x27 : \x27textInput\x27,\n  COMPOSITIONSTART: \x27compositionstart\x27,\n  COMPOSITIONUPDATE: \x27compositionupdate\x27,\n  COMPOSITIONEND: \x27compositionend\x27,\n\n  // The beforeinput event is initially only supported in Safari. See\n  // https://bugs.chromium.org/p/chromium/issues/detail?id\x3d342670 for Chrome\n  // implementation tracking.\n  BEFOREINPUT: \x27beforeinput\x27,\n\n  // Webview tag events\n  // See https://developer.chrome.com/apps/tags/webview\n  EXIT: \x27exit\x27,\n  LOADABORT: \x27loadabort\x27,\n  LOADCOMMIT: \x27loadcommit\x27,\n  LOADREDIRECT: \x27loadredirect\x27,\n  LOADSTART: \x27loadstart\x27,\n  LOADSTOP: \x27loadstop\x27,\n  RESPONSIVE: \x27responsive\x27,\n  SIZECHANGED: \x27sizechanged\x27,\n  UNRESPONSIVE: \x27unresponsive\x27,\n\n  // HTML5 Page Visibility API.  See details at\n  // `goog.labs.dom.PageVisibilityMonitor`.\n  VISIBILITYCHANGE: \x27visibilitychange\x27,\n\n  // LocalStorage event.\n  STORAGE: \x27storage\x27,\n\n  // DOM Level 2 mutation events (deprecated).\n  DOMSUBTREEMODIFIED: \x27DOMSubtreeModified\x27,\n  DOMNODEINSERTED: \x27DOMNodeInserted\x27,\n  DOMNODEREMOVED: \x27DOMNodeRemoved\x27,\n  DOMNODEREMOVEDFROMDOCUMENT: \x27DOMNodeRemovedFromDocument\x27,\n  DOMNODEINSERTEDINTODOCUMENT: \x27DOMNodeInsertedIntoDocument\x27,\n  DOMATTRMODIFIED: \x27DOMAttrModified\x27,\n  DOMCHARACTERDATAMODIFIED: \x27DOMCharacterDataModified\x27,\n\n  // Print events.\n  BEFOREPRINT: \x27beforeprint\x27,\n  AFTERPRINT: \x27afterprint\x27,\n\n  // Web app manifest events.\n  BEFOREINSTALLPROMPT: \x27beforeinstallprompt\x27,\n  APPINSTALLED: \x27appinstalled\x27\n};\n\n\n/**\n * Returns one of the given pointer fallback event names in order of preference:\n *   1. pointerEventName\n *   2. msPointerEventName\n *   3. mouseEventName\n * @param {string} pointerEventName\n * @param {string} msPointerEventName\n * @param {string} mouseEventName\n * @return {string} The supported pointer or mouse event name.\n * @private\n */\ngoog.events.getPointerFallbackEventName_ \x3d function(\n    pointerEventName, msPointerEventName, mouseEventName) {\n  if (goog.events.BrowserFeature.POINTER_EVENTS) {\n    return pointerEventName;\n  }\n  if (goog.events.BrowserFeature.MSPOINTER_EVENTS) {\n    return msPointerEventName;\n  }\n  return mouseEventName;\n};\n\n\n/**\n * Constants for pointer event names that fall back to corresponding mouse event\n * names on unsupported platforms. These are intended to be drop-in replacements\n * for corresponding values in `goog.events.EventType`.\n * @enum {string}\n */\ngoog.events.PointerFallbackEventType \x3d {\n  POINTERDOWN: goog.events.getPointerFallbackEventName_(\n      goog.events.EventType.POINTERDOWN, goog.events.EventType.MSPOINTERDOWN,\n      goog.events.EventType.MOUSEDOWN),\n  POINTERUP: goog.events.getPointerFallbackEventName_(\n      goog.events.EventType.POINTERUP, goog.events.EventType.MSPOINTERUP,\n      goog.events.EventType.MOUSEUP),\n  POINTERCANCEL: goog.events.getPointerFallbackEventName_(\n      goog.events.EventType.POINTERCANCEL,\n      goog.events.EventType.MSPOINTERCANCEL,\n      // When falling back to mouse events, there is no MOUSECANCEL equivalent\n      // of POINTERCANCEL. In this case POINTERUP already falls back to MOUSEUP\n      // which represents both UP and CANCEL. POINTERCANCEL does not fall back\n      // to MOUSEUP to prevent listening twice on the same event.\n      goog.events.EventType.MOUSECANCEL),\n  POINTERMOVE: goog.events.getPointerFallbackEventName_(\n      goog.events.EventType.POINTERMOVE, goog.events.EventType.MSPOINTERMOVE,\n      goog.events.EventType.MOUSEMOVE),\n  POINTEROVER: goog.events.getPointerFallbackEventName_(\n      goog.events.EventType.POINTEROVER, goog.events.EventType.MSPOINTEROVER,\n      goog.events.EventType.MOUSEOVER),\n  POINTEROUT: goog.events.getPointerFallbackEventName_(\n      goog.events.EventType.POINTEROUT, goog.events.EventType.MSPOINTEROUT,\n      goog.events.EventType.MOUSEOUT),\n  POINTERENTER: goog.events.getPointerFallbackEventName_(\n      goog.events.EventType.POINTERENTER, goog.events.EventType.MSPOINTERENTER,\n      goog.events.EventType.MOUSEENTER),\n  POINTERLEAVE: goog.events.getPointerFallbackEventName_(\n      goog.events.EventType.POINTERLEAVE, goog.events.EventType.MSPOINTERLEAVE,\n      goog.events.EventType.MOUSELEAVE)\n};\n\n\n/**\n * An alias for `goog.events.EventType.MOUSE*` event types that is overridden by\n * corresponding `POINTER*` event types.\n * @enum {string}\n */\ngoog.events.PointerAsMouseEventType \x3d {\n  MOUSEDOWN: goog.events.PointerFallbackEventType.POINTERDOWN,\n  MOUSEUP: goog.events.PointerFallbackEventType.POINTERUP,\n  MOUSECANCEL: goog.events.PointerFallbackEventType.POINTERCANCEL,\n  MOUSEMOVE: goog.events.PointerFallbackEventType.POINTERMOVE,\n  MOUSEOVER: goog.events.PointerFallbackEventType.POINTEROVER,\n  MOUSEOUT: goog.events.PointerFallbackEventType.POINTEROUT,\n  MOUSEENTER: goog.events.PointerFallbackEventType.POINTERENTER,\n  MOUSELEAVE: goog.events.PointerFallbackEventType.POINTERLEAVE\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/events/eventtype.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/events/browserevent.js";
eval("// Copyright 2005 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A patched, standardized event object for browser events.\n *\n * \x3cpre\x3e\n * The patched event object contains the following members:\n * - type           {string}    Event type, e.g. \x27click\x27\n * - target         {Object}    The element that actually triggered the event\n * - currentTarget  {Object}    The element the listener is attached to\n * - relatedTarget  {Object}    For mouseover and mouseout, the previous object\n * - offsetX        {number}    X-coordinate relative to target\n * - offsetY        {number}    Y-coordinate relative to target\n * - clientX        {number}    X-coordinate relative to viewport\n * - clientY        {number}    Y-coordinate relative to viewport\n * - screenX        {number}    X-coordinate relative to the edge of the screen\n * - screenY        {number}    Y-coordinate relative to the edge of the screen\n * - button         {number}    Mouse button. Use isButton() to test.\n * - keyCode        {number}    Key-code\n * - ctrlKey        {boolean}   Was ctrl key depressed\n * - altKey         {boolean}   Was alt key depressed\n * - shiftKey       {boolean}   Was shift key depressed\n * - metaKey        {boolean}   Was meta key depressed\n * - pointerId      {number}    Pointer ID\n * - pointerType    {string}    Pointer type, e.g. \x27mouse\x27, \x27pen\x27, or \x27touch\x27\n * - defaultPrevented {boolean} Whether the default action has been prevented\n * - state          {Object}    History state object\n *\n * NOTE: The keyCode member contains the raw browser keyCode. For normalized\n * key and character code use {@link goog.events.KeyHandler}.\n * \x3c/pre\x3e\n *\n * @author pupius@google.com (Daniel Pupius)\n * @author arv@google.com (Erik Arvidsson)\n */\n\ngoog.provide(\x27goog.events.BrowserEvent\x27);\ngoog.provide(\x27goog.events.BrowserEvent.MouseButton\x27);\ngoog.provide(\x27goog.events.BrowserEvent.PointerType\x27);\n\ngoog.require(\x27goog.debug\x27);\ngoog.require(\x27goog.events.BrowserFeature\x27);\ngoog.require(\x27goog.events.Event\x27);\ngoog.require(\x27goog.events.EventType\x27);\ngoog.require(\x27goog.reflect\x27);\ngoog.require(\x27goog.userAgent\x27);\n\n\n\n/**\n * Accepts a browser event object and creates a patched, cross browser event\n * object.\n * The content of this object will not be initialized if no event object is\n * provided. If this is the case, init() needs to be invoked separately.\n * @param {Event\x3d} opt_e Browser event object.\n * @param {EventTarget\x3d} opt_currentTarget Current target for event.\n * @constructor\n * @extends {goog.events.Event}\n */\ngoog.events.BrowserEvent \x3d function(opt_e, opt_currentTarget) {\n  goog.events.BrowserEvent.base(this, \x27constructor\x27, opt_e ? opt_e.type : \x27\x27);\n\n  /**\n   * Target that fired the event.\n   * @override\n   * @type {Node}\n   */\n  this.target \x3d null;\n\n  /**\n   * Node that had the listener attached.\n   * @override\n   * @type {Node|undefined}\n   */\n  this.currentTarget \x3d null;\n\n  /**\n   * For mouseover and mouseout events, the related object for the event.\n   * @type {Node}\n   */\n  this.relatedTarget \x3d null;\n\n  /**\n   * X-coordinate relative to target.\n   * @type {number}\n   */\n  this.offsetX \x3d 0;\n\n  /**\n   * Y-coordinate relative to target.\n   * @type {number}\n   */\n  this.offsetY \x3d 0;\n\n  /**\n   * X-coordinate relative to the window.\n   * @type {number}\n   */\n  this.clientX \x3d 0;\n\n  /**\n   * Y-coordinate relative to the window.\n   * @type {number}\n   */\n  this.clientY \x3d 0;\n\n  /**\n   * X-coordinate relative to the monitor.\n   * @type {number}\n   */\n  this.screenX \x3d 0;\n\n  /**\n   * Y-coordinate relative to the monitor.\n   * @type {number}\n   */\n  this.screenY \x3d 0;\n\n  /**\n   * Which mouse button was pressed.\n   * @type {number}\n   */\n  this.button \x3d 0;\n\n  /**\n   * Key of key press.\n   * @type {string}\n   */\n  this.key \x3d \x27\x27;\n\n  /**\n   * Keycode of key press.\n   * @type {number}\n   */\n  this.keyCode \x3d 0;\n\n  /**\n   * Keycode of key press.\n   * @type {number}\n   */\n  this.charCode \x3d 0;\n\n  /**\n   * Whether control was pressed at time of event.\n   * @type {boolean}\n   */\n  this.ctrlKey \x3d false;\n\n  /**\n   * Whether alt was pressed at time of event.\n   * @type {boolean}\n   */\n  this.altKey \x3d false;\n\n  /**\n   * Whether shift was pressed at time of event.\n   * @type {boolean}\n   */\n  this.shiftKey \x3d false;\n\n  /**\n   * Whether the meta key was pressed at time of event.\n   * @type {boolean}\n   */\n  this.metaKey \x3d false;\n\n  /**\n   * History state object, only set for PopState events where it\x27s a copy of the\n   * state object provided to pushState or replaceState.\n   * @type {Object}\n   */\n  this.state \x3d null;\n\n  /**\n   * Whether the default platform modifier key was pressed at time of event.\n   * (This is control for all platforms except Mac, where it\x27s Meta.)\n   * @type {boolean}\n   */\n  this.platformModifierKey \x3d false;\n\n  /**\n   * @type {number}\n   */\n  this.pointerId \x3d 0;\n\n  /**\n   * @type {string}\n   */\n  this.pointerType \x3d \x27\x27;\n\n  /**\n   * The browser event object.\n   * @private {Event}\n   */\n  this.event_ \x3d null;\n\n  if (opt_e) {\n    this.init(opt_e, opt_currentTarget);\n  }\n};\ngoog.inherits(goog.events.BrowserEvent, goog.events.Event);\n\n\n/**\n * Normalized button constants for the mouse.\n * @enum {number}\n */\ngoog.events.BrowserEvent.MouseButton \x3d {\n  LEFT: 0,\n  MIDDLE: 1,\n  RIGHT: 2\n};\n\n\n/**\n * Normalized pointer type constants for pointer events.\n * @enum {string}\n */\ngoog.events.BrowserEvent.PointerType \x3d {\n  MOUSE: \x27mouse\x27,\n  PEN: \x27pen\x27,\n  TOUCH: \x27touch\x27\n};\n\n\n/**\n * Static data for mapping mouse buttons.\n * @type {!Array\x3cnumber\x3e}\n * @deprecated Use `goog.events.BrowserEvent.IE_BUTTON_MAP` instead.\n */\ngoog.events.BrowserEvent.IEButtonMap \x3d goog.debug.freeze([\n  1,  // LEFT\n  4,  // MIDDLE\n  2   // RIGHT\n]);\n\n\n/**\n * Static data for mapping mouse buttons.\n * @const {!Array\x3cnumber\x3e}\n */\ngoog.events.BrowserEvent.IE_BUTTON_MAP \x3d goog.events.BrowserEvent.IEButtonMap;\n\n\n/**\n * Static data for mapping MSPointerEvent types to PointerEvent types.\n * @const {!Object\x3cnumber, goog.events.BrowserEvent.PointerType\x3e}\n */\ngoog.events.BrowserEvent.IE_POINTER_TYPE_MAP \x3d goog.debug.freeze({\n  2: goog.events.BrowserEvent.PointerType.TOUCH,\n  3: goog.events.BrowserEvent.PointerType.PEN,\n  4: goog.events.BrowserEvent.PointerType.MOUSE\n});\n\n\n/**\n * Accepts a browser event object and creates a patched, cross browser event\n * object.\n * @param {Event} e Browser event object.\n * @param {EventTarget\x3d} opt_currentTarget Current target for event.\n */\ngoog.events.BrowserEvent.prototype.init \x3d function(e, opt_currentTarget) {\n  var type \x3d this.type \x3d e.type;\n\n  /**\n   * On touch devices use the first \x22changed touch\x22 as the relevant touch.\n   * @type {Touch}\n   */\n  var relevantTouch \x3d e.changedTouches ? e.changedTouches[0] : null;\n\n  // TODO(nicksantos): Change this.target to type EventTarget.\n  this.target \x3d /** @type {Node} */ (e.target) || e.srcElement;\n\n  // TODO(nicksantos): Change this.currentTarget to type EventTarget.\n  this.currentTarget \x3d /** @type {Node} */ (opt_currentTarget);\n\n  var relatedTarget \x3d /** @type {Node} */ (e.relatedTarget);\n  if (relatedTarget) {\n    // There\x27s a bug in FireFox where sometimes, relatedTarget will be a\n    // chrome element, and accessing any property of it will get a permission\n    // denied exception. See:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id\x3d497780\n    if (goog.userAgent.GECKO) {\n      if (!goog.reflect.canAccessProperty(relatedTarget, \x27nodeName\x27)) {\n        relatedTarget \x3d null;\n      }\n    }\n  } else if (type \x3d\x3d goog.events.EventType.MOUSEOVER) {\n    relatedTarget \x3d e.fromElement;\n  } else if (type \x3d\x3d goog.events.EventType.MOUSEOUT) {\n    relatedTarget \x3d e.toElement;\n  }\n\n  this.relatedTarget \x3d relatedTarget;\n\n  if (!goog.isNull(relevantTouch)) {\n    this.clientX \x3d relevantTouch.clientX !\x3d\x3d undefined ? relevantTouch.clientX :\n                                                         relevantTouch.pageX;\n    this.clientY \x3d relevantTouch.clientY !\x3d\x3d undefined ? relevantTouch.clientY :\n                                                         relevantTouch.pageY;\n    this.screenX \x3d relevantTouch.screenX || 0;\n    this.screenY \x3d relevantTouch.screenY || 0;\n  } else {\n    // Webkit emits a lame warning whenever layerX/layerY is accessed.\n    // http://code.google.com/p/chromium/issues/detail?id\x3d101733\n    this.offsetX \x3d (goog.userAgent.WEBKIT || e.offsetX !\x3d\x3d undefined) ?\n        e.offsetX :\n        e.layerX;\n    this.offsetY \x3d (goog.userAgent.WEBKIT || e.offsetY !\x3d\x3d undefined) ?\n        e.offsetY :\n        e.layerY;\n    this.clientX \x3d e.clientX !\x3d\x3d undefined ? e.clientX : e.pageX;\n    this.clientY \x3d e.clientY !\x3d\x3d undefined ? e.clientY : e.pageY;\n    this.screenX \x3d e.screenX || 0;\n    this.screenY \x3d e.screenY || 0;\n  }\n\n  this.button \x3d e.button;\n\n  this.keyCode \x3d e.keyCode || 0;\n  this.key \x3d e.key || \x27\x27;\n  this.charCode \x3d e.charCode || (type \x3d\x3d \x27keypress\x27 ? e.keyCode : 0);\n  this.ctrlKey \x3d e.ctrlKey;\n  this.altKey \x3d e.altKey;\n  this.shiftKey \x3d e.shiftKey;\n  this.metaKey \x3d e.metaKey;\n  this.platformModifierKey \x3d goog.userAgent.MAC ? e.metaKey : e.ctrlKey;\n  this.pointerId \x3d e.pointerId || 0;\n  this.pointerType \x3d goog.events.BrowserEvent.getPointerType_(e);\n  this.state \x3d e.state;\n  this.event_ \x3d e;\n  if (e.defaultPrevented) {\n    this.preventDefault();\n  }\n};\n\n\n/**\n * Tests to see which button was pressed during the event. This is really only\n * useful in IE and Gecko browsers. And in IE, it\x27s only useful for\n * mousedown/mouseup events, because click only fires for the left mouse button.\n *\n * Safari 2 only reports the left button being clicked, and uses the value \x271\x27\n * instead of 0. Opera only reports a mousedown event for the middle button, and\n * no mouse events for the right button. Opera has default behavior for left and\n * middle click that can only be overridden via a configuration setting.\n *\n * There\x27s a nice table of this mess at http://www.unixpapa.com/js/mouse.html.\n *\n * @param {goog.events.BrowserEvent.MouseButton} button The button\n *     to test for.\n * @return {boolean} True if button was pressed.\n */\ngoog.events.BrowserEvent.prototype.isButton \x3d function(button) {\n  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {\n    if (this.type \x3d\x3d \x27click\x27) {\n      return button \x3d\x3d goog.events.BrowserEvent.MouseButton.LEFT;\n    } else {\n      return !!(\n          this.event_.button \x26 goog.events.BrowserEvent.IE_BUTTON_MAP[button]);\n    }\n  } else {\n    return this.event_.button \x3d\x3d button;\n  }\n};\n\n\n/**\n * Whether this has an \x22action\x22-producing mouse button.\n *\n * By definition, this includes left-click on windows/linux, and left-click\n * without the ctrl key on Macs.\n *\n * @return {boolean} The result.\n */\ngoog.events.BrowserEvent.prototype.isMouseActionButton \x3d function() {\n  // Webkit does not ctrl+click to be a right-click, so we\n  // normalize it to behave like Gecko and Opera.\n  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) \x26\x26\n      !(goog.userAgent.WEBKIT \x26\x26 goog.userAgent.MAC \x26\x26 this.ctrlKey);\n};\n\n\n/**\n * @override\n */\ngoog.events.BrowserEvent.prototype.stopPropagation \x3d function() {\n  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);\n  if (this.event_.stopPropagation) {\n    this.event_.stopPropagation();\n  } else {\n    this.event_.cancelBubble \x3d true;\n  }\n};\n\n\n/**\n * @override\n */\ngoog.events.BrowserEvent.prototype.preventDefault \x3d function() {\n  goog.events.BrowserEvent.superClass_.preventDefault.call(this);\n  var be \x3d this.event_;\n  if (!be.preventDefault) {\n    be.returnValue \x3d false;\n    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {\n\n      try {\n        // Most keys can be prevented using returnValue. Some special keys\n        // require setting the keyCode to -1 as well:\n        //\n        // In IE7:\n        // F3, F5, F10, F11, Ctrl+P, Crtl+O, Ctrl+F (these are taken from IE6)\n        //\n        // In IE8:\n        // Ctrl+P, Crtl+O, Ctrl+F (F1-F12 cannot be stopped through the event)\n        //\n        // We therefore do this for all function keys as well as when Ctrl key\n        // is pressed.\n        var VK_F1 \x3d 112;\n        var VK_F12 \x3d 123;\n        if (be.ctrlKey || be.keyCode \x3e\x3d VK_F1 \x26\x26 be.keyCode \x3c\x3d VK_F12) {\n          be.keyCode \x3d -1;\n        }\n      } catch (ex) {\n        // IE throws an \x27access denied\x27 exception when trying to change\n        // keyCode in some situations (e.g. srcElement is input[type\x3dfile],\n        // or srcElement is an anchor tag rewritten by parent\x27s innerHTML).\n        // Do nothing in this case.\n      }\n    }\n  } else {\n    be.preventDefault();\n  }\n};\n\n\n/**\n * @return {Event} The underlying browser event object.\n */\ngoog.events.BrowserEvent.prototype.getBrowserEvent \x3d function() {\n  return this.event_;\n};\n\n\n/**\n * Extracts the pointer type from the given event.\n * @param {!Event} e\n * @return {string} The pointer type, e.g. \x27mouse\x27, \x27pen\x27, or \x27touch\x27.\n * @private\n */\ngoog.events.BrowserEvent.getPointerType_ \x3d function(e) {\n  if (goog.isString(e.pointerType)) {\n    return e.pointerType;\n  }\n  // IE10 uses integer codes for pointer type.\n  // https://msdn.microsoft.com/en-us/library/hh772359(v\x3dvs.85).aspx\n  return goog.events.BrowserEvent.IE_POINTER_TYPE_MAP[e.pointerType] || \x27\x27;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/events/browserevent.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/events/listenable.js";
eval("// Copyright 2012 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview An interface for a listenable JavaScript object.\n * @author chrishenry@google.com (Chris Henry)\n */\n\ngoog.provide(\x27goog.events.Listenable\x27);\ngoog.provide(\x27goog.events.ListenableKey\x27);\n\n/** @suppress {extraRequire} */\ngoog.require(\x27goog.events.EventId\x27);\n\ngoog.forwardDeclare(\x27goog.events.EventLike\x27);\ngoog.forwardDeclare(\x27goog.events.EventTarget\x27);\n\n\n\n/**\n * A listenable interface. A listenable is an object with the ability\n * to dispatch/broadcast events to \x22event listeners\x22 registered via\n * listen/listenOnce.\n *\n * The interface allows for an event propagation mechanism similar\n * to one offered by native browser event targets, such as\n * capture/bubble mechanism, stopping propagation, and preventing\n * default actions. Capture/bubble mechanism depends on the ancestor\n * tree constructed via `#getParentEventTarget`; this tree\n * must be directed acyclic graph. The meaning of default action(s)\n * in preventDefault is specific to a particular use case.\n *\n * Implementations that do not support capture/bubble or can not have\n * a parent listenable can simply not implement any ability to set the\n * parent listenable (and have `#getParentEventTarget` return\n * null).\n *\n * Implementation of this class can be used with or independently from\n * goog.events.\n *\n * Implementation must call `#addImplementation(implClass)`.\n *\n * @interface\n * @see goog.events\n * @see http://www.w3.org/TR/DOM-Level-2-Events/events.html\n */\ngoog.events.Listenable \x3d function() {};\n\n\n/**\n * An expando property to indicate that an object implements\n * goog.events.Listenable.\n *\n * See addImplementation/isImplementedBy.\n *\n * @type {string}\n * @const\n */\ngoog.events.Listenable.IMPLEMENTED_BY_PROP \x3d\n    \x27closure_listenable_\x27 + ((Math.random() * 1e6) | 0);\n\n\n/**\n * Marks a given class (constructor) as an implementation of\n * Listenable, so that we can query that fact at runtime. The class\n * must have already implemented the interface.\n * @param {function(new:goog.events.Listenable,...)} cls The class constructor.\n *     The corresponding class must have already implemented the interface.\n */\ngoog.events.Listenable.addImplementation \x3d function(cls) {\n  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] \x3d true;\n};\n\n\n/**\n * @param {Object} obj The object to check.\n * @return {boolean} Whether a given instance implements Listenable. The\n *     class/superclass of the instance must call addImplementation.\n */\ngoog.events.Listenable.isImplementedBy \x3d function(obj) {\n  return !!(obj \x26\x26 obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);\n};\n\n\n/**\n * Adds an event listener. A listener can only be added once to an\n * object and if it is added again the key for the listener is\n * returned. Note that if the existing listener is a one-off listener\n * (registered via listenOnce), it will no longer be a one-off\n * listener after a call to listen().\n *\n * @param {string|!goog.events.EventId\x3cEVENTOBJ\x3e} type The event type id.\n * @param {function(this:SCOPE, EVENTOBJ):(boolean|undefined)} listener Callback\n *     method.\n * @param {boolean\x3d} opt_useCapture Whether to fire in capture phase\n *     (defaults to false).\n * @param {SCOPE\x3d} opt_listenerScope Object in whose scope to call the\n *     listener.\n * @return {!goog.events.ListenableKey} Unique key for the listener.\n * @template SCOPE,EVENTOBJ\n */\ngoog.events.Listenable.prototype.listen;\n\n\n/**\n * Adds an event listener that is removed automatically after the\n * listener fired once.\n *\n * If an existing listener already exists, listenOnce will do\n * nothing. In particular, if the listener was previously registered\n * via listen(), listenOnce() will not turn the listener into a\n * one-off listener. Similarly, if there is already an existing\n * one-off listener, listenOnce does not modify the listeners (it is\n * still a once listener).\n *\n * @param {string|!goog.events.EventId\x3cEVENTOBJ\x3e} type The event type id.\n * @param {function(this:SCOPE, EVENTOBJ):(boolean|undefined)} listener Callback\n *     method.\n * @param {boolean\x3d} opt_useCapture Whether to fire in capture phase\n *     (defaults to false).\n * @param {SCOPE\x3d} opt_listenerScope Object in whose scope to call the\n *     listener.\n * @return {!goog.events.ListenableKey} Unique key for the listener.\n * @template SCOPE,EVENTOBJ\n */\ngoog.events.Listenable.prototype.listenOnce;\n\n\n/**\n * Removes an event listener which was added with listen() or listenOnce().\n *\n * @param {string|!goog.events.EventId\x3cEVENTOBJ\x3e} type The event type id.\n * @param {function(this:SCOPE, EVENTOBJ):(boolean|undefined)} listener Callback\n *     method.\n * @param {boolean\x3d} opt_useCapture Whether to fire in capture phase\n *     (defaults to false).\n * @param {SCOPE\x3d} opt_listenerScope Object in whose scope to call\n *     the listener.\n * @return {boolean} Whether any listener was removed.\n * @template SCOPE,EVENTOBJ\n */\ngoog.events.Listenable.prototype.unlisten;\n\n\n/**\n * Removes an event listener which was added with listen() by the key\n * returned by listen().\n *\n * @param {!goog.events.ListenableKey} key The key returned by\n *     listen() or listenOnce().\n * @return {boolean} Whether any listener was removed.\n */\ngoog.events.Listenable.prototype.unlistenByKey;\n\n\n/**\n * Dispatches an event (or event like object) and calls all listeners\n * listening for events of this type. The type of the event is decided by the\n * type property on the event object.\n *\n * If any of the listeners returns false OR calls preventDefault then this\n * function will return false.  If one of the capture listeners calls\n * stopPropagation, then the bubble listeners won\x27t fire.\n *\n * @param {goog.events.EventLike} e Event object.\n * @return {boolean} If anyone called preventDefault on the event object (or\n *     if any of the listeners returns false) this will also return false.\n */\ngoog.events.Listenable.prototype.dispatchEvent;\n\n\n/**\n * Removes all listeners from this listenable. If type is specified,\n * it will only remove listeners of the particular type. otherwise all\n * registered listeners will be removed.\n *\n * @param {string\x3d} opt_type Type of event to remove, default is to\n *     remove all types.\n * @return {number} Number of listeners removed.\n */\ngoog.events.Listenable.prototype.removeAllListeners;\n\n\n/**\n * Returns the parent of this event target to use for capture/bubble\n * mechanism.\n *\n * NOTE(chrishenry): The name reflects the original implementation of\n * custom event target (`goog.events.EventTarget`). We decided\n * that changing the name is not worth it.\n *\n * @return {goog.events.Listenable} The parent EventTarget or null if\n *     there is no parent.\n */\ngoog.events.Listenable.prototype.getParentEventTarget;\n\n\n/**\n * Fires all registered listeners in this listenable for the given\n * type and capture mode, passing them the given eventObject. This\n * does not perform actual capture/bubble. Only implementors of the\n * interface should be using this.\n *\n * @param {string|!goog.events.EventId\x3cEVENTOBJ\x3e} type The type of the\n *     listeners to fire.\n * @param {boolean} capture The capture mode of the listeners to fire.\n * @param {EVENTOBJ} eventObject The event object to fire.\n * @return {boolean} Whether all listeners succeeded without\n *     attempting to prevent default behavior. If any listener returns\n *     false or called goog.events.Event#preventDefault, this returns\n *     false.\n * @template EVENTOBJ\n */\ngoog.events.Listenable.prototype.fireListeners;\n\n\n/**\n * Gets all listeners in this listenable for the given type and\n * capture mode.\n *\n * @param {string|!goog.events.EventId} type The type of the listeners to fire.\n * @param {boolean} capture The capture mode of the listeners to fire.\n * @return {!Array\x3c!goog.events.ListenableKey\x3e} An array of registered\n *     listeners.\n * @template EVENTOBJ\n */\ngoog.events.Listenable.prototype.getListeners;\n\n\n/**\n * Gets the goog.events.ListenableKey for the event or null if no such\n * listener is in use.\n *\n * @param {string|!goog.events.EventId\x3cEVENTOBJ\x3e} type The name of the event\n *     without the \x27on\x27 prefix.\n * @param {function(this:SCOPE, EVENTOBJ):(boolean|undefined)} listener The\n *     listener function to get.\n * @param {boolean} capture Whether the listener is a capturing listener.\n * @param {SCOPE\x3d} opt_listenerScope Object in whose scope to call the\n *     listener.\n * @return {goog.events.ListenableKey} the found listener or null if not found.\n * @template SCOPE,EVENTOBJ\n */\ngoog.events.Listenable.prototype.getListener;\n\n\n/**\n * Whether there is any active listeners matching the specified\n * signature. If either the type or capture parameters are\n * unspecified, the function will match on the remaining criteria.\n *\n * @param {string|!goog.events.EventId\x3cEVENTOBJ\x3e\x3d} opt_type Event type.\n * @param {boolean\x3d} opt_capture Whether to check for capture or bubble\n *     listeners.\n * @return {boolean} Whether there is any active listeners matching\n *     the requested type and/or capture phase.\n * @template EVENTOBJ\n */\ngoog.events.Listenable.prototype.hasListener;\n\n\n\n/**\n * An interface that describes a single registered listener.\n * @interface\n */\ngoog.events.ListenableKey \x3d function() {};\n\n\n/**\n * Counter used to create a unique key\n * @type {number}\n * @private\n */\ngoog.events.ListenableKey.counter_ \x3d 0;\n\n\n/**\n * Reserves a key to be used for ListenableKey#key field.\n * @return {number} A number to be used to fill ListenableKey#key\n *     field.\n */\ngoog.events.ListenableKey.reserveKey \x3d function() {\n  return ++goog.events.ListenableKey.counter_;\n};\n\n\n/**\n * The source event target.\n * @type {Object|goog.events.Listenable|goog.events.EventTarget}\n */\ngoog.events.ListenableKey.prototype.src;\n\n\n/**\n * The event type the listener is listening to.\n * @type {string}\n */\ngoog.events.ListenableKey.prototype.type;\n\n\n/**\n * The listener function.\n * @type {function(?):?|{handleEvent:function(?):?}|null}\n */\ngoog.events.ListenableKey.prototype.listener;\n\n\n/**\n * Whether the listener works on capture phase.\n * @type {boolean}\n */\ngoog.events.ListenableKey.prototype.capture;\n\n\n/**\n * The \x27this\x27 object for the listener function\x27s scope.\n * @type {Object|undefined}\n */\ngoog.events.ListenableKey.prototype.handler;\n\n\n/**\n * A globally unique number to identify the key.\n * @type {number}\n */\ngoog.events.ListenableKey.prototype.key;\n\n//# sourceURL\x3dhttps://qs/javascript/closure/events/listenable.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/events/listener.js";
eval("// Copyright 2005 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Listener object.\n * @author pupius@google.com (Daniel Pupius)\n * @see ../demos/events.html\n */\n\ngoog.provide(\x27goog.events.Listener\x27);\n\ngoog.require(\x27goog.events.ListenableKey\x27);\n\n\n\n/**\n * Simple class that stores information about a listener\n * @param {function(?):?} listener Callback function.\n * @param {Function} proxy Wrapper for the listener that patches the event.\n * @param {EventTarget|goog.events.Listenable} src Source object for\n *     the event.\n * @param {string} type Event type.\n * @param {boolean} capture Whether in capture or bubble phase.\n * @param {Object\x3d} opt_handler Object in whose context to execute the callback.\n * @implements {goog.events.ListenableKey}\n * @constructor\n */\ngoog.events.Listener \x3d function(\n    listener, proxy, src, type, capture, opt_handler) {\n  if (goog.events.Listener.ENABLE_MONITORING) {\n    this.creationStack \x3d new Error().stack;\n  }\n\n  /** @override */\n  this.listener \x3d listener;\n\n  /**\n   * A wrapper over the original listener. This is used solely to\n   * handle native browser events (it is used to simulate the capture\n   * phase and to patch the event object).\n   * @type {Function}\n   */\n  this.proxy \x3d proxy;\n\n  /**\n   * Object or node that callback is listening to\n   * @type {EventTarget|goog.events.Listenable}\n   */\n  this.src \x3d src;\n\n  /**\n   * The event type.\n   * @const {string}\n   */\n  this.type \x3d type;\n\n  /**\n   * Whether the listener is being called in the capture or bubble phase\n   * @const {boolean}\n   */\n  this.capture \x3d !!capture;\n\n  /**\n   * Optional object whose context to execute the listener in\n   * @type {Object|undefined}\n   */\n  this.handler \x3d opt_handler;\n\n  /**\n   * The key of the listener.\n   * @const {number}\n   * @override\n   */\n  this.key \x3d goog.events.ListenableKey.reserveKey();\n\n  /**\n   * Whether to remove the listener after it has been called.\n   * @type {boolean}\n   */\n  this.callOnce \x3d false;\n\n  /**\n   * Whether the listener has been removed.\n   * @type {boolean}\n   */\n  this.removed \x3d false;\n};\n\n\n/**\n * @define {boolean} Whether to enable the monitoring of the\n *     goog.events.Listener instances. Switching on the monitoring is only\n *     recommended for debugging because it has a significant impact on\n *     performance and memory usage. If switched off, the monitoring code\n *     compiles down to 0 bytes.\n */\ngoog.define(\x27goog.events.Listener.ENABLE_MONITORING\x27, false);\n\n\n/**\n * If monitoring the goog.events.Listener instances is enabled, stores the\n * creation stack trace of the Disposable instance.\n * @type {string}\n */\ngoog.events.Listener.prototype.creationStack;\n\n\n/**\n * Marks this listener as removed. This also remove references held by\n * this listener object (such as listener and event source).\n */\ngoog.events.Listener.prototype.markAsRemoved \x3d function() {\n  this.removed \x3d true;\n  this.listener \x3d null;\n  this.proxy \x3d null;\n  this.src \x3d null;\n  this.handler \x3d null;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/events/listener.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/events/listenermap.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A map of listeners that provides utility functions to\n * deal with listeners on an event target. Used by\n * `goog.events.EventTarget`.\n *\n * WARNING: Do not use this class from outside goog.events package.\n *\n * @visibility {//javascript/closure/bin/sizetests:__pkg__}\n * @visibility {//javascript/closure:__pkg__}\n * @visibility {//javascript/closure/events:__pkg__}\n * @visibility {//javascript/closure/labs/events:__pkg__}\n */\n\ngoog.provide(\x27goog.events.ListenerMap\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.events.Listener\x27);\ngoog.require(\x27goog.object\x27);\n\n\n\n/**\n * Creates a new listener map.\n * @param {EventTarget|goog.events.Listenable} src The src object.\n * @constructor\n * @final\n */\ngoog.events.ListenerMap \x3d function(src) {\n  /** @type {EventTarget|goog.events.Listenable} */\n  this.src \x3d src;\n\n  /**\n   * Maps of event type to an array of listeners.\n   * @type {!Object\x3cstring, !Array\x3c!goog.events.Listener\x3e\x3e}\n   */\n  this.listeners \x3d {};\n\n  /**\n   * The count of types in this map that have registered listeners.\n   * @private {number}\n   */\n  this.typeCount_ \x3d 0;\n};\n\n\n/**\n * @return {number} The count of event types in this map that actually\n *     have registered listeners.\n */\ngoog.events.ListenerMap.prototype.getTypeCount \x3d function() {\n  return this.typeCount_;\n};\n\n\n/**\n * @return {number} Total number of registered listeners.\n */\ngoog.events.ListenerMap.prototype.getListenerCount \x3d function() {\n  var count \x3d 0;\n  for (var type in this.listeners) {\n    count +\x3d this.listeners[type].length;\n  }\n  return count;\n};\n\n\n/**\n * Adds an event listener. A listener can only be added once to an\n * object and if it is added again the key for the listener is\n * returned.\n *\n * Note that a one-off listener will not change an existing listener,\n * if any. On the other hand a normal listener will change existing\n * one-off listener to become a normal listener.\n *\n * @param {string|!goog.events.EventId} type The listener event type.\n * @param {!Function} listener This listener callback method.\n * @param {boolean} callOnce Whether the listener is a one-off\n *     listener.\n * @param {boolean\x3d} opt_useCapture The capture mode of the listener.\n * @param {Object\x3d} opt_listenerScope Object in whose scope to call the\n *     listener.\n * @return {!goog.events.ListenableKey} Unique key for the listener.\n */\ngoog.events.ListenerMap.prototype.add \x3d function(\n    type, listener, callOnce, opt_useCapture, opt_listenerScope) {\n  var typeStr \x3d type.toString();\n  var listenerArray \x3d this.listeners[typeStr];\n  if (!listenerArray) {\n    listenerArray \x3d this.listeners[typeStr] \x3d [];\n    this.typeCount_++;\n  }\n\n  var listenerObj;\n  var index \x3d goog.events.ListenerMap.findListenerIndex_(\n      listenerArray, listener, opt_useCapture, opt_listenerScope);\n  if (index \x3e -1) {\n    listenerObj \x3d listenerArray[index];\n    if (!callOnce) {\n      // Ensure that, if there is an existing callOnce listener, it is no\n      // longer a callOnce listener.\n      listenerObj.callOnce \x3d false;\n    }\n  } else {\n    listenerObj \x3d new goog.events.Listener(\n        listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);\n    listenerObj.callOnce \x3d callOnce;\n    listenerArray.push(listenerObj);\n  }\n  return listenerObj;\n};\n\n\n/**\n * Removes a matching listener.\n * @param {string|!goog.events.EventId} type The listener event type.\n * @param {!Function} listener This listener callback method.\n * @param {boolean\x3d} opt_useCapture The capture mode of the listener.\n * @param {Object\x3d} opt_listenerScope Object in whose scope to call the\n *     listener.\n * @return {boolean} Whether any listener was removed.\n */\ngoog.events.ListenerMap.prototype.remove \x3d function(\n    type, listener, opt_useCapture, opt_listenerScope) {\n  var typeStr \x3d type.toString();\n  if (!(typeStr in this.listeners)) {\n    return false;\n  }\n\n  var listenerArray \x3d this.listeners[typeStr];\n  var index \x3d goog.events.ListenerMap.findListenerIndex_(\n      listenerArray, listener, opt_useCapture, opt_listenerScope);\n  if (index \x3e -1) {\n    var listenerObj \x3d listenerArray[index];\n    listenerObj.markAsRemoved();\n    goog.array.removeAt(listenerArray, index);\n    if (listenerArray.length \x3d\x3d 0) {\n      delete this.listeners[typeStr];\n      this.typeCount_--;\n    }\n    return true;\n  }\n  return false;\n};\n\n\n/**\n * Removes the given listener object.\n * @param {!goog.events.ListenableKey} listener The listener to remove.\n * @return {boolean} Whether the listener is removed.\n */\ngoog.events.ListenerMap.prototype.removeByKey \x3d function(listener) {\n  var type \x3d listener.type;\n  if (!(type in this.listeners)) {\n    return false;\n  }\n\n  var removed \x3d goog.array.remove(this.listeners[type], listener);\n  if (removed) {\n    /** @type {!goog.events.Listener} */ (listener).markAsRemoved();\n    if (this.listeners[type].length \x3d\x3d 0) {\n      delete this.listeners[type];\n      this.typeCount_--;\n    }\n  }\n  return removed;\n};\n\n\n/**\n * Removes all listeners from this map. If opt_type is provided, only\n * listeners that match the given type are removed.\n * @param {string|!goog.events.EventId\x3d} opt_type Type of event to remove.\n * @return {number} Number of listeners removed.\n */\ngoog.events.ListenerMap.prototype.removeAll \x3d function(opt_type) {\n  var typeStr \x3d opt_type \x26\x26 opt_type.toString();\n  var count \x3d 0;\n  for (var type in this.listeners) {\n    if (!typeStr || type \x3d\x3d typeStr) {\n      var listenerArray \x3d this.listeners[type];\n      for (var i \x3d 0; i \x3c listenerArray.length; i++) {\n        ++count;\n        listenerArray[i].markAsRemoved();\n      }\n      delete this.listeners[type];\n      this.typeCount_--;\n    }\n  }\n  return count;\n};\n\n\n/**\n * Gets all listeners that match the given type and capture mode. The\n * returned array is a copy (but the listener objects are not).\n * @param {string|!goog.events.EventId} type The type of the listeners\n *     to retrieve.\n * @param {boolean} capture The capture mode of the listeners to retrieve.\n * @return {!Array\x3c!goog.events.ListenableKey\x3e} An array of matching\n *     listeners.\n */\ngoog.events.ListenerMap.prototype.getListeners \x3d function(type, capture) {\n  var listenerArray \x3d this.listeners[type.toString()];\n  var rv \x3d [];\n  if (listenerArray) {\n    for (var i \x3d 0; i \x3c listenerArray.length; ++i) {\n      var listenerObj \x3d listenerArray[i];\n      if (listenerObj.capture \x3d\x3d capture) {\n        rv.push(listenerObj);\n      }\n    }\n  }\n  return rv;\n};\n\n\n/**\n * Gets the goog.events.ListenableKey for the event or null if no such\n * listener is in use.\n *\n * @param {string|!goog.events.EventId} type The type of the listener\n *     to retrieve.\n * @param {!Function} listener The listener function to get.\n * @param {boolean} capture Whether the listener is a capturing listener.\n * @param {Object\x3d} opt_listenerScope Object in whose scope to call the\n *     listener.\n * @return {goog.events.ListenableKey} the found listener or null if not found.\n */\ngoog.events.ListenerMap.prototype.getListener \x3d function(\n    type, listener, capture, opt_listenerScope) {\n  var listenerArray \x3d this.listeners[type.toString()];\n  var i \x3d -1;\n  if (listenerArray) {\n    i \x3d goog.events.ListenerMap.findListenerIndex_(\n        listenerArray, listener, capture, opt_listenerScope);\n  }\n  return i \x3e -1 ? listenerArray[i] : null;\n};\n\n\n/**\n * Whether there is a matching listener. If either the type or capture\n * parameters are unspecified, the function will match on the\n * remaining criteria.\n *\n * @param {string|!goog.events.EventId\x3d} opt_type The type of the listener.\n * @param {boolean\x3d} opt_capture The capture mode of the listener.\n * @return {boolean} Whether there is an active listener matching\n *     the requested type and/or capture phase.\n */\ngoog.events.ListenerMap.prototype.hasListener \x3d function(\n    opt_type, opt_capture) {\n  var hasType \x3d goog.isDef(opt_type);\n  var typeStr \x3d hasType ? opt_type.toString() : \x27\x27;\n  var hasCapture \x3d goog.isDef(opt_capture);\n\n  return goog.object.some(this.listeners, function(listenerArray, type) {\n    for (var i \x3d 0; i \x3c listenerArray.length; ++i) {\n      if ((!hasType || listenerArray[i].type \x3d\x3d typeStr) \x26\x26\n          (!hasCapture || listenerArray[i].capture \x3d\x3d opt_capture)) {\n        return true;\n      }\n    }\n\n    return false;\n  });\n};\n\n\n/**\n * Finds the index of a matching goog.events.Listener in the given\n * listenerArray.\n * @param {!Array\x3c!goog.events.Listener\x3e} listenerArray Array of listener.\n * @param {!Function} listener The listener function.\n * @param {boolean\x3d} opt_useCapture The capture flag for the listener.\n * @param {Object\x3d} opt_listenerScope The listener scope.\n * @return {number} The index of the matching listener within the\n *     listenerArray.\n * @private\n */\ngoog.events.ListenerMap.findListenerIndex_ \x3d function(\n    listenerArray, listener, opt_useCapture, opt_listenerScope) {\n  for (var i \x3d 0; i \x3c listenerArray.length; ++i) {\n    var listenerObj \x3d listenerArray[i];\n    if (!listenerObj.removed \x26\x26 listenerObj.listener \x3d\x3d listener \x26\x26\n        listenerObj.capture \x3d\x3d !!opt_useCapture \x26\x26\n        listenerObj.handler \x3d\x3d opt_listenerScope) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/events/listenermap.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/events/events.js";
eval("// Copyright 2005 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview An event manager for both native browser event\n * targets and custom JavaScript event targets\n * (`goog.events.Listenable`). This provides an abstraction\n * over browsers\x27 event systems.\n *\n * It also provides a simulation of W3C event model\x27s capture phase in\n * Internet Explorer (IE 8 and below). Caveat: the simulation does not\n * interact well with listeners registered directly on the elements\n * (bypassing goog.events) or even with listeners registered via\n * goog.events in a separate JS binary. In these cases, we provide\n * no ordering guarantees.\n *\n * The listeners will receive a \x22patched\x22 event object. Such event object\n * contains normalized values for certain event properties that differs in\n * different browsers.\n *\n * Example usage:\n * \x3cpre\x3e\n * goog.events.listen(myNode, \x27click\x27, function(e) { alert(\x27woo\x27) });\n * goog.events.listen(myNode, \x27mouseover\x27, mouseHandler, true);\n * goog.events.unlisten(myNode, \x27mouseover\x27, mouseHandler, true);\n * goog.events.removeAll(myNode);\n * \x3c/pre\x3e\n *\n * @author aa@google.com (Aaron Boodman) [Original implementation of listen()]\n * @author pupius@google.com (Daniel Pupius) [Port to closure plus capture phase\n *                                            in IE and event object patching]\n * @author arv@google.com (Erik Arvidsson)\n *\n * @see ../demos/events.html\n * @see ../demos/event-propagation.html\n * @see ../demos/stopevent.html\n */\n\n// IMPLEMENTATION NOTES:\n// goog.events stores an auxiliary data structure on each EventTarget\n// source being listened on. This allows us to take advantage of GC,\n// having the data structure GC\x27d when the EventTarget is GC\x27d. This\n// GC behavior is equivalent to using W3C DOM Events directly.\n\ngoog.provide(\x27goog.events\x27);\ngoog.provide(\x27goog.events.CaptureSimulationMode\x27);\ngoog.provide(\x27goog.events.Key\x27);\ngoog.provide(\x27goog.events.ListenableType\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.debug.entryPointRegistry\x27);\ngoog.require(\x27goog.events.BrowserEvent\x27);\ngoog.require(\x27goog.events.BrowserFeature\x27);\ngoog.require(\x27goog.events.Listenable\x27);\ngoog.require(\x27goog.events.ListenerMap\x27);\n\ngoog.forwardDeclare(\x27goog.debug.ErrorHandler\x27);\ngoog.forwardDeclare(\x27goog.events.EventWrapper\x27);\n\n\n/**\n * @typedef {number|goog.events.ListenableKey}\n */\ngoog.events.Key;\n\n\n/**\n * @typedef {EventTarget|goog.events.Listenable}\n */\ngoog.events.ListenableType;\n\n\n/**\n * Property name on a native event target for the listener map\n * associated with the event target.\n * @private @const {string}\n */\ngoog.events.LISTENER_MAP_PROP_ \x3d \x27closure_lm_\x27 + ((Math.random() * 1e6) | 0);\n\n\n/**\n * String used to prepend to IE event types.\n * @const\n * @private\n */\ngoog.events.onString_ \x3d \x27on\x27;\n\n\n/**\n * Map of computed \x22on\x3ceventname\x3e\x22 strings for IE event types. Caching\n * this removes an extra object allocation in goog.events.listen which\n * improves IE6 performance.\n * @const\n * @dict\n * @private\n */\ngoog.events.onStringMap_ \x3d {};\n\n\n/**\n * @enum {number} Different capture simulation mode for IE8-.\n */\ngoog.events.CaptureSimulationMode \x3d {\n  /**\n   * Does not perform capture simulation. Will asserts in IE8- when you\n   * add capture listeners.\n   */\n  OFF_AND_FAIL: 0,\n\n  /**\n   * Does not perform capture simulation, silently ignore capture\n   * listeners.\n   */\n  OFF_AND_SILENT: 1,\n\n  /**\n   * Performs capture simulation.\n   */\n  ON: 2\n};\n\n\n/**\n * @define {number} The capture simulation mode for IE8-. By default,\n *     this is ON.\n */\ngoog.define(\x27goog.events.CAPTURE_SIMULATION_MODE\x27, 2);\n\n\n/**\n * Estimated count of total native listeners.\n * @private {number}\n */\ngoog.events.listenerCountEstimate_ \x3d 0;\n\n\n/**\n * Adds an event listener for a specific event on a native event\n * target (such as a DOM element) or an object that has implemented\n * {@link goog.events.Listenable}. A listener can only be added once\n * to an object and if it is added again the key for the listener is\n * returned. Note that if the existing listener is a one-off listener\n * (registered via listenOnce), it will no longer be a one-off\n * listener after a call to listen().\n *\n * @param {EventTarget|goog.events.Listenable} src The node to listen\n *     to events on.\n * @param {string|Array\x3cstring\x3e|\n *     !goog.events.EventId\x3cEVENTOBJ\x3e|!Array\x3c!goog.events.EventId\x3cEVENTOBJ\x3e\x3e}\n *     type Event type or array of event types.\n * @param {function(this:T, EVENTOBJ):?|{handleEvent:function(?):?}|null}\n *     listener Callback method, or an object with a handleEvent function.\n *     WARNING: passing an Object is now softly deprecated.\n * @param {(boolean|!AddEventListenerOptions)\x3d} opt_options\n * @param {T\x3d} opt_handler Element in whose scope to call the listener.\n * @return {goog.events.Key} Unique key for the listener.\n * @template T,EVENTOBJ\n */\ngoog.events.listen \x3d function(src, type, listener, opt_options, opt_handler) {\n  if (opt_options \x26\x26 opt_options.once) {\n    return goog.events.listenOnce(\n        src, type, listener, opt_options, opt_handler);\n  }\n  if (goog.isArray(type)) {\n    for (var i \x3d 0; i \x3c type.length; i++) {\n      goog.events.listen(src, type[i], listener, opt_options, opt_handler);\n    }\n    return null;\n  }\n\n  listener \x3d goog.events.wrapListener(listener);\n  if (goog.events.Listenable.isImplementedBy(src)) {\n    var capture \x3d\n        goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;\n    return src.listen(\n        /** @type {string|!goog.events.EventId} */ (type), listener, capture,\n        opt_handler);\n  } else {\n    return goog.events.listen_(\n        /** @type {!EventTarget} */ (src), type, listener,\n        /* callOnce */ false, opt_options, opt_handler);\n  }\n};\n\n\n/**\n * Adds an event listener for a specific event on a native event\n * target. A listener can only be added once to an object and if it\n * is added again the key for the listener is returned.\n *\n * Note that a one-off listener will not change an existing listener,\n * if any. On the other hand a normal listener will change existing\n * one-off listener to become a normal listener.\n *\n * @param {EventTarget} src The node to listen to events on.\n * @param {string|?goog.events.EventId\x3cEVENTOBJ\x3e} type Event type.\n * @param {!Function} listener Callback function.\n * @param {boolean} callOnce Whether the listener is a one-off\n *     listener or otherwise.\n * @param {(boolean|!AddEventListenerOptions)\x3d} opt_options\n * @param {Object\x3d} opt_handler Element in whose scope to call the listener.\n * @return {goog.events.ListenableKey} Unique key for the listener.\n * @template EVENTOBJ\n * @private\n */\ngoog.events.listen_ \x3d function(\n    src, type, listener, callOnce, opt_options, opt_handler) {\n  if (!type) {\n    throw new Error(\x27Invalid event type\x27);\n  }\n\n  var capture \x3d\n      goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;\n  if (capture \x26\x26 !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {\n    if (goog.events.CAPTURE_SIMULATION_MODE \x3d\x3d\n        goog.events.CaptureSimulationMode.OFF_AND_FAIL) {\n      goog.asserts.fail(\x27Can not register capture listener in IE8-.\x27);\n      return null;\n    } else if (\n        goog.events.CAPTURE_SIMULATION_MODE \x3d\x3d\n        goog.events.CaptureSimulationMode.OFF_AND_SILENT) {\n      return null;\n    }\n  }\n\n  var listenerMap \x3d goog.events.getListenerMap_(src);\n  if (!listenerMap) {\n    src[goog.events.LISTENER_MAP_PROP_] \x3d listenerMap \x3d\n        new goog.events.ListenerMap(src);\n  }\n\n  var listenerObj \x3d /** @type {goog.events.Listener} */ (\n      listenerMap.add(type, listener, callOnce, capture, opt_handler));\n\n  // If the listenerObj already has a proxy, it has been set up\n  // previously. We simply return.\n  if (listenerObj.proxy) {\n    return listenerObj;\n  }\n\n  var proxy \x3d goog.events.getProxy();\n  listenerObj.proxy \x3d proxy;\n\n  proxy.src \x3d src;\n  proxy.listener \x3d listenerObj;\n\n  // Attach the proxy through the browser\x27s API\n  if (src.addEventListener) {\n    // Don\x27t pass an object as `capture` if the browser doesn\x27t support that.\n    if (!goog.events.BrowserFeature.PASSIVE_EVENTS) {\n      opt_options \x3d capture;\n    }\n    // Don\x27t break tests that expect a boolean.\n    if (opt_options \x3d\x3d\x3d undefined) opt_options \x3d false;\n    src.addEventListener(type.toString(), proxy, opt_options);\n  } else if (src.attachEvent) {\n    // The else if above used to be an unconditional else. It would call\n    // attachEvent come gws or high water. This would sometimes throw an\n    // exception on IE11, spoiling the day of some callers. The previous\n    // incarnation of this code, from 2007, indicates that it replaced an\n    // earlier still version that caused excess allocations on IE6.\n    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);\n  } else if (src.addListener \x26\x26 src.removeListener) {\n    // In IE, MediaQueryList uses addListener() insteadd of addEventListener. In\n    // Safari, there is no global for the MediaQueryList constructor, so we just\n    // check whether the object \x22looks like\x22 MediaQueryList.\n    goog.asserts.assert(\n        type \x3d\x3d\x3d \x27change\x27, \x27MediaQueryList only has a change event\x27);\n    src.addListener(proxy);\n  } else {\n    throw new Error(\x27addEventListener and attachEvent are unavailable.\x27);\n  }\n\n  goog.events.listenerCountEstimate_++;\n  return listenerObj;\n};\n\n\n/**\n * Helper function for returning a proxy function.\n * @return {!Function} A new or reused function object.\n */\ngoog.events.getProxy \x3d function() {\n  var proxyCallbackFunction \x3d goog.events.handleBrowserEvent_;\n  // Use a local var f to prevent one allocation.\n  var f \x3d\n      goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {\n        return proxyCallbackFunction.call(f.src, f.listener, eventObject);\n      } : function(eventObject) {\n        var v \x3d proxyCallbackFunction.call(f.src, f.listener, eventObject);\n        // NOTE(chrishenry): In IE, we hack in a capture phase. However, if\n        // there is inline event handler which tries to prevent default (for\n        // example \x3ca href\x3d\x22...\x22 onclick\x3d\x22return false\x22\x3e...\x3c/a\x3e) in a\n        // descendant element, the prevent default will be overridden\n        // by this listener if this listener were to return true. Hence, we\n        // return undefined.\n        if (!v) return v;\n      };\n  return f;\n};\n\n\n/**\n * Adds an event listener for a specific event on a native event\n * target (such as a DOM element) or an object that has implemented\n * {@link goog.events.Listenable}. After the event has fired the event\n * listener is removed from the target.\n *\n * If an existing listener already exists, listenOnce will do\n * nothing. In particular, if the listener was previously registered\n * via listen(), listenOnce() will not turn the listener into a\n * one-off listener. Similarly, if there is already an existing\n * one-off listener, listenOnce does not modify the listeners (it is\n * still a once listener).\n *\n * @param {EventTarget|goog.events.Listenable} src The node to listen\n *     to events on.\n * @param {string|Array\x3cstring\x3e|\n *     !goog.events.EventId\x3cEVENTOBJ\x3e|!Array\x3c!goog.events.EventId\x3cEVENTOBJ\x3e\x3e}\n *     type Event type or array of event types.\n * @param {function(this:T, EVENTOBJ):?|{handleEvent:function(?):?}|null}\n *     listener Callback method.\n * @param {(boolean|!AddEventListenerOptions)\x3d} opt_options\n * @param {T\x3d} opt_handler Element in whose scope to call the listener.\n * @return {goog.events.Key} Unique key for the listener.\n * @template T,EVENTOBJ\n */\ngoog.events.listenOnce \x3d function(\n    src, type, listener, opt_options, opt_handler) {\n  if (goog.isArray(type)) {\n    for (var i \x3d 0; i \x3c type.length; i++) {\n      goog.events.listenOnce(src, type[i], listener, opt_options, opt_handler);\n    }\n    return null;\n  }\n\n  listener \x3d goog.events.wrapListener(listener);\n  if (goog.events.Listenable.isImplementedBy(src)) {\n    var capture \x3d\n        goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;\n    return src.listenOnce(\n        /** @type {string|!goog.events.EventId} */ (type), listener, capture,\n        opt_handler);\n  } else {\n    return goog.events.listen_(\n        /** @type {!EventTarget} */ (src), type, listener,\n        /* callOnce */ true, opt_options, opt_handler);\n  }\n};\n\n\n/**\n * Adds an event listener with a specific event wrapper on a DOM Node or an\n * object that has implemented {@link goog.events.Listenable}. A listener can\n * only be added once to an object.\n *\n * @param {EventTarget|goog.events.Listenable} src The target to\n *     listen to events on.\n * @param {goog.events.EventWrapper} wrapper Event wrapper to use.\n * @param {function(this:T, ?):?|{handleEvent:function(?):?}|null} listener\n *     Callback method, or an object with a handleEvent function.\n * @param {boolean\x3d} opt_capt Whether to fire in capture phase (defaults to\n *     false).\n * @param {T\x3d} opt_handler Element in whose scope to call the listener.\n * @template T\n */\ngoog.events.listenWithWrapper \x3d function(\n    src, wrapper, listener, opt_capt, opt_handler) {\n  wrapper.listen(src, listener, opt_capt, opt_handler);\n};\n\n\n/**\n * Removes an event listener which was added with listen().\n *\n * @param {EventTarget|goog.events.Listenable} src The target to stop\n *     listening to events on.\n * @param {string|Array\x3cstring\x3e|\n *     !goog.events.EventId\x3cEVENTOBJ\x3e|!Array\x3c!goog.events.EventId\x3cEVENTOBJ\x3e\x3e}\n *     type Event type or array of event types to unlisten to.\n * @param {function(?):?|{handleEvent:function(?):?}|null} listener The\n *     listener function to remove.\n * @param {(boolean|!EventListenerOptions)\x3d} opt_options\n *     whether the listener is fired during the capture or bubble phase of the\n *     event.\n * @param {Object\x3d} opt_handler Element in whose scope to call the listener.\n * @return {?boolean} indicating whether the listener was there to remove.\n * @template EVENTOBJ\n */\ngoog.events.unlisten \x3d function(src, type, listener, opt_options, opt_handler) {\n  if (goog.isArray(type)) {\n    for (var i \x3d 0; i \x3c type.length; i++) {\n      goog.events.unlisten(src, type[i], listener, opt_options, opt_handler);\n    }\n    return null;\n  }\n  var capture \x3d\n      goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;\n\n  listener \x3d goog.events.wrapListener(listener);\n  if (goog.events.Listenable.isImplementedBy(src)) {\n    return src.unlisten(\n        /** @type {string|!goog.events.EventId} */ (type), listener, capture,\n        opt_handler);\n  }\n\n  if (!src) {\n    // TODO(chrishenry): We should tighten the API to only accept\n    // non-null objects, or add an assertion here.\n    return false;\n  }\n\n  var listenerMap \x3d goog.events.getListenerMap_(\n      /** @type {!EventTarget} */ (src));\n  if (listenerMap) {\n    var listenerObj \x3d listenerMap.getListener(\n        /** @type {string|!goog.events.EventId} */ (type), listener, capture,\n        opt_handler);\n    if (listenerObj) {\n      return goog.events.unlistenByKey(listenerObj);\n    }\n  }\n\n  return false;\n};\n\n\n/**\n * Removes an event listener which was added with listen() by the key\n * returned by listen().\n *\n * @param {goog.events.Key} key The key returned by listen() for this\n *     event listener.\n * @return {boolean} indicating whether the listener was there to remove.\n */\ngoog.events.unlistenByKey \x3d function(key) {\n  // TODO(chrishenry): Remove this check when tests that rely on this\n  // are fixed.\n  if (goog.isNumber(key)) {\n    return false;\n  }\n\n  var listener \x3d key;\n  if (!listener || listener.removed) {\n    return false;\n  }\n\n  var src \x3d listener.src;\n  if (goog.events.Listenable.isImplementedBy(src)) {\n    return /** @type {!goog.events.Listenable} */ (src).unlistenByKey(listener);\n  }\n\n  var type \x3d listener.type;\n  var proxy \x3d listener.proxy;\n  if (src.removeEventListener) {\n    src.removeEventListener(type, proxy, listener.capture);\n  } else if (src.detachEvent) {\n    src.detachEvent(goog.events.getOnString_(type), proxy);\n  } else if (src.addListener \x26\x26 src.removeListener) {\n    src.removeListener(proxy);\n  }\n  goog.events.listenerCountEstimate_--;\n\n  var listenerMap \x3d goog.events.getListenerMap_(\n      /** @type {!EventTarget} */ (src));\n  // TODO(chrishenry): Try to remove this conditional and execute the\n  // first branch always. This should be safe.\n  if (listenerMap) {\n    listenerMap.removeByKey(listener);\n    if (listenerMap.getTypeCount() \x3d\x3d 0) {\n      // Null the src, just because this is simple to do (and useful\n      // for IE \x3c\x3d 7).\n      listenerMap.src \x3d null;\n      // We don\x27t use delete here because IE does not allow delete\n      // on a window object.\n      src[goog.events.LISTENER_MAP_PROP_] \x3d null;\n    }\n  } else {\n    /** @type {!goog.events.Listener} */ (listener).markAsRemoved();\n  }\n\n  return true;\n};\n\n\n/**\n * Removes an event listener which was added with listenWithWrapper().\n *\n * @param {EventTarget|goog.events.Listenable} src The target to stop\n *     listening to events on.\n * @param {goog.events.EventWrapper} wrapper Event wrapper to use.\n * @param {function(?):?|{handleEvent:function(?):?}|null} listener The\n *     listener function to remove.\n * @param {boolean\x3d} opt_capt In DOM-compliant browsers, this determines\n *     whether the listener is fired during the capture or bubble phase of the\n *     event.\n * @param {Object\x3d} opt_handler Element in whose scope to call the listener.\n */\ngoog.events.unlistenWithWrapper \x3d function(\n    src, wrapper, listener, opt_capt, opt_handler) {\n  wrapper.unlisten(src, listener, opt_capt, opt_handler);\n};\n\n\n/**\n * Removes all listeners from an object. You can also optionally\n * remove listeners of a particular type.\n *\n * @param {Object|undefined} obj Object to remove listeners from. Must be an\n *     EventTarget or a goog.events.Listenable.\n * @param {string|!goog.events.EventId\x3d} opt_type Type of event to remove.\n *     Default is all types.\n * @return {number} Number of listeners removed.\n */\ngoog.events.removeAll \x3d function(obj, opt_type) {\n  // TODO(chrishenry): Change the type of obj to\n  // (!EventTarget|!goog.events.Listenable).\n\n  if (!obj) {\n    return 0;\n  }\n\n  if (goog.events.Listenable.isImplementedBy(obj)) {\n    return /** @type {?} */ (obj).removeAllListeners(opt_type);\n  }\n\n  var listenerMap \x3d goog.events.getListenerMap_(\n      /** @type {!EventTarget} */ (obj));\n  if (!listenerMap) {\n    return 0;\n  }\n\n  var count \x3d 0;\n  var typeStr \x3d opt_type \x26\x26 opt_type.toString();\n  for (var type in listenerMap.listeners) {\n    if (!typeStr || type \x3d\x3d typeStr) {\n      // Clone so that we don\x27t need to worry about unlistenByKey\n      // changing the content of the ListenerMap.\n      var listeners \x3d listenerMap.listeners[type].concat();\n      for (var i \x3d 0; i \x3c listeners.length; ++i) {\n        if (goog.events.unlistenByKey(listeners[i])) {\n          ++count;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n\n/**\n * Gets the listeners for a given object, type and capture phase.\n *\n * @param {Object} obj Object to get listeners for.\n * @param {string|!goog.events.EventId} type Event type.\n * @param {boolean} capture Capture phase?.\n * @return {Array\x3c!goog.events.Listener\x3e} Array of listener objects.\n */\ngoog.events.getListeners \x3d function(obj, type, capture) {\n  if (goog.events.Listenable.isImplementedBy(obj)) {\n    return /** @type {!goog.events.Listenable} */ (obj).getListeners(\n        type, capture);\n  } else {\n    if (!obj) {\n      // TODO(chrishenry): We should tighten the API to accept\n      // !EventTarget|goog.events.Listenable, and add an assertion here.\n      return [];\n    }\n\n    var listenerMap \x3d goog.events.getListenerMap_(\n        /** @type {!EventTarget} */ (obj));\n    return listenerMap ? listenerMap.getListeners(type, capture) : [];\n  }\n};\n\n\n/**\n * Gets the goog.events.Listener for the event or null if no such listener is\n * in use.\n *\n * @param {EventTarget|goog.events.Listenable} src The target from\n *     which to get listeners.\n * @param {?string|!goog.events.EventId\x3cEVENTOBJ\x3e} type The type of the event.\n * @param {function(EVENTOBJ):?|{handleEvent:function(?):?}|null} listener The\n *     listener function to get.\n * @param {boolean\x3d} opt_capt In DOM-compliant browsers, this determines\n *                            whether the listener is fired during the\n *                            capture or bubble phase of the event.\n * @param {Object\x3d} opt_handler Element in whose scope to call the listener.\n * @return {goog.events.ListenableKey} the found listener or null if not found.\n * @template EVENTOBJ\n */\ngoog.events.getListener \x3d function(src, type, listener, opt_capt, opt_handler) {\n  // TODO(chrishenry): Change type from ?string to string, or add assertion.\n  type \x3d /** @type {string} */ (type);\n  listener \x3d goog.events.wrapListener(listener);\n  var capture \x3d !!opt_capt;\n  if (goog.events.Listenable.isImplementedBy(src)) {\n    return src.getListener(type, listener, capture, opt_handler);\n  }\n\n  if (!src) {\n    // TODO(chrishenry): We should tighten the API to only accept\n    // non-null objects, or add an assertion here.\n    return null;\n  }\n\n  var listenerMap \x3d goog.events.getListenerMap_(\n      /** @type {!EventTarget} */ (src));\n  if (listenerMap) {\n    return listenerMap.getListener(type, listener, capture, opt_handler);\n  }\n  return null;\n};\n\n\n/**\n * Returns whether an event target has any active listeners matching the\n * specified signature. If either the type or capture parameters are\n * unspecified, the function will match on the remaining criteria.\n *\n * @param {EventTarget|goog.events.Listenable} obj Target to get\n *     listeners for.\n * @param {string|!goog.events.EventId\x3d} opt_type Event type.\n * @param {boolean\x3d} opt_capture Whether to check for capture or bubble-phase\n *     listeners.\n * @return {boolean} Whether an event target has one or more listeners matching\n *     the requested type and/or capture phase.\n */\ngoog.events.hasListener \x3d function(obj, opt_type, opt_capture) {\n  if (goog.events.Listenable.isImplementedBy(obj)) {\n    return obj.hasListener(opt_type, opt_capture);\n  }\n\n  var listenerMap \x3d goog.events.getListenerMap_(\n      /** @type {!EventTarget} */ (obj));\n  return !!listenerMap \x26\x26 listenerMap.hasListener(opt_type, opt_capture);\n};\n\n\n/**\n * Provides a nice string showing the normalized event objects public members\n * @param {Object} e Event Object.\n * @return {string} String of the public members of the normalized event object.\n */\ngoog.events.expose \x3d function(e) {\n  var str \x3d [];\n  for (var key in e) {\n    if (e[key] \x26\x26 e[key].id) {\n      str.push(key + \x27 \x3d \x27 + e[key] + \x27 (\x27 + e[key].id + \x27)\x27);\n    } else {\n      str.push(key + \x27 \x3d \x27 + e[key]);\n    }\n  }\n  return str.join(\x27\\n\x27);\n};\n\n\n/**\n * Returns a string with on prepended to the specified type. This is used for IE\n * which expects \x22on\x22 to be prepended. This function caches the string in order\n * to avoid extra allocations in steady state.\n * @param {string} type Event type.\n * @return {string} The type string with \x27on\x27 prepended.\n * @private\n */\ngoog.events.getOnString_ \x3d function(type) {\n  if (type in goog.events.onStringMap_) {\n    return goog.events.onStringMap_[type];\n  }\n  return goog.events.onStringMap_[type] \x3d goog.events.onString_ + type;\n};\n\n\n/**\n * Fires an object\x27s listeners of a particular type and phase\n *\n * @param {Object} obj Object whose listeners to call.\n * @param {string|!goog.events.EventId} type Event type.\n * @param {boolean} capture Which event phase.\n * @param {Object} eventObject Event object to be passed to listener.\n * @return {boolean} True if all listeners returned true else false.\n */\ngoog.events.fireListeners \x3d function(obj, type, capture, eventObject) {\n  if (goog.events.Listenable.isImplementedBy(obj)) {\n    return /** @type {!goog.events.Listenable} */ (obj).fireListeners(\n        type, capture, eventObject);\n  }\n\n  return goog.events.fireListeners_(obj, type, capture, eventObject);\n};\n\n\n/**\n * Fires an object\x27s listeners of a particular type and phase.\n * @param {Object} obj Object whose listeners to call.\n * @param {string|!goog.events.EventId} type Event type.\n * @param {boolean} capture Which event phase.\n * @param {Object} eventObject Event object to be passed to listener.\n * @return {boolean} True if all listeners returned true else false.\n * @private\n */\ngoog.events.fireListeners_ \x3d function(obj, type, capture, eventObject) {\n  /** @type {boolean} */\n  var retval \x3d true;\n\n  var listenerMap \x3d goog.events.getListenerMap_(\n      /** @type {EventTarget} */ (obj));\n  if (listenerMap) {\n    // TODO(chrishenry): Original code avoids array creation when there\n    // is no listener, so we do the same. If this optimization turns\n    // out to be not required, we can replace this with\n    // listenerMap.getListeners(type, capture) instead, which is simpler.\n    var listenerArray \x3d listenerMap.listeners[type.toString()];\n    if (listenerArray) {\n      listenerArray \x3d listenerArray.concat();\n      for (var i \x3d 0; i \x3c listenerArray.length; i++) {\n        var listener \x3d listenerArray[i];\n        // We might not have a listener if the listener was removed.\n        if (listener \x26\x26 listener.capture \x3d\x3d capture \x26\x26 !listener.removed) {\n          var result \x3d goog.events.fireListener(listener, eventObject);\n          retval \x3d retval \x26\x26 (result !\x3d\x3d false);\n        }\n      }\n    }\n  }\n  return retval;\n};\n\n\n/**\n * Fires a listener with a set of arguments\n *\n * @param {goog.events.Listener} listener The listener object to call.\n * @param {Object} eventObject The event object to pass to the listener.\n * @return {*} Result of listener.\n */\ngoog.events.fireListener \x3d function(listener, eventObject) {\n  var listenerFn \x3d listener.listener;\n  var listenerHandler \x3d listener.handler || listener.src;\n\n  if (listener.callOnce) {\n    goog.events.unlistenByKey(listener);\n  }\n  return listenerFn.call(listenerHandler, eventObject);\n};\n\n\n/**\n * Gets the total number of listeners currently in the system.\n * @return {number} Number of listeners.\n * @deprecated This returns estimated count, now that Closure no longer\n * stores a central listener registry. We still return an estimation\n * to keep existing listener-related tests passing. In the near future,\n * this function will be removed.\n */\ngoog.events.getTotalListenerCount \x3d function() {\n  return goog.events.listenerCountEstimate_;\n};\n\n\n/**\n * Dispatches an event (or event like object) and calls all listeners\n * listening for events of this type. The type of the event is decided by the\n * type property on the event object.\n *\n * If any of the listeners returns false OR calls preventDefault then this\n * function will return false.  If one of the capture listeners calls\n * stopPropagation, then the bubble listeners won\x27t fire.\n *\n * @param {goog.events.Listenable} src The event target.\n * @param {goog.events.EventLike} e Event object.\n * @return {boolean} If anyone called preventDefault on the event object (or\n *     if any of the handlers returns false) this will also return false.\n *     If there are no handlers, or if all handlers return true, this returns\n *     true.\n */\ngoog.events.dispatchEvent \x3d function(src, e) {\n  goog.asserts.assert(\n      goog.events.Listenable.isImplementedBy(src),\n      \x27Can not use goog.events.dispatchEvent with \x27 +\n          \x27non-goog.events.Listenable instance.\x27);\n  return src.dispatchEvent(e);\n};\n\n\n/**\n * Installs exception protection for the browser event entry point using the\n * given error handler.\n *\n * @param {goog.debug.ErrorHandler} errorHandler Error handler with which to\n *     protect the entry point.\n */\ngoog.events.protectBrowserEventEntryPoint \x3d function(errorHandler) {\n  goog.events.handleBrowserEvent_ \x3d\n      errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);\n};\n\n\n/**\n * Handles an event and dispatches it to the correct listeners. This\n * function is a proxy for the real listener the user specified.\n *\n * @param {goog.events.Listener} listener The listener object.\n * @param {Event\x3d} opt_evt Optional event object that gets passed in via the\n *     native event handlers.\n * @return {*} Result of the event handler.\n * @this {EventTarget} The object or Element that fired the event.\n * @private\n */\ngoog.events.handleBrowserEvent_ \x3d function(listener, opt_evt) {\n  if (listener.removed) {\n    return true;\n  }\n\n  // Synthesize event propagation if the browser does not support W3C\n  // event model.\n  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {\n    var ieEvent \x3d opt_evt ||\n        /** @type {Event} */ (goog.getObjectByName(\x27window.event\x27));\n    var evt \x3d new goog.events.BrowserEvent(ieEvent, this);\n    /** @type {*} */\n    var retval \x3d true;\n\n    if (goog.events.CAPTURE_SIMULATION_MODE \x3d\x3d\n        goog.events.CaptureSimulationMode.ON) {\n      // If we have not marked this event yet, we should perform capture\n      // simulation.\n      if (!goog.events.isMarkedIeEvent_(ieEvent)) {\n        goog.events.markIeEvent_(ieEvent);\n\n        var ancestors \x3d [];\n        for (var parent \x3d evt.currentTarget; parent;\n             parent \x3d parent.parentNode) {\n          ancestors.push(parent);\n        }\n\n        // Fire capture listeners.\n        var type \x3d listener.type;\n        for (var i \x3d ancestors.length - 1; !evt.propagationStopped_ \x26\x26 i \x3e\x3d 0;\n             i--) {\n          evt.currentTarget \x3d ancestors[i];\n          var result \x3d\n              goog.events.fireListeners_(ancestors[i], type, true, evt);\n          retval \x3d retval \x26\x26 result;\n        }\n\n        // Fire bubble listeners.\n        //\n        // We can technically rely on IE to perform bubble event\n        // propagation. However, it turns out that IE fires events in\n        // opposite order of attachEvent registration, which broke\n        // some code and tests that rely on the order. (While W3C DOM\n        // Level 2 Events TR leaves the event ordering unspecified,\n        // modern browsers and W3C DOM Level 3 Events Working Draft\n        // actually specify the order as the registration order.)\n        for (var i \x3d 0; !evt.propagationStopped_ \x26\x26 i \x3c ancestors.length; i++) {\n          evt.currentTarget \x3d ancestors[i];\n          var result \x3d\n              goog.events.fireListeners_(ancestors[i], type, false, evt);\n          retval \x3d retval \x26\x26 result;\n        }\n      }\n    } else {\n      retval \x3d goog.events.fireListener(listener, evt);\n    }\n    return retval;\n  }\n\n  // Otherwise, simply fire the listener.\n  return goog.events.fireListener(\n      listener, new goog.events.BrowserEvent(opt_evt, this));\n};\n\n\n/**\n * This is used to mark the IE event object so we do not do the Closure pass\n * twice for a bubbling event.\n * @param {Event} e The IE browser event.\n * @private\n */\ngoog.events.markIeEvent_ \x3d function(e) {\n  // Only the keyCode and the returnValue can be changed. We use keyCode for\n  // non keyboard events.\n  // event.returnValue is a bit more tricky. It is undefined by default. A\n  // boolean false prevents the default action. In a window.onbeforeunload and\n  // the returnValue is non undefined it will be alerted. However, we will only\n  // modify the returnValue for keyboard events. We can get a problem if non\n  // closure events sets the keyCode or the returnValue\n\n  var useReturnValue \x3d false;\n\n  if (e.keyCode \x3d\x3d 0) {\n    // We cannot change the keyCode in case that srcElement is input[type\x3dfile].\n    // We could test that that is the case but that would allocate 3 objects.\n    // If we use try/catch we will only allocate extra objects in the case of a\n    // failure.\n\n    try {\n      e.keyCode \x3d -1;\n      return;\n    } catch (ex) {\n      useReturnValue \x3d true;\n    }\n  }\n\n  if (useReturnValue ||\n      /** @type {boolean|undefined} */ (e.returnValue) \x3d\x3d undefined) {\n    e.returnValue \x3d true;\n  }\n};\n\n\n/**\n * This is used to check if an IE event has already been handled by the Closure\n * system so we do not do the Closure pass twice for a bubbling event.\n * @param {Event} e  The IE browser event.\n * @return {boolean} True if the event object has been marked.\n * @private\n */\ngoog.events.isMarkedIeEvent_ \x3d function(e) {\n  return e.keyCode \x3c 0 || e.returnValue !\x3d undefined;\n};\n\n\n/**\n * Counter to create unique event ids.\n * @private {number}\n */\ngoog.events.uniqueIdCounter_ \x3d 0;\n\n\n/**\n * Creates a unique event id.\n *\n * @param {string} identifier The identifier.\n * @return {string} A unique identifier.\n * @idGenerator {unique}\n */\ngoog.events.getUniqueId \x3d function(identifier) {\n  return identifier + \x27_\x27 + goog.events.uniqueIdCounter_++;\n};\n\n\n/**\n * @param {EventTarget} src The source object.\n * @return {goog.events.ListenerMap} A listener map for the given\n *     source object, or null if none exists.\n * @private\n */\ngoog.events.getListenerMap_ \x3d function(src) {\n  var listenerMap \x3d src[goog.events.LISTENER_MAP_PROP_];\n  // IE serializes the property as well (e.g. when serializing outer\n  // HTML). So we must check that the value is of the correct type.\n  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;\n};\n\n\n/**\n * Expando property for listener function wrapper for Object with\n * handleEvent.\n * @private @const {string}\n */\ngoog.events.LISTENER_WRAPPER_PROP_ \x3d\n    \x27__closure_events_fn_\x27 + ((Math.random() * 1e9) \x3e\x3e\x3e 0);\n\n\n/**\n * @param {Object|Function} listener The listener function or an\n *     object that contains handleEvent method.\n * @return {!Function} Either the original function or a function that\n *     calls obj.handleEvent. If the same listener is passed to this\n *     function more than once, the same function is guaranteed to be\n *     returned.\n */\ngoog.events.wrapListener \x3d function(listener) {\n  goog.asserts.assert(listener, \x27Listener can not be null.\x27);\n\n  if (goog.isFunction(listener)) {\n    return listener;\n  }\n\n  goog.asserts.assert(\n      listener.handleEvent, \x27An object listener must have handleEvent method.\x27);\n  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {\n    listener[goog.events.LISTENER_WRAPPER_PROP_] \x3d function(e) {\n      return /** @type {?} */ (listener).handleEvent(e);\n    };\n  }\n  return listener[goog.events.LISTENER_WRAPPER_PROP_];\n};\n\n\n// Register the browser event handler as an entry point, so that\n// it can be monitored for exception handling, etc.\ngoog.debug.entryPointRegistry.register(\n    /**\n     * @param {function(!Function): !Function} transformer The transforming\n     *     function.\n     */\n    function(transformer) {\n      goog.events.handleBrowserEvent_ \x3d\n          transformer(goog.events.handleBrowserEvent_);\n    });\n\n//# sourceURL\x3dhttps://qs/javascript/closure/events/events.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/backbutton_detector/backbutton_detector.js";
goog.loadModule("// Copyright 2010 Google Inc. All Rights Reserved.\n\n/**\n * @fileoverview : A framework to log return-to-page; and to support actions\n * triggered by returning to the page after a click on the selected elements.\n *\n * A client of this framework should call google.event.back.register in its\n * init function, and provide a function to be called on return to page that\n * returns an extra logging parameter.\n *\n * related design doc: http://goto.google.com/toolbelt_perresult_design\n *\n * @author yujing@google.com (Yujing Zeng)\n * @author jmittleman@google.com (Josh Mittleman)\n */\ngoog.module(\x27gws.back\x27);\ngoog.module.declareLegacyNamespace();\n\nconst EventType \x3d goog.require(\x27goog.events.EventType\x27);\nconst browser \x3d goog.require(\x27goog.labs.userAgent.browser\x27);\nconst dom \x3d goog.require(\x27goog.dom\x27);\nconst events \x3d goog.require(\x27goog.events\x27);\nconst googArray \x3d goog.require(\x27goog.array\x27);\nconst isBackButton \x3d goog.require(\x27search.function.isBackButton\x27);\nconst location \x3d goog.require(\x27gws.location\x27);\nconst {assert} \x3d goog.require(\x27goog.asserts\x27);\n\n/**\n * Trigger type for a backbutton log.\n *\n * @enum {string}\n */\nconst TriggerType \x3d {\n  NAVIGATION: \x27navigation\x27,\n  PAGESHOW: EventType.PAGESHOW,\n  POPSTATE: EventType.POPSTATE,\n};\n\n/**\n * An array of callbacks that return extra parameters to append to the\n * google.log\n *\n * @type {!Array\x3cfunction() : string\x3e}\n */\nlet extraParamFns \x3d [];\n\n/** @type {?number} */\nlet blockPopstateId \x3d null;\n\n/**\n * Used to debounce browsers (Safari) that send both popstate\n * and pageshow events on a back event for fastback.\n * @type {?string}\n */\nlet currentHref \x3d null;\n\n/**\n * Register a client of backbutton detection.\n *\n * @param {function(): string} fn Return-to-page function.\n */\nfunction register(fn) {\n  extraParamFns.push(fn);\n}\n\n/**\n * @param {!TriggerType} triggerType\n */\nfunction logBackButton(triggerType) {\n  // LINT.IfChange\n  const extraParams \x3d googArray.map(extraParamFns, (cb) \x3d\x3e cb()).join(\x27\x27);\n\n  /**\n   * This is a fairly weak assert about the correctness of extraParams\n   * but this functionality (adding extra parameters with a function() -\x3e\n   * string) is going away so we should be mostly safe.\n   *\n   * A better way to handle getting extra parameters is to ask for an object\n   * which can then be converted into whatever format the transport layer wants.\n   *\n   * TODO(twilkinson): once users are no longer depending on legacy back button\n   * fix this behavior and unsafety.\n   */\n  if (extraParams) {\n    assert(extraParams.substr(0, 1) \x3d\x3d \x27\x26\x27);\n  }\n  google.log(\n      \x27backbutton\x27, \x27\x26tt\x3d\x27 + triggerType + \x27\x26ei\x3d\x27 + google.kEI + extraParams);\n  // LINT.ThenChange(\n  //         //depot/google3/logs/sessions/event/interaction_assigner.cc)\n}\n\n/**\n * Set up a callback that blocks a popstate for 100 ms.\n */\nfunction setBlockPopstate() {\n  currentHref \x3d location.getLocation().href;\n  blockPopstateId \x3d setTimeout(() \x3d\x3e {\n    currentHref \x3d null;\n    blockPopstateId \x3d null;\n  }, 100);\n}\n\n/** @package */\nconst deps \x3d {\n  isBackButton,\n};\n\n/**\n * Initializes the backbutton detector.\n */\nfunction init() {\n  /**\n   * This covers all browsers that support window.performance.navigation\n   * http://caniuse.com/#feat\x3dnav-timing\n   */\n  if (deps.isBackButton()) {\n    logBackButton(TriggerType.NAVIGATION);\n  }\n\n  /**\n   * This covers all browsers that send an onpageshow event with\n   * persisted \x3d true when the page is loaded from BFCache.\n   * This is currently for Safari and Firefox.\n   */\n  events.listen(dom.getWindow(), EventType.PAGESHOW, (event) \x3d\x3e {\n    if (event.getBrowserEvent()[\x27persisted\x27]) {\n      if (browser.isSafari()) {\n        setBlockPopstate();\n      }\n      logBackButton(TriggerType.PAGESHOW);\n    }\n  }, false);\n\n  /**\n   * This is for pages still depending on JESR, and JESR sends this event\n   * for soft page transitions.\n   */\n  events.listen(dom.getWindow(), EventType.POPSTATE, (event) \x3d\x3e {\n    if (browser.isSafari()) {\n      // If there\x27s a current timeout id stored, then maybe ignore a\n      // popstate event.\n      // Safari is the only browser with these issues and they are two fold.\n      // First, Safari sends a popstate on initial pageload.\n      // Second, Safari sends both a popstate and a pageshow when the user\n      // goes back from an external page to a page that had been pushed\n      // by window.history.\n      if (blockPopstateId) {\n        if (currentHref \x3d\x3d location.getLocation().href) {\n          clearTimeout(blockPopstateId);\n          blockPopstateId \x3d null;\n          currentHref \x3d null;\n          return;\n        }\n      }\n    }\n    logBackButton(TriggerType.POPSTATE);\n  }, false);\n\n  if (browser.isSafari()) {\n    setBlockPopstate();\n  }\n}\n\ninit();\n\n/**\n * @package\n */\nconst testing \x3d {\n  setUp() {\n    extraParamFns \x3d [];\n    blockPopstateId \x3d null;\n    currentHref \x3d null;\n    init();\n  },\n};\n\nexports \x3d {\n  TriggerType,\n  register,\n  testing,\n  deps,\n};\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/backbutton_detector/backbutton_detector.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/error_logger/error_logger.js";
eval("/**\n * @fileoverview This is a stub implementation of the gws.error namespaced\n *    functions.  These functions are fully implemented in the associated mod\n *    extensions for this module.\n */\n\ngoog.provide(\x27gws.error\x27);\ngoog.provide(\x27gws.error.DeobfuscationLogger\x27);\n\n\n/**\n * A function to log JavaScript errors to be deobfuscated and sent to jCatcher.\n * The param definitions for this function are identical to gws.error.log.\n *\n * @typedef {function(!Error, !Object\x3cstring,string\x3e\x3d, boolean\x3d)}\n */\ngws.error.DeobfuscationLogger;\n\n\n/**\n * Logs a JavaScript error and stack trace.  It will use the DeobfuscationLogger\n * if it\x27s set, else defaults to google.ml. An error will be thrown only when\n * in local demos or when overriding the experiment flag:\n * expflags\x3djs_error_sample_rate:-2\n *\n * @param {!Error} e The error to be logged to GWS. Note that errors with no\n *     message field will be ignored (this function does nothing when called\n *     with \x22new Error()\x22 for this argument).\n * @param {!Object\x3d} opt_data A map of key/value pairs to be included in the\n       log message.\n * @param {boolean\x3d} opt_discardOnError If the error passed into this invocation\n *     will be immediately rethrown such that it subsequently bubbles\n *     up to the onerror event handler, set this flag to true to prevent the\n *     error from being logged twice.  The error will be logged here but\n *     ignored in onerror.\n * @deprecated Please use search.log.errorLogger.log instead. For more info and\n *     usage examples see go/gws-error-logging-api.\n */\ngws.error.log \x3d function(e, opt_data, opt_discardOnError) {\n  if (gws.error.deobfuscateLog_) {\n    gws.error.deobfuscateLog_(e, opt_data, opt_discardOnError);\n  } else {\n    google.ml(e, !!opt_discardOnError, opt_data);\n  }\n};\n\n// For error reporting in jslayout.\ngoog.exportSymbol(\x27jsl.el\x27, gws.error.log);\n\n\n/**\n * Uses gws.log.error to log a JavaScript error and stack trace, but never\n * throws an exception.\n *\n * @param {!Error} e\n * @param {!Object\x3d} opt_data\n * @param {boolean\x3d} opt_discardOnError\n * @deprecated Please use search.log.errorLogger.log instead. For more info and\n *     usage examples see go/gws-error-logging-api.\n */\ngws.error.logWithoutThrowing \x3d function(e, opt_data, opt_discardOnError) {\n  try {\n    gws.error.log(e, opt_data, opt_discardOnError);\n  } catch (exc) {\n    // Ignored.\n  }\n};\n\n\n/**\n * @private {?gws.error.DeobfuscationLogger}\n */\ngws.error.deobfuscateLog_ \x3d null;\n\n\n/**\n * @param {!gws.error.DeobfuscationLogger} deobfuscationLogger\n */\ngws.error.registerDeobfuscator \x3d function(deobfuscationLogger) {\n  gws.error.deobfuscateLog_ \x3d deobfuscationLogger;\n\n  // Used in error_reporting_js.js as a signal whether to pass error handling\n  // on to gws.error.deobfuscateLog_.\n  goog.exportSymbol(\x27google.dl\x27, gws.error.deobfuscateLog_);\n};\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/error_logger/error_logger.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/xjs_constants.js";
eval("// Copyright 2010 Google Inc. All Rights Reserved.\n\n/**\n * @fileoverview Constants that are inherently shared between two or\n * more modules. For now we\x27re not including values that happen to\n * be referenced in multiple modules yet have an obvious owner.\n * Perhaps we can revisit this later.\n *\n * When making changes to this file make sure all ExternJS modules build\n * and all ExternJS tests pass. Note that you should generally never change\n * the value of an existing constant.\n *\n * @author mrw@google.com (Matthew Watson)\n */\ngoog.provide(\x27gws.constants\x27);\n\n\n/**\n *******************************************************************************\n * Types for callbacks used between modules. Keep in sorted order by variable\n * name.\n * NEXT ID: 185\n *******************************************************************************\n */\n\n/** @enum {number} */\ngws.constants \x3d {\n  /**\n   * function(), returns null\n   * This message is sent from Action Menu JS when a Why This Ad menu item click\n   * occurs.\n   */\n  MESSAGE_TYPE_ACTION_MENU_WHY_THIS_AD_CLICK: 133,\n  /**\n   * function(), returns null\n   * When the Assist Overlay has been exited, revealing the rest of the SERP;\n   * see go/e200-answers.\n   */\n  MESSAGE_TYPE_AFTER_EXIT_ASSIST_OVERLAY: 165,\n  /**\n   * function(), returns null\n   * When the speech recognition interface is aborted either due to a user\n   * interaction or an error.\n   */\n  MESSAGE_TYPE_AFTER_SPEECH_RECOGNITION_ABORT: 126,\n  /**\n   * function(query, searchMethod), returns null\n   * When the speech recognition interface ends after voice input is completed\n   * and the speech recognition results are received from the browser. The\n   * speech recognition query is passed as the first parameter and the search\n   * method as the second (see go/searchbox-search-method).\n   */\n  MESSAGE_TYPE_AFTER_SPEECH_RECOGNITION_END: 121,\n  /**\n   * function(), returns null\n   * When the speech recognition interface is started.\n   */\n  MESSAGE_TYPE_BEFORE_SPEECH_RECOGNITION_START: 120,\n  /**\n   * function(), returns null\n   * This message is sent from bottom sheet when it is dismissed. This allows\n   * users of bottom sheet to have actions on dismissal of the sheet.\n   */\n  MESSAGE_TYPE_BOTTOM_SHEET_DISMISSED: 184,\n  /**\n   * function(), returns null\n   * This message is sent from the various immersive implementations like\n   * Local, KP, TVM\x3c Restaurants, etc signalling something has changed on the\n   * page (DOM Changes, Visibility changes, async data loaded, tab change, etc)\n   * This is used by Attention logging then to re-parse / re-report the viewport\n   * and VE visibility.\n   * go/new-attention-api\n   */\n  MESSAGE_TYPE_DOM_UPDATE: 182,\n  /**\n   * function(), returns null\n   * This message is sent when the omnibox gets focus in 1993.\n   */\n  MESSAGE_TYPE_EMBEDDED_SEARCH_OMNIBOX_FOCUSED: 141,\n  /**\n   * function(), returns null\n   * This message is sent when the 1993 speech button is clicked.\n   */\n  MESSAGE_TYPE_EMBEDDED_SEARCH_SPEECH_BUTTON_CLICKED: 128,\n  /**\n   * function(), returns null\n   * This message is sent when a finance entity filled star is clicked.\n   */\n  MESSAGE_TYPE_FINANCE_ENTITY_FILLED_STAR_CLICKED: 163,\n  /**\n   * function(), returns null\n   * This message is sent when the star notification needs to be hidden.\n   */\n  MESSAGE_TYPE_FINANCE_ENTITY_HIDE_STAR_NOTIFICATION: 173,\n  /**\n   * function(), returns null\n   * This message is sent when a finance entity has been successfully starred.\n   */\n  MESSAGE_TYPE_FINANCE_ENTITY_STARRED_SUCCESS: 157,\n  /**\n   * function(), returns null\n   * This message is sent when an attempt to star a finance star throws an\n   * error.\n   */\n  MESSAGE_TYPE_FINANCE_ENTITY_STARRED_ERROR: 159,\n  /**\n   * function(), returns null\n   * This message is sent when a finance entity unfilled star is clicked.\n   */\n  MESSAGE_TYPE_FINANCE_ENTITY_UNFILLED_STAR_CLICKED: 162,\n  /**\n   * function(), returns null\n   * This message is sent when a finance entity has been successfully unstarred.\n   */\n  MESSAGE_TYPE_FINANCE_ENTITY_UNSTARRED_SUCCESS: 158,\n  /**\n   * function(), returns null\n   * This message is sent when an attempt to unstar a finance star throws an\n   * error.\n   */\n  MESSAGE_TYPE_FINANCE_ENTITY_UNSTARRED_ERROR: 160,\n  /**\n   * function(), returns null\n   * This message is sent from finance wholepage tab container xjs module when a\n   * user changes the selected tab.\n   */\n  MESSAGE_TYPE_FINANCE_WHOLEPAGE_TAB_SELECTION: 183,\n  /**\n   * function(height), returns null\n   * When the framed SERP\x27s header height changes, this message is fired to\n   * indicate to the GSA JS code that it may need to update its native rendering\n   * to adapt.\n   */\n  MESSAGE_TYPE_GSA_CHROME_HEADER_HEIGHT_CHANGED: 73,\n  /**\n   * function(), returns null\n   * This message is sent by HotwordUi when Chrome Hotword extension detects\n   * \x22Ok Google\x22.\n   * @const {number}\n   */\n  MESSAGE_TYPE_HOTWORD_VOICE_TRIGGER: 144,\n  /**\n   * function(url, opt_noCache, opt_replace), returns bool\n   * Before google.nav.go navigates to a URL it calls a callback to override\n   * navigation (currently hooked by JESR).  If the callback returns false, the\n   * common library assumes the callback handled the navigation and does not\n   * update the window location.\n   */\n  MESSAGE_TYPE_NAV_BEFORE_GO: 32,\n  /**\n   * function(), returns null\n   * When the RHS height is changed by a search feature, such as Manhattan\n   * elasticity, this message should be fired.\n   */\n  MESSAGE_TYPE_ON_RHS_SIZE_CHANGE: 60,\n  /**\n   * function(), returns null\n   * When the search form or one of its parent elements is modified such that\n   * the search form offset from the top/left corner of the page has changed and\n   * any absolutely positioned elements may now be misaligned, this message\n   * should be fired to make the necessary adjustments.\n   */\n  MESSAGE_TYPE_ON_SEARCH_FORM_OFFSET_CHANGE: 64,\n  /**\n   * function(), returns bool\n   * Whenever Suggest wants to hide the shown suggestions table for any\n   * reason, it first calls any registered hide suggestions callbacks.  If any\n   * of them return false, the table is not hidden.\n   * TODO(gilad): Remove once the consolidated Seachbox is launched on psychic.\n   */\n  MESSAGE_TYPE_SEARCHBOX_HIDE_SUGGESTIONS: 11,\n  /**\n   * function(), returns bool\n   * Whenever Suggest wants to show the hidden suggestions table for any\n   * reason, it first calls any registered show suggestions callbacks.  If any\n   * of them return false, the table is not shown.\n   * TODO(gilad): Remove once the consolidated Seachbox is launched on psychic.\n   */\n  MESSAGE_TYPE_SEARCHBOX_SHOW_SUGGESTIONS: 22,\n  /**\n   * function(), returns null\n   * This message is sent when the microphone icon in the searchbox is clicked.\n   */\n  MESSAGE_TYPE_SEARCHBOX_SPEECH_BUTTON_CLICKED: 140,\n  /**\n   * function(), returns null\n   * This message is sent when the voice promo microphone button in the\n   * searchbox is clicked.\n   */\n  MESSAGE_TYPE_SEARCHBOX_VOICE_PROMO_MIC_BUTTON_CLICKED: 181,\n  /**\n   * function(userInput), returns bool\n   * When the user submits the search form Suggest hides any shown suggestions\n   * and updates the oq and other form fields.  First, however, it calls any\n   * registered submit form callbacks, and if any return false it does not\n   * perform this default behavior.\n   */\n  MESSAGE_TYPE_SEARCHBOX_SUBMIT_FORM: 15,\n  /**\n   * function(url, query), returns string\n   * When Suggest makes a request for suggestions, it first calls any\n   * submit query callbacks registered with it, passing in the url it plans to\n   * use to make the Suggest query.  Callbacks return a modified url which\n   * suggest uses instead.\n   */\n  MESSAGE_TYPE_SEARCHBOX_SUBMIT_QUERY: 16,\n  /**\n   * function(), returns bool\n   * Whenever the Searchbox hides its TextAhead layer it announces it with\n   * this method (only if/when the client is registered to listen to such\n   * events).\n   */\n  MESSAGE_TYPE_SEARCHBOX_TEXT_AHEAD_HIDDEN: 55,\n  /**\n   * function(completion), returns boolean\n   * Whenever the Searchbox shows its TextAhead layer it announces it with\n   * this method (only if/when the client is registered to listen to such\n   * events).\n   */\n  MESSAGE_TYPE_SEARCHBOX_TEXT_AHEAD_SHOWN: 54,\n  /**\n   * function(query), returns null\n   * When a result comes back from the speech recognition interface. The Speech\n   * query is passed as the only argument.\n   */\n  MESSAGE_TYPE_SPEECH_RECOGNITION_RESULT: 136,\n  /**\n   * function(), returns null\n   * This message is sent when the speech recognition interface is disabled.\n   */\n  MESSAGE_TYPE_SPEECH_RECOGNITION_DISABLED: 138,\n  /**\n   * function(), returns null\n   * When the Speech recognition interface is reset.\n   */\n  MESSAGE_TYPE_SPEECH_RESET: 137,\n  /**\n   * function(), returns null\n   * Before opening a new menu we should first close all others.\n   */\n  MESSAGE_TYPE_TOP_NAV_BEFORE_DROPDOWN_OPEN: 93,\n};\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/xjs_constants.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/debug/logrecord.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Definition of the LogRecord class. Please minimize\n * dependencies this file has on other closure classes as any dependency it\n * takes won\x27t be able to use the logging infrastructure.\n *\n * @author jonp@google.com (Jon Perlow)\n */\n\ngoog.provide(\x27goog.debug.LogRecord\x27);\n\n\n\n/**\n * LogRecord objects are used to pass logging requests between\n * the logging framework and individual log Handlers.\n * @constructor\n * @param {goog.debug.Logger.Level} level One of the level identifiers.\n * @param {string} msg The string message.\n * @param {string} loggerName The name of the source logger.\n * @param {number\x3d} opt_time Time this log record was created if other than now.\n *     If 0, we use #goog.now.\n * @param {number\x3d} opt_sequenceNumber Sequence number of this log record. This\n *     should only be passed in when restoring a log record from persistence.\n */\ngoog.debug.LogRecord \x3d function(\n    level, msg, loggerName, opt_time, opt_sequenceNumber) {\n  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);\n};\n\n\n/**\n * Time the LogRecord was created.\n * @type {number}\n * @private\n */\ngoog.debug.LogRecord.prototype.time_;\n\n\n/**\n * Level of the LogRecord\n * @type {goog.debug.Logger.Level}\n * @private\n */\ngoog.debug.LogRecord.prototype.level_;\n\n\n/**\n * Message associated with the record\n * @type {string}\n * @private\n */\ngoog.debug.LogRecord.prototype.msg_;\n\n\n/**\n * Name of the logger that created the record.\n * @type {string}\n * @private\n */\ngoog.debug.LogRecord.prototype.loggerName_;\n\n\n/**\n * Sequence number for the LogRecord. Each record has a unique sequence number\n * that is greater than all log records created before it.\n * @type {number}\n * @private\n */\ngoog.debug.LogRecord.prototype.sequenceNumber_ \x3d 0;\n\n\n/**\n * Exception associated with the record\n * @type {Object}\n * @private\n */\ngoog.debug.LogRecord.prototype.exception_ \x3d null;\n\n\n/**\n * @define {boolean} Whether to enable log sequence numbers.\n */\ngoog.define(\x27goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS\x27, true);\n\n\n/**\n * A sequence counter for assigning increasing sequence numbers to LogRecord\n * objects.\n * @type {number}\n * @private\n */\ngoog.debug.LogRecord.nextSequenceNumber_ \x3d 0;\n\n\n/**\n * Sets all fields of the log record.\n * @param {goog.debug.Logger.Level} level One of the level identifiers.\n * @param {string} msg The string message.\n * @param {string} loggerName The name of the source logger.\n * @param {number\x3d} opt_time Time this log record was created if other than now.\n *     If 0, we use #goog.now.\n * @param {number\x3d} opt_sequenceNumber Sequence number of this log record. This\n *     should only be passed in when restoring a log record from persistence.\n */\ngoog.debug.LogRecord.prototype.reset \x3d function(\n    level, msg, loggerName, opt_time, opt_sequenceNumber) {\n  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {\n    this.sequenceNumber_ \x3d typeof opt_sequenceNumber \x3d\x3d \x27number\x27 ?\n        opt_sequenceNumber :\n        goog.debug.LogRecord.nextSequenceNumber_++;\n  }\n\n  this.time_ \x3d opt_time || goog.now();\n  this.level_ \x3d level;\n  this.msg_ \x3d msg;\n  this.loggerName_ \x3d loggerName;\n  delete this.exception_;\n};\n\n\n/**\n * Get the source Logger\x27s name.\n *\n * @return {string} source logger name (may be null).\n */\ngoog.debug.LogRecord.prototype.getLoggerName \x3d function() {\n  return this.loggerName_;\n};\n\n\n/**\n * Get the exception that is part of the log record.\n *\n * @return {Object} the exception.\n */\ngoog.debug.LogRecord.prototype.getException \x3d function() {\n  return this.exception_;\n};\n\n\n/**\n * Set the exception that is part of the log record.\n *\n * @param {Object} exception the exception.\n */\ngoog.debug.LogRecord.prototype.setException \x3d function(exception) {\n  this.exception_ \x3d exception;\n};\n\n\n/**\n * Get the source Logger\x27s name.\n *\n * @param {string} loggerName source logger name (may be null).\n */\ngoog.debug.LogRecord.prototype.setLoggerName \x3d function(loggerName) {\n  this.loggerName_ \x3d loggerName;\n};\n\n\n/**\n * Get the logging message level, for example Level.SEVERE.\n * @return {goog.debug.Logger.Level} the logging message level.\n */\ngoog.debug.LogRecord.prototype.getLevel \x3d function() {\n  return this.level_;\n};\n\n\n/**\n * Set the logging message level, for example Level.SEVERE.\n * @param {goog.debug.Logger.Level} level the logging message level.\n */\ngoog.debug.LogRecord.prototype.setLevel \x3d function(level) {\n  this.level_ \x3d level;\n};\n\n\n/**\n * Get the \x22raw\x22 log message, before localization or formatting.\n *\n * @return {string} the raw message string.\n */\ngoog.debug.LogRecord.prototype.getMessage \x3d function() {\n  return this.msg_;\n};\n\n\n/**\n * Set the \x22raw\x22 log message, before localization or formatting.\n *\n * @param {string} msg the raw message string.\n */\ngoog.debug.LogRecord.prototype.setMessage \x3d function(msg) {\n  this.msg_ \x3d msg;\n};\n\n\n/**\n * Get event time in milliseconds since 1970.\n *\n * @return {number} event time in millis since 1970.\n */\ngoog.debug.LogRecord.prototype.getMillis \x3d function() {\n  return this.time_;\n};\n\n\n/**\n * Set event time in milliseconds since 1970.\n *\n * @param {number} time event time in millis since 1970.\n */\ngoog.debug.LogRecord.prototype.setMillis \x3d function(time) {\n  this.time_ \x3d time;\n};\n\n\n/**\n * Get the sequence number.\n * \x3cp\x3e\n * Sequence numbers are normally assigned in the LogRecord\n * constructor, which assigns unique sequence numbers to\n * each new LogRecord in increasing order.\n * @return {number} the sequence number.\n */\ngoog.debug.LogRecord.prototype.getSequenceNumber \x3d function() {\n  return this.sequenceNumber_;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/debug/logrecord.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/debug/logbuffer.js";
eval("// Copyright 2010 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A buffer for log records. The purpose of this is to improve\n * logging performance by re-using old objects when the buffer becomes full and\n * to eliminate the need for each app to implement their own log buffer. The\n * disadvantage to doing this is that log handlers cannot maintain references to\n * log records and expect that they are not overwriten at a later point.\n *\n * @author agrieve@google.com (Andrew Grieve)\n */\n\ngoog.provide(\x27goog.debug.LogBuffer\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.debug.LogRecord\x27);\n\n\n\n/**\n * Creates the log buffer.\n * @constructor\n * @final\n */\ngoog.debug.LogBuffer \x3d function() {\n  goog.asserts.assert(\n      goog.debug.LogBuffer.isBufferingEnabled(),\n      \x27Cannot use goog.debug.LogBuffer without defining \x27 +\n          \x27goog.debug.LogBuffer.CAPACITY.\x27);\n  this.clear();\n};\n\n\n/**\n * A static method that always returns the same instance of LogBuffer.\n * @return {!goog.debug.LogBuffer} The LogBuffer singleton instance.\n */\ngoog.debug.LogBuffer.getInstance \x3d function() {\n  if (!goog.debug.LogBuffer.instance_) {\n    // This function is written with the return statement after the assignment\n    // to avoid the jscompiler StripCode bug described in http://b/2608064.\n    // After that bug is fixed this can be refactored.\n    goog.debug.LogBuffer.instance_ \x3d new goog.debug.LogBuffer();\n  }\n  return goog.debug.LogBuffer.instance_;\n};\n\n\n/**\n * @define {number} The number of log records to buffer. 0 means disable\n * buffering.\n */\ngoog.define(\x27goog.debug.LogBuffer.CAPACITY\x27, 0);\n\n\n/**\n * The array to store the records.\n * @type {!Array\x3c!goog.debug.LogRecord|undefined\x3e}\n * @private\n */\ngoog.debug.LogBuffer.prototype.buffer_;\n\n\n/**\n * The index of the most recently added record or -1 if there are no records.\n * @type {number}\n * @private\n */\ngoog.debug.LogBuffer.prototype.curIndex_;\n\n\n/**\n * Whether the buffer is at capacity.\n * @type {boolean}\n * @private\n */\ngoog.debug.LogBuffer.prototype.isFull_;\n\n\n/**\n * Adds a log record to the buffer, possibly overwriting the oldest record.\n * @param {goog.debug.Logger.Level} level One of the level identifiers.\n * @param {string} msg The string message.\n * @param {string} loggerName The name of the source logger.\n * @return {!goog.debug.LogRecord} The log record.\n */\ngoog.debug.LogBuffer.prototype.addRecord \x3d function(level, msg, loggerName) {\n  var curIndex \x3d (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;\n  this.curIndex_ \x3d curIndex;\n  if (this.isFull_) {\n    var ret \x3d this.buffer_[curIndex];\n    ret.reset(level, msg, loggerName);\n    return ret;\n  }\n  this.isFull_ \x3d curIndex \x3d\x3d goog.debug.LogBuffer.CAPACITY - 1;\n  return this.buffer_[curIndex] \x3d\n             new goog.debug.LogRecord(level, msg, loggerName);\n};\n\n\n/**\n * @return {boolean} Whether the log buffer is enabled.\n */\ngoog.debug.LogBuffer.isBufferingEnabled \x3d function() {\n  return goog.debug.LogBuffer.CAPACITY \x3e 0;\n};\n\n\n/**\n * Removes all buffered log records.\n */\ngoog.debug.LogBuffer.prototype.clear \x3d function() {\n  this.buffer_ \x3d new Array(goog.debug.LogBuffer.CAPACITY);\n  this.curIndex_ \x3d -1;\n  this.isFull_ \x3d false;\n};\n\n\n/**\n * Calls the given function for each buffered log record, starting with the\n * oldest one.\n * @param {function(!goog.debug.LogRecord)} func The function to call.\n */\ngoog.debug.LogBuffer.prototype.forEachRecord \x3d function(func) {\n  var buffer \x3d this.buffer_;\n  // Corner case: no records.\n  if (!buffer[0]) {\n    return;\n  }\n  var curIndex \x3d this.curIndex_;\n  var i \x3d this.isFull_ ? curIndex : -1;\n  do {\n    i \x3d (i + 1) % goog.debug.LogBuffer.CAPACITY;\n    func(/** @type {!goog.debug.LogRecord} */ (buffer[i]));\n  } while (i !\x3d curIndex);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/debug/logbuffer.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/debug/logger.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Definition of the Logger class. Please minimize dependencies\n * this file has on other closure classes as any dependency it takes won\x27t be\n * able to use the logging infrastructure.\n *\n * @author jonp@google.com (Jon Perlow)\n * @see ../demos/debug.html\n */\n\ngoog.provide(\x27goog.debug.LogManager\x27);\ngoog.provide(\x27goog.debug.Loggable\x27);\ngoog.provide(\x27goog.debug.Logger\x27);\ngoog.provide(\x27goog.debug.Logger.Level\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.debug\x27);\ngoog.require(\x27goog.debug.LogBuffer\x27);\ngoog.require(\x27goog.debug.LogRecord\x27);\n\n\n/**\n * A message value that can be handled by a Logger.\n *\n * Functions are treated like callbacks, but are only called when the event\x27s\n * log level is enabled. This is useful for logging messages that are expensive\n * to construct.\n *\n * @typedef {string|function(): string}\n */\ngoog.debug.Loggable;\n\n\n\n/**\n * The Logger is an object used for logging debug messages. Loggers are\n * normally named, using a hierarchical dot-separated namespace. Logger names\n * can be arbitrary strings, but they should normally be based on the package\n * name or class name of the logged component, such as goog.net.BrowserChannel.\n *\n * The Logger object is loosely based on the java class\n * java.util.logging.Logger. It supports different levels of filtering for\n * different loggers.\n *\n * The logger object should never be instantiated by application code. It\n * should always use the goog.debug.Logger.getLogger function.\n *\n * @constructor\n * @param {string} name The name of the Logger.\n * @final\n */\ngoog.debug.Logger \x3d function(name) {\n  /**\n   * Name of the Logger. Generally a dot-separated namespace\n   * @private {string}\n   */\n  this.name_ \x3d name;\n\n  /**\n   * Parent Logger.\n   * @private {goog.debug.Logger}\n   */\n  this.parent_ \x3d null;\n\n  /**\n   * Level that this logger only filters above. Null indicates it should\n   * inherit from the parent.\n   * @private {goog.debug.Logger.Level}\n   */\n  this.level_ \x3d null;\n\n  /**\n   * Map of children loggers. The keys are the leaf names of the children and\n   * the values are the child loggers.\n   * @private {Object}\n   */\n  this.children_ \x3d null;\n\n  /**\n   * Handlers that are listening to this logger.\n   * @private {Array\x3cFunction\x3e}\n   */\n  this.handlers_ \x3d null;\n};\n\n\n/** @const */\ngoog.debug.Logger.ROOT_LOGGER_NAME \x3d \x27\x27;\n\n\n/**\n * @define {boolean} Toggles whether loggers other than the root logger can have\n *     log handlers attached to them and whether they can have their log level\n *     set. Logging is a bit faster when this is set to false.\n */\ngoog.define(\x27goog.debug.Logger.ENABLE_HIERARCHY\x27, true);\n\n\n/**\n * @define {boolean} Toggles whether active log statements are also recorded\n *     to the profiler.\n */\ngoog.define(\x27goog.debug.Logger.ENABLE_PROFILER_LOGGING\x27, false);\n\n\nif (!goog.debug.Logger.ENABLE_HIERARCHY) {\n  /**\n   * @type {!Array\x3cFunction\x3e}\n   * @private\n   */\n  goog.debug.Logger.rootHandlers_ \x3d [];\n\n\n  /**\n   * @type {goog.debug.Logger.Level}\n   * @private\n   */\n  goog.debug.Logger.rootLevel_;\n}\n\n\n\n/**\n * The Level class defines a set of standard logging levels that\n * can be used to control logging output.  The logging Level objects\n * are ordered and are specified by ordered integers.  Enabling logging\n * at a given level also enables logging at all higher levels.\n * \x3cp\x3e\n * Clients should normally use the predefined Level constants such\n * as Level.SEVERE.\n * \x3cp\x3e\n * The levels in descending order are:\n * \x3cul\x3e\n * \x3cli\x3eSEVERE (highest value)\n * \x3cli\x3eWARNING\n * \x3cli\x3eINFO\n * \x3cli\x3eCONFIG\n * \x3cli\x3eFINE\n * \x3cli\x3eFINER\n * \x3cli\x3eFINEST  (lowest value)\n * \x3c/ul\x3e\n * In addition there is a level OFF that can be used to turn\n * off logging, and a level ALL that can be used to enable\n * logging of all messages.\n *\n * @param {string} name The name of the level.\n * @param {number} value The numeric value of the level.\n * @constructor\n * @final\n */\ngoog.debug.Logger.Level \x3d function(name, value) {\n  /**\n   * The name of the level\n   * @type {string}\n   */\n  this.name \x3d name;\n\n  /**\n   * The numeric value of the level\n   * @type {number}\n   */\n  this.value \x3d value;\n};\n\n\n/**\n * @return {string} String representation of the logger level.\n * @override\n */\ngoog.debug.Logger.Level.prototype.toString \x3d function() {\n  return this.name;\n};\n\n\n/**\n * OFF is a special level that can be used to turn off logging.\n * This level is initialized to \x3cCODE\x3eInfinity\x3c/CODE\x3e.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.OFF \x3d new goog.debug.Logger.Level(\x27OFF\x27, Infinity);\n\n\n/**\n * SHOUT is a message level for extra debugging loudness.\n * This level is initialized to \x3cCODE\x3e1200\x3c/CODE\x3e.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.SHOUT \x3d new goog.debug.Logger.Level(\x27SHOUT\x27, 1200);\n\n\n/**\n * SEVERE is a message level indicating a serious failure.\n * This level is initialized to \x3cCODE\x3e1000\x3c/CODE\x3e.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.SEVERE \x3d new goog.debug.Logger.Level(\x27SEVERE\x27, 1000);\n\n\n/**\n * WARNING is a message level indicating a potential problem.\n * This level is initialized to \x3cCODE\x3e900\x3c/CODE\x3e.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.WARNING \x3d new goog.debug.Logger.Level(\x27WARNING\x27, 900);\n\n\n/**\n * INFO is a message level for informational messages.\n * This level is initialized to \x3cCODE\x3e800\x3c/CODE\x3e.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.INFO \x3d new goog.debug.Logger.Level(\x27INFO\x27, 800);\n\n\n/**\n * CONFIG is a message level for static configuration messages.\n * This level is initialized to \x3cCODE\x3e700\x3c/CODE\x3e.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.CONFIG \x3d new goog.debug.Logger.Level(\x27CONFIG\x27, 700);\n\n\n/**\n * FINE is a message level providing tracing information.\n * This level is initialized to \x3cCODE\x3e500\x3c/CODE\x3e.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.FINE \x3d new goog.debug.Logger.Level(\x27FINE\x27, 500);\n\n\n/**\n * FINER indicates a fairly detailed tracing message.\n * This level is initialized to \x3cCODE\x3e400\x3c/CODE\x3e.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.FINER \x3d new goog.debug.Logger.Level(\x27FINER\x27, 400);\n\n/**\n * FINEST indicates a highly detailed tracing message.\n * This level is initialized to \x3cCODE\x3e300\x3c/CODE\x3e.\n * @type {!goog.debug.Logger.Level}\n */\n\ngoog.debug.Logger.Level.FINEST \x3d new goog.debug.Logger.Level(\x27FINEST\x27, 300);\n\n\n/**\n * ALL indicates that all messages should be logged.\n * This level is initialized to \x3cCODE\x3e0\x3c/CODE\x3e.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.ALL \x3d new goog.debug.Logger.Level(\x27ALL\x27, 0);\n\n\n/**\n * The predefined levels.\n * @type {!Array\x3c!goog.debug.Logger.Level\x3e}\n * @final\n */\ngoog.debug.Logger.Level.PREDEFINED_LEVELS \x3d [\n  goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT,\n  goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING,\n  goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG,\n  goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER,\n  goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL\n];\n\n\n/**\n * A lookup map used to find the level object based on the name or value of\n * the level object.\n * @type {Object}\n * @private\n */\ngoog.debug.Logger.Level.predefinedLevelsCache_ \x3d null;\n\n\n/**\n * Creates the predefined levels cache and populates it.\n * @private\n */\ngoog.debug.Logger.Level.createPredefinedLevelsCache_ \x3d function() {\n  goog.debug.Logger.Level.predefinedLevelsCache_ \x3d {};\n  for (var i \x3d 0, level; level \x3d goog.debug.Logger.Level.PREDEFINED_LEVELS[i];\n       i++) {\n    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] \x3d level;\n    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] \x3d level;\n  }\n};\n\n\n/**\n * Gets the predefined level with the given name.\n * @param {string} name The name of the level.\n * @return {goog.debug.Logger.Level} The level, or null if none found.\n */\ngoog.debug.Logger.Level.getPredefinedLevel \x3d function(name) {\n  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {\n    goog.debug.Logger.Level.createPredefinedLevelsCache_();\n  }\n\n  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;\n};\n\n\n/**\n * Gets the highest predefined level \x3c\x3d #value.\n * @param {number} value Level value.\n * @return {goog.debug.Logger.Level} The level, or null if none found.\n */\ngoog.debug.Logger.Level.getPredefinedLevelByValue \x3d function(value) {\n  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {\n    goog.debug.Logger.Level.createPredefinedLevelsCache_();\n  }\n\n  if (value in /** @type {!Object} */ (\n          goog.debug.Logger.Level.predefinedLevelsCache_)) {\n    return goog.debug.Logger.Level.predefinedLevelsCache_[value];\n  }\n\n  for (var i \x3d 0; i \x3c goog.debug.Logger.Level.PREDEFINED_LEVELS.length; ++i) {\n    var level \x3d goog.debug.Logger.Level.PREDEFINED_LEVELS[i];\n    if (level.value \x3c\x3d value) {\n      return level;\n    }\n  }\n  return null;\n};\n\n\n/**\n * Finds or creates a logger for a named subsystem. If a logger has already been\n * created with the given name it is returned. Otherwise a new logger is\n * created. If a new logger is created its log level will be configured based\n * on the LogManager configuration and it will configured to also send logging\n * output to its parent\x27s handlers. It will be registered in the LogManager\n * global namespace.\n *\n * @param {string} name A name for the logger. This should be a dot-separated\n * name and should normally be based on the package name or class name of the\n * subsystem, such as goog.net.BrowserChannel.\n * @return {!goog.debug.Logger} The named logger.\n * @deprecated use {@link goog.log} instead.\n * MOE:begin_intracomment_strip\n * See http://go/goog-debug-logger-deprecated.\n * MOE:end_intracomment_strip\n */\ngoog.debug.Logger.getLogger \x3d function(name) {\n  return goog.debug.LogManager.getLogger(name);\n};\n\n\n/**\n * Logs a message to profiling tools, if available.\n * {@see https://developers.google.com/web-toolkit/speedtracer/logging-api}\n * {@see http://msdn.microsoft.com/en-us/library/dd433074(VS.85).aspx}\n * @param {string} msg The message to log.\n */\ngoog.debug.Logger.logToProfilers \x3d function(msg) {\n  // Some browsers also log timeStamp calls to the console, only log\n  // if actually asked.\n  if (goog.debug.Logger.ENABLE_PROFILER_LOGGING) {\n    var msWriteProfilerMark \x3d goog.global[\x27msWriteProfilerMark\x27];\n    if (msWriteProfilerMark) {\n      // Logs a message to the Microsoft profiler\n      // On IE, console[\x27timeStamp\x27] may output to console\n      msWriteProfilerMark(msg);\n      return;\n    }\n\n    // Using goog.global, as loggers might be used in window-less contexts.\n    var console \x3d goog.global[\x27console\x27];\n    if (console \x26\x26 console[\x27timeStamp\x27]) {\n      // Logs a message to Firebug, Web Inspector, SpeedTracer, etc.\n      console[\x27timeStamp\x27](msg);\n    }\n  }\n};\n\n\n/**\n * Gets the name of this logger.\n * @return {string} The name of this logger.\n */\ngoog.debug.Logger.prototype.getName \x3d function() {\n  return this.name_;\n};\n\n\n/**\n * Adds a handler to the logger. This doesn\x27t use the event system because\n * we want to be able to add logging to the event system.\n * @param {Function} handler Handler function to add.\n */\ngoog.debug.Logger.prototype.addHandler \x3d function(handler) {\n  if (goog.debug.LOGGING_ENABLED) {\n    if (goog.debug.Logger.ENABLE_HIERARCHY) {\n      if (!this.handlers_) {\n        this.handlers_ \x3d [];\n      }\n      this.handlers_.push(handler);\n    } else {\n      goog.asserts.assert(\n          !this.name_, \x27Cannot call addHandler on a non-root logger when \x27 +\n              \x27goog.debug.Logger.ENABLE_HIERARCHY is false.\x27);\n      goog.debug.Logger.rootHandlers_.push(handler);\n    }\n  }\n};\n\n\n/**\n * Removes a handler from the logger. This doesn\x27t use the event system because\n * we want to be able to add logging to the event system.\n * @param {Function} handler Handler function to remove.\n * @return {boolean} Whether the handler was removed.\n */\ngoog.debug.Logger.prototype.removeHandler \x3d function(handler) {\n  if (goog.debug.LOGGING_ENABLED) {\n    var handlers \x3d goog.debug.Logger.ENABLE_HIERARCHY ?\n        this.handlers_ :\n        goog.debug.Logger.rootHandlers_;\n    return !!handlers \x26\x26 goog.array.remove(handlers, handler);\n  } else {\n    return false;\n  }\n};\n\n\n/**\n * Returns the parent of this logger.\n * @return {goog.debug.Logger} The parent logger or null if this is the root.\n */\ngoog.debug.Logger.prototype.getParent \x3d function() {\n  return this.parent_;\n};\n\n\n/**\n * Returns the children of this logger as a map of the child name to the logger.\n * @return {!Object} The map where the keys are the child leaf names and the\n *     values are the Logger objects.\n */\ngoog.debug.Logger.prototype.getChildren \x3d function() {\n  if (!this.children_) {\n    this.children_ \x3d {};\n  }\n  return this.children_;\n};\n\n\n/**\n * Set the log level specifying which message levels will be logged by this\n * logger. Message levels lower than this value will be discarded.\n * The level value Level.OFF can be used to turn off logging. If the new level\n * is null, it means that this node should inherit its level from its nearest\n * ancestor with a specific (non-null) level value.\n *\n * @param {goog.debug.Logger.Level} level The new level.\n */\ngoog.debug.Logger.prototype.setLevel \x3d function(level) {\n  if (goog.debug.LOGGING_ENABLED) {\n    if (goog.debug.Logger.ENABLE_HIERARCHY) {\n      this.level_ \x3d level;\n    } else {\n      goog.asserts.assert(\n          !this.name_, \x27Cannot call setLevel() on a non-root logger when \x27 +\n              \x27goog.debug.Logger.ENABLE_HIERARCHY is false.\x27);\n      goog.debug.Logger.rootLevel_ \x3d level;\n    }\n  }\n};\n\n\n/**\n * Gets the log level specifying which message levels will be logged by this\n * logger. Message levels lower than this value will be discarded.\n * The level value Level.OFF can be used to turn off logging. If the level\n * is null, it means that this node should inherit its level from its nearest\n * ancestor with a specific (non-null) level value.\n *\n * @return {goog.debug.Logger.Level} The level.\n */\ngoog.debug.Logger.prototype.getLevel \x3d function() {\n  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;\n};\n\n\n/**\n * Returns the effective level of the logger based on its ancestors\x27 levels.\n * @return {goog.debug.Logger.Level} The level.\n */\ngoog.debug.Logger.prototype.getEffectiveLevel \x3d function() {\n  if (!goog.debug.LOGGING_ENABLED) {\n    return goog.debug.Logger.Level.OFF;\n  }\n\n  if (!goog.debug.Logger.ENABLE_HIERARCHY) {\n    return goog.debug.Logger.rootLevel_;\n  }\n  if (this.level_) {\n    return this.level_;\n  }\n  if (this.parent_) {\n    return this.parent_.getEffectiveLevel();\n  }\n  goog.asserts.fail(\x27Root logger has no level set.\x27);\n  return null;\n};\n\n\n/**\n * Checks if a message of the given level would actually be logged by this\n * logger. This check is based on the Loggers effective level, which may be\n * inherited from its parent.\n * @param {goog.debug.Logger.Level} level The level to check.\n * @return {boolean} Whether the message would be logged.\n */\ngoog.debug.Logger.prototype.isLoggable \x3d function(level) {\n  return goog.debug.LOGGING_ENABLED \x26\x26\n      level.value \x3e\x3d this.getEffectiveLevel().value;\n};\n\n\n/**\n * Logs a message. If the logger is currently enabled for the\n * given message level then the given message is forwarded to all the\n * registered output Handler objects.\n * @param {goog.debug.Logger.Level} level One of the level identifiers.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error|Object\x3d} opt_exception An exception associated with the\n *     message.\n */\ngoog.debug.Logger.prototype.log \x3d function(level, msg, opt_exception) {\n  // java caches the effective level, not sure it\x27s necessary here\n  if (goog.debug.LOGGING_ENABLED \x26\x26 this.isLoggable(level)) {\n    // Message callbacks can be useful when a log message is expensive to build.\n    if (goog.isFunction(msg)) {\n      msg \x3d msg();\n    }\n\n    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));\n  }\n};\n\n\n/**\n * Creates a new log record and adds the exception (if present) to it.\n * @param {goog.debug.Logger.Level} level One of the level identifiers.\n * @param {string} msg The string message.\n * @param {Error|Object\x3d} opt_exception An exception associated with the\n *     message.\n * @return {!goog.debug.LogRecord} A log record.\n * @suppress {es5Strict}\n */\ngoog.debug.Logger.prototype.getLogRecord \x3d function(level, msg, opt_exception) {\n  if (goog.debug.LogBuffer.isBufferingEnabled()) {\n    var logRecord \x3d\n        goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_);\n  } else {\n    logRecord \x3d new goog.debug.LogRecord(level, String(msg), this.name_);\n  }\n  if (opt_exception) {\n    logRecord.setException(opt_exception);\n  }\n  return logRecord;\n};\n\n\n/**\n * Logs a message at the Logger.Level.SHOUT level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error\x3d} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.shout \x3d function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.SEVERE level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error\x3d} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.severe \x3d function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.WARNING level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error\x3d} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.warning \x3d function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.INFO level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error\x3d} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.info \x3d function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.CONFIG level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error\x3d} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.config \x3d function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.FINE level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error\x3d} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.fine \x3d function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.FINER level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error\x3d} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.finer \x3d function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.FINEST level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error\x3d} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.finest \x3d function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a LogRecord. If the logger is currently enabled for the\n * given message level then the given message is forwarded to all the\n * registered output Handler objects.\n * @param {goog.debug.LogRecord} logRecord A log record to log.\n */\ngoog.debug.Logger.prototype.logRecord \x3d function(logRecord) {\n  if (goog.debug.LOGGING_ENABLED \x26\x26 this.isLoggable(logRecord.getLevel())) {\n    this.doLogRecord_(logRecord);\n  }\n};\n\n\n/**\n * Logs a LogRecord.\n * @param {goog.debug.LogRecord} logRecord A log record to log.\n * @private\n */\ngoog.debug.Logger.prototype.doLogRecord_ \x3d function(logRecord) {\n  if (goog.debug.Logger.ENABLE_PROFILER_LOGGING) {\n    goog.debug.Logger.logToProfilers(\x27log:\x27 + logRecord.getMessage());\n  }\n  if (goog.debug.Logger.ENABLE_HIERARCHY) {\n    var target \x3d this;\n    while (target) {\n      target.callPublish_(logRecord);\n      target \x3d target.getParent();\n    }\n  } else {\n    for (var i \x3d 0, handler; handler \x3d goog.debug.Logger.rootHandlers_[i++];) {\n      handler(logRecord);\n    }\n  }\n};\n\n\n/**\n * Calls the handlers for publish.\n * @param {goog.debug.LogRecord} logRecord The log record to publish.\n * @private\n */\ngoog.debug.Logger.prototype.callPublish_ \x3d function(logRecord) {\n  if (this.handlers_) {\n    for (var i \x3d 0, handler; handler \x3d this.handlers_[i]; i++) {\n      handler(logRecord);\n    }\n  }\n};\n\n\n/**\n * Sets the parent of this logger. This is used for setting up the logger tree.\n * @param {goog.debug.Logger} parent The parent logger.\n * @private\n */\ngoog.debug.Logger.prototype.setParent_ \x3d function(parent) {\n  this.parent_ \x3d parent;\n};\n\n\n/**\n * Adds a child to this logger. This is used for setting up the logger tree.\n * @param {string} name The leaf name of the child.\n * @param {goog.debug.Logger} logger The child logger.\n * @private\n */\ngoog.debug.Logger.prototype.addChild_ \x3d function(name, logger) {\n  this.getChildren()[name] \x3d logger;\n};\n\n\n/**\n * There is a single global LogManager object that is used to maintain a set of\n * shared state about Loggers and log services. This is loosely based on the\n * java class java.util.logging.LogManager.\n * @const\n */\ngoog.debug.LogManager \x3d {};\n\n\n/**\n * Map of logger names to logger objects.\n *\n * @type {!Object\x3cstring, !goog.debug.Logger\x3e}\n * @private\n */\ngoog.debug.LogManager.loggers_ \x3d {};\n\n\n/**\n * The root logger which is the root of the logger tree.\n * @type {goog.debug.Logger}\n * @private\n */\ngoog.debug.LogManager.rootLogger_ \x3d null;\n\n\n/**\n * Initializes the LogManager if not already initialized.\n */\ngoog.debug.LogManager.initialize \x3d function() {\n  if (!goog.debug.LogManager.rootLogger_) {\n    goog.debug.LogManager.rootLogger_ \x3d\n        new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);\n    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] \x3d\n        goog.debug.LogManager.rootLogger_;\n    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);\n  }\n};\n\n\n/**\n * Returns all the loggers.\n * @return {!Object\x3cstring, !goog.debug.Logger\x3e} Map of logger names to logger\n *     objects.\n */\ngoog.debug.LogManager.getLoggers \x3d function() {\n  return goog.debug.LogManager.loggers_;\n};\n\n\n/**\n * Returns the root of the logger tree namespace, the logger with the empty\n * string as its name.\n *\n * @return {!goog.debug.Logger} The root logger.\n */\ngoog.debug.LogManager.getRoot \x3d function() {\n  goog.debug.LogManager.initialize();\n  return /** @type {!goog.debug.Logger} */ (goog.debug.LogManager.rootLogger_);\n};\n\n\n/**\n * Finds a named logger.\n *\n * @param {string} name A name for the logger. This should be a dot-separated\n * name and should normally be based on the package name or class name of the\n * subsystem, such as goog.net.BrowserChannel.\n * @return {!goog.debug.Logger} The named logger.\n */\ngoog.debug.LogManager.getLogger \x3d function(name) {\n  goog.debug.LogManager.initialize();\n  var ret \x3d goog.debug.LogManager.loggers_[name];\n  return ret || goog.debug.LogManager.createLogger_(name);\n};\n\n\n/**\n * Creates a function that can be passed to goog.debug.catchErrors. The function\n * will log all reported errors using the given logger.\n * @param {goog.debug.Logger\x3d} opt_logger The logger to log the errors to.\n *     Defaults to the root logger.\n * @return {function(Object)} The created function.\n */\ngoog.debug.LogManager.createFunctionForCatchErrors \x3d function(opt_logger) {\n  return function(info) {\n    var logger \x3d opt_logger || goog.debug.LogManager.getRoot();\n    logger.severe(\n        \x27Error: \x27 + info.message + \x27 (\x27 + info.fileName + \x27 @ Line: \x27 +\n        info.line + \x27)\x27);\n  };\n};\n\n\n/**\n * Creates the named logger. Will also create the parents of the named logger\n * if they don\x27t yet exist.\n * @param {string} name The name of the logger.\n * @return {!goog.debug.Logger} The named logger.\n * @private\n */\ngoog.debug.LogManager.createLogger_ \x3d function(name) {\n  // find parent logger\n  var logger \x3d new goog.debug.Logger(name);\n  if (goog.debug.Logger.ENABLE_HIERARCHY) {\n    var lastDotIndex \x3d name.lastIndexOf(\x27.\x27);\n    var parentName \x3d name.substr(0, lastDotIndex);\n    var leafName \x3d name.substr(lastDotIndex + 1);\n    var parentLogger \x3d goog.debug.LogManager.getLogger(parentName);\n\n    // tell the parent about the child and the child about the parent\n    parentLogger.addChild_(leafName, logger);\n    logger.setParent_(parentLogger);\n  }\n\n  goog.debug.LogManager.loggers_[name] \x3d logger;\n  return logger;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/debug/logger.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/log/log.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Basic strippable logging definitions.\n * @see http://go/closurelogging\n *\n * @author johnlenz@google.com (John Lenz)\n */\n\ngoog.provide(\x27goog.log\x27);\ngoog.provide(\x27goog.log.Level\x27);\ngoog.provide(\x27goog.log.LogRecord\x27);\ngoog.provide(\x27goog.log.Logger\x27);\n\ngoog.require(\x27goog.debug\x27);\ngoog.require(\x27goog.debug.LogManager\x27);\ngoog.require(\x27goog.debug.LogRecord\x27);\ngoog.require(\x27goog.debug.Logger\x27);\n\n\n/** @define {boolean} Whether logging is enabled. */\ngoog.define(\x27goog.log.ENABLED\x27, goog.debug.LOGGING_ENABLED);\n\n\n/** @const {string} */\ngoog.log.ROOT_LOGGER_NAME \x3d goog.debug.Logger.ROOT_LOGGER_NAME;\n\n\n\n/**\n * @constructor\n * @final\n */\ngoog.log.Logger \x3d goog.debug.Logger;\n\n\n\n/**\n * @constructor\n * @final\n */\ngoog.log.Level \x3d goog.debug.Logger.Level;\n\n\n\n/**\n * @constructor\n * @final\n */\ngoog.log.LogRecord \x3d goog.debug.LogRecord;\n\n\n/**\n * Finds or creates a logger for a named subsystem. If a logger has already been\n * created with the given name it is returned. Otherwise a new logger is\n * created. If a new logger is created its log level will be configured based\n * on the goog.debug.LogManager configuration and it will configured to also\n * send logging output to its parent\x27s handlers.\n * @see goog.debug.LogManager\n *\n * @param {string} name A name for the logger. This should be a dot-separated\n *     name and should normally be based on the package name or class name of\n *     the subsystem, such as goog.net.BrowserChannel.\n * @param {goog.log.Level\x3d} opt_level If provided, override the\n *     default logging level with the provided level.\n * @return {goog.log.Logger} The named logger or null if logging is disabled.\n */\ngoog.log.getLogger \x3d function(name, opt_level) {\n  if (goog.log.ENABLED) {\n    var logger \x3d goog.debug.LogManager.getLogger(name);\n    if (opt_level \x26\x26 logger) {\n      logger.setLevel(opt_level);\n    }\n    return logger;\n  } else {\n    return null;\n  }\n};\n\n\n// TODO(johnlenz): try to tighten the types to these functions.\n/**\n * Adds a handler to the logger. This doesn\x27t use the event system because\n * we want to be able to add logging to the event system.\n * @param {goog.log.Logger} logger\n * @param {Function} handler Handler function to add.\n */\ngoog.log.addHandler \x3d function(logger, handler) {\n  if (goog.log.ENABLED \x26\x26 logger) {\n    logger.addHandler(handler);\n  }\n};\n\n\n/**\n * Removes a handler from the logger. This doesn\x27t use the event system because\n * we want to be able to add logging to the event system.\n * @param {goog.log.Logger} logger\n * @param {Function} handler Handler function to remove.\n * @return {boolean} Whether the handler was removed.\n */\ngoog.log.removeHandler \x3d function(logger, handler) {\n  if (goog.log.ENABLED \x26\x26 logger) {\n    return logger.removeHandler(handler);\n  } else {\n    return false;\n  }\n};\n\n\n/**\n * Logs a message. If the logger is currently enabled for the\n * given message level then the given message is forwarded to all the\n * registered output Handler objects.\n * @param {goog.log.Logger} logger\n * @param {goog.log.Level} level One of the level identifiers.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error|Object\x3d} opt_exception An exception associated with the\n *     message.\n */\ngoog.log.log \x3d function(logger, level, msg, opt_exception) {\n  if (goog.log.ENABLED \x26\x26 logger) {\n    logger.log(level, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Level.SEVERE level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.log.Logger} logger\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error\x3d} opt_exception An exception associated with the message.\n */\ngoog.log.error \x3d function(logger, msg, opt_exception) {\n  if (goog.log.ENABLED \x26\x26 logger) {\n    logger.severe(msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Level.WARNING level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.log.Logger} logger\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error\x3d} opt_exception An exception associated with the message.\n */\ngoog.log.warning \x3d function(logger, msg, opt_exception) {\n  if (goog.log.ENABLED \x26\x26 logger) {\n    logger.warning(msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Level.INFO level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.log.Logger} logger\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error\x3d} opt_exception An exception associated with the message.\n */\ngoog.log.info \x3d function(logger, msg, opt_exception) {\n  if (goog.log.ENABLED \x26\x26 logger) {\n    logger.info(msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Level.Fine level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.log.Logger} logger\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error\x3d} opt_exception An exception associated with the message.\n */\ngoog.log.fine \x3d function(logger, msg, opt_exception) {\n  if (goog.log.ENABLED \x26\x26 logger) {\n    logger.fine(msg, opt_exception);\n  }\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/log/log.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/common/messaging.js";
eval("// Copyright 2010 Google Inc. All Rights Reserved.\n\n/**\n * @fileoverview Extension to the common library that provides a simple\n * custom event delegation model. This allows modules to hook into each\n * other with callbacks.\n *\n * IMPORTANT!!! - This will eventually be replaced with a general purpose\n * event model. It should provide the same functionality but consider yourself\n * warned.\n *\n * @author mrw@google.com (Matthew Watson)\n */\n\ngoog.provide(\x27gws.msg\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.log\x27);\ngoog.require(\x27gws.constants\x27);\ngoog.require(\x27gws.error\x27);\n\n\ngoog.scope(function() {\n\n\n/**\n * @enum {number}\n */\ngws.msg.PRIORITY \x3d {\n  INTERCEPT: -1,\n  HIGHEST: 0,\n  HIGHER: 10,\n  HIGH: 100,\n  LOW: 1000,\n  LOWER: 10000,\n  LOWEST: Number.MAX_VALUE\n};\n\ngws.msg.DEFAULT_PRIORITY \x3d gws.msg.PRIORITY.HIGHEST;\n\n\n/**\n * @private @enum {number}\n */\ngws.msg.propertyIndex_ \x3d {\n  LISTENER: 0,\n  PRIORITY: 1,\n  CALL_ONCE: 2\n};\n\n\n/**\n * Container for registered callbacks, keyed by message type.\n * @type {!Object}\n * @private\n */\ngws.msg.listeners_ \x3d {};\n\n\n/**\n * Comparator function for sorting listeners.\n * @param {Array} a First item to be compared.\n * @param {Array} b Second item to be compared.\n * @return {number} the difference in sort order.\n * @private\n */\ngws.msg.comparePriorities_ \x3d function(a, b) {\n  return goog.array.defaultCompare(\n      a[gws.msg.propertyIndex_.PRIORITY], b[gws.msg.propertyIndex_.PRIORITY]);\n};\n\n\n/**\n * Adds callbacks for each message type and callback pair. Callbacks are\n * called in the order they\x27re registered.\n * @param {...*} var_args Pairs of message types and callbacks. e.g.\n *     listen(message1, callback1, message2, callback2, ...);, optionally\n *     ending with an integer priority. Smaller values indicate higher priority.\n *     Priority 0 is the default, and priority 100 is used by certain Psychic\n *     callbacks that need to run after everything else.\n * TODO(mrw): Make this function take an array and an opt_priority.\n */\ngws.msg.listen \x3d function(var_args) {\n  var priority \x3d gws.msg.DEFAULT_PRIORITY;\n  var args \x3d arguments;\n  var numArgs \x3d args.length;\n  if (numArgs % 2 \x3d\x3d 1) {\n    // User has specified a priority as the last item.\n    priority \x3d args[numArgs - 1];\n  }\n  for (var i \x3d 0; i \x3c numArgs - 1; i +\x3d 2) {\n    var msgType \x3d args[i];\n    gws.msg.listen_(msgType, args[i + 1], priority);\n  }\n};\n\n\n/**\n * Adds a listener fn for the msgType with the given priority, which is\n * removed after being called once.\n * @param {number} msgType The message type to listen to.\n * @param {!Function} fn The listener function.\n * @param {number\x3d} opt_priority The priority of this listener.\n */\ngws.msg.listenOnce \x3d function(msgType, fn, opt_priority) {\n  gws.msg.listen_(msgType, fn, opt_priority, true);\n};\n\n\n/**\n * Helper function for adding listeners.\n * @param {number} msgType The message type to listen to.\n * @param {!Function} fn The listener function.\n * @param {number\x3d} opt_priority The priority of this listener.\n * @param {boolean\x3d} opt_callOnce Whether the listener should be removed after\n *     being invoked once.\n * @private\n */\ngws.msg.listen_ \x3d function(msgType, fn, opt_priority, opt_callOnce) {\n  gws.msg.listeners_[msgType] \x3d gws.msg.listeners_[msgType] || [];\n  var priority \x3d opt_priority || gws.msg.DEFAULT_PRIORITY;\n  var listenerArray \x3d gws.msg.listeners_[msgType];\n  // There should not be more than one listener at INTERCEPT priority.\n  if (priority \x3d\x3d gws.msg.PRIORITY.INTERCEPT) {\n    goog.asserts.assert(\n        !listenerArray[0] ||\n        listenerArray[0][gws.msg.propertyIndex_.PRIORITY] !\x3d\n            gws.msg.PRIORITY.INTERCEPT);\n  }\n  // May be good to make sure the given callback is not already present.\n  // Though individual modules should be able to manage this themselves.\n  listenerArray.push([fn, priority, !!opt_callOnce]);\n  goog.array.stableSort(listenerArray, gws.msg.comparePriorities_);\n};\n\n\n/**\n * Removes callbacks for each message type and callback pair.\n * Usage:\n *  google.msg.unlisten(message1, callback1, message2, callback2, ...);\n *\n * @param {...*} var_args Pairs of message types and callbacks.\n */\ngws.msg.unlisten \x3d function(var_args) {\n  for (var i \x3d 0; i \x3c arguments.length - 1; i +\x3d 2) {\n    var msgType \x3d arguments[i];\n    var listeners \x3d gws.msg.listeners_[msgType];\n    if (listeners) {\n      var callback \x3d arguments[i + 1];\n      for (var j \x3d 0; j \x3c listeners.length; ++j) {\n        if (listeners[j][0] \x3d\x3d callback) {\n          goog.array.removeAt(listeners, j);\n          break;\n        }\n      }\n    }\n  }\n};\n\n\n/** @private {?goog.log.Logger} */\ngws.msg.logger_ \x3d goog.log.getLogger(\x27gws.msg\x27);\n\n\n/**\n * Calls each callback registered for the specified message type. If the given\n * stop value is returned at any time processing stops.\n * @param {number} msgType Message type to send.\n *     See xjs_constants.js.\n * @param {Array\x3d} opt_args Optional array of arguments to pass to callbacks.\n * @param {*\x3d} opt_defaultValue The default value to return (default\x3dtrue).\n *     If opt_defaultValue \x3d\x3d\x3d false, all callbacks are called regardess of\n *     opt_stopValue, and their return values or ORed together.\n * @param {*\x3d} opt_stopValue If a callback returns this value no further\n *     callbacks are called.  If opt_stopValue is a function, it will be\n *     iteratively applied to each callback return.  A return value of true from\n *     the opt_stopValue function indicates that the current callback return\n *     value should be used as the stop value (and iteration should be stopped).\n * @return {*} The stop value if the opt_stopValue condition was satisfied,\n *     otherwise the last value returned. (If opt_defaultValue \x3d\x3d\x3d false,\n *     returns the ORed return values of all the callbacks).\n */\ngws.msg.send \x3d function(msgType, opt_args, opt_defaultValue, opt_stopValue) {\n  if (goog.DEBUG) {\n    // Find the name of this message.\n    var name;\n    for (var k in gws.constants) {\n      if (k.indexOf(\x27MESSAGE_\x27) \x3d\x3d 0 \x26\x26 gws.constants[k] \x3d\x3d msgType) {\n        name \x3d k;\n        break;\n      }\n    }\n    if (name) {\n      goog.log.info(gws.msg.logger_, \x27Event \x27 + name);\n    } else {\n      goog.log.info(gws.msg.logger_, \x27Event \x27 + msgType);\n    }\n  }\n\n  // If no default value is given, we default to true.\n  var returnValue \x3d opt_defaultValue \x3d\x3d\x3d undefined ? true : opt_defaultValue;\n\n  // In the case that the default value is false, return values are ORed\n  // together. This is useful when you want to know if one or more callbacks\n  // returns true.\n  var shouldOrReturnValues \x3d opt_defaultValue \x3d\x3d\x3d false;\n\n  // If arguments are passed and the first argument equals the default value,\n  // this indicates that multiple callbacks may transform the input so we\n  // overwrite the first argument as we go.\n  var resultIsCumulative \x3d opt_args \x26\x26 opt_args[0] \x3d\x3d\x3d opt_defaultValue;\n\n  if (msgType in gws.msg.listeners_) {\n    // The default stop value is false as this is the most common use case.\n    if (opt_stopValue \x3d\x3d\x3d undefined) {\n      opt_stopValue \x3d false;\n    }\n    var isStoppingValue;\n    if (typeof opt_stopValue \x3d\x3d \x27function\x27) {\n      isStoppingValue \x3d opt_stopValue;\n    } else {\n      isStoppingValue \x3d function(callbackValue) {\n        return callbackValue \x3d\x3d\x3d opt_stopValue;\n      };\n    }\n\n    // NOTE(ivovnenko): Copying listeners array, to avoid nasty case when\n    // listener unsubscribes itself from msgType causing loop to terminate\n    // before fully dispatching the message.\n    var listeners \x3d gws.msg.listeners_[msgType].slice(0);\n    for (var i \x3d 0, listener; listener \x3d listeners[i++];) {\n      var listenerFunc \x3d listener[gws.msg.propertyIndex_.LISTENER];\n      if (listener[gws.msg.propertyIndex_.CALL_ONCE]) {\n        gws.msg.unlisten(msgType, listenerFunc);\n      }\n      // If a listener throws an exception, catch it then move on to the next\n      // listener.\n      var currentValue;\n      try {\n        // NOTE(mrw): IE needs an empty array (not undefined) as the second\n        // parameter to apply or it will throw an error.\n        currentValue \x3d listenerFunc.apply(null, opt_args || []);\n      } catch (e) {\n        gws.error.log(e, {\x27gms\x27 /* gws.msg.send */: msgType});\n        continue;\n      }\n\n      if (shouldOrReturnValues) {\n        returnValue \x3d returnValue || currentValue;\n      } else {\n        if (resultIsCumulative) {\n          opt_args[0] \x3d currentValue;\n        }\n\n        returnValue \x3d currentValue;\n\n        // Note that we never bail when or\x27ing return values.\n        if (isStoppingValue(returnValue)) {\n          return returnValue;\n        }\n      }\n    }\n  }\n\n  if (typeof opt_stopValue \x3d\x3d \x27function\x27) {\n    return opt_defaultValue;\n  }\n  return returnValue;\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Unlistens to all messages.  This function is exposed just for testing\n   * purposes.\n   */\n  gws.msg.unlistenAll \x3d function() { gws.msg.listeners_ \x3d {}; };\n\n  /**\n   * Returns a count of the number of callbacks registered. This function is\n   * exposed just for testing purposes.\n   * @return {number}\n   */\n  gws.msg.getListenerCount \x3d function() {\n    var count \x3d 0;\n    for (var msgType in gws.msg.listeners_) {\n      if (gws.msg.listeners_.hasOwnProperty(msgType)) {\n        count +\x3d gws.msg.listeners_[msgType].length;\n      }\n    }\n    return count;\n  };\n}\n\n});  // goog.scope\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/common/messaging.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/functions/functions.js";
eval("// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utilities for creating functions. Loosely inspired by the\n * java classes: http://goo.gl/GM0Hmu and http://goo.gl/6k7nI8.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n\n\ngoog.provide(\x27goog.functions\x27);\n\n\n/**\n * Creates a function that always returns the same value.\n * @param {T} retValue The value to return.\n * @return {function():T} The new function.\n * @template T\n */\ngoog.functions.constant \x3d function(retValue) {\n  return function() { return retValue; };\n};\n\n\n/**\n * Always returns false.\n * @type {function(...): boolean}\n */\ngoog.functions.FALSE \x3d goog.functions.constant(false);\n\n\n/**\n * Always returns true.\n * @type {function(...): boolean}\n */\ngoog.functions.TRUE \x3d goog.functions.constant(true);\n\n\n/**\n * Always returns NULL.\n * @type {function(...): null}\n */\ngoog.functions.NULL \x3d goog.functions.constant(null);\n\n\n/**\n * A simple function that returns the first argument of whatever is passed\n * into it.\n * @param {T\x3d} opt_returnValue The single value that will be returned.\n * @param {...*} var_args Optional trailing arguments. These are ignored.\n * @return {T} The first argument passed in, or undefined if nothing was passed.\n * @template T\n */\ngoog.functions.identity \x3d function(opt_returnValue, var_args) {\n  return opt_returnValue;\n};\n\n\n/**\n * Creates a function that always throws an error with the given message.\n * @param {string} message The error message.\n * @return {!Function} The error-throwing function.\n */\ngoog.functions.error \x3d function(message) {\n  return function() {\n    throw new Error(message);\n  };\n};\n\n\n/**\n * Creates a function that throws the given object.\n * @param {*} err An object to be thrown.\n * @return {!Function} The error-throwing function.\n */\ngoog.functions.fail \x3d function(err) {\n  return function() { throw err; };\n};\n\n\n/**\n * Given a function, create a function that keeps opt_numArgs arguments and\n * silently discards all additional arguments.\n * @param {Function} f The original function.\n * @param {number\x3d} opt_numArgs The number of arguments to keep. Defaults to 0.\n * @return {!Function} A version of f that only keeps the first opt_numArgs\n *     arguments.\n */\ngoog.functions.lock \x3d function(f, opt_numArgs) {\n  opt_numArgs \x3d opt_numArgs || 0;\n  return function() {\n    var self \x3d /** @type {*} */ (this);\n    return f.apply(self, Array.prototype.slice.call(arguments, 0, opt_numArgs));\n  };\n};\n\n\n/**\n * Creates a function that returns its nth argument.\n * @param {number} n The position of the return argument.\n * @return {!Function} A new function.\n */\ngoog.functions.nth \x3d function(n) {\n  return function() { return arguments[n]; };\n};\n\n\n/**\n * Like goog.partial(), except that arguments are added after arguments to the\n * returned function.\n *\n * Usage:\n * function f(arg1, arg2, arg3, arg4) { ... }\n * var g \x3d goog.functions.partialRight(f, arg3, arg4);\n * g(arg1, arg2);\n *\n * @param {!Function} fn A function to partially apply.\n * @param {...*} var_args Additional arguments that are partially applied to fn\n *     at the end.\n * @return {!Function} A partially-applied form of the function goog.partial()\n *     was invoked as a method of.\n */\ngoog.functions.partialRight \x3d function(fn, var_args) {\n  var rightArgs \x3d Array.prototype.slice.call(arguments, 1);\n  return function() {\n    var self \x3d /** @type {*} */ (this);\n    var newArgs \x3d Array.prototype.slice.call(arguments);\n    newArgs.push.apply(newArgs, rightArgs);\n    return fn.apply(self, newArgs);\n  };\n};\n\n\n/**\n * Given a function, create a new function that swallows its return value\n * and replaces it with a new one.\n * @param {Function} f A function.\n * @param {T} retValue A new return value.\n * @return {function(...?):T} A new function.\n * @template T\n */\ngoog.functions.withReturnValue \x3d function(f, retValue) {\n  return goog.functions.sequence(f, goog.functions.constant(retValue));\n};\n\n\n/**\n * Creates a function that returns whether its argument equals the given value.\n *\n * Example:\n * var key \x3d goog.object.findKey(obj, goog.functions.equalTo(\x27needle\x27));\n *\n * @param {*} value The value to compare to.\n * @param {boolean\x3d} opt_useLooseComparison Whether to use a loose (\x3d\x3d)\n *     comparison rather than a strict (\x3d\x3d\x3d) one. Defaults to false.\n * @return {function(*):boolean} The new function.\n */\ngoog.functions.equalTo \x3d function(value, opt_useLooseComparison) {\n  return function(other) {\n    return opt_useLooseComparison ? (value \x3d\x3d other) : (value \x3d\x3d\x3d other);\n  };\n};\n\n\n/**\n * Creates the composition of the functions passed in.\n * For example, (goog.functions.compose(f, g))(a) is equivalent to f(g(a)).\n * @param {function(...?):T} fn The final function.\n * @param {...Function} var_args A list of functions.\n * @return {function(...?):T} The composition of all inputs.\n * @template T\n */\ngoog.functions.compose \x3d function(fn, var_args) {\n  var functions \x3d arguments;\n  var length \x3d functions.length;\n  return function() {\n    var self \x3d /** @type {*} */ (this);\n    var result;\n    if (length) {\n      result \x3d functions[length - 1].apply(self, arguments);\n    }\n\n    for (var i \x3d length - 2; i \x3e\x3d 0; i--) {\n      result \x3d functions[i].call(self, result);\n    }\n    return result;\n  };\n};\n\n\n/**\n * Creates a function that calls the functions passed in in sequence, and\n * returns the value of the last function. For example,\n * (goog.functions.sequence(f, g))(x) is equivalent to f(x),g(x).\n * @param {...Function} var_args A list of functions.\n * @return {!Function} A function that calls all inputs in sequence.\n */\ngoog.functions.sequence \x3d function(var_args) {\n  var functions \x3d arguments;\n  var length \x3d functions.length;\n  return function() {\n    var self \x3d /** @type {*} */ (this);\n    var result;\n    for (var i \x3d 0; i \x3c length; i++) {\n      result \x3d functions[i].apply(self, arguments);\n    }\n    return result;\n  };\n};\n\n\n/**\n * Creates a function that returns true if each of its components evaluates\n * to true. The components are evaluated in order, and the evaluation will be\n * short-circuited as soon as a function returns false.\n * For example, (goog.functions.and(f, g))(x) is equivalent to f(x) \x26\x26 g(x).\n * @param {...Function} var_args A list of functions.\n * @return {function(...?):boolean} A function that ANDs its component\n *      functions.\n */\ngoog.functions.and \x3d function(var_args) {\n  var functions \x3d arguments;\n  var length \x3d functions.length;\n  return function() {\n    var self \x3d /** @type {*} */ (this);\n    for (var i \x3d 0; i \x3c length; i++) {\n      if (!functions[i].apply(self, arguments)) {\n        return false;\n      }\n    }\n    return true;\n  };\n};\n\n\n/**\n * Creates a function that returns true if any of its components evaluates\n * to true. The components are evaluated in order, and the evaluation will be\n * short-circuited as soon as a function returns true.\n * For example, (goog.functions.or(f, g))(x) is equivalent to f(x) || g(x).\n * @param {...Function} var_args A list of functions.\n * @return {function(...?):boolean} A function that ORs its component\n *    functions.\n */\ngoog.functions.or \x3d function(var_args) {\n  var functions \x3d arguments;\n  var length \x3d functions.length;\n  return function() {\n    var self \x3d /** @type {*} */ (this);\n    for (var i \x3d 0; i \x3c length; i++) {\n      if (functions[i].apply(self, arguments)) {\n        return true;\n      }\n    }\n    return false;\n  };\n};\n\n\n/**\n * Creates a function that returns the Boolean opposite of a provided function.\n * For example, (goog.functions.not(f))(x) is equivalent to !f(x).\n * @param {!Function} f The original function.\n * @return {function(...?):boolean} A function that delegates to f and returns\n * opposite.\n */\ngoog.functions.not \x3d function(f) {\n  return function() {\n    var self \x3d /** @type {*} */ (this);\n    return !f.apply(self, arguments);\n  };\n};\n\n\n/**\n * Generic factory function to construct an object given the constructor\n * and the arguments. Intended to be bound to create object factories.\n *\n * Example:\n *\n * var factory \x3d goog.partial(goog.functions.create, Class);\n *\n * @param {function(new:T, ...)} constructor The constructor for the Object.\n * @param {...*} var_args The arguments to be passed to the constructor.\n * @return {T} A new instance of the class given in `constructor`.\n * @template T\n */\ngoog.functions.create \x3d function(constructor, var_args) {\n  /**\n   * @constructor\n   * @final\n   */\n  var temp \x3d function() {};\n  temp.prototype \x3d constructor.prototype;\n\n  // obj will have constructor\x27s prototype in its chain and\n  // \x27obj instanceof constructor\x27 will be true.\n  var obj \x3d new temp();\n\n  // obj is initialized by constructor.\n  // arguments is only array-like so lacks shift(), but can be used with\n  // the Array prototype function.\n  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));\n  return obj;\n};\n\n\n/**\n * @define {boolean} Whether the return value cache should be used.\n *    This should only be used to disable caches when testing.\n */\ngoog.define(\x27goog.functions.CACHE_RETURN_VALUE\x27, true);\n\n\n/**\n * Gives a wrapper function that caches the return value of a parameterless\n * function when first called.\n *\n * When called for the first time, the given function is called and its\n * return value is cached (thus this is only appropriate for idempotent\n * functions).  Subsequent calls will return the cached return value. This\n * allows the evaluation of expensive functions to be delayed until first used.\n *\n * To cache the return values of functions with parameters, see goog.memoize.\n *\n * @param {function():T} fn A function to lazily evaluate.\n * @return {function():T} A wrapped version the function.\n * @template T\n */\ngoog.functions.cacheReturnValue \x3d function(fn) {\n  var called \x3d false;\n  var value;\n\n  return function() {\n    if (!goog.functions.CACHE_RETURN_VALUE) {\n      return fn();\n    }\n\n    if (!called) {\n      value \x3d fn();\n      called \x3d true;\n    }\n\n    return value;\n  };\n};\n\n\n/**\n * Wraps a function to allow it to be called, at most, once. All\n * additional calls are no-ops.\n *\n * This is particularly useful for initialization functions\n * that should be called, at most, once.\n *\n * @param {function():*} f Function to call.\n * @return {function():undefined} Wrapped function.\n */\ngoog.functions.once \x3d function(f) {\n  // Keep a reference to the function that we null out when we\x27re done with\n  // it -- that way, the function can be GC\x27d when we\x27re done with it.\n  var inner \x3d f;\n  return function() {\n    if (inner) {\n      var tmp \x3d inner;\n      inner \x3d null;\n      tmp();\n    }\n  };\n};\n\n\n/**\n * Wraps a function to allow it to be called, at most, once per interval\n * (specified in milliseconds). If the wrapper function is called N times within\n * that interval, only the Nth call will go through.\n *\n * This is particularly useful for batching up repeated actions where the\n * last action should win. This can be used, for example, for refreshing an\n * autocomplete pop-up every so often rather than updating with every keystroke,\n * since the final text typed by the user is the one that should produce the\n * final autocomplete results. For more stateful debouncing with support for\n * pausing, resuming, and canceling debounced actions, use\n * `goog.async.Debouncer`.\n *\n * @param {function(this:SCOPE, ...?)} f Function to call.\n * @param {number} interval Interval over which to debounce. The function will\n *     only be called after the full interval has elapsed since the last call.\n * @param {SCOPE\x3d} opt_scope Object in whose scope to call the function.\n * @return {function(...?): undefined} Wrapped function.\n * @template SCOPE\n */\ngoog.functions.debounce \x3d function(f, interval, opt_scope) {\n  var timeout \x3d 0;\n  return /** @type {function(...?)} */ (function(var_args) {\n    goog.global.clearTimeout(timeout);\n    var args \x3d arguments;\n    timeout \x3d goog.global.setTimeout(function() {\n      f.apply(opt_scope, args);\n    }, interval);\n  });\n};\n\n\n/**\n * Wraps a function to allow it to be called, at most, once per interval\n * (specified in milliseconds). If the wrapper function is called N times in\n * that interval, both the 1st and the Nth calls will go through.\n *\n * This is particularly useful for limiting repeated user requests where the\n * the last action should win, but you also don\x27t want to wait until the end of\n * the interval before sending a request out, as it leads to a perception of\n * slowness for the user.\n *\n * @param {function(this:SCOPE, ...?)} f Function to call.\n * @param {number} interval Interval over which to throttle. The function can\n *     only be called once per interval.\n * @param {SCOPE\x3d} opt_scope Object in whose scope to call the function.\n * @return {function(...?): undefined} Wrapped function.\n * @template SCOPE\n */\ngoog.functions.throttle \x3d function(f, interval, opt_scope) {\n  var timeout \x3d 0;\n  var shouldFire \x3d false;\n  var args \x3d [];\n\n  var handleTimeout \x3d function() {\n    timeout \x3d 0;\n    if (shouldFire) {\n      shouldFire \x3d false;\n      fire();\n    }\n  };\n\n  var fire \x3d function() {\n    timeout \x3d goog.global.setTimeout(handleTimeout, interval);\n    f.apply(opt_scope, args);\n  };\n\n  return /** @type {function(...?)} */ (function(var_args) {\n    args \x3d arguments;\n    if (!timeout) {\n      fire();\n    } else {\n      shouldFire \x3d true;\n    }\n  });\n};\n\n\n/**\n * Wraps a function to allow it to be called, at most, once per interval\n * (specified in milliseconds). If the wrapper function is called N times within\n * that interval, only the 1st call will go through.\n *\n * This is particularly useful for limiting repeated user requests where the\n * first request is guaranteed to have all the data required to perform the\n * final action, so there\x27s no need to wait until the end of the interval before\n * sending the request out.\n *\n * @param {function(this:SCOPE, ...?)} f Function to call.\n * @param {number} interval Interval over which to rate-limit. The function will\n *     only be called once per interval, and ignored for the remainer of the\n *     interval.\n * @param {SCOPE\x3d} opt_scope Object in whose scope to call the function.\n * @return {function(...?): undefined} Wrapped function.\n * @template SCOPE\n */\ngoog.functions.rateLimit \x3d function(f, interval, opt_scope) {\n  var timeout \x3d 0;\n\n  var handleTimeout \x3d function() {\n    timeout \x3d 0;\n  };\n\n  return /** @type {function(...?)} */ (function(var_args) {\n    if (!timeout) {\n      timeout \x3d goog.global.setTimeout(handleTimeout, interval);\n      f.apply(opt_scope, arguments);\n    }\n  });\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/functions/functions.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/dom/vendor.js";
eval("// Copyright 2012 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Vendor prefix getters.\n */\n\ngoog.provide(\x27goog.dom.vendor\x27);\n\ngoog.require(\x27goog.string\x27);\ngoog.require(\x27goog.userAgent\x27);\n\n\n/**\n * Returns the JS vendor prefix used in CSS properties. Different vendors\n * use different methods of changing the case of the property names.\n *\n * @return {?string} The JS vendor prefix or null if there is none.\n */\ngoog.dom.vendor.getVendorJsPrefix \x3d function() {\n  if (goog.userAgent.WEBKIT) {\n    return \x27Webkit\x27;\n  } else if (goog.userAgent.GECKO) {\n    return \x27Moz\x27;\n  } else if (goog.userAgent.IE) {\n    return \x27ms\x27;\n  } else if (goog.userAgent.OPERA) {\n    return \x27O\x27;\n  }\n\n  return null;\n};\n\n\n/**\n * Returns the vendor prefix used in CSS properties.\n *\n * @return {?string} The vendor prefix or null if there is none.\n */\ngoog.dom.vendor.getVendorPrefix \x3d function() {\n  if (goog.userAgent.WEBKIT) {\n    return \x27-webkit\x27;\n  } else if (goog.userAgent.GECKO) {\n    return \x27-moz\x27;\n  } else if (goog.userAgent.IE) {\n    return \x27-ms\x27;\n  } else if (goog.userAgent.OPERA) {\n    return \x27-o\x27;\n  }\n\n  return null;\n};\n\n\n/**\n * @param {string} propertyName A property name.\n * @param {!Object\x3d} opt_object If provided, we verify if the property exists in\n *     the object.\n * @return {?string} A vendor prefixed property name, or null if it does not\n *     exist.\n */\ngoog.dom.vendor.getPrefixedPropertyName \x3d function(propertyName, opt_object) {\n  // We first check for a non-prefixed property, if available.\n  if (opt_object \x26\x26 propertyName in opt_object) {\n    return propertyName;\n  }\n  var prefix \x3d goog.dom.vendor.getVendorJsPrefix();\n  if (prefix) {\n    prefix \x3d prefix.toLowerCase();\n    var prefixedPropertyName \x3d prefix + goog.string.toTitleCase(propertyName);\n    return (!goog.isDef(opt_object) || prefixedPropertyName in opt_object) ?\n        prefixedPropertyName :\n        null;\n  }\n  return null;\n};\n\n\n/**\n * @param {string} eventType An event type.\n * @return {string} A lower-cased vendor prefixed event type.\n */\ngoog.dom.vendor.getPrefixedEventType \x3d function(eventType) {\n  var prefix \x3d goog.dom.vendor.getVendorJsPrefix() || \x27\x27;\n  return (prefix + eventType).toLowerCase();\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/dom/vendor.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/events/eventtarget.js";
eval("// Copyright 2005 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A disposable implementation of a custom\n * listenable/event target. See also: documentation for\n * `goog.events.Listenable`.\n *\n * @author arv@google.com (Erik Arvidsson) [Original implementation]\n * @author pupius@google.com (Daniel Pupius) [Port to use goog.events]\n * @see ../demos/eventtarget.html\n * @see goog.events.Listenable\n */\n\ngoog.provide(\x27goog.events.EventTarget\x27);\n\ngoog.require(\x27goog.Disposable\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.events\x27);\ngoog.require(\x27goog.events.Event\x27);\ngoog.require(\x27goog.events.Listenable\x27);\ngoog.require(\x27goog.events.ListenerMap\x27);\ngoog.require(\x27goog.object\x27);\n\n\n\n/**\n * An implementation of `goog.events.Listenable` with full W3C\n * EventTarget-like support (capture/bubble mechanism, stopping event\n * propagation, preventing default actions).\n *\n * You may subclass this class to turn your class into a Listenable.\n *\n * Unless propagation is stopped, an event dispatched by an\n * EventTarget will bubble to the parent returned by\n * `getParentEventTarget`. To set the parent, call\n * `setParentEventTarget`. Subclasses that don\x27t support\n * changing the parent can override the setter to throw an error.\n *\n * Example usage:\n * \x3cpre\x3e\n *   var source \x3d new goog.events.EventTarget();\n *   function handleEvent(e) {\n *     alert(\x27Type: \x27 + e.type + \x27; Target: \x27 + e.target);\n *   }\n *   source.listen(\x27foo\x27, handleEvent);\n *   // Or: goog.events.listen(source, \x27foo\x27, handleEvent);\n *   ...\n *   source.dispatchEvent(\x27foo\x27);  // will call handleEvent\n *   ...\n *   source.unlisten(\x27foo\x27, handleEvent);\n *   // Or: goog.events.unlisten(source, \x27foo\x27, handleEvent);\n * \x3c/pre\x3e\n *\n * @constructor\n * @extends {goog.Disposable}\n * @implements {goog.events.Listenable}\n */\ngoog.events.EventTarget \x3d function() {\n  goog.Disposable.call(this);\n\n  /**\n   * Maps of event type to an array of listeners.\n   * @private {!goog.events.ListenerMap}\n   */\n  this.eventTargetListeners_ \x3d new goog.events.ListenerMap(this);\n\n  /**\n   * The object to use for event.target. Useful when mixing in an\n   * EventTarget to another object.\n   * @private {!Object}\n   */\n  this.actualEventTarget_ \x3d this;\n\n  /**\n   * Parent event target, used during event bubbling.\n   *\n   * TODO(chrishenry): Change this to goog.events.Listenable. This\n   * currently breaks people who expect getParentEventTarget to return\n   * goog.events.EventTarget.\n   *\n   * @private {goog.events.EventTarget}\n   */\n  this.parentEventTarget_ \x3d null;\n};\ngoog.inherits(goog.events.EventTarget, goog.Disposable);\ngoog.events.Listenable.addImplementation(goog.events.EventTarget);\n\n\n/**\n * An artificial cap on the number of ancestors you can have. This is mainly\n * for loop detection.\n * @const {number}\n * @private\n */\ngoog.events.EventTarget.MAX_ANCESTORS_ \x3d 1000;\n\n\n/**\n * Returns the parent of this event target to use for bubbling.\n *\n * @return {goog.events.EventTarget} The parent EventTarget or null if\n *     there is no parent.\n * @override\n */\ngoog.events.EventTarget.prototype.getParentEventTarget \x3d function() {\n  return this.parentEventTarget_;\n};\n\n\n/**\n * Sets the parent of this event target to use for capture/bubble\n * mechanism.\n * @param {goog.events.EventTarget} parent Parent listenable (null if none).\n */\ngoog.events.EventTarget.prototype.setParentEventTarget \x3d function(parent) {\n  this.parentEventTarget_ \x3d parent;\n};\n\n\n/**\n * Adds an event listener to the event target. The same handler can only be\n * added once per the type. Even if you add the same handler multiple times\n * using the same type then it will only be called once when the event is\n * dispatched.\n *\n * @param {string|!goog.events.EventId} type The type of the event to listen for\n * @param {function(?):?|{handleEvent:function(?):?}|null} handler The function\n *     to handle the event. The handler can also be an object that implements\n *     the handleEvent method which takes the event object as argument.\n * @param {boolean\x3d} opt_capture In DOM-compliant browsers, this determines\n *     whether the listener is fired during the capture or bubble phase\n *     of the event.\n * @param {Object\x3d} opt_handlerScope Object in whose scope to call\n *     the listener.\n * @deprecated Use `#listen` instead, when possible. Otherwise, use\n *     `goog.events.listen` if you are passing Object\n *     (instead of Function) as handler.\n */\ngoog.events.EventTarget.prototype.addEventListener \x3d function(\n    type, handler, opt_capture, opt_handlerScope) {\n  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);\n};\n\n\n/**\n * Removes an event listener from the event target. The handler must be the\n * same object as the one added. If the handler has not been added then\n * nothing is done.\n *\n * @param {string} type The type of the event to listen for.\n * @param {function(?):?|{handleEvent:function(?):?}|null} handler The function\n *     to handle the event. The handler can also be an object that implements\n *     the handleEvent method which takes the event object as argument.\n * @param {boolean\x3d} opt_capture In DOM-compliant browsers, this determines\n *     whether the listener is fired during the capture or bubble phase\n *     of the event.\n * @param {Object\x3d} opt_handlerScope Object in whose scope to call\n *     the listener.\n * @deprecated Use `#unlisten` instead, when possible. Otherwise, use\n *     `goog.events.unlisten` if you are passing Object\n *     (instead of Function) as handler.\n */\ngoog.events.EventTarget.prototype.removeEventListener \x3d function(\n    type, handler, opt_capture, opt_handlerScope) {\n  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);\n};\n\n\n/** @override */\ngoog.events.EventTarget.prototype.dispatchEvent \x3d function(e) {\n  this.assertInitialized_();\n\n  var ancestorsTree, ancestor \x3d this.getParentEventTarget();\n  if (ancestor) {\n    ancestorsTree \x3d [];\n    var ancestorCount \x3d 1;\n    for (; ancestor; ancestor \x3d ancestor.getParentEventTarget()) {\n      ancestorsTree.push(ancestor);\n      goog.asserts.assert(\n          (++ancestorCount \x3c goog.events.EventTarget.MAX_ANCESTORS_),\n          \x27infinite loop\x27);\n    }\n  }\n\n  return goog.events.EventTarget.dispatchEventInternal_(\n      this.actualEventTarget_, e, ancestorsTree);\n};\n\n\n/**\n * Removes listeners from this object.  Classes that extend EventTarget may\n * need to override this method in order to remove references to DOM Elements\n * and additional listeners.\n * @override\n */\ngoog.events.EventTarget.prototype.disposeInternal \x3d function() {\n  goog.events.EventTarget.superClass_.disposeInternal.call(this);\n\n  this.removeAllListeners();\n  this.parentEventTarget_ \x3d null;\n};\n\n\n/** @override */\ngoog.events.EventTarget.prototype.listen \x3d function(\n    type, listener, opt_useCapture, opt_listenerScope) {\n  this.assertInitialized_();\n  return this.eventTargetListeners_.add(\n      String(type), listener, false /* callOnce */, opt_useCapture,\n      opt_listenerScope);\n};\n\n\n/** @override */\ngoog.events.EventTarget.prototype.listenOnce \x3d function(\n    type, listener, opt_useCapture, opt_listenerScope) {\n  return this.eventTargetListeners_.add(\n      String(type), listener, true /* callOnce */, opt_useCapture,\n      opt_listenerScope);\n};\n\n\n/** @override */\ngoog.events.EventTarget.prototype.unlisten \x3d function(\n    type, listener, opt_useCapture, opt_listenerScope) {\n  return this.eventTargetListeners_.remove(\n      String(type), listener, opt_useCapture, opt_listenerScope);\n};\n\n\n/** @override */\ngoog.events.EventTarget.prototype.unlistenByKey \x3d function(key) {\n  return this.eventTargetListeners_.removeByKey(key);\n};\n\n\n/** @override */\ngoog.events.EventTarget.prototype.removeAllListeners \x3d function(opt_type) {\n  // TODO(chrishenry): Previously, removeAllListeners can be called on\n  // uninitialized EventTarget, so we preserve that behavior. We\n  // should remove this when usages that rely on that fact are purged.\n  if (!this.eventTargetListeners_) {\n    return 0;\n  }\n  return this.eventTargetListeners_.removeAll(opt_type);\n};\n\n\n/** @override */\ngoog.events.EventTarget.prototype.fireListeners \x3d function(\n    type, capture, eventObject) {\n  // TODO(chrishenry): Original code avoids array creation when there\n  // is no listener, so we do the same. If this optimization turns\n  // out to be not required, we can replace this with\n  // getListeners(type, capture) instead, which is simpler.\n  var listenerArray \x3d this.eventTargetListeners_.listeners[String(type)];\n  if (!listenerArray) {\n    return true;\n  }\n  listenerArray \x3d listenerArray.concat();\n\n  var rv \x3d true;\n  for (var i \x3d 0; i \x3c listenerArray.length; ++i) {\n    var listener \x3d listenerArray[i];\n    // We might not have a listener if the listener was removed.\n    if (listener \x26\x26 !listener.removed \x26\x26 listener.capture \x3d\x3d capture) {\n      var listenerFn \x3d listener.listener;\n      var listenerHandler \x3d listener.handler || listener.src;\n\n      if (listener.callOnce) {\n        this.unlistenByKey(listener);\n      }\n      rv \x3d listenerFn.call(listenerHandler, eventObject) !\x3d\x3d false \x26\x26 rv;\n    }\n  }\n\n  return rv \x26\x26 eventObject.returnValue_ !\x3d false;\n};\n\n\n/** @override */\ngoog.events.EventTarget.prototype.getListeners \x3d function(type, capture) {\n  return this.eventTargetListeners_.getListeners(String(type), capture);\n};\n\n\n/** @override */\ngoog.events.EventTarget.prototype.getListener \x3d function(\n    type, listener, capture, opt_listenerScope) {\n  return this.eventTargetListeners_.getListener(\n      String(type), listener, capture, opt_listenerScope);\n};\n\n\n/** @override */\ngoog.events.EventTarget.prototype.hasListener \x3d function(\n    opt_type, opt_capture) {\n  var id \x3d goog.isDef(opt_type) ? String(opt_type) : undefined;\n  return this.eventTargetListeners_.hasListener(id, opt_capture);\n};\n\n\n/**\n * Sets the target to be used for `event.target` when firing\n * event. Mainly used for testing. For example, see\n * `goog.testing.events.mixinListenable`.\n * @param {!Object} target The target.\n */\ngoog.events.EventTarget.prototype.setTargetForTesting \x3d function(target) {\n  this.actualEventTarget_ \x3d target;\n};\n\n\n/**\n * Asserts that the event target instance is initialized properly.\n * @private\n */\ngoog.events.EventTarget.prototype.assertInitialized_ \x3d function() {\n  goog.asserts.assert(\n      this.eventTargetListeners_,\n      \x27Event target is not initialized. Did you call the superclass \x27 +\n          \x27(goog.events.EventTarget) constructor?\x27);\n};\n\n\n/**\n * Dispatches the given event on the ancestorsTree.\n *\n * @param {!Object} target The target to dispatch on.\n * @param {goog.events.Event|Object|string} e The event object.\n * @param {Array\x3cgoog.events.Listenable\x3e\x3d} opt_ancestorsTree The ancestors\n *     tree of the target, in reverse order from the closest ancestor\n *     to the root event target. May be null if the target has no ancestor.\n * @return {boolean} If anyone called preventDefault on the event object (or\n *     if any of the listeners returns false) this will also return false.\n * @private\n */\ngoog.events.EventTarget.dispatchEventInternal_ \x3d function(\n    target, e, opt_ancestorsTree) {\n  /** @suppress {missingProperties} */\n  var type \x3d e.type || /** @type {string} */ (e);\n\n  // If accepting a string or object, create a custom event object so that\n  // preventDefault and stopPropagation work with the event.\n  if (goog.isString(e)) {\n    e \x3d new goog.events.Event(e, target);\n  } else if (!(e instanceof goog.events.Event)) {\n    var oldEvent \x3d e;\n    e \x3d new goog.events.Event(type, target);\n    goog.object.extend(e, oldEvent);\n  } else {\n    e.target \x3d e.target || target;\n  }\n\n  var rv \x3d true, currentTarget;\n\n  // Executes all capture listeners on the ancestors, if any.\n  if (opt_ancestorsTree) {\n    for (var i \x3d opt_ancestorsTree.length - 1; !e.propagationStopped_ \x26\x26 i \x3e\x3d 0;\n         i--) {\n      currentTarget \x3d e.currentTarget \x3d opt_ancestorsTree[i];\n      rv \x3d currentTarget.fireListeners(type, true, e) \x26\x26 rv;\n    }\n  }\n\n  // Executes capture and bubble listeners on the target.\n  if (!e.propagationStopped_) {\n    currentTarget \x3d /** @type {?} */ (e.currentTarget \x3d target);\n    rv \x3d currentTarget.fireListeners(type, true, e) \x26\x26 rv;\n    if (!e.propagationStopped_) {\n      rv \x3d currentTarget.fireListeners(type, false, e) \x26\x26 rv;\n    }\n  }\n\n  // Executes all bubble listeners on the ancestors, if any.\n  if (opt_ancestorsTree) {\n    for (i \x3d 0; !e.propagationStopped_ \x26\x26 i \x3c opt_ancestorsTree.length; i++) {\n      currentTarget \x3d e.currentTarget \x3d opt_ancestorsTree[i];\n      rv \x3d currentTarget.fireListeners(type, false, e) \x26\x26 rv;\n    }\n  }\n\n  return rv;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/events/eventtarget.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/memoize/memoize.js";
eval("// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Tool for caching the result of expensive deterministic\n * functions.\n *\n * @see http://en.wikipedia.org/wiki/Memoization\n *\n * @author pallosp@google.com (Peter Pallos)\n */\n\ngoog.provide(\x27goog.memoize\x27);\n\n\n/**\n * Decorator around functions that caches the inner function\x27s return values.\n *\n * To cache parameterless functions, see goog.functions.cacheReturnValue.\n *\n * @param {Function} f The function to wrap. Its return value may only depend\n *     on its arguments and \x27this\x27 context. There may be further restrictions\n *     on the arguments depending on the capabilities of the serializer used.\n * @param {function(number, Object): string\x3d} opt_serializer A function to\n *     serialize f\x27s arguments. It must have the same signature as\n *     goog.memoize.simpleSerializer. It defaults to that function.\n * @this {Object} The object whose function is being wrapped.\n * @return {!Function} The wrapped function.\n */\ngoog.memoize \x3d function(f, opt_serializer) {\n  var serializer \x3d opt_serializer || goog.memoize.simpleSerializer;\n\n  return function() {\n    if (goog.memoize.ENABLE_MEMOIZE) {\n      // In the strict mode, when this function is called as a global function,\n      // the value of \x27this\x27 is undefined instead of a global object. See:\n      // https://developer.mozilla.org/en/JavaScript/Strict_mode\n      var thisOrGlobal \x3d this || goog.global;\n      // Maps the serialized list of args to the corresponding return value.\n      var cache \x3d thisOrGlobal[goog.memoize.CACHE_PROPERTY_] ||\n          (thisOrGlobal[goog.memoize.CACHE_PROPERTY_] \x3d {});\n      var key \x3d serializer(goog.getUid(f), arguments);\n      return cache.hasOwnProperty(key) ?\n          cache[key] :\n          (cache[key] \x3d f.apply(this, arguments));\n    } else {\n      return f.apply(this, arguments);\n    }\n  };\n};\n\n\n/**\n * @define {boolean} Flag to disable memoization in unit tests.\n */\ngoog.define(\x27goog.memoize.ENABLE_MEMOIZE\x27, true);\n\n\n/**\n * Clears the memoization cache on the given object.\n * @param {Object} cacheOwner The owner of the cache. This is the `this`\n *     context of the memoized function.\n */\ngoog.memoize.clearCache \x3d function(cacheOwner) {\n  cacheOwner[goog.memoize.CACHE_PROPERTY_] \x3d {};\n};\n\n\n/**\n * Name of the property used by goog.memoize as cache.\n * @type {string}\n * @private\n */\ngoog.memoize.CACHE_PROPERTY_ \x3d \x27closure_memoize_cache_\x27;\n\n\n/**\n * Simple and fast argument serializer function for goog.memoize.\n * Supports string, number, boolean, null and undefined arguments. Doesn\x27t\n * support \\x0B characters in the strings.\n * @param {number} functionUid Unique identifier of the function whose result\n *     is cached.\n * @param {?{length:number}} args The arguments that the function to memoize is\n *     called with. Note: it is an array-like object, because it supports\n *     indexing and has the length property.\n * @return {string} The list of arguments with type information concatenated\n *     with the functionUid argument, serialized as \\x0B-separated string.\n */\ngoog.memoize.simpleSerializer \x3d function(functionUid, args) {\n  var context \x3d [functionUid];\n  for (var i \x3d args.length - 1; i \x3e\x3d 0; --i) {\n    context.push(typeof args[i], args[i]);\n  }\n  return context.join(\x27\\x0B\x27);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/memoize/memoize.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/labs/dom/pagevisibilitymonitor.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview This event monitor wraps the Page Visibility API.\n * @see http://www.w3.org/TR/page-visibility/\n */\n\ngoog.provide(\x27goog.labs.dom.PageVisibilityEvent\x27);\ngoog.provide(\x27goog.labs.dom.PageVisibilityMonitor\x27);\ngoog.provide(\x27goog.labs.dom.PageVisibilityState\x27);\n\ngoog.require(\x27goog.dom\x27);\ngoog.require(\x27goog.dom.vendor\x27);\ngoog.require(\x27goog.events\x27);\ngoog.require(\x27goog.events.Event\x27);\ngoog.require(\x27goog.events.EventTarget\x27);\ngoog.require(\x27goog.events.EventType\x27);\ngoog.require(\x27goog.memoize\x27);\n\n\n/**\n * The different visibility states.\n * @enum {string}\n */\ngoog.labs.dom.PageVisibilityState \x3d {\n  HIDDEN: \x27hidden\x27,\n  VISIBLE: \x27visible\x27,\n  PRERENDER: \x27prerender\x27,\n  UNLOADED: \x27unloaded\x27\n};\n\n\n\n/**\n * This event handler allows you to catch page visibility change events.\n * @param {!goog.dom.DomHelper\x3d} opt_domHelper\n * @constructor\n * @extends {goog.events.EventTarget}\n * @final\n */\ngoog.labs.dom.PageVisibilityMonitor \x3d function(opt_domHelper) {\n  goog.labs.dom.PageVisibilityMonitor.base(this, \x27constructor\x27);\n\n  /**\n   * @private {!goog.dom.DomHelper}\n   */\n  this.domHelper_ \x3d opt_domHelper || goog.dom.getDomHelper();\n\n  /**\n   * @private {?string}\n   */\n  this.eventType_ \x3d this.getBrowserEventType_();\n\n  // Some browsers do not support visibilityChange and therefore we don\x27t bother\n  // setting up events.\n  if (this.eventType_) {\n    /**\n     * @private {goog.events.Key}\n     */\n    this.eventKey_ \x3d goog.events.listen(\n        this.domHelper_.getDocument(), this.eventType_,\n        goog.bind(this.handleChange_, this));\n  }\n};\ngoog.inherits(goog.labs.dom.PageVisibilityMonitor, goog.events.EventTarget);\n\n\n/**\n * @return {?string} The visibility change event type, or null if not supported.\n *     Memoized for performance.\n * @private\n */\ngoog.labs.dom.PageVisibilityMonitor.prototype\n    .getBrowserEventType_ \x3d goog.memoize(function() {\n  var isSupported \x3d\n      /** @type {!goog.labs.dom.PageVisibilityMonitor} */ (this).isSupported();\n  var isPrefixed \x3d\n      /** @type {!goog.labs.dom.PageVisibilityMonitor} */ (this).isPrefixed_();\n\n  if (isSupported) {\n    return isPrefixed ?\n        goog.dom.vendor.getPrefixedEventType(\n            goog.events.EventType.VISIBILITYCHANGE) :\n        goog.events.EventType.VISIBILITYCHANGE;\n  } else {\n    return null;\n  }\n});\n\n\n/**\n * @return {?string} The browser-specific document.hidden property.  Memoized\n *     for performance.\n * @private\n */\ngoog.labs.dom.PageVisibilityMonitor.prototype.getHiddenPropertyName_ \x3d\n    goog.memoize(function() {\n      return goog.dom.vendor.getPrefixedPropertyName(\n          \x27hidden\x27,\n          /** @type {!goog.labs.dom.PageVisibilityMonitor} */\n          (this).domHelper_.getDocument());\n    });\n\n\n/**\n * @return {boolean} Whether the visibility API is prefixed.\n * @private\n */\ngoog.labs.dom.PageVisibilityMonitor.prototype.isPrefixed_ \x3d function() {\n  return this.getHiddenPropertyName_() !\x3d \x27hidden\x27;\n};\n\n\n/**\n * @return {?string} The browser-specific document.visibilityState property.\n *     Memoized for performance.\n * @private\n */\ngoog.labs.dom.PageVisibilityMonitor.prototype.getVisibilityStatePropertyName_ \x3d\n    goog.memoize(function() {\n      return goog.dom.vendor.getPrefixedPropertyName(\n          \x27visibilityState\x27,\n          /** @type {!goog.labs.dom.PageVisibilityMonitor} */\n          (this).domHelper_.getDocument());\n    });\n\n\n/**\n * @return {boolean} Whether the visibility API is supported.\n */\ngoog.labs.dom.PageVisibilityMonitor.prototype.isSupported \x3d function() {\n  return !!this.getHiddenPropertyName_();\n};\n\n\n/**\n * @return {boolean} Whether the page is visible.\n */\ngoog.labs.dom.PageVisibilityMonitor.prototype.isHidden \x3d function() {\n  return !!this.domHelper_.getDocument()[this.getHiddenPropertyName_()];\n};\n\n\n/**\n * @return {?goog.labs.dom.PageVisibilityState} The page visibility state, or\n *     null if not supported.\n */\ngoog.labs.dom.PageVisibilityMonitor.prototype.getVisibilityState \x3d function() {\n  if (!this.isSupported()) {\n    return null;\n  }\n  return this.domHelper_.getDocument()[this.getVisibilityStatePropertyName_()];\n};\n\n\n/**\n * Handles the events on the element.\n * @param {goog.events.BrowserEvent} e The underlying browser event.\n * @private\n */\ngoog.labs.dom.PageVisibilityMonitor.prototype.handleChange_ \x3d function(e) {\n  var state \x3d this.getVisibilityState();\n  var visibilityEvent \x3d new goog.labs.dom.PageVisibilityEvent(\n      this.isHidden(),\n      /** @type {goog.labs.dom.PageVisibilityState} */ (state));\n  this.dispatchEvent(visibilityEvent);\n};\n\n\n/** @override */\ngoog.labs.dom.PageVisibilityMonitor.prototype.disposeInternal \x3d function() {\n  goog.events.unlistenByKey(this.eventKey_);\n  goog.labs.dom.PageVisibilityMonitor.base(this, \x27disposeInternal\x27);\n};\n\n\n\n/**\n * A page visibility change event.\n * @param {boolean} hidden Whether the page is hidden.\n * @param {goog.labs.dom.PageVisibilityState} visibilityState A more detailed\n *     visibility state.\n * @constructor\n * @extends {goog.events.Event}\n * @final\n */\ngoog.labs.dom.PageVisibilityEvent \x3d function(hidden, visibilityState) {\n  goog.labs.dom.PageVisibilityEvent.base(\n      this, \x27constructor\x27, goog.events.EventType.VISIBILITYCHANGE);\n\n  /**\n   * Whether the page is hidden.\n   * @type {boolean}\n   */\n  this.hidden \x3d hidden;\n\n  /**\n   * A more detailed visibility state.\n   * @type {goog.labs.dom.PageVisibilityState}\n   */\n  this.visibilityState \x3d visibilityState;\n};\ngoog.inherits(goog.labs.dom.PageVisibilityEvent, goog.events.Event);\n\n//# sourceURL\x3dhttps://qs/javascript/closure/labs/dom/pagevisibilitymonitor.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/math/box.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A utility class for representing a numeric box.\n * @author pupius@google.com (Daniel Pupius)\n */\n\n\ngoog.provide(\x27goog.math.Box\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.math.Coordinate\x27);\n\n\n\n/**\n * Class for representing a box. A box is specified as a top, right, bottom,\n * and left. A box is useful for representing margins and padding.\n *\n * This class assumes \x27screen coordinates\x27: larger Y coordinates are further\n * from the top of the screen.\n *\n * @param {number} top Top.\n * @param {number} right Right.\n * @param {number} bottom Bottom.\n * @param {number} left Left.\n * @struct\n * @constructor\n */\ngoog.math.Box \x3d function(top, right, bottom, left) {\n  /**\n   * Top\n   * @type {number}\n   */\n  this.top \x3d top;\n\n  /**\n   * Right\n   * @type {number}\n   */\n  this.right \x3d right;\n\n  /**\n   * Bottom\n   * @type {number}\n   */\n  this.bottom \x3d bottom;\n\n  /**\n   * Left\n   * @type {number}\n   */\n  this.left \x3d left;\n};\n\n\n/**\n * Creates a Box by bounding a collection of goog.math.Coordinate objects\n * @param {...goog.math.Coordinate} var_args Coordinates to be included inside\n *     the box.\n * @return {!goog.math.Box} A Box containing all the specified Coordinates.\n */\ngoog.math.Box.boundingBox \x3d function(var_args) {\n  var box \x3d new goog.math.Box(\n      arguments[0].y, arguments[0].x, arguments[0].y, arguments[0].x);\n  for (var i \x3d 1; i \x3c arguments.length; i++) {\n    box.expandToIncludeCoordinate(arguments[i]);\n  }\n  return box;\n};\n\n\n/**\n * @return {number} width The width of this Box.\n */\ngoog.math.Box.prototype.getWidth \x3d function() {\n  return this.right - this.left;\n};\n\n\n/**\n * @return {number} height The height of this Box.\n */\ngoog.math.Box.prototype.getHeight \x3d function() {\n  return this.bottom - this.top;\n};\n\n\n/**\n * Creates a copy of the box with the same dimensions.\n * @return {!goog.math.Box} A clone of this Box.\n */\ngoog.math.Box.prototype.clone \x3d function() {\n  return new goog.math.Box(this.top, this.right, this.bottom, this.left);\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Returns a nice string representing the box.\n   * @return {string} In the form (50t, 73r, 24b, 13l).\n   * @override\n   */\n  goog.math.Box.prototype.toString \x3d function() {\n    return \x27(\x27 + this.top + \x27t, \x27 + this.right + \x27r, \x27 + this.bottom + \x27b, \x27 +\n        this.left + \x27l)\x27;\n  };\n}\n\n\n/**\n * Returns whether the box contains a coordinate or another box.\n *\n * @param {goog.math.Coordinate|goog.math.Box} other A Coordinate or a Box.\n * @return {boolean} Whether the box contains the coordinate or other box.\n */\ngoog.math.Box.prototype.contains \x3d function(other) {\n  return goog.math.Box.contains(this, other);\n};\n\n\n/**\n * Expands box with the given margins.\n *\n * @param {number|goog.math.Box} top Top margin or box with all margins.\n * @param {number\x3d} opt_right Right margin.\n * @param {number\x3d} opt_bottom Bottom margin.\n * @param {number\x3d} opt_left Left margin.\n * @return {!goog.math.Box} A reference to this Box.\n */\ngoog.math.Box.prototype.expand \x3d function(\n    top, opt_right, opt_bottom, opt_left) {\n  if (goog.isObject(top)) {\n    this.top -\x3d top.top;\n    this.right +\x3d top.right;\n    this.bottom +\x3d top.bottom;\n    this.left -\x3d top.left;\n  } else {\n    this.top -\x3d /** @type {number} */ (top);\n    this.right +\x3d Number(opt_right);\n    this.bottom +\x3d Number(opt_bottom);\n    this.left -\x3d Number(opt_left);\n  }\n\n  return this;\n};\n\n\n/**\n * Expand this box to include another box.\n * NOTE(bcornell): This is used in code that needs to be very fast, please don\x27t\n * add functionality to this function at the expense of speed (variable\n * arguments, accepting multiple argument types, etc).\n * @param {goog.math.Box} box The box to include in this one.\n */\ngoog.math.Box.prototype.expandToInclude \x3d function(box) {\n  this.left \x3d Math.min(this.left, box.left);\n  this.top \x3d Math.min(this.top, box.top);\n  this.right \x3d Math.max(this.right, box.right);\n  this.bottom \x3d Math.max(this.bottom, box.bottom);\n};\n\n\n/**\n * Expand this box to include the coordinate.\n * @param {!goog.math.Coordinate} coord The coordinate to be included\n *     inside the box.\n */\ngoog.math.Box.prototype.expandToIncludeCoordinate \x3d function(coord) {\n  this.top \x3d Math.min(this.top, coord.y);\n  this.right \x3d Math.max(this.right, coord.x);\n  this.bottom \x3d Math.max(this.bottom, coord.y);\n  this.left \x3d Math.min(this.left, coord.x);\n};\n\n\n/**\n * Compares boxes for equality.\n * @param {goog.math.Box} a A Box.\n * @param {goog.math.Box} b A Box.\n * @return {boolean} True iff the boxes are equal, or if both are null.\n */\ngoog.math.Box.equals \x3d function(a, b) {\n  if (a \x3d\x3d b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  return a.top \x3d\x3d b.top \x26\x26 a.right \x3d\x3d b.right \x26\x26 a.bottom \x3d\x3d b.bottom \x26\x26\n      a.left \x3d\x3d b.left;\n};\n\n\n/**\n * Returns whether a box contains a coordinate or another box.\n *\n * @param {goog.math.Box} box A Box.\n * @param {goog.math.Coordinate|goog.math.Box} other A Coordinate or a Box.\n * @return {boolean} Whether the box contains the coordinate or other box.\n */\ngoog.math.Box.contains \x3d function(box, other) {\n  if (!box || !other) {\n    return false;\n  }\n\n  if (other instanceof goog.math.Box) {\n    return other.left \x3e\x3d box.left \x26\x26 other.right \x3c\x3d box.right \x26\x26\n        other.top \x3e\x3d box.top \x26\x26 other.bottom \x3c\x3d box.bottom;\n  }\n\n  // other is a Coordinate.\n  return other.x \x3e\x3d box.left \x26\x26 other.x \x3c\x3d box.right \x26\x26 other.y \x3e\x3d box.top \x26\x26\n      other.y \x3c\x3d box.bottom;\n};\n\n\n/**\n * Returns the relative x position of a coordinate compared to a box.  Returns\n * zero if the coordinate is inside the box.\n *\n * @param {goog.math.Box} box A Box.\n * @param {goog.math.Coordinate} coord A Coordinate.\n * @return {number} The x position of `coord` relative to the nearest\n *     side of `box`, or zero if `coord` is inside `box`.\n */\ngoog.math.Box.relativePositionX \x3d function(box, coord) {\n  if (coord.x \x3c box.left) {\n    return coord.x - box.left;\n  } else if (coord.x \x3e box.right) {\n    return coord.x - box.right;\n  }\n  return 0;\n};\n\n\n/**\n * Returns the relative y position of a coordinate compared to a box.  Returns\n * zero if the coordinate is inside the box.\n *\n * @param {goog.math.Box} box A Box.\n * @param {goog.math.Coordinate} coord A Coordinate.\n * @return {number} The y position of `coord` relative to the nearest\n *     side of `box`, or zero if `coord` is inside `box`.\n */\ngoog.math.Box.relativePositionY \x3d function(box, coord) {\n  if (coord.y \x3c box.top) {\n    return coord.y - box.top;\n  } else if (coord.y \x3e box.bottom) {\n    return coord.y - box.bottom;\n  }\n  return 0;\n};\n\n\n/**\n * Returns the distance between a coordinate and the nearest corner/side of a\n * box. Returns zero if the coordinate is inside the box.\n *\n * @param {goog.math.Box} box A Box.\n * @param {goog.math.Coordinate} coord A Coordinate.\n * @return {number} The distance between `coord` and the nearest\n *     corner/side of `box`, or zero if `coord` is inside\n *     `box`.\n */\ngoog.math.Box.distance \x3d function(box, coord) {\n  var x \x3d goog.math.Box.relativePositionX(box, coord);\n  var y \x3d goog.math.Box.relativePositionY(box, coord);\n  return Math.sqrt(x * x + y * y);\n};\n\n\n/**\n * Returns whether two boxes intersect.\n *\n * @param {goog.math.Box} a A Box.\n * @param {goog.math.Box} b A second Box.\n * @return {boolean} Whether the boxes intersect.\n */\ngoog.math.Box.intersects \x3d function(a, b) {\n  return (\n      a.left \x3c\x3d b.right \x26\x26 b.left \x3c\x3d a.right \x26\x26 a.top \x3c\x3d b.bottom \x26\x26\n      b.top \x3c\x3d a.bottom);\n};\n\n\n/**\n * Returns whether two boxes would intersect with additional padding.\n *\n * @param {goog.math.Box} a A Box.\n * @param {goog.math.Box} b A second Box.\n * @param {number} padding The additional padding.\n * @return {boolean} Whether the boxes intersect.\n */\ngoog.math.Box.intersectsWithPadding \x3d function(a, b, padding) {\n  return (\n      a.left \x3c\x3d b.right + padding \x26\x26 b.left \x3c\x3d a.right + padding \x26\x26\n      a.top \x3c\x3d b.bottom + padding \x26\x26 b.top \x3c\x3d a.bottom + padding);\n};\n\n\n/**\n * Rounds the fields to the next larger integer values.\n *\n * @return {!goog.math.Box} This box with ceil\x27d fields.\n */\ngoog.math.Box.prototype.ceil \x3d function() {\n  this.top \x3d Math.ceil(this.top);\n  this.right \x3d Math.ceil(this.right);\n  this.bottom \x3d Math.ceil(this.bottom);\n  this.left \x3d Math.ceil(this.left);\n  return this;\n};\n\n\n/**\n * Rounds the fields to the next smaller integer values.\n *\n * @return {!goog.math.Box} This box with floored fields.\n */\ngoog.math.Box.prototype.floor \x3d function() {\n  this.top \x3d Math.floor(this.top);\n  this.right \x3d Math.floor(this.right);\n  this.bottom \x3d Math.floor(this.bottom);\n  this.left \x3d Math.floor(this.left);\n  return this;\n};\n\n\n/**\n * Rounds the fields to nearest integer values.\n *\n * @return {!goog.math.Box} This box with rounded fields.\n */\ngoog.math.Box.prototype.round \x3d function() {\n  this.top \x3d Math.round(this.top);\n  this.right \x3d Math.round(this.right);\n  this.bottom \x3d Math.round(this.bottom);\n  this.left \x3d Math.round(this.left);\n  return this;\n};\n\n\n/**\n * Translates this box by the given offsets. If a `goog.math.Coordinate`\n * is given, then the left and right values are translated by the coordinate\x27s\n * x value and the top and bottom values are translated by the coordinate\x27s y\n * value.  Otherwise, `tx` and `opt_ty` are used to translate the x\n * and y dimension values.\n *\n * @param {number|goog.math.Coordinate} tx The value to translate the x\n *     dimension values by or the the coordinate to translate this box by.\n * @param {number\x3d} opt_ty The value to translate y dimension values by.\n * @return {!goog.math.Box} This box after translating.\n */\ngoog.math.Box.prototype.translate \x3d function(tx, opt_ty) {\n  if (tx instanceof goog.math.Coordinate) {\n    this.left +\x3d tx.x;\n    this.right +\x3d tx.x;\n    this.top +\x3d tx.y;\n    this.bottom +\x3d tx.y;\n  } else {\n    goog.asserts.assertNumber(tx);\n    this.left +\x3d tx;\n    this.right +\x3d tx;\n    if (goog.isNumber(opt_ty)) {\n      this.top +\x3d opt_ty;\n      this.bottom +\x3d opt_ty;\n    }\n  }\n  return this;\n};\n\n\n/**\n * Scales this coordinate by the given scale factors. The x and y dimension\n * values are scaled by `sx` and `opt_sy` respectively.\n * If `opt_sy` is not given, then `sx` is used for both x and y.\n *\n * @param {number} sx The scale factor to use for the x dimension.\n * @param {number\x3d} opt_sy The scale factor to use for the y dimension.\n * @return {!goog.math.Box} This box after scaling.\n */\ngoog.math.Box.prototype.scale \x3d function(sx, opt_sy) {\n  var sy \x3d goog.isNumber(opt_sy) ? opt_sy : sx;\n  this.left *\x3d sx;\n  this.right *\x3d sx;\n  this.top *\x3d sy;\n  this.bottom *\x3d sy;\n  return this;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/math/box.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/math/irect.js";
eval("// Copyright 2016 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A record declaration to allow ClientRect and other rectangle\n * like objects to be used with goog.math.Rect.\n */\n\ngoog.provide(\x27goog.math.IRect\x27);\n\n\n/**\n * Record for representing rectangular regions, allows compatibility between\n * things like ClientRect and goog.math.Rect.\n *\n * @record\n */\ngoog.math.IRect \x3d function() {};\n\n\n/** @type {number} */\ngoog.math.IRect.prototype.left;\n\n\n/** @type {number} */\ngoog.math.IRect.prototype.top;\n\n\n/** @type {number} */\ngoog.math.IRect.prototype.width;\n\n\n/** @type {number} */\ngoog.math.IRect.prototype.height;\n\n//# sourceURL\x3dhttps://qs/javascript/closure/math/irect.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/math/rect.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A utility class for representing rectangles. Some of these\n * functions should be migrated over to non-nullable params.\n * @author pupius@google.com (Daniel Pupius)\n */\n\ngoog.provide(\x27goog.math.Rect\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.math.Box\x27);\ngoog.require(\x27goog.math.Coordinate\x27);\ngoog.require(\x27goog.math.IRect\x27);\ngoog.require(\x27goog.math.Size\x27);\n\n\n\n/**\n * Class for representing rectangular regions.\n * @param {number} x Left.\n * @param {number} y Top.\n * @param {number} w Width.\n * @param {number} h Height.\n * @struct\n * @constructor\n * @implements {goog.math.IRect}\n */\ngoog.math.Rect \x3d function(x, y, w, h) {\n  /** @type {number} */\n  this.left \x3d x;\n\n  /** @type {number} */\n  this.top \x3d y;\n\n  /** @type {number} */\n  this.width \x3d w;\n\n  /** @type {number} */\n  this.height \x3d h;\n};\n\n\n/**\n * @return {!goog.math.Rect} A new copy of this Rectangle.\n */\ngoog.math.Rect.prototype.clone \x3d function() {\n  return new goog.math.Rect(this.left, this.top, this.width, this.height);\n};\n\n\n/**\n * Returns a new Box object with the same position and dimensions as this\n * rectangle.\n * @return {!goog.math.Box} A new Box representation of this Rectangle.\n */\ngoog.math.Rect.prototype.toBox \x3d function() {\n  var right \x3d this.left + this.width;\n  var bottom \x3d this.top + this.height;\n  return new goog.math.Box(this.top, right, bottom, this.left);\n};\n\n\n/**\n * Creates a new Rect object with the position and size given.\n * @param {!goog.math.Coordinate} position The top-left coordinate of the Rect\n * @param {!goog.math.Size} size The size of the Rect\n * @return {!goog.math.Rect} A new Rect initialized with the given position and\n *     size.\n */\ngoog.math.Rect.createFromPositionAndSize \x3d function(position, size) {\n  return new goog.math.Rect(position.x, position.y, size.width, size.height);\n};\n\n\n/**\n * Creates a new Rect object with the same position and dimensions as a given\n * Box.  Note that this is only the inverse of toBox if left/top are defined.\n * @param {goog.math.Box} box A box.\n * @return {!goog.math.Rect} A new Rect initialized with the box\x27s position\n *     and size.\n */\ngoog.math.Rect.createFromBox \x3d function(box) {\n  return new goog.math.Rect(\n      box.left, box.top, box.right - box.left, box.bottom - box.top);\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Returns a nice string representing size and dimensions of rectangle.\n   * @return {string} In the form (50, 73 - 75w x 25h).\n   * @override\n   */\n  goog.math.Rect.prototype.toString \x3d function() {\n    return \x27(\x27 + this.left + \x27, \x27 + this.top + \x27 - \x27 + this.width + \x27w x \x27 +\n        this.height + \x27h)\x27;\n  };\n}\n\n\n/**\n * Compares rectangles for equality.\n * @param {goog.math.IRect} a A Rectangle.\n * @param {goog.math.IRect} b A Rectangle.\n * @return {boolean} True iff the rectangles have the same left, top, width,\n *     and height, or if both are null.\n */\ngoog.math.Rect.equals \x3d function(a, b) {\n  if (a \x3d\x3d b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  return a.left \x3d\x3d b.left \x26\x26 a.width \x3d\x3d b.width \x26\x26 a.top \x3d\x3d b.top \x26\x26\n      a.height \x3d\x3d b.height;\n};\n\n\n/**\n * Computes the intersection of this rectangle and the rectangle parameter.  If\n * there is no intersection, returns false and leaves this rectangle as is.\n * @param {goog.math.IRect} rect A Rectangle.\n * @return {boolean} True iff this rectangle intersects with the parameter.\n */\ngoog.math.Rect.prototype.intersection \x3d function(rect) {\n  var x0 \x3d Math.max(this.left, rect.left);\n  var x1 \x3d Math.min(this.left + this.width, rect.left + rect.width);\n\n  if (x0 \x3c\x3d x1) {\n    var y0 \x3d Math.max(this.top, rect.top);\n    var y1 \x3d Math.min(this.top + this.height, rect.top + rect.height);\n\n    if (y0 \x3c\x3d y1) {\n      this.left \x3d x0;\n      this.top \x3d y0;\n      this.width \x3d x1 - x0;\n      this.height \x3d y1 - y0;\n\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Returns the intersection of two rectangles. Two rectangles intersect if they\n * touch at all, for example, two zero width and height rectangles would\n * intersect if they had the same top and left.\n * @param {goog.math.IRect} a A Rectangle.\n * @param {goog.math.IRect} b A Rectangle.\n * @return {goog.math.Rect} A new intersection rect (even if width and height\n *     are 0), or null if there is no intersection.\n */\ngoog.math.Rect.intersection \x3d function(a, b) {\n  // There is no nice way to do intersection via a clone, because any such\n  // clone might be unnecessary if this function returns null.  So, we duplicate\n  // code from above.\n\n  var x0 \x3d Math.max(a.left, b.left);\n  var x1 \x3d Math.min(a.left + a.width, b.left + b.width);\n\n  if (x0 \x3c\x3d x1) {\n    var y0 \x3d Math.max(a.top, b.top);\n    var y1 \x3d Math.min(a.top + a.height, b.top + b.height);\n\n    if (y0 \x3c\x3d y1) {\n      return new goog.math.Rect(x0, y0, x1 - x0, y1 - y0);\n    }\n  }\n  return null;\n};\n\n\n/**\n * Returns whether two rectangles intersect. Two rectangles intersect if they\n * touch at all, for example, two zero width and height rectangles would\n * intersect if they had the same top and left.\n * @param {goog.math.IRect} a A Rectangle.\n * @param {goog.math.IRect} b A Rectangle.\n * @return {boolean} Whether a and b intersect.\n */\ngoog.math.Rect.intersects \x3d function(a, b) {\n  return (\n      a.left \x3c\x3d b.left + b.width \x26\x26 b.left \x3c\x3d a.left + a.width \x26\x26\n      a.top \x3c\x3d b.top + b.height \x26\x26 b.top \x3c\x3d a.top + a.height);\n};\n\n\n/**\n * Returns whether a rectangle intersects this rectangle.\n * @param {goog.math.IRect} rect A rectangle.\n * @return {boolean} Whether rect intersects this rectangle.\n */\ngoog.math.Rect.prototype.intersects \x3d function(rect) {\n  return goog.math.Rect.intersects(this, rect);\n};\n\n\n/**\n * Computes the difference regions between two rectangles. The return value is\n * an array of 0 to 4 rectangles defining the remaining regions of the first\n * rectangle after the second has been subtracted.\n * @param {goog.math.Rect} a A Rectangle.\n * @param {goog.math.IRect} b A Rectangle.\n * @return {!Array\x3c!goog.math.Rect\x3e} An array with 0 to 4 rectangles which\n *     together define the difference area of rectangle a minus rectangle b.\n */\ngoog.math.Rect.difference \x3d function(a, b) {\n  var intersection \x3d goog.math.Rect.intersection(a, b);\n  if (!intersection || !intersection.height || !intersection.width) {\n    return [a.clone()];\n  }\n\n  var result \x3d [];\n\n  var top \x3d a.top;\n  var height \x3d a.height;\n\n  var ar \x3d a.left + a.width;\n  var ab \x3d a.top + a.height;\n\n  var br \x3d b.left + b.width;\n  var bb \x3d b.top + b.height;\n\n  // Subtract off any area on top where A extends past B\n  if (b.top \x3e a.top) {\n    result.push(new goog.math.Rect(a.left, a.top, a.width, b.top - a.top));\n    top \x3d b.top;\n    // If we\x27re moving the top down, we also need to subtract the height diff.\n    height -\x3d b.top - a.top;\n  }\n  // Subtract off any area on bottom where A extends past B\n  if (bb \x3c ab) {\n    result.push(new goog.math.Rect(a.left, bb, a.width, ab - bb));\n    height \x3d bb - top;\n  }\n  // Subtract any area on left where A extends past B\n  if (b.left \x3e a.left) {\n    result.push(new goog.math.Rect(a.left, top, b.left - a.left, height));\n  }\n  // Subtract any area on right where A extends past B\n  if (br \x3c ar) {\n    result.push(new goog.math.Rect(br, top, ar - br, height));\n  }\n\n  return result;\n};\n\n\n/**\n * Computes the difference regions between this rectangle and `rect`. The\n * return value is an array of 0 to 4 rectangles defining the remaining regions\n * of this rectangle after the other has been subtracted.\n * @param {goog.math.IRect} rect A Rectangle.\n * @return {!Array\x3c!goog.math.Rect\x3e} An array with 0 to 4 rectangles which\n *     together define the difference area of rectangle a minus rectangle b.\n */\ngoog.math.Rect.prototype.difference \x3d function(rect) {\n  return goog.math.Rect.difference(this, rect);\n};\n\n\n/**\n * Expand this rectangle to also include the area of the given rectangle.\n * @param {goog.math.IRect} rect The other rectangle.\n */\ngoog.math.Rect.prototype.boundingRect \x3d function(rect) {\n  // We compute right and bottom before we change left and top below.\n  var right \x3d Math.max(this.left + this.width, rect.left + rect.width);\n  var bottom \x3d Math.max(this.top + this.height, rect.top + rect.height);\n\n  this.left \x3d Math.min(this.left, rect.left);\n  this.top \x3d Math.min(this.top, rect.top);\n\n  this.width \x3d right - this.left;\n  this.height \x3d bottom - this.top;\n};\n\n\n/**\n * Returns a new rectangle which completely contains both input rectangles.\n * @param {goog.math.IRect} a A rectangle.\n * @param {goog.math.IRect} b A rectangle.\n * @return {goog.math.Rect} A new bounding rect, or null if either rect is\n *     null.\n */\ngoog.math.Rect.boundingRect \x3d function(a, b) {\n  if (!a || !b) {\n    return null;\n  }\n\n  var newRect \x3d new goog.math.Rect(a.left, a.top, a.width, a.height);\n  newRect.boundingRect(b);\n\n  return newRect;\n};\n\n\n/**\n * Tests whether this rectangle entirely contains another rectangle or\n * coordinate.\n *\n * @param {goog.math.IRect|goog.math.Coordinate} another The rectangle or\n *     coordinate to test for containment.\n * @return {boolean} Whether this rectangle contains given rectangle or\n *     coordinate.\n */\ngoog.math.Rect.prototype.contains \x3d function(another) {\n  if (another instanceof goog.math.Coordinate) {\n    return another.x \x3e\x3d this.left \x26\x26 another.x \x3c\x3d this.left + this.width \x26\x26\n        another.y \x3e\x3d this.top \x26\x26 another.y \x3c\x3d this.top + this.height;\n  } else {  // (another instanceof goog.math.IRect)\n    return this.left \x3c\x3d another.left \x26\x26\n        this.left + this.width \x3e\x3d another.left + another.width \x26\x26\n        this.top \x3c\x3d another.top \x26\x26\n        this.top + this.height \x3e\x3d another.top + another.height;\n  }\n};\n\n\n/**\n * @param {!goog.math.Coordinate} point A coordinate.\n * @return {number} The squared distance between the point and the closest\n *     point inside the rectangle. Returns 0 if the point is inside the\n *     rectangle.\n */\ngoog.math.Rect.prototype.squaredDistance \x3d function(point) {\n  var dx \x3d point.x \x3c this.left ?\n      this.left - point.x :\n      Math.max(point.x - (this.left + this.width), 0);\n  var dy \x3d point.y \x3c this.top ? this.top - point.y :\n                                Math.max(point.y - (this.top + this.height), 0);\n  return dx * dx + dy * dy;\n};\n\n\n/**\n * @param {!goog.math.Coordinate} point A coordinate.\n * @return {number} The distance between the point and the closest point\n *     inside the rectangle. Returns 0 if the point is inside the rectangle.\n */\ngoog.math.Rect.prototype.distance \x3d function(point) {\n  return Math.sqrt(this.squaredDistance(point));\n};\n\n\n/**\n * @return {!goog.math.Size} The size of this rectangle.\n */\ngoog.math.Rect.prototype.getSize \x3d function() {\n  return new goog.math.Size(this.width, this.height);\n};\n\n\n/**\n * @return {!goog.math.Coordinate} A new coordinate for the top-left corner of\n *     the rectangle.\n */\ngoog.math.Rect.prototype.getTopLeft \x3d function() {\n  return new goog.math.Coordinate(this.left, this.top);\n};\n\n\n/**\n * @return {!goog.math.Coordinate} A new coordinate for the center of the\n *     rectangle.\n */\ngoog.math.Rect.prototype.getCenter \x3d function() {\n  return new goog.math.Coordinate(\n      this.left + this.width / 2, this.top + this.height / 2);\n};\n\n\n/**\n * @return {!goog.math.Coordinate} A new coordinate for the bottom-right corner\n *     of the rectangle.\n */\ngoog.math.Rect.prototype.getBottomRight \x3d function() {\n  return new goog.math.Coordinate(\n      this.left + this.width, this.top + this.height);\n};\n\n\n/**\n * Rounds the fields to the next larger integer values.\n * @return {!goog.math.Rect} This rectangle with ceil\x27d fields.\n */\ngoog.math.Rect.prototype.ceil \x3d function() {\n  this.left \x3d Math.ceil(this.left);\n  this.top \x3d Math.ceil(this.top);\n  this.width \x3d Math.ceil(this.width);\n  this.height \x3d Math.ceil(this.height);\n  return this;\n};\n\n\n/**\n * Rounds the fields to the next smaller integer values.\n * @return {!goog.math.Rect} This rectangle with floored fields.\n */\ngoog.math.Rect.prototype.floor \x3d function() {\n  this.left \x3d Math.floor(this.left);\n  this.top \x3d Math.floor(this.top);\n  this.width \x3d Math.floor(this.width);\n  this.height \x3d Math.floor(this.height);\n  return this;\n};\n\n\n/**\n * Rounds the fields to nearest integer values.\n * @return {!goog.math.Rect} This rectangle with rounded fields.\n */\ngoog.math.Rect.prototype.round \x3d function() {\n  this.left \x3d Math.round(this.left);\n  this.top \x3d Math.round(this.top);\n  this.width \x3d Math.round(this.width);\n  this.height \x3d Math.round(this.height);\n  return this;\n};\n\n\n/**\n * Translates this rectangle by the given offsets. If a\n * `goog.math.Coordinate` is given, then the left and top values are\n * translated by the coordinate\x27s x and y values. Otherwise, top and left are\n * translated by `tx` and `opt_ty` respectively.\n * @param {number|goog.math.Coordinate} tx The value to translate left by or the\n *     the coordinate to translate this rect by.\n * @param {number\x3d} opt_ty The value to translate top by.\n * @return {!goog.math.Rect} This rectangle after translating.\n */\ngoog.math.Rect.prototype.translate \x3d function(tx, opt_ty) {\n  if (tx instanceof goog.math.Coordinate) {\n    this.left +\x3d tx.x;\n    this.top +\x3d tx.y;\n  } else {\n    this.left +\x3d goog.asserts.assertNumber(tx);\n    if (goog.isNumber(opt_ty)) {\n      this.top +\x3d opt_ty;\n    }\n  }\n  return this;\n};\n\n\n/**\n * Scales this rectangle by the given scale factors. The left and width values\n * are scaled by `sx` and the top and height values are scaled by\n * `opt_sy`.  If `opt_sy` is not given, then all fields are scaled\n * by `sx`.\n * @param {number} sx The scale factor to use for the x dimension.\n * @param {number\x3d} opt_sy The scale factor to use for the y dimension.\n * @return {!goog.math.Rect} This rectangle after scaling.\n */\ngoog.math.Rect.prototype.scale \x3d function(sx, opt_sy) {\n  var sy \x3d goog.isNumber(opt_sy) ? opt_sy : sx;\n  this.left *\x3d sx;\n  this.width *\x3d sx;\n  this.top *\x3d sy;\n  this.height *\x3d sy;\n  return this;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/math/rect.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/style/style.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utilities for element styles.\n *\n * @author pupius@google.com (Daniel Pupius)\n * @author arv@google.com (Erik Arvidsson)\n * @author eae@google.com (Emil A Eklund)\n * @author pallosp@google.com (Peter Pallos)\n * @see ../demos/inline_block_quirks.html\n * @see ../demos/inline_block_standards.html\n * @see ../demos/style_viewport.html\n */\n\ngoog.provide(\x27goog.style\x27);\n\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.dom\x27);\ngoog.require(\x27goog.dom.NodeType\x27);\ngoog.require(\x27goog.dom.TagName\x27);\ngoog.require(\x27goog.dom.vendor\x27);\ngoog.require(\x27goog.html.SafeStyleSheet\x27);\ngoog.require(\x27goog.math.Box\x27);\ngoog.require(\x27goog.math.Coordinate\x27);\ngoog.require(\x27goog.math.Rect\x27);\ngoog.require(\x27goog.math.Size\x27);\ngoog.require(\x27goog.object\x27);\ngoog.require(\x27goog.reflect\x27);\ngoog.require(\x27goog.string\x27);\ngoog.require(\x27goog.userAgent\x27);\n\ngoog.forwardDeclare(\x27goog.events.Event\x27);\n\n\n/**\n * Sets a style value on an element.\n *\n * This function is not indended to patch issues in the browser\x27s style\n * handling, but to allow easy programmatic access to setting dash-separated\n * style properties.  An example is setting a batch of properties from a data\n * object without overwriting old styles.  When possible, use native APIs:\n * elem.style.propertyKey \x3d \x27value\x27 or (if obliterating old styles is fine)\n * elem.style.cssText \x3d \x27property1: value1; property2: value2\x27.\n *\n * @param {Element} element The element to change.\n * @param {string|Object} style If a string, a style name. If an object, a hash\n *     of style names to style values.\n * @param {string|number|boolean\x3d} opt_value If style was a string, then this\n *     should be the value.\n */\ngoog.style.setStyle \x3d function(element, style, opt_value) {\n  if (goog.isString(style)) {\n    goog.style.setStyle_(element, opt_value, style);\n  } else {\n    for (var key in style) {\n      goog.style.setStyle_(element, style[key], key);\n    }\n  }\n};\n\n\n/**\n * Sets a style value on an element, with parameters swapped to work with\n * `goog.object.forEach()`. Prepends a vendor-specific prefix when\n * necessary.\n * @param {Element} element The element to change.\n * @param {string|number|boolean|undefined} value Style value.\n * @param {string} style Style name.\n * @private\n */\ngoog.style.setStyle_ \x3d function(element, value, style) {\n  var propertyName \x3d goog.style.getVendorJsStyleName_(element, style);\n\n  if (propertyName) {\n    // TODO(johnlenz): coerce to string?\n    element.style[propertyName] \x3d /** @type {?} */ (value);\n  }\n};\n\n\n/**\n * Style name cache that stores previous property name lookups.\n *\n * This is used by setStyle to speed up property lookups, entries look like:\n *   { StyleName: ActualPropertyName }\n *\n * @private {!Object\x3cstring, string\x3e}\n */\ngoog.style.styleNameCache_ \x3d {};\n\n\n/**\n * Returns the style property name in camel-case. If it does not exist and a\n * vendor-specific version of the property does exist, then return the vendor-\n * specific property name instead.\n * @param {Element} element The element to change.\n * @param {string} style Style name.\n * @return {string} Vendor-specific style.\n * @private\n */\ngoog.style.getVendorJsStyleName_ \x3d function(element, style) {\n  var propertyName \x3d goog.style.styleNameCache_[style];\n  if (!propertyName) {\n    var camelStyle \x3d goog.string.toCamelCase(style);\n    propertyName \x3d camelStyle;\n\n    if (element.style[camelStyle] \x3d\x3d\x3d undefined) {\n      var prefixedStyle \x3d goog.dom.vendor.getVendorJsPrefix() +\n          goog.string.toTitleCase(camelStyle);\n\n      if (element.style[prefixedStyle] !\x3d\x3d undefined) {\n        propertyName \x3d prefixedStyle;\n      }\n    }\n    goog.style.styleNameCache_[style] \x3d propertyName;\n  }\n\n  return propertyName;\n};\n\n\n/**\n * Returns the style property name in CSS notation. If it does not exist and a\n * vendor-specific version of the property does exist, then return the vendor-\n * specific property name instead.\n * @param {Element} element The element to change.\n * @param {string} style Style name.\n * @return {string} Vendor-specific style.\n * @private\n */\ngoog.style.getVendorStyleName_ \x3d function(element, style) {\n  var camelStyle \x3d goog.string.toCamelCase(style);\n\n  if (element.style[camelStyle] \x3d\x3d\x3d undefined) {\n    var prefixedStyle \x3d goog.dom.vendor.getVendorJsPrefix() +\n        goog.string.toTitleCase(camelStyle);\n\n    if (element.style[prefixedStyle] !\x3d\x3d undefined) {\n      return goog.dom.vendor.getVendorPrefix() + \x27-\x27 + style;\n    }\n  }\n\n  return style;\n};\n\n\n/**\n * Retrieves an explicitly-set style value of a node. This returns \x27\x27 if there\n * isn\x27t a style attribute on the element or if this style property has not been\n * explicitly set in script.\n *\n * @param {Element} element Element to get style of.\n * @param {string} property Property to get, css-style (if you have a camel-case\n * property, use element.style[style]).\n * @return {string} Style value.\n */\ngoog.style.getStyle \x3d function(element, property) {\n  // element.style is \x27\x27 for well-known properties which are unset.\n  // For for browser specific styles as \x27filter\x27 is undefined\n  // so we need to return \x27\x27 explicitly to make it consistent across\n  // browsers.\n  var styleValue \x3d element.style[goog.string.toCamelCase(property)];\n\n  // Using typeof here because of a bug in Safari 5.1, where this value\n  // was undefined, but \x3d\x3d\x3d undefined returned false.\n  if (typeof(styleValue) !\x3d\x3d \x27undefined\x27) {\n    return styleValue;\n  }\n\n  return element.style[goog.style.getVendorJsStyleName_(element, property)] ||\n      \x27\x27;\n};\n\n\n/**\n * Retrieves a computed style value of a node. It returns empty string if the\n * value cannot be computed (which will be the case in Internet Explorer) or\n * \x22none\x22 if the property requested is an SVG one and it has not been\n * explicitly set (firefox and webkit).\n *\n * @param {Element} element Element to get style of.\n * @param {string} property Property to get (camel-case).\n * @return {string} Style value.\n */\ngoog.style.getComputedStyle \x3d function(element, property) {\n  var doc \x3d goog.dom.getOwnerDocument(element);\n  if (doc.defaultView \x26\x26 doc.defaultView.getComputedStyle) {\n    var styles \x3d doc.defaultView.getComputedStyle(element, null);\n    if (styles) {\n      // element.style[..] is undefined for browser specific styles\n      // as \x27filter\x27.\n      return styles[property] || styles.getPropertyValue(property) || \x27\x27;\n    }\n  }\n\n  return \x27\x27;\n};\n\n\n/**\n * Gets the cascaded style value of a node, or null if the value cannot be\n * computed (only Internet Explorer can do this).\n *\n * @param {Element} element Element to get style of.\n * @param {string} style Property to get (camel-case).\n * @return {string} Style value.\n */\ngoog.style.getCascadedStyle \x3d function(element, style) {\n  // TODO(nicksantos): This should be documented to return null. #fixTypes\n  return /** @type {string} */ (\n      element.currentStyle ? element.currentStyle[style] : null);\n};\n\n\n/**\n * Cross-browser pseudo get computed style. It returns the computed style where\n * available. If not available it tries the cascaded style value (IE\n * currentStyle) and in worst case the inline style value.  It shouldn\x27t be\n * called directly, see http://wiki/Main/ComputedStyleVsCascadedStyle for\n * discussion.\n *\n * @param {Element} element Element to get style of.\n * @param {string} style Property to get (must be camelCase, not css-style.).\n * @return {string} Style value.\n * @private\n */\ngoog.style.getStyle_ \x3d function(element, style) {\n  return goog.style.getComputedStyle(element, style) ||\n      goog.style.getCascadedStyle(element, style) ||\n      (element.style \x26\x26 element.style[style]);\n};\n\n\n/**\n * Retrieves the computed value of the box-sizing CSS attribute.\n * Browser support: http://caniuse.com/css3-boxsizing.\n * @param {!Element} element The element whose box-sizing to get.\n * @return {?string} \x27content-box\x27, \x27border-box\x27 or \x27padding-box\x27. null if\n *     box-sizing is not supported (IE7 and below).\n */\ngoog.style.getComputedBoxSizing \x3d function(element) {\n  return goog.style.getStyle_(element, \x27boxSizing\x27) ||\n      goog.style.getStyle_(element, \x27MozBoxSizing\x27) ||\n      goog.style.getStyle_(element, \x27WebkitBoxSizing\x27) || null;\n};\n\n\n/**\n * Retrieves the computed value of the position CSS attribute.\n * @param {Element} element The element to get the position of.\n * @return {string} Position value.\n */\ngoog.style.getComputedPosition \x3d function(element) {\n  return goog.style.getStyle_(element, \x27position\x27);\n};\n\n\n/**\n * Retrieves the computed background color string for a given element. The\n * string returned is suitable for assigning to another element\x27s\n * background-color, but is not guaranteed to be in any particular string\n * format. Accessing the color in a numeric form may not be possible in all\n * browsers or with all input.\n *\n * If the background color for the element is defined as a hexadecimal value,\n * the resulting string can be parsed by goog.color.parse in all supported\n * browsers.\n *\n * Whether named colors like \x22red\x22 or \x22lightblue\x22 get translated into a\n * format which can be parsed is browser dependent. Calling this function on\n * transparent elements will return \x22transparent\x22 in most browsers or\n * \x22rgba(0, 0, 0, 0)\x22 in WebKit.\n * @param {Element} element The element to get the background color of.\n * @return {string} The computed string value of the background color.\n */\ngoog.style.getBackgroundColor \x3d function(element) {\n  return goog.style.getStyle_(element, \x27backgroundColor\x27);\n};\n\n\n/**\n * Retrieves the computed value of the overflow-x CSS attribute.\n * @param {Element} element The element to get the overflow-x of.\n * @return {string} The computed string value of the overflow-x attribute.\n */\ngoog.style.getComputedOverflowX \x3d function(element) {\n  return goog.style.getStyle_(element, \x27overflowX\x27);\n};\n\n\n/**\n * Retrieves the computed value of the overflow-y CSS attribute.\n * @param {Element} element The element to get the overflow-y of.\n * @return {string} The computed string value of the overflow-y attribute.\n */\ngoog.style.getComputedOverflowY \x3d function(element) {\n  return goog.style.getStyle_(element, \x27overflowY\x27);\n};\n\n\n/**\n * Retrieves the computed value of the z-index CSS attribute.\n * @param {Element} element The element to get the z-index of.\n * @return {string|number} The computed value of the z-index attribute.\n */\ngoog.style.getComputedZIndex \x3d function(element) {\n  return goog.style.getStyle_(element, \x27zIndex\x27);\n};\n\n\n/**\n * Retrieves the computed value of the text-align CSS attribute.\n * @param {Element} element The element to get the text-align of.\n * @return {string} The computed string value of the text-align attribute.\n */\ngoog.style.getComputedTextAlign \x3d function(element) {\n  return goog.style.getStyle_(element, \x27textAlign\x27);\n};\n\n\n/**\n * Retrieves the computed value of the cursor CSS attribute.\n * @param {Element} element The element to get the cursor of.\n * @return {string} The computed string value of the cursor attribute.\n */\ngoog.style.getComputedCursor \x3d function(element) {\n  return goog.style.getStyle_(element, \x27cursor\x27);\n};\n\n\n/**\n * Retrieves the computed value of the CSS transform attribute.\n * @param {Element} element The element to get the transform of.\n * @return {string} The computed string representation of the transform matrix.\n */\ngoog.style.getComputedTransform \x3d function(element) {\n  var property \x3d goog.style.getVendorStyleName_(element, \x27transform\x27);\n  return goog.style.getStyle_(element, property) ||\n      goog.style.getStyle_(element, \x27transform\x27);\n};\n\n\n/**\n * Sets the top/left values of an element.  If no unit is specified in the\n * argument then it will add px. The second argument is required if the first\n * argument is a string or number and is ignored if the first argument\n * is a coordinate.\n * @param {Element} el Element to move.\n * @param {string|number|goog.math.Coordinate} arg1 Left position or coordinate.\n * @param {string|number\x3d} opt_arg2 Top position.\n */\ngoog.style.setPosition \x3d function(el, arg1, opt_arg2) {\n  var x, y;\n\n  if (arg1 instanceof goog.math.Coordinate) {\n    x \x3d arg1.x;\n    y \x3d arg1.y;\n  } else {\n    x \x3d arg1;\n    y \x3d opt_arg2;\n  }\n\n  el.style.left \x3d goog.style.getPixelStyleValue_(\n      /** @type {number|string} */ (x), false);\n  el.style.top \x3d goog.style.getPixelStyleValue_(\n      /** @type {number|string} */ (y), false);\n};\n\n\n/**\n * Gets the offsetLeft and offsetTop properties of an element and returns them\n * in a Coordinate object\n * @param {Element} element Element.\n * @return {!goog.math.Coordinate} The position.\n */\ngoog.style.getPosition \x3d function(element) {\n  return new goog.math.Coordinate(\n      /** @type {!HTMLElement} */ (element).offsetLeft,\n      /** @type {!HTMLElement} */ (element).offsetTop);\n};\n\n\n/**\n * Returns the viewport element for a particular document\n * @param {Node\x3d} opt_node DOM node (Document is OK) to get the viewport element\n *     of.\n * @return {Element} document.documentElement or document.body.\n */\ngoog.style.getClientViewportElement \x3d function(opt_node) {\n  var doc;\n  if (opt_node) {\n    doc \x3d goog.dom.getOwnerDocument(opt_node);\n  } else {\n    doc \x3d goog.dom.getDocument();\n  }\n\n  // In old IE versions the document.body represented the viewport\n  if (goog.userAgent.IE \x26\x26 !goog.userAgent.isDocumentModeOrHigher(9) \x26\x26\n      !goog.dom.getDomHelper(doc).isCss1CompatMode()) {\n    return doc.body;\n  }\n  return doc.documentElement;\n};\n\n\n/**\n * Calculates the viewport coordinates relative to the page/document\n * containing the node. The viewport may be the browser viewport for\n * non-iframe document, or the iframe container for iframe\x27d document.\n * @param {!Document} doc The document to use as the reference point.\n * @return {!goog.math.Coordinate} The page offset of the viewport.\n */\ngoog.style.getViewportPageOffset \x3d function(doc) {\n  var body \x3d doc.body;\n  var documentElement \x3d doc.documentElement;\n  var scrollLeft \x3d body.scrollLeft || documentElement.scrollLeft;\n  var scrollTop \x3d body.scrollTop || documentElement.scrollTop;\n  return new goog.math.Coordinate(scrollLeft, scrollTop);\n};\n\n\n/**\n * Gets the client rectangle of the DOM element.\n *\n * getBoundingClientRect is part of a new CSS object model draft (with a\n * long-time presence in IE), replacing the error-prone parent offset\n * computation and the now-deprecated Gecko getBoxObjectFor.\n *\n * This utility patches common browser bugs in getBoundingClientRect. It\n * will fail if getBoundingClientRect is unsupported.\n *\n * If the element is not in the DOM, the result is undefined, and an error may\n * be thrown depending on user agent.\n *\n * @param {!Element} el The element whose bounding rectangle is being queried.\n * @return {Object} A native bounding rectangle with numerical left, top,\n *     right, and bottom.  Reported by Firefox to be of object type ClientRect.\n * @private\n */\ngoog.style.getBoundingClientRect_ \x3d function(el) {\n  var rect;\n  try {\n    rect \x3d el.getBoundingClientRect();\n  } catch (e) {\n    // In IE \x3c 9, calling getBoundingClientRect on an orphan element raises an\n    // \x22Unspecified Error\x22. All other browsers return zeros.\n    return {\x27left\x27: 0, \x27top\x27: 0, \x27right\x27: 0, \x27bottom\x27: 0};\n  }\n\n  // Patch the result in IE only, so that this function can be inlined if\n  // compiled for non-IE.\n  if (goog.userAgent.IE \x26\x26 el.ownerDocument.body) {\n    // In IE, most of the time, 2 extra pixels are added to the top and left\n    // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and\n    // IE6 standards mode, this border can be overridden by setting the\n    // document element\x27s border to zero -- thus, we cannot rely on the\n    // offset always being 2 pixels.\n\n    // In quirks mode, the offset can be determined by querying the body\x27s\n    // clientLeft/clientTop, but in standards mode, it is found by querying\n    // the document element\x27s clientLeft/clientTop.  Since we already called\n    // getBoundingClientRect we have already forced a reflow, so it is not\n    // too expensive just to query them all.\n\n    // See: http://msdn.microsoft.com/en-us/library/ms536433(VS.85).aspx\n    var doc \x3d el.ownerDocument;\n    rect.left -\x3d doc.documentElement.clientLeft + doc.body.clientLeft;\n    rect.top -\x3d doc.documentElement.clientTop + doc.body.clientTop;\n  }\n  return rect;\n};\n\n\n/**\n * Returns the first parent that could affect the position of a given element.\n * @param {Element} element The element to get the offset parent for.\n * @return {Element} The first offset parent or null if one cannot be found.\n */\ngoog.style.getOffsetParent \x3d function(element) {\n  // element.offsetParent does the right thing in IE7 and below.  In other\n  // browsers it only includes elements with position absolute, relative or\n  // fixed, not elements with overflow set to auto or scroll.\n  if (goog.userAgent.IE \x26\x26 !goog.userAgent.isDocumentModeOrHigher(8)) {\n    goog.asserts.assert(element \x26\x26 \x27offsetParent\x27 in element);\n    return element.offsetParent;\n  }\n\n  var doc \x3d goog.dom.getOwnerDocument(element);\n  var positionStyle \x3d goog.style.getStyle_(element, \x27position\x27);\n  var skipStatic \x3d positionStyle \x3d\x3d \x27fixed\x27 || positionStyle \x3d\x3d \x27absolute\x27;\n  for (var parent \x3d element.parentNode; parent \x26\x26 parent !\x3d doc;\n       parent \x3d parent.parentNode) {\n    // Skip shadowDOM roots.\n    if (parent.nodeType \x3d\x3d goog.dom.NodeType.DOCUMENT_FRAGMENT \x26\x26 parent.host) {\n      // Cast because the assignment is not type safe, and without a cast we\n      // start typing parent loosely and get bad disambiguation.\n      parent \x3d /** @type {!Element} */ (parent.host);\n    }\n    positionStyle \x3d\n        goog.style.getStyle_(/** @type {!Element} */ (parent), \x27position\x27);\n    skipStatic \x3d skipStatic \x26\x26 positionStyle \x3d\x3d \x27static\x27 \x26\x26\n        parent !\x3d doc.documentElement \x26\x26 parent !\x3d doc.body;\n    if (!skipStatic \x26\x26\n        (parent.scrollWidth \x3e parent.clientWidth ||\n         parent.scrollHeight \x3e parent.clientHeight ||\n         positionStyle \x3d\x3d \x27fixed\x27 || positionStyle \x3d\x3d \x27absolute\x27 ||\n         positionStyle \x3d\x3d \x27relative\x27)) {\n      return /** @type {!Element} */ (parent);\n    }\n  }\n  return null;\n};\n\n\n/**\n * Calculates and returns the visible rectangle for a given element. Returns a\n * box describing the visible portion of the nearest scrollable offset ancestor.\n * Coordinates are given relative to the document.\n *\n * @param {Element} element Element to get the visible rect for.\n * @return {goog.math.Box} Bounding elementBox describing the visible rect or\n *     null if scrollable ancestor isn\x27t inside the visible viewport.\n */\ngoog.style.getVisibleRectForElement \x3d function(element) {\n  var visibleRect \x3d new goog.math.Box(0, Infinity, Infinity, 0);\n  var dom \x3d goog.dom.getDomHelper(element);\n  var body \x3d dom.getDocument().body;\n  var documentElement \x3d dom.getDocument().documentElement;\n  var scrollEl \x3d dom.getDocumentScrollElement();\n\n  // Determine the size of the visible rect by climbing the dom accounting for\n  // all scrollable containers.\n  for (var el \x3d element; el \x3d goog.style.getOffsetParent(el);) {\n    // clientWidth is zero for inline block elements in IE.\n    // on WEBKIT, body element can have clientHeight \x3d 0 and scrollHeight \x3e 0\n    if ((!goog.userAgent.IE || el.clientWidth !\x3d 0) \x26\x26\n        (!goog.userAgent.WEBKIT || el.clientHeight !\x3d 0 || el !\x3d body) \x26\x26\n        // body may have overflow set on it, yet we still get the entire\n        // viewport. In some browsers, el.offsetParent may be\n        // document.documentElement, so check for that too.\n        (el !\x3d body \x26\x26 el !\x3d documentElement \x26\x26\n         goog.style.getStyle_(el, \x27overflow\x27) !\x3d \x27visible\x27)) {\n      var pos \x3d goog.style.getPageOffset(el);\n      var client \x3d goog.style.getClientLeftTop(el);\n      pos.x +\x3d client.x;\n      pos.y +\x3d client.y;\n\n      visibleRect.top \x3d Math.max(visibleRect.top, pos.y);\n      visibleRect.right \x3d Math.min(visibleRect.right, pos.x + el.clientWidth);\n      visibleRect.bottom \x3d\n          Math.min(visibleRect.bottom, pos.y + el.clientHeight);\n      visibleRect.left \x3d Math.max(visibleRect.left, pos.x);\n    }\n  }\n\n  // Clip by window\x27s viewport.\n  var scrollX \x3d scrollEl.scrollLeft, scrollY \x3d scrollEl.scrollTop;\n  visibleRect.left \x3d Math.max(visibleRect.left, scrollX);\n  visibleRect.top \x3d Math.max(visibleRect.top, scrollY);\n  var winSize \x3d dom.getViewportSize();\n  visibleRect.right \x3d Math.min(visibleRect.right, scrollX + winSize.width);\n  visibleRect.bottom \x3d Math.min(visibleRect.bottom, scrollY + winSize.height);\n  return visibleRect.top \x3e\x3d 0 \x26\x26 visibleRect.left \x3e\x3d 0 \x26\x26\n          visibleRect.bottom \x3e visibleRect.top \x26\x26\n          visibleRect.right \x3e visibleRect.left ?\n      visibleRect :\n      null;\n};\n\n\n/**\n * Calculate the scroll position of `container` with the minimum amount so\n * that the content and the borders of the given `element` become visible.\n * If the element is bigger than the container, its top left corner will be\n * aligned as close to the container\x27s top left corner as possible.\n *\n * @param {Element} element The element to make visible.\n * @param {Element\x3d} opt_container The container to scroll. If not set, then the\n *     document scroll element will be used.\n * @param {boolean\x3d} opt_center Whether to center the element in the container.\n *     Defaults to false.\n * @return {!goog.math.Coordinate} The new scroll position of the container,\n *     in form of goog.math.Coordinate(scrollLeft, scrollTop).\n */\ngoog.style.getContainerOffsetToScrollInto \x3d function(\n    element, opt_container, opt_center) {\n  var container \x3d opt_container || goog.dom.getDocumentScrollElement();\n  // Absolute position of the element\x27s border\x27s top left corner.\n  var elementPos \x3d goog.style.getPageOffset(element);\n  // Absolute position of the container\x27s border\x27s top left corner.\n  var containerPos \x3d goog.style.getPageOffset(container);\n  var containerBorder \x3d goog.style.getBorderBox(container);\n  if (container \x3d\x3d goog.dom.getDocumentScrollElement()) {\n    // The element position is calculated based on the page offset, and the\n    // document scroll element holds the scroll position within the page. We can\n    // use the scroll position to calculate the relative position from the\n    // element.\n    var relX \x3d elementPos.x - container.scrollLeft;\n    var relY \x3d elementPos.y - container.scrollTop;\n    if (goog.userAgent.IE \x26\x26 !goog.userAgent.isDocumentModeOrHigher(10)) {\n      // In older versions of IE getPageOffset(element) does not include the\n      // container border so it has to be added to accommodate.\n      relX +\x3d containerBorder.left;\n      relY +\x3d containerBorder.top;\n    }\n  } else {\n    // Relative pos. of the element\x27s border box to the container\x27s content box.\n    var relX \x3d elementPos.x - containerPos.x - containerBorder.left;\n    var relY \x3d elementPos.y - containerPos.y - containerBorder.top;\n  }\n  // How much the element can move in the container, i.e. the difference between\n  // the element\x27s bottom-right-most and top-left-most position where it\x27s\n  // fully visible.\n  var elementSize \x3d goog.style.getSizeWithDisplay_(element);\n  var spaceX \x3d container.clientWidth - elementSize.width;\n  var spaceY \x3d container.clientHeight - elementSize.height;\n  var scrollLeft \x3d container.scrollLeft;\n  var scrollTop \x3d container.scrollTop;\n  if (opt_center) {\n    // All browsers round non-integer scroll positions down.\n    scrollLeft +\x3d relX - spaceX / 2;\n    scrollTop +\x3d relY - spaceY / 2;\n  } else {\n    // This formula was designed to give the correct scroll values in the\n    // following cases:\n    // - element is higher than container (spaceY \x3c 0) \x3d\x3e scroll down by relY\n    // - element is not higher that container (spaceY \x3e\x3d 0):\n    //   - it is above container (relY \x3c 0) \x3d\x3e scroll up by abs(relY)\n    //   - it is below container (relY \x3e spaceY) \x3d\x3e scroll down by relY - spaceY\n    //   - it is in the container \x3d\x3e don\x27t scroll\n    scrollLeft +\x3d Math.min(relX, Math.max(relX - spaceX, 0));\n    scrollTop +\x3d Math.min(relY, Math.max(relY - spaceY, 0));\n  }\n  return new goog.math.Coordinate(scrollLeft, scrollTop);\n};\n\n\n/**\n * Changes the scroll position of `container` with the minimum amount so\n * that the content and the borders of the given `element` become visible.\n * If the element is bigger than the container, its top left corner will be\n * aligned as close to the container\x27s top left corner as possible.\n *\n * @param {Element} element The element to make visible.\n * @param {Element\x3d} opt_container The container to scroll. If not set, then the\n *     document scroll element will be used.\n * @param {boolean\x3d} opt_center Whether to center the element in the container.\n *     Defaults to false.\n */\ngoog.style.scrollIntoContainerView \x3d function(\n    element, opt_container, opt_center) {\n  var container \x3d opt_container || goog.dom.getDocumentScrollElement();\n  var offset \x3d\n      goog.style.getContainerOffsetToScrollInto(element, container, opt_center);\n  container.scrollLeft \x3d offset.x;\n  container.scrollTop \x3d offset.y;\n};\n\n\n/**\n * Returns clientLeft (width of the left border and, if the directionality is\n * right to left, the vertical scrollbar) and clientTop as a coordinate object.\n *\n * @param {Element} el Element to get clientLeft for.\n * @return {!goog.math.Coordinate} Client left and top.\n */\ngoog.style.getClientLeftTop \x3d function(el) {\n  return new goog.math.Coordinate(el.clientLeft, el.clientTop);\n};\n\n\n/**\n * Returns a Coordinate object relative to the top-left of the HTML document.\n * Implemented as a single function to save having to do two recursive loops in\n * opera and safari just to get both coordinates.  If you just want one value do\n * use goog.style.getPageOffsetLeft() and goog.style.getPageOffsetTop(), but\n * note if you call both those methods the tree will be analysed twice.\n *\n * @param {Element} el Element to get the page offset for.\n * @return {!goog.math.Coordinate} The page offset.\n */\ngoog.style.getPageOffset \x3d function(el) {\n  var doc \x3d goog.dom.getOwnerDocument(el);\n  // TODO(gboyer): Update the jsdoc in a way that doesn\x27t break the universe.\n  goog.asserts.assertObject(el, \x27Parameter is required\x27);\n\n  // NOTE(arv): If element is hidden (display none or disconnected or any the\n  // ancestors are hidden) we get (0,0) by default but we still do the\n  // accumulation of scroll position.\n\n  // TODO(arv): Should we check if the node is disconnected and in that case\n  //            return (0,0)?\n\n  var pos \x3d new goog.math.Coordinate(0, 0);\n  var viewportElement \x3d goog.style.getClientViewportElement(doc);\n  if (el \x3d\x3d viewportElement) {\n    // viewport is always at 0,0 as that defined the coordinate system for this\n    // function - this avoids special case checks in the code below\n    return pos;\n  }\n\n  var box \x3d goog.style.getBoundingClientRect_(el);\n  // Must add the scroll coordinates in to get the absolute page offset\n  // of element since getBoundingClientRect returns relative coordinates to\n  // the viewport.\n  var scrollCoord \x3d goog.dom.getDomHelper(doc).getDocumentScroll();\n  pos.x \x3d box.left + scrollCoord.x;\n  pos.y \x3d box.top + scrollCoord.y;\n\n  return pos;\n};\n\n\n/**\n * Returns the left coordinate of an element relative to the HTML document\n * @param {Element} el Elements.\n * @return {number} The left coordinate.\n */\ngoog.style.getPageOffsetLeft \x3d function(el) {\n  return goog.style.getPageOffset(el).x;\n};\n\n\n/**\n * Returns the top coordinate of an element relative to the HTML document\n * @param {Element} el Elements.\n * @return {number} The top coordinate.\n */\ngoog.style.getPageOffsetTop \x3d function(el) {\n  return goog.style.getPageOffset(el).y;\n};\n\n\n/**\n * Returns a Coordinate object relative to the top-left of an HTML document\n * in an ancestor frame of this element. Used for measuring the position of\n * an element inside a frame relative to a containing frame.\n *\n * @param {Element} el Element to get the page offset for.\n * @param {Window} relativeWin The window to measure relative to. If relativeWin\n *     is not in the ancestor frame chain of the element, we measure relative to\n *     the top-most window.\n * @return {!goog.math.Coordinate} The page offset.\n */\ngoog.style.getFramedPageOffset \x3d function(el, relativeWin) {\n  var position \x3d new goog.math.Coordinate(0, 0);\n\n  // Iterate up the ancestor frame chain, keeping track of the current window\n  // and the current element in that window.\n  var currentWin \x3d goog.dom.getWindow(goog.dom.getOwnerDocument(el));\n\n  // MS Edge throws when accessing \x22parent\x22 if el\x27s containing iframe has been\n  // deleted.\n  if (!goog.reflect.canAccessProperty(currentWin, \x27parent\x27)) {\n    return position;\n  }\n\n  var currentEl \x3d el;\n  do {\n    // if we\x27re at the top window, we want to get the page offset.\n    // if we\x27re at an inner frame, we only want to get the window position\n    // so that we can determine the actual page offset in the context of\n    // the outer window.\n    var offset \x3d currentWin \x3d\x3d relativeWin ?\n        goog.style.getPageOffset(currentEl) :\n        goog.style.getClientPositionForElement_(goog.asserts.assert(currentEl));\n\n    position.x +\x3d offset.x;\n    position.y +\x3d offset.y;\n  } while (currentWin \x26\x26 currentWin !\x3d relativeWin \x26\x26\n           currentWin !\x3d currentWin.parent \x26\x26\n           (currentEl \x3d currentWin.frameElement) \x26\x26\n           (currentWin \x3d currentWin.parent));\n\n  return position;\n};\n\n\n/**\n * Translates the specified rect relative to origBase page, for newBase page.\n * If origBase and newBase are the same, this function does nothing.\n *\n * @param {goog.math.Rect} rect The source rectangle relative to origBase page,\n *     and it will have the translated result.\n * @param {goog.dom.DomHelper} origBase The DomHelper for the input rectangle.\n * @param {goog.dom.DomHelper} newBase The DomHelper for the resultant\n *     coordinate.  This must be a DOM for an ancestor frame of origBase\n *     or the same as origBase.\n */\ngoog.style.translateRectForAnotherFrame \x3d function(rect, origBase, newBase) {\n  if (origBase.getDocument() !\x3d newBase.getDocument()) {\n    var body \x3d origBase.getDocument().body;\n    var pos \x3d goog.style.getFramedPageOffset(body, newBase.getWindow());\n\n    // Adjust Body\x27s margin.\n    pos \x3d goog.math.Coordinate.difference(pos, goog.style.getPageOffset(body));\n\n    if (goog.userAgent.IE \x26\x26 !goog.userAgent.isDocumentModeOrHigher(9) \x26\x26\n        !origBase.isCss1CompatMode()) {\n      pos \x3d goog.math.Coordinate.difference(pos, origBase.getDocumentScroll());\n    }\n\n    rect.left +\x3d pos.x;\n    rect.top +\x3d pos.y;\n  }\n};\n\n\n/**\n * Returns the position of an element relative to another element in the\n * document.  A relative to B\n * @param {Element|Event|goog.events.Event} a Element or mouse event whose\n *     position we\x27re calculating.\n * @param {Element|Event|goog.events.Event} b Element or mouse event position\n *     is relative to.\n * @return {!goog.math.Coordinate} The relative position.\n */\ngoog.style.getRelativePosition \x3d function(a, b) {\n  var ap \x3d goog.style.getClientPosition(a);\n  var bp \x3d goog.style.getClientPosition(b);\n  return new goog.math.Coordinate(ap.x - bp.x, ap.y - bp.y);\n};\n\n\n/**\n * Returns the position of the event or the element\x27s border box relative to\n * the client viewport.\n * @param {!Element} el Element whose position to get.\n * @return {!goog.math.Coordinate} The position.\n * @private\n */\ngoog.style.getClientPositionForElement_ \x3d function(el) {\n  var box \x3d goog.style.getBoundingClientRect_(el);\n  return new goog.math.Coordinate(box.left, box.top);\n};\n\n\n/**\n * Returns the position of the event or the element\x27s border box relative to\n * the client viewport. If an event is passed, and if this event is a \x22touch\x22\n * event, then the position of the first changedTouches will be returned.\n * @param {Element|Event|goog.events.Event} el Element or a mouse / touch event.\n * @return {!goog.math.Coordinate} The position.\n */\ngoog.style.getClientPosition \x3d function(el) {\n  goog.asserts.assert(el);\n  if (el.nodeType \x3d\x3d goog.dom.NodeType.ELEMENT) {\n    return goog.style.getClientPositionForElement_(\n        /** @type {!Element} */ (el));\n  } else {\n    var targetEvent \x3d el.changedTouches ? el.changedTouches[0] : el;\n    return new goog.math.Coordinate(targetEvent.clientX, targetEvent.clientY);\n  }\n};\n\n\n/**\n * Moves an element to the given coordinates relative to the client viewport.\n * @param {Element} el Absolutely positioned element to set page offset for.\n *     It must be in the document.\n * @param {number|goog.math.Coordinate} x Left position of the element\x27s margin\n *     box or a coordinate object.\n * @param {number\x3d} opt_y Top position of the element\x27s margin box.\n */\ngoog.style.setPageOffset \x3d function(el, x, opt_y) {\n  // Get current pageoffset\n  var cur \x3d goog.style.getPageOffset(el);\n\n  if (x instanceof goog.math.Coordinate) {\n    opt_y \x3d x.y;\n    x \x3d x.x;\n  }\n\n  // NOTE(arv): We cannot allow strings for x and y. We could but that would\n  // require us to manually transform between different units\n\n  // Work out deltas\n  var dx \x3d goog.asserts.assertNumber(x) - cur.x;\n  var dy \x3d Number(opt_y) - cur.y;\n\n  // Set position to current left/top + delta\n  goog.style.setPosition(\n      el, /** @type {!HTMLElement} */ (el).offsetLeft + dx,\n      /** @type {!HTMLElement} */ (el).offsetTop + dy);\n};\n\n\n/**\n * Sets the width/height values of an element.  If an argument is numeric,\n * or a goog.math.Size is passed, it is assumed to be pixels and will add\n * \x27px\x27 after converting it to an integer in string form. (This just sets the\n * CSS width and height properties so it might set content-box or border-box\n * size depending on the box model the browser is using.)\n *\n * @param {Element} element Element to set the size of.\n * @param {string|number|goog.math.Size} w Width of the element, or a\n *     size object.\n * @param {string|number\x3d} opt_h Height of the element. Required if w is not a\n *     size object.\n */\ngoog.style.setSize \x3d function(element, w, opt_h) {\n  var h;\n  if (w instanceof goog.math.Size) {\n    h \x3d w.height;\n    w \x3d w.width;\n  } else {\n    if (opt_h \x3d\x3d undefined) {\n      throw new Error(\x27missing height argument\x27);\n    }\n    h \x3d opt_h;\n  }\n\n  goog.style.setWidth(element, /** @type {string|number} */ (w));\n  goog.style.setHeight(element, h);\n};\n\n\n/**\n * Helper function to create a string to be set into a pixel-value style\n * property of an element. Can round to the nearest integer value.\n *\n * @param {string|number} value The style value to be used. If a number,\n *     \x27px\x27 will be appended, otherwise the value will be applied directly.\n * @param {boolean} round Whether to round the nearest integer (if property\n *     is a number).\n * @return {string} The string value for the property.\n * @private\n */\ngoog.style.getPixelStyleValue_ \x3d function(value, round) {\n  if (typeof value \x3d\x3d \x27number\x27) {\n    value \x3d (round ? Math.round(value) : value) + \x27px\x27;\n  }\n\n  return value;\n};\n\n\n/**\n * Set the height of an element.  Sets the element\x27s style property.\n * @param {Element} element Element to set the height of.\n * @param {string|number} height The height value to set.  If a number, \x27px\x27\n *     will be appended, otherwise the value will be applied directly.\n */\ngoog.style.setHeight \x3d function(element, height) {\n  element.style.height \x3d goog.style.getPixelStyleValue_(height, true);\n};\n\n\n/**\n * Set the width of an element.  Sets the element\x27s style property.\n * @param {Element} element Element to set the width of.\n * @param {string|number} width The width value to set.  If a number, \x27px\x27\n *     will be appended, otherwise the value will be applied directly.\n */\ngoog.style.setWidth \x3d function(element, width) {\n  element.style.width \x3d goog.style.getPixelStyleValue_(width, true);\n};\n\n\n/**\n * Gets the height and width of an element, even if its display is none.\n *\n * Specifically, this returns the height and width of the border box,\n * irrespective of the box model in effect.\n *\n * Note that this function does not take CSS transforms into account. Please see\n * `goog.style.getTransformedSize`.\n * @param {Element} element Element to get size of.\n * @return {!goog.math.Size} Object with width/height properties.\n */\ngoog.style.getSize \x3d function(element) {\n  return goog.style.evaluateWithTemporaryDisplay_(\n      goog.style.getSizeWithDisplay_, /** @type {!Element} */ (element));\n};\n\n\n/**\n * Call `fn` on `element` such that `element`\x27s dimensions are\n * accurate when it\x27s passed to `fn`.\n * @param {function(!Element): T} fn Function to call with `element` as\n *     an argument after temporarily changing `element`\x27s display such\n *     that its dimensions are accurate.\n * @param {!Element} element Element (which may have display none) to use as\n *     argument to `fn`.\n * @return {T} Value returned by calling `fn` with `element`.\n * @template T\n * @private\n */\ngoog.style.evaluateWithTemporaryDisplay_ \x3d function(fn, element) {\n  if (goog.style.getStyle_(element, \x27display\x27) !\x3d \x27none\x27) {\n    return fn(element);\n  }\n\n  var style \x3d element.style;\n  var originalDisplay \x3d style.display;\n  var originalVisibility \x3d style.visibility;\n  var originalPosition \x3d style.position;\n\n  style.visibility \x3d \x27hidden\x27;\n  style.position \x3d \x27absolute\x27;\n  style.display \x3d \x27inline\x27;\n\n  var retVal \x3d fn(element);\n\n  style.display \x3d originalDisplay;\n  style.position \x3d originalPosition;\n  style.visibility \x3d originalVisibility;\n\n  return retVal;\n};\n\n\n/**\n * Gets the height and width of an element when the display is not none.\n * @param {Element} element Element to get size of.\n * @return {!goog.math.Size} Object with width/height properties.\n * @private\n */\ngoog.style.getSizeWithDisplay_ \x3d function(element) {\n  var offsetWidth \x3d /** @type {!HTMLElement} */ (element).offsetWidth;\n  var offsetHeight \x3d /** @type {!HTMLElement} */ (element).offsetHeight;\n  var webkitOffsetsZero \x3d\n      goog.userAgent.WEBKIT \x26\x26 !offsetWidth \x26\x26 !offsetHeight;\n  if ((!goog.isDef(offsetWidth) || webkitOffsetsZero) \x26\x26\n      element.getBoundingClientRect) {\n    // Fall back to calling getBoundingClientRect when offsetWidth or\n    // offsetHeight are not defined, or when they are zero in WebKit browsers.\n    // This makes sure that we return for the correct size for SVG elements, but\n    // will still return 0 on Webkit prior to 534.8, see\n    // http://trac.webkit.org/changeset/67252.\n    var clientRect \x3d goog.style.getBoundingClientRect_(element);\n    return new goog.math.Size(\n        clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);\n  }\n  return new goog.math.Size(offsetWidth, offsetHeight);\n};\n\n\n/**\n * Gets the height and width of an element, post transform, even if its display\n * is none.\n *\n * This is like `goog.style.getSize`, except:\n * \x3col\x3e\n * \x3cli\x3eTakes webkitTransforms such as rotate and scale into account.\n * \x3cli\x3eWill return null if `element` doesn\x27t respond to\n *     `getBoundingClientRect`.\n * \x3cli\x3eCurrently doesn\x27t make sense on non-WebKit browsers which don\x27t support\n *    webkitTransforms.\n * \x3c/ol\x3e\n * @param {!Element} element Element to get size of.\n * @return {goog.math.Size} Object with width/height properties.\n */\ngoog.style.getTransformedSize \x3d function(element) {\n  if (!element.getBoundingClientRect) {\n    return null;\n  }\n\n  var clientRect \x3d goog.style.evaluateWithTemporaryDisplay_(\n      goog.style.getBoundingClientRect_, element);\n  return new goog.math.Size(\n      clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);\n};\n\n\n/**\n * Returns a bounding rectangle for a given element in page space.\n * @param {Element} element Element to get bounds of. Must not be display none.\n * @return {!goog.math.Rect} Bounding rectangle for the element.\n */\ngoog.style.getBounds \x3d function(element) {\n  var o \x3d goog.style.getPageOffset(element);\n  var s \x3d goog.style.getSize(element);\n  return new goog.math.Rect(o.x, o.y, s.width, s.height);\n};\n\n\n/**\n * Converts a CSS selector in the form style-property to styleProperty.\n * @param {*} selector CSS Selector.\n * @return {string} Camel case selector.\n * @deprecated Use goog.string.toCamelCase instead.\n */\ngoog.style.toCamelCase \x3d function(selector) {\n  return goog.string.toCamelCase(String(selector));\n};\n\n\n/**\n * Converts a CSS selector in the form styleProperty to style-property.\n * @param {string} selector Camel case selector.\n * @return {string} Selector cased.\n * @deprecated Use goog.string.toSelectorCase instead.\n */\ngoog.style.toSelectorCase \x3d function(selector) {\n  return goog.string.toSelectorCase(selector);\n};\n\n\n/**\n * Gets the opacity of a node (x-browser). This gets the inline style opacity\n * of the node, and does not take into account the cascaded or the computed\n * style for this node.\n * @param {Element} el Element whose opacity has to be found.\n * @return {number|string} Opacity between 0 and 1 or an empty string {@code \x27\x27}\n *     if the opacity is not set.\n */\ngoog.style.getOpacity \x3d function(el) {\n  goog.asserts.assert(el);\n  var style \x3d el.style;\n  var result \x3d \x27\x27;\n  if (\x27opacity\x27 in style) {\n    result \x3d style.opacity;\n  } else if (\x27MozOpacity\x27 in style) {\n    result \x3d style.MozOpacity;\n  } else if (\x27filter\x27 in style) {\n    var match \x3d style.filter.match(/alpha\\(opacity\x3d([\\d.]+)\\)/);\n    if (match) {\n      result \x3d String(match[1] / 100);\n    }\n  }\n  return result \x3d\x3d \x27\x27 ? result : Number(result);\n};\n\n\n/**\n * Sets the opacity of a node (x-browser).\n * @param {Element} el Elements whose opacity has to be set.\n * @param {number|string} alpha Opacity between 0 and 1 or an empty string\n *     {@code \x27\x27} to clear the opacity.\n */\ngoog.style.setOpacity \x3d function(el, alpha) {\n  goog.asserts.assert(el);\n  var style \x3d el.style;\n  if (\x27opacity\x27 in style) {\n    style.opacity \x3d alpha;\n  } else if (\x27MozOpacity\x27 in style) {\n    style.MozOpacity \x3d alpha;\n  } else if (\x27filter\x27 in style) {\n    // TODO(arv): Overwriting the filter might have undesired side effects.\n    if (alpha \x3d\x3d\x3d \x27\x27) {\n      style.filter \x3d \x27\x27;\n    } else {\n      style.filter \x3d \x27alpha(opacity\x3d\x27 + (Number(alpha) * 100) + \x27)\x27;\n    }\n  }\n};\n\n\n/**\n * Sets the background of an element to a transparent image in a browser-\n * independent manner.\n *\n * This function does not support repeating backgrounds or alternate background\n * positions to match the behavior of Internet Explorer. It also does not\n * support sizingMethods other than crop since they cannot be replicated in\n * browsers other than Internet Explorer.\n *\n * @param {Element} el The element to set background on.\n * @param {string} src The image source URL.\n */\ngoog.style.setTransparentBackgroundImage \x3d function(el, src) {\n  var style \x3d el.style;\n  // It is safe to use the style.filter in IE only. In Safari \x27filter\x27 is in\n  // style object but access to style.filter causes it to throw an exception.\n  // Note: IE8 supports images with an alpha channel.\n  if (goog.userAgent.IE \x26\x26 !goog.userAgent.isVersionOrHigher(\x278\x27)) {\n    // See TODO in setOpacity.\n    style.filter \x3d \x27progid:DXImageTransform.Microsoft.AlphaImageLoader(\x27 +\n        \x27src\x3d\x22\x27 + src + \x27\x22, sizingMethod\x3d\x22crop\x22)\x27;\n  } else {\n    // Set style properties individually instead of using background shorthand\n    // to prevent overwriting a pre-existing background color.\n    style.backgroundImage \x3d \x27url(\x27 + src + \x27)\x27;\n    style.backgroundPosition \x3d \x27top left\x27;\n    style.backgroundRepeat \x3d \x27no-repeat\x27;\n  }\n};\n\n\n/**\n * Clears the background image of an element in a browser independent manner.\n * @param {Element} el The element to clear background image for.\n */\ngoog.style.clearTransparentBackgroundImage \x3d function(el) {\n  var style \x3d el.style;\n  if (\x27filter\x27 in style) {\n    // See TODO in setOpacity.\n    style.filter \x3d \x27\x27;\n  } else {\n    // Set style properties individually instead of using background shorthand\n    // to prevent overwriting a pre-existing background color.\n    style.backgroundImage \x3d \x27none\x27;\n  }\n};\n\n\n/**\n * Shows or hides an element from the page. Hiding the element is done by\n * setting the display property to \x22none\x22, removing the element from the\n * rendering hierarchy so it takes up no space. To show the element, the default\n * inherited display property is restored (defined either in stylesheets or by\n * the browser\x27s default style rules.)\n *\n * Caveat 1: if the inherited display property for the element is set to \x22none\x22\n * by the stylesheets, that is the property that will be restored by a call to\n * showElement(), effectively toggling the display between \x22none\x22 and \x22none\x22.\n *\n * Caveat 2: if the element display style is set inline (by setting either\n * element.style.display or a style attribute in the HTML), a call to\n * showElement will clear that setting and defer to the inherited style in the\n * stylesheet.\n * @param {Element} el Element to show or hide.\n * @param {*} display True to render the element in its default style,\n *     false to disable rendering the element.\n * @deprecated Use goog.style.setElementShown instead.\n */\ngoog.style.showElement \x3d function(el, display) {\n  goog.style.setElementShown(el, display);\n};\n\n\n/**\n * Shows or hides an element from the page. Hiding the element is done by\n * setting the display property to \x22none\x22, removing the element from the\n * rendering hierarchy so it takes up no space. To show the element, the default\n * inherited display property is restored (defined either in stylesheets or by\n * the browser\x27s default style rules).\n *\n * Caveat 1: if the inherited display property for the element is set to \x22none\x22\n * by the stylesheets, that is the property that will be restored by a call to\n * setElementShown(), effectively toggling the display between \x22none\x22 and\n * \x22none\x22.\n *\n * Caveat 2: if the element display style is set inline (by setting either\n * element.style.display or a style attribute in the HTML), a call to\n * setElementShown will clear that setting and defer to the inherited style in\n * the stylesheet.\n * @param {Element} el Element to show or hide.\n * @param {*} isShown True to render the element in its default style,\n *     false to disable rendering the element.\n */\ngoog.style.setElementShown \x3d function(el, isShown) {\n  el.style.display \x3d isShown ? \x27\x27 : \x27none\x27;\n};\n\n\n/**\n * Test whether the given element has been shown or hidden via a call to\n * {@link #setElementShown}.\n *\n * Note this is strictly a companion method for a call\n * to {@link #setElementShown} and the same caveats apply; in particular, this\n * method does not guarantee that the return value will be consistent with\n * whether or not the element is actually visible.\n *\n * @param {Element} el The element to test.\n * @return {boolean} Whether the element has been shown.\n * @see #setElementShown\n */\ngoog.style.isElementShown \x3d function(el) {\n  return el.style.display !\x3d \x27none\x27;\n};\n\n\n/**\n * Installs the style sheet into the window that contains opt_node.  If\n * opt_node is null, the main window is used.\n * @param {!goog.html.SafeStyleSheet} safeStyleSheet The style sheet to install.\n * @param {?Node\x3d} opt_node Node whose parent document should have the\n *     styles installed.\n * @return {!HTMLStyleElement|!StyleSheet} In IE\x3c11, a StyleSheet object with no\n *     owning \x26lt;style\x26gt; tag (this is how IE creates style sheets).  In every\n *     other browser, a \x26lt;style\x26gt; element with an attached style.  This\n *     doesn\x27t return a StyleSheet object so that setSafeStyleSheet can replace\n *     it (otherwise, if you pass a StyleSheet to setSafeStyleSheet, it will\n *     make a new StyleSheet and leave the original StyleSheet orphaned).\n */\ngoog.style.installSafeStyleSheet \x3d function(safeStyleSheet, opt_node) {\n  var dh \x3d goog.dom.getDomHelper(opt_node);\n\n  // IE \x3c 11 requires createStyleSheet. Note that doc.createStyleSheet will be\n  // undefined as of IE 11.\n  var doc \x3d dh.getDocument();\n  if (goog.userAgent.IE \x26\x26 doc.createStyleSheet) {\n    /** @type {(!HTMLStyleElement|!StyleSheet)} */\n    var styleSheet \x3d doc.createStyleSheet();\n    goog.style.setSafeStyleSheet(styleSheet, safeStyleSheet);\n    return styleSheet;\n  } else {\n    var head \x3d dh.getElementsByTagNameAndClass(goog.dom.TagName.HEAD)[0];\n\n    // In opera documents are not guaranteed to have a head element, thus we\n    // have to make sure one exists before using it.\n    if (!head) {\n      var body \x3d dh.getElementsByTagNameAndClass(goog.dom.TagName.BODY)[0];\n      head \x3d dh.createDom(goog.dom.TagName.HEAD);\n      body.parentNode.insertBefore(head, body);\n    }\n    var el \x3d dh.createDom(goog.dom.TagName.STYLE);\n    // NOTE(vkarun): Setting styles after the style element has been appended\n    // to the head results in a nasty Webkit bug in certain scenarios. Please\n    // refer to https://bugs.webkit.org/show_bug.cgi?id\x3d26307 for additional\n    // details.\n    goog.style.setSafeStyleSheet(el, safeStyleSheet);\n    dh.appendChild(head, el);\n    return el;\n  }\n};\n\n\n/**\n * Removes the styles added by {@link #installStyles}.\n * @param {Element|StyleSheet} styleSheet The value returned by\n *     {@link #installStyles}.\n */\ngoog.style.uninstallStyles \x3d function(styleSheet) {\n  var node \x3d styleSheet.ownerNode || styleSheet.owningElement ||\n      /** @type {Element} */ (styleSheet);\n  goog.dom.removeNode(node);\n};\n\n\n/**\n * Sets the content of a style element.  The style element can be any valid\n * style element.  This element will have its content completely replaced by\n * the safeStyleSheet.\n * @param {!Element|!StyleSheet} element A stylesheet element as returned by\n *     installStyles.\n * @param {!goog.html.SafeStyleSheet} safeStyleSheet The new content of the\n *     stylesheet.\n */\ngoog.style.setSafeStyleSheet \x3d function(element, safeStyleSheet) {\n  var stylesString \x3d goog.html.SafeStyleSheet.unwrap(safeStyleSheet);\n  if (goog.userAgent.IE \x26\x26 goog.isDef(element.cssText)) {\n    // Adding the selectors individually caused the browser to hang if the\n    // selector was invalid or there were CSS comments.  Setting the cssText of\n    // the style node works fine and ignores CSS that IE doesn\x27t understand.\n    // However IE \x3e\x3d 11 doesn\x27t support cssText any more, so we make sure that\n    // cssText is a defined property and otherwise fall back to innerHTML.\n    element.cssText \x3d stylesString;\n  } else {\n    // Setting textContent doesn\x27t work in Safari, see b/29340337.\n    element.innerHTML \x3d stylesString;\n  }\n};\n\n\n/**\n * Sets \x27white-space: pre-wrap\x27 for a node (x-browser).\n *\n * There are as many ways of specifying pre-wrap as there are browsers.\n *\n * CSS3/IE8: white-space: pre-wrap;\n * Mozilla:  white-space: -moz-pre-wrap;\n * Opera:    white-space: -o-pre-wrap;\n * IE6/7:    white-space: pre; word-wrap: break-word;\n *\n * @param {Element} el Element to enable pre-wrap for.\n */\ngoog.style.setPreWrap \x3d function(el) {\n  var style \x3d el.style;\n  if (goog.userAgent.IE \x26\x26 !goog.userAgent.isVersionOrHigher(\x278\x27)) {\n    style.whiteSpace \x3d \x27pre\x27;\n    style.wordWrap \x3d \x27break-word\x27;\n  } else if (goog.userAgent.GECKO) {\n    style.whiteSpace \x3d \x27-moz-pre-wrap\x27;\n  } else {\n    style.whiteSpace \x3d \x27pre-wrap\x27;\n  }\n};\n\n\n/**\n * Sets \x27display: inline-block\x27 for an element (cross-browser).\n * @param {Element} el Element to which the inline-block display style is to be\n *    applied.\n * @see ../demos/inline_block_quirks.html\n * @see ../demos/inline_block_standards.html\n */\ngoog.style.setInlineBlock \x3d function(el) {\n  var style \x3d el.style;\n  // Without position:relative, weirdness ensues.  Just accept it and move on.\n  style.position \x3d \x27relative\x27;\n\n  if (goog.userAgent.IE \x26\x26 !goog.userAgent.isVersionOrHigher(\x278\x27)) {\n    // IE8 supports inline-block so fall through to the else\n    // Zoom:1 forces hasLayout, display:inline gives inline behavior.\n    style.zoom \x3d \x271\x27;\n    style.display \x3d \x27inline\x27;\n  } else {\n    // Opera, Webkit, and Safari seem to do OK with the standard inline-block\n    // style.\n    style.display \x3d \x27inline-block\x27;\n  }\n};\n\n\n/**\n * Returns true if the element is using right to left (rtl) direction.\n * @param {Element} el  The element to test.\n * @return {boolean} True for right to left, false for left to right.\n */\ngoog.style.isRightToLeft \x3d function(el) {\n  return \x27rtl\x27 \x3d\x3d goog.style.getStyle_(el, \x27direction\x27);\n};\n\n\n/**\n * The CSS style property corresponding to an element being\n * unselectable on the current browser platform (null if none).\n * Opera and IE instead use a DOM attribute \x27unselectable\x27. MS Edge uses\n * the Webkit prefix.\n * @type {?string}\n * @private\n */\ngoog.style.unselectableStyle_ \x3d goog.userAgent.GECKO ?\n    \x27MozUserSelect\x27 :\n    goog.userAgent.WEBKIT || goog.userAgent.EDGE ? \x27WebkitUserSelect\x27 : null;\n\n\n/**\n * Returns true if the element is set to be unselectable, false otherwise.\n * Note that on some platforms (e.g. Mozilla), even if an element isn\x27t set\n * to be unselectable, it will behave as such if any of its ancestors is\n * unselectable.\n * @param {Element} el  Element to check.\n * @return {boolean}  Whether the element is set to be unselectable.\n */\ngoog.style.isUnselectable \x3d function(el) {\n  if (goog.style.unselectableStyle_) {\n    return el.style[goog.style.unselectableStyle_].toLowerCase() \x3d\x3d \x27none\x27;\n  } else if (goog.userAgent.IE || goog.userAgent.OPERA) {\n    return el.getAttribute(\x27unselectable\x27) \x3d\x3d \x27on\x27;\n  }\n  return false;\n};\n\n\n/**\n * Makes the element and its descendants selectable or unselectable.  Note\n * that on some platforms (e.g. Mozilla), even if an element isn\x27t set to\n * be unselectable, it will behave as such if any of its ancestors is\n * unselectable.\n * @param {Element} el  The element to alter.\n * @param {boolean} unselectable  Whether the element and its descendants\n *     should be made unselectable.\n * @param {boolean\x3d} opt_noRecurse  Whether to only alter the element\x27s own\n *     selectable state, and leave its descendants alone; defaults to false.\n */\ngoog.style.setUnselectable \x3d function(el, unselectable, opt_noRecurse) {\n  // TODO(attila): Do we need all of TR_DomUtil.makeUnselectable() in Closure?\n  var descendants \x3d !opt_noRecurse ? el.getElementsByTagName(\x27*\x27) : null;\n  var name \x3d goog.style.unselectableStyle_;\n  if (name) {\n    // Add/remove the appropriate CSS style to/from the element and its\n    // descendants.\n    var value \x3d unselectable ? \x27none\x27 : \x27\x27;\n    // MathML elements do not have a style property. Verify before setting.\n    if (el.style) {\n      el.style[name] \x3d value;\n    }\n    if (descendants) {\n      for (var i \x3d 0, descendant; descendant \x3d descendants[i]; i++) {\n        if (descendant.style) {\n          descendant.style[name] \x3d value;\n        }\n      }\n    }\n  } else if (goog.userAgent.IE || goog.userAgent.OPERA) {\n    // Toggle the \x27unselectable\x27 attribute on the element and its descendants.\n    var value \x3d unselectable ? \x27on\x27 : \x27\x27;\n    el.setAttribute(\x27unselectable\x27, value);\n    if (descendants) {\n      for (var i \x3d 0, descendant; descendant \x3d descendants[i]; i++) {\n        descendant.setAttribute(\x27unselectable\x27, value);\n      }\n    }\n  }\n};\n\n\n/**\n * Gets the border box size for an element.\n * @param {Element} element  The element to get the size for.\n * @return {!goog.math.Size} The border box size.\n */\ngoog.style.getBorderBoxSize \x3d function(element) {\n  return new goog.math.Size(\n      /** @type {!HTMLElement} */ (element).offsetWidth,\n      /** @type {!HTMLElement} */ (element).offsetHeight);\n};\n\n\n/**\n * Sets the border box size of an element. This is potentially expensive in IE\n * if the document is CSS1Compat mode\n * @param {Element} element  The element to set the size on.\n * @param {goog.math.Size} size  The new size.\n */\ngoog.style.setBorderBoxSize \x3d function(element, size) {\n  var doc \x3d goog.dom.getOwnerDocument(element);\n  var isCss1CompatMode \x3d goog.dom.getDomHelper(doc).isCss1CompatMode();\n\n  if (goog.userAgent.IE \x26\x26 !goog.userAgent.isVersionOrHigher(\x2710\x27) \x26\x26\n      (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher(\x278\x27))) {\n    var style \x3d element.style;\n    if (isCss1CompatMode) {\n      var paddingBox \x3d goog.style.getPaddingBox(element);\n      var borderBox \x3d goog.style.getBorderBox(element);\n      style.pixelWidth \x3d size.width - borderBox.left - paddingBox.left -\n          paddingBox.right - borderBox.right;\n      style.pixelHeight \x3d size.height - borderBox.top - paddingBox.top -\n          paddingBox.bottom - borderBox.bottom;\n    } else {\n      style.pixelWidth \x3d size.width;\n      style.pixelHeight \x3d size.height;\n    }\n  } else {\n    goog.style.setBoxSizingSize_(element, size, \x27border-box\x27);\n  }\n};\n\n\n/**\n * Gets the content box size for an element.  This is potentially expensive in\n * all browsers.\n * @param {Element} element  The element to get the size for.\n * @return {!goog.math.Size} The content box size.\n */\ngoog.style.getContentBoxSize \x3d function(element) {\n  var doc \x3d goog.dom.getOwnerDocument(element);\n  var ieCurrentStyle \x3d goog.userAgent.IE \x26\x26 element.currentStyle;\n  if (ieCurrentStyle \x26\x26 goog.dom.getDomHelper(doc).isCss1CompatMode() \x26\x26\n      ieCurrentStyle.width !\x3d \x27auto\x27 \x26\x26 ieCurrentStyle.height !\x3d \x27auto\x27 \x26\x26\n      !ieCurrentStyle.boxSizing) {\n    // If IE in CSS1Compat mode than just use the width and height.\n    // If we have a boxSizing then fall back on measuring the borders etc.\n    var width \x3d goog.style.getIePixelValue_(\n        element, /** @type {string} */ (ieCurrentStyle.width), \x27width\x27,\n        \x27pixelWidth\x27);\n    var height \x3d goog.style.getIePixelValue_(\n        element, /** @type {string} */ (ieCurrentStyle.height), \x27height\x27,\n        \x27pixelHeight\x27);\n    return new goog.math.Size(width, height);\n  } else {\n    var borderBoxSize \x3d goog.style.getBorderBoxSize(element);\n    var paddingBox \x3d goog.style.getPaddingBox(element);\n    var borderBox \x3d goog.style.getBorderBox(element);\n    return new goog.math.Size(\n        borderBoxSize.width - borderBox.left - paddingBox.left -\n            paddingBox.right - borderBox.right,\n        borderBoxSize.height - borderBox.top - paddingBox.top -\n            paddingBox.bottom - borderBox.bottom);\n  }\n};\n\n\n/**\n * Sets the content box size of an element. This is potentially expensive in IE\n * if the document is BackCompat mode.\n * @param {Element} element  The element to set the size on.\n * @param {goog.math.Size} size  The new size.\n */\ngoog.style.setContentBoxSize \x3d function(element, size) {\n  var doc \x3d goog.dom.getOwnerDocument(element);\n  var isCss1CompatMode \x3d goog.dom.getDomHelper(doc).isCss1CompatMode();\n  if (goog.userAgent.IE \x26\x26 !goog.userAgent.isVersionOrHigher(\x2710\x27) \x26\x26\n      (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher(\x278\x27))) {\n    var style \x3d element.style;\n    if (isCss1CompatMode) {\n      style.pixelWidth \x3d size.width;\n      style.pixelHeight \x3d size.height;\n    } else {\n      var paddingBox \x3d goog.style.getPaddingBox(element);\n      var borderBox \x3d goog.style.getBorderBox(element);\n      style.pixelWidth \x3d size.width + borderBox.left + paddingBox.left +\n          paddingBox.right + borderBox.right;\n      style.pixelHeight \x3d size.height + borderBox.top + paddingBox.top +\n          paddingBox.bottom + borderBox.bottom;\n    }\n  } else {\n    goog.style.setBoxSizingSize_(element, size, \x27content-box\x27);\n  }\n};\n\n\n/**\n * Helper function that sets the box sizing as well as the width and height\n * @param {Element} element  The element to set the size on.\n * @param {goog.math.Size} size  The new size to set.\n * @param {string} boxSizing  The box-sizing value.\n * @private\n */\ngoog.style.setBoxSizingSize_ \x3d function(element, size, boxSizing) {\n  var style \x3d element.style;\n  if (goog.userAgent.GECKO) {\n    style.MozBoxSizing \x3d boxSizing;\n  } else if (goog.userAgent.WEBKIT) {\n    style.WebkitBoxSizing \x3d boxSizing;\n  } else {\n    // Includes IE8 and Opera 9.50+\n    style.boxSizing \x3d boxSizing;\n  }\n\n  // Setting this to a negative value will throw an exception on IE\n  // (and doesn\x27t do anything different than setting it to 0).\n  style.width \x3d Math.max(size.width, 0) + \x27px\x27;\n  style.height \x3d Math.max(size.height, 0) + \x27px\x27;\n};\n\n\n/**\n * IE specific function that converts a non pixel unit to pixels.\n * @param {Element} element  The element to convert the value for.\n * @param {string} value  The current value as a string. The value must not be\n *     \x27\x27.\n * @param {string} name  The CSS property name to use for the converstion. This\n *     should be \x27left\x27, \x27top\x27, \x27width\x27 or \x27height\x27.\n * @param {string} pixelName  The CSS pixel property name to use to get the\n *     value in pixels.\n * @return {number} The value in pixels.\n * @private\n */\ngoog.style.getIePixelValue_ \x3d function(element, value, name, pixelName) {\n  // Try if we already have a pixel value. IE does not do half pixels so we\n  // only check if it matches a number followed by \x27px\x27.\n  if (/^\\d+px?$/.test(value)) {\n    return parseInt(value, 10);\n  } else {\n    var oldStyleValue \x3d element.style[name];\n    var oldRuntimeValue \x3d element.runtimeStyle[name];\n    // set runtime style to prevent changes\n    element.runtimeStyle[name] \x3d element.currentStyle[name];\n    element.style[name] \x3d value;\n    var pixelValue \x3d element.style[pixelName];\n    // restore\n    element.style[name] \x3d oldStyleValue;\n    element.runtimeStyle[name] \x3d oldRuntimeValue;\n    return +pixelValue;\n  }\n};\n\n\n/**\n * Helper function for getting the pixel padding or margin for IE.\n * @param {Element} element  The element to get the padding for.\n * @param {string} propName  The property name.\n * @return {number} The pixel padding.\n * @private\n */\ngoog.style.getIePixelDistance_ \x3d function(element, propName) {\n  var value \x3d goog.style.getCascadedStyle(element, propName);\n  return value ?\n      goog.style.getIePixelValue_(element, value, \x27left\x27, \x27pixelLeft\x27) :\n      0;\n};\n\n\n/**\n * Gets the computed paddings or margins (on all sides) in pixels.\n * @param {Element} element  The element to get the padding for.\n * @param {string} stylePrefix  Pass \x27padding\x27 to retrieve the padding box,\n *     or \x27margin\x27 to retrieve the margin box.\n * @return {!goog.math.Box} The computed paddings or margins.\n * @private\n */\ngoog.style.getBox_ \x3d function(element, stylePrefix) {\n  if (goog.userAgent.IE) {\n    var left \x3d goog.style.getIePixelDistance_(element, stylePrefix + \x27Left\x27);\n    var right \x3d goog.style.getIePixelDistance_(element, stylePrefix + \x27Right\x27);\n    var top \x3d goog.style.getIePixelDistance_(element, stylePrefix + \x27Top\x27);\n    var bottom \x3d\n        goog.style.getIePixelDistance_(element, stylePrefix + \x27Bottom\x27);\n    return new goog.math.Box(top, right, bottom, left);\n  } else {\n    // On non-IE browsers, getComputedStyle is always non-null.\n    var left \x3d goog.style.getComputedStyle(element, stylePrefix + \x27Left\x27);\n    var right \x3d goog.style.getComputedStyle(element, stylePrefix + \x27Right\x27);\n    var top \x3d goog.style.getComputedStyle(element, stylePrefix + \x27Top\x27);\n    var bottom \x3d goog.style.getComputedStyle(element, stylePrefix + \x27Bottom\x27);\n\n    // NOTE(arv): Gecko can return floating point numbers for the computed\n    // style values.\n    return new goog.math.Box(\n        parseFloat(top), parseFloat(right), parseFloat(bottom),\n        parseFloat(left));\n  }\n};\n\n\n/**\n * Gets the computed paddings (on all sides) in pixels.\n * @param {Element} element  The element to get the padding for.\n * @return {!goog.math.Box} The computed paddings.\n */\ngoog.style.getPaddingBox \x3d function(element) {\n  return goog.style.getBox_(element, \x27padding\x27);\n};\n\n\n/**\n * Gets the computed margins (on all sides) in pixels.\n * @param {Element} element  The element to get the margins for.\n * @return {!goog.math.Box} The computed margins.\n */\ngoog.style.getMarginBox \x3d function(element) {\n  return goog.style.getBox_(element, \x27margin\x27);\n};\n\n\n/**\n * A map used to map the border width keywords to a pixel width.\n * @type {!Object}\n * @private\n */\ngoog.style.ieBorderWidthKeywords_ \x3d {\n  \x27thin\x27: 2,\n  \x27medium\x27: 4,\n  \x27thick\x27: 6\n};\n\n\n/**\n * Helper function for IE to get the pixel border.\n * @param {Element} element  The element to get the pixel border for.\n * @param {string} prop  The part of the property name.\n * @return {number} The value in pixels.\n * @private\n */\ngoog.style.getIePixelBorder_ \x3d function(element, prop) {\n  if (goog.style.getCascadedStyle(element, prop + \x27Style\x27) \x3d\x3d \x27none\x27) {\n    return 0;\n  }\n  var width \x3d goog.style.getCascadedStyle(element, prop + \x27Width\x27);\n  if (width in goog.style.ieBorderWidthKeywords_) {\n    return goog.style.ieBorderWidthKeywords_[width];\n  }\n  return goog.style.getIePixelValue_(element, width, \x27left\x27, \x27pixelLeft\x27);\n};\n\n\n/**\n * Gets the computed border widths (on all sides) in pixels\n * @param {Element} element  The element to get the border widths for.\n * @return {!goog.math.Box} The computed border widths.\n */\ngoog.style.getBorderBox \x3d function(element) {\n  if (goog.userAgent.IE \x26\x26 !goog.userAgent.isDocumentModeOrHigher(9)) {\n    var left \x3d goog.style.getIePixelBorder_(element, \x27borderLeft\x27);\n    var right \x3d goog.style.getIePixelBorder_(element, \x27borderRight\x27);\n    var top \x3d goog.style.getIePixelBorder_(element, \x27borderTop\x27);\n    var bottom \x3d goog.style.getIePixelBorder_(element, \x27borderBottom\x27);\n    return new goog.math.Box(top, right, bottom, left);\n  } else {\n    // On non-IE browsers, getComputedStyle is always non-null.\n    var left \x3d goog.style.getComputedStyle(element, \x27borderLeftWidth\x27);\n    var right \x3d goog.style.getComputedStyle(element, \x27borderRightWidth\x27);\n    var top \x3d goog.style.getComputedStyle(element, \x27borderTopWidth\x27);\n    var bottom \x3d goog.style.getComputedStyle(element, \x27borderBottomWidth\x27);\n\n    return new goog.math.Box(\n        parseFloat(top), parseFloat(right), parseFloat(bottom),\n        parseFloat(left));\n  }\n};\n\n\n/**\n * Returns the font face applied to a given node. Opera and IE should return\n * the font actually displayed. Firefox returns the author\x27s most-preferred\n * font (whether the browser is capable of displaying it or not.)\n * @param {Element} el  The element whose font family is returned.\n * @return {string} The font family applied to el.\n */\ngoog.style.getFontFamily \x3d function(el) {\n  var doc \x3d goog.dom.getOwnerDocument(el);\n  var font \x3d \x27\x27;\n  // The moveToElementText method from the TextRange only works if the element\n  // is attached to the owner document.\n  if (doc.body.createTextRange \x26\x26 goog.dom.contains(doc, el)) {\n    var range \x3d doc.body.createTextRange();\n    range.moveToElementText(el);\n\n    try {\n      font \x3d range.queryCommandValue(\x27FontName\x27);\n    } catch (e) {\n      // This is a workaround for a awkward exception.\n      // On some IE, there is an exception coming from it.\n      // The error description from this exception is:\n      // This window has already been registered as a drop target\n      // This is bogus description, likely due to a bug in ie.\n      font \x3d \x27\x27;\n    }\n  }\n  if (!font) {\n    // Note if for some reason IE can\x27t derive FontName with a TextRange, we\n    // fallback to using currentStyle\n    font \x3d goog.style.getStyle_(el, \x27fontFamily\x27);\n  }\n\n  // Firefox returns the applied font-family string (author\x27s list of\n  // preferred fonts.) We want to return the most-preferred font, in lieu of\n  // the *actually* applied font.\n  var fontsArray \x3d font.split(\x27,\x27);\n  if (fontsArray.length \x3e 1) font \x3d fontsArray[0];\n\n  // Sanitize for x-browser consistency:\n  // Strip quotes because browsers aren\x27t consistent with how they\x27re\n  // applied; Opera always encloses, Firefox sometimes, and IE never.\n  return goog.string.stripQuotes(font, \x27\x22\\\x27\x27);\n};\n\n\n/**\n * Regular expression used for getLengthUnits.\n * @type {RegExp}\n * @private\n */\ngoog.style.lengthUnitRegex_ \x3d /[^\\d]+$/;\n\n\n/**\n * Returns the units used for a CSS length measurement.\n * @param {string} value  A CSS length quantity.\n * @return {?string} The units of measurement.\n */\ngoog.style.getLengthUnits \x3d function(value) {\n  var units \x3d value.match(goog.style.lengthUnitRegex_);\n  return units \x26\x26 units[0] || null;\n};\n\n\n/**\n * Map of absolute CSS length units\n * @type {!Object}\n * @private\n */\ngoog.style.ABSOLUTE_CSS_LENGTH_UNITS_ \x3d {\n  \x27cm\x27: 1,\n  \x27in\x27: 1,\n  \x27mm\x27: 1,\n  \x27pc\x27: 1,\n  \x27pt\x27: 1\n};\n\n\n/**\n * Map of relative CSS length units that can be accurately converted to px\n * font-size values using getIePixelValue_. Only units that are defined in\n * relation to a font size are convertible (%, small, etc. are not).\n * @type {!Object}\n * @private\n */\ngoog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_ \x3d {\n  \x27em\x27: 1,\n  \x27ex\x27: 1\n};\n\n\n/**\n * Returns the font size, in pixels, of text in an element.\n * @param {Element} el  The element whose font size is returned.\n * @return {number} The font size (in pixels).\n */\ngoog.style.getFontSize \x3d function(el) {\n  var fontSize \x3d goog.style.getStyle_(el, \x27fontSize\x27);\n  var sizeUnits \x3d goog.style.getLengthUnits(fontSize);\n  if (fontSize \x26\x26 \x27px\x27 \x3d\x3d sizeUnits) {\n    // NOTE(nathanl): This could be parseFloat instead, but IE doesn\x27t return\n    // decimal fractions in getStyle_ and Firefox reports the fractions, but\n    // ignores them when rendering. Interestingly enough, when we force the\n    // issue and size something to e.g., 50% of 25px, the browsers round in\n    // opposite directions with Firefox reporting 12px and IE 13px. I punt.\n    return parseInt(fontSize, 10);\n  }\n\n  // In IE, we can convert absolute length units to a px value using\n  // goog.style.getIePixelValue_. Units defined in relation to a font size\n  // (em, ex) are applied relative to the element\x27s parentNode and can also\n  // be converted.\n  if (goog.userAgent.IE) {\n    if (String(sizeUnits) in goog.style.ABSOLUTE_CSS_LENGTH_UNITS_) {\n      return goog.style.getIePixelValue_(el, fontSize, \x27left\x27, \x27pixelLeft\x27);\n    } else if (\n        el.parentNode \x26\x26 el.parentNode.nodeType \x3d\x3d goog.dom.NodeType.ELEMENT \x26\x26\n        String(sizeUnits) in goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_) {\n      // Check the parent size - if it is the same it means the relative size\n      // value is inherited and we therefore don\x27t want to count it twice.  If\n      // it is different, this element either has explicit style or has a CSS\n      // rule applying to it.\n      var parentElement \x3d /** @type {!Element} */ (el.parentNode);\n      var parentSize \x3d goog.style.getStyle_(parentElement, \x27fontSize\x27);\n      return goog.style.getIePixelValue_(\n          parentElement, fontSize \x3d\x3d parentSize ? \x271em\x27 : fontSize, \x27left\x27,\n          \x27pixelLeft\x27);\n    }\n  }\n\n  // Sometimes we can\x27t cleanly find the font size (some units relative to a\n  // node\x27s parent\x27s font size are difficult: %, smaller et al), so we create\n  // an invisible, absolutely-positioned span sized to be the height of an \x27M\x27\n  // rendered in its parent\x27s (i.e., our target element\x27s) font size. This is\n  // the definition of CSS\x27s font size attribute.\n  var sizeElement \x3d goog.dom.createDom(goog.dom.TagName.SPAN, {\n    \x27style\x27: \x27visibility:hidden;position:absolute;\x27 +\n        \x27line-height:0;padding:0;margin:0;border:0;height:1em;\x27\n  });\n  goog.dom.appendChild(el, sizeElement);\n  fontSize \x3d sizeElement.offsetHeight;\n  goog.dom.removeNode(sizeElement);\n\n  return fontSize;\n};\n\n\n/**\n * Parses a style attribute value.  Converts CSS property names to camel case.\n * @param {string} value The style attribute value.\n * @return {!Object} Map of CSS properties to string values.\n */\ngoog.style.parseStyleAttribute \x3d function(value) {\n  var result \x3d {};\n  goog.array.forEach(value.split(/\\s*;\\s*/), function(pair) {\n    var keyValue \x3d pair.match(/\\s*([\\w-]+)\\s*\\:(.+)/);\n    if (keyValue) {\n      var styleName \x3d keyValue[1];\n      var styleValue \x3d goog.string.trim(keyValue[2]);\n      result[goog.string.toCamelCase(styleName.toLowerCase())] \x3d styleValue;\n    }\n  });\n  return result;\n};\n\n\n/**\n * Reverse of parseStyleAttribute; that is, takes a style object and returns the\n * corresponding attribute value.  Converts camel case property names to proper\n * CSS selector names.\n * @param {Object} obj Map of CSS properties to values.\n * @return {string} The style attribute value.\n */\ngoog.style.toStyleAttribute \x3d function(obj) {\n  var buffer \x3d [];\n  goog.object.forEach(obj, function(value, key) {\n    buffer.push(goog.string.toSelectorCase(key), \x27:\x27, value, \x27;\x27);\n  });\n  return buffer.join(\x27\x27);\n};\n\n\n/**\n * Sets CSS float property on an element.\n * @param {Element} el The element to set float property on.\n * @param {string} value The value of float CSS property to set on this element.\n */\ngoog.style.setFloat \x3d function(el, value) {\n  el.style[goog.userAgent.IE ? \x27styleFloat\x27 : \x27cssFloat\x27] \x3d value;\n};\n\n\n/**\n * Gets value of explicitly-set float CSS property on an element.\n * @param {Element} el The element to get float property of.\n * @return {string} The value of explicitly-set float CSS property on this\n *     element.\n */\ngoog.style.getFloat \x3d function(el) {\n  return el.style[goog.userAgent.IE ? \x27styleFloat\x27 : \x27cssFloat\x27] || \x27\x27;\n};\n\n\n/**\n * Returns the scroll bar width (represents the width of both horizontal\n * and vertical scroll).\n *\n * @param {string\x3d} opt_className An optional class name (or names) to apply\n *     to the invisible div created to measure the scrollbar. This is necessary\n *     if some scrollbars are styled differently than others.\n * @return {number} The scroll bar width in px.\n */\ngoog.style.getScrollbarWidth \x3d function(opt_className) {\n  // Add two hidden divs.  The child div is larger than the parent and\n  // forces scrollbars to appear on it.\n  // Using overflow:scroll does not work consistently with scrollbars that\n  // are styled with ::-webkit-scrollbar.\n  var outerDiv \x3d goog.dom.createElement(goog.dom.TagName.DIV);\n  if (opt_className) {\n    outerDiv.className \x3d opt_className;\n  }\n  outerDiv.style.cssText \x3d \x27overflow:auto;\x27 +\n      \x27position:absolute;top:0;width:100px;height:100px\x27;\n  var innerDiv \x3d goog.dom.createElement(goog.dom.TagName.DIV);\n  goog.style.setSize(innerDiv, \x27200px\x27, \x27200px\x27);\n  outerDiv.appendChild(innerDiv);\n  goog.dom.appendChild(goog.dom.getDocument().body, outerDiv);\n  var width \x3d outerDiv.offsetWidth - outerDiv.clientWidth;\n  goog.dom.removeNode(outerDiv);\n  return width;\n};\n\n\n/**\n * Regular expression to extract x and y translation components from a CSS\n * transform Matrix representation.\n *\n * @type {!RegExp}\n * @const\n * @private\n */\ngoog.style.MATRIX_TRANSLATION_REGEX_ \x3d new RegExp(\n    \x27matrix\\\\([0-9\\\\.\\\\-]+, [0-9\\\\.\\\\-]+, \x27 +\n    \x27[0-9\\\\.\\\\-]+, [0-9\\\\.\\\\-]+, \x27 +\n    \x27([0-9\\\\.\\\\-]+)p?x?, ([0-9\\\\.\\\\-]+)p?x?\\\\)\x27);\n\n\n/**\n * Returns the x,y translation component of any CSS transforms applied to the\n * element, in pixels.\n *\n * @param {!Element} element The element to get the translation of.\n * @return {!goog.math.Coordinate} The CSS translation of the element in px.\n */\ngoog.style.getCssTranslation \x3d function(element) {\n  var transform \x3d goog.style.getComputedTransform(element);\n  if (!transform) {\n    return new goog.math.Coordinate(0, 0);\n  }\n  var matches \x3d transform.match(goog.style.MATRIX_TRANSLATION_REGEX_);\n  if (!matches) {\n    return new goog.math.Coordinate(0, 0);\n  }\n  return new goog.math.Coordinate(\n      parseFloat(matches[1]), parseFloat(matches[2]));\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/style/style.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/common/dom.js";
eval("/**\n * @fileoverview GWS-specific utilities for working with the DOM.\n * @author bmt@google.com (Brian Turnbull)\n */\n\ngoog.provide(\x27gws.dom\x27);\n\ngoog.require(\x27goog.dom\x27);\ngoog.require(\x27goog.functions\x27);\ngoog.require(\x27goog.labs.dom.PageVisibilityMonitor\x27);\ngoog.require(\x27goog.style\x27);\n\n\n/**\n * Creates a page visibility monitor, to be shared across the entire codebase.\n * Clients of the Page Visibility API are only required to listen/unlisten to\n * \x27visibilityChange\x27 events sent to the monitor, e.g.:\n *\n * goog.events.listen(\n *     gws.dom.getPageVisibilityMonitor(),\n *     goog.events.EventType.VISIBILITYCHANGE,\n *     foo.bar.myOwnVisibilityChangeHandler);\n *\n * @return {!goog.labs.dom.PageVisibilityMonitor}\n */\ngws.dom.getPageVisibilityMonitor \x3d\n    goog.functions.constant(new goog.labs.dom.PageVisibilityMonitor());\n\n\n/**\n * Append an invisble DOM node to the document.\n * This function should be used in lieu of the native appendChild method to\n * avoid two common failure modes:\n * \x3cul\x3e\n *   \x3cli\x3eIn IE, appending to document.body before it is closed triggers the\n *       dreaded \x22operation aborted\x22 exception.\n *   \x3cli\x3eAppending to head breaks form persistence and iframe state if/when\n *       navigating back to the page.\n * \x3c/ul\x3e\n * Append is most commonly used with dom nodes that are not user visible, such\n * as script tags, hidden divs, etc.  The passed node is appended to a special\n * div reserved for this function (id \x27xjsc\x27), or document.body if the div\n * cannot be found.\n * @param {Node} node Node to be appended to the document.\n * @return {Node} The passed node.\n */\ngws.dom.append \x3d function(node) {\n  return (goog.dom.getElement(\x27xjsc\x27) || document.body).appendChild(node);\n};\n\n\n/**\n * \x22Smoothly\x22 scrolls to an element, with a brief transition.\n *\n * @param {(string|!Element)} idOrElement DOM ID string or existing DOM element.\n * @param {number\x3d} opt_offset Optional +/- offset to Y position.\n * @param {number\x3d} opt_duration Time to take, in milliseconds (default 200).\n * @param {function(number): number\x3d} opt_transitionFn Function from [0,1]\n *     to [0,1] determining \x22easing\x22 of the transition (default linear).\n * @param {number\x3d} opt_millisPerFrame Number of milliseconds between frames\n *     (default 25).\n */\ngws.dom.smoothScrollToElem \x3d function(\n    idOrElement, opt_offset, opt_duration, opt_transitionFn,\n    opt_millisPerFrame) {\n  var endY \x3d goog.style.getPageOffsetTop(goog.dom.getElement(idOrElement));\n  gws.dom.smoothScrollTo(\n      endY, opt_offset, opt_duration, opt_transitionFn, opt_millisPerFrame);\n};\n\n\n/**\n * \x22Smoothly\x22 scrolls to the given y-coordinate, with a brief transition.\n *\n * @param {number} endY The Y-coordinate to scroll to.\n * @param {number\x3d} opt_offset Optional +/- offset to Y position.\n * @param {number\x3d} opt_duration Time to take, in milliseconds (default 200).\n * @param {function(number): number\x3d} opt_transitionFn Function from [0,1]\n *     to [0,1] determining \x22easing\x22 of the transition (default linear).\n * @param {number\x3d} opt_millisPerFrame Number of milliseconds between frames\n *     (default 25).\n * @param {!Element\x3d} opt_container Optional container to scroll the content of,\n *     instead of window.\n */\ngws.dom.smoothScrollTo \x3d function(\n    endY, opt_offset, opt_duration, opt_transitionFn, opt_millisPerFrame,\n    opt_container) {\n  var startY \x3d opt_container ? opt_container.scrollTop : window.pageYOffset;\n  if (endY \x3c 0) {\n    return;\n  }\n  endY +\x3d opt_offset || 0;\n\n  var duration \x3d opt_duration || 200;\n  // TODO(alexfischer): Change the millisPerFrame parameter to be fps instead,\n  // because this is the more natural way of specifying the frame rate.\n  var millisPerFrame \x3d opt_millisPerFrame || 25;\n  var transitionFn \x3d opt_transitionFn || function(x) { return x; };\n  // goog.now is not guaranteed to be monotonically increasing. Hence, we add an\n  // upper bound on the number of frames we will render.\n  var maxNumFrames \x3d duration / millisPerFrame;\n\n  var startTime \x3d goog.now();\n  var renderFrame \x3d function(i) {\n    return function() {\n      if (i \x3e maxNumFrames) {\n        return;\n      }\n      var now \x3d goog.now();\n      var fractionDone \x3d Math.min((now - startTime) / duration, 1);\n      var newY \x3d startY + (endY - startY) * transitionFn(fractionDone);\n      if (opt_container) {\n        opt_container.scrollTop \x3d newY;\n      } else {\n        window.scrollTo(0, newY);\n      }\n\n      if (fractionDone \x3c 1) {\n        window.setTimeout(renderFrame(i + 1), millisPerFrame);\n      }\n    };\n  };\n  window.setTimeout(renderFrame(1), millisPerFrame);\n};\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/common/dom.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/common/nav.js";
eval("// Copyright 2010 Google Inc. All Rights Reserved.\n\n/**\n * @fileoverview Navigation and redirect related functions for the GWS extern_js\n * common library.\n *\n * @author martone@google.com (Andy Martone)\n * @author bmt@google.com (Brian Turnbull)\n */\n\ngoog.provide(\x27gws.nav\x27);\n\ngoog.require(\x27gws.constants\x27);\ngoog.require(\x27gws.dom\x27);\ngoog.require(\x27gws.location\x27);\ngoog.require(\x27gws.msg\x27);\n\n\n/**\n * A dynamically generated iframe which is used for performing JavaScript\n * redirects.\n * @type {Element}\n * @private\n */\ngws.nav.redirectIframe_;\n\n\n/**\n * Private utility that does update or replace of window location href\n * for a hard navigation operation.\n * @param {string} destination Destination URL.\n * @param {boolean\x3d} opt_replace When true, use the location.replace() function.\n * @private\n */\ngws.nav.updateWindowLocationForHardNav_ \x3d function(destination, opt_replace) {\n  if (opt_replace) {\n    gws.location.getLocationForHardNav().replace(destination);\n  } else {\n    gws.location.getLocationForHardNav().href \x3d destination;\n  }\n};\n\n/**\n * Navigates the browser to the desired destination. If a JavaScript redirect is\n * requested then the redirect will be performed in a dynamically-generated\n * hidden iframe. A JavaScript redirect is determined by checking the following:\n *   - the path is a relative path or matches the hosting page\x27s protocol, host\n *      and port\n *   - the path starts with /url or /aclk\n *   - the URL contains \x26rct\x3dj\n *\n * For destinations which are not JavaScript redirects, the navigation will be\n * performed as a regular navigation. Note that this function is intended to be\n * a hook which can be replaced so any page navigations (i.e. setting\n * location.href) should be performed this way to ensure that extensions can\n * intercept these navigations and perform special handling.\n * @param {string} destination The destination to navigate the browser to.\n * @param {boolean\x3d} opt_replace Set to true to replace the current window\n *     location, overwriting its history entry.\n */\ngws.nav.go \x3d function(destination, opt_replace) {\n  // Allow listeners to intercept and handle this navigation request. If any\n  // listener returns true, it has handled the navigation and no further\n  // listener callbacks will be called.\n  if (!gws.msg.send(\n          gws.constants.MESSAGE_TYPE_NAV_BEFORE_GO, [destination],\n          0,  // Not false, so propagation can be stopped.\n          true)) {\n    try {\n      if (new RegExp(\n              \x27^(\x27 + gws.location.getProtocolAndHost() +\n              \x27)?/(url|aclk)\\\\?.*\x26rct\x3dj(\x26|$)\x27)\n              .test(destination)) {\n        if (!gws.nav.redirectIframe_) {\n          gws.nav.redirectIframe_ \x3d document.createElement(\x27iframe\x27);\n          gws.nav.redirectIframe_.style.display \x3d \x27none\x27;\n          gws.dom.append(gws.nav.redirectIframe_);\n        }\n        // Toggle the r bit so that the JavaScript redirector executes the\n        // redirect. See\n        // //webserver/util/renderers/javascript_redirector_utils.js\n        // for more details.\n        google.r \x3d 1;\n        gws.nav.redirectIframe_.src \x3d destination;\n      } else {\n        gws.nav.updateWindowLocationForHardNav_(destination, opt_replace);\n      }\n    } catch (e) {\n      // If reading the window location or the regex fails for any reason, just\n      // go to the destination URL.\n      gws.nav.updateWindowLocationForHardNav_(destination, opt_replace);\n    }\n  }\n};\n\n\n/**\n * Modifies the parameters of the current URL and navigates to a search page.\n *\n * You should only use this for queries that depend on user input, and not for\n * queries that are known at server render time.  If it is known at server\n * render time, you should just use QueryWriter.\n *\n * Also note that this method is not currently recommended as it blindly\n * copies URL parameters that may cause unexpected behavior for your navigation.\n * Instead, this function should be rewritten to use sticky parameters generated\n * by the serverside, similar to gws.embeddedsearch.RequestParams.\n *\n * @param {!Object} args Holds mutable key/value pairs of all CGI args\n *     (eg. {q:\x27foobar\x27 }). If a null value is given for a key, that\n *     key will be dropped.\n * @param {boolean\x3d} opt_replace Set to true to replace the current window\n *     location, overwriting its history entry.\n * @param {boolean\x3d} opt_ignoreExistingParameters Set to true to drop parameters\n *     not set in args.\n */\ngws.nav.search \x3d function(args, opt_replace, opt_ignoreExistingParameters) {\n  // TODO(jjtswan): Rewrite so it uses sticky params from the serverside instead\n  // of copying from the URL bar.\n  gws.nav.go(\n      gws.nav.getQueryUrl(args, opt_ignoreExistingParameters), opt_replace);\n};\n\n\n/**\n * Redirects to the given page.\n * @param {string} url Search request url.\n */\ngws.nav.redirect \x3d function(url) {\n  gws.nav.updateWindowLocationForHardNav_(url, true);\n};\n\n\n/**\n * Returns a non-JESRized relative URL for the current page.  Examples:\n * - http://www.google.com/ \x3d\x3e \x27/\x27\n * - http://www.google.com/webhp \x3d\x3e \x27/webhp\x27\n * - http://www.google.co.uk/search?q\x3dred \x3d\x3e \x27/search?q\x3dred\x27\n * - http://www.google.com/search?q\x3dred\x26hl\x3den#q\x3dblue\x26fp\x3d1151235\x26hl\x3des \x3d\x3e\n *       \x27/search?q\x3dblue\x26hl\x3des\x27\n *\n * For JESR:\n * - All JESR-specific CGI parameters are stripped from the return value (such\n *   that the page can be navigated to the return value and *not* receive a JESR\n *   data-only response).\n * - It is possible for the location to not match the current page state.  For\n *   example, when initially loading a JESR bookmark getLocation will report the\n *   bookmark location even if JESR hasn\x27t started loading it yet.\n *\n * @return {string} Host-relative URL for the current page.\n */\ngws.nav.getLocation \x3d function() {\n  var loc \x3d gws.location.getLocation();\n  // The location.hash property isn\x27t used directly because it performs unwanted\n  // URL decoding.  (Ditto location.search.)\n  var hashIndex;\n  var hashCgiArgs \x3d loc.hash ? loc.href : \x27\x27;\n  if (hashCgiArgs) {\n    hashIndex \x3d hashCgiArgs.indexOf(\x27#\x27);\n    hashCgiArgs \x3d hashCgiArgs.substr(hashIndex + 1);\n  }\n\n  var searchCgiArgs \x3d loc.search ?\n      loc.href.substr(loc.href.indexOf(\x27?\x27) + 1).replace(/#.*/, \x27\x27) :\n      \x27\x27;\n\n  // If the hash params are missing the q param then do not use it as all\n  // JESR params have the q param.\n  var useHashCgiArgs \x3d hashCgiArgs \x26\x26 hashCgiArgs.match(/(^|\x26)q\x3d/);\n  var cgiArgs \x3d useHashCgiArgs ? hashCgiArgs : searchCgiArgs;\n\n  var nonJesrCgiArgs \x3d\n      cgiArgs.replace(/(^|\x26)(fp|tch)\x3d[^\x26]*/g, \x27\x27).replace(/^\x26/, \x27\x27);\n  return (useHashCgiArgs ? \x27/search\x27 : loc.pathname) +\n      (nonJesrCgiArgs ? \x27?\x27 + nonJesrCgiArgs : \x27\x27);\n};\n\n\n/**\n * Replaces the existing definition of a parameter with a new one. If parameter\n * doesn\x27t exist yet, the new key value pair is appended to the url.\n * NOTE: Assumes existence of other params in the URL and always uses \x26 to\n * append key value pairs.\n *\n * NOTE(jmittleman): Looking for gws.nav.removeParam?  Use\n * goog.uri.utils.removeParam.\n *\n * @param {string} key URL parameter name.\n * @param {string} url URL to modify.\n * @param {string} value parameter value.\n * @param {boolean\x3d} opt_dontEncode if true, don\x27t apply encodeURIComponent to\n *     the parameter value.\n * @return {string} The modified URL.\n * @deprecated Please use gws.historyState and gws.historyState.AnalyzedState to\n *     add params and update urls.\n */\ngws.nav.addParam \x3d function(key, url, value, opt_dontEncode) {\n  // TODO(ruilopes): Get our encode/decode history straight.\n  var encodedValue \x3d opt_dontEncode ? value : encodeURIComponent(value);\n  var regex \x3d new RegExp(\x27([#?\x26]\x27 + key + \x27\x3d)[^\x26#]*\x27);\n  if (regex.test(url)) {\n    url \x3d url.replace(regex, \x27$1\x27 + encodedValue);\n  } else {\n    url +\x3d \x27\x26\x27 + key + \x27\x3d\x27 + encodedValue;\n  }\n  return url;\n};\n\n\n/**\n * Replaces parameters in the current URL to create a new one.\n * @param {!Object} args Holds mutable key/value pairs of all CGI args\n *     (eg. {q:\x27foobar\x27 }). If a null value is given for a key, that\n *     key will be dropped.\n * @param {boolean\x3d} opt_ignoreExistingParameters Set to true to drop parameters\n *     not set in args.\n * @return {string} Host-relative URL.\n */\ngws.nav.getQueryUrl \x3d function(args, opt_ignoreExistingParameters) {\n  var params \x3d {};\n  if (!opt_ignoreExistingParameters) {\n    var currentParams \x3d gws.nav.getLocation().match(/[?\x26][\\w\\.\\-~]+\x3d([^\x26]*)/g);\n    if (currentParams) {\n      for (var i \x3d 0, p; p \x3d currentParams[i++];) {\n        var nameVal \x3d p.match(/([\\w\\.\\-~]+?)\x3d(.*)/);\n        var name \x3d nameVal[1];\n        var value \x3d nameVal[2];\n        params[name] \x3d value;\n      }\n    }\n  }\n  // Use args to overwrite any existing parameters.\n  for (var p in args) {\n    if (args.hasOwnProperty(p)) {\n      value \x3d args[p];\n      if (value \x3d\x3d null) {\n        delete params[p];\n      } else {\n        params[p] \x3d value.toString().replace(/[\x26#]/g, encodeURIComponent);\n      }\n    }\n  }\n\n  var url \x3d \x27/search?\x27;\n  var firstParam \x3d true;\n  for (var p in params) {\n    if (params.hasOwnProperty(p)) {\n      url \x3d url.concat((firstParam ? \x27\x27 : \x27\x26\x27) + p + \x27\x3d\x27 + params[p]);\n      firstParam \x3d false;\n    }\n  }\n  return url;\n};\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/common/nav.js\n");

$googDebugFname=undefined;
var $googDebugFname="search/onenamespace/one_namespace_type.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.search.onenamespace.OneNamespaceType\x27);\n\n/**\n * @enum {number}\n */\nproto.search.onenamespace.OneNamespaceType \x3d {\n  UNKNOWN_VALUE: 0,\n  NOT_ONE_NAMESPACE: 1,\n  DEFINITELY_NOT_ONE_NAMESPACE: 1,\n  ONE_NAMESPACE: 2,\n  ABOVE_TOP_ADS: 283,\n  ACTIONS_RESULT: 31,\n  ACTIONS_RESULT_GROUP: 8167,\n  ACTION_ADS_RESULT_GROUP: 153,\n  ADD_A_PLACE: 368,\n  AGENT_RESULT: 280,\n  AIR_QUALITY_RESULT: 445,\n  ALIAS_LOCATION_SETTING: 5567,\n  ALL_KNOWN_LOCAL_PRODUCTS_MODULE: 556,\n  ALL_PRODUCT_POSTS_MODULE: 556,\n  ALL_LOCAL_GOOGLE_REVIEWS: 378,\n  ALL_LOCAL_POSTS_MODULE: 406,\n  ALL_LOCAL_SCALABLE_ATTRIBUTES: 478,\n  ANNOUNCEMENT: 186,\n  ANSWERS_HEADER: 14138,\n  ANSWERS_MAIN_COLUMN_LIST_RESULT: 3478,\n  ANSWERS_RESULT: 951,\n  ANSWERS_RESULT_GROUP: 1466,\n  ANSWER_ONLY_ESCAPE_HATCH: 547,\n  ANSWER_PANEL: 569,\n  ANSWER_PANEL_INNER: 605,\n  AQUARIUS_RESULT: 32,\n  ASYNC_WEB_RESULT_GROUP: 8305,\n  AT_A_CONTEXT_NOTIFIABLE_RESULT: 508,\n  AT_A_PLACE_VISUAL_DICTIONARY_RESULTS: 468,\n  AWARD_LATEST_ANNOUNCEMENT_DEPRECATED: 18533,\n  AWARD_MEDIA_CARD_DEPRECATED: 18534,\n  AWARD_NOMINEES_DEPRECATED: 18532,\n  AWARD_PROMOTION_DEPRECATED: 18535,\n  AWARD_WATCH_INFO_DEPRECATED: 18536,\n  AWARENESS_RESULT: 393,\n  BALLOT: 147,\n  BALLOT_INFO_CARD: 11286,\n  BAR_LIST: 516,\n  BLUE_GINGER_RESERVATION: 143,\n  BOLLYWOOD_NEWS: 68,\n  BOOKS_DESCRIPTION_FROM_PUBLISHER: 490,\n  BOOKS_PROPERTY_ENTITY_PAGE: 626,\n  BOOKS_PROPERTY_ENTITY_PAGE_HERO: 631,\n  BOOKS_PROPERTY_SECTION: 627,\n  BOOKS_PROPERTY_TAB: 628,\n  BOOKS_RATINGS_AND_AWARDS: 632,\n  BOOKS_WHOLEPAGE_ACTIONS_CARD: 572,\n  BOOK_DOWNLOAD: 536,\n  BOOK_EDITIONS: 575,\n  BOOK_PREVIEW: 377,\n  BOOK_RESULT: 231,\n  BORROW_ACTION: 370,\n  BOTTOM_OF_PAGE_REFINEMENTS_BLOCK: 12638,\n  BREADCRUMBS: 515,\n  BROAD_REVISION: 198,\n  BROAD_REVISIONS: 339,\n  BUSYNESS_HISTOGRAM: 11594,\n  CALCULATOR: 63,\n  CALENDAR_EVENT_RESULT: 296,\n  CALENDAR_MULTIPACK_CONTAINER: 20,\n  CALENDAR_MULTIPACK_RESULT: 3671,\n  CALYPSO_RESULT: 33,\n  CALYPSO_RESULT_GROUP: 10060,\n  CARDIFYABLE_FEATURE: 392,\n  CARD_CANVAS: 17527,\n  CHAIN_FAILURE_CARD_GROUP: 442,\n  CHANNEL_SHELF: 3676,\n  CLIENT_PLAYABLE_GAME_RESULT: 13,\n  CLIENT_SIDE_FUNBOX_MODULE: 14681,\n  CLIMATE_ONEBOX: 425,\n  CLIR_PHOENIX_IMAGES_RESULT_GROUP: 7580,\n  CLIR_PHOENIX_VIDEO_RESULT: 510,\n  CLIR_PHOENIX_VIDEO_RESULT_GROUP: 521,\n  CLIR_RESULT: 34,\n  CLIR_RESULT_GROUP: 6372,\n  CLUSTER_RESULT_GROUP: 92,\n  COARSE_LOCATION_UPLOAD_NOTICE_CARD: 644,\n  CODELAB_SOLUTION_HOROSCOPE_CARD: 504,\n  CODELAB_SOLUTION_JEFF_DEAN_FACTS: 414,\n  COLLAPSED_OSRP_RESULT_GROUP: 539,\n  COLLEGE_ADMISSION_TEST_SCORES: 597,\n  COLLEGE_APPLICATION_DEADLINES: 586,\n  COLLEGE_COST: 584,\n  COLLEGE_COST_BY_INCOME: 585,\n  COLLEGE_DEMOGRAPHICS: 587,\n  COLLEGE_FAFSA_INFO: 588,\n  COLLEGE_GRADS_COMMON_CAREERS: 583,\n  COLLEGE_GRADS_SALARY: 596,\n  COLLEGE_GRADS_TOP_EMPLOYERS: 598,\n  COLLEGE_GRADUATION_RATE: 589,\n  COLLEGE_INFO_BOX: 590,\n  COLLEGE_MAJORS: 592,\n  COLLEGE_NUM_STUDENTS: 593,\n  COLLEGE_PELL_GRANTS_RECIPIENTS: 594,\n  COLLEGE_RANKINGS: 595,\n  COLLEGE_STUDENT_LOANS: 591,\n  COMPANY_PRODUCT_RESULT_GROUP: 6969,\n  CRITIC_REVIEW: 120,\n  CULTURAL_EVENTS: 491,\n  CULTURAL_INSTITUTE_ARTWORK: 354,\n  CULTURAL_INSTITUTE_EXHIBIT: 134,\n  CURRENCY_ONEBOX: 64,\n  CUSTOM_ONEBOX_RESULT_GROUP: 324,\n  DESTINATION_EXPLORE_RESULT: 399,\n  DIALOG_RESULT: 12741,\n  DICTIONARY_ENTRY_MODULE: 5494,\n  DICTIONARY_ONEBOX: 5493,\n  DICTIONARY_SIMILAR_TERMS_MODULE: 523,\n  DICTIONARY_THESAURUS_MODULE: 553,\n  DICTIONARY_TRANSLATE_MODULE: 5495,\n  DICTIONARY_USAGE_OVER_TIME_MODULE: 5499,\n  DIRECTIONS_RESULT: 4,\n  DIRECTIONS_RESULT_AMBIGUOUS: 65,\n  DISAMBIGUATION_CARD_BLOCK: 6921,\n  DISAMBIGUATION_CARD_RESULT: 35,\n  DISAMBIGUATION_CARD_TITLE: 36,\n  DISAMBIGUATION_COMPARISON: 6545,\n  DISAMBIGUATION_ENTITY_ATTRIBUTE: 6519,\n  DISAMBIGUATION_FINANCE: 6547,\n  DOCS_MULTIPACK_CONTAINER: 22,\n  DOCS_MULTIPACK_RESULT: 3534,\n  ECOUTEZ_ANSWERS_AND_ACTIONS_RENDERER: 3965,\n  EDUCATION_EXAMPLES: 492,\n  EDUCATION_FORMULAS: 479,\n  EDUCATION_PRACTICE_PROBLEMS: 473,\n  EDUCATION_RESULT_GROUPING: 426,\n  EDUCATION_RESULT_GROUPING_RESULT: 427,\n  ELECTION_NIGHT: 127,\n  ELECTION_RESULTS_CARD: 11287,\n  ELECTION_RESULTS_SNIPPET: 135,\n  EMOJI_ONEBOX: 582,\n  ENTITY_COMPARISON: 5889,\n  ENTITY_FACET_CLUSTERS: 371,\n  ENTITY_PREVIEW: 574,\n  ENTITY_PREVIEW_HEADER: 630,\n  ENTITY_VOICE_ENTRY: 614,\n  EPHEMERAL_EVENT_SHOPPING_CAROUSEL: 277,\n  EPHEMERAL_EXPERIMENTAL_RESULT: 643,\n  EPHEMERAL_MASTHEAD: 173,\n  EPHEMERAL_VIDEO_PLAYLIST: 459,\n  EVENT_PARTICIPANTS: 206,\n  EVENT_PROMOTION: 175,\n  EVENT_VISUAL_REFINEMENTS: 551,\n  EVERYDAY_CIVICS_QUOTES: 484,\n  EXAM_CALENDAR: 543,\n  EXAM_RESULT_ONEBOX: 397,\n  EXPERIMENTAL_SEARCH_INDICATOR: 163,\n  EXPLORATORY_RESULT: 77,\n  EXPLORE_ON_CONTENT: 494,\n  EXPLORE_ON_CONTENT_DOCUMENT_RESULT: 495,\n  EXPLORE_ON_CONTENT_ENTITY_CAROUSEL: 571,\n  EXPLORE_TOPIC_FEED: 486,\n  EXPLORE_TOPIC_FEED_RESULT: 488,\n  EXPLORE_UNIVERSAL_BLOCK: 620,\n  EXTERNAL_APP_LINK: 139,\n  FACETED_SEARCH: 159,\n  FACT_LINK_WITH_THUMBNAIL: 372,\n  FANCY_VIDEO_RESULT: 351,\n  FEED_AD_RESULT: 522,\n  FEED_STREAM_DATA: 611,\n  FEED_VIDEO_RESULT: 613,\n  FILTERABLE_CONTAINER_RESULT_GROUP: 608,\n  FILTERED_RESULTS_MESSAGE: 17314,\n  FINANCE_ENTITIES_RESULT_GROUP: 252,\n  FINANCE_LANDING_PAGE: 232,\n  FINANCE_ONEBOX: 17995,\n  FINANCE_OSRP: 209,\n  FINANCE_ENTITY_PAGE: 209,\n  FINANCE_SECTION_RESULT_GROUP: 251,\n  FINANCE_TAB_CONTAINER_RESULT_GROUP: 249,\n  FINANCE_TAB_RESULT_GROUP: 250,\n  FINANCE_WEB_SITES_RESULT_GROUP: 253,\n  FINANCE_WHOLEPAGE: 229,\n  FINANCE_WHOLEPAGE_ACTION_BAR: 387,\n  FINANCE_WHOLEPAGE_BUTTON: 388,\n  FINANCE_WHOLEPAGE_CHART: 287,\n  FINANCE_WHOLEPAGE_COMPANY_INFO_RESULT_GROUP: 294,\n  FINANCE_WHOLEPAGE_COMPARISON: 288,\n  FINANCE_WHOLEPAGE_COMPARISON_CHART: 321,\n  FINANCE_WHOLEPAGE_COMPARISON_TABLE: 322,\n  FINANCE_WHOLEPAGE_ENTITY_ATTRIBUTE: 323,\n  FINANCE_WHOLEPAGE_ENTITY_ITEM: 271,\n  FINANCE_WHOLEPAGE_ENTITY_SITES_RESULT_GROUP: 344,\n  FINANCE_WHOLEPAGE_HEADER: 245,\n  FINANCE_WHOLEPAGE_HEADER_RESULT_GROUP: 248,\n  FINANCE_WHOLEPAGE_MARKET_INDEX: 325,\n  FINANCE_WHOLEPAGE_NEWS_RESULT_GROUP: 300,\n  FINANCE_WHOLEPAGE_NEWS_STORY: 285,\n  FINANCE_WHOLEPAGE_QUARTERLY_FINANCIALS: 293,\n  FINANCE_WHOLEPAGE_RELATED_ENTITY: 326,\n  FINANCE_WHOLEPAGE_SIMPLIFIED_INFO: 246,\n  FINANCE_WHOLEPAGE_WATCHLIST: 327,\n  FINANCE_WHOLEPAGE_YOUR_STOCKS_PROMO: 533,\n  FISHEYE_FOLLOW_UP: 9816,\n  FISHEYE_RESULT: 121,\n  FISHEYE_RESULT_GROUP: 9815,\n  FLIGHTS_PRICE_NOTIFICATION: 347,\n  FLIGHTS_UNIVERSAL_RESULT: 237,\n  FLIGHTS_UNIVERSAL_RESULT_DESTINATION_ONLY: 233,\n  FLIGHTS_UNIVERSAL_RESULT_LOCATIONLESS: 234,\n  FLIGHTS_UNIVERSAL_RESULT_ORIGIN_DESTINATION: 2743,\n  FLIGHTS_UNIVERSAL_RESULT_ORIGIN_ONLY: 44,\n  FLIGHTS_UNIVERSAL_RESULT_REGION: 45,\n  FLIGHTS_UNIVERSAL_SCHEDULE_DESTINATION_ONLY: 48,\n  FLIGHTS_UNIVERSAL_SCHEDULE_ORIGIN_DESTINATION: 46,\n  FLIGHTS_UNIVERSAL_SCHEDULE_ORIGIN_ONLY: 47,\n  FLIGHTS_UNIVERSAL_SPECIFIC_FLIGHTS: 103,\n  FLIGHT_STATS_ONEBOX: 2336,\n  FLIPPY_CONTAINER: 9397,\n  FOLLOWUP_ANSWER_RESULT: 528,\n  FOLLOWUP_WEATHER_RESULT: 529,\n  FOLLOW_ENTITY_BUTTON: 619,\n  FORUM_CLUSTER_RESULT: 199,\n  FRESH_CONTENT_GROUP: 149,\n  FUNFACTS_ANSWER: 355,\n  GENERIC_AD: 25,\n  GEOCODE_CATEGORICAL_RESULT: 558,\n  GEO_DINING_CUISINE_QUERY_SHORTCUTS: 263,\n  GEO_DINING_CURRENT_LOCATION_AND_MAP: 265,\n  GEO_DINING_EXPLORE_BEST_OF_LISTS: 581,\n  GEO_DINING_EXPLORE_RESULT_GROUP: 438,\n  GEO_DINING_EXPLORE_SCAVENGER_HUNT_CAROUSEL: 532,\n  GEO_DINING_EXPLORE_SUGGESTED_SETS: 453,\n  GEO_DINING_HERO_CAROUSEL: 219,\n  GEO_DINING_LANDING_PAGE_PROMO: 310,\n  GEO_DINING_LOCATION_SUGGEST_PAGE: 264,\n  GEO_DINING_MOOD_RESULT_GROUP: 467,\n  GEO_DINING_NEARBY_NEIGHBORHOODS: 282,\n  GEO_DINING_PAGE: 218,\n  GEO_DINING_PLACES_CAROUSEL: 221,\n  GEO_DINING_QUERY_SHORTCUTS: 222,\n  GEO_DINING_RECENT_SAVE_SUGGEST: 348,\n  GEO_DINING_RECENT_SEARCH_SUGGEST: 349,\n  GEO_DINING_SEARCH_SUGGEST_PAGE: 262,\n  GEO_DINING_SET: 314,\n  GEO_DINING_SETS_CAROUSEL: 223,\n  GEO_DINING_SETS_DEPRECATED: 243,\n  GEO_DINING_SET_PLACES_CAROUSEL: 261,\n  GEO_DINING_SHORTCUT_PROMO: 254,\n  GEO_DINING_SITUATION: 466,\n  GEO_DINING_SUGGESTED_LOCATION_CORRECTION: 341,\n  GEO_DINING_UPDATE: 244,\n  GEO_DINING_UPDATES_CAROUSEL: 220,\n  GEO_DINING_WEB_SEARCH_ESCAPE_HATCH: 315,\n  GEO_NON_MATCHING_RESULTS_HEADER: 437,\n  GEO_TEMPORAL_DISCOVERY_HIGHLIGHTS_EXPLORE_MAPPED_PLACES: 649,\n  GEO_WHOLEPAGE_CLUSTER: 224,\n  GEO_WHOLEPAGE_HEADER: 225,\n  GIF_REVIEWS: 337,\n  GMAIL_MULTIPACK_CONTAINER: 24,\n  GMAIL_MULTIPACK_RESULT: 3200,\n  HASHTAG_SHELF_RESULT: 78,\n  HEALTH_BMI_CALCULATOR: 171,\n  HEALTH_ONEBOX: 227,\n  HEALTH_OSRP_CONDITION_PICTURE: 634,\n  HEALTH_OSRP_CONDITION_SYMPTOMS: 565,\n  HEALTH_OSRP_CONDITION_TREATMENTS: 566,\n  HEALTH_OSRP_OVERVIEW: 564,\n  HEALTH_OSRP_PSA: 636,\n  HEALTH_OSRP_RELATED_CONDITIONS: 629,\n  HEALTH_POLLEN_COUNT: 409,\n  HEALTH_RICHER_KP: 54,\n  HEALTH_RICHER_KP_CONDITION: 8258,\n  HEALTH_RICHER_KP_DRUG: 14107,\n  HEALTH_RICHER_KP_EXPLORE: 381,\n  HEALTH_RICHER_KP_SYMPTOM: 16719,\n  HEALTH_RICHER_KP_SYMPTOM_SEARCH: 16720,\n  HEALTH_SNAP_RESULT: 214,\n  HEIRLOOM_SEARCH_PAGE: 13363,\n  HERO_IMAGE: 165,\n  HIDE_INFERRED_LANGUAGE_CONTENT: 633,\n  HIGHLIGHT_RESULT: 14116,\n  HORIZONTAL_FACTS: 513,\n  HORIZON_REFINEMENT: 116,\n  HORIZON_REFINEMENTS_GROUP: 95,\n  HOST_CLUSTER: 563,\n  HOTEL_BOOKING_COMMERCIAL_UNIT: 284,\n  HOTEL_COMPARISON_MODULE: 527,\n  IMAGES_UNIVERSAL_SEGMENT: 12007,\n  IMAGE_COLLAGE: 610,\n  IMAGE_FEATURED_RESULT: 342,\n  IMAGE_GUIDED_SEARCH_RESULT: 391,\n  IMAGE_ONEBOX_GROUP: 380,\n  IMAGE_RELATED_IMAGES_FROM_HOST: 417,\n  IMAGE_RELATED_ITEM: 358,\n  IMAGE_RESULT: 37,\n  IMAGE_RESULT_GROUP: 443,\n  IMAGE_STYLE_INFO: 373,\n  IMPRECISE_LOCATION: 476,\n  INDIA_RAILWAY: 73,\n  INTEREST_FEED: 369,\n  INTERNAL_PAGE_LINK: 150,\n  INTERNET_SPEED_TEST_ONEBOX: 526,\n  IPA_RESULT_GROUP: 7,\n  JANATA_SEARCH: 534,\n  JANATA_SHARE: 535,\n  JETPACK_RESULT_GROUP: 487,\n  JOB_SUMMARY_RESULT_GROUP: 550,\n  KEY_MOMENTS: 390,\n  KEY_MOMENTS_SNIPPET: 389,\n  KNOWLEDGE_BAR: 2924,\n  KNOWLEDGE_CARD: 2457,\n  KNOWLEDGE_CARD_ACTIONS: 164,\n  KNOWLEDGE_CARD_DESCRIPTION: 4174,\n  KNOWLEDGE_CARD_DISAMBIGUATION: 2581,\n  KNOWLEDGE_CARD_EASTER_EGG: 211,\n  KNOWLEDGE_CARD_ENTITY_RESULT_TITLE_CONTAINER: 5127,\n  KNOWLEDGE_CARD_FACT: 119,\n  KNOWLEDGE_CARD_GEOCODE_DATA_RESULT: 560,\n  KNOWLEDGE_CARD_INLINE_VIDEO: 421,\n  KNOWLEDGE_CARD_LOCAL_DATA_RESULT: 559,\n  KNOWLEDGE_CARD_MAP_CONTAINER: 3078,\n  KNOWLEDGE_CARD_RELATED_TOPIC: 5725,\n  KNOWLEDGE_CARD_RESULT_GROUP: 3982,\n  KNOWLEDGE_CARD_SITELINKS: 552,\n  KNOWLEDGE_CARD_TAB_CONTAINER_RESULT_GROUP: 52,\n  KNOWLEDGE_CARD_TAB_RESULT_GROUP: 51,\n  KNOWLEDGE_CAROUSEL_RESULT: 2940,\n  KNOWLEDGE_CUBE_EXPLANATION_ONEBOX: 3821,\n  KNOWLEDGE_CUBE_EXPLANATION_ONEBOX_RESULT: 104,\n  KNOWLEDGE_DONATION: 621,\n  KNOWLEDGE_GAME_CARD: 446,\n  KNOWLEDGE_PANEL_EMBEDDED_VIDEO_RESULT: 101,\n  KNOWLEDGE_PANEL_EMBEDDED_VIDEO_RESULT_GROUP: 5307,\n  KNOWLEDGE_PANEL_FLIGHT_TRACKER_RESULT: 4806,\n  KNOWLEDGE_PANEL_GOOGLE_REVIEW_RESULT: 3823,\n  KNOWLEDGE_PANEL_MICROFORMS_RESULT: 10956,\n  KNOWLEDGE_PANEL_PROFILES_COLLECTION: 6262,\n  KNOWLEDGE_PANEL_PROFILE_RESULT: 3183,\n  KOREAN_UNIVERSAL_RESULT_DEPRECATED: 38,\n  KOREAN_UNIVERSAL_RESULT_GROUP_DEPRECATED: 921,\n  KP_REMINDER: 123,\n  LANGUAGE_RESULT_GROUP: 502,\n  LANGUAGE_TIP_NOTIFICATION: 537,\n  LIST_CALLOUT_RESULT: 549,\n  LIVEBLOG_UPDATE: 12400,\n  LIVEBLOG_UPDATE_CAROUSEL: 12405,\n  LIVE_EVENTS_ONEBOX: 7261,\n  LIVE_RESULT_SHOWTIMES_STANDALONE: 5,\n  LIVE_RESULT_SNOW_CONDITION: 2893,\n  LIVE_RESULT_SPORTS_PLAYER_STATS: 2470,\n  LIVE_TV_TABLE: 19537,\n  LIVE_TV_TABLE_ANSWER: 32073,\n  LIVE_TV_TABLE_ROW: 19538,\n  LOCAL_ACTIONS: 172,\n  LOCAL_ASPECT_SUMMARY: 12297,\n  LOCAL_ATTRIBUTE_LIST: 205,\n  LOCAL_BUSINESS_DIRECTORY: 458,\n  LOCAL_CATEGORICAL_FOLLOWUPS: 475,\n  LOCAL_CATEGORICAL_NONLOCAL_ENTRY_POINT: 545,\n  LOCAL_CATEGORICAL_RESULT_GROUP: 6689,\n  LOCAL_CHAIN_MORE_LOCATIONS: 606,\n  LOCAL_CLICK_TO_CHAT: 363,\n  LOCAL_CUISINE_SUGGESTED_SETS: 580,\n  LOCAL_DETAILS_BLOCK: 5970,\n  LOCAL_DIALOG_DATA: 273,\n  LOCAL_EDIT_INFO: 13968,\n  LOCAL_GAS_PRICES_MODULE: 17581,\n  LOCAL_GOOGLE_REVIEWS: 125,\n  LOCAL_HIERARCHICAL_CHILDREN_CONTAINER: 14065,\n  LOCAL_HIERARCHICAL_PARENT_CONTAINER: 14063,\n  LOCAL_HOTELS_BOOKING_MODULE: 12826,\n  LOCAL_HOTELS_NEARBY_RESTAURANTS_MODULE: 465,\n  LOCAL_HOTELS_VIDEO_MODULE: 334,\n  LOCAL_HOTEL_ACTION: 501,\n  LOCAL_HOTEL_ALTERNATIVE_HOTELS_MODULE: 567,\n  LOCAL_HOTEL_AMENITY_MODULE: 12663,\n  LOCAL_HOTEL_PRICE_CHART_MODULE: 235,\n  LOCAL_HOTEL_PRICE_SUMMARY: 185,\n  LOCAL_HOTEL_RATES_KP_TAB_CONTENT: 431,\n  LOCAL_HOTEL_RECOMMENDATION_MODULE: 362,\n  LOCAL_HOTEL_ROOM_BOOKING_MODULE: 386,\n  LOCAL_INDOOR_MAP: 441,\n  LOCAL_KNOWLEDGE_CARD_TABLE_LAYOUT: 16999,\n  LOCAL_KP_HANGOUT_LINKS: 10438,\n  LOCAL_MEDIA_MAP_CONTAINER: 6279,\n  LOCAL_MEDIA_MODULE_CONTAINER: 6278,\n  LOCAL_MENU_MAIN_PANEL: 5978,\n  LOCAL_MENU_PHOTOS: 148,\n  LOCAL_MENU_SECTION: 11076,\n  LOCAL_MERCHANT_DESCRIPTION: 469,\n  LOCAL_NAV_TO_CATEGORICAL_CAROUSEL: 599,\n  LOCAL_NEARBY_PLACES_MODULE: 140,\n  LOCAL_OFFERING_CAROUSEL: 335,\n  LOCAL_OFFER_CARD: 612,\n  LOCAL_PENDING_EDITS: 309,\n  LOCAL_PERSONAL_LOYALTY_CARD: 509,\n  LOCAL_PERSONAL_PLACE_LISTS_MODULE: 496,\n  LOCAL_PHOTO_CAROUSEL: 275,\n  LOCAL_PHOTO_GALLERY: 402,\n  LOCAL_PHOTO_UPLOADER_CONTAINER: 16597,\n  LOCAL_PLACE_LISTS: 141,\n  LOCAL_PLACE_QA_CONTAINER: 34364,\n  LOCAL_POSTS_MODULE: 276,\n  LOCAL_PRODUCTS_OVERVIEW_MODULE: 615,\n  LOCAL_PROMOTION_MODULE: 274,\n  LOCAL_PROVIDE_FEEDBACK: 213,\n  LOCAL_PUBLIC_PLACE_LIST: 570,\n  LOCAL_PUBLIC_PLACE_LISTS: 557,\n  LOCAL_RECENTLY_OPENED_BUSINESS: 333,\n  LOCAL_RESULT: 98,\n  LOCAL_RESULT_GROUP: 436,\n  LOCAL_REVIEWS_EDITORIAL_SUMMARY: 6829,\n  LOCAL_REVIEWS_RATE_AND_REVIEW: 166,\n  LOCAL_REVIEWS_SUMMARY: 126,\n  LOCAL_SCALABLE_ATTRIBUTES: 69,\n  LOCAL_SEND_TO_DEVICE_CONTAINER: 17866,\n  LOCAL_SERVICE_AREA_BUSINESS_GET_A_QUOTE: 562,\n  LOCAL_SERVICE_AREA_BUSINESS_SERVICES_LIST: 578,\n  LOCAL_SHOPPING_POPULAR_PRODUCTS: 350,\n  LOCAL_STAR_SCORE: 142,\n  LOCAL_STORE_RETURN_POLICY: 470,\n  LOCAL_SUGGESTED_SETS: 114,\n  LOCAL_TAB_CONTENT: 403,\n  LOCAL_TIME_ONEBOX: 162,\n  LOCAL_TOP_LISTS: 184,\n  LOCAL_TRAFFIC: 281,\n  LOCAL_TRANSIT_DEPARTURE_BOARD: 102,\n  LOCAL_TRANSIT_LINE_VARIANTS: 303,\n  LOCAL_UGC_ENTRY_POINT: 167,\n  LOCAL_UNIFIED_REVIEWS: 383,\n  LOCAL_UNVERIFIED_BADGE: 286,\n  LOCAL_USER_QUOTES: 332,\n  LOCAL_VISIT_HISTORY_MODULE: 340,\n  LOCAL_WEB_SNIPPET: 419,\n  LOCAL_WIFI_GCONNECT_HOTSPOT: 505,\n  LOCATION_PROMPT_CARD_GROUP: 302,\n  LOCATION_PROMPT_CARD_RESULT: 313,\n  LOCATION_PROMPT_DECISIONS: 109,\n  LOCATION_PROMPT_GROUP: 110,\n  LOTTERY_RESULT_ONEBOX: 338,\n  LR_FACTORY_FUNBOX: 14839,\n  LR_FACTORY_HOTLINE: 14840,\n  LR_FACTORY_LAB: 14841,\n  LR_FACTORY_LIGHTBOX: 14842,\n  LR_FACTORY_LIVE_RESULT_ANSWERS: 14843,\n  LR_FACTORY_LIVE_RESULT_CALCULATOR: 14844,\n  LR_FACTORY_LIVE_RESULT_GUIDE_DEPRECATED: 16676,\n  LR_FACTORY_LOTTERY: 72,\n  LR_FACTORY_SANTA_TRACKER: 16538,\n  LR_FACTORY_SEARCH_BOX: 97,\n  LR_FACTORY_SECTIONIZED_LIST: 14845,\n  LR_FACTORY_SOLAR_ESTIMATOR: 70,\n  LU_ENGAGED_MERCHANT_BADGE: 637,\n  LU_JUSTIFICATION_GOOD_TO_KNOW: 416,\n  LU_JUSTIFICATION_HIGHLIGHTS: 407,\n  LU_THIRD_PARTY_REVIEWS_CONTAINER: 16715,\n  LU_WEBSITE_LINK: 503,\n  MAIN_COLUMN_RESULT_GROUP: 26,\n  MAIN_COLUMN_RESULT_GROUP_COUNTERFACTUAL: 215,\n  MAP_RESULT: 3,\n  MAP_RESULT_GROUP: 561,\n  MAP_RESULT_IN_IMMERSIVE_CARD: 8460,\n  MEDIA_MAP_RESULT: 39,\n  MEDIA_RESULT_GROUP: 3660,\n  MEGASITELINKS_RESULT: 40,\n  MEGASITELINKS_RESULT_GROUP: 2062,\n  MERCHANT_PANEL: 447,\n  MERCHANT_PANEL_RESULT_GROUP: 449,\n  MERGED_WEB_NAV_RESULT_GROUP: 6150,\n  MICROFORMS_RICH_SNIPPET_RESULT_GROUP: 133,\n  MOBILE_APPLICATION_CARD: 6168,\n  MOBILE_APPLICATION_CARD_V2: 16994,\n  MOBILE_APPLICATION_UNIVERSAL: 6220,\n  MOBILE_APPLICATION_UNIVERSAL_RESULT: 41,\n  MOMA_NOW_CARD: 7515,\n  MORTGAGE_CALCULATOR_ONEBOX: 9635,\n  MOVIE_SHELF_RESULT: 79,\n  MOVIE_WATCHCARD_RESULT: 80,\n  MUSIC_SHELF_RENDERER: 27,\n  NAVIGATIONAL_RESULT: 42,\n  NAVIGATIONAL_RESULT_GROUP: 2069,\n  NAVMENUS_SUBMENU_RESULT_GROUP: 3351,\n  NAVMENUS_TAB: 3352,\n  NEWS_LOCAL_RESULT: 160,\n  NEWS_LOCAL_RESULT_GROUP: 161,\n  NEWS_ONEBOX_RESULT: 9557,\n  NEWS_RESULT: 43,\n  NEWS_RESULT_GROUP: 415,\n  NOW_CARDMAKER: 601,\n  NOW_CARD_MENU_ACTION: 482,\n  NOW_COLLECTION: 456,\n  NOW_FEATURE: 455,\n  NOW_HERO_CAROUSEL: 511,\n  NOW_HERO_CAROUSEL_COLLECTION: 512,\n  NOW_INTEREST_HEADER: 471,\n  NOW_MORE_STORIES_LURE: 548,\n  NOW_NEW_TO_YOU_RESULT: 422,\n  NOW_NOTIFICATION: 538,\n  NOW_RESULT: 124,\n  NOW_RESULT_GROUP: 17462,\n  NOW_SIGN_IN_LURE: 500,\n  NOW_STREAM_CARD: 404,\n  NOW_STREAM_CLUSTER: 290,\n  NOW_STREAM_PACKING_CARD: 49,\n  NOW_STREAM_PACKING_CARD_CLUSTER: 50,\n  NOW_STREAM_PAGE: 291,\n  NOW_TRAY: 457,\n  NO_RESULT_NOTICE: 155,\n  NO_RESULT_SUGGESTION: 396,\n  NUTRITION_FACTS_ENERGY_RESULT: 5202,\n  NUTRITION_FACTS_NUTRIENTS_RESULT: 5204,\n  NUTRITION_ONEBOX: 5207,\n  OLYMPICS: 194,\n  ONEBOX_BLOCK: 6922,\n  ONE_LINE_ATTRIBUTE_LIST_SUMMARY: 7315,\n  OSRP_CARD_CLUSTER: 364,\n  OSRP_MASTHEAD: 365,\n  OSRP_TAB: 366,\n  OSRP_TABBED_PAGE: 367,\n  P13N_RESULT: 81,\n  P13N_SHELF_RESULT: 82,\n  PAGE_AREA_BOTTOM: 8,\n  PAGE_HEADER: 208,\n  PAGINATION: 485,\n  PARKING_LOCATION_RESULT: 17463,\n  PARKING_SEARCH_RESULT: 301,\n  PEOPLE_RESULT_INFOCARD: 2558,\n  PEOPLE_SEARCH_DISAMBIGUATION: 602,\n  PERMANENTLY_CLOSED: 11750,\n  PERSONAL_ACTION_NO_RESULT_RESULT: 7197,\n  PERSONAL_INTELLIGENCE_DISABLED_RESULT: 316,\n  PERSONAL_INTELLIGENCE_DISABLED_RESULT_GROUP: 317,\n  PERSONAL_INTELLIGENCE_NO_RESULT_RESULT: 5901,\n  PERSONAL_INTELLIGENCE_NO_RESULT_RESULT_GROUP: 59,\n  PERSONAL_INTELLIGENCE_RESULT: 16,\n  PERSONAL_INTELLIGENCE_RESULT_GROUP: 5165,\n  PERSONAL_MODE_LURE_RESULT: 435,\n  PERSONAL_MULTIPACK_CONSOLIDATED_PANEL_CONTAINER: 4570,\n  PERSONAL_MULTIPACK_RESULT: 14990,\n  PERSONAL_MULTIPACK_RESULT_GROUP: 14989,\n  PERSONAL_PLACES_RESULT: 30,\n  PERSONAL_ROUTINE_MEMORY_RESULT: 190,\n  PERSONAL_ROUTINE_MEMORY_RESULT_GROUP: 188,\n  PERSONAL_ROUTINE_RECOMMENDATIONS_RESULT: 191,\n  PERSONAL_ROUTINE_RECOMMENDATIONS_RESULT_GROUP: 189,\n  PERSONAL_ROUTINE_RESULT_GROUP: 187,\n  PERSONAL_SEARCH_ACTION_RESULT: 74,\n  PERSONAL_SEARCH_ACTION_RESULT_GROUP: 75,\n  PERSONAL_SHOPPING_CART_RESULT: 568,\n  PLACE_ACTIONS_MODULE: 439,\n  PLAN_YOUR_VISIT: 113,\n  PLAYLIST_SHELF: 472,\n  PLAYLIST_SHELF_RESULT: 775,\n  PODCAST_LINKS_RESULT: 66,\n  PODCAST_LINKS_RESULT_GROUP: 14252,\n  POLITICIAN_CAMPAIGN_FINANCE: 17531,\n  POLITICIAN_CAMPAIGN_FINANCE_SNIPPET: 17834,\n  POLITICIAN_ISSUES_DETAIL: 203,\n  POLITICIAN_ISSUES_SUMMARY: 204,\n  POLITICIAN_LATEST_QUOTES: 493,\n  POLITICIAN_OTHER_CANDIDATES: 305,\n  POLITICIAN_OTHER_CONTESTS: 306,\n  POLITICIAN_PLATFORM_STATEMENT: 17329,\n  POLITICIAN_QUESTIONS_AND_ANSWERS: 295,\n  POLITICIAN_QUESTIONS_AND_ANSWERS_SNIPPET: 308,\n  POLITICIAN_QUOTES_AND_QUESTIONS: 307,\n  POLITICIAN_QUOTES_BY_TOPIC: 17328,\n  POLITICIAN_QUOTES_BY_TOPIC_SNIPPET: 17583,\n  POLITICIAN_TOP_PRIORITIES: 292,\n  POLITICIAN_TRENDS: 17325,\n  PRAYER_TIMES: 579,\n  PREDICTED_DESTINATION: 624,\n  PREDICTIVE_KNOWLEDGE_RESULT: 352,\n  PRODUCT_LISTING_AD: 154,\n  PROFILE_RESULT: 55,\n  PROMOTION_RESULT: 56,\n  PROSE_ONEBOX: 226,\n  PROTOTYPICAL_ONE_NAMESPACE: 17260,\n  PUBLIC_ALERTS_EARTHQUAKES_CAROUSEL_RESULT_GROUP: 152,\n  PUBLIC_ALERTS_EARTHQUAKES_ONEBOX: 16624,\n  PUBLIC_ALERTS_EARTHQUAKE_RESULT: 151,\n  PUBLIC_ALERTS_RESULT: 3268,\n  PUBLISHER_CREDIBILITY_GROUP: 464,\n  PURCHASED_RESULT: 83,\n  QUERY_NOTICE: 196,\n  QUIMBY_IMAGE_QUERY_RESULT: 17,\n  QUIMBY_IMAGE_QUERY_RESULT_GROUP: 1752,\n  QUIMBY_SIMILAR_IMAGES_RESULT_GROUP: 1779,\n  QUIMBY_TEXT_QUERY_RESULT: 18,\n  QUIMBY_TEXT_QUERY_RESULT_GROUP: 1776,\n  RADIO_RESULT: 84,\n  RANKED_PREVIEW_TABLE: 530,\n  READ_ACTION: 640,\n  REALTIMECARD_RESULT: 14194,\n  REALTIMECARD_RESULT_GROUP: 13387,\n  RECIPE_HOST_RESULT_GROUP: 480,\n  RECIPE_SUMMARY_RESULT_GROUP: 481,\n  REFIENMENTS_SHELF_RESULT: 86,\n  REFINEMENTS_RESULT: 85,\n  RELATED_BLOGS_RESULT: 12,\n  RELATED_BLOGS_RESULT_GROUP: 1142,\n  RELATED_EVENT_PROMOTION: 395,\n  RELATED_QUESTIONS_CARD_BLOCK: 10041,\n  RELATED_QUESTIONS_TITLE: 60,\n  RELATED_QUESTION_LINK: 10042,\n  RELATED_QUESTION_LONG_ANSWER: 61,\n  RELATED_QUESTION_SOURCE_LINK: 62,\n  REVIEW_SUMMARY_ANSWER_CARD: 5645,\n  REVIEW_SUMMARY_KNOWLEDGE_PANEL: 3993,\n  RHS_COLUMN: 28,\n  RHS_COLUMN_COUNTERFACTUAL: 216,\n  RICH_FACT_RESULT: 96,\n  RICH_SHOWTIMES: 452,\n  RICH_SNIPPET_EVENT: 200,\n  RICH_SNIPPET_EVENT_ONEBOX: 4792,\n  RICH_SNIPPET_LINE: 514,\n  RIDDLER_BANNER: 53,\n  RODIN_RESULT: 105,\n  RODIN_RESULT_GROUP: 5075,\n  SCENE_ONEBOX_RESULT: 87,\n  SCENE_SHELF_RESULT: 88,\n  SCHOLAR_ONEBOX: 230,\n  SEARCH_CONSOLE_ONEBOX_GROUP: 374,\n  SEARCH_CONSOLE_SUBMIT_URL_RESULT: 375,\n  SEARCH_CONSOLE_SUIT_AMP_RESULT: 450,\n  SEARCH_CONSOLE_SUIT_MFT_RESULT: 451,\n  SEARCH_EXPLORATORY_GROUP: 5147,\n  SEARCH_MUSIC_RESULT: 29,\n  SEARCH_PAGE: 6,\n  SEARCH_SCENE_ONEBOX_RENDERER: 7709,\n  SEARCH_UNPLUGGED_RESULT: 99,\n  SELECTION_CAROUSEL_RESULT: 76,\n  SHOPPING_ASPECTS_RESULT: 394,\n  SHOPPING_BUYING_GUIDES_RESULT: 238,\n  SHOPPING_CATEGORICAL_KP_RESULT: 623,\n  SHOPPING_ORGANIC_SEARCH_RESULT_GROUP: 239,\n  SHOPPING_PRODUCT_CAROUSEL_RESULT: 483,\n  SHOPPING_REVIEWS_RESULT: 240,\n  SHOPPING_SEARCH_RESULT: 202,\n  SHOPPING_VISUAL_REFINEMENTS_RESULT: 241,\n  SHOW_WATCHCARD_RESULT: 89,\n  SIMPLE_TOP_STORIES: 642,\n  SITELINK: 197,\n  SOCIAL_RESULT: 71,\n  SONG_CARD_BLOCK: 6920,\n  SONG_LYRICS_CARD: 9776,\n  SONG_RESULT: 192,\n  SOS_ALERTS: 604,\n  SOS_BANNER: 207,\n  SOS_CRISIS_MAP: 268,\n  SOS_DONATIONS: 304,\n  SOS_EMERGENCY_ALERT: 408,\n  SOS_EVENT_SUMMARY: 618,\n  SOS_HELP_AND_INFO: 269,\n  SOS_MODE_SWITCHER: 318,\n  SOS_OVERVIEW_MAP: 319,\n  SOS_RECOMMENDED_ACTIONS: 385,\n  SOS_RECONNECT: 270,\n  SOS_TRANSLATIONS: 320,\n  SOS_UGC_CARD: 638,\n  SOURCE_CLUSTER_RESULT_GROUP: 93,\n  SOURCE_REFINEMENTS: 542,\n  SOURCE_REFINEMENTS_RESULT_GROUP: 635,\n  SPELL_ONEBOX: 11,\n  SPELL_ONEBOX_MULTIPLE_SUGGESTIONS_NON_STICKY: 1806,\n  SPORTS_IMMERSIVE_ONEBOX: 9650,\n  SPORTS_LANDING_PAGE: 157,\n  SPORTS_LEAGUE_TRENDING_PLAYER: 646,\n  SPORTS_LEAGUE_TRENDING_PLAYERS: 645,\n  SPORTS_OSRP_FULL_RESULT: 576,\n  SPORTS_OSRP_SUMMARY_RESULT: 577,\n  SPORTS_PLAYERS_PAGE: 647,\n  SPORTS_POPULAR_PLAYERS: 648,\n  SPORTS_SCHEDULE: 111,\n  SPORTS_SKI_VIKING_ONEBOX: 14076,\n  SPORTS_STANDINGS: 112,\n  SPORTS_TORSO_ONEBOX: 328,\n  STAMP_CAROUSEL_RESULT: 461,\n  STAMP_CAROUSEL_RESULT_GROUP: 460,\n  STANDALONE_STRUCTURED_REFINEMENT_THUMBNAIL_ROW: 10976,\n  STANDARD_RESULT_KNOWLEDGE_PANEL: 6688,\n  STARS_WEB_RESULT: 115,\n  STATS_KP_PANEL: 4021,\n  STATS_KP_RELATED_STATISTICS_TABLE: 5523,\n  STORIES_RESULT_GROUP: 428,\n  STREAM_ACCORDION_GROUP: 210,\n  STREAM_CAROUSEL: 8591,\n  STREAM_CAROUSEL_SECTION: 410,\n  STREAM_EVENT_SUMMARIES: 424,\n  STREAM_EVENT_SUMMARY: 429,\n  STREAM_HOST_RESULT_GROUP: 345,\n  STREAM_RESULT: 19,\n  STREAM_RESULT_GROUP: 8619,\n  STREAM_STORIES: 357,\n  STREAM_SUMMARY_RESULT_GROUP: 346,\n  STRUCTURED_REFINEMENT_METADATA_TABLE: 3038,\n  STRUCTURED_REFINEMENT_THUMBNAIL_ROW: 3040,\n  SUBJECTIVE_ATTRIBUTES: 336,\n  SUNRISE_SUNSET_ONEBOX: 2413,\n  SWELL_NOTIFIABLE_RESULT: 1939,\n  THIRD_PARTY_ACTION: 7806,\n  THIRD_PARTY_FEATURES_QA: 531,\n  THIRD_PARTY_FEATURES_RESULT: 423,\n  THIRD_PARTY_FEATURES_RESULT_GROUP: 444,\n  THIRD_PARTY_FEATURES_SCHEDULE: 600,\n  THIRD_PARTY_MARKUP_CAROUSEL: 106,\n  THIRD_PARTY_MARKUP_RESULT: 107,\n  THIRD_PARTY_MARKUP_RESULT_GROUP: 108,\n  THIRD_PARTY_MARKUP_STANDALONE_RESULT: 117,\n  THIRD_PARTY_MARKUP_STANDALONE_RESULT_GROUP: 118,\n  THIRD_PARTY_MARKUP_STANDALONE_RESULT_GROUP_CONTAINER: 122,\n  THIRD_PARTY_SEARCH_APP_SNIPPET: 434,\n  THIS_JUST_IN_CONTAINER: 136,\n  THIS_JUST_IN_TICKER_RESULT: 137,\n  THIS_JUST_IN_TICKER_RESULT_GROUP: 138,\n  THUMBNAIL_LIST_REFINEMENTS: 5230,\n  THUMBS_UP_DOWN: 247,\n  TICKET_PRICE_FACT: 622,\n  TIME_AT_HOME_RESULT: 17464,\n  TIP_CALCULATOR: 5831,\n  TIP_CALCULATOR_GROUP: 10,\n  TIP_LANG_RESTRICT: 182,\n  TOP_BROAD_REVISION: 401,\n  TOP_BROAD_REVISIONS: 343,\n  TOP_LANGUAGE_TABS: 361,\n  TOP_STORIES: 420,\n  TOP_STORIES_SECTION: 544,\n  TRAIL_RESULT_GROUP: 12937,\n  TRANSIT_LINES_METADATA_TABLE: 10047,\n  TRANSLATE_WIDGET_ONEBOX: 6613,\n  TRAVEL_ARTICLES: 448,\n  TRAVEL_ITINERARIES: 174,\n  TRAVEL_RICH_LINK: 418,\n  TRENDING_ENTITY: 9,\n  TRENDS_ONEBOX: 12073,\n  TTS_RESULT: 299,\n  TVM_LANDING_PAGE: 382,\n  TVM_OSRP: 329,\n  TVM_OSRP_TAB_OVERVIEW: 330,\n  TVM_OSRP_TAB_WATCH: 331,\n  TV_ANNOTATIONS: 11036,\n  TV_PROGRAM_WATCH_ACTION: 546,\n  TWITTER_RESULT: 14,\n  TWITTER_RESULT_GROUP: 10748,\n  UGC_FACTS: 440,\n  UGC_NOW_NOTIFICATION_MOVIES: 519,\n  UGC_QUESTIONS_MY_CONTRIBUTIONS: 524,\n  UGC_QUESTIONS_UNANSWERED: 506,\n  UGC_THUMBS_PIVOT: 541,\n  UNIT_CONVERTER_HEIRLOOM_PLUS_ONEBOX: 23456,\n  UNIT_CONVERTER_ONEBOX: 13668,\n  UNPLUGGED_SHELF_RENDERER: 100,\n  USER_REVIEWS: 311,\n  USER_TAGS: 312,\n  US_PRIMARIES: 17962,\n  VANITY_SEARCH_ALERT_ONEBOX: 128,\n  VANITY_SEARCH_ALERT_ONEBOX_GROUP: 129,\n  VANITY_SEARCH_MYACCOUNT_ONEBOX: 130,\n  VANITY_SEARCH_MYACCOUNT_ONEBOX_GROUP: 131,\n  VASCO_TASK_CARD: 525,\n  VERBSPACE_WEB_CARD: 57,\n  VERBSPACE_WEB_CARD_GROUP: 9772,\n  VIDEO_GALLERIES_CAROUSEL: 554,\n  VIDEO_GALLERIES_RESULT_GROUP: 555,\n  VIDEO_QA: 474,\n  VIDEO_RESULT: 15,\n  VIDEO_RESULT_GROUP: 639,\n  VIDEO_SHELF: 788,\n  VIDEO_SHELF_RESULT: 789,\n  VIDEO_STREAM_CAROUSEL_WRAPPER: 573,\n  VIDEO_STREAM_CAROUSEL: 573,\n  VIDEO_UNIVERSAL_CAROUSEL: 144,\n  VIDEO_UNIVERSAL_GROUP: 146,\n  VIDEO_UNIVERSAL_RESULT: 145,\n  VIDEO_VISUAL_REFINEMENTS_RESULT_GROUP: 195,\n  VISUAL_ARTWORKS: 625,\n  VOTER_ASSISTANT_CARD: 13574,\n  VOTER_INFO_HOW_TO_REGISTER: 616,\n  VOTER_INFO_HOW_TO_VOTE: 617,\n  VOTE_ONEBOX: 6104,\n  WATCHCARD_ALBUM_RESULT: 170,\n  WATCHCARD_ARTIST_RESULT: 168,\n  WATCHCARD_GENRE_RESULT: 169,\n  WATCHCARD_RESULT: 90,\n  WATCH_ACTION: 603,\n  WEATHER_ONEBOX: 2338,\n  WEATHER_TEMPERATURE_CHART: 641,\n  WEBANSWERS_MULTI_ANSWER: 430,\n  WEBANSWERS_MULTI_ANSWER_CARD: 463,\n  WEBANSWERS_MULTI_ANSWER_HEADER: 462,\n  WEBANSWERS_WITH_QUESTION: 212,\n  WEBANSWERS_WITH_QUESTION_BLOCK: 201,\n  WEB_ANSWERS_CARD_BLOCK: 6924,\n  WEB_ANSWERS_IMAGE_RESULT: 58,\n  WEB_ANSWERS_RESULT: 5755,\n  WEB_ANSWERS_SNIPPET_RESULT: 8064,\n  WEB_ANSWERS_STANDARD_RESULT: 477,\n  WEB_FRIEND_RESULT: 23,\n  WEB_FRIEND_RESULT_GROUP: 737,\n  WEB_HISTORY_RESULTS: 489,\n  WEB_QUOTE_LIST_BLOCK: 11651,\n  WEB_RESULT: 21,\n  WEB_RESULT_CAROUSEL: 356,\n  WEB_RESULT_GROUP: 874,\n  WHAT_IS_MY_IP_ONEBOX: 91,\n  WHAT_TO_WATCH_MINIAPP: 607,\n  WHAT_TO_X_HEADER: 650,\n  WHEN_IS_ONEBOX: 2437,\n  WHOLEPAGE_CARD_RESULT_GROUP: 178,\n  WHOLEPAGE_CLUSTER_RESULT_GROUP: 183,\n  WHOLEPAGE_COLUMN_RESULT_GROUP: 454,\n  WHOLEPAGE_CRITIC_REVIEWS: 236,\n  WHOLEPAGE_ENTITY_SITES: 298,\n  WHOLEPAGE_EPISODE_LIST: 259,\n  WHOLEPAGE_FETCH_ERROR: 379,\n  WHOLEPAGE_HEADER: 258,\n  WHOLEPAGE_HEADER_RESULT_GROUP: 266,\n  WHOLEPAGE_HERO_CAROUSEL: 193,\n  WHOLEPAGE_MAIN_COLUMN_RESULT_GROUP: 432,\n  WHOLEPAGE_MEDIA_CAROUSEL: 272,\n  WHOLEPAGE_MEDIA_LIST: 353,\n  WHOLEPAGE_MORE_BY_AUTHOR: 405,\n  WHOLEPAGE_PAGE: 176,\n  WHOLEPAGE_PAGE_GROUP: 360,\n  WHOLEPAGE_PROMOTION: 297,\n  WHOLEPAGE_PROMOTION_HOMESCREEN_ICON: 413,\n  WHOLEPAGE_PROVIDERS_ONBOARDING: 359,\n  WHOLEPAGE_RECENT_EPISODES: 260,\n  WHOLEPAGE_RELATED_SITES_DEPRECATED: 242,\n  WHOLEPAGE_RHS_COLUMN_RESULT_GROUP: 433,\n  WHOLEPAGE_SNIPPET_CARD: 376,\n  WHOLEPAGE_TAB_CONTAINER_RESULT_GROUP: 267,\n  WHOLEPAGE_TAB_RESULT_GROUP: 177,\n  WHOLEPAGE_THUMBNAIL_REFINEMENTS_GRID: 228,\n  XPANEL_REFINEMENT_ROW: 412,\n  XPANEL_RESULT_GROUP: 540,\n  XPANEL_TITLE: 609,\n  XPANEL_VIDEO_CARD: 517,\n  XPANEL_VIDEO_CAROUSEL: 507,\n  XPANEL_VIDEO_RESULT: 518,\n  YOUTUBE_CLIR_RESULT: 94,\n  YOUTUBE_VIDEO_KPS: 400,\n  YOUTUBE_WATCHNEXT_ALBUMS_RESULT_GROUP: 256,\n  YOUTUBE_WATCHNEXT_CONTINUE_WATCHING_RESULT_GROUP: 498,\n  YOUTUBE_WATCHNEXT_MIXES_RESULT_GROUP: 278,\n  YOUTUBE_WATCHNEXT_MORE_FROM_UPLOADER_RESULT_GROUP: 132,\n  YOUTUBE_WATCHNEXT_MORE_RECS_RESULT_GROUP: 499,\n  YOUTUBE_WATCHNEXT_OTHER_VERSIONS_RESULT_GROUP: 257,\n  YOUTUBE_WATCHNEXT_P13N_RECS_RESULT_GROUP: 156,\n  YOUTUBE_WATCHNEXT_RECENTLY_UPLOADED_RESULT_GROUP: 497,\n  YOUTUBE_WATCHNEXT_RELATED_ARTISTS_RESULT_GROUP: 279,\n  YOUTUBE_WATCHNEXT_RESULT: 67,\n  YOUTUBE_WATCHNEXT_TOPIC_RESULT_GROUP: 158,\n  YOUTUBE_WATCHNEXT_TOP_TRACKS_RESULT_GROUP: 255\n};\n\n\n//# sourceURL\x3dhttps://qs/search/onenamespace/one_namespace_type.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/error/error_logger.js";
goog.loadModule("goog.module(\x27search.log.error.ErrorLogger\x27);\n\nconst OneNamespaceType \x3d goog.require(\x27proto.search.onenamespace.OneNamespaceType\x27);\n\n/**\n * This interface is implemented by methods that log errors.\n * (i.e Clearcut, GWS, etc).\n * @interface\n */\nclass ErrorLogger {\n  /**\n   * Logs an error\n   *\n   * @param {!Error} error The error to be logged.\n   * @param {!Object\x3cstring, string\x3e} errorContext\n   * @param {!OneNamespaceType} oneNamespaceType\n   */\n  log(error, errorContext, oneNamespaceType) {}\n}\n\nexports \x3d ErrorLogger;\n\n//# sourceURL\x3dhttps://qs/gws/js/log/error/error_logger.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/delegate/delegateregistry.js";
goog.loadModule("// Copyright 2017 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ngoog.module(\x27goog.delegate.DelegateRegistry\x27);\n\nconst {ENABLE_ASSERTS, assert} \x3d goog.require(\x27goog.asserts\x27);\nconst {binarySelect} \x3d goog.require(\x27goog.array\x27);\nconst {freeze} \x3d goog.require(\x27goog.debug\x27);\n\n\n/**\n * @record\n * @template T\n */\nclass Registration {\n  constructor() {\n    /**\n     * The registered delegate instance.  Exactly one of `instance` or\n     * `ctor` must be provided.\n     * @type {T|undefined}\n     */\n    this.instance;\n    /**\n     * The registered delegate constructor.  Exactly one of `instance` or\n     * `ctor` must be provided.\n     * @type {function(new: T)|undefined}\n     */\n    this.ctor;\n    /**\n     * An optional numeric priority (higher \x3d first).\n     * @type {number|undefined}\n     */\n    this.priority;\n  }\n}\n\n\n/**\n * Base class for delegate registries.  Does not specify a policy for handling\n * multiple delegates.\n * @template T\n */\nclass DelegateRegistryBase {\n  constructor() {\n    /** @private @const {!Array\x3c!Registration\x3cT\x3e\x3e} */\n    this.registered_ \x3d [];\n    /** @private {boolean} */\n    this.allowLateRegistration_ \x3d false;\n    /** @private {boolean} */\n    this.cacheInstantiation_ \x3d false;\n    /** @private {boolean} */\n    this.delegatesConstructed_ \x3d false;\n  }\n\n  /**\n   * Configures this registry to allow late registration.  Normally it is an\n   * error to register a delegate after calling `delegate()` or `delegates()`.\n   * If late registration is allowed, then this is no longer an error.  This\n   * check only ever happens in debug mode.  Returns this.\n   * @return {THIS}\n   * @this {THIS}\n   * @template THIS\n   */\n  allowLateRegistration() {\n    if (ENABLE_ASSERTS) {\n      /** @type {!DelegateRegistryBase} */ (this).allowLateRegistration_ \x3d true;\n    }\n    return /** @type {?} */ (this);\n  }\n\n  /**\n   * Configures this registry to automatically cache instantiated instances,\n   * rather than calling the constructor every time `delegates()` is called.\n   * Returns this.\n   * @return {THIS}\n   * @this {THIS}\n   * @template THIS\n   */\n  cacheInstantiation() {\n    /** @type {!DelegateRegistryBase} */ (this).cacheInstantiation_ \x3d true;\n    return /** @type {?} */ (this);\n  }\n\n  /**\n   * Returns the first (highest priority) registered delegate, or undefined\n   * if none was registered.\n   * @param {(function(function(new: T)): T)\x3d} instantiate A function to\n   *     instantiated constructors registered with `registerClass`.  By default,\n   *     this just calls the constructor with no arguments.\n   * @return {T|undefined}\n   */\n  delegate(instantiate \x3d undefined) {\n    if (ENABLE_ASSERTS) {\n      this.delegatesConstructed_ \x3d true;\n    }\n    return this.registered_.length ?\n        this.instantiate_(this.registered_[0], instantiate) :\n        undefined;\n  }\n\n  /**\n   * Returns an array of all registered delegates, creating a fresh instance\n   * of any registered classes.  The `instantiate` argument can be passed to\n   * override how constructors are called.  The array will be frozen in debug\n   * mode.\n   * @param {(function(function(new: T)): T)\x3d} instantiate A function to\n   *     instantiated constructors registered with `registerClass`.  By default,\n   *     this just calls the constructor with no arguments.\n   * @return {!Array\x3cT\x3e}\n   */\n  delegates(instantiate \x3d undefined) {\n    if (ENABLE_ASSERTS) {\n      this.delegatesConstructed_ \x3d true;\n    }\n    return freeze(this.registered_.map(r \x3d\x3e this.instantiate_(r, instantiate)));\n  }\n\n  /**\n   * @param {!Registration\x3cT\x3e} registration\n   * @param {(function(function(new: T)): T)\x3d} instantiate\n   * @return {T}\n   * @private\n   */\n  instantiate_(registration, instantiate \x3d (ctor) \x3d\x3e new ctor()) {\n    if (!registration.ctor) return registration.instance;\n    const instance \x3d instantiate(registration.ctor);\n    if (this.cacheInstantiation_) {\n      delete registration.ctor;\n      registration.instance \x3d instance;\n    }\n    return instance;\n  }\n\n  /**\n   * Checks whether a new registration may be added.\n   * @private\n   */\n  checkRegistration_() {\n    assert(\n        this.allowLateRegistration_ || !this.delegatesConstructed_,\n        \x27Cannot register new delegates after instantiation.\x27);\n  }\n}\n\n\n/**\n * Delegates provide a system for hygienic modification of a delegating class\x27s\n * behavior.  The basic idea is that, rather than monkey-patching prototype\n * methods, a class can instead provide extension points by calling out to\n * delegates.  Later code can then register delegates, and when the delegating\n * class is instantiated, any registered delegates will be instantiated and\n * returned.\n *\n * The usage has four parts:\n *  - A *delegate interface* is defined to provide specific overridable hooks.\n *    This can be a simple function `@typedef`, or an entire `@interface` or\n *    `@record`.\n *  - A *delegate registry* for this interface is instantiated, often as a\n *    static field on the interface.\n *  - One or more *delegates* are defined that implement this interface.\n *    Delegates are registered with the registry.  Different registry classes\n *    support different policies for registering more than one delegate.\n *  - After delegates are registered, the delegating class asks the registry for\n *    the *list of delegates*, which are then instantiated if necessary.\n *\n * In some circumstances (particularly if a delegate method will be called from\n * multiple places) it may make sense to provide an additional wrapper between\n * the delegate list and the delegating (sometimes called \x22modded\x22) class, to\n * ensure that the delegates are used correctly.\n *\n * ## Example usage\n *\n * For example, consider a class `Foo` that wants to provide a few extension\n * points for the behaviors `zorch` and `snarf`.  We can set up the delegation\n * as follows\n *\n * \x3ccode class\x3d\x22highlight highlight-source-js\x22\x3e\x3cpre\x3e\n * const DelegateRegistry \x3d goog.require(\x27goog.delegate.DelegateRegistry\x27);\n * const delegates \x3d goog.require(\x27goog.delegate.delegates\x27);\n * class Foo {\n *   constructor() {\n *     /** @private @const {!Array\x3c!Foo.Delegate\x3e} \x26ast;/\n *     this.delegates_ \x3d Foo.Delegate.REGISTRY.delegates();\n *   }\n *   frobnicate(x, y, z) {\n *     const w \x3d delegates.callFirst(this.delegates_, d \x3d\x3e d.zorch(x, y));\n *     return this.delegates_.map(d \x3d\x3e d.snarf(z, w));\n *   }\n * }\n * /** @interface \x26ast;/\n * Foo.Delegate \x3d class {\n *   zorch(a, b) {}\n *   snarf(a, b) {}\n * }\n * /** @const {!DelegateRegistry\x3c!Foo.Delegate\x3e} \x26ast;/\n * Foo.registry \x3d new DelegateRegstry();\n * \x3c/pre\x3e\x3c/code\x3e\n *\n * A file inserted later in the bundle can define a delegate and register itself\n * with the registry:\n *\n * \x3ccode class\x3d\x22highlight highlight-source-js\x22\x3e\x3cpre\x3e\n * /** @implements {Foo.Delegate} \x26ast;/\n * class WibblyFooDelegate {\n *   zorch(a, b) { return a + b; }\n *   snarf(a, b) { return a - b; }\n * }\n * Foo.registry.registerClass(WibbyFooDelegate);\n * \x3c/pre\x3e\x3c/code\x3e\n *\n * In many cases, the delegates need to be initialized with an instance of the\n * modded class.  To support this, a function may be passed to the `delegates()`\n * method to override how the constructor is called.\n *\n *\n * ## Multiple Delegates\n *\n * Several different registry classes are defined, each with a different policy\n * for how to handle multiple delegates.  The most simple, `DelegateRegistry`,\n * allows multiple delegates to be registered and returns them in the order they\n * are registered.  If only one delegate is expected,\n * `DelegateRegistry.prototype.expectAtMostOneDelegate()` performs assertions\n * (in debug mode) that at most one delegate is added, though in production\n * mode it will still register them all - The use of `delegate()` or\n * `goog.delegate.delegates.callFirst()` is recommended in this case to ensure\n * reasonable behavior.\n *\n * Finally, `DelegateRegistry.Prioritized` requires passing a\n * unique priority to each delegate registration (collisions are asserted in\n * debug mode, but will fall back on registration order in production).\n *\n *\n * ## Wrapped Delegator\n *\n * In some cases it makes sense to wrap the delegate list in a dedicated\n * delegator object, rather than having the modded class use it directly:\n *\n * \x3ccode class\x3d\x22highlight highlight-source-js\x22\x3e\x3cpre\x3e\n * /** @record \x26ast;/\n * class MyDelegateInterface {\n *   /** @param {number} arg \x26ast;/\n *   foo(arg) {}\n *   /** @return {number|undefined} \x26ast;/\n *   bar() {}\n *   /** @return {string} \x26ast;/\n *   baz() {}\n * /\n * class MyDelegator {\n *   /** @param {!Array\x3c!MyDelegateInterface\x3e} delegates \x26ast;/\n *   constructor(delegates) { this.delegates_ \x3d delegates; }\n *   /** @param {number} \x26ast;/\n *   foo(arg) { this.delegates_.forEach(d \x3d\x3e d.foo(arg)); }\n *   /** @return {number} \x26ast;/\n *   bar() {\n *     const result \x3d\n *         delegates.callUntilNotNullOrUndefined(this.delegates_, d \x3d\x3e d.bar());\n *     return result !\x3d null ? result : 42;\n *   }\n *   /** @return {!Array\x3cstring\x3e} \x26ast;/\n *   baz() { return this.delegates_.map(d \x3d\x3e d.baz()); }\n * }\n * \x3c/pre\x3e\x3c/code\x3e\n *\n * In this example, the modded class will call into the delegates via the\n * wrapper class, ensuring that the correct calling convention is always used.\n *\n * @extends {DelegateRegistryBase\x3cT\x3e}\n * @template T\n */\nclass DelegateRegistry extends DelegateRegistryBase {\n  constructor() {\n    super();\n    /** @private {boolean} */\n    this.expectAtMostOneDelegate_ \x3d false;\n  }\n\n  /**\n   * Configures this registry to accept at most one delegate.\n   * This only affects debug mode.\n   * @return {!DelegateRegistry\x3cT\x3e}\n   */\n  expectAtMostOneDelegate() {\n    if (ENABLE_ASSERTS) {\n      this.expectAtMostOneDelegate_ \x3d true;\n    }\n    return this;\n  }\n\n  /**\n   * @param {function(new: T)} ctor\n   */\n  registerClass(ctor) {\n    this.checkRegistration_();\n    this.registered_.push({ctor});\n  }\n\n  /**\n   * @param {T} instance\n   */\n  registerInstance(instance) {\n    this.checkRegistration_();\n    this.registered_.push({instance});\n  }\n\n  /** @override @private */\n  checkRegistration_() {\n    super.checkRegistration_();\n    if (ENABLE_ASSERTS \x26\x26 this.expectAtMostOneDelegate_ \x26\x26\n        this.registered_.length) {\n      assert(\n          false, \x27delegate already registered: %s\x27,\n          this.registered_[0].ctor || this.registered_[0].instance);\n    }\n  }\n}\n\n\n/**\n * A delegate registry that allows multiple delegates, which must each have a\n * numeric priority specified when they are registered.  Iteration will start\n * with the highest number and proceed to the lowest number.  If two delegates\n * are added with the same priority, an error will be given in debug mode.\n * @see DelegateRegistry\n *\n * @extends {DelegateRegistryBase\x3cT\x3e}\n * @template T\n */\nDelegateRegistry.Prioritized \x3d class extends DelegateRegistryBase {\n  /**\n   * @param {function(new: T)} ctor\n   * @param {number} priority\n   */\n  registerClass(ctor, priority) {\n    this.add_({ctor, priority});\n  }\n\n  /**\n   * @param {T} instance\n   * @param {number} priority\n   */\n  registerInstance(instance, priority) {\n    this.add_({instance, priority});\n  }\n\n  /**\n   * @param {!Registration\x3cT\x3e} registration\n   * @private\n   */\n  add_(registration) {\n    this.checkRegistration_();\n    const priority \x3d registration.priority;\n    // Note: index will always be negative since the evaluator never returns 0.\n    // This ensures that ties will be broken to the right.  Sort highest-first.\n    const index \x3d\n        ~binarySelect(this.registered_, (r) \x3d\x3e r.priority \x3c priority ? -1 : 1);\n    const previous \x3d index \x3e 0 ? this.registered_[index - 1] : null;\n    if (ENABLE_ASSERTS \x26\x26 previous \x26\x26 previous.priority \x3c\x3d priority) {\n      assert(\n          false, \x27two delegates registered with same priority (%s): %s and %s\x27,\n          priority, previous.ctor || previous.instance,\n          registration.ctor || registration.instance);\n    }\n    this.registered_.splice(index, 0, registration);\n  }\n};\n\n\nexports \x3d DelegateRegistry;\n\n//# sourceURL\x3dhttps://qs/javascript/closure/delegate/delegateregistry.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/delegate/delegates.js";
goog.loadModule("// Copyright 2017 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Provides some utility methods for calling delegate lists with\n * common \x22calling conventions\x22.\n *\n * @see goog.delegate.DelegateRegistry\n */\n\ngoog.module(\x27goog.delegate.delegates\x27);\n\n\n/**\n * Calls the first delegate, or returns undefined if none are given.\n * @param {!Array\x3cT\x3e} delegates\n * @param {function(T): R} mapper\n * @return {R|undefined}\n * @template T, R\n */\nexports.callFirst \x3d (delegates, mapper) \x3d\x3e {\n  return delegates.length \x3e 0 ? mapper(delegates[0]) : undefined;\n};\n\n\n/**\n * Calls delegates until one returns a defined, non-null result.  Returns\n * undefined if no such element is found.\n * @param {!Array\x3cT\x3e} delegates\n * @param {function(T): R|undefined} mapper\n * @return {R|undefined}\n * @template T, R\n */\nexports.callUntilDefinedAndNotNull \x3d (delegates, mapper) \x3d\x3e {\n  for (const delegate of delegates) {\n    const result \x3d mapper(delegate);\n    if (result !\x3d null) return result;\n  }\n  return undefined;\n};\n\n\n/**\n * Calls delegates until one returns a truthy result.  Returns false if no such\n * element is found.\n * @param {!Array\x3cT\x3e} delegates\n * @param {function(T): R} mapper\n * @return {boolean|R}\n * @template T, R\n */\nexports.callUntilTruthy \x3d (delegates, mapper) \x3d\x3e {\n  for (const delegate of delegates) {\n    const result \x3d mapper(delegate);\n    if (result) return result;\n  }\n  return false;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/delegate/delegates.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/error/logger.js";
goog.loadModule("goog.module(\x27search.log.errorLogger\x27);\ngoog.module.declareLegacyNamespace();\n\nconst DelegateRegistry \x3d goog.require(\x27goog.delegate.DelegateRegistry\x27);\nconst ErrorLogger \x3d goog.require(\x27search.log.error.ErrorLogger\x27);\nconst OneNamespaceType \x3d goog.require(\x27proto.search.onenamespace.OneNamespaceType\x27);\nconst delegates \x3d goog.require(\x27goog.delegate.delegates\x27);\nconst googLog \x3d goog.require(\x27goog.log\x27);\nconst {assert} \x3d goog.require(\x27goog.asserts\x27);\n/*\n * Logger to capture any errors thrown by this API.\n */\nconst logger \x3d googLog.getLogger(\x27search.log.errorLogger\x27);\n\n/**\n * Logs a js error along with the stack trace through the registered error\n * loggers.\n * @param {!Error} error The error to be logged. Note that errors with no\n *     message field will be ignored (this function does nothing when called\n *     with \x22new Error()\x22 for this argument).\n * @param {{\n *    errorContext: (!Object\x3cstring, string\x3e|undefined),\n *    oneNamespaceType: (!OneNamespaceType|undefined),\n * }\x3d} params\n */\nfunction log(\n    error,\n    {errorContext \x3d {},\n     oneNamespaceType \x3d OneNamespaceType.UNKNOWN_VALUE} \x3d {}) {\n  try {\n    assert(registry.delegates().length \x3e\x3d 1);\n    // Note all errorLogger.log should return undefined so we will log to all\n    // that are registered. For now only one of the gws error loggers (gws.error\n    // or the logbuilder flow) will be registered. In the future, the clearcut\n    // error logger might be turned on for experimentation. Once the\n    // logging pipeline is stable, this should change to delegates.callFirst\n    // since we should only be logging through one pipeline.\n    delegates.callUntilTruthy(\n        registry.delegates(),\n        (d) \x3d\x3e d.log(error, errorContext, oneNamespaceType));\n  } catch (e) {\n    // Catch exception in case an error is caused by the error logger to avoid\n    // infinte recursion.\n    googLog.info(logger, \x27Error occurred in sending an error report.\x27, e);\n  }\n}\n\n\n/** @package @const {!DelegateRegistry\x3c!ErrorLogger\x3e} */\nconst registry \x3d new DelegateRegistry();\n\nexports \x3d {\n  log,\n  registry,\n};\n\n//# sourceURL\x3dhttps://qs/gws/js/log/error/logger.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/ve/graft_type.js";
goog.loadModule("goog.module(\x27search.log.ve.GraftType\x27);\ngoog.module.declareLegacyNamespace();\n\n/**\n * The types of grafts supported. These values correspond to those read from\n * jslayout.\n * @enum {string}\n */\nconst GraftType \x3d {\n  SHOW: \x27show\x27,\n  HIDE: \x27hide\x27,\n  INSERT: \x27insert\x27\n};\n\nexports \x3d GraftType;\n\n//# sourceURL\x3dhttps://qs/gws/js/log/ve/graft_type.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/datahandler/data_handler.js";
goog.loadModule("goog.module(\x27search.log.datahandler.DataHandler\x27);\n\n/**\n * This interface is implemented by interceptors on add, modify and delete data\n * in LogBuilder.\n * @interface\n */\nclass DataHandler {\n  /**\n   * Called when data is sent by the logBuilder.\n   * @param {string} id The log builder id.\n   * @param {!Map\x3cstring, string\x3e} data The log builder data.\n   */\n  onLog(id, data) {}\n}\n\nexports \x3d DataHandler;\n\n//# sourceURL\x3dhttps://qs/gws/js/log/datahandler/data_handler.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/transport/sender.js";
goog.loadModule("goog.module(\x27search.log.transport.Sender\x27);\n\n/**\n * This interface is implemented by methods that send logs by different methods.\n * @interface\n */\nclass Sender {\n  /**\n   * Subclasses implement this method in whatever method they desire. It could\n   * either be a GET or a POST so be sure the chosen Sender works for\n   * your use case.\n   * @param {string} url A fully formed URL to access in the logging request. It\n   *     could be modified based on additional information supplied in the\n   *     \x27data\x27 param before issuing the request. Also, it could contain any\n   *     base query parameters necessary to form the base request URL.\n   * @param {!Map\x3cstring, string\x3e\x3d} data Additional data for the logging\n   * request. Subclasses are free to decide how this param is used. For example,\n   * it could be encoded as query data string and attached to the \x27url\x27\n   * param. It could also be encoded as part of the body of a POST request,\n   *     leaving the \x27url\x27 param unchanged.\n   */\n  log(url, data \x3d undefined) {}\n}\n\nexports \x3d Sender;\n\n//# sourceURL\x3dhttps://qs/gws/js/log/transport/sender.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/uri/utils.js";
eval("// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Simple utilities for dealing with URI strings.\n *\n * This is intended to be a lightweight alternative to constructing goog.Uri\n * objects.  Whereas goog.Uri adds several kilobytes to the binary regardless\n * of how much of its functionality you use, this is designed to be a set of\n * mostly-independent utilities so that the compiler includes only what is\n * necessary for the task.  Estimated savings of porting is 5k pre-gzip and\n * 1.5k post-gzip.  To ensure the savings remain, future developers should\n * avoid adding new functionality to existing functions, but instead create\n * new ones and factor out shared code.\n *\n * Many of these utilities have limited functionality, tailored to common\n * cases.  The query parameter utilities assume that the parameter keys are\n * already encoded, since most keys are compile-time alphanumeric strings.  The\n * query parameter mutation utilities also do not tolerate fragment identifiers.\n *\n * By design, these functions can be slower than goog.Uri equivalents.\n * Repeated calls to some of functions may be quadratic in behavior for IE,\n * although the effect is somewhat limited given the 2kb limit.\n *\n * One advantage of the limited functionality here is that this approach is\n * less sensitive to differences in URI encodings than goog.Uri, since these\n * functions operate on strings directly, rather than decoding them and\n * then re-encoding.\n *\n * Uses features of RFC 3986 for parsing/formatting URIs:\n *   http://www.ietf.org/rfc/rfc3986.txt\n *\n * @author gboyer@google.com (Garrett Boyer) - The \x22lightened\x22 design.\n * @author msamuel@google.com (Mike Samuel) - Domain knowledge and regexes.\n */\n\ngoog.provide(\x27goog.uri.utils\x27);\ngoog.provide(\x27goog.uri.utils.ComponentIndex\x27);\ngoog.provide(\x27goog.uri.utils.QueryArray\x27);\ngoog.provide(\x27goog.uri.utils.QueryValue\x27);\ngoog.provide(\x27goog.uri.utils.StandardQueryParam\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.string\x27);\n\n\n/**\n * Character codes inlined to avoid object allocations due to charCode.\n * @enum {number}\n * @private\n */\ngoog.uri.utils.CharCode_ \x3d {\n  AMPERSAND: 38,\n  EQUAL: 61,\n  HASH: 35,\n  QUESTION: 63\n};\n\n\n/**\n * Builds a URI string from already-encoded parts.\n *\n * No encoding is performed.  Any component may be omitted as either null or\n * undefined.\n *\n * @param {?string\x3d} opt_scheme The scheme such as \x27http\x27.\n * @param {?string\x3d} opt_userInfo The user name before the \x27@\x27.\n * @param {?string\x3d} opt_domain The domain such as \x27www.google.com\x27, already\n *     URI-encoded.\n * @param {(string|number|null)\x3d} opt_port The port number.\n * @param {?string\x3d} opt_path The path, already URI-encoded.  If it is not\n *     empty, it must begin with a slash.\n * @param {?string\x3d} opt_queryData The URI-encoded query data.\n * @param {?string\x3d} opt_fragment The URI-encoded fragment identifier.\n * @return {string} The fully combined URI.\n */\ngoog.uri.utils.buildFromEncodedParts \x3d function(\n    opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData,\n    opt_fragment) {\n  var out \x3d \x27\x27;\n\n  if (opt_scheme) {\n    out +\x3d opt_scheme + \x27:\x27;\n  }\n\n  if (opt_domain) {\n    out +\x3d \x27//\x27;\n\n    if (opt_userInfo) {\n      out +\x3d opt_userInfo + \x27@\x27;\n    }\n\n    out +\x3d opt_domain;\n\n    if (opt_port) {\n      out +\x3d \x27:\x27 + opt_port;\n    }\n  }\n\n  if (opt_path) {\n    out +\x3d opt_path;\n  }\n\n  if (opt_queryData) {\n    out +\x3d \x27?\x27 + opt_queryData;\n  }\n\n  if (opt_fragment) {\n    out +\x3d \x27#\x27 + opt_fragment;\n  }\n\n  return out;\n};\n\n\n/**\n * A regular expression for breaking a URI into its component parts.\n *\n * {@link http://www.ietf.org/rfc/rfc3986.txt} says in Appendix B\n * As the \x22first-match-wins\x22 algorithm is identical to the \x22greedy\x22\n * disambiguation method used by POSIX regular expressions, it is natural and\n * commonplace to use a regular expression for parsing the potential five\n * components of a URI reference.\n *\n * The following line is the regular expression for breaking-down a\n * well-formed URI reference into its components.\n *\n * \x3cpre\x3e\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n * \x3c/pre\x3e\n *\n * The numbers in the second line above are only to assist readability; they\n * indicate the reference points for each subexpression (i.e., each paired\n * parenthesis). We refer to the value matched for subexpression \x3cn\x3e as $\x3cn\x3e.\n * For example, matching the above expression to\n * \x3cpre\x3e\n *     http://www.ics.uci.edu/pub/ietf/uri/#Related\n * \x3c/pre\x3e\n * results in the following subexpression matches:\n * \x3cpre\x3e\n *    $1 \x3d http:\n *    $2 \x3d http\n *    $3 \x3d //www.ics.uci.edu\n *    $4 \x3d www.ics.uci.edu\n *    $5 \x3d /pub/ietf/uri/\n *    $6 \x3d \x3cundefined\x3e\n *    $7 \x3d \x3cundefined\x3e\n *    $8 \x3d #Related\n *    $9 \x3d Related\n * \x3c/pre\x3e\n * where \x3cundefined\x3e indicates that the component is not present, as is the\n * case for the query component in the above example. Therefore, we can\n * determine the value of the five components as\n * \x3cpre\x3e\n *    scheme    \x3d $2\n *    authority \x3d $4\n *    path      \x3d $5\n *    query     \x3d $7\n *    fragment  \x3d $9\n * \x3c/pre\x3e\n *\n * The regular expression has been modified slightly to expose the\n * userInfo, domain, and port separately from the authority.\n * The modified version yields\n * \x3cpre\x3e\n *    $1 \x3d http              scheme\n *    $2 \x3d \x3cundefined\x3e       userInfo -\\\n *    $3 \x3d www.ics.uci.edu   domain     | authority\n *    $4 \x3d \x3cundefined\x3e       port     -/\n *    $5 \x3d /pub/ietf/uri/    path\n *    $6 \x3d \x3cundefined\x3e       query without ?\n *    $7 \x3d Related           fragment without #\n * \x3c/pre\x3e\n * @type {!RegExp}\n * @private\n */\ngoog.uri.utils.splitRe_ \x3d new RegExp(\n    \x27^\x27 +\n    \x27(?:\x27 +\n    \x27([^:/?#.]+)\x27 +  // scheme - ignore special characters\n                     // used by other URL parts such as :,\n                     // ?, /, #, and .\n    \x27:)?\x27 +\n    \x27(?://\x27 +\n    \x27(?:([^/?#]*)@)?\x27 +  // userInfo\n    \x27([^/#?]*?)\x27 +       // domain\n    \x27(?::([0-9]+))?\x27 +   // port\n    \x27(?\x3d[/#?]|$)\x27 +      // authority-terminating character\n    \x27)?\x27 +\n    \x27([^?#]+)?\x27 +          // path\n    \x27(?:\\\\?([^#]*))?\x27 +    // query\n    \x27(?:#([\\\\s\\\\S]*))?\x27 +  // fragment\n    \x27$\x27);\n\n\n/**\n * The index of each URI component in the return value of goog.uri.utils.split.\n * @enum {number}\n */\ngoog.uri.utils.ComponentIndex \x3d {\n  SCHEME: 1,\n  USER_INFO: 2,\n  DOMAIN: 3,\n  PORT: 4,\n  PATH: 5,\n  QUERY_DATA: 6,\n  FRAGMENT: 7\n};\n\n\n/**\n * Splits a URI into its component parts.\n *\n * Each component can be accessed via the component indices; for example:\n * \x3cpre\x3e\n * goog.uri.utils.split(someStr)[goog.uri.utils.ComponentIndex.QUERY_DATA];\n * \x3c/pre\x3e\n *\n * @param {string} uri The URI string to examine.\n * @return {!Array\x3cstring|undefined\x3e} Each component still URI-encoded.\n *     Each component that is present will contain the encoded value, whereas\n *     components that are not present will be undefined or empty, depending\n *     on the browser\x27s regular expression implementation.  Never null, since\n *     arbitrary strings may still look like path names.\n */\ngoog.uri.utils.split \x3d function(uri) {\n  // See @return comment -- never null.\n  return /** @type {!Array\x3cstring|undefined\x3e} */ (\n      uri.match(goog.uri.utils.splitRe_));\n};\n\n\n/**\n * @param {?string} uri A possibly null string.\n * @param {boolean\x3d} opt_preserveReserved If true, percent-encoding of RFC-3986\n *     reserved characters will not be removed.\n * @return {?string} The string URI-decoded, or null if uri is null.\n * @private\n */\ngoog.uri.utils.decodeIfPossible_ \x3d function(uri, opt_preserveReserved) {\n  if (!uri) {\n    return uri;\n  }\n\n  return opt_preserveReserved ? decodeURI(uri) : decodeURIComponent(uri);\n};\n\n\n/**\n * Gets a URI component by index.\n *\n * It is preferred to use the getPathEncoded() variety of functions ahead,\n * since they are more readable.\n *\n * @param {goog.uri.utils.ComponentIndex} componentIndex The component index.\n * @param {string} uri The URI to examine.\n * @return {?string} The still-encoded component, or null if the component\n *     is not present.\n * @private\n */\ngoog.uri.utils.getComponentByIndex_ \x3d function(componentIndex, uri) {\n  // Convert undefined, null, and empty string into null.\n  return goog.uri.utils.split(uri)[componentIndex] || null;\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The protocol or scheme, or null if none.  Does not\n *     include trailing colons or slashes.\n */\ngoog.uri.utils.getScheme \x3d function(uri) {\n  return goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.SCHEME, uri);\n};\n\n\n/**\n * Gets the effective scheme for the URL.  If the URL is relative then the\n * scheme is derived from the page\x27s location.\n * @param {string} uri The URI to examine.\n * @return {string} The protocol or scheme, always lower case.\n */\ngoog.uri.utils.getEffectiveScheme \x3d function(uri) {\n  var scheme \x3d goog.uri.utils.getScheme(uri);\n  if (!scheme \x26\x26 goog.global.self \x26\x26 goog.global.self.location) {\n    var protocol \x3d goog.global.self.location.protocol;\n    scheme \x3d protocol.substr(0, protocol.length - 1);\n  }\n  // NOTE: When called from a web worker in Firefox 3.5, location maybe null.\n  // All other browsers with web workers support self.location from the worker.\n  return scheme ? scheme.toLowerCase() : \x27\x27;\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The user name still encoded, or null if none.\n */\ngoog.uri.utils.getUserInfoEncoded \x3d function(uri) {\n  return goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.USER_INFO, uri);\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The decoded user info, or null if none.\n */\ngoog.uri.utils.getUserInfo \x3d function(uri) {\n  return goog.uri.utils.decodeIfPossible_(\n      goog.uri.utils.getUserInfoEncoded(uri));\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The domain name still encoded, or null if none.\n */\ngoog.uri.utils.getDomainEncoded \x3d function(uri) {\n  return goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.DOMAIN, uri);\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The decoded domain, or null if none.\n */\ngoog.uri.utils.getDomain \x3d function(uri) {\n  return goog.uri.utils.decodeIfPossible_(\n      goog.uri.utils.getDomainEncoded(uri), true /* opt_preserveReserved */);\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?number} The port number, or null if none.\n */\ngoog.uri.utils.getPort \x3d function(uri) {\n  // Coerce to a number.  If the result of getComponentByIndex_ is null or\n  // non-numeric, the number coersion yields NaN.  This will then return\n  // null for all non-numeric cases (though also zero, which isn\x27t a relevant\n  // port number).\n  return Number(\n             goog.uri.utils.getComponentByIndex_(\n                 goog.uri.utils.ComponentIndex.PORT, uri)) ||\n      null;\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The path still encoded, or null if none. Includes the\n *     leading slash, if any.\n */\ngoog.uri.utils.getPathEncoded \x3d function(uri) {\n  return goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.PATH, uri);\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The decoded path, or null if none.  Includes the leading\n *     slash, if any.\n */\ngoog.uri.utils.getPath \x3d function(uri) {\n  return goog.uri.utils.decodeIfPossible_(\n      goog.uri.utils.getPathEncoded(uri), true /* opt_preserveReserved */);\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The query data still encoded, or null if none.  Does not\n *     include the question mark itself.\n */\ngoog.uri.utils.getQueryData \x3d function(uri) {\n  return goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.QUERY_DATA, uri);\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The fragment identifier, or null if none.  Does not\n *     include the hash mark itself.\n */\ngoog.uri.utils.getFragmentEncoded \x3d function(uri) {\n  // The hash mark may not appear in any other part of the URL.\n  var hashIndex \x3d uri.indexOf(\x27#\x27);\n  return hashIndex \x3c 0 ? null : uri.substr(hashIndex + 1);\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @param {?string} fragment The encoded fragment identifier, or null if none.\n *     Does not include the hash mark itself.\n * @return {string} The URI with the fragment set.\n */\ngoog.uri.utils.setFragmentEncoded \x3d function(uri, fragment) {\n  return goog.uri.utils.removeFragment(uri) + (fragment ? \x27#\x27 + fragment : \x27\x27);\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The decoded fragment identifier, or null if none.  Does\n *     not include the hash mark.\n */\ngoog.uri.utils.getFragment \x3d function(uri) {\n  return goog.uri.utils.decodeIfPossible_(\n      goog.uri.utils.getFragmentEncoded(uri));\n};\n\n\n/**\n * Extracts everything up to the port of the URI.\n * @param {string} uri The URI string.\n * @return {string} Everything up to and including the port.\n */\ngoog.uri.utils.getHost \x3d function(uri) {\n  var pieces \x3d goog.uri.utils.split(uri);\n  return goog.uri.utils.buildFromEncodedParts(\n      pieces[goog.uri.utils.ComponentIndex.SCHEME],\n      pieces[goog.uri.utils.ComponentIndex.USER_INFO],\n      pieces[goog.uri.utils.ComponentIndex.DOMAIN],\n      pieces[goog.uri.utils.ComponentIndex.PORT]);\n};\n\n\n/**\n * Returns the origin for a given URL.\n * @param {string} uri The URI string.\n * @return {string} Everything up to and including the port.\n */\ngoog.uri.utils.getOrigin \x3d function(uri) {\n  var pieces \x3d goog.uri.utils.split(uri);\n  return goog.uri.utils.buildFromEncodedParts(\n      pieces[goog.uri.utils.ComponentIndex.SCHEME], null /* opt_userInfo */,\n      pieces[goog.uri.utils.ComponentIndex.DOMAIN],\n      pieces[goog.uri.utils.ComponentIndex.PORT]);\n};\n\n\n/**\n * Extracts the path of the URL and everything after.\n * @param {string} uri The URI string.\n * @return {string} The URI, starting at the path and including the query\n *     parameters and fragment identifier.\n */\ngoog.uri.utils.getPathAndAfter \x3d function(uri) {\n  var pieces \x3d goog.uri.utils.split(uri);\n  return goog.uri.utils.buildFromEncodedParts(\n      null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH],\n      pieces[goog.uri.utils.ComponentIndex.QUERY_DATA],\n      pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);\n};\n\n\n/**\n * Gets the URI with the fragment identifier removed.\n * @param {string} uri The URI to examine.\n * @return {string} Everything preceding the hash mark.\n */\ngoog.uri.utils.removeFragment \x3d function(uri) {\n  // The hash mark may not appear in any other part of the URL.\n  var hashIndex \x3d uri.indexOf(\x27#\x27);\n  return hashIndex \x3c 0 ? uri : uri.substr(0, hashIndex);\n};\n\n\n/**\n * Ensures that two URI\x27s have the exact same domain, scheme, and port.\n *\n * Unlike the version in goog.Uri, this checks protocol, and therefore is\n * suitable for checking against the browser\x27s same-origin policy.\n *\n * @param {string} uri1 The first URI.\n * @param {string} uri2 The second URI.\n * @return {boolean} Whether they have the same scheme, domain and port.\n */\ngoog.uri.utils.haveSameDomain \x3d function(uri1, uri2) {\n  var pieces1 \x3d goog.uri.utils.split(uri1);\n  var pieces2 \x3d goog.uri.utils.split(uri2);\n  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] \x3d\x3d\n      pieces2[goog.uri.utils.ComponentIndex.DOMAIN] \x26\x26\n      pieces1[goog.uri.utils.ComponentIndex.SCHEME] \x3d\x3d\n      pieces2[goog.uri.utils.ComponentIndex.SCHEME] \x26\x26\n      pieces1[goog.uri.utils.ComponentIndex.PORT] \x3d\x3d\n      pieces2[goog.uri.utils.ComponentIndex.PORT];\n};\n\n\n/**\n * Asserts that there are no fragment or query identifiers, only in uncompiled\n * mode.\n * @param {string} uri The URI to examine.\n * @private\n */\ngoog.uri.utils.assertNoFragmentsOrQueries_ \x3d function(uri) {\n  goog.asserts.assert(\n      uri.indexOf(\x27#\x27) \x3c 0 \x26\x26 uri.indexOf(\x27?\x27) \x3c 0,\n      \x27goog.uri.utils: Fragment or query identifiers are not supported: [%s]\x27,\n      uri);\n};\n\n\n/**\n * Supported query parameter values by the parameter serializing utilities.\n *\n * If a value is null or undefined, the key-value pair is skipped, as an easy\n * way to omit parameters conditionally.  Non-array parameters are converted\n * to a string and URI encoded.  Array values are expanded into multiple\n * \x26key\x3dvalue pairs, with each element stringized and URI-encoded.\n *\n * @typedef {*}\n */\ngoog.uri.utils.QueryValue;\n\n\n/**\n * An array representing a set of query parameters with alternating keys\n * and values.\n *\n * Keys are assumed to be URI encoded already and live at even indices.  See\n * goog.uri.utils.QueryValue for details on how parameter values are encoded.\n *\n * Example:\n * \x3cpre\x3e\n * var data \x3d [\n *   // Simple param: ?name\x3dBobBarker\n *   \x27name\x27, \x27BobBarker\x27,\n *   // Conditional param -- may be omitted entirely.\n *   \x27specialDietaryNeeds\x27, hasDietaryNeeds() ? getDietaryNeeds() : null,\n *   // Multi-valued param: \x26house\x3dLosAngeles\x26house\x3dNewYork\x26house\x3dnull\n *   \x27house\x27, [\x27LosAngeles\x27, \x27NewYork\x27, null]\n * ];\n * \x3c/pre\x3e\n *\n * @typedef {!Array\x3cstring|goog.uri.utils.QueryValue\x3e}\n */\ngoog.uri.utils.QueryArray;\n\n\n/**\n * Parses encoded query parameters and calls callback function for every\n * parameter found in the string.\n *\n * Missing value of parameter (e.g. \u201c\u2026\x26key\x26\u2026\u201d) is treated as if the value was an\n * empty string.  Keys may be empty strings (e.g. \u201c\u2026\x26\x3dvalue\x26\u2026\u201d) which also means\n * that \u201c\u2026\x26\x3d\x26\u2026\u201d and \u201c\u2026\x26\x26\u2026\u201d will result in an empty key and value.\n *\n * @param {string} encodedQuery Encoded query string excluding question mark at\n *     the beginning.\n * @param {function(string, string)} callback Function called for every\n *     parameter found in query string.  The first argument (name) will not be\n *     urldecoded (so the function is consistent with buildQueryData), but the\n *     second will.  If the parameter has no value (i.e. \u201c\x3d\u201d was not present)\n *     the second argument (value) will be an empty string.\n */\ngoog.uri.utils.parseQueryData \x3d function(encodedQuery, callback) {\n  if (!encodedQuery) {\n    return;\n  }\n  var pairs \x3d encodedQuery.split(\x27\x26\x27);\n  for (var i \x3d 0; i \x3c pairs.length; i++) {\n    var indexOfEquals \x3d pairs[i].indexOf(\x27\x3d\x27);\n    var name \x3d null;\n    var value \x3d null;\n    if (indexOfEquals \x3e\x3d 0) {\n      name \x3d pairs[i].substring(0, indexOfEquals);\n      value \x3d pairs[i].substring(indexOfEquals + 1);\n    } else {\n      name \x3d pairs[i];\n    }\n    callback(name, value ? goog.string.urlDecode(value) : \x27\x27);\n  }\n};\n\n\n/**\n * Split the URI into 3 parts where the [1] is the queryData without a leading\n * \x27?\x27. For example, the URI http://foo.com/bar?a\x3db#abc returns\n * [\x27http://foo.com/bar\x27,\x27a\x3db\x27,\x27#abc\x27].\n * @param {string} uri The URI to parse.\n * @return {!Array\x3cstring\x3e} An array representation of uri of length 3 where the\n *     middle value is the queryData without a leading \x27?\x27.\n * @private\n */\ngoog.uri.utils.splitQueryData_ \x3d function(uri) {\n  // Find the query data and and hash.\n  var hashIndex \x3d uri.indexOf(\x27#\x27);\n  if (hashIndex \x3c 0) {\n    hashIndex \x3d uri.length;\n  }\n  var questionIndex \x3d uri.indexOf(\x27?\x27);\n  var queryData;\n  if (questionIndex \x3c 0 || questionIndex \x3e hashIndex) {\n    questionIndex \x3d hashIndex;\n    queryData \x3d \x27\x27;\n  } else {\n    queryData \x3d uri.substring(questionIndex + 1, hashIndex);\n  }\n  return [uri.substr(0, questionIndex), queryData, uri.substr(hashIndex)];\n};\n\n\n/**\n * Join an array created by splitQueryData_ back into a URI.\n * @param {!Array\x3cstring\x3e} parts A URI in the form generated by splitQueryData_.\n * @return {string} The joined URI.\n * @private\n */\ngoog.uri.utils.joinQueryData_ \x3d function(parts) {\n  return parts[0] + (parts[1] ? \x27?\x27 + parts[1] : \x27\x27) + parts[2];\n};\n\n\n/**\n * @param {string} queryData\n * @param {string} newData\n * @return {string}\n * @private\n */\ngoog.uri.utils.appendQueryData_ \x3d function(queryData, newData) {\n  if (!newData) {\n    return queryData;\n  }\n  return queryData ? queryData + \x27\x26\x27 + newData : newData;\n};\n\n\n/**\n * @param {string} uri\n * @param {string} queryData\n * @return {string}\n * @private\n */\ngoog.uri.utils.appendQueryDataToUri_ \x3d function(uri, queryData) {\n  if (!queryData) {\n    return uri;\n  }\n  var parts \x3d goog.uri.utils.splitQueryData_(uri);\n  parts[1] \x3d goog.uri.utils.appendQueryData_(parts[1], queryData);\n  return goog.uri.utils.joinQueryData_(parts);\n};\n\n\n/**\n * Appends key\x3dvalue pairs to an array, supporting multi-valued objects.\n * @param {*} key The key prefix.\n * @param {goog.uri.utils.QueryValue} value The value to serialize.\n * @param {!Array\x3cstring\x3e} pairs The array to which the \x27key\x3dvalue\x27 strings\n *     should be appended.\n * @private\n */\ngoog.uri.utils.appendKeyValuePairs_ \x3d function(key, value, pairs) {\n  goog.asserts.assertString(key);\n  if (goog.isArray(value)) {\n    // Convince the compiler it\x27s an array.\n    goog.asserts.assertArray(value);\n    for (var j \x3d 0; j \x3c value.length; j++) {\n      // Convert to string explicitly, to short circuit the null and array\n      // logic in this function -- this ensures that null and undefined get\n      // written as literal \x27null\x27 and \x27undefined\x27, and arrays don\x27t get\n      // expanded out but instead encoded in the default way.\n      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);\n    }\n  } else if (value !\x3d null) {\n    // Skip a top-level null or undefined entirely.\n    pairs.push(\n        key +\n        // Check for empty string. Zero gets encoded into the url as literal\n        // strings.  For empty string, skip the equal sign, to be consistent\n        // with UriBuilder.java.\n        (value \x3d\x3d\x3d \x27\x27 ? \x27\x27 : \x27\x3d\x27 + goog.string.urlEncode(value)));\n  }\n};\n\n\n/**\n * Builds a query data string from a sequence of alternating keys and values.\n * Currently generates \x22\x26key\x26\x22 for empty args.\n *\n * @param {!IArrayLike\x3cstring|goog.uri.utils.QueryValue\x3e} keysAndValues\n *     Alternating keys and values. See the QueryArray typedef.\n * @param {number\x3d} opt_startIndex A start offset into the arary, defaults to 0.\n * @return {string} The encoded query string, in the form \x27a\x3d1\x26b\x3d2\x27.\n */\ngoog.uri.utils.buildQueryData \x3d function(keysAndValues, opt_startIndex) {\n  goog.asserts.assert(\n      Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 \x3d\x3d 0,\n      \x27goog.uri.utils: Key/value lists must be even in length.\x27);\n\n  var params \x3d [];\n  for (var i \x3d opt_startIndex || 0; i \x3c keysAndValues.length; i +\x3d 2) {\n    var key \x3d /** @type {string} */ (keysAndValues[i]);\n    goog.uri.utils.appendKeyValuePairs_(key, keysAndValues[i + 1], params);\n  }\n  return params.join(\x27\x26\x27);\n};\n\n\n/**\n * Builds a query data string from a map.\n * Currently generates \x22\x26key\x26\x22 for empty args.\n *\n * @param {!Object\x3cstring, goog.uri.utils.QueryValue\x3e} map An object where keys\n *     are URI-encoded parameter keys, and the values are arbitrary types\n *     or arrays. Keys with a null value are dropped.\n * @return {string} The encoded query string, in the form \x27a\x3d1\x26b\x3d2\x27.\n */\ngoog.uri.utils.buildQueryDataFromMap \x3d function(map) {\n  var params \x3d [];\n  for (var key in map) {\n    goog.uri.utils.appendKeyValuePairs_(key, map[key], params);\n  }\n  return params.join(\x27\x26\x27);\n};\n\n\n/**\n * Appends URI parameters to an existing URI.\n *\n * The variable arguments may contain alternating keys and values.  Keys are\n * assumed to be already URI encoded.  The values should not be URI-encoded,\n * and will instead be encoded by this function.\n * \x3cpre\x3e\n * appendParams(\x27http://www.foo.com?existing\x3dtrue\x27,\n *     \x27key1\x27, \x27value1\x27,\n *     \x27key2\x27, \x27value?willBeEncoded\x27,\n *     \x27key3\x27, [\x27valueA\x27, \x27valueB\x27, \x27valueC\x27],\n *     \x27key4\x27, null);\n * result: \x27http://www.foo.com?existing\x3dtrue\x26\x27 +\n *     \x27key1\x3dvalue1\x26\x27 +\n *     \x27key2\x3dvalue%3FwillBeEncoded\x26\x27 +\n *     \x27key3\x3dvalueA\x26key3\x3dvalueB\x26key3\x3dvalueC\x27\n * \x3c/pre\x3e\n *\n * A single call to this function will not exhibit quadratic behavior in IE,\n * whereas multiple repeated calls may, although the effect is limited by\n * fact that URL\x27s generally can\x27t exceed 2kb.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {...(goog.uri.utils.QueryArray|goog.uri.utils.QueryValue)}\n * var_args\n *     An array or argument list conforming to goog.uri.utils.QueryArray.\n * @return {string} The URI with all query parameters added.\n */\ngoog.uri.utils.appendParams \x3d function(uri, var_args) {\n  var queryData \x3d arguments.length \x3d\x3d 2 ?\n      goog.uri.utils.buildQueryData(arguments[1], 0) :\n      goog.uri.utils.buildQueryData(arguments, 1);\n  return goog.uri.utils.appendQueryDataToUri_(uri, queryData);\n};\n\n\n/**\n * Appends query parameters from a map.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object\x3cgoog.uri.utils.QueryValue\x3e} map An object where keys are\n *     URI-encoded parameter keys, and the values are arbitrary types or arrays.\n *     Keys with a null value are dropped.\n * @return {string} The new parameters.\n */\ngoog.uri.utils.appendParamsFromMap \x3d function(uri, map) {\n  var queryData \x3d goog.uri.utils.buildQueryDataFromMap(map);\n  return goog.uri.utils.appendQueryDataToUri_(uri, queryData);\n};\n\n\n/**\n * Appends a single URI parameter.\n *\n * Repeated calls to this can exhibit quadratic behavior in IE6 due to the\n * way string append works, though it should be limited given the 2kb limit.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {string} key The key, which must already be URI encoded.\n * @param {*\x3d} opt_value The value, which will be stringized and encoded\n *     (assumed not already to be encoded).  If omitted, undefined, or null, the\n *     key will be added as a valueless parameter.\n * @return {string} The URI with the query parameter added.\n */\ngoog.uri.utils.appendParam \x3d function(uri, key, opt_value) {\n  var value \x3d goog.isDefAndNotNull(opt_value) ?\n      \x27\x3d\x27 + goog.string.urlEncode(opt_value) :\n      \x27\x27;\n  return goog.uri.utils.appendQueryDataToUri_(uri, key + value);\n};\n\n\n/**\n * Finds the next instance of a query parameter with the specified name.\n *\n * Does not instantiate any objects.\n *\n * @param {string} uri The URI to search.  May contain a fragment identifier\n *     if opt_hashIndex is specified.\n * @param {number} startIndex The index to begin searching for the key at.  A\n *     match may be found even if this is one character after the ampersand.\n * @param {string} keyEncoded The URI-encoded key.\n * @param {number} hashOrEndIndex Index to stop looking at.  If a hash\n *     mark is present, it should be its index, otherwise it should be the\n *     length of the string.\n * @return {number} The position of the first character in the key\x27s name,\n *     immediately after either a question mark or a dot.\n * @private\n */\ngoog.uri.utils.findParam_ \x3d function(\n    uri, startIndex, keyEncoded, hashOrEndIndex) {\n  var index \x3d startIndex;\n  var keyLength \x3d keyEncoded.length;\n\n  // Search for the key itself and post-filter for surronuding punctuation,\n  // rather than expensively building a regexp.\n  while ((index \x3d uri.indexOf(keyEncoded, index)) \x3e\x3d 0 \x26\x26\n         index \x3c hashOrEndIndex) {\n    var precedingChar \x3d uri.charCodeAt(index - 1);\n    // Ensure that the preceding character is \x27\x26\x27 or \x27?\x27.\n    if (precedingChar \x3d\x3d goog.uri.utils.CharCode_.AMPERSAND ||\n        precedingChar \x3d\x3d goog.uri.utils.CharCode_.QUESTION) {\n      // Ensure the following character is \x27\x26\x27, \x27\x3d\x27, \x27#\x27, or NaN\n      // (end of string).\n      var followingChar \x3d uri.charCodeAt(index + keyLength);\n      if (!followingChar || followingChar \x3d\x3d goog.uri.utils.CharCode_.EQUAL ||\n          followingChar \x3d\x3d goog.uri.utils.CharCode_.AMPERSAND ||\n          followingChar \x3d\x3d goog.uri.utils.CharCode_.HASH) {\n        return index;\n      }\n    }\n    index +\x3d keyLength + 1;\n  }\n\n  return -1;\n};\n\n\n/**\n * Regular expression for finding a hash mark or end of string.\n * @type {RegExp}\n * @private\n */\ngoog.uri.utils.hashOrEndRe_ \x3d /#|$/;\n\n\n/**\n * Determines if the URI contains a specific key.\n *\n * Performs no object instantiations.\n *\n * @param {string} uri The URI to process.  May contain a fragment\n *     identifier.\n * @param {string} keyEncoded The URI-encoded key.  Case-sensitive.\n * @return {boolean} Whether the key is present.\n */\ngoog.uri.utils.hasParam \x3d function(uri, keyEncoded) {\n  return goog.uri.utils.findParam_(\n             uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) \x3e\x3d 0;\n};\n\n\n/**\n * Gets the first value of a query parameter.\n * @param {string} uri The URI to process.  May contain a fragment.\n * @param {string} keyEncoded The URI-encoded key.  Case-sensitive.\n * @return {?string} The first value of the parameter (URI-decoded), or null\n *     if the parameter is not found.\n */\ngoog.uri.utils.getParamValue \x3d function(uri, keyEncoded) {\n  var hashOrEndIndex \x3d uri.search(goog.uri.utils.hashOrEndRe_);\n  var foundIndex \x3d\n      goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);\n\n  if (foundIndex \x3c 0) {\n    return null;\n  } else {\n    var endPosition \x3d uri.indexOf(\x27\x26\x27, foundIndex);\n    if (endPosition \x3c 0 || endPosition \x3e hashOrEndIndex) {\n      endPosition \x3d hashOrEndIndex;\n    }\n    // Progress forth to the end of the \x22key\x3d\x22 or \x22key\x26\x22 substring.\n    foundIndex +\x3d keyEncoded.length + 1;\n    // Use substr, because it (unlike substring) will return empty string\n    // if foundIndex \x3e endPosition.\n    return goog.string.urlDecode(\n        uri.substr(foundIndex, endPosition - foundIndex));\n  }\n};\n\n\n/**\n * Gets all values of a query parameter.\n * @param {string} uri The URI to process.  May contain a fragment.\n * @param {string} keyEncoded The URI-encoded key.  Case-sensitive.\n * @return {!Array\x3cstring\x3e} All URI-decoded values with the given key.\n *     If the key is not found, this will have length 0, but never be null.\n */\ngoog.uri.utils.getParamValues \x3d function(uri, keyEncoded) {\n  var hashOrEndIndex \x3d uri.search(goog.uri.utils.hashOrEndRe_);\n  var position \x3d 0;\n  var foundIndex;\n  var result \x3d [];\n\n  while ((foundIndex \x3d goog.uri.utils.findParam_(\n              uri, position, keyEncoded, hashOrEndIndex)) \x3e\x3d 0) {\n    // Find where this parameter ends, either the \x27\x26\x27 or the end of the\n    // query parameters.\n    position \x3d uri.indexOf(\x27\x26\x27, foundIndex);\n    if (position \x3c 0 || position \x3e hashOrEndIndex) {\n      position \x3d hashOrEndIndex;\n    }\n\n    // Progress forth to the end of the \x22key\x3d\x22 or \x22key\x26\x22 substring.\n    foundIndex +\x3d keyEncoded.length + 1;\n    // Use substr, because it (unlike substring) will return empty string\n    // if foundIndex \x3e position.\n    result.push(\n        goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));\n  }\n\n  return result;\n};\n\n\n/**\n * Regexp to find trailing question marks and ampersands.\n * @type {RegExp}\n * @private\n */\ngoog.uri.utils.trailingQueryPunctuationRe_ \x3d /[?\x26]($|#)/;\n\n\n/**\n * Removes all instances of a query parameter.\n * @param {string} uri The URI to process.  Must not contain a fragment.\n * @param {string} keyEncoded The URI-encoded key.\n * @return {string} The URI with all instances of the parameter removed.\n */\ngoog.uri.utils.removeParam \x3d function(uri, keyEncoded) {\n  var hashOrEndIndex \x3d uri.search(goog.uri.utils.hashOrEndRe_);\n  var position \x3d 0;\n  var foundIndex;\n  var buffer \x3d [];\n\n  // Look for a query parameter.\n  while ((foundIndex \x3d goog.uri.utils.findParam_(\n              uri, position, keyEncoded, hashOrEndIndex)) \x3e\x3d 0) {\n    // Get the portion of the query string up to, but not including, the ?\n    // or \x26 starting the parameter.\n    buffer.push(uri.substring(position, foundIndex));\n    // Progress to immediately after the \x27\x26\x27.  If not found, go to the end.\n    // Avoid including the hash mark.\n    position \x3d Math.min(\n        (uri.indexOf(\x27\x26\x27, foundIndex) + 1) || hashOrEndIndex, hashOrEndIndex);\n  }\n\n  // Append everything that is remaining.\n  buffer.push(uri.substr(position));\n\n  // Join the buffer, and remove trailing punctuation that remains.\n  return buffer.join(\x27\x27).replace(\n      goog.uri.utils.trailingQueryPunctuationRe_, \x27$1\x27);\n};\n\n\n/**\n * Replaces all existing definitions of a parameter with a single definition.\n *\n * Repeated calls to this can exhibit quadratic behavior due to the need to\n * find existing instances and reconstruct the string, though it should be\n * limited given the 2kb limit.  Consider using appendParams or setParamsFromMap\n * to update multiple parameters in bulk.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {string} keyEncoded The key, which must already be URI encoded.\n * @param {*} value The value, which will be stringized and encoded (assumed\n *     not already to be encoded).\n * @return {string} The URI with the query parameter added.\n */\ngoog.uri.utils.setParam \x3d function(uri, keyEncoded, value) {\n  return goog.uri.utils.appendParam(\n      goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);\n};\n\n\n/**\n * Effeciently set or remove multiple query parameters in a URI. Order of\n * unchanged parameters will not be modified, all updated parameters will be\n * appended to the end of the query. Params with values of null or undefined are\n * removed.\n *\n * @param {string} uri The URI to process.\n * @param {!Object\x3cstring, goog.uri.utils.QueryValue\x3e} params A list of\n *     parameters to update. If null or undefined, the param will be removed.\n * @return {string} An updated URI where the query data has been updated with\n *     the params.\n */\ngoog.uri.utils.setParamsFromMap \x3d function(uri, params) {\n  var parts \x3d goog.uri.utils.splitQueryData_(uri);\n  var queryData \x3d parts[1];\n  var buffer \x3d [];\n  if (queryData) {\n    goog.array.forEach(queryData.split(\x27\x26\x27), function(pair) {\n      var indexOfEquals \x3d pair.indexOf(\x27\x3d\x27);\n      var name \x3d indexOfEquals \x3e\x3d 0 ? pair.substr(0, indexOfEquals) : pair;\n      if (!params.hasOwnProperty(name)) {\n        buffer.push(pair);\n      }\n    });\n  }\n  parts[1] \x3d goog.uri.utils.appendQueryData_(\n      buffer.join(\x27\x26\x27), goog.uri.utils.buildQueryDataFromMap(params));\n  return goog.uri.utils.joinQueryData_(parts);\n};\n\n\n/**\n * Generates a URI path using a given URI and a path with checks to\n * prevent consecutive \x22//\x22. The baseUri passed in must not contain\n * query or fragment identifiers. The path to append may not contain query or\n * fragment identifiers.\n *\n * @param {string} baseUri URI to use as the base.\n * @param {string} path Path to append.\n * @return {string} Updated URI.\n */\ngoog.uri.utils.appendPath \x3d function(baseUri, path) {\n  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);\n\n  // Remove any trailing \x27/\x27\n  if (goog.string.endsWith(baseUri, \x27/\x27)) {\n    baseUri \x3d baseUri.substr(0, baseUri.length - 1);\n  }\n  // Remove any leading \x27/\x27\n  if (goog.string.startsWith(path, \x27/\x27)) {\n    path \x3d path.substr(1);\n  }\n  return goog.string.buildString(baseUri, \x27/\x27, path);\n};\n\n\n/**\n * Replaces the path.\n * @param {string} uri URI to use as the base.\n * @param {string} path New path.\n * @return {string} Updated URI.\n */\ngoog.uri.utils.setPath \x3d function(uri, path) {\n  // Add any missing \x27/\x27.\n  if (!goog.string.startsWith(path, \x27/\x27)) {\n    path \x3d \x27/\x27 + path;\n  }\n  var parts \x3d goog.uri.utils.split(uri);\n  return goog.uri.utils.buildFromEncodedParts(\n      parts[goog.uri.utils.ComponentIndex.SCHEME],\n      parts[goog.uri.utils.ComponentIndex.USER_INFO],\n      parts[goog.uri.utils.ComponentIndex.DOMAIN],\n      parts[goog.uri.utils.ComponentIndex.PORT], path,\n      parts[goog.uri.utils.ComponentIndex.QUERY_DATA],\n      parts[goog.uri.utils.ComponentIndex.FRAGMENT]);\n};\n\n\n/**\n * Standard supported query parameters.\n * @enum {string}\n */\ngoog.uri.utils.StandardQueryParam \x3d {\n\n  /** Unused parameter for unique-ifying. */\n  RANDOM: \x27zx\x27\n};\n\n\n/**\n * Sets the zx parameter of a URI to a random value.\n * @param {string} uri Any URI.\n * @return {string} That URI with the \x22zx\x22 parameter added or replaced to\n *     contain a random string.\n */\ngoog.uri.utils.makeUnique \x3d function(uri) {\n  return goog.uri.utils.setParam(\n      uri, goog.uri.utils.StandardQueryParam.RANDOM,\n      goog.string.getRandomString());\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/uri/utils.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/urls/ordered_multimap.js";
goog.loadModule("goog.module(\x27urls.OrderedMultimap\x27);\n\nconst googArray \x3d goog.require(\x27goog.array\x27);\n\n/**\n * A OrderedMultimap implementation that mirrors the native URLSearchParams.\n * @implements {Iterable\x3c!Array\x3cstring\x3e\x3e}\n */\nclass OrderedMultimap {\n  /**\n   * @param {!Array\x3c!Array\x3cstring\x3e\x3e\x3d} entries An array of [key, value] to\n   *     initialize the OrderedMultimap with.\n   */\n  constructor(entries \x3d []) {\n    /** @private @const {!Map\x3cstring, !Array\x3cstring\x3e\x3e} */\n    this.map_ \x3d new Map();\n\n    /** @private {!Array\x3cstring\x3e} */\n    this.keys_ \x3d [];\n\n    for (const [key, value] of entries) {\n      this.append(key, value);\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @return {string|undefined}\n   */\n  get(key) {\n    return this.getAll(key)[0];\n  }\n\n  /**\n   * @param {string} key\n   * @return {!Array\x3cstring\x3e}\n   */\n  getAll(key) {\n    return this.map_.get(key) || [];\n  }\n\n  /**\n   * Sets the first value if the key is present and removes all other values.\n   * @param {string} key\n   * @param {string} value\n   */\n  set(key, value) {\n    if (!this.has(key)) {\n      this.append(key, value);\n      return;\n    }\n    this.map_.set(key, [value]);\n    // Filter out duplicates for the given key.\n    let first \x3d true;\n    this.keys_ \x3d googArray.filter(this.keys_, (k) \x3d\x3e {\n      if (k \x3d\x3d key) {\n        if (first) {\n          first \x3d false;\n        } else {\n          return false;\n        }\n      }\n      return true;\n    });\n  }\n\n  /**\n   * @param {string} key\n   * @param {string} value\n   */\n  append(key, value) {\n    this.keys_.push(key);\n    const values \x3d this.getAll(key);\n    values.push(value);\n    this.map_.set(key, values);\n  }\n\n  /**\n   * @param {string} key\n   * @return {boolean}\n   */\n  has(key) {\n    return this.map_.has(key);\n  }\n\n  /**\n   * @param {string} key\n   */\n  delete(key) {\n    this.map_.delete(key);\n    this.keys_ \x3d googArray.filter(this.keys_, (k) \x3d\x3e k !\x3d key);\n  }\n\n  /**\n   * @return {number}\n   */\n  size() {\n    return this.keys_.length;\n  }\n\n  /**\n   * @return {!Iterable\x3cstring\x3e}\n   */\n  keys() {\n    return this.keys_;\n  }\n\n  /**\n   * @return {!Iterator\x3c!Array\x3cstring\x3e\x3e}\n   */\n  [Symbol.iterator]() {\n    /**\n     * NOTE(twilkinson): We don\x27t use a generator because the polyfill is\n     * expensive.\n     * @type {!Array\x3c!Array\x3cstring\x3e\x3e}\n     */\n    const entriesArr \x3d [];\n    const indexes \x3d new Map();\n    for (const key of this.keys()) {\n      const values \x3d this.getAll(key);\n      // Keep an index so that if the key iterator has repetitions the next\n      // repetition will get the next value.\n      const index \x3d indexes.get(key) || 0;\n      indexes.set(key, index + 1);\n      entriesArr.push([key, /** @type {string} */ (values[index])]);\n    }\n    return /** @type {!Iterable\x3c!Array\x3cstring\x3e\x3e} */ (\n        entriesArr)[Symbol.iterator]();\n  }\n}\n\nexports \x3d OrderedMultimap;\n\n//# sourceURL\x3dhttps://qs/javascript/urls/ordered_multimap.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/urls/list_parser.js";
goog.loadModule("goog.module(\x27urls.ListParser\x27);\n\n/**\n * A class that parses a string into an Array.\n */\nclass ListParser {\n  /**\n   * @param {string\x3d} delimeter\n   */\n  constructor(delimeter \x3d \x27\x26\x27) {\n    /** @private {string} */\n    this.delimeter_ \x3d delimeter;\n  }\n\n  /**\n   * @param {!Array\x3cstring\x3e} deserialized\n   * @return {string}\n   */\n  serialize(deserialized) {\n    return deserialized.join(this.delimeter_);\n  }\n\n  /**\n   * @param {string} serialized\n   * @return {!Array\x3cstring\x3e}\n   */\n  deserialize(serialized) {\n    if (!serialized) return [];\n    return serialized.split(this.delimeter_);\n  }\n}\n\nexports \x3d ListParser;\n\n//# sourceURL\x3dhttps://qs/javascript/urls/list_parser.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/urls/parameter_parser.js";
goog.loadModule("goog.module(\x27urls.ParameterParser\x27);\n\n/**\n * A class that parses a string into a key value pairing.\n */\nclass ParameterParser {\n  /**\n   * @param {string\x3d} setter\n   */\n  constructor(setter \x3d \x27\x3d\x27) {\n    /** @private {string} */\n    this.setter_ \x3d setter;\n  }\n\n  /**\n   * @param {{key: string, value: string}} deserialized\n   * @return {string}\n   */\n  serialize({key, value}) {\n    return key + this.setter_ + value;\n  }\n\n  /**\n   * @param {string} serialized\n   * @return {{key: string, value: string}}\n   */\n  deserialize(serialized) {\n    const splitParameter \x3d serialized.split(this.setter_);\n    return {\n      key: splitParameter.shift(),\n      value: splitParameter.join(this.setter_)\n    };\n  }\n}\n\nexports \x3d ParameterParser;\n\n//# sourceURL\x3dhttps://qs/javascript/urls/parameter_parser.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/urls/ordered_multimap_parser.js";
goog.loadModule("goog.module(\x27urls.OrderedMultimapParser\x27);\n\nconst ListParser \x3d goog.require(\x27urls.ListParser\x27);\nconst OrderedMultimap \x3d goog.require(\x27urls.OrderedMultimap\x27);\nconst ParameterParser \x3d goog.require(\x27urls.ParameterParser\x27);\n\n/**\n * A PartParser that deserializes a string of parameters of the form\n * \x27foo\x3d1\x26bar\x3d2\x26baz\x3d3\x27 into a OrderedMultimap with {foo: [\x271\x27], bar: [\x272\x27], baz:\n * [\x273\x27]}. No additional decoding of the values or keys is done. Unlike\n * MapParser the Map returns an array for each key, and if a key is repeated,\n * all values will be returned in the array.\n */\nclass OrderedMultimapParser {\n  /**\n   * @param {!ParameterParser\x3d} parameterParser\n   * @param {!ListParser\x3d} listParser\n   */\n  constructor(\n      parameterParser \x3d new ParameterParser(), listParser \x3d new ListParser()) {\n    /** @const @private {!ParameterParser} */\n    this.parameterParser_ \x3d parameterParser;\n\n    /** @const @private {!ListParser} */\n    this.listParser_ \x3d listParser;\n  }\n\n  /**\n   * Serializes a Map of parameters to a string.\n   * @param {!OrderedMultimap} deserialized\n   * @return {string}\n   */\n  serialize(deserialized) {\n    const parameters \x3d [];\n    for (const [key, value] of deserialized) {\n      parameters.push(this.parameterParser_.serialize({key, value}));\n    }\n    return this.listParser_.serialize(parameters);\n  }\n\n  /**\n   * Deserializes a string to a map of parameters. Returns both the\n   * @param {string} serialized\n   * @return {!OrderedMultimap}\n   */\n  deserialize(serialized) {\n    const parameters \x3d new OrderedMultimap();\n    for (const parameter of this.listParser_.deserialize(serialized)) {\n      const {key, value} \x3d this.parameterParser_.deserialize(parameter);\n      parameters.append(key, value);\n    }\n    return parameters;\n  }\n}\n\nexports \x3d OrderedMultimapParser;\n\n//# sourceURL\x3dhttps://qs/javascript/urls/ordered_multimap_parser.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/urls/url_params.js";
goog.loadModule("goog.module(\x27urls.UrlParams\x27);\n\nconst OrderedMultimap \x3d goog.require(\x27urls.OrderedMultimap\x27);\nconst OrderedMultimapParser \x3d goog.require(\x27urls.OrderedMultimapParser\x27);\nconst googArray \x3d goog.require(\x27goog.array\x27);\n\n/**\n * UrlParams parses and decodes a string parameter list, as appears in search\n * portion of the URL. Its API mirrors the URLSearchParams native API\n * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams with a few\n * omissions.\n * @implements {Iterable\x3c!Array\x3cstring\x3e\x3e}\n */\nclass UrlParams {\n  /**\n   * @param {string} value\n   * @param {!UrlParams.ValueDecoder} valueDecoder Decoder to call on every\n   *     value.\n   */\n  constructor(value, valueDecoder) {\n    /** @private @const */\n    this.orderedMultimapParser_ \x3d new OrderedMultimapParser();\n\n    /** @private @const */\n    this.valueDecoder_ \x3d valueDecoder;\n\n    /** @private {?string} */\n    this.value_;\n\n    /**\n     * Encoded params fully updates when setValue() is called and partially\n     * updates when toString() is called with the values that are currently\n     * in the unencoded params map. It also updates if delete() is called.\n     * It also keeps track of the keys, so when set() is called the key and\n     * an empty string are inserted into the map. This is safe as long as the\n     * unencodedParams_ map is always checked before getting the value from\n     * encodedParams_.\n     * @private {!OrderedMultimap}\n     */\n    this.encodedParams_;\n\n    /**\n     * Unencoded params is lazily populated on gets, sets, and deletes but will\n     * be fully populated if any of the value iterators (entries,\n     * [Symbol.iterator]) are used. It is cleared if setValue() is called.\n     * @private {!Map\x3cstring, !Array\x3cstring\x3e\x3e}\n     */\n    this.unencodedParams_;\n\n    this.setValue(value);\n  }\n\n  /**\n   * Sets the entirety of the UrlParams from a string.\n   * @param {string} value\n   */\n  setValue(value) {\n    this.value_ \x3d value;\n    this.encodedParams_ \x3d this.orderedMultimapParser_.deserialize(value);\n    this.unencodedParams_ \x3d new Map();\n  }\n\n  /**\n   * Returns the first value for the given key.\n   * @param {string} key\n   * @return {string|undefined}\n   */\n  get(key) {\n    return this.getAll(key)[0];\n  }\n\n  /**\n   * Returns all the values for a given key.\n   * @param {string} key\n   * @return {!Array\x3cstring\x3e}\n   */\n  getAll(key) {\n    let values;\n    if (!this.unencodedParams_.has(key) \x26\x26 this.encodedParams_.has(key)) {\n      values \x3d googArray.map(\n          this.encodedParams_.getAll(key),\n          (v) \x3d\x3e this.valueDecoder_.deserialize(v, key));\n      this.unencodedParams_.set(key, values);\n    } else {\n      values \x3d this.unencodedParams_.get(key);\n    }\n    return values || [];\n  }\n\n  /**\n   * If the key already exists in the UrlParams, it sets the first value and\n   * removes all others. Otherwise, it appends the key and value to the end.\n   * @param {string} key\n   * @param {string} value\n   */\n  set(key, value) {\n    this.value_ \x3d null;\n    this.unencodedParams_.set(key, [value]);\n    this.encodedParams_.set(key, this.valueDecoder_.serialize(value, key));\n  }\n\n  /**\n   * Appends a specified key/value pair as a new parameter.\n   * @param {string} key\n   * @param {string} value\n   */\n  append(key, value) {\n    this.value_ \x3d null;\n    const values \x3d this.unencodedParams_.get(key) || [];\n    values.push(value);\n    this.unencodedParams_.set(key, values);\n    this.encodedParams_.append(key, this.valueDecoder_.serialize(value, key));\n  }\n\n  /**\n   * @param {string} key\n   * @return {boolean}\n   */\n  has(key) {\n    return this.unencodedParams_.has(key) || this.encodedParams_.has(key);\n  }\n\n  /**\n   * @param {string} key\n   */\n  delete(key) {\n    this.value_ \x3d null;\n    this.unencodedParams_.delete(key);\n    this.encodedParams_.delete(key);\n  }\n\n  /**\n   * @return {number}\n   */\n  size() {\n    return this.encodedParams_.size();\n  }\n\n  /**\n   * @return {!Iterable\x3cstring\x3e}\n   */\n  keys() {\n    return this.encodedParams_.keys();\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    if (this.value_ !\x3d null) {\n      return this.value_;\n    }\n    return this.orderedMultimapParser_.serialize(this.encodedParams_);\n  }\n\n  /**\n   * @return {!Iterator\x3c!Array\x3cstring\x3e\x3e}\n   */\n  [Symbol.iterator]() {\n    /**\n     * NOTE(twilkinson): We don\x27t use a generator because the polyfill is\n     * expensive.\n     * @type {!Array\x3c!Array\x3cstring\x3e\x3e}\n     */\n    const entriesArr \x3d [];\n    const indexes \x3d new Map();\n    for (const key of this.keys()) {\n      const values \x3d this.getAll(key);\n      // Keep an index so that if the key iterator has repetitions the next\n      // repetition will get the next value.\n      const index \x3d indexes.get(key) || 0;\n      indexes.set(key, index + 1);\n      entriesArr.push([key, values[index]]);\n    }\n    return /** @type {!Iterator\x3c!Array\x3cstring\x3e\x3e} */ (\n        entriesArr)[Symbol.iterator]();\n  }\n}\n\n/**\n * @record\n */\nclass ValueDecoder {\n  /**\n   * @param {string} value Decoded value.\n   * @param {string} key Parameter key.\n   * @return {string} Encoded value.\n   */\n  serialize(value, key) {}\n\n  /**\n   * @param {string} value Encoded value.\n   * @param {string} key Parameter key.\n   * @return {string} Decoded value.\n   */\n  deserialize(value, key) {}\n}\n\n/** @record */\nUrlParams.ValueDecoder \x3d ValueDecoder;\n\nexports \x3d UrlParams;\n\n//# sourceURL\x3dhttps://qs/javascript/urls/url_params.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/urls/compatibility_url_params.js";
goog.loadModule("/**\n * @fileoverview A version of UrlParams that allows Url to be compatible with\n * non-ES5 browsers. This basically allows us to get getter/setter like behavior\n * by calling callbacks before reading state and after writing state.\n */\ngoog.module(\x27urls.CompatibilityUrlParams\x27);\n\nconst UrlParams \x3d goog.require(\x27urls.UrlParams\x27);\n\nlet constructing \x3d false;\n\nclass CompatibilityUrlParams extends UrlParams {\n  /**\n   * @param {string} value\n   * @param {!UrlParams.ValueDecoder} valueDecoder Decoder to call on every\n   *     value.\n   * @param {function()} getValue\n   * @param {function()} setValue\n   */\n  constructor(value, valueDecoder, getValue, setValue) {\n    constructing \x3d true;\n    super(value, valueDecoder);\n    constructing \x3d false;\n\n    /** @private @const {function()} */\n    this.getValueCb_ \x3d getValue;\n\n    /** @private @const {function()} */\n    this.setValueCb_ \x3d setValue;\n\n    /** @private {boolean} */\n    this.internalCall_ \x3d false;\n  }\n\n  /**\n   * Updates the value this represents\n   * @private\n   */\n  getValue_() {\n    if (this.internalCall_) return;\n    this.internalCall_ \x3d true;\n    this.getValueCb_();\n    this.internalCall_ \x3d false;\n  }\n\n  /**\n   * Sets the value this represents.\n   * @private\n   */\n  setValue_() {\n    if (this.internalCall_) return;\n    this.internalCall_ \x3d true;\n    this.setValueCb_();\n    this.internalCall_ \x3d false;\n  }\n\n  /** @override */\n  setValue(value) {\n    super.setValue(value);\n    if (constructing) return;\n    this.setValue_();\n  }\n\n  /** @override */\n  get(key) {\n    this.getValue_();\n    return super.get(key);\n  }\n\n  /** @override */\n  getAll(key) {\n    this.getValue_();\n    return super.getAll(key);\n  }\n\n  /** @override */\n  set(key, value) {\n    this.getValue_();\n    super.set(key, value);\n    this.setValue_();\n  }\n\n  /** @override */\n  append(key, value) {\n    this.getValue_();\n    super.append(key, value);\n    this.setValue_();\n  }\n\n  /** @override */\n  has(key) {\n    this.getValue_();\n    return super.has(key);\n  }\n\n  /** @override */\n  delete(key) {\n    this.getValue_();\n    super.delete(key);\n    this.setValue_();\n  }\n\n  /** @override */\n  size() {\n    this.getValue_();\n    return super.size();\n  }\n\n  /** @override */\n  keys() {\n    this.getValue_();\n    return super.keys();\n  }\n\n  /** @override */\n  toString() {\n    this.getValue_();\n    return super.toString();\n  }\n\n  /** @override */\n  [Symbol.iterator]() {\n    this.getValue_();\n    return super[Symbol.iterator]();\n  }\n}\n\nexports \x3d CompatibilityUrlParams;\n\n//# sourceURL\x3dhttps://qs/javascript/urls/compatibility_url_params.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/urls/url_component_parsers.js";
goog.loadModule("goog.module(\x27urls.urlComponentParsers\x27);\n\nconst generic \x3d {\n  /** @type {function(string): string} */\n  serialize: encodeURIComponent,\n  /** @type {function(string): string} */\n  deserialize: (serialized) \x3d\x3e {\n    // NOTE(twilkinson) We decode \x27+\x27 to \x27 \x27 unconditionally for a really good\n    // reason, so preserve this behavior. Don\x27t be like me. Don\x27t spend hours\n    // debugging bizarre failing tests. GWS, it turns out, encodes any and all\n    // spaces as \x27+\x27 in its utility function to encode URLs, and does the\n    // opposite when encoding. So if a \x27+\x27 exists in the URL it was absolutely\n    // intended to be there, probably by GWS. When we re-encode this, we\x27ll\n    // convert it to a %20 rather than a %2B but it doesn\x27t matter since GWS\n    // knows how to read %20 into space. If this ever changes, please update\n    // to only decode \x27+\x27 for form params. For proof from 2009:\n    // https://cs.corp.google.com/piper///depot/google3/webutil/url/url.cc?rcl\x3d147422844\x26l\x3d5645\n    return decodeURIComponent(serialized.replace(/\\+/g, \x27%20\x27));\n  },\n};\n\n/**\n * A string of characters which are left unencoded when being serialized as part\n * of a parameter value inside the querystring or hash of a URL. The characters\n * chosen are reserved characters that have no special purpose inside either the\n * querystring or hash, or are characters which are not encoded by browsers.\n * Reserved chars with a special purpose inside the querystring or hash: \x26\x3d+?\n * Reserved chars with no special purpose inside the querystring/hash: $,/:;?@[]\n * Note: !*\x27() also have no special purpose, but are not encoded by\n *     encodeURIComponent.\n *     (see https://bugzilla.mozilla.org/show_bug.cgi?id\x3d1152455#c6)\n * @type {string}\n */\nconst DATA_CHARS_LEFT_UNENCODED \x3d \x27$,/:;?@[]^`{|}\x27;\n\n/**\n * A string of characters which are left unencoded when being serialized as part\n * of a path. This is similar to the querystring parameters but has a few extra\n * allowances and does not allow the \x27?\x27 to appear which would terminate the\n * path early.\n *\n * There isn\x27t a whole lot of reason to have strange characters in the path,\n * but we allow it anyways.\n */\nconst PATH_CHARS_LEFT_UNENCODED \x3d \x27\x3d\x26$,/:;@[]^`{|}\x27;\n\n/**\n * @param {string} unencoded\n * @return {!RegExp}\n */\nfunction getRe(unencoded) {\n  return new RegExp(\n      `%(?:${encodeURIComponent(unencoded).substr(1).replace(/%/g, \x27|\x27)})`,\n      \x27g\x27);\n}\n\n/**\n * Regular expression that matches the encoded version of all characters that\n * should be left unencoded for data component.\n * @type {!RegExp}\n */\nconst DATA_CHARS_LEFT_UNENCODED_RE \x3d getRe(DATA_CHARS_LEFT_UNENCODED);\n\n/**\n * Regular expression that matches the encoded version of all characters that\n * should be left unencoded for path component.\n * @type {!RegExp}\n */\nconst PATH_CHARS_LEFT_UNENCODED_RE \x3d getRe(PATH_CHARS_LEFT_UNENCODED);\n\nconst dataValue \x3d {\n  /** @type {function(string): string} */\n  serialize: (deserialized) \x3d\x3e {\n    return generic.serialize(deserialized)\n        .replace(DATA_CHARS_LEFT_UNENCODED_RE, decodeURIComponent);\n  },\n  /** @type {function(string): string} */\n  deserialize: generic.deserialize,\n};\n\n/**\n * A PartParser conforming object that does the normal dataValue serialization\n * in addition to serializing spaces to \x27+\x27.\n */\nconst formDataValue \x3d {\n  /** @type {function(string): string} */\n  serialize: (deserialized) \x3d\x3e deserialized.replace(/%20/g, \x27+\x27),\n  /** @type {function(string): string} */\n  deserialize: (serialized) \x3d\x3e serialized.replace(\x27+\x27, \x27%20\x27),\n};\n\nconst path \x3d {\n  /** @type {function(string): string} */\n  serialize: (deserialized) \x3d\x3e {\n    return generic.serialize(deserialized)\n        .replace(PATH_CHARS_LEFT_UNENCODED_RE, decodeURIComponent);\n  },\n  /** @type {function(string): string} */\n  deserialize: generic.deserialize,\n};\n\n\nexports \x3d {\n  generic,\n  dataValue,\n  formDataValue,\n  path,\n};\n\n//# sourceURL\x3dhttps://qs/javascript/urls/url_component_parsers.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/urls/url.js";
goog.loadModule("/**\n * @fileoverview This file is an adapter and a polyfill for the URL API\n * (https://developer.mozilla.org/en-US/docs/Web/API/URL).\n */\n\ngoog.module(\x27urls.Url\x27);\n\nconst CompatibilityUrlParams \x3d goog.require(\x27urls.CompatibilityUrlParams\x27);\nconst UrlParams \x3d goog.require(\x27urls.UrlParams\x27);\nconst uriUtils \x3d goog.require(\x27goog.uri.utils\x27);\nconst {dataValue: dataValueParser} \x3d goog.require(\x27urls.urlComponentParsers\x27);\n\nclass Url {\n  /**\n   * @param {string} url\n   * @param {{\n   *     searchValueDecoder: !UrlParams.ValueDecoder,\n   * }\x3d} options\n   */\n  constructor(url, {searchValueDecoder \x3d dataValueParser} \x3d {}) {\n    const pieces \x3d uriUtils.split(url);\n    const scheme \x3d pieces[uriUtils.ComponentIndex.SCHEME] || \x27\x27;\n    /** @type {string} */\n    this.protocol \x3d scheme + (scheme ? \x27:\x27 : \x27\x27);\n\n    const userInfo \x3d pieces[uriUtils.ComponentIndex.USER_INFO] || \x27\x27;\n    const userInfoSplit \x3d userInfo.split(\x27:\x27);\n    /** @type {string} */\n    this.username \x3d userInfoSplit.shift() || \x27\x27;\n    /** @type {string} */\n    this.password \x3d userInfoSplit.join(\x27:\x27);\n\n    /** @type {string} */\n    this.hostname \x3d pieces[uriUtils.ComponentIndex.DOMAIN] || \x27\x27;\n\n    /** @type {string} */\n    this.port \x3d pieces[uriUtils.ComponentIndex.PORT] || \x27\x27;\n\n    /** @type {string} */\n    this.pathname \x3d pieces[uriUtils.ComponentIndex.PATH] || \x27\x27;\n\n    const query \x3d pieces[uriUtils.ComponentIndex.QUERY_DATA] || \x27\x27;\n    /**\n     * Defined via Object.defineProperties below.\n     * @type {string}\n     */\n    this.search;\n\n    const fragment \x3d pieces[uriUtils.ComponentIndex.FRAGMENT] || \x27\x27;\n    /** @type {string} */\n    this.hash \x3d (fragment ? \x27#\x27 : \x27\x27) + fragment;\n\n    /**\n     * @type {!UrlParams}\n     */\n    this.searchParams \x3d new UrlParams(query, searchValueDecoder);\n\n    if (goog.isFunction(Object.defineProperties)) {\n      // Define a \x27search\x27 property that reflects the searchParams property.\n      Object.defineProperties(this, {\n        search: {\n          get: () \x3d\x3e this.getSearch_(),\n          set: (search) \x3d\x3e this.setSearch_(search),\n        },\n      });\n    } else {\n      this.search \x3d this.getSearch_();\n      this.searchParams \x3d new CompatibilityUrlParams(\n          query, searchValueDecoder,\n          () \x3d\x3e {\n            this.setSearch_(this.search);\n          },\n          () \x3d\x3e {\n            this.search \x3d this.getSearch_();\n          });\n    }\n  }\n\n  /**\n   * @return {string}\n   * @private\n   */\n  getSearch_() {\n    const query \x3d this.searchParams.toString();\n    return (query ? \x27?\x27 : \x27\x27) + query;\n  }\n\n  /**\n   * @param {string} search\n   * @private\n   */\n  setSearch_(search) {\n    if (search.length \x26\x26 search.charAt(0) \x3d\x3d \x27?\x27) {\n      search \x3d search.substr(1);\n    }\n    this.searchParams.setValue(search);\n  }\n\n  /**\n   * @param {boolean\x3d} relative\n   * @override\n   */\n  toString(relative \x3d false) {\n    const scheme \x3d\n        relative ? \x27\x27 : this.protocol.substr(0, this.protocol.length - 1);\n    const userInfo \x3d relative ?\n        \x27\x27 :\n        this.username + (this.password ? \x27:\x27 : \x27\x27) + this.password;\n    const query \x3d this.search.substr(1);\n    const fragment \x3d this.hash.substr(1);\n    return uriUtils.buildFromEncodedParts(\n        scheme, userInfo, relative ? \x27\x27 : this.hostname,\n        relative ? \x27\x27 : this.port, this.pathname, query, fragment);\n  }\n}\n\nexports \x3d Url;\n\n//# sourceURL\x3dhttps://qs/javascript/urls/url.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/transport/util.js";
goog.loadModule("goog.module(\x27search.log.transport.util\x27);\n\nconst Url \x3d goog.require(\x27urls.Url\x27);\n\n/**\n * Given a URL and additional query data, combine them together to return a new\n * URL. The query data are specified as a map of keys and values. Leaves the\n * provided url as is and encodes the query data.\n * @param {string} url\n * @param {!Map\x3cstring, string\x3e\x3d} data\n * @param {boolean\x3d} attachTimestamp Whether to attach current timestamp before\n *     parsing the data map.\n * @param {number\x3d} timestamp The timestamp to use if attachTimestamp is true.\n * @param {boolean\x3d} useLogSource Whether to append log source.\n * @return {string}\n */\nfunction getFullUrl(\n    url, data \x3d new Map(), attachTimestamp \x3d true, timestamp \x3d google.time(),\n    useLogSource \x3d true) {\n  if (attachTimestamp) {\n    data.set(\x27zx\x27, String(timestamp));\n  }\n  if (google.cshid) {\n    data.set(\x27cshid\x27, google.cshid);\n  }\n\n  url \x3d combineUrlAndMap(url, data);\n  // Append a different log source to requests if enabled. Currently used to\n  // set log source for:\n  // - MOMA as \x27\x26s\x3dcorp\x27\n  // - enterprise search as \x27\x26s\x3dentsearch\x27\n  // Used to separate logs from consumer logs.\n  // See http://b/13740104 and http://b/13737377.\n  // This field was added on the CommonJSProto in cl/69394190.\n  if (useLogSource \x26\x26 google.ls) {\n    url +\x3d google.ls;\n  }\n  return url;\n}\n\n/**\n * Combines url and data into a new uri encoded url. Assumes url param is\n * already uri encoded.\n * @param {string} url\n * @param {!Map\x3cstring, string\x3e} data\n * @return {string}\n */\nfunction combineUrlAndMap(url, data) {\n  const parsedUrl \x3d new Url(url);\n  for (const [key, value] of data) {\n    parsedUrl.searchParams.set(key, value);\n  }\n  url \x3d parsedUrl.toString();\n  return url;\n}\n\nexports \x3d {\n  getFullUrl,\n  combineUrlAndMap,\n};\n\n//# sourceURL\x3dhttps://qs/gws/js/log/transport/util.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/transport/image_fetch_sender.js";
goog.loadModule("goog.module(\x27search.log.transport.ImageFetchSender\x27);\n\nconst Sender \x3d goog.require(\x27search.log.transport.Sender\x27);\nconst util \x3d goog.require(\x27search.log.transport.util\x27);\n\n/**\n * The image fetch sender creates a new Image tag and then adds it to the\n * imageCatalog so it won\x27t get cleaned up. The src is set to a url with the\n * data values encoded. The endpoint is typically GWS gen_204.\n * @implements {Sender}\n */\nclass ImageFetchSender {\n  /**\n   * Constructs a new image transport.\n   */\n  constructor() {}\n\n  /**\n   * @override\n   */\n  log(url, data) {\n    const fullUrl \x3d util.getFullUrl(url, data);\n    google.log(\x27\x27, \x27\x27, fullUrl);\n  }\n}\n\nexports \x3d ImageFetchSender;\n\n//# sourceURL\x3dhttps://qs/gws/js/log/transport/image_fetch_sender.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/logger.js";
goog.loadModule("goog.module(\x27search.log.Logger\x27);\n\nconst ImageFetchSender \x3d goog.require(\x27search.log.transport.ImageFetchSender\x27);\nconst Sender \x3d goog.require(\x27search.log.transport.Sender\x27);\n\nclass Logger {}\n\n/**\n * Methods on Logger that can be modified by pinto mods.\n */\nLogger.mod \x3d {\n  /**\n   * @return {!Sender}\n   */\n  getDefaultSender() {\n    return new ImageFetchSender();\n  },\n};\n\nexports \x3d Logger;\n\n//# sourceURL\x3dhttps://qs/gws/js/log/logger.js\n");

$googDebugFname=undefined;
var $googDebugFname="search/logging/csi_metric_key.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27search.logging.CsiMetricKey\x27);\n\n/**\n * @enum {number}\n */\nsearch.logging.CsiMetricKey \x3d {\n  CSI_METRIC_KEY_UNSPECIFIED: 0,\n  ABOVE_FOLD_TIME: 1,\n  ABOVE_FOLD_RESOURCE_COUNT: 105,\n  CONNECTION_SETUP_TIME: 2,\n  CONNECTION_START_TIME: 3,\n  DOM_CONTENT_LOADED_TIME: 4,\n  DOM_INTERACTIVE_TIME: 5,\n  DEMAND_LAYER_PAGE_READY_TIME: 6,\n  DNS_LOOKUP_TIME: 7,\n  HEAD_CONTENT_TIME: 109,\n  IMAGE_LOAD_TIME: 8,\n  IMAGE_RESOURCE_COUNT: 106,\n  LAYOUT_RESIZE_CHECK_START_TIME: 9,\n  LAYOUT_RESIZE_END_TIME: 10,\n  NO_LAYOUT_RESIZE_END_TIME: 11,\n  JS_REDIRECT_TIME: 12,\n  JESR_SERVER_RESPONSE_TIME: 13,\n  ON_LOAD_TIME: 14,\n  POST_PAGE_RENDERING_TIME: 15,\n  PAGE_READY_TIME: 16,\n  PROGRESSIVE_PAGE_READY_TIME: 107,\n  PROGRESSIVE_PAGE_READY_TIME_BEACONS_ATF: 110,\n  QUANTUM_IMAGE_LOAD_TIME: 17,\n  QUERY_SUBMIT_TIMESTAMP: 18,\n  GSA_SRT: 104,\n  REDIRECT_TIME: 19,\n  REQUEST_TIME: 20,\n  REQUEST_START_TIME: 21,\n  RESPONSE_TIME: 22,\n  SEARCH_CONTENT_TIME: 100,\n  SERVER_RESPONSE_TIME: 23,\n  SSL_TIME: 24,\n  TIME_TO_FIRST_CHUNK: 25,\n  TIME_TO_LAST_BYTE: 102,\n  UNLOAD_TIME: 26,\n  WEB_SERVER_RESPONSE_TIME: 27,\n  XJS_TIME: 28,\n  XJS_EXECUTION_END_TIME: 29,\n  XJS_EXECUTION_START_TIME: 30,\n  XJS_LOAD_SCRIPT_TIME: 31,\n  SECONDARY_XJS_EXECUTION_START_TIME: 32,\n  SECONDARY_XJS_LOAD_SCRIPT_TIME: 58,\n  UPDATE_CONSTRUCTOR_TIME: 33,\n  URL_BUILT_TIME: 34,\n  NETWORK_FETCH_REQUEST_TIME: 35,\n  SUCCESS_RESPONSE_TIME: 36,\n  FAILURE_RESPONSE_TIME: 37,\n  RESPONSE_BYTE_SIZE: 38,\n  TIME_TO_FIRST_BYTE: 111,\n  ASYNC_RENDER_TIME: 103,\n  QUANTUM_PAGE_READY_TIME: 39,\n  CONSENT_READY_TIME: 40,\n  CONSENT_READY_XJS_TIME: 41,\n  CONSENT_LOAD_TIME: 42,\n  CONSENT_LOAD_XJS_TIME: 43,\n  HATS_RENDER_START_TIME: 44,\n  HATS_RENDER_TIME: 45,\n  NATIVE_CONTENT_LOAD_TIME: 46,\n  MINIAPP_LOAD_TIME: 47,\n  MINIAPP_LANDING_PAGE_LOAD_TIME: 48,\n  MINIAPP_LANDING_PAGE_HEADER_CHUNK_RENDERED_TIME: 49,\n  MINIAPP_LANDING_PAGE_BODY_CHUNK_RECEIVED_TIME: 50,\n  MINIAPP_START_ASYNC_TIME: 51,\n  MINIAPP_END_ASYNC_TIME: 52,\n  POPUP_SHOPPING_RESULTS_INTERACTIVE_TIME: 53,\n  WEBFONTS_ICON_TIME: 54,\n  DEMAND_LAYER_ESCAPE_HATCH_HIDDEN_TIME: 55,\n  DEMAND_LAYER_LOAD_COMPLETE_TIME: 56,\n  CHUNK_END: 57,\n  MAP_LOAD_TIME: 59,\n  IMMERSION_JS_LOAD_TIME: 60,\n  IMMERSION_ANIMATION_END_TIME: 61,\n  IMMERSION_RESULTS_RELOADED_TIME: 62,\n  ASYNC_ERROR_TIME: 63,\n  ASYNC_CANCEL_TIME: 64,\n  ASYNC_DONE_TIME: 65,\n  MINIAPP_LANDING_PAGE_BODY_CHUNK_RENDERED_TIME: 66,\n  IMAGE_VIEWER_FIRST_OPEN_TIME: 67,\n  FOOTER_LOAD_TIME: 68,\n  CHUNK_0_LAYOUT_DURATION: 69,\n  CHUNK_1_LAYOUT_DURATION: 70,\n  CHUNK_3_LAYOUT_DURATION: 71,\n  TOOLBELT_LOADING_TIME: 72,\n  FIRST_THUMBNAIL_LOAD_TIME: 73,\n  LAST_THUMBNAIL_LOAD_TIME: 74,\n  LAST_INLINE_THUMBNAIL_LOAD_TIME: 75,\n  HIDDEN_JESR_SERVER_RESPONSE_TIME: 76,\n  HIDDEN_IMAGE_LOAD_TIME: 77,\n  HIDDEN_ABOVE_FOLD_TIME: 78,\n  OLD_FINANCE_CHART_DRAWN: 79,\n  FINANCE_CHART_DRAWN: 80,\n  STATSKP_CHART_DRAWN: 81,\n  BLANK_CHART_DRAWN: 82,\n  PLUGIN_INIT: 83,\n  FAKEBOX_DONE: 84,\n  THEMES_DONE: 85,\n  INDEXED_DB_INIT: 86,\n  INDEXED_DB_INIT_FAIL: 87,\n  MOST_LIKELY_SUCCESSFUL: 88,\n  MOST_LIKELY_FAIL: 89,\n  IDENTITY_PREFIX: 91,\n  IDENTITY_FAIL: 92,\n  XHR: 93,\n  XHR_NON_SYNCING: 94,\n  XHR_FAIL: 95,\n  SYNC_CHECK_IGNORE: 96,\n  MOST_VISITED_TILES_READY: 97,\n  MOST_LIKELY_TILES_READY: 98,\n  QUERY_SUGGESTIONS_READY: 99,\n  QUERY_SUGGESTIONS_REQUEST_SENT: 108,\n  QUERY_SUGGESTIONS_DISMISS: 101\n};\n\n\n//# sourceURL\x3dhttps://qs/search/logging/csi_metric_key.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/latency/latency_params.js";
goog.loadModule("goog.module(\x27search.latency.LatencyParams\x27);\n\nconst CsiMetricKey \x3d goog.require(\x27search.logging.CsiMetricKey\x27);\n\n/**\n * The common params that are sent with web latency logs.\n * See go/web-latency-params\n * @enum {string}\n */\nconst WebLatencyParams \x3d {\n  SOURCE: \x27s\x27,\n  ACTION_TYPE: \x27atyp\x27,\n  ASYNC_TYPE: \x27astyp\x27,\n  CACHED_PAGE_ID: \x27cshid\x27,\n  EVENT_ID: \x27ei\x27,\n  CHROME_RENDERED: \x27cr\x27,\n  PENDING_IMAGES_AT_PRT: \x27imp\x27,\n  TOTAL_IMAGES: \x27imn\x27,\n  TOTAL_IMAGES_DEMAND_LAYER: \x27imd\x27,\n  TOTAL_IMAGES_VISIBLE: \x27ima\x27,\n  TOTAL_IMAGES_LATENCY_ERROR: \x27ime\x27,\n  TOTAL_IMAGES_INLINED_BTF: \x27imeb\x27,\n  TOTAL_IMAGES_INLINED_ATF_OFFSCREEN: \x27imeo\x27,\n  IMAGES_DONE: \x27imc\x27,\n  JSACTION_INFO: \x27jsi\x27,\n  AD_HEIGHT: \x27adh\x27,\n  PRERENDER: \x27prerender\x27,\n  CSI_METRICS: \x27rt\x27,\n  NETWORK_TYPE: \x27ntyp\x27,\n  CONNECTION_TYPE: \x27conn\x27,\n  NETWORK_DOWNLINK_MAX: \x27dlm\x27,\n  QUERY_SPEECH_DURATION: \x27qsd\x27,\n  WINDOW_IN_FRAME: \x27wif\x27,\n  WORKER_START: \x27ws\x27,\n};\n\n/**\n * The common source values sent with web latency logs.\n * See go/web-latency-params\n * @enum {string}\n */\nconst SourceValues \x3d {\n  ASYNC: \x27async\x27,\n  CSI: \x27csi\x27,\n  HPLUS: \x27hplus\x27,\n  IMAGES: \x27images\x27,\n  IMGRES: \x27imgres\x27,\n  JSA: \x27jsa\x27,\n  LU: \x27lu\x27,\n  MINI_APP: \x27miniapp\x27,\n  MOBILE_WEB_HP: \x27mobilewebhp\x27,\n  NEW_TAB: \x27newtab\x27,\n  PRODUCT_SEARCH: \x27productsearch\x27,\n  TACTILE: \x27tactile\x27,\n  VIDEO: \x27video\x27,\n  /** the WEB_AFT parameter is used in the initial beacon in csi_footer_iml.js*/\n  WEB_AFT: \x27webaft\x27,\n  WEB_HP: \x27webhp\x27,\n  WEB: \x27web\x27,\n};\n\n/**\n * The common action values sent with web latency logs.\n * See go/web-latency-params\n * @enum {string}\n */\nconst ActionTypeValues \x3d {\n  CSI: \x27csi\x27,\n};\n\n/**\n * The chrome rendered values that are sent with web latency logs.\n * See go/web-latency-params\n * @enum {string}\n */\nconst ChromeRenderedValues \x3d {\n  RENDERED_FROM_CHROME: \x27r\x27,\n  RENDERED_FROM_CACHE_PREFETCH: \x27c\x27,\n  NOT_RENDERED: \x27n\x27,\n};\n\n/**\n * The ad height values that are sent with web latency logs.\n * See go/web-latency-params\n * @enum {string}\n */\nconst AdHeightValues \x3d {\n  BOTTOM_AD_HEIGHT: \x27b\x27,\n  TOP_AD_HEIGHT: \x27c\x27,\n  TOP_VIEW_HEIGHT: \x27tv\x27,\n  RIGHT_HAND_SIDE_AD_HEIGHT: \x27r\x27,\n};\n\n/**\n * The common csi keys that are sent with web latency logs.\n * See go/web-latency-params\n * @enum {{gen204: string, clearcut: number}}\n */\nconst CsiMetricKeys \x3d {\n  ABOVE_FOLD_TIME: {gen204: \x27aft\x27, clearcut: CsiMetricKey.ABOVE_FOLD_TIME},\n  CONNECTION_SETUP_TIME:\n      {gen204: \x27cst\x27, clearcut: CsiMetricKey.CONNECTION_SETUP_TIME},\n  CONNECTION_START_TIME:\n      {gen204: \x27cstt\x27, clearcut: CsiMetricKey.CONNECTION_START_TIME},\n  DOM_CONTENT_LOADED_TIME:\n      {gen204: \x27dcl\x27, clearcut: CsiMetricKey.DOM_CONTENT_LOADED_TIME},\n  DOM_INTERACTIVE_TIME:\n      {gen204: \x27dit\x27, clearcut: CsiMetricKey.DOM_INTERACTIVE_TIME},\n  DEMAND_LAYER_PAGE_READY_TIME: {\n    gen204: \x27dlprt\x27,\n    clearcut: CsiMetricKey.DEMAND_LAYER_PAGE_READY_TIME,\n  },\n  DEMAND_LAYER_ESCAPE_HATCH_HIDDEN_TIME: {\n    gen204: \x27dlehh\x27,\n    clearcut: CsiMetricKey.DEMAND_LAYER_ESCAPE_HATCH_HIDDEN_TIME\n  },\n  DEMAND_LAYER_LOAD_COMPLETE_TIME:\n      {gen204: \x27dllc\x27, clearcut: CsiMetricKey.DEMAND_LAYER_LOAD_COMPLETE_TIME},\n  DNS_LOOKUP_TIME: {gen204: \x27dnst\x27, clearcut: CsiMetricKey.DNS_LOOKUP_TIME},\n  GSA_SRT: {gen204: \x27gsasrt\x27, clearcut: CsiMetricKey.GSA_SRT},\n  HEAD_CONTENT_TIME: {gen204: \x27hct\x27, clearcut: CsiMetricKey.HEAD_CONTENT_TIME},\n  IMAGE_LOAD_TIME: {gen204: \x27iml\x27, clearcut: CsiMetricKey.IMAGE_LOAD_TIME},\n  JESR_SERVER_RESPONSE_TIME:\n      {gen204: \x27jsrt\x27, clearcut: CsiMetricKey.JESR_SERVER_RESPONSE_TIME},\n  JS_REDIRECT_TIME: {gen204: \x27jsrdxt\x27, clearcut: CsiMetricKey.JS_REDIRECT_TIME},\n  LAYOUT_RESIZE_CHECK_START_TIME: {\n    gen204: \x27iuml_rcs\x27,\n    clearcut: CsiMetricKey.LAYOUT_RESIZE_CHECK_START_TIME,\n  },\n  LAYOUT_RESIZE_END_TIME:\n      {gen204: \x27iuml_re\x27, clearcut: CsiMetricKey.LAYOUT_RESIZE_END_TIME},\n  NO_LAYOUT_RESIZE_END_TIME: {\n    gen204: \x27iuml_nre\x27,\n    clearcut: CsiMetricKey.NO_LAYOUT_RESIZE_END_TIME,\n  },\n  ON_LOAD_TIME: {gen204: \x27ol\x27, clearcut: CsiMetricKey.ON_LOAD_TIME},\n  POST_PAGE_RENDERING_TIME:\n      {gen204: \x27pprt\x27, clearcut: CsiMetricKey.POST_PAGE_RENDERING_TIME},\n  PAGE_READY_TIME: {gen204: \x27prt\x27, clearcut: CsiMetricKey.PAGE_READY_TIME},\n  PROGRESSIVE_PAGE_READY_TIME:\n      {gen204: \x27pprt\x27, clearcut: CsiMetricKey.PROGRESSIVE_PAGE_READY_TIME},\n  PROGRESSIVE_PAGE_READY_TIME_BEACONS_ATF: {\n    gen204: \x27pprtn\x27,\n    clearcut: CsiMetricKey.PROGRESSIVE_PAGE_READY_TIME_BEACONS_ATF\n  },\n  QUANTUM_IMAGE_LOAD_TIME:\n      {gen204: \x27qiml\x27, clearcut: CsiMetricKey.QUANTUM_IMAGE_LOAD_TIME},\n  QUANTUM_PAGE_READY_TIME:\n      {gen204: \x27qprt\x27, clearcut: CsiMetricKey.QUANTUM_PAGE_READY_TIME},\n  QUERY_SUBMIT_TIMESTAMP:\n      {gen204: \x27qsubts\x27, clearcut: CsiMetricKey.QUERY_SUBMIT_TIMESTAMP},\n  REDIRECT_TIME: {gen204: \x27rdxt\x27, clearcut: CsiMetricKey.REDIRECT_TIME},\n  REQUEST_TIME: {gen204: \x27rqst\x27, clearcut: CsiMetricKey.REQUEST_TIME},\n  REQUEST_START_TIME:\n      {gen204: \x27rqstt\x27, clearcut: CsiMetricKey.REQUEST_START_TIME},\n  RESPONSE_TIME: {gen204: \x27rspt\x27, clearcut: CsiMetricKey.RESPONSE_TIME},\n  SEARCH_CONTENT_TIME:\n      {gen204: \x27sct\x27, clearcut: CsiMetricKey.SEARCH_CONTENT_TIME},\n  SERVER_RESPONSE_TIME:\n      {gen204: \x27srt\x27, clearcut: CsiMetricKey.SERVER_RESPONSE_TIME},\n  SSL_TIME: {gen204: \x27sslt\x27, clearcut: CsiMetricKey.SSL_TIME},\n  TIME_TO_FIRST_CHUNK: {\n    gen204: \x27ttfc\x27,\n    clearcut: CsiMetricKey.TIME_TO_FIRST_CHUNK,\n  },  // TODO(b/62415003): determine whether this should be removed or carried\n      // forward in the new clearcut logging.\n  UNLOAD_TIME: {gen204: \x27unt\x27, clearcut: CsiMetricKey.UNLOAD_TIME},\n  WEB_SERVER_RESPONSE_TIME:\n      {gen204: \x27wsrt\x27, clearcut: CsiMetricKey.WEB_SERVER_RESPONSE_TIME},\n  XJS_TIME: {gen204: \x27xjs\x27, clearcut: CsiMetricKey.XJS_TIME},\n  XJS_EXECUTION_END_TIME:\n      {gen204: \x27xjsee\x27, clearcut: CsiMetricKey.XJS_EXECUTION_END_TIME},\n  XJS_EXECUTION_START_TIME:\n      {gen204: \x27xjses\x27, clearcut: CsiMetricKey.XJS_EXECUTION_START_TIME},\n  XJS_LOAD_SCRIPT_TIME:\n      {gen204: \x27xjsls\x27, clearcut: CsiMetricKey.XJS_LOAD_SCRIPT_TIME},\n  SECONDARY_XJS_EXECUTION_START_TIME: {\n    gen204: \x27xjs2es\x27,\n    clearcut: CsiMetricKey.SECONDARY_XJS_EXECUTION_START_TIME,\n  },\n  SECONDARY_XJS_LOAD_SCRIPT_TIME:\n      {gen204: \x27xjs2ls\x27, clearcut: CsiMetricKey.SECONDARY_XJS_LOAD_SCRIPT_TIME},\n  // Async csi metrics\n  UPDATE_CONSTRUCTOR_TIME:\n      {gen204: \x27uc\x27, clearcut: CsiMetricKey.UPDATE_CONSTRUCTOR_TIME},\n  URL_BUILT_TIME: {gen204: \x27ub\x27, clearcut: CsiMetricKey.URL_BUILT_TIME},\n  NETWORK_FETCH_REQUEST_TIME:\n      {gen204: \x27fr\x27, clearcut: CsiMetricKey.NETWORK_FETCH_REQUEST_TIME},\n  SUCCESS_RESPONSE_TIME:\n      {gen204: \x27st\x27, clearcut: CsiMetricKey.SUCCESS_RESPONSE_TIME},\n  TIME_TO_FIRST_BYTE:\n      {gen204: \x27ttfb\x27, clearcut: CsiMetricKey.TIME_TO_FIRST_BYTE},\n  ASYNC_TIME_TO_LAST_BYTE:\n      {gen204: \x27ttlb\x27, clearcut: CsiMetricKey.TIME_TO_LAST_BYTE},\n  ASYNC_RENDER_TIME: {gen204: \x27art\x27, clearcut: CsiMetricKey.ASYNC_RENDER_TIME},\n  FAILURE_RESPONSE_TIME:\n      {gen204: \x27ft\x27, clearcut: CsiMetricKey.FAILURE_RESPONSE_TIME},\n  RESPONSE_BYTE_SIZE: {gen204: \x27bs\x27, clearcut: CsiMetricKey.RESPONSE_BYTE_SIZE},\n  // Other Async metrics.\n  ASYNC_ERROR_TIME: {gen204: \x27error\x27, clearcut: CsiMetricKey.ASYNC_ERROR_TIME},\n  ASYNC_CANCEL_TIME:\n      {gen204: \x27cancel\x27, clearcut: CsiMetricKey.ASYNC_CANCEL_TIME},\n  ASYNC_DONE_TIME: {gen204: \x27done\x27, clearcut: CsiMetricKey.ASYNC_DONE_TIME},\n  // Consent csi metrics\n  CONSENT_READY_TIME:\n      {gen204: \x27rdy\x27, clearcut: CsiMetricKey.CONSENT_READY_TIME},\n  CONSENT_READY_XJS_TIME:\n      {gen204: \x27rdy_xjs\x27, clearcut: CsiMetricKey.CONSENT_READY_XJS_TIME},\n  CONSENT_LOAD_TIME: {gen204: \x27load\x27, clearcut: CsiMetricKey.CONSENT_LOAD_TIME},\n  CONSENT_LOAD_XJS_TIME:\n      {gen204: \x27load_xjs\x27, clearcut: CsiMetricKey.CONSENT_LOAD_XJS_TIME},\n  // Hats csi metrics\n  HATS_RENDER_START_TIME:\n      {gen204: \x27rstart\x27, clearcut: CsiMetricKey.HATS_RENDER_START_TIME},\n  HATS_RENDER_TIME: {gen204: \x27rend\x27, clearcut: CsiMetricKey.HATS_RENDER_TIME},\n  // Native csi metrics\n  NATIVE_CONTENT_LOAD_TIME:\n      {gen204: \x27ncl\x27, clearcut: CsiMetricKey.NATIVE_CONTENT_LOAD_TIME},\n  // Miniapp csi metrics\n  MINIAPP_LOAD_TIME: {gen204: \x27load\x27, clearcut: CsiMetricKey.MINIAPP_LOAD_TIME},\n  MINIAPP_LANDING_PAGE_LOAD_TIME:\n      {gen204: \x27lppl\x27, clearcut: CsiMetricKey.MINIAPP_LANDING_PAGE_LOAD_TIME},\n  MINIAPP_LANDING_PAGE_HEADER_CHUNK_RENDERED_TIME: {\n    gen204: \x27lphcrn\x27,\n    clearcut: CsiMetricKey.MINIAPP_LANDING_PAGE_HEADER_CHUNK_RENDERED_TIME\n  },\n  MINIAPP_LANDING_PAGE_BODY_CHUNK_RECEIVED_TIME: {\n    gen204: \x27lpbcrc\x27,\n    clearcut: CsiMetricKey.MINIAPP_LANDING_PAGE_BODY_CHUNK_RECEIVED_TIME\n  },\n  MINIAPP_LANDING_PAGE_BODY_CHUNK_RENDERED_TIME: {\n    gen204: \x27lpbcrn\x27,\n    clearcut: CsiMetricKey.MINIAPP_LANDING_PAGE_BODY_CHUNK_RENDERED_TIME\n  },\n  MINIAPP_START_ASYNC_TIME:\n      {gen204: \x27start_async\x27, clearcut: CsiMetricKey.MINIAPP_START_ASYNC_TIME},\n  MINIAPP_END_ASYNC_TIME:\n      {gen204: \x27end_async\x27, clearcut: CsiMetricKey.MINIAPP_END_ASYNC_TIME},\n  // Shopping csi metrics\n  POPUP_SHOPPING_RESULTS_INTERACTIVE_TIME: {\n    gen204: \x27psri\x27,\n    clearcut: CsiMetricKey.POPUP_SHOPPING_RESULTS_INTERACTIVE_TIME,\n  },\n  // Web fonts csi metrics\n  WEBFONTS_ICON_TIME:\n      {gen204: \x27icon\x27, clearcut: CsiMetricKey.WEBFONTS_ICON_TIME},\n  CHUNK_END: {gen204: \x27che\x27, clearcut: CsiMetricKey.CHUNK_END},\n  MAP_LOAD_TIME: {gen204: \x27lmap\x27, clearcut: CsiMetricKey.MAP_LOAD_TIME},\n  IMMERSION_JS_LOAD_TIME:\n      {gen204: \x27js_loaded\x27, clearcut: CsiMetricKey.IMMERSION_JS_LOAD_TIME},\n  IMMERSION_ANIMATION_END_TIME: {\n    gen204: \x27animation_end\x27,\n    clearcut: CsiMetricKey.IMMERSION_ANIMATION_END_TIME\n  },\n  IMMERSION_RESULTS_RELOADED_TIME: {\n    gen204: \x27results_reloaded\x27,\n    clearcut: CsiMetricKey.IMMERSION_RESULTS_RELOADED_TIME\n  },\n  // Deprecated: JESR csi metrics\n  HIDDEN_JESR_SERVER_RESPONSE_TIME: {\n    gen204: \x27hjsrt\x27,\n    clearcut: CsiMetricKey.HIDDEN_JESR_SERVER_RESPONSE_TIME\n  },\n  HIDDEN_IMAGE_LOAD_TIME:\n      {gen204: \x27himl\x27, clearcut: CsiMetricKey.HIDDEN_IMAGE_LOAD_TIME},\n  HIDDEN_ABOVE_FOLD_TIME:\n      {gen204: \x27haft\x27, clearcut: CsiMetricKey.HIDDEN_ABOVE_FOLD_TIME},\n  // Line charts csi metrics\n  OLD_FINANCE_CHART_DRAWN: {\n    gen204: \x27lch_draw_fin_old\x27,\n    clearcut: CsiMetricKey.OLD_FINANCE_CHART_DRAWN\n  },\n  FINANCE_CHART_DRAWN:\n      {gen204: \x27lch_draw_fin\x27, clearcut: CsiMetricKey.FINANCE_CHART_DRAWN},\n  STATSKP_CHART_DRAWN:\n      {gen204: \x27lch_draw_skp\x27, clearcut: CsiMetricKey.STATSKP_CHART_DRAWN},\n  BLANK_CHART_DRAWN:\n      {gen204: \x27lch_draw_blank\x27, clearcut: CsiMetricKey.BLANK_CHART_DRAWN},\n  // New tab metrics\n  PLUGIN_INIT: {\n    gen204: \x27nti\x27,\n    clearcut: CsiMetricKey.PLUGIN_INIT\n  },  // Plugin initialization started.\n  FAKEBOX_DONE: {\n    gen204: \x27fbd\x27,\n    clearcut: CsiMetricKey.FAKEBOX_DONE\n  },  // Fakebox initialization done.\n  THEMES_DONE: {\n    gen204: \x27thd\x27,\n    clearcut: CsiMetricKey.THEMES_DONE\n  },  // Themes initialization done.\n  INDEXED_DB_INIT: {\n    gen204: \x27dbi\x27,\n    clearcut: CsiMetricKey.INDEXED_DB_INIT\n  },  // IndexedDB successfully initialized.\n  INDEXED_DB_INIT_FAIL: {\n    gen204: \x27dbif\x27,\n    clearcut: CsiMetricKey.INDEXED_DB_INIT_FAIL\n  },  // IndexedDB initialization failed.\n  MOST_LIKELY_SUCCESSFUL: {\n    gen204: \x27mll\x27,\n    clearcut: CsiMetricKey.MOST_LIKELY_SUCCESSFUL\n  },  // Most Likely successfully obtained from IndexedDB.\n  MOST_LIKELY_FAIL: {\n    gen204: \x27mllf\x27,\n    clearcut: CsiMetricKey.MOST_LIKELY_FAIL\n  },  // Most Likely failed to be obtained from IndexedDB.\n  IDENTITY_PREFIX: {\n    gen204: \x27ic\x27,\n    clearcut: CsiMetricKey.IDENTITY_PREFIX\n  },  // Identity check succeeded, add a digit as suffix.\n  IDENTITY_FAIL: {\n    gen204: \x27icf\x27,\n    clearcut: CsiMetricKey.IDENTITY_FAIL\n  },  // Identity check Failed.\n  XHR: {\n    gen204: \x27xhr\x27,\n    clearcut: CsiMetricKey.XHR\n  },  // Duration of successful XHR for a syncing user.\n  XHR_NON_SYNCING: {\n    gen204: \x27xhrn\x27,\n    clearcut: CsiMetricKey.XHR_NON_SYNCING\n  },  // Duration of successful XHR for a non-syncing user.\n  XHR_FAIL: {\n    gen204: \x27xhrf\x27,\n    clearcut: CsiMetricKey.XHR_FAIL\n  },  // Duration of failing XHR.\n  SYNC_CHECK_IGNORE: {\n    gen204: \x27sci\x27,\n    clearcut: CsiMetricKey.SYNC_CHECK_IGNORE\n  },  // Set when the sync check failed and was ignored.\n  MOST_VISITED_TILES_READY: {\n    gen204: \x27mvtr\x27,\n    clearcut: CsiMetricKey.MOST_VISITED_TILES_READY\n  },  // All Most Visited tiles are ready.\n  MOST_LIKELY_TILES_READY: {\n    gen204: \x27mltr\x27,\n    clearcut: CsiMetricKey.MOST_LIKELY_TILES_READY\n  },  // All Most Likely tiles are ready.\n  QUERY_SUGGESTIONS_READY: {\n    gen204: \x27qsr\x27,\n    clearcut: CsiMetricKey.QUERY_SUGGESTIONS_READY\n  },  // Query suggestions are ready.\n  QUERY_SUGGESTIONS_REQUEST_SENT: {\n    gen204: \x27qss\x27,\n    clearcut: CsiMetricKey.QUERY_SUGGESTIONS_REQUEST_SENT\n  },  // Query suggestions request is sent.\n  QUERY_SUGGESTIONS_DISMISS: {\n    gen204: \x27qst\x27,\n    clearcut: CsiMetricKey.QUERY_SUGGESTIONS_DISMISS\n  },  // Query suggestions feature are turned off.\n};\n\n/**\n * The memory footprint params that are sent to GWS.\n * @enum {string}\n */\nconst MemoryParams \x3d {\n  WEB_USED_JS_HEAP_SIZE: \x27ujhs\x27,\n  WEB_TOTAL_JS_HEAP_SIZE: \x27tjhs\x27,\n  WEB_JS_HEAP_SIZE_LIMIT: \x27jhsl\x27,\n  MEMORY_PARAM: \x27mem\x27,\n};\n\n/**\n * The internal field keys for parameter WebLatencyParams.JSACTION_INFO.\n * @enum {string}\n */\nconst JsactionInfo \x3d {\n  CONTROLLER_NAME: \x27n\x27,\n  DELAY_MS: \x27t\x27,\n  EVENT_TYPE: \x27et\x27,\n  VED: \x27ve\x27\n};\n\nexports \x3d {\n  ActionTypeValues,\n  AdHeightValues,\n  ChromeRenderedValues,\n  CsiMetricKeys,\n  JsactionInfo,\n  MemoryParams,\n  SourceValues,\n  WebLatencyParams,\n};\n\n//# sourceURL\x3dhttps://qs/gws/js/log/latency/latency_params.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/transport/gws204_path.js";
goog.loadModule("goog.module(\x27search.log.transport.Gws204Path\x27);\n\n/**\n * The supported GWS 204 logging endpoint paths.\n * @enum {string}\n */\nconst Gws204Path \x3d {\n  CLIENT204: \x27/client_204\x27,\n  FP204: \x27/fp_204\x27,\n  GEN204: \x27/gen_204\x27,\n  IMGHOVER: \x27/imghover\x27,\n};\n\nexports \x3d Gws204Path;\n\n//# sourceURL\x3dhttps://qs/gws/js/log/transport/gws204_path.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/transport/transport.js";
goog.loadModule("goog.module(\x27search.log.transport.Transport\x27);\n\n/**\n * This interface is implemented by methods that log the data by different\n * methods. Be sure that you know that the given method supports your use case\n * (POST vs GET, endpoints, etc).\n * @interface\n */\nclass Transport {\n  /**\n   * Subclasses implement this method in whatever method they desire. It could\n   * either be a GET or a POST so be sure the chosen Transport works for\n   * your use case.\n   * @param {!Map\x3cstring, string\x3e} data\n   */\n  logData(data) {}\n}\n\nexports \x3d Transport;\n\n//# sourceURL\x3dhttps://qs/gws/js/log/transport/transport.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/transport/gws204_transport.js";
goog.loadModule("goog.module(\x27search.log.transport.Gws204Transport\x27);\n\nconst Gws204Path \x3d goog.require(\x27search.log.transport.Gws204Path\x27);\nconst Sender \x3d goog.require(\x27search.log.transport.Sender\x27);\nconst Transport \x3d goog.require(\x27search.log.transport.Transport\x27);\nconst {ActionTypeValues, CsiMetricKeys, SourceValues, WebLatencyParams} \x3d goog.require(\x27search.latency.LatencyParams\x27);\nconst {combineUrlAndMap} \x3d goog.require(\x27search.log.transport.util\x27);\n\nconst ABOVE_FOLD_TIME \x3d CsiMetricKeys.ABOVE_FOLD_TIME.gen204;\nconst QUERY_SUBMIT_TIMESTAMP \x3d CsiMetricKeys.QUERY_SUBMIT_TIMESTAMP.gen204;\nconst WEB_SERVER_RESPONSE_TIME \x3d CsiMetricKeys.WEB_SERVER_RESPONSE_TIME.gen204;\n\n/**\n * Send log data via GWS 204 endpoint (e.g., gen_204, client_204).\n *\n * Request URL /gen_204?atyp\x3di\x26ei\x3dfakeEI using default Sender:\n *   transport \x3d new Gws204Transport(search.log.Logger.mod.getDefaultSender());\n *   transport.logData(new Map([[\x27atyp\x27, \x27i\x27], [\x27ei\x27, \x27fakeEI\x27]]);\n *\n * Request URL /client_204?atyp\x3di\x26ei\x3dfakeEI using ImageFetchSender:\n *   transport \x3d new Gws204Transport(new ImageFetchSender(), \x27client_204\x27);\n *   transport.logData(new Map([[\x27atyp\x27, \x27i\x27], [\x27ei\x27, \x27fakeEI\x27]]);\n *\n * @implements {Transport}\n */\nclass Gws204Transport {\n  /**\n   * Constructs a GWS204Transport. The sendDataInUrl indicates data provided in\n   * logData() should always be sent in url. Some senders send data via the post\n   * body, this will ensure data is sent in the url.\n   * @param {!Sender} sender The desired sender.\n   * @param {{\n   *   path: (Gws204Path|undefined),\n   *   sendDataInUrl: (boolean|undefined),\n   * }\x3d} options\n   */\n  constructor(sender, {path \x3d Gws204Path.GEN204, sendDataInUrl \x3d true} \x3d {}) {\n    /** @private @const {!Sender} */\n    this.sender_ \x3d sender;\n\n    /** @private @const {!Gws204Path} */\n    this.path_ \x3d path;\n\n    /** @private @const {boolean} */\n    this.sendDataInUrl_ \x3d sendDataInUrl;\n  }\n\n  /**\n   * @override\n   */\n  logData(data) {\n    let aft \x3d null;\n    let srt \x3d null;\n    if (goog.getObjectByName(\x27google.c.c.t\x27) \x26\x26 google.c.c.t \x3e\x3d 0 \x26\x26\n        this.path_ \x3d\x3d Gws204Path.GEN204 \x26\x26\n        data.get(WebLatencyParams.SOURCE) \x3d\x3d SourceValues.WEB \x26\x26\n        data.get(WebLatencyParams.ACTION_TYPE) \x3d\x3d ActionTypeValues.CSI \x26\x26\n        (aft \x3d getCsiMetric(ABOVE_FOLD_TIME, data)) \x26\x26\n        (srt \x3d\n             (getCsiMetric(QUERY_SUBMIT_TIMESTAMP, data) ||\n              getCsiMetric(WEB_SERVER_RESPONSE_TIME, data)))) {\n      // Delay sending the initial CSI report /gen204?atyp\x3dcsi\x26s\x3dweb, by\n      // X percentage of SRT+AFT for each request.\n      // The percentage is defined in global variable google.c.c.t, set by\n      // experiment flag CsiBeaconLoss__delay_initial_report_percentage.\n      // Valid values are [0, ...) range, -1.0 means experiment is inactive.\n      // e.g.: For a value of 0.02 (i.e. 2%), then delay by 0.02 * (SRT+AFT).\n      // SRT is defined as the qsubts metric on GSA and wsrt on non-GSA.\n      // If qsubts is defined as 0, this will fall back on wsrt, which is\n      // not accurate for GSA, but this case is probably not common enough\n      // to worry about.\n      // TODO(b/66740424): Remove once experiment is done.\n      window.setTimeout(() \x3d\x3e {\n        this.sendData_(data);\n      }, google.c.c.t * (aft + srt));\n    } else {\n      this.sendData_(data);\n    }\n  }\n\n  /**\n   * Sends a log through the sender. Decides whether to combine path and data\n   * into the url argument of the sender based on sendDataInUrl_.\n   * @param {!Map\x3cstring, string\x3e} data Additional data for logging.\n   * @private\n   */\n  sendData_(data) {\n    if (this.sendDataInUrl_) {\n      this.sender_.log(combineUrlAndMap(this.path_, data));\n    } else {\n      // Data will be sent in the post body if send beacon is the sender.\n      this.sender_.log(this.path_, data);\n    }\n  }\n}\n\n/**\n * Returns the CSI metric value from data.\n * @param {string} metric The metric to get.\n * @param {!Map\x3cstring, string\x3e} data The collection of metric data,\n *     e.g. data[\x27rt\x27] \x3d \x27aft.123,wsrt.567\x27\n * @return {number|null} Numeric value of metric, null if no such metric is\n *     found, or value failed to parse to a number.\n */\nfunction getCsiMetric(metric, data) {\n  if (!data.has(WebLatencyParams.CSI_METRICS)) {\n    return null;\n  }\n  for (const metricStr of data.get(WebLatencyParams.CSI_METRICS).split(\x27,\x27)) {\n    const [key, valueStr] \x3d metricStr.split(\x27.\x27);\n    if (key \x3d\x3d metric) {\n      const value \x3d Number(valueStr);\n      return !isNaN(value) ? value : null;\n    }\n  }\n  return null;\n}\n\nexports \x3d Gws204Transport;\n\n//# sourceURL\x3dhttps://qs/gws/js/log/transport/gws204_transport.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/dom/dataset.js";
eval("// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utilities for adding, removing and setting values in\n * an Element\x27s dataset.\n * See {@link http://www.w3.org/TR/html5/Overview.html#dom-dataset}.\n *\n * @author nicksay@google.com (Alex Nicksay)\n */\n\ngoog.provide(\x27goog.dom.dataset\x27);\n\ngoog.require(\x27goog.labs.userAgent.browser\x27);\ngoog.require(\x27goog.string\x27);\ngoog.require(\x27goog.userAgent.product\x27);\n\n\n/**\n * Whether using the dataset property is allowed.\n *\n * In IE (up to and including IE 11), setting element.dataset in JS does not\n * propagate values to CSS, breaking expressions such as\n * `content: attr(data-content)` that would otherwise work.\n * See {@link https://github.com/google/closure-library/issues/396}.\n *\n * In Safari \x3e\x3d 9, reading from element.dataset sometimes returns\n * undefined, even though the corresponding data- attribute has a value.\n * See {@link https://bugs.webkit.org/show_bug.cgi?id\x3d161454}.\n * @const\n * @private\n */\ngoog.dom.dataset.ALLOWED_ \x3d\n    !goog.userAgent.product.IE \x26\x26 !goog.labs.userAgent.browser.isSafari();\n\n\n/**\n * The DOM attribute name prefix that must be present for it to be considered\n * for a dataset.\n * @type {string}\n * @const\n * @private\n */\ngoog.dom.dataset.PREFIX_ \x3d \x27data-\x27;\n\n\n/**\n * Returns whether a string is a valid dataset property name.\n * @param {string} key Property name for the custom data attribute.\n * @return {boolean} Whether the string is a valid dataset property name.\n * @private\n */\ngoog.dom.dataset.isValidProperty_ \x3d function(key) {\n  return !/-[a-z]/.test(key);\n};\n\n\n/**\n * Sets a custom data attribute on an element. The key should be\n * in camelCase format (e.g \x22keyName\x22 for the \x22data-key-name\x22 attribute).\n * @param {Element} element DOM node to set the custom data attribute on.\n * @param {string} key Key for the custom data attribute.\n * @param {string} value Value for the custom data attribute.\n */\ngoog.dom.dataset.set \x3d function(element, key, value) {\n  var htmlElement \x3d /** @type {HTMLElement} */ (element);\n  if (goog.dom.dataset.ALLOWED_ \x26\x26 htmlElement.dataset) {\n    htmlElement.dataset[key] \x3d value;\n  } else if (!goog.dom.dataset.isValidProperty_(key)) {\n    throw new Error(\n        goog.DEBUG ? \x27\x22\x27 + key + \x27\x22 is not a valid dataset property name.\x27 :\n                     \x27\x27);\n  } else {\n    element.setAttribute(\n        goog.dom.dataset.PREFIX_ + goog.string.toSelectorCase(key), value);\n  }\n};\n\n\n/**\n * Gets a custom data attribute from an element. The key should be\n * in camelCase format (e.g \x22keyName\x22 for the \x22data-key-name\x22 attribute).\n * @param {Element} element DOM node to get the custom data attribute from.\n * @param {string} key Key for the custom data attribute.\n * @return {?string} The attribute value, if it exists.\n */\ngoog.dom.dataset.get \x3d function(element, key) {\n  // Edge, unlike other browsers, will do camel-case conversion when retrieving\n  // \x22dash-case\x22 properties.\n  if (!goog.dom.dataset.isValidProperty_(key)) {\n    return null;\n  }\n  var htmlElement \x3d /** @type {HTMLElement} */ (element);\n  if (goog.dom.dataset.ALLOWED_ \x26\x26 htmlElement.dataset) {\n    // Android browser (non-chrome) returns the empty string for\n    // element.dataset[\x27doesNotExist\x27].\n    if (goog.labs.userAgent.browser.isAndroidBrowser() \x26\x26\n        !(key in htmlElement.dataset)) {\n      return null;\n    }\n    var value \x3d htmlElement.dataset[key];\n    return value \x3d\x3d\x3d undefined ? null : value;\n  } else {\n    return htmlElement.getAttribute(\n        goog.dom.dataset.PREFIX_ + goog.string.toSelectorCase(key));\n  }\n};\n\n\n/**\n * Removes a custom data attribute from an element. The key should be\n  * in camelCase format (e.g \x22keyName\x22 for the \x22data-key-name\x22 attribute).\n * @param {Element} element DOM node to get the custom data attribute from.\n * @param {string} key Key for the custom data attribute.\n */\ngoog.dom.dataset.remove \x3d function(element, key) {\n  // Edge, unlike other browsers, will do camel-case conversion when removing\n  // \x22dash-case\x22 properties.\n  if (!goog.dom.dataset.isValidProperty_(key)) {\n    return;\n  }\n  var htmlElement \x3d /** @type {HTMLElement} */ (element);\n  if (goog.dom.dataset.ALLOWED_ \x26\x26 htmlElement.dataset) {\n    // In strict mode Safari will trigger an error when trying to delete a\n    // property which does not exist.\n    if (goog.dom.dataset.has(element, key)) {\n      delete htmlElement.dataset[key];\n    }\n  } else {\n    element.removeAttribute(\n        goog.dom.dataset.PREFIX_ + goog.string.toSelectorCase(key));\n  }\n};\n\n\n/**\n * Checks whether custom data attribute exists on an element. The key should be\n * in camelCase format (e.g \x22keyName\x22 for the \x22data-key-name\x22 attribute).\n *\n * @param {Element} element DOM node to get the custom data attribute from.\n * @param {string} key Key for the custom data attribute.\n * @return {boolean} Whether the attribute exists.\n */\ngoog.dom.dataset.has \x3d function(element, key) {\n  // Edge, unlike other browsers, will do camel-case conversion when retrieving\n  // \x22dash-case\x22 properties.\n  if (!goog.dom.dataset.isValidProperty_(key)) {\n    return false;\n  }\n  var htmlElement \x3d /** @type {HTMLElement} */ (element);\n  if (goog.dom.dataset.ALLOWED_ \x26\x26 htmlElement.dataset) {\n    return key in htmlElement.dataset;\n  } else if (htmlElement.hasAttribute) {\n    return htmlElement.hasAttribute(\n        goog.dom.dataset.PREFIX_ + goog.string.toSelectorCase(key));\n  } else {\n    return !!(htmlElement.getAttribute(\n        goog.dom.dataset.PREFIX_ + goog.string.toSelectorCase(key)));\n  }\n};\n\n\n/**\n * Gets all custom data attributes as a string map.  The attribute names will be\n * camel cased (e.g., data-foo-bar -\x3e dataset[\x27fooBar\x27]).  This operation is not\n * safe for attributes having camel-cased names clashing with already existing\n * properties (e.g., data-to-string -\x3e dataset[\x27toString\x27]).\n * @param {!Element} element DOM node to get the data attributes from.\n * @return {!Object} The string map containing data attributes and their\n *     respective values.\n */\ngoog.dom.dataset.getAll \x3d function(element) {\n  var htmlElement \x3d /** @type {HTMLElement} */ (element);\n  if (goog.dom.dataset.ALLOWED_ \x26\x26 htmlElement.dataset) {\n    return htmlElement.dataset;\n  } else {\n    var dataset \x3d {};\n    var attributes \x3d element.attributes;\n    for (var i \x3d 0; i \x3c attributes.length; ++i) {\n      var attribute \x3d attributes[i];\n      if (goog.string.startsWith(attribute.name, goog.dom.dataset.PREFIX_)) {\n        // We use substr(5), since it\x27s faster than replacing \x27data-\x27 with \x27\x27.\n        var key \x3d goog.string.toCamelCase(attribute.name.substr(5));\n        dataset[key] \x3d attribute.value;\n      }\n    }\n    return dataset;\n  }\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/dom/dataset.js\n");

$googDebugFname=undefined;
var $googDebugFname="net/proto2/contrib/js_proto/public/binary_extension.js";
eval("/**\n * @fileoverview Classes to support dynamically registering \x26 materializing\n * extension messages.\n *\n * @author aappleby@google.com (Austin Appleby)\n */\n\ngoog.provide(\x27jsproto.BinaryExtension\x27);\ngoog.provide(\x27jsproto.BinaryExtensionType\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27jspb.BinaryConstants\x27);\n\n\n\n/**\n * @param {number} field\n * @param {jspb.BinaryConstants.FieldType} fieldType\n * @param {jspb.BuilderFunction\x3d} opt_builder\n * @param {jspb.RecyclerFunction\x3d} opt_recycler\n * @param {jspb.ReaderFunction\x3d} opt_reader\n * @param {jspb.WriterFunction\x3d} opt_writer\n * @param {jspb.PrunerFunction\x3d} opt_pruner\n * @param {jspb.ClonerFunction\x3d} opt_cloner\n * @param {jspb.ComparerFunction\x3d} opt_comparer\n * @constructor\n * @struct\n */\njsproto.BinaryExtensionType \x3d function(\n    field, fieldType, opt_builder, opt_recycler, opt_reader, opt_writer,\n    opt_pruner, opt_cloner, opt_comparer) {\n  /**\n   * The extension\x27s field number, which we use to match this type info with\n   * an actual extension object.\n   * @const {number}\n   */\n  this.field \x3d field;\n\n  /**\n   * The proto-file interpretation of the field.\n   * @const {jspb.BinaryConstants.FieldType}\n   */\n  this.fieldType \x3d fieldType;\n\n  /**\n   * The optional builder function registered with this extension type.\n   * @const {?jspb.BuilderFunction}\n   */\n  this.builder \x3d goog.isDef(opt_builder) ? opt_builder : null;\n\n  /**\n   * The optional recycler function registered with this extension type.\n   * @const {?jspb.RecyclerFunction}\n   */\n  this.recycler \x3d goog.isDef(opt_recycler) ? opt_recycler : null;\n\n  /**\n   * The optional reader registered with this extension type.\n   * @const {?jspb.ReaderFunction}\n   */\n  this.reader \x3d goog.isDef(opt_reader) ? opt_reader : null;\n\n  /**\n   * The optional writer function registered with this extension type.\n   * @const {?jspb.WriterFunction}\n   */\n  this.writer \x3d goog.isDef(opt_writer) ? opt_writer : null;\n\n  /**\n   * The optional pruner function registered with this extension type.\n   * @const {?jspb.PrunerFunction}\n   */\n  this.pruner \x3d goog.isDef(opt_pruner) ? opt_pruner : null;\n\n  /**\n   * The optional cloner function registered with this extension type.\n   * @const {?jspb.ClonerFunction}\n   */\n  this.cloner \x3d goog.isDef(opt_cloner) ? opt_cloner : null;\n\n  /**\n   * The optional comparer function registered with this extension type.\n   * @const {?jspb.ComparerFunction}\n   */\n  this.comparer \x3d goog.isDef(opt_comparer) ? opt_comparer : null;\n\n  /**\n   * The raw name of this proto, for debug messages.\n   * @type {string}\n   */\n  this.rawName \x3d \x27\x27;\n};\n\n\n\n/**\n * BinaryExtension represents a field whose type was not known at serialization\n * time.\n * @constructor\n * @struct\n */\njsproto.BinaryExtension \x3d function() {\n  /**\n   * This extension\x27s field number, used to match it up with an extension type\n   * above.\n   * @type {number}\n   */\n  this.field \x3d -1;\n\n  /**\n   * The field block associated with this extension, if present.\n   * @type {Uint8Array}\n   */\n  this.buffer \x3d null;\n\n  /**\n   * The starting point in the above field block.\n   * @type {?number}\n   */\n  this.start \x3d null;\n\n  /**\n   * The ending point in the above field block.\n   * @type {?number}\n   */\n  this.end \x3d null;\n\n  /**\n   * The type information associated with this extension, if we were able to\n   * find it.\n   * @type {jsproto.BinaryExtensionType}\n   */\n  this.info \x3d null;\n\n  /**\n   * The value of this extension, if we\x27ve materialized it.\n   * @type {?jspb.AnyFieldType}\n   */\n  this.value \x3d null;\n};\n\n\n/**\n * @param {number} field The field number for the extension.\n * @param {?jspb.AnyFieldType\x3d} opt_value The optional value to store with\n *     the extension.\n * @param {Uint8Array\x3d} opt_buffer The buffer containing the extension.\n * @param {?number\x3d} opt_start The extension\x27s start point in the buffer.\n * @param {?number\x3d} opt_end The extension\x27s end point in the buffer.\n * @param {jsproto.BinaryExtensionType\x3d} opt_info The type information for the\n *     extension, if it was registered with the base class. If we have no type\n *     information for the extension, it cannot be materialized.\n */\njsproto.BinaryExtension.prototype.init \x3d function(field, opt_value,\n    opt_buffer, opt_start, opt_end, opt_info) {\n  this.field \x3d field;\n\n  this.buffer \x3d goog.isDef(opt_buffer) ? opt_buffer : null;\n  this.start \x3d goog.isDef(opt_start) ? opt_start : null;\n  this.end \x3d goog.isDef(opt_end) ? opt_end : null;\n\n  this.info \x3d goog.isDef(opt_info) ? opt_info : null;\n  this.value \x3d goog.isDef(opt_value) ? opt_value : null;\n};\n\n\n/**\n * The default extension pool size.\n * @const {number}\n */\njsproto.BinaryExtension.MAX_POOL_SIZE \x3d 1000;\n\n\n/**\n * @private {!Array\x3cjsproto.BinaryExtension\x3e}\n */\njsproto.BinaryExtension.pool_ \x3d [];\n\n\n/**\n * @private {number}\n */\njsproto.BinaryExtension.poolCursor_ \x3d 0;\n\n\n/**\n * @param {number} field The field number for the extension.\n * @param {?jspb.AnyFieldType\x3d} opt_value The optional value to store with\n *     the extension.\n * @param {Uint8Array\x3d} opt_buffer The buffer containing the extension.\n * @param {?number\x3d} opt_start The extension\x27s start point in the buffer.\n * @param {?number\x3d} opt_end The extension\x27s end point in the buffer.\n * @param {jsproto.BinaryExtensionType\x3d} opt_info The type information for the\n *     extension, if it was registered with the base class. If we have no type\n *     information for the extension, it cannot be materialized.\n * @return {!jsproto.BinaryExtension}\n */\njsproto.BinaryExtension.alloc \x3d function(field, opt_value,\n                                         opt_buffer, opt_start, opt_end,\n                                         opt_info) {\n  var result;\n  if (jsproto.BinaryExtension.poolCursor_) {\n    jsproto.BinaryExtension.poolCursor_--;\n    result \x3d jsproto.BinaryExtension.pool_[jsproto.BinaryExtension.poolCursor_];\n    jsproto.BinaryExtension.pool_[jsproto.BinaryExtension.poolCursor_] \x3d null;\n  } else {\n    result \x3d new jsproto.BinaryExtension();\n  }\n  goog.asserts.assert(result);\n  result.init(field, opt_value,\n              opt_buffer, opt_start, opt_end, opt_info);\n  return result;\n};\n\n\n/**\n * @param {jsproto.BinaryExtension} extension\n */\njsproto.BinaryExtension.free \x3d function(extension) {\n  if (!extension) return;\n  extension.recycle();\n\n  extension.field \x3d -1;\n  extension.buffer \x3d null;\n  extension.start \x3d null;\n  extension.end \x3d null;\n  extension.info \x3d null;\n  extension.value \x3d null;\n\n  var cursor \x3d jsproto.BinaryExtension.poolCursor_;\n  if (cursor \x3c jsproto.BinaryExtension.MAX_POOL_SIZE) {\n    jsproto.BinaryExtension.pool_[cursor] \x3d extension;\n    jsproto.BinaryExtension.poolCursor_++;\n  }\n};\n\n\n/**\n * Gets the raw bytes for the extension.\n * @return {Uint8Array}\n */\njsproto.BinaryExtension.prototype.getBytes \x3d function() {\n  if ((this.buffer !\x3d null) \x26\x26 (this.start !\x3d null) \x26\x26 (this.end !\x3d null)) {\n    return new Uint8Array(this.buffer.buffer,\n                          this.buffer.byteOffset + this.start,\n                          this.end - this.start);\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * Dematerializes a message extension. Any changes to the extension proto will\n * be lost!\n */\njsproto.BinaryExtension.prototype.recycle \x3d function() {\n  if ((this.buffer \x3d\x3d null) || (this.start \x3d\x3d null) || (this.end \x3d\x3d null) ||\n      (this.info \x3d\x3d null) || (this.value \x3d\x3d null)) {\n    return;\n  }\n\n  if (this.info.recycler) {\n    this.info.recycler(/** @type {!jsproto.BinaryMessage} */(this.value));\n  }\n  this.value \x3d null;\n};\n\n\n/**\n * Helper method, returns true if an extension with the given field number\n * exists.\n * @param {Array\x3c!jsproto.BinaryExtension\x3e} extensions\n * @param {number} field\n * @return {boolean}\n */\njsproto.BinaryExtension.hasExtension \x3d function(extensions, field) {\n  if (!extensions) return false;\n  for (var i \x3d 0; i \x3c extensions.length; i++) {\n    if (extensions[i].field \x3d\x3d field) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Sets a extension by value, creating a new BinaryExtension wrapper object\n * around it if it was not already present on the message.\n * @param {!Array\x3c!jsproto.BinaryExtension\x3e} extensions\n * @param {Array\x3c!jsproto.BinaryExtensionType\x3e} registry\n * @param {number} field\n * @param {jspb.AnyFieldType} value\n */\njsproto.BinaryExtension.setExtension \x3d\n    function(extensions, registry, field, value) {\n  // Find the type info for this extension. If it\x27s not present,\n  // we can\x27t create it from an unknown value.\n  var info \x3d null;\n  if (registry) {\n    for (var i \x3d 0; i \x3c registry.length; i++) {\n      if (registry[i].field \x3d\x3d field) {\n        info \x3d registry[i];\n        break;\n      }\n    }\n  }\n  if (!info) {\n    goog.asserts.fail(\x22Can\x27t find type info for extension\x22);\n    return;\n  }\n\n  // Ok, we\x27ve got type info. Wrap the unknown value in an extension object.\n  var newExtension \x3d jsproto.BinaryExtension.alloc(field, value,\n                                                   null, null, null,\n                                                   info);\n\n  // If the extension was already present on the message, replace it with the\n  // new one.\n  for (var i \x3d 0; i \x3c extensions.length; i++) {\n    var extension \x3d extensions[i];\n    if (extension \x26\x26 extension.field \x3d\x3d field) {\n      extensions[i] \x3d newExtension;\n      return;\n    }\n  }\n\n  // Otherwise just append it.\n  extensions.push(newExtension);\n};\n\n\n/**\n * Removes an extension by field number.\n * @param {?Array\x3c!jsproto.BinaryExtension\x3e} extensions\n * @param {number} field\n */\njsproto.BinaryExtension.clearExtension \x3d function(extensions, field) {\n  if (extensions \x3d\x3d null) return;\n  for (var i \x3d 0; i \x3c extensions.length; i++) {\n    var extension \x3d extensions[i];\n    if (extension \x26\x26 extension.field \x3d\x3d field) {\n      extensions.splice(i, 1);\n      return;\n    }\n  }\n};\n\n\n/**\n * Returns the BinaryExtension object associated with the extension field\n * number, if present.\n * @param {!Array\x3c!jsproto.BinaryExtension\x3e} extensions\n * @param {number} field\n * @return {jsproto.BinaryExtension}\n */\njsproto.BinaryExtension.getRawExtension \x3d function(extensions, field) {\n  for (var i \x3d 0; i \x3c extensions.length; i++) {\n    if (extensions[i].field \x3d\x3d field) {\n      return extensions[i];\n    }\n  }\n  return null;\n};\n\n\n/**\n * Adds a BinaryExtension object to the message, replacing any with a matching\n * extension field number if one was already present.\n * @param {!Array\x3c!jsproto.BinaryExtension\x3e} extensions\n * @param {!jsproto.BinaryExtension} value\n */\njsproto.BinaryExtension.setRawExtension \x3d function(extensions, value) {\n  for (var i \x3d 0; i \x3c extensions.length; i++) {\n    var extension \x3d extensions[i];\n    if (extension \x26\x26 extension.field \x3d\x3d value.field) {\n      extensions[i] \x3d value;\n      return;\n    }\n  }\n\n  extensions.push(value);\n};\n\n\n/**\n * Makes a deep copy of an array of extensions.\n * @param {?Array\x3c!jsproto.BinaryExtension\x3e} extensions\n * @return {?Array\x3c!jsproto.BinaryExtension\x3e}\n */\njsproto.BinaryExtension.cloneExtensions \x3d function(extensions) {\n  if (extensions \x3d\x3d null) return null;\n  var result \x3d [];\n\n  for (var i \x3d 0; i \x3c extensions.length; i++) {\n    var extension \x3d extensions[i];\n    var clone \x3d new jsproto.BinaryExtension();\n    clone.field \x3d extension.field;\n    if (extension.value !\x3d null \x26\x26 extension.info !\x3d null) {\n      clone.info \x3d extension.info;\n      if (extension.info.cloner) {\n        clone.value \x3d extension.info.cloner(\n            /** @type {?jspb.ConstBinaryMessage}*/ (extension.value));\n      } else if (\n          extension.info.fieldType \x3d\x3d jspb.BinaryConstants.FieldType.BYTES) {\n        goog.asserts.assert(extension.value);\n        clone.value \x3d\n            new Uint8Array(/** @type {!Uint8Array}*/ (extension.value));\n      } else {\n        clone.value \x3d extension.value;\n      }\n    } else if (\n        extension.buffer !\x3d null \x26\x26 extension.start !\x3d null \x26\x26\n        extension.end !\x3d null) {\n      clone.buffer \x3d new Uint8Array(\n            extension.buffer.buffer.slice(extension.start, extension.end));\n      clone.start \x3d 0;\n      clone.end \x3d extension.end - extension.start;\n    }\n    result.push(clone);\n  }\n\n  return result;\n};\n\n\n/**\n * Registers a new extension type with the given class. This is safe to do at\n * runtime as long as all the fields in the message type you\x27re registering\n * share a compatible wire format with the ones in the original extension.\n * Extensions should be registered before any messages using that extension are\n * deserialized - this will be done automatically if the extension field is\n * flagged with the \x22js_extension\x22 attribute, otherwise you should do it at\n * application startup.\n * @param {!Array\x3c!jsproto.BinaryExtensionType\x3e} extensionRegistry\n * @param {number} field\n * @param {jspb.BinaryConstants.FieldType} fieldType\n * @param {jspb.BuilderFunction\x3d} opt_builder\n * @param {jspb.RecyclerFunction\x3d} opt_recycler\n * @param {jspb.ReaderFunction\x3d} opt_reader\n * @param {function(MessageType, !jspb.BinaryWriter)\x3d} opt_writer\n * @param {jspb.PrunerFunction\x3d} opt_pruner\n * @param {jspb.ClonerFunction\x3d} opt_cloner\n * @param {jspb.ComparerFunction\x3d} opt_comparer\n * @template MessageType\n */\njsproto.BinaryExtension.registerExtension \x3d function(\n    extensionRegistry, field, fieldType, opt_builder, opt_recycler, opt_reader,\n    opt_writer, opt_pruner, opt_cloner, opt_comparer) {\n  var info \x3d new jsproto.BinaryExtensionType(\n      field, fieldType, opt_builder, opt_recycler, opt_reader, opt_writer,\n      opt_pruner, opt_cloner, opt_comparer);\n\n  // Replace existing extension if present, otherwise add it.\n  for (var i \x3d 0; i \x3c extensionRegistry.length; i++) {\n    if (extensionRegistry[i].field \x3d\x3d field) {\n      extensionRegistry[i] \x3d info;\n      return;\n    }\n  }\n  extensionRegistry.push(info);\n};\n\n\n/**\n * Set the raw name of a registered extension. Only called if goog.DEBUG is\n * true.\n * @param {!Array\x3c!jsproto.BinaryExtensionType\x3e} extensionRegistry\n * @param {number} field\n * @param {string} rawName\n */\njsproto.BinaryExtension.registerExtensionDebugName \x3d\n    function(extensionRegistry, field, rawName) {\n  for (var i \x3d 0; i \x3c extensionRegistry.length; i++) {\n    if (extensionRegistry[i].field \x3d\x3d field) {\n      extensionRegistry[i].rawName \x3d rawName;\n      return;\n    }\n  }\n};\n\n//# sourceURL\x3dhttps://qs/net/proto2/contrib/js_proto/public/binary_extension.js\n");

$googDebugFname=undefined;
var $googDebugFname="net/proto2/contrib/js_proto/public/binary_serializer.js";
eval("/**\n * @fileoverview Helper methods that don\x27t fit cleanly inside other classes\n * and/or that we don\x27t want to put in the binary proto template to save code\n * size.\n *\n * Note - A \x27field block\x27 as mentioned here is a block of bytes with the\n * proto-standard field tag and (optional) field length at the beginning of\n * it.\n *\n * @author aappleby@google.com (Austin Appleby)\n */\n\ngoog.provide(\x27jsproto.AnyFieldType\x27);\ngoog.provide(\x27jsproto.BinaryConstants\x27);\ngoog.provide(\x27jsproto.BinaryDecoder\x27);\ngoog.provide(\x27jsproto.BinaryIterator\x27);\ngoog.provide(\x27jsproto.BinaryMessage\x27);\ngoog.provide(\x27jsproto.BinaryReader\x27);\ngoog.provide(\x27jsproto.BinarySerializer\x27);\ngoog.provide(\x27jsproto.BinaryWriter\x27);\ngoog.provide(\x27jsproto.ByteSource\x27);\ngoog.provide(\x27jsproto.ConstBinaryMessage\x27);\ngoog.provide(\x27jsproto.utils\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27jspb.AnyFieldType\x27);\ngoog.require(\x27jspb.BinaryConstants\x27);\ngoog.require(\x27jspb.BinaryDecoder\x27);\ngoog.require(\x27jspb.BinaryIterator\x27);\ngoog.require(\x27jspb.BinaryMessage\x27);\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.BuilderFunction\x27);\ngoog.require(\x27jspb.ByteSource\x27);\ngoog.require(\x27jspb.ConstBinaryMessage\x27);\ngoog.require(\x27jspb.ReaderFunction\x27);\ngoog.require(\x27jspb.utils\x27);\ngoog.require(\x27jsproto.BinaryExtension\x27);\n\n\n/** @const */\njsproto.utils \x3d jspb.utils;\n\n\n/** @const */\njsproto.BinaryConstants \x3d jspb.BinaryConstants;\n\n\n/* For functionality that has been moved to jspb, we alias the old names\n * to the new jspb names to avoid breaking existing users. */\n\n\n/** @typedef {jspb.BinaryReader} */\njsproto.BinaryReader \x3d jspb.BinaryReader;\n\n\n/** @typedef {jspb.BinaryDecoder} */\njsproto.BinaryDecoder \x3d jspb.BinaryDecoder;\n\n\n/** @typedef {jspb.BinaryIterator} */\njsproto.BinaryIterator \x3d jspb.BinaryIterator;\n\n\n/** @typedef {jspb.BinaryMessage} */\njsproto.BinaryMessage \x3d jspb.BinaryMessage;\n\n\n/** @typedef {jspb.ConstBinaryMessage} */\njsproto.ConstBinaryMessage \x3d jspb.ConstBinaryMessage;\n\n\n/** @typedef {jspb.BinaryWriter} */\njsproto.BinaryWriter \x3d jspb.BinaryWriter;\n\n\n/** @typedef {jspb.ByteSource} */\njsproto.ByteSource;\n\n\n/** @typedef {jspb.AnyFieldType} */\njsproto.AnyFieldType;\n\n\n/**\n * Gets a BinaryDecoder instance for the given field block. Returns an empty\n * decoder if the field block is missing or empty.\n * @param {Uint8Array\x3d} opt_buffer\n * @param {?number\x3d} opt_start\n * @param {?number\x3d} opt_end\n * @return {!jspb.BinaryDecoder}\n */\njsproto.BinarySerializer.getDecoder \x3d function(opt_buffer, opt_start, opt_end) {\n  if (opt_buffer \x26\x26 (opt_start !\x3d null) \x26\x26 (opt_end !\x3d null)) {\n    var decoder \x3d\n        jspb.BinaryDecoder.alloc(opt_buffer, opt_start, opt_end - opt_start);\n    // Skip tag.\n    decoder.readUnsignedVarint32();\n    // Skip length.\n    decoder.readUnsignedVarint32();\n    return decoder;\n  } else {\n    // No data to decode, return an empty decoder.\n    return jspb.BinaryDecoder.alloc();\n  }\n};\n\n\n/**\n * Gets a BinaryReader instance for the given field block. Returns an empty\n * reader if the field block is missing or empty.\n * @param {Uint8Array\x3d} opt_buffer\n * @param {?number\x3d} opt_start\n * @param {?number\x3d} opt_end\n * @return {!jspb.BinaryReader}\n */\njsproto.BinarySerializer.getReader \x3d function(opt_buffer, opt_start, opt_end) {\n  if (opt_buffer \x26\x26 (opt_start !\x3d null) \x26\x26 (opt_end !\x3d null)) {\n    var reader \x3d\n        jspb.BinaryReader.alloc(opt_buffer, opt_start, opt_end - opt_start);\n    return reader;\n  } else {\n    // No data to decode, return an empty reader.\n    return jspb.BinaryReader.alloc();\n  }\n};\n\n\n/**\n * Gets a BinaryIterator instance for the given field block. Returns an empty\n * iterator if the field block is missing or empty.\n * @param {Uint8Array\x3d} opt_buffer\n * @param {?number\x3d} opt_start\n * @param {?number\x3d} opt_end\n * @param {?function(this:jspb.BinaryDecoder):(number|boolean|string)\x3d}\n *     opt_next The decoder method to use for next().\n * @return {!jspb.BinaryIterator}\n */\njsproto.BinarySerializer.getIterator \x3d function(\n    opt_buffer, opt_start, opt_end, opt_next) {\n  if (opt_buffer \x26\x26 (opt_start !\x3d null) \x26\x26 (opt_end !\x3d null) \x26\x26 opt_next) {\n    var decoder \x3d\n        jspb.BinaryDecoder.alloc(opt_buffer, opt_start, opt_end - opt_start);\n    // Skip tag.\n    decoder.readUnsignedVarint32();\n    // Skip length.\n    decoder.readUnsignedVarint32();\n    return jspb.BinaryIterator.alloc(decoder, opt_next, null);\n  } else {\n    return jspb.BinaryIterator.alloc();\n  }\n};\n\n\n/**\n * Clones a scalar field. Pulling this out to a helper method saves us a few\n * bytes of generated code.\n * @param {Array} array\n * @return {Array}\n */\njsproto.BinarySerializer.cloneRepeatedScalarField \x3d function(array) {\n  return array ? array.slice() : null;\n};\n\n\n/**\n * Clones an array of messages using the provided cloner function.\n * @param {Array\x3cjspb.BinaryMessage\x3e} messages\n * @param {jspb.ClonerFunction} cloner\n * @return {Array\x3cjspb.BinaryMessage\x3e}\n */\njsproto.BinarySerializer.cloneRepeatedMessageField \x3d function(\n    messages, cloner) {\n  if (messages \x3d\x3d\x3d null) return null;\n  var result \x3d [];\n  for (var i \x3d 0; i \x3c messages.length; i++) {\n    result.push(cloner(messages[i]));\n  }\n  return result;\n};\n\n\n/**\n * Clones an array of byte blobs.\n * @param {Array\x3cUint8Array\x3e} blobs\n * @return {Array\x3cUint8Array\x3e}\n */\njsproto.BinarySerializer.cloneRepeatedBlobField \x3d function(blobs) {\n  if (blobs \x3d\x3d\x3d null) return null;\n  var result \x3d [];\n  for (var i \x3d 0; i \x3c blobs.length; i++) {\n    result.push(new Uint8Array(blobs[i]));\n  }\n  return result;\n};\n\n\n/**\n * @param {?Array\x3cjspb.ScalarFieldType\x3e|?Uint8Array} fieldA\n * @param {?Array\x3cjspb.ScalarFieldType\x3e|?Uint8Array} fieldB\n * @return {boolean}\n */\njsproto.BinarySerializer.compareRepeatedScalarField \x3d function(fieldA, fieldB) {\n  var lengthA \x3d fieldA ? fieldA.length : 0;\n  var lengthB \x3d fieldB ? fieldB.length : 0;\n  if (lengthA !\x3d lengthB) return false;\n\n  for (var i \x3d 0; i \x3c lengthA; ++i) {\n    if (fieldA[i] !\x3d fieldB[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * @param {?Array\x3c!Uint8Array\x3e} fieldA\n * @param {?Array\x3c!Uint8Array\x3e} fieldB\n * @return {boolean}\n */\njsproto.BinarySerializer.compareRepeatedBlobField \x3d function(fieldA, fieldB) {\n  var lengthA \x3d fieldA ? fieldA.length : 0;\n  var lengthB \x3d fieldB ? fieldB.length : 0;\n  if (lengthA !\x3d lengthB) return false;\n\n  for (var i \x3d 0; i \x3c lengthA; ++i) {\n    if (!jsproto.BinarySerializer.compareRepeatedScalarField(\n        fieldA[i], fieldB[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * @param {?Array\x3cjspb.ConstBinaryMessage\x3e} fieldA\n * @param {?Array\x3cjspb.ConstBinaryMessage\x3e} fieldB\n * @param {!jspb.ComparerFunction} comparer\n * @return {boolean}\n */\njsproto.BinarySerializer.compareRepeatedMessageField \x3d function(\n    fieldA, fieldB, comparer) {\n  var lengthA \x3d fieldA ? fieldA.length : 0;\n  var lengthB \x3d fieldB ? fieldB.length : 0;\n  if (lengthA !\x3d lengthB) return false;\n\n  for (var i \x3d 0; i \x3c lengthA; ++i) {\n    if (!comparer(fieldA[i], fieldB[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * Does an _order_ _sensitive_ comparison of two lists of extensions.\n * @param {?Array\x3c!jsproto.BinaryExtension\x3e} extensionsA\n * @param {?Array\x3c!jsproto.BinaryExtension\x3e} extensionsB\n * @return {boolean}\n */\njsproto.BinarySerializer.compareExtensions \x3d function(\n    extensionsA, extensionsB) {\n  var lengthA \x3d extensionsA ? extensionsA.length : 0;\n  var lengthB \x3d extensionsB ? extensionsB.length : 0;\n  if (lengthA !\x3d lengthB) return false;\n\n  for (var i \x3d 0; i \x3c lengthA; i++) {\n    var extensionA \x3d extensionsA[i];\n    var extensionB \x3d extensionsB[i];\n    if (extensionA.info !\x3d\x3d extensionB.info) {\n      return false;\n    }\n    if (extensionA.info.comparer) {\n      if (!extensionA.info.comparer(\n          /** @type {?jspb.ConstBinaryMessage}*/ (extensionA.value),\n          /** @type {?jspb.ConstBinaryMessage}*/ (extensionB.value))) {\n        return false;\n      }\n    } else if (\n        extensionA.info.fieldType \x3d\x3d jspb.BinaryConstants.FieldType.BYTES) {\n      if (!jsproto.BinarySerializer.compareRepeatedScalarField(\n          /** @type {?Uint8Array}*/ (extensionA.value),\n          /** @type {?Uint8Array}*/ (extensionB.value))) {\n        return false;\n      }\n    } else {\n      if (extensionA.value !\x3d extensionB.value) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n\n/**\n * Creates an array of numbers (or booleans) from the given field block.\n * Returns null if the field block is missing or empty.\n * @param {!function(this:jspb.BinaryDecoder)} decodeMethod Which method on\n *     BinaryDecoder we should use to decode each scalar.\n * @param {Uint8Array\x3d} opt_buffer\n * @param {?number\x3d} opt_start\n * @param {?number\x3d} opt_end\n * @return {Array\x3c*\x3e}\n */\njsproto.BinarySerializer.materializeRepeatedScalarField \x3d\n    function(decodeMethod, opt_buffer, opt_start, opt_end) {\n  if (opt_buffer \x26\x26 (opt_start !\x3d null) \x26\x26 (opt_end !\x3d null)) {\n    var decoder \x3d\n        jspb.BinaryDecoder.alloc(opt_buffer, opt_start, opt_end - opt_start);\n    var result \x3d [];\n    while (!decoder.atEnd()) {\n      // Skip tag.\n      decoder.readUnsignedVarint32();\n      result.push(decodeMethod.call(decoder));\n    }\n    decoder.free();\n    return result;\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * Creates an array of numbers (or booleans) from the given field block.\n * Returns null if the field block is missing or empty.\n * @param {!function(this:jspb.BinaryDecoder)} decodeMethod\n * @param {Uint8Array\x3d} opt_buffer\n * @param {?number\x3d} opt_start\n * @param {?number\x3d} opt_end\n * @return {Array\x3c*\x3e}\n */\njsproto.BinarySerializer.materializePackedScalarField \x3d\n    function(decodeMethod, opt_buffer, opt_start, opt_end) {\n  if (opt_buffer \x26\x26 (opt_start !\x3d null) \x26\x26 (opt_end !\x3d null)) {\n    var decoder \x3d\n        jspb.BinaryDecoder.alloc(opt_buffer, opt_start, opt_end - opt_start);\n\n    // Skip tag.\n    decoder.readUnsignedVarint32();\n    // Skip length.\n    decoder.readUnsignedVarint32();\n\n    var result \x3d [];\n    while (!decoder.atEnd()) {\n      result.push(decodeMethod.call(decoder));\n    }\n    decoder.free();\n    return result;\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * Creates a Uint8Array for the given field block. Returns null if the field\n * block is missing or empty.\n * @param {Uint8Array\x3d} opt_buffer\n * @param {?number\x3d} opt_start\n * @param {?number\x3d} opt_end\n * @return {Uint8Array}\n */\njsproto.BinarySerializer.materializeSingularBytesField \x3d\n    function(opt_buffer, opt_start, opt_end) {\n  if (opt_buffer \x26\x26 (opt_start !\x3d null) \x26\x26 (opt_end !\x3d null)) {\n    var stream \x3d\n        jspb.BinaryReader.alloc(opt_buffer, opt_start, opt_end - opt_start);\n    stream.nextField();\n    var result \x3d stream.readBytes();\n    stream.free();\n    return result;\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * Creates an array of Uint8Arrays for the given field block. Returns null if\n * the field block is missing or empty.\n * @param {Uint8Array\x3d} opt_buffer\n * @param {?number\x3d} opt_start\n * @param {?number\x3d} opt_end\n * @return {Array\x3c!Uint8Array\x3e}\n */\njsproto.BinarySerializer.materializeRepeatedBytesField \x3d\n    function(opt_buffer, opt_start, opt_end) {\n  if (opt_buffer \x26\x26 (opt_start !\x3d null) \x26\x26 (opt_end !\x3d null)) {\n    var results \x3d [];\n    var stream \x3d\n        jspb.BinaryReader.alloc(opt_buffer, opt_start, opt_end - opt_start);\n    while (stream.nextField()) {\n      results.push(stream.readBytes());\n    }\n    stream.free();\n    return results;\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * Generically converts a field block into a message object. Returns null if\n * the field block is missing or empty.\n * @param {jspb.BuilderFunction} buildCallback\n * @param {jspb.ReaderFunction} readCallback\n * @param {Uint8Array\x3d} opt_buffer\n * @param {?number\x3d} opt_start\n * @param {?number\x3d} opt_end\n * @return {jspb.BinaryMessage}\n */\njsproto.BinarySerializer.materializeSingularMessageField \x3d\n    function(buildCallback, readCallback, opt_buffer, opt_start, opt_end) {\n  if (opt_buffer \x26\x26 (opt_start !\x3d null) \x26\x26 (opt_end !\x3d null)) {\n    var result \x3d buildCallback();\n    var stream \x3d\n        jspb.BinaryReader.alloc(opt_buffer, opt_start, opt_end - opt_start);\n    stream.nextField();\n    stream.readMessage(result, readCallback);\n    stream.free();\n    return result;\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * Generically converts an array of field blocks into message objects.\n * @param {jspb.BuilderFunction} buildCallback\n * @param {jspb.ReaderFunction} readCallback\n * @param {Uint8Array\x3d} opt_buffer\n * @param {?number\x3d} opt_start\n * @param {?number\x3d} opt_end\n * @return {Array\x3c!jspb.BinaryMessage\x3e}\n */\njsproto.BinarySerializer.materializeRepeatedMessageField \x3d\n    function(buildCallback, readCallback, opt_buffer, opt_start, opt_end) {\n  if (opt_buffer \x26\x26 (opt_start !\x3d null) \x26\x26 (opt_end !\x3d null)) {\n    var results \x3d [];\n    var stream \x3d\n        jspb.BinaryReader.alloc(opt_buffer, opt_start, opt_end - opt_start);\n    while (stream.nextField()) {\n      var result \x3d buildCallback();\n      stream.readMessage(result, readCallback);\n      results.push(result);\n    }\n    stream.free();\n    return results;\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * Materializes a message extension. Does nothing if the extension\x27s field\n * block or type info are missing.\n * @param {!jsproto.BinaryExtension} extension\n * @return {?jspb.AnyFieldType}\n */\njsproto.BinarySerializer.materializeExtension \x3d function(extension) {\n  if ((extension \x3d\x3d null) ||\n      (extension.info \x3d\x3d null) ||\n      (extension.buffer \x3d\x3d null) ||\n      (extension.start \x3d\x3d null) ||\n      (extension.end \x3d\x3d null)) {\n    return null;\n  }\n\n  var stream \x3d jspb.BinaryReader.alloc(\n      extension.buffer, extension.start, extension.end - extension.start);\n  stream.nextField();\n  if (extension.info.builder \x26\x26 extension.info.reader) {\n    extension.value \x3d extension.info.builder();\n    stream.readMessage(extension.value, extension.info.reader);\n  } else {\n    extension.value \x3d stream.readAny(extension.info.fieldType);\n  }\n  stream.free();\n\n  extension.buffer \x3d null;\n  extension.start \x3d null;\n  extension.end \x3d null;\n\n  return extension.value;\n};\n\n\n/**\n * Returns the decoded value of the extension, or null if we were unable to\n * decode the extension due to not knowing its type.\n * @param {Array\x3c!jsproto.BinaryExtension\x3e} extensions\n * @param {number} field\n * @return {?jspb.AnyFieldType}\n */\njsproto.BinarySerializer.getExtension \x3d function(extensions, field) {\n  if (!extensions) return null;\n  var extension \x3d jsproto.BinaryExtension.getRawExtension(extensions, field);\n  if (!extension || !extension.info) {\n    return null;\n  }\n\n  if (extension.value) {\n    return extension.value;\n  }\n\n  return jsproto.BinarySerializer.materializeExtension(extension);\n};\n\n\n/**\n * Returns a mutable instance of the given field\x27s extension type, or null if\n * we were unable to determine the extension type.\n * @param {!Array\x3c!jsproto.BinaryExtension\x3e} extensions\n * @param {Array\x3c!jsproto.BinaryExtensionType\x3e} registry\n * @param {number} field\n * @return {?jspb.BinaryMessage}\n */\njsproto.BinarySerializer.mutableExtension \x3d\n    function(extensions, registry, field) {\n  var extension \x3d jsproto.BinarySerializer.getExtension(extensions, field);\n  if (extension) return /** @type {jspb.BinaryMessage} */ (extension);\n\n  // Extension not found, let\x27s create one.\n\n  var info \x3d null;\n  if (registry) {\n    for (var i \x3d 0; i \x3c registry.length; i++) {\n      if (registry[i].field \x3d\x3d field) {\n        info \x3d registry[i];\n        break;\n      }\n    }\n  }\n  if (!info) {\n    goog.asserts.fail(\x22Can\x27t find type info for extension.\x22);\n    return null;\n  }\n\n  if (info.fieldType !\x3d jsproto.BinaryConstants.FieldType.MESSAGE) {\n    goog.asserts.fail(\x22Can\x27t create non-message extensions.\x22);\n    return null;\n  }\n\n  if (info.builder \x3d\x3d null) {\n    goog.asserts.fail(\x22Extension\x27s builder is missing.\x22);\n    return null;\n  }\n\n  var instance \x3d info.builder();\n  jsproto.BinaryExtension.setExtension(extensions, registry, field, instance);\n  return instance;\n};\n\n\n/**\n * Reads an extension.\n * @param {jspb.BinaryReader} reader\n * @param {Array\x3c!jsproto.BinaryExtensionType\x3e\x3d} opt_registry\n * @return {!jsproto.BinaryExtension}\n */\njsproto.BinarySerializer.readExtension \x3d function(reader, opt_registry) {\n  var field \x3d reader.getFieldNumber();\n  var buffer \x3d reader.getBuffer();\n\n  // Our start/end pair brackets the entire field, including the field tag\n  // and the (optional) length value.\n  var start \x3d reader.getFieldCursor();\n  reader.skipField();\n  var end \x3d reader.getCursor();\n\n  goog.asserts.assert(buffer);\n\n  // Find the corresponding extension info, if it was registered.\n  var info \x3d null;\n  if (opt_registry) {\n    for (var i \x3d 0; i \x3c opt_registry.length; i++) {\n      var tempInfo \x3d opt_registry[i];\n      if (tempInfo.field \x3d\x3d field) {\n        info \x3d tempInfo;\n        break;\n      }\n    }\n  }\n\n  return jsproto.BinaryExtension.alloc(field, null,\n                                       buffer, start, end,\n                                       info);\n};\n\n\n/**\n * Writes an opaque extension to the buffer.\n * @param {!jsproto.BinaryExtension} extension\n * @param {!jspb.BinaryWriter} writer\n */\njsproto.BinarySerializer.writeExtension \x3d function(extension, writer) {\n  // If we have a pre-serialized field block, just dump it to the buffer.\n  if ((extension.buffer !\x3d null) \x26\x26\n      (extension.start !\x3d null) \x26\x26\n      (extension.end !\x3d null)) {\n    writer.writeSerializedMessage(extension.buffer, extension.start,\n                                  extension.end);\n  } else if (extension.value !\x3d null \x26\x26 extension.info !\x3d null) {\n    // Otherwise we use the type info to pick the correct serializer.\n    var info \x3d extension.info;\n    if (info.fieldType \x3d\x3d jsproto.BinaryConstants.FieldType.MESSAGE) {\n      if (info.writer) {\n        var message \x3d\n            /** @type {!jspb.ConstBinaryMessage} */ (extension.value);\n        writer.writeMessage(extension.field, message, info.writer);\n      } else {\n        goog.asserts.fail(\x27Can\\\x27t serialize extension, writer not found\x27);\n      }\n    } else {\n      writer.writeAny(info.fieldType, extension.field, extension.value);\n    }\n  }\n};\n\n\n/**\n * Writes an array of opaque extensions to the buffer.\n * @param {Array\x3c!jsproto.BinaryExtension\x3e} extensions\n * @param {!jspb.BinaryWriter} writer\n */\njsproto.BinarySerializer.writeExtensions \x3d function(extensions, writer) {\n  if (!extensions || !extensions.length) return;\n\n  // Extensions must be written in sorted order, as the reader makes\n  // assumptions that that\x27s the case.\n  extensions.sort(function(a, b) {\n    return a.field - b.field;\n  });\n\n  for (var i \x3d 0; i \x3c extensions.length; i++) {\n    jsproto.BinarySerializer.writeExtension(extensions[i], writer);\n  }\n};\n\n\n/**\n * Recursively removes prunable items from the object/array. Returns null if\n * everything was completely pruned away, otherwise returns the object/array.\n * This function is polymorphic, do not use in hot code.\n * @param {?jspb.AnyFieldType} variant\n * @param {jspb.PrunerFunction\x3d} opt_pruner\n * @return {?jspb.AnyFieldType}\n */\njsproto.BinarySerializer.pruneVariant \x3d function(variant, opt_pruner) {\n  if (variant \x3d\x3d null) return null;\n\n  var type \x3d variant.constructor;\n\n  // Scalar types are never pruned, as we dont\x27 know what their default value\n  // should be here (that information is only in the codegen\x27d file).\n  if ((type \x3d\x3d Boolean) || (type \x3d\x3d Number) || (type \x3d\x3d String)) {\n    return variant;\n  }\n\n  // Uint8Arrays are pruned if they\x27re empty.\n  if (type \x3d\x3d Uint8Array) {\n    variant \x3d /** @type {!Uint8Array} */(variant);\n    if (variant.length \x3d\x3d 0) return null;\n    return variant;\n  }\n\n  // Regular arrays get all prunable elements removed and the whole array is\n  // pruned if it ends up empty.\n  if (type \x3d\x3d Array) {\n    var array \x3d /** @type {Array} */(variant);\n    var cursor \x3d 0;\n    for (var i \x3d 0; i \x3c array.length; i++) {\n      var temp \x3d jsproto.BinarySerializer.pruneVariant(array[i], opt_pruner);\n      if (temp !\x3d\x3d null) {\n        array[cursor++] \x3d temp;\n      }\n    }\n    if (cursor \x3d\x3d 0) return null;\n    array.length \x3d cursor;\n    return array;\n  }\n\n  if (type \x3d\x3d jsproto.BinaryExtension) {\n    variant \x3d /** @type {jsproto.BinaryExtension} */(variant);\n    if ((variant.buffer !\x3d null) \x26\x26 (variant.start !\x3d null)) {\n      return variant;\n    }\n    if (variant.info \x26\x26 variant.info.pruner) {\n      var message \x3d /** @type {jspb.BinaryMessage} */ (variant.value);\n      variant.value \x3d /** @type {jspb.BinaryMessage} */\n          (variant.info.pruner(message));\n    } else {\n      variant.value \x3d jsproto.BinarySerializer.pruneVariant(variant.value);\n    }\n    return variant.value ? variant : null;\n  }\n\n  var message \x3d /** @type {jspb.BinaryMessage} */ (variant);\n  return opt_pruner ? opt_pruner(message) : variant;\n};\n\n//# sourceURL\x3dhttps://qs/net/proto2/contrib/js_proto/public/binary_serializer.js\n");

$googDebugFname=undefined;
var $googDebugFname="logs/proto/visual_element/eventid-protos-js-binary.js";
eval("\n/**\n * @fileoverview This file was automatically generated by\n * net/proto2/contrib/js_proto; do not modify it directly.\n * @suppress {missingRequire,extraRequire}\n */\ngoog.provide(\x27binary.ClientEventIdMessage\x27);\ngoog.provide(\x27binary.ConstClientEventIdMessage\x27);\ngoog.provide(\x27binary.ConstEventIdMessage\x27);\ngoog.provide(\x27binary.EventIdMessage\x27);\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27jspb.BinaryMessage\x27);\ngoog.require(\x27jspb.ConstBinaryMessage\x27);\ngoog.require(\x27jsproto.BinarySerializer\x27);\ngoog.require(\x27goog.crypt.base64\x27);\n//------------------------------------------------------------------------------\n// Global Enums - these come first as they may be referenced by the classes\n// below.\n//------------------------------------------------------------------------------\n// Const interface methods.\n/**\n * @extends {jspb.ConstBinaryMessage}\n * @interface\n */\nbinary.ConstEventIdMessage \x3d function() {\n};\n/**\n * Strips all materialized fields off this proto.\n */\nbinary.ConstEventIdMessage.prototype.recycleFields \x3d\n    goog.abstractMethod;\n/**\n * @return {!binary.EventIdMessage}\n */\nbinary.ConstEventIdMessage.prototype.cloneProto \x3d goog.abstractMethod;\n/**\n * Converts a proto into a flat array - field N will be copied to array slot\n * N-1 (or slot N if we\x27re in one-based-arrays mode), hash strings will be\n * converted into decimal strings, packed/repeated scalars will be copied, and\n * nested messages will be recursively array-ified.\n * Does not handle byte blob fields.\n * @return {!Array}\n */\nbinary.ConstEventIdMessage.prototype.toJspbArray \x3d goog.abstractMethod;\n/**\n * Returns true if this message has an extension with the given field number.\n * @param {number} field\n * @return {boolean}\n */\nbinary.ConstEventIdMessage.prototype.hasExtension \x3d\n    goog.abstractMethod;\n/**\n * Retrieves the extension with the given field number.\n * @param {number} field\n * @return {?jspb.AnyFieldType}\n */\nbinary.ConstEventIdMessage.prototype.getExtension \x3d\n    goog.abstractMethod;\n/**\n * Returns the total number of extensions attached to this message.\n * @return {number}\n */\nbinary.ConstEventIdMessage.prototype.getExtensionCount \x3d\n    goog.abstractMethod;\n/**\n * Returns the array of \x27raw\x27 extensions (known and unknown) associated with\n * this message.\n * @return {!Array\x3c!jsproto.BinaryExtension\x3e}\n */\nbinary.ConstEventIdMessage.prototype.getRawExtensionArray \x3d\n    goog.abstractMethod;\n//------------------------------------------------------------------------------\n// Const interface per-field methods.\n/**\n * Every field gets a \x27hasField()\x27 method.\n * @return {boolean}\n */\nbinary.ConstEventIdMessage.prototype.hasTimeUsec \x3d\n    goog.abstractMethod;\n/**\n * Singular fields get a \x27getField()\x27 method.\n * @return {!string}\n */\nbinary.ConstEventIdMessage.prototype.getTimeUsec \x3d\n    goog.abstractMethod;\n/**\n * Every field gets a \x27hasField()\x27 method.\n * @return {boolean}\n */\nbinary.ConstEventIdMessage.prototype.hasServerIp \x3d\n    goog.abstractMethod;\n/**\n * Singular fields get a \x27getField()\x27 method.\n * @return {!number}\n */\nbinary.ConstEventIdMessage.prototype.getServerIp \x3d\n    goog.abstractMethod;\n/**\n * Every field gets a \x27hasField()\x27 method.\n * @return {boolean}\n */\nbinary.ConstEventIdMessage.prototype.hasProcessId \x3d\n    goog.abstractMethod;\n/**\n * Singular fields get a \x27getField()\x27 method.\n * @return {!number}\n */\nbinary.ConstEventIdMessage.prototype.getProcessId \x3d\n    goog.abstractMethod;\n//------------------------------------------------------------------------------\n/**\n * Message class constructor.\n * @implements {binary.ConstEventIdMessage}\n * @implements {jspb.BinaryMessage}\n * @constructor\n * @struct\n */\nbinary.EventIdMessage \x3d function() {\n  /** @private {string|null} */\n  this.timeUsec_ \x3d null;\n  /** @private {number|null} */\n  this.serverIp_ \x3d null;\n  /** @private {number|null} */\n  this.processId_ \x3d null;\n};\n/** @typedef {!binary.ConstEventIdMessage} */\nbinary.EventIdMessage.Const;\n\n//------------------------------------------------------------------------------\n// Const interface methods.\n/**\n * @extends {jspb.ConstBinaryMessage}\n * @interface\n */\nbinary.ConstClientEventIdMessage \x3d function() {\n};\n/**\n * Strips all materialized fields off this proto.\n */\nbinary.ConstClientEventIdMessage.prototype.recycleFields \x3d\n    goog.abstractMethod;\n/**\n * @return {!binary.ClientEventIdMessage}\n */\nbinary.ConstClientEventIdMessage.prototype.cloneProto \x3d goog.abstractMethod;\n/**\n * Converts a proto into a flat array - field N will be copied to array slot\n * N-1 (or slot N if we\x27re in one-based-arrays mode), hash strings will be\n * converted into decimal strings, packed/repeated scalars will be copied, and\n * nested messages will be recursively array-ified.\n * Does not handle byte blob fields.\n * @return {!Array}\n */\nbinary.ConstClientEventIdMessage.prototype.toJspbArray \x3d goog.abstractMethod;\n/**\n * Returns true if this message has an extension with the given field number.\n * @param {number} field\n * @return {boolean}\n */\nbinary.ConstClientEventIdMessage.prototype.hasExtension \x3d\n    goog.abstractMethod;\n/**\n * Retrieves the extension with the given field number.\n * @param {number} field\n * @return {?jspb.AnyFieldType}\n */\nbinary.ConstClientEventIdMessage.prototype.getExtension \x3d\n    goog.abstractMethod;\n/**\n * Returns the total number of extensions attached to this message.\n * @return {number}\n */\nbinary.ConstClientEventIdMessage.prototype.getExtensionCount \x3d\n    goog.abstractMethod;\n/**\n * Returns the array of \x27raw\x27 extensions (known and unknown) associated with\n * this message.\n * @return {!Array\x3c!jsproto.BinaryExtension\x3e}\n */\nbinary.ConstClientEventIdMessage.prototype.getRawExtensionArray \x3d\n    goog.abstractMethod;\n//------------------------------------------------------------------------------\n// Const interface per-field methods.\n/**\n * Every field gets a \x27hasField()\x27 method.\n * @return {boolean}\n */\nbinary.ConstClientEventIdMessage.prototype.hasBase \x3d\n    goog.abstractMethod;\n/**\n * Singular fields get a \x27getField()\x27 method.\n * @return {!binary.EventIdMessage.Const}\n */\nbinary.ConstClientEventIdMessage.prototype.getBase \x3d\n    goog.abstractMethod;\n/**\n * Message fields get a \x27recycleField()\x27 method.\n */\nbinary.ConstClientEventIdMessage.prototype.recycleBase \x3d\n    goog.abstractMethod;\n/**\n * Every field gets a \x27hasField()\x27 method.\n * @return {boolean}\n */\nbinary.ConstClientEventIdMessage.prototype.hasClientCounter \x3d\n    goog.abstractMethod;\n/**\n * Singular fields get a \x27getField()\x27 method.\n * @return {!string}\n */\nbinary.ConstClientEventIdMessage.prototype.getClientCounter \x3d\n    goog.abstractMethod;\n//------------------------------------------------------------------------------\n/**\n * Message class constructor.\n * @implements {binary.ConstClientEventIdMessage}\n * @implements {jspb.BinaryMessage}\n * @constructor\n * @struct\n */\nbinary.ClientEventIdMessage \x3d function() {\n  /** @private {binary.EventIdMessage|null} */\n  this.base_ \x3d null;\n  /** @private {string|null} */\n  this.clientCounter_ \x3d null;\n};\n/** @typedef {!binary.ConstClientEventIdMessage} */\nbinary.ClientEventIdMessage.Const;\n\n//------------------------------------------------------------------------------\n// readFrom()/writeTo() methods.\n/**\n * Deserializes a message from a BinaryReader\n * @param {!jspb.BinaryReader} reader\n */\nbinary.EventIdMessage.prototype.readFrom \x3d function(reader) {\n  while (reader.nextField()) {\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */\n     (reader.readVarintHash64());\n      this.timeUsec_ \x3d value;\n      break;\n    case 2:\n      var value \x3d /** @type {number} */\n     (reader.readFixed32());\n      this.serverIp_ \x3d value;\n      break;\n    case 3:\n      var value \x3d /** @type {number} */\n     (reader.readFixed32());\n      this.processId_ \x3d value;\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n};\n/**\n * Serializes this proto to a BinaryWriter.\n * @param {!jspb.BinaryWriter} writer\n */\nbinary.EventIdMessage.prototype.writeTo \x3d function(writer) {\n  writer.writeVarintHash64(1, this.timeUsec_);\n  writer.writeFixed32(2, this.serverIp_);\n  writer.writeFixed32(3, this.processId_);\n};\n//------------------------------------------------------------------------------\n/** @override */\nbinary.EventIdMessage.prototype.toJspbArray \x3d function() {\n  var result \x3d [];\n  if (this.timeUsec_ !\x3d\x3d null) {\n    var value \x3d this.timeUsec_;\n    value \x3d jspb.utils.hash64ToDecimalString(value, true);\n    result[1 + -1] \x3d value;\n  }\n  if (this.serverIp_ !\x3d\x3d null) {\n    var value \x3d this.serverIp_;\n    result[2 + -1] \x3d value;\n  }\n  if (this.processId_ !\x3d\x3d null) {\n    var value \x3d this.processId_;\n    result[3 + -1] \x3d value;\n  }\n  return result;\n};\n//------------------------------------------------------------------------------\n/**\n * Performs a deep copy of the source proto into this proto, erasing the\n * contents of this proto in the process.\n * @param {!binary.EventIdMessage} src\n */\nbinary.EventIdMessage.prototype.copyProto \x3d function(src) {\n  var dest \x3d this;\n  dest.clearProto();\n  dest.timeUsec_ \x3d src.timeUsec_;\n  dest.serverIp_ \x3d src.serverIp_;\n  dest.processId_ \x3d src.processId_;\n};\n//------------------------------------------------------------------------------\n/**\n * @return {!binary.EventIdMessage}\n * @override\n */\nbinary.EventIdMessage.prototype.cloneProto \x3d function() {\n  var dest \x3d binary.EventIdMessage.alloc();\n  dest.copyProto(this);\n  return dest;\n};\n//------------------------------------------------------------------------------\n/**\n * Returns true if two protos are deeply equal to each other.\n * @param {!binary.EventIdMessage} other\n * @return {boolean}\n */\nbinary.EventIdMessage.prototype.equalsProto \x3d function(other) {\n  if (this.timeUsec_ !\x3d\x3d other.timeUsec_) {\n    return false;\n  }\n  if (this.serverIp_ !\x3d\x3d other.serverIp_) {\n    return false;\n  }\n  if (this.processId_ !\x3d\x3d other.processId_) {\n    return false;\n  }\n  return true;\n};\n//------------------------------------------------------------------------------\nif (goog.DEBUG) {\n  /** @override */\n  binary.EventIdMessage.prototype.toDebugString \x3d function() {\n    return this.toDebugStringInternal(0);\n  };\n  /** @override */\n  binary.EventIdMessage.prototype.toDebugStringInternal \x3d\n      function(indentLevel) {\n    var buffer \x3d [];\n    var indent \x3d new Array(1 + indentLevel).join(\x27 \x27);\n    if (this.hasTimeUsec()) {\n      {\n        var value \x3d this.getTimeUsec();\n        var scalar \x3d\n            jspb.utils.hash64ToDecimalString(value, true);\n        buffer.push(\x27time_usec: \x27 + scalar\n            );\n      }\n    }\n    if (this.hasServerIp()) {\n      {\n        var value \x3d this.getServerIp();\n        var scalar \x3d jspb.utils.debugScalarToTextFormat(value);\n        buffer.push(\x27server_ip: \x27 + scalar\n            );\n      }\n    }\n    if (this.hasProcessId()) {\n      {\n        var value \x3d this.getProcessId();\n        var scalar \x3d jspb.utils.debugScalarToTextFormat(value);\n        buffer.push(\x27process_id: \x27 + scalar\n            );\n      }\n    }\n    return buffer.join(\x27\\n\x27 + indent);\n  };\n}\n//------------------------------------------------------------------------------\n/**\n * Prunes all fields of this message that are equal to their default value.\n * Returns null if all fields were pruned away, otherwise returns \x27this\x27.\n * @return {binary.EventIdMessage}\n */\nbinary.EventIdMessage.prototype.pruneProto \x3d function() {\n  var alive \x3d false;\n  if (this.timeUsec_ \x3d\x3d jspb.BinaryConstants.ZERO_HASH) {\n    this.timeUsec_ \x3d null;\n  }\n  alive \x3d alive || (this.timeUsec_ !\x3d null);\n  if (this.serverIp_ \x3d\x3d 0) {\n    this.serverIp_ \x3d null;\n  }\n  alive \x3d alive || (this.serverIp_ !\x3d null);\n  if (this.processId_ \x3d\x3d 0) {\n    this.processId_ \x3d null;\n  }\n  alive \x3d alive || (this.processId_ !\x3d null);\n  return alive ? this : null;\n};\n//------------------------------------------------------------------------------\n/**\n * Clears all fields of the proto.\n */\nbinary.EventIdMessage.prototype.clearProto \x3d function() {\n  this.timeUsec_ \x3d null;\n  this.serverIp_ \x3d null;\n  this.processId_ \x3d null;\n};\n//------------------------------------------------------------------------------\n/**\n * Dematerializes all materialized fields in this proto.\n * @override\n */\nbinary.EventIdMessage.prototype.recycleFields \x3d function() {\n};\n//------------------------------------------------------------------------------\n// Stub extension methods for classes that define no extension ranges.\n/**\n * Returns true if this message has an extension with the given field number.\n * @param {number} field\n * @return {boolean}\n * @override\n */\nbinary.EventIdMessage.prototype.hasExtension \x3d function(field) {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n  return false;\n};\n/**\n * Removes an extension in this message.\n * @param {number} field\n */\nbinary.EventIdMessage.prototype.clearExtension \x3d function(field) {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n};\n/**\n * Retrieves the extension with the given field number.\n * @param {number} field\n * @return {?jspb.AnyFieldType}\n * @override\n */\nbinary.EventIdMessage.prototype.getExtension \x3d function(field) {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n  return null;\n};\n/**\n * Returns the total number of extensions attached to this message.\n * @return {number}\n * @override\n */\nbinary.EventIdMessage.prototype.getExtensionCount \x3d function() {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n  return 0;\n};\n/**\n * @return {!Array\x3c!jsproto.BinaryExtension\x3e}\n * @override\n */\nbinary.EventIdMessage.prototype.getRawExtensionArray \x3d function() {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n  return [];\n};\n/**\n * Gets a mutable copy of an extension in this message, creating it if it\n * isn\x27t present. Only valid for extensions that are messages.\n * @param {number} field\n * @return {jspb.BinaryMessage}\n */\nbinary.EventIdMessage.prototype.mutableExtension \x3d function(field) {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n  return null;\n};\n/**\n * Sets an extension in this message.\n * @param {number} field\n * @param {jspb.AnyFieldType} value\n */\nbinary.EventIdMessage.prototype.setExtension \x3d function(field, value) {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n};\n//------------------------------------------------------------------------------\n// Alloc/free for messages that don\x27t use instance pools.\n/**\n * @return {!binary.EventIdMessage}\n */\nbinary.EventIdMessage.alloc \x3d function() {\n  return new binary.EventIdMessage();\n};\n/**\n * @param {binary.ConstEventIdMessage} constProto\n */\nbinary.EventIdMessage.free \x3d function(constProto) {\n  var proto \x3d /** @type {binary.EventIdMessage} */(constProto);\n  if (proto) proto.clearProto();\n};\n//------------------------------------------------------------------------------\n// Static helper methods.\n/**\n * @return {!jspb.BinaryMessage}\n */\nbinary.EventIdMessage.builder \x3d function() {\n  return binary.EventIdMessage.alloc();\n};\n/**\n * @param {jspb.ConstBinaryMessage} message\n * @return {jspb.BinaryMessage}\n */\nbinary.EventIdMessage.cloner \x3d function(message) {\n  if (message \x3d\x3d\x3d null) return null;\n  var message2 \x3d /** @type {!binary.EventIdMessage} */(message);\n  return message2.cloneProto();\n};\n/**\n * @param {!jspb.BinaryMessage} message\n */\nbinary.EventIdMessage.recycler \x3d function(message) {\n  var message2 \x3d /** @type {!binary.EventIdMessage} */(message);\n  message2.recycleFields();\n};\n/**\n * @param {!jspb.BinaryMessage} message\n * @param {!jspb.BinaryReader} stream\n */\nbinary.EventIdMessage.reader \x3d function(message, stream) {\n  var message2 \x3d /** @type {!binary.EventIdMessage} */(message);\n  message2.readFrom(stream);\n};\n/**\n * @param {!binary.EventIdMessage} message\n * @param {!jspb.BinaryWriter} stream\n */\nbinary.EventIdMessage.writer \x3d function(message, stream) {\n  message.writeTo(stream);\n};\n/**\n * @param {jspb.BinaryMessage} message\n * @return {jspb.BinaryMessage}\n */\nbinary.EventIdMessage.pruner \x3d function(message) {\n  var message2 \x3d /** @type {!binary.EventIdMessage} */(message);\n  return message2.pruneProto();\n};\n/**\n * @param {?jspb.ConstBinaryMessage} messageA\n * @param {?jspb.ConstBinaryMessage} messageB\n */\nbinary.EventIdMessage.comparer \x3d function(messageA, messageB) {\n  messageA \x3d /** @type {?binary.EventIdMessage} */(messageA);\n  messageB \x3d /** @type {?binary.EventIdMessage} */(messageB);\n  if (messageA \x3d\x3d\x3d messageB) return true;\n  if (messageA \x3d\x3d\x3d null) return false;\n  if (messageB \x3d\x3d\x3d null) return false;\n  goog.asserts.assert(messageA.constructor \x3d\x3d\x3d binary.EventIdMessage);\n  goog.asserts.assert(messageB.constructor \x3d\x3d\x3d binary.EventIdMessage);\n  return messageA.equalsProto(messageB);\n};\n/**\n * Creates a new instance of this message type, deserialized the byte source\n * into it, and returns it.\n * @param {!jspb.ByteSource} data\n * @return {!binary.EventIdMessage}\n */\nbinary.EventIdMessage.readFrom \x3d function(data) {\n  var instance \x3d binary.EventIdMessage.alloc();\n  var reader \x3d jspb.BinaryReader.alloc(data);\n  instance.readFrom(reader);\n  reader.free();\n  return instance;\n};\n//------------------------------------------------------------------------------\n// binary.EventIdMessage.timeUsec methods\n/**\n * hasField() for all fields.\n * @override\n */\nbinary.EventIdMessage.prototype.hasTimeUsec \x3d function() {\n  if (this.timeUsec_ !\x3d null) return true;\n  return false;\n};\n/**\n * clearField() for all fields.\n */\nbinary.EventIdMessage.prototype.clearTimeUsec \x3d function() {\n  this.timeUsec_ \x3d null;\n};\n/**\n * getField() for singular fields.\n * @override\n */\nbinary.EventIdMessage.prototype.getTimeUsec \x3d function() {\n  if (this.timeUsec_ \x3d\x3d null) {\n    return jspb.BinaryConstants.ZERO_HASH;\n  }\n  return /** @type {!string}*/(this.timeUsec_);\n};\n/**\n * setField(value) for singular fields.\n * @param {!string} value\n */\nbinary.EventIdMessage.prototype.setTimeUsec \x3d function(value) {\n  this.timeUsec_ \x3d value;\n};\n//------------------------------------------------------------------------------\n// binary.EventIdMessage.serverIp methods\n/**\n * hasField() for all fields.\n * @override\n */\nbinary.EventIdMessage.prototype.hasServerIp \x3d function() {\n  if (this.serverIp_ !\x3d null) return true;\n  return false;\n};\n/**\n * clearField() for all fields.\n */\nbinary.EventIdMessage.prototype.clearServerIp \x3d function() {\n  this.serverIp_ \x3d null;\n};\n/**\n * getField() for singular fields.\n * @override\n */\nbinary.EventIdMessage.prototype.getServerIp \x3d function() {\n  if (this.serverIp_ \x3d\x3d null) {\n    return 0;\n  }\n  return /** @type {!number}*/(this.serverIp_);\n};\n/**\n * setField(value) for singular fields.\n * @param {!number} value\n */\nbinary.EventIdMessage.prototype.setServerIp \x3d function(value) {\n  this.serverIp_ \x3d value;\n};\n//------------------------------------------------------------------------------\n// binary.EventIdMessage.processId methods\n/**\n * hasField() for all fields.\n * @override\n */\nbinary.EventIdMessage.prototype.hasProcessId \x3d function() {\n  if (this.processId_ !\x3d null) return true;\n  return false;\n};\n/**\n * clearField() for all fields.\n */\nbinary.EventIdMessage.prototype.clearProcessId \x3d function() {\n  this.processId_ \x3d null;\n};\n/**\n * getField() for singular fields.\n * @override\n */\nbinary.EventIdMessage.prototype.getProcessId \x3d function() {\n  if (this.processId_ \x3d\x3d null) {\n    return 0;\n  }\n  return /** @type {!number}*/(this.processId_);\n};\n/**\n * setField(value) for singular fields.\n * @param {!number} value\n */\nbinary.EventIdMessage.prototype.setProcessId \x3d function(value) {\n  this.processId_ \x3d value;\n};\n//------------------------------------------------------------------------------\n// readFrom()/writeTo() methods.\n/**\n * Deserializes a message from a BinaryReader\n * @param {!jspb.BinaryReader} reader\n */\nbinary.ClientEventIdMessage.prototype.readFrom \x3d function(reader) {\n  while (reader.nextField()) {\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d binary.EventIdMessage.alloc();\n      reader.readMessage(value, binary.EventIdMessage.reader);\n      this.base_ \x3d value;\n      break;\n    case 2:\n      var value \x3d /** @type {string} */\n     (reader.readVarintHash64());\n      this.clientCounter_ \x3d value;\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n};\n/**\n * Serializes this proto to a BinaryWriter.\n * @param {!jspb.BinaryWriter} writer\n */\nbinary.ClientEventIdMessage.prototype.writeTo \x3d function(writer) {\n  writer.writeMessage(1, this.base_,\n      binary.EventIdMessage.writer);\n  writer.writeVarintHash64(2, this.clientCounter_);\n};\n//------------------------------------------------------------------------------\n/** @override */\nbinary.ClientEventIdMessage.prototype.toJspbArray \x3d function() {\n  var result \x3d [];\n  if (this.base_ !\x3d\x3d null) {\n    var value \x3d this.base_;\n    value \x3d value.toJspbArray();\n    result[1 + -1] \x3d value;\n  }\n  if (this.clientCounter_ !\x3d\x3d null) {\n    var value \x3d this.clientCounter_;\n    value \x3d jspb.utils.hash64ToDecimalString(value, true);\n    result[2 + -1] \x3d value;\n  }\n  return result;\n};\n//------------------------------------------------------------------------------\n/**\n * Performs a deep copy of the source proto into this proto, erasing the\n * contents of this proto in the process.\n * @param {!binary.ClientEventIdMessage} src\n */\nbinary.ClientEventIdMessage.prototype.copyProto \x3d function(src) {\n  var dest \x3d this;\n  dest.clearProto();\n  dest.base_ \x3d\n      src.base_ ? src.base_.cloneProto() : null;\n  dest.clientCounter_ \x3d src.clientCounter_;\n};\n//------------------------------------------------------------------------------\n/**\n * @return {!binary.ClientEventIdMessage}\n * @override\n */\nbinary.ClientEventIdMessage.prototype.cloneProto \x3d function() {\n  var dest \x3d binary.ClientEventIdMessage.alloc();\n  dest.copyProto(this);\n  return dest;\n};\n//------------------------------------------------------------------------------\n/**\n * Returns true if two protos are deeply equal to each other.\n * @param {!binary.ClientEventIdMessage} other\n * @return {boolean}\n */\nbinary.ClientEventIdMessage.prototype.equalsProto \x3d function(other) {\n  if (!binary.EventIdMessage.comparer(\n      this.base_, other.base_)) {\n    return false;\n  }\n  if (this.clientCounter_ !\x3d\x3d other.clientCounter_) {\n    return false;\n  }\n  return true;\n};\n//------------------------------------------------------------------------------\nif (goog.DEBUG) {\n  /** @override */\n  binary.ClientEventIdMessage.prototype.toDebugString \x3d function() {\n    return this.toDebugStringInternal(0);\n  };\n  /** @override */\n  binary.ClientEventIdMessage.prototype.toDebugStringInternal \x3d\n      function(indentLevel) {\n    var buffer \x3d [];\n    var indent \x3d new Array(1 + indentLevel).join(\x27 \x27);\n    if (this.hasBase()) {\n      {\n        var value \x3d this.getBase();\n        buffer.push(\x27base {\x27\n        );\n        buffer.push(\x27  \x27 + value.toDebugStringInternal(indentLevel + 2));\n        buffer.push(\x27} #base \x27\n        );\n      }\n    }\n    if (this.hasClientCounter()) {\n      {\n        var value \x3d this.getClientCounter();\n        var scalar \x3d\n            jspb.utils.hash64ToDecimalString(value, true);\n        buffer.push(\x27client_counter: \x27 + scalar\n            );\n      }\n    }\n    return buffer.join(\x27\\n\x27 + indent);\n  };\n}\n//------------------------------------------------------------------------------\n/**\n * Prunes all fields of this message that are equal to their default value.\n * Returns null if all fields were pruned away, otherwise returns \x27this\x27.\n * @return {binary.ClientEventIdMessage}\n */\nbinary.ClientEventIdMessage.prototype.pruneProto \x3d function() {\n  var alive \x3d false;\n  this.base_ \x3d /** @type {binary.EventIdMessage} */\n      (jsproto.BinarySerializer.pruneVariant(this.base_\n      ,binary.EventIdMessage.pruner\n      ));\n  alive \x3d alive || (this.base_ !\x3d null);\n  if (this.clientCounter_ \x3d\x3d jspb.BinaryConstants.ZERO_HASH) {\n    this.clientCounter_ \x3d null;\n  }\n  alive \x3d alive || (this.clientCounter_ !\x3d null);\n  return alive ? this : null;\n};\n//------------------------------------------------------------------------------\n/**\n * Clears all fields of the proto.\n */\nbinary.ClientEventIdMessage.prototype.clearProto \x3d function() {\n  binary.EventIdMessage.free(this.base_);\n  this.base_ \x3d null;\n  this.clientCounter_ \x3d null;\n};\n//------------------------------------------------------------------------------\n/**\n * Dematerializes all materialized fields in this proto.\n * @override\n */\nbinary.ClientEventIdMessage.prototype.recycleFields \x3d function() {\n};\n//------------------------------------------------------------------------------\n// Stub extension methods for classes that define no extension ranges.\n/**\n * Returns true if this message has an extension with the given field number.\n * @param {number} field\n * @return {boolean}\n * @override\n */\nbinary.ClientEventIdMessage.prototype.hasExtension \x3d function(field) {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n  return false;\n};\n/**\n * Removes an extension in this message.\n * @param {number} field\n */\nbinary.ClientEventIdMessage.prototype.clearExtension \x3d function(field) {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n};\n/**\n * Retrieves the extension with the given field number.\n * @param {number} field\n * @return {?jspb.AnyFieldType}\n * @override\n */\nbinary.ClientEventIdMessage.prototype.getExtension \x3d function(field) {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n  return null;\n};\n/**\n * Returns the total number of extensions attached to this message.\n * @return {number}\n * @override\n */\nbinary.ClientEventIdMessage.prototype.getExtensionCount \x3d function() {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n  return 0;\n};\n/**\n * @return {!Array\x3c!jsproto.BinaryExtension\x3e}\n * @override\n */\nbinary.ClientEventIdMessage.prototype.getRawExtensionArray \x3d function() {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n  return [];\n};\n/**\n * Gets a mutable copy of an extension in this message, creating it if it\n * isn\x27t present. Only valid for extensions that are messages.\n * @param {number} field\n * @return {jspb.BinaryMessage}\n */\nbinary.ClientEventIdMessage.prototype.mutableExtension \x3d function(field) {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n  return null;\n};\n/**\n * Sets an extension in this message.\n * @param {number} field\n * @param {jspb.AnyFieldType} value\n */\nbinary.ClientEventIdMessage.prototype.setExtension \x3d function(field, value) {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n};\n//------------------------------------------------------------------------------\n// Alloc/free for messages that don\x27t use instance pools.\n/**\n * @return {!binary.ClientEventIdMessage}\n */\nbinary.ClientEventIdMessage.alloc \x3d function() {\n  return new binary.ClientEventIdMessage();\n};\n/**\n * @param {binary.ConstClientEventIdMessage} constProto\n */\nbinary.ClientEventIdMessage.free \x3d function(constProto) {\n  var proto \x3d /** @type {binary.ClientEventIdMessage} */(constProto);\n  if (proto) proto.clearProto();\n};\n//------------------------------------------------------------------------------\n// Static helper methods.\n/**\n * @return {!jspb.BinaryMessage}\n */\nbinary.ClientEventIdMessage.builder \x3d function() {\n  return binary.ClientEventIdMessage.alloc();\n};\n/**\n * @param {jspb.ConstBinaryMessage} message\n * @return {jspb.BinaryMessage}\n */\nbinary.ClientEventIdMessage.cloner \x3d function(message) {\n  if (message \x3d\x3d\x3d null) return null;\n  var message2 \x3d /** @type {!binary.ClientEventIdMessage} */(message);\n  return message2.cloneProto();\n};\n/**\n * @param {!jspb.BinaryMessage} message\n */\nbinary.ClientEventIdMessage.recycler \x3d function(message) {\n  var message2 \x3d /** @type {!binary.ClientEventIdMessage} */(message);\n  message2.recycleFields();\n};\n/**\n * @param {!jspb.BinaryMessage} message\n * @param {!jspb.BinaryReader} stream\n */\nbinary.ClientEventIdMessage.reader \x3d function(message, stream) {\n  var message2 \x3d /** @type {!binary.ClientEventIdMessage} */(message);\n  message2.readFrom(stream);\n};\n/**\n * @param {!binary.ClientEventIdMessage} message\n * @param {!jspb.BinaryWriter} stream\n */\nbinary.ClientEventIdMessage.writer \x3d function(message, stream) {\n  message.writeTo(stream);\n};\n/**\n * @param {jspb.BinaryMessage} message\n * @return {jspb.BinaryMessage}\n */\nbinary.ClientEventIdMessage.pruner \x3d function(message) {\n  var message2 \x3d /** @type {!binary.ClientEventIdMessage} */(message);\n  return message2.pruneProto();\n};\n/**\n * @param {?jspb.ConstBinaryMessage} messageA\n * @param {?jspb.ConstBinaryMessage} messageB\n */\nbinary.ClientEventIdMessage.comparer \x3d function(messageA, messageB) {\n  messageA \x3d /** @type {?binary.ClientEventIdMessage} */(messageA);\n  messageB \x3d /** @type {?binary.ClientEventIdMessage} */(messageB);\n  if (messageA \x3d\x3d\x3d messageB) return true;\n  if (messageA \x3d\x3d\x3d null) return false;\n  if (messageB \x3d\x3d\x3d null) return false;\n  goog.asserts.assert(messageA.constructor \x3d\x3d\x3d binary.ClientEventIdMessage);\n  goog.asserts.assert(messageB.constructor \x3d\x3d\x3d binary.ClientEventIdMessage);\n  return messageA.equalsProto(messageB);\n};\n/**\n * Creates a new instance of this message type, deserialized the byte source\n * into it, and returns it.\n * @param {!jspb.ByteSource} data\n * @return {!binary.ClientEventIdMessage}\n */\nbinary.ClientEventIdMessage.readFrom \x3d function(data) {\n  var instance \x3d binary.ClientEventIdMessage.alloc();\n  var reader \x3d jspb.BinaryReader.alloc(data);\n  instance.readFrom(reader);\n  reader.free();\n  return instance;\n};\n//------------------------------------------------------------------------------\n// binary.ClientEventIdMessage.base methods\n/**\n * hasField() for all fields.\n * @override\n */\nbinary.ClientEventIdMessage.prototype.hasBase \x3d function() {\n  if (this.base_ !\x3d null) return true;\n  return false;\n};\n/**\n * clearField() for all fields.\n */\nbinary.ClientEventIdMessage.prototype.clearBase \x3d function() {\n  this.base_ \x3d null;\n};\n/**\n * getField() for singular fields.\n * @override\n */\nbinary.ClientEventIdMessage.prototype.getBase \x3d function() {\n  if (this.base_ \x3d\x3d\x3d null) {\n    this.base_ \x3d binary.EventIdMessage.alloc();\n  }\n  return /** @type {!binary.EventIdMessage.Const}*/(this.base_);\n};\n/**\n * setField(value) for singular fields.\n * @param {!binary.EventIdMessage} value\n */\nbinary.ClientEventIdMessage.prototype.setBase \x3d function(value) {\n  this.base_ \x3d value;\n};\n/**\n * mutableField() methods for singular message fields.\n * @return {!binary.EventIdMessage}\n */\nbinary.ClientEventIdMessage.prototype.mutableBase \x3d function() {\n  if (this.base_ \x3d\x3d\x3d null) {\n    this.base_ \x3d binary.EventIdMessage.alloc();\n  }\n  var value \x3d this.base_;\n  goog.asserts.assert(value);\n  return value;\n};\n/**\n * recycleField() methods for message fields.\n * @override\n */\nbinary.ClientEventIdMessage.prototype.recycleBase \x3d function() {\n  if (this.base_ \x3d\x3d null) return;\n  binary.EventIdMessage.free(this.base_);\n  this.base_ \x3d null;\n};\n//------------------------------------------------------------------------------\n// binary.ClientEventIdMessage.clientCounter methods\n/**\n * hasField() for all fields.\n * @override\n */\nbinary.ClientEventIdMessage.prototype.hasClientCounter \x3d function() {\n  if (this.clientCounter_ !\x3d null) return true;\n  return false;\n};\n/**\n * clearField() for all fields.\n */\nbinary.ClientEventIdMessage.prototype.clearClientCounter \x3d function() {\n  this.clientCounter_ \x3d null;\n};\n/**\n * getField() for singular fields.\n * @override\n */\nbinary.ClientEventIdMessage.prototype.getClientCounter \x3d function() {\n  if (this.clientCounter_ \x3d\x3d null) {\n    return jspb.BinaryConstants.ZERO_HASH;\n  }\n  return /** @type {!string}*/(this.clientCounter_);\n};\n/**\n * setField(value) for singular fields.\n * @param {!string} value\n */\nbinary.ClientEventIdMessage.prototype.setClientCounter \x3d function(value) {\n  this.clientCounter_ \x3d value;\n};\n//------------------------------------------------------------------------------\n// Extension methods\n\n//# sourceURL\x3dhttps://qs/logs/proto/visual_element/eventid-protos-js-binary.js\n");

$googDebugFname=undefined;
var $googDebugFname="logs/proto/visual_element/visual_element_offset_identifier-js-binary.js";
eval("\n/**\n * @fileoverview This file was automatically generated by\n * net/proto2/contrib/js_proto; do not modify it directly.\n * @suppress {missingRequire,extraRequire}\n */\ngoog.provide(\x27logs.binary.ConstVeOffsetIdentifier\x27);\ngoog.provide(\x27logs.binary.VeOffsetIdentifier\x27);\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27jspb.BinaryMessage\x27);\ngoog.require(\x27jspb.ConstBinaryMessage\x27);\ngoog.require(\x27jsproto.BinarySerializer\x27);\ngoog.require(\x27goog.crypt.base64\x27);\n//------------------------------------------------------------------------------\n// Global Enums - these come first as they may be referenced by the classes\n// below.\n//------------------------------------------------------------------------------\n// Const interface methods.\n/**\n * @extends {jspb.ConstBinaryMessage}\n * @interface\n */\nlogs.binary.ConstVeOffsetIdentifier \x3d function() {\n};\n/**\n * Strips all materialized fields off this proto.\n */\nlogs.binary.ConstVeOffsetIdentifier.prototype.recycleFields \x3d\n    goog.abstractMethod;\n/**\n * @return {!logs.binary.VeOffsetIdentifier}\n */\nlogs.binary.ConstVeOffsetIdentifier.prototype.cloneProto \x3d goog.abstractMethod;\n/**\n * Converts a proto into a flat array - field N will be copied to array slot\n * N-1 (or slot N if we\x27re in one-based-arrays mode), hash strings will be\n * converted into decimal strings, packed/repeated scalars will be copied, and\n * nested messages will be recursively array-ified.\n * Does not handle byte blob fields.\n * @return {!Array}\n */\nlogs.binary.ConstVeOffsetIdentifier.prototype.toJspbArray \x3d goog.abstractMethod;\n/**\n * Returns true if this message has an extension with the given field number.\n * @param {number} field\n * @return {boolean}\n */\nlogs.binary.ConstVeOffsetIdentifier.prototype.hasExtension \x3d\n    goog.abstractMethod;\n/**\n * Retrieves the extension with the given field number.\n * @param {number} field\n * @return {?jspb.AnyFieldType}\n */\nlogs.binary.ConstVeOffsetIdentifier.prototype.getExtension \x3d\n    goog.abstractMethod;\n/**\n * Returns the total number of extensions attached to this message.\n * @return {number}\n */\nlogs.binary.ConstVeOffsetIdentifier.prototype.getExtensionCount \x3d\n    goog.abstractMethod;\n/**\n * Returns the array of \x27raw\x27 extensions (known and unknown) associated with\n * this message.\n * @return {!Array\x3c!jsproto.BinaryExtension\x3e}\n */\nlogs.binary.ConstVeOffsetIdentifier.prototype.getRawExtensionArray \x3d\n    goog.abstractMethod;\n//------------------------------------------------------------------------------\n// Const interface per-field methods.\n/**\n * Every field gets a \x27hasField()\x27 method.\n * @return {boolean}\n */\nlogs.binary.ConstVeOffsetIdentifier.prototype.hasBase \x3d\n    goog.abstractMethod;\n/**\n * Repeated fields get a \x27getField(i)\x27 method.\n * @param {number} i\n * @return {!number}\n */\nlogs.binary.ConstVeOffsetIdentifier.prototype.getBase \x3d\n    goog.abstractMethod;\n/**\n * Repeated fields get a \x27fieldSize()\x27 method.\n * @return {number}\n */\nlogs.binary.ConstVeOffsetIdentifier.prototype.baseSize \x3d\n    goog.abstractMethod;\n/**\n * Repeated fields get a \x27getFieldArray()\x27 method.\n * @return {!Array\x3c!number\x3e}\n */\nlogs.binary.ConstVeOffsetIdentifier.prototype.getBaseArray \x3d\n    goog.abstractMethod;\n/**\n * Repeated scalar fields get a \x27getIterator()\x27 method.\n * @return {!jspb.BinaryIterator}\n */\nlogs.binary.ConstVeOffsetIdentifier.prototype.getBaseIterator \x3d\n    goog.abstractMethod;\n/**\n * Every field gets a \x27hasField()\x27 method.\n * @return {boolean}\n */\nlogs.binary.ConstVeOffsetIdentifier.prototype.hasOffset \x3d\n    goog.abstractMethod;\n/**\n * Singular fields get a \x27getField()\x27 method.\n * @return {!number}\n */\nlogs.binary.ConstVeOffsetIdentifier.prototype.getOffset \x3d\n    goog.abstractMethod;\n//------------------------------------------------------------------------------\n/**\n * Message class constructor.\n * @implements {logs.binary.ConstVeOffsetIdentifier}\n * @implements {jspb.BinaryMessage}\n * @constructor\n * @struct\n */\nlogs.binary.VeOffsetIdentifier \x3d function() {\n  /** @private {Array\x3c!number\x3e|null} */\n  this.base_ \x3d null;\n  /** @private {number|null} */\n  this.offset_ \x3d null;\n};\n/** @typedef {!logs.binary.ConstVeOffsetIdentifier} */\nlogs.binary.VeOffsetIdentifier.Const;\n\n//------------------------------------------------------------------------------\n// readFrom()/writeTo() methods.\n/**\n * Deserializes a message from a BinaryReader\n * @param {!jspb.BinaryReader} reader\n */\nlogs.binary.VeOffsetIdentifier.prototype.readFrom \x3d function(reader) {\n  while (reader.nextField()) {\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {number} */\n     (reader.readInt32());\n      this.base_ \x3d this.base_ || [];\n      this.base_.push(value);\n      break;\n    case 2:\n      var value \x3d /** @type {number} */\n     (reader.readInt32());\n      this.offset_ \x3d value;\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n};\n/**\n * Serializes this proto to a BinaryWriter.\n * @param {!jspb.BinaryWriter} writer\n */\nlogs.binary.VeOffsetIdentifier.prototype.writeTo \x3d function(writer) {\n  writer.writeRepeatedInt32(1, this.base_);\n  writer.writeInt32(2, this.offset_);\n};\n//------------------------------------------------------------------------------\n/** @override */\nlogs.binary.VeOffsetIdentifier.prototype.toJspbArray \x3d function() {\n  var result \x3d [];\n  if (this.base_ !\x3d\x3d null) {\n    var value \x3d this.base_;\n    value \x3d /** @type {!Array\x3c*\x3e} */(value.slice());\n    result[1 + -1] \x3d value;\n  }\n  if (this.offset_ !\x3d\x3d null) {\n    var value \x3d this.offset_;\n    result[2 + -1] \x3d value;\n  }\n  return result;\n};\n//------------------------------------------------------------------------------\n/**\n * Performs a deep copy of the source proto into this proto, erasing the\n * contents of this proto in the process.\n * @param {!logs.binary.VeOffsetIdentifier} src\n */\nlogs.binary.VeOffsetIdentifier.prototype.copyProto \x3d function(src) {\n  var dest \x3d this;\n  dest.clearProto();\n  dest.base_ \x3d\n      jsproto.BinarySerializer.cloneRepeatedScalarField(src.base_);\n  dest.offset_ \x3d src.offset_;\n};\n//------------------------------------------------------------------------------\n/**\n * @return {!logs.binary.VeOffsetIdentifier}\n * @override\n */\nlogs.binary.VeOffsetIdentifier.prototype.cloneProto \x3d function() {\n  var dest \x3d logs.binary.VeOffsetIdentifier.alloc();\n  dest.copyProto(this);\n  return dest;\n};\n//------------------------------------------------------------------------------\n/**\n * Returns true if two protos are deeply equal to each other.\n * @param {!logs.binary.VeOffsetIdentifier} other\n * @return {boolean}\n */\nlogs.binary.VeOffsetIdentifier.prototype.equalsProto \x3d function(other) {\n  if (!jsproto.BinarySerializer.compareRepeatedScalarField(\n      this.base_, other.base_)) {\n    return false;\n  }\n  if (this.offset_ !\x3d\x3d other.offset_) {\n    return false;\n  }\n  return true;\n};\n//------------------------------------------------------------------------------\nif (goog.DEBUG) {\n  /** @override */\n  logs.binary.VeOffsetIdentifier.prototype.toDebugString \x3d function() {\n    return this.toDebugStringInternal(0);\n  };\n  /** @override */\n  logs.binary.VeOffsetIdentifier.prototype.toDebugStringInternal \x3d\n      function(indentLevel) {\n    var buffer \x3d [];\n    var indent \x3d new Array(1 + indentLevel).join(\x27 \x27);\n    if (this.hasBase()) {\n      for (var i \x3d 0; i \x3c this.baseSize(); i++) {\n        var value \x3d this.getBase(i);\n        var scalar \x3d jspb.utils.debugScalarToTextFormat(value);\n        buffer.push(\x27base: \x27 + scalar\n            + \x27 #\x27 + i\n            );\n      }\n    }\n    if (this.hasOffset()) {\n      {\n        var value \x3d this.getOffset();\n        var scalar \x3d jspb.utils.debugScalarToTextFormat(value);\n        buffer.push(\x27offset: \x27 + scalar\n            );\n      }\n    }\n    return buffer.join(\x27\\n\x27 + indent);\n  };\n}\n//------------------------------------------------------------------------------\n/**\n * Prunes all fields of this message that are equal to their default value.\n * Returns null if all fields were pruned away, otherwise returns \x27this\x27.\n * @return {logs.binary.VeOffsetIdentifier}\n */\nlogs.binary.VeOffsetIdentifier.prototype.pruneProto \x3d function() {\n  var alive \x3d false;\n  this.base_ \x3d /** @type {Array\x3c!number\x3e} */\n      (jsproto.BinarySerializer.pruneVariant(this.base_\n      ));\n  alive \x3d alive || (this.base_ !\x3d null);\n  if (this.offset_ \x3d\x3d 0) {\n    this.offset_ \x3d null;\n  }\n  alive \x3d alive || (this.offset_ !\x3d null);\n  return alive ? this : null;\n};\n//------------------------------------------------------------------------------\n/**\n * Clears all fields of the proto.\n */\nlogs.binary.VeOffsetIdentifier.prototype.clearProto \x3d function() {\n  this.base_ \x3d null;\n  this.offset_ \x3d null;\n};\n//------------------------------------------------------------------------------\n/**\n * Dematerializes all materialized fields in this proto.\n * @override\n */\nlogs.binary.VeOffsetIdentifier.prototype.recycleFields \x3d function() {\n};\n//------------------------------------------------------------------------------\n// Stub extension methods for classes that define no extension ranges.\n/**\n * Returns true if this message has an extension with the given field number.\n * @param {number} field\n * @return {boolean}\n * @override\n */\nlogs.binary.VeOffsetIdentifier.prototype.hasExtension \x3d function(field) {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n  return false;\n};\n/**\n * Removes an extension in this message.\n * @param {number} field\n */\nlogs.binary.VeOffsetIdentifier.prototype.clearExtension \x3d function(field) {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n};\n/**\n * Retrieves the extension with the given field number.\n * @param {number} field\n * @return {?jspb.AnyFieldType}\n * @override\n */\nlogs.binary.VeOffsetIdentifier.prototype.getExtension \x3d function(field) {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n  return null;\n};\n/**\n * Returns the total number of extensions attached to this message.\n * @return {number}\n * @override\n */\nlogs.binary.VeOffsetIdentifier.prototype.getExtensionCount \x3d function() {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n  return 0;\n};\n/**\n * @return {!Array\x3c!jsproto.BinaryExtension\x3e}\n * @override\n */\nlogs.binary.VeOffsetIdentifier.prototype.getRawExtensionArray \x3d function() {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n  return [];\n};\n/**\n * Gets a mutable copy of an extension in this message, creating it if it\n * isn\x27t present. Only valid for extensions that are messages.\n * @param {number} field\n * @return {jspb.BinaryMessage}\n */\nlogs.binary.VeOffsetIdentifier.prototype.mutableExtension \x3d function(field) {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n  return null;\n};\n/**\n * Sets an extension in this message.\n * @param {number} field\n * @param {jspb.AnyFieldType} value\n */\nlogs.binary.VeOffsetIdentifier.prototype.setExtension \x3d function(field, value) {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n};\n//------------------------------------------------------------------------------\n// Alloc/free for messages that don\x27t use instance pools.\n/**\n * @return {!logs.binary.VeOffsetIdentifier}\n */\nlogs.binary.VeOffsetIdentifier.alloc \x3d function() {\n  return new logs.binary.VeOffsetIdentifier();\n};\n/**\n * @param {logs.binary.ConstVeOffsetIdentifier} constProto\n */\nlogs.binary.VeOffsetIdentifier.free \x3d function(constProto) {\n  var proto \x3d /** @type {logs.binary.VeOffsetIdentifier} */(constProto);\n  if (proto) proto.clearProto();\n};\n//------------------------------------------------------------------------------\n// Static helper methods.\n/**\n * @return {!jspb.BinaryMessage}\n */\nlogs.binary.VeOffsetIdentifier.builder \x3d function() {\n  return logs.binary.VeOffsetIdentifier.alloc();\n};\n/**\n * @param {jspb.ConstBinaryMessage} message\n * @return {jspb.BinaryMessage}\n */\nlogs.binary.VeOffsetIdentifier.cloner \x3d function(message) {\n  if (message \x3d\x3d\x3d null) return null;\n  var message2 \x3d /** @type {!logs.binary.VeOffsetIdentifier} */(message);\n  return message2.cloneProto();\n};\n/**\n * @param {!jspb.BinaryMessage} message\n */\nlogs.binary.VeOffsetIdentifier.recycler \x3d function(message) {\n  var message2 \x3d /** @type {!logs.binary.VeOffsetIdentifier} */(message);\n  message2.recycleFields();\n};\n/**\n * @param {!jspb.BinaryMessage} message\n * @param {!jspb.BinaryReader} stream\n */\nlogs.binary.VeOffsetIdentifier.reader \x3d function(message, stream) {\n  var message2 \x3d /** @type {!logs.binary.VeOffsetIdentifier} */(message);\n  message2.readFrom(stream);\n};\n/**\n * @param {!logs.binary.VeOffsetIdentifier} message\n * @param {!jspb.BinaryWriter} stream\n */\nlogs.binary.VeOffsetIdentifier.writer \x3d function(message, stream) {\n  message.writeTo(stream);\n};\n/**\n * @param {jspb.BinaryMessage} message\n * @return {jspb.BinaryMessage}\n */\nlogs.binary.VeOffsetIdentifier.pruner \x3d function(message) {\n  var message2 \x3d /** @type {!logs.binary.VeOffsetIdentifier} */(message);\n  return message2.pruneProto();\n};\n/**\n * @param {?jspb.ConstBinaryMessage} messageA\n * @param {?jspb.ConstBinaryMessage} messageB\n */\nlogs.binary.VeOffsetIdentifier.comparer \x3d function(messageA, messageB) {\n  messageA \x3d /** @type {?logs.binary.VeOffsetIdentifier} */(messageA);\n  messageB \x3d /** @type {?logs.binary.VeOffsetIdentifier} */(messageB);\n  if (messageA \x3d\x3d\x3d messageB) return true;\n  if (messageA \x3d\x3d\x3d null) return false;\n  if (messageB \x3d\x3d\x3d null) return false;\n  goog.asserts.assert(messageA.constructor \x3d\x3d\x3d logs.binary.VeOffsetIdentifier);\n  goog.asserts.assert(messageB.constructor \x3d\x3d\x3d logs.binary.VeOffsetIdentifier);\n  return messageA.equalsProto(messageB);\n};\n/**\n * Creates a new instance of this message type, deserialized the byte source\n * into it, and returns it.\n * @param {!jspb.ByteSource} data\n * @return {!logs.binary.VeOffsetIdentifier}\n */\nlogs.binary.VeOffsetIdentifier.readFrom \x3d function(data) {\n  var instance \x3d logs.binary.VeOffsetIdentifier.alloc();\n  var reader \x3d jspb.BinaryReader.alloc(data);\n  instance.readFrom(reader);\n  reader.free();\n  return instance;\n};\n//------------------------------------------------------------------------------\n// logs.binary.VeOffsetIdentifier.base methods\n/**\n * hasField() for all fields.\n * @override\n */\nlogs.binary.VeOffsetIdentifier.prototype.hasBase \x3d function() {\n  if (this.base_ !\x3d null) return true;\n  return false;\n};\n/**\n * clearField() for all fields.\n */\nlogs.binary.VeOffsetIdentifier.prototype.clearBase \x3d function() {\n  this.base_ \x3d null;\n};\n/**\n * fieldSize() for repeated fields.\n * @override\n */\nlogs.binary.VeOffsetIdentifier.prototype.baseSize \x3d function() {\n  return this.base_ ? this.base_.length : 0;\n};\n/**\n * getField(i) for repeated fields.\n * @override\n */\nlogs.binary.VeOffsetIdentifier.prototype.getBase \x3d function(i) {\n  goog.asserts.assert(this.base_);\n  goog.asserts.assert((i \x3e\x3d 0) \x26\x26 (i \x3c this.base_.length));\n  goog.asserts.assert(this.base_[i] !\x3d\x3d null);\n  return this.base_[i];\n};\n/**\n * getFieldArray() for repeated fields.\n * @return {!Array\x3c!number\x3e}\n * @override\n */\nlogs.binary.VeOffsetIdentifier.prototype.getBaseArray \x3d function() {\n  goog.asserts.assert(this.base_);\n  return this.base_;\n};\n/**\n * setFieldArray(value) for repeated fields.\n * @param {!Array\x3c!number\x3e} value\n */\nlogs.binary.VeOffsetIdentifier.prototype.setBaseArray \x3d function(value) {\n  this.base_ \x3d value.slice();\n};\n/**\n * setField(i, value) for repeated fields.\n * @param {number} i\n * @param {!number} value\n */\nlogs.binary.VeOffsetIdentifier.prototype.setBase \x3d function(i, value) {\n  goog.asserts.assert(this.base_);\n  goog.asserts.assert((i \x3e\x3d 0) \x26\x26 (i \x3c this.base_.length));\n  this.base_[i] \x3d value;\n};\n/**\n * getFieldIterator() methods for repeated scalars.\n * @override\n */\nlogs.binary.VeOffsetIdentifier.prototype.getBaseIterator \x3d function() {\n  // Otherwise iterate over the (possibly missing) field.\n  return jspb.BinaryIterator.alloc(null, null, this.base_);\n};\n/**\n * addField() for repeated scalar fields.\n * @param {!number} value\n */\nlogs.binary.VeOffsetIdentifier.prototype.addBase \x3d function(value) {\n  this.base_ \x3d this.base_  || [];\n  this.base_.push(value);\n};\n//------------------------------------------------------------------------------\n// logs.binary.VeOffsetIdentifier.offset methods\n/** @const  */\nlogs.binary.VeOffsetIdentifier.DEFAULT_OFFSET \x3d 0;\n/**\n * hasField() for all fields.\n * @override\n */\nlogs.binary.VeOffsetIdentifier.prototype.hasOffset \x3d function() {\n  if (this.offset_ !\x3d null) return true;\n  return false;\n};\n/**\n * clearField() for all fields.\n */\nlogs.binary.VeOffsetIdentifier.prototype.clearOffset \x3d function() {\n  this.offset_ \x3d null;\n};\n/**\n * getField() for singular fields.\n * @override\n */\nlogs.binary.VeOffsetIdentifier.prototype.getOffset \x3d function() {\n  if (this.offset_ \x3d\x3d null) {\n    return 0;\n  }\n  return /** @type {!number}*/(this.offset_);\n};\n/**\n * setField(value) for singular fields.\n * @param {!number} value\n */\nlogs.binary.VeOffsetIdentifier.prototype.setOffset \x3d function(value) {\n  this.offset_ \x3d value;\n};\n//------------------------------------------------------------------------------\n// Extension methods\n\n//# sourceURL\x3dhttps://qs/logs/proto/visual_element/visual_element_offset_identifier-js-binary.js\n");

$googDebugFname=undefined;
var $googDebugFname="logs/proto/visual_element/click_tracking_cgi-js-binary.js";
eval("\n/**\n * @fileoverview This file was automatically generated by\n * net/proto2/contrib/js_proto; do not modify it directly.\n * @suppress {missingRequire,extraRequire}\n */\ngoog.provide(\x27logs.binary.ClickTrackingCGI\x27);\ngoog.provide(\x27logs.binary.ConstClickTrackingCGI\x27);\ngoog.require(\x27binary.ClientEventIdMessage\x27);\ngoog.require(\x27logs.binary.VeOffsetIdentifier\x27);\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27jspb.BinaryMessage\x27);\ngoog.require(\x27jspb.ConstBinaryMessage\x27);\ngoog.require(\x27jsproto.BinarySerializer\x27);\ngoog.require(\x27goog.crypt.base64\x27);\n//------------------------------------------------------------------------------\n// Global Enums - these come first as they may be referenced by the classes\n// below.\n//------------------------------------------------------------------------------\n// Const interface methods.\n/**\n * @extends {jspb.ConstBinaryMessage}\n * @interface\n */\nlogs.binary.ConstClickTrackingCGI \x3d function() {\n};\n/**\n * Strips all materialized fields off this proto.\n */\nlogs.binary.ConstClickTrackingCGI.prototype.recycleFields \x3d\n    goog.abstractMethod;\n/**\n * @return {!logs.binary.ClickTrackingCGI}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.cloneProto \x3d goog.abstractMethod;\n/**\n * Converts a proto into a flat array - field N will be copied to array slot\n * N-1 (or slot N if we\x27re in one-based-arrays mode), hash strings will be\n * converted into decimal strings, packed/repeated scalars will be copied, and\n * nested messages will be recursively array-ified.\n * Does not handle byte blob fields.\n * @return {!Array}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.toJspbArray \x3d goog.abstractMethod;\n/**\n * Returns true if this message has an extension with the given field number.\n * @param {number} field\n * @return {boolean}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.hasExtension \x3d\n    goog.abstractMethod;\n/**\n * Retrieves the extension with the given field number.\n * @param {number} field\n * @return {?jspb.AnyFieldType}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.getExtension \x3d\n    goog.abstractMethod;\n/**\n * Returns the total number of extensions attached to this message.\n * @return {number}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.getExtensionCount \x3d\n    goog.abstractMethod;\n/**\n * Returns the array of \x27raw\x27 extensions (known and unknown) associated with\n * this message.\n * @return {!Array\x3c!jsproto.BinaryExtension\x3e}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.getRawExtensionArray \x3d\n    goog.abstractMethod;\n//------------------------------------------------------------------------------\n// Const interface per-field methods.\n/**\n * Every field gets a \x27hasField()\x27 method.\n * @return {boolean}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.hasVeIndex \x3d\n    goog.abstractMethod;\n/**\n * Singular fields get a \x27getField()\x27 method.\n * @return {!number}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.getVeIndex \x3d\n    goog.abstractMethod;\n/**\n * Every field gets a \x27hasField()\x27 method.\n * @return {boolean}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.hasVeType \x3d\n    goog.abstractMethod;\n/**\n * Singular fields get a \x27getField()\x27 method.\n * @return {!number}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.getVeType \x3d\n    goog.abstractMethod;\n/**\n * Every field gets a \x27hasField()\x27 method.\n * @return {boolean}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.hasElementIndex \x3d\n    goog.abstractMethod;\n/**\n * Singular fields get a \x27getField()\x27 method.\n * @return {!number}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.getElementIndex \x3d\n    goog.abstractMethod;\n/**\n * Every field gets a \x27hasField()\x27 method.\n * @return {boolean}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.hasResultIndex \x3d\n    goog.abstractMethod;\n/**\n * Singular fields get a \x27getField()\x27 method.\n * @return {!number}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.getResultIndex \x3d\n    goog.abstractMethod;\n/**\n * Every field gets a \x27hasField()\x27 method.\n * @return {boolean}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.hasPageStart \x3d\n    goog.abstractMethod;\n/**\n * Singular fields get a \x27getField()\x27 method.\n * @return {!number}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.getPageStart \x3d\n    goog.abstractMethod;\n/**\n * Every field gets a \x27hasField()\x27 method.\n * @return {boolean}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.hasOdelaySeLinker \x3d\n    goog.abstractMethod;\n/**\n * Singular fields get a \x27getField()\x27 method.\n * @return {!number}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.getOdelaySeLinker \x3d\n    goog.abstractMethod;\n/**\n * Every field gets a \x27hasField()\x27 method.\n * @return {boolean}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.hasResultGroupElementIndex \x3d\n    goog.abstractMethod;\n/**\n * Singular fields get a \x27getField()\x27 method.\n * @return {!number}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.getResultGroupElementIndex \x3d\n    goog.abstractMethod;\n/**\n * Every field gets a \x27hasField()\x27 method.\n * @return {boolean}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.hasDoNotLogUrl \x3d\n    goog.abstractMethod;\n/**\n * Singular fields get a \x27getField()\x27 method.\n * @return {!boolean}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.getDoNotLogUrl \x3d\n    goog.abstractMethod;\n/**\n * Every field gets a \x27hasField()\x27 method.\n * @return {boolean}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.hasNonArchivalVeIndex \x3d\n    goog.abstractMethod;\n/**\n * Singular fields get a \x27getField()\x27 method.\n * @return {!number}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.getNonArchivalVeIndex \x3d\n    goog.abstractMethod;\n/**\n * Every field gets a \x27hasField()\x27 method.\n * @return {boolean}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.hasResultFprint \x3d\n    goog.abstractMethod;\n/**\n * Singular fields get a \x27getField()\x27 method.\n * @return {!string}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.getResultFprint \x3d\n    goog.abstractMethod;\n/**\n * Every field gets a \x27hasField()\x27 method.\n * @return {boolean}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.hasVeEventId \x3d\n    goog.abstractMethod;\n/**\n * Singular fields get a \x27getField()\x27 method.\n * @return {!binary.ClientEventIdMessage.Const}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.getVeEventId \x3d\n    goog.abstractMethod;\n/**\n * Message fields get a \x27recycleField()\x27 method.\n */\nlogs.binary.ConstClickTrackingCGI.prototype.recycleVeEventId \x3d\n    goog.abstractMethod;\n/**\n * Every field gets a \x27hasField()\x27 method.\n * @return {boolean}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.hasYoutubeVeCounter \x3d\n    goog.abstractMethod;\n/**\n * Singular fields get a \x27getField()\x27 method.\n * @return {!number}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.getYoutubeVeCounter \x3d\n    goog.abstractMethod;\n/**\n * Every field gets a \x27hasField()\x27 method.\n * @return {boolean}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.hasVeOffsetIdentifier \x3d\n    goog.abstractMethod;\n/**\n * Singular fields get a \x27getField()\x27 method.\n * @return {!logs.binary.VeOffsetIdentifier.Const}\n */\nlogs.binary.ConstClickTrackingCGI.prototype.getVeOffsetIdentifier \x3d\n    goog.abstractMethod;\n/**\n * Message fields get a \x27recycleField()\x27 method.\n */\nlogs.binary.ConstClickTrackingCGI.prototype.recycleVeOffsetIdentifier \x3d\n    goog.abstractMethod;\n//------------------------------------------------------------------------------\n/**\n * Message class constructor.\n * @implements {logs.binary.ConstClickTrackingCGI}\n * @implements {jspb.BinaryMessage}\n * @constructor\n * @struct\n */\nlogs.binary.ClickTrackingCGI \x3d function() {\n  /** @private {number|null} */\n  this.veIndex_ \x3d null;\n  /** @private {number|null} */\n  this.veType_ \x3d null;\n  /** @private {number|null} */\n  this.elementIndex_ \x3d null;\n  /** @private {number|null} */\n  this.resultIndex_ \x3d null;\n  /** @private {number|null} */\n  this.pageStart_ \x3d null;\n  /** @private {number|null} */\n  this.odelaySeLinker_ \x3d null;\n  /** @private {number|null} */\n  this.resultGroupElementIndex_ \x3d null;\n  /** @private {boolean|null} */\n  this.doNotLogUrl_ \x3d null;\n  /** @private {number|null} */\n  this.nonArchivalVeIndex_ \x3d null;\n  /** @private {string|null} */\n  this.resultFprint_ \x3d null;\n  /** @private {binary.ClientEventIdMessage|null} */\n  this.veEventId_ \x3d null;\n  /** @private {number|null} */\n  this.youtubeVeCounter_ \x3d null;\n  /** @private {logs.binary.VeOffsetIdentifier|null} */\n  this.veOffsetIdentifier_ \x3d null;\n};\n/** @typedef {!logs.binary.ConstClickTrackingCGI} */\nlogs.binary.ClickTrackingCGI.Const;\n\n//------------------------------------------------------------------------------\n// readFrom()/writeTo() methods.\n/**\n * Deserializes a message from a BinaryReader\n * @param {!jspb.BinaryReader} reader\n */\nlogs.binary.ClickTrackingCGI.prototype.readFrom \x3d function(reader) {\n  while (reader.nextField()) {\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {number} */\n     (reader.readInt32());\n      this.veIndex_ \x3d value;\n      break;\n    case 2:\n      var value \x3d /** @type {number} */\n     (reader.readInt32());\n      this.veType_ \x3d value;\n      break;\n    case 5:\n      var value \x3d /** @type {number} */\n     (reader.readInt32());\n      this.elementIndex_ \x3d value;\n      break;\n    case 6:\n      var value \x3d /** @type {number} */\n     (reader.readInt32());\n      this.resultIndex_ \x3d value;\n      break;\n    case 7:\n      var value \x3d /** @type {number} */\n     (reader.readInt32());\n      this.pageStart_ \x3d value;\n      break;\n    case 8:\n      var value \x3d /** @type {number} */\n     (reader.readInt32());\n      this.odelaySeLinker_ \x3d value;\n      break;\n    case 9:\n      var value \x3d /** @type {number} */\n     (reader.readInt32());\n      this.resultGroupElementIndex_ \x3d value;\n      break;\n    case 10:\n      var value \x3d /** @type {boolean} */\n     (reader.readBool());\n      this.doNotLogUrl_ \x3d value;\n      break;\n    case 11:\n      var value \x3d /** @type {number} */\n     (reader.readInt32());\n      this.nonArchivalVeIndex_ \x3d value;\n      break;\n    case 12:\n      var value \x3d /** @type {string} */\n     (reader.readFixedHash64());\n      this.resultFprint_ \x3d value;\n      break;\n    case 13:\n      var value \x3d binary.ClientEventIdMessage.alloc();\n      reader.readMessage(value, binary.ClientEventIdMessage.reader);\n      this.veEventId_ \x3d value;\n      break;\n    case 14:\n      var value \x3d /** @type {number} */\n     (reader.readInt32());\n      this.youtubeVeCounter_ \x3d value;\n      break;\n    case 15:\n      var value \x3d logs.binary.VeOffsetIdentifier.alloc();\n      reader.readMessage(value, logs.binary.VeOffsetIdentifier.reader);\n      this.veOffsetIdentifier_ \x3d value;\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n};\n/**\n * Serializes this proto to a BinaryWriter.\n * @param {!jspb.BinaryWriter} writer\n */\nlogs.binary.ClickTrackingCGI.prototype.writeTo \x3d function(writer) {\n  writer.writeInt32(1, this.veIndex_);\n  writer.writeInt32(2, this.veType_);\n  writer.writeInt32(5, this.elementIndex_);\n  writer.writeInt32(6, this.resultIndex_);\n  writer.writeInt32(7, this.pageStart_);\n  writer.writeInt32(8, this.odelaySeLinker_);\n  writer.writeInt32(9, this.resultGroupElementIndex_);\n  writer.writeBool(10, this.doNotLogUrl_);\n  writer.writeInt32(11, this.nonArchivalVeIndex_);\n  writer.writeFixedHash64(12, this.resultFprint_);\n  writer.writeMessage(13, this.veEventId_,\n      binary.ClientEventIdMessage.writer);\n  writer.writeInt32(14, this.youtubeVeCounter_);\n  writer.writeMessage(15, this.veOffsetIdentifier_,\n      logs.binary.VeOffsetIdentifier.writer);\n};\n//------------------------------------------------------------------------------\n/** @override */\nlogs.binary.ClickTrackingCGI.prototype.toJspbArray \x3d function() {\n  var result \x3d [];\n  if (this.veIndex_ !\x3d\x3d null) {\n    var value \x3d this.veIndex_;\n    result[1 + -1] \x3d value;\n  }\n  if (this.veType_ !\x3d\x3d null) {\n    var value \x3d this.veType_;\n    result[2 + -1] \x3d value;\n  }\n  if (this.elementIndex_ !\x3d\x3d null) {\n    var value \x3d this.elementIndex_;\n    result[5 + -1] \x3d value;\n  }\n  if (this.resultIndex_ !\x3d\x3d null) {\n    var value \x3d this.resultIndex_;\n    result[6 + -1] \x3d value;\n  }\n  if (this.pageStart_ !\x3d\x3d null) {\n    var value \x3d this.pageStart_;\n    result[7 + -1] \x3d value;\n  }\n  if (this.odelaySeLinker_ !\x3d\x3d null) {\n    var value \x3d this.odelaySeLinker_;\n    result[8 + -1] \x3d value;\n  }\n  if (this.resultGroupElementIndex_ !\x3d\x3d null) {\n    var value \x3d this.resultGroupElementIndex_;\n    result[9 + -1] \x3d value;\n  }\n  if (this.doNotLogUrl_ !\x3d\x3d null) {\n    var value \x3d this.doNotLogUrl_;\n    result[10 + -1] \x3d value;\n  }\n  if (this.nonArchivalVeIndex_ !\x3d\x3d null) {\n    var value \x3d this.nonArchivalVeIndex_;\n    result[11 + -1] \x3d value;\n  }\n  if (this.resultFprint_ !\x3d\x3d null) {\n    var value \x3d this.resultFprint_;\n    value \x3d jspb.utils.hash64ToDecimalString(value, false);\n    result[12 + -1] \x3d value;\n  }\n  if (this.veEventId_ !\x3d\x3d null) {\n    var value \x3d this.veEventId_;\n    value \x3d value.toJspbArray();\n    result[13 + -1] \x3d value;\n  }\n  if (this.youtubeVeCounter_ !\x3d\x3d null) {\n    var value \x3d this.youtubeVeCounter_;\n    result[14 + -1] \x3d value;\n  }\n  if (this.veOffsetIdentifier_ !\x3d\x3d null) {\n    var value \x3d this.veOffsetIdentifier_;\n    value \x3d value.toJspbArray();\n    result[15 + -1] \x3d value;\n  }\n  return result;\n};\n//------------------------------------------------------------------------------\n/**\n * Performs a deep copy of the source proto into this proto, erasing the\n * contents of this proto in the process.\n * @param {!logs.binary.ClickTrackingCGI} src\n */\nlogs.binary.ClickTrackingCGI.prototype.copyProto \x3d function(src) {\n  var dest \x3d this;\n  dest.clearProto();\n  dest.veIndex_ \x3d src.veIndex_;\n  dest.veType_ \x3d src.veType_;\n  dest.elementIndex_ \x3d src.elementIndex_;\n  dest.resultIndex_ \x3d src.resultIndex_;\n  dest.pageStart_ \x3d src.pageStart_;\n  dest.odelaySeLinker_ \x3d src.odelaySeLinker_;\n  dest.resultGroupElementIndex_ \x3d src.resultGroupElementIndex_;\n  dest.doNotLogUrl_ \x3d src.doNotLogUrl_;\n  dest.nonArchivalVeIndex_ \x3d src.nonArchivalVeIndex_;\n  dest.resultFprint_ \x3d src.resultFprint_;\n  dest.veEventId_ \x3d\n      src.veEventId_ ? src.veEventId_.cloneProto() : null;\n  dest.youtubeVeCounter_ \x3d src.youtubeVeCounter_;\n  dest.veOffsetIdentifier_ \x3d\n      src.veOffsetIdentifier_ ? src.veOffsetIdentifier_.cloneProto() : null;\n};\n//------------------------------------------------------------------------------\n/**\n * @return {!logs.binary.ClickTrackingCGI}\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.cloneProto \x3d function() {\n  var dest \x3d logs.binary.ClickTrackingCGI.alloc();\n  dest.copyProto(this);\n  return dest;\n};\n//------------------------------------------------------------------------------\n/**\n * Returns true if two protos are deeply equal to each other.\n * @param {!logs.binary.ClickTrackingCGI} other\n * @return {boolean}\n */\nlogs.binary.ClickTrackingCGI.prototype.equalsProto \x3d function(other) {\n  if (this.veIndex_ !\x3d\x3d other.veIndex_) {\n    return false;\n  }\n  if (this.veType_ !\x3d\x3d other.veType_) {\n    return false;\n  }\n  if (this.elementIndex_ !\x3d\x3d other.elementIndex_) {\n    return false;\n  }\n  if (this.resultIndex_ !\x3d\x3d other.resultIndex_) {\n    return false;\n  }\n  if (this.pageStart_ !\x3d\x3d other.pageStart_) {\n    return false;\n  }\n  if (this.odelaySeLinker_ !\x3d\x3d other.odelaySeLinker_) {\n    return false;\n  }\n  if (this.resultGroupElementIndex_ !\x3d\x3d other.resultGroupElementIndex_) {\n    return false;\n  }\n  if (this.doNotLogUrl_ !\x3d\x3d other.doNotLogUrl_) {\n    return false;\n  }\n  if (this.nonArchivalVeIndex_ !\x3d\x3d other.nonArchivalVeIndex_) {\n    return false;\n  }\n  if (this.resultFprint_ !\x3d\x3d other.resultFprint_) {\n    return false;\n  }\n  if (!binary.ClientEventIdMessage.comparer(\n      this.veEventId_, other.veEventId_)) {\n    return false;\n  }\n  if (this.youtubeVeCounter_ !\x3d\x3d other.youtubeVeCounter_) {\n    return false;\n  }\n  if (!logs.binary.VeOffsetIdentifier.comparer(\n      this.veOffsetIdentifier_, other.veOffsetIdentifier_)) {\n    return false;\n  }\n  return true;\n};\n//------------------------------------------------------------------------------\nif (goog.DEBUG) {\n  /** @override */\n  logs.binary.ClickTrackingCGI.prototype.toDebugString \x3d function() {\n    return this.toDebugStringInternal(0);\n  };\n  /** @override */\n  logs.binary.ClickTrackingCGI.prototype.toDebugStringInternal \x3d\n      function(indentLevel) {\n    var buffer \x3d [];\n    var indent \x3d new Array(1 + indentLevel).join(\x27 \x27);\n    if (this.hasVeIndex()) {\n      {\n        var value \x3d this.getVeIndex();\n        var scalar \x3d jspb.utils.debugScalarToTextFormat(value);\n        buffer.push(\x27ve_index: \x27 + scalar\n            );\n      }\n    }\n    if (this.hasVeType()) {\n      {\n        var value \x3d this.getVeType();\n        var scalar \x3d jspb.utils.debugScalarToTextFormat(value);\n        buffer.push(\x27ve_type: \x27 + scalar\n            );\n      }\n    }\n    if (this.hasElementIndex()) {\n      {\n        var value \x3d this.getElementIndex();\n        var scalar \x3d jspb.utils.debugScalarToTextFormat(value);\n        buffer.push(\x27element_index: \x27 + scalar\n            );\n      }\n    }\n    if (this.hasResultIndex()) {\n      {\n        var value \x3d this.getResultIndex();\n        var scalar \x3d jspb.utils.debugScalarToTextFormat(value);\n        buffer.push(\x27result_index: \x27 + scalar\n            );\n      }\n    }\n    if (this.hasPageStart()) {\n      {\n        var value \x3d this.getPageStart();\n        var scalar \x3d jspb.utils.debugScalarToTextFormat(value);\n        buffer.push(\x27page_start: \x27 + scalar\n            );\n      }\n    }\n    if (this.hasOdelaySeLinker()) {\n      {\n        var value \x3d this.getOdelaySeLinker();\n        var scalar \x3d jspb.utils.debugScalarToTextFormat(value);\n        buffer.push(\x27odelay_se_linker: \x27 + scalar\n            );\n      }\n    }\n    if (this.hasResultGroupElementIndex()) {\n      {\n        var value \x3d this.getResultGroupElementIndex();\n        var scalar \x3d jspb.utils.debugScalarToTextFormat(value);\n        buffer.push(\x27result_group_element_index: \x27 + scalar\n            );\n      }\n    }\n    if (this.hasDoNotLogUrl()) {\n      {\n        var value \x3d this.getDoNotLogUrl();\n        var scalar \x3d jspb.utils.debugScalarToTextFormat(value);\n        buffer.push(\x27do_not_log_url: \x27 + scalar\n            );\n      }\n    }\n    if (this.hasNonArchivalVeIndex()) {\n      {\n        var value \x3d this.getNonArchivalVeIndex();\n        var scalar \x3d jspb.utils.debugScalarToTextFormat(value);\n        buffer.push(\x27non_archival_ve_index: \x27 + scalar\n            );\n      }\n    }\n    if (this.hasResultFprint()) {\n      {\n        var value \x3d this.getResultFprint();\n        var scalar \x3d\n            jspb.utils.hash64ToDecimalString(value, false);\n        buffer.push(\x27result_fprint: \x27 + scalar\n            );\n      }\n    }\n    if (this.hasVeEventId()) {\n      {\n        var value \x3d this.getVeEventId();\n        buffer.push(\x27ve_event_id {\x27\n        );\n        buffer.push(\x27  \x27 + value.toDebugStringInternal(indentLevel + 2));\n        buffer.push(\x27} #veEventId \x27\n        );\n      }\n    }\n    if (this.hasYoutubeVeCounter()) {\n      {\n        var value \x3d this.getYoutubeVeCounter();\n        var scalar \x3d jspb.utils.debugScalarToTextFormat(value);\n        buffer.push(\x27youtube_ve_counter: \x27 + scalar\n            );\n      }\n    }\n    if (this.hasVeOffsetIdentifier()) {\n      {\n        var value \x3d this.getVeOffsetIdentifier();\n        buffer.push(\x27ve_offset_identifier {\x27\n        );\n        buffer.push(\x27  \x27 + value.toDebugStringInternal(indentLevel + 2));\n        buffer.push(\x27} #veOffsetIdentifier \x27\n        );\n      }\n    }\n    return buffer.join(\x27\\n\x27 + indent);\n  };\n}\n//------------------------------------------------------------------------------\n/**\n * Prunes all fields of this message that are equal to their default value.\n * Returns null if all fields were pruned away, otherwise returns \x27this\x27.\n * @return {logs.binary.ClickTrackingCGI}\n */\nlogs.binary.ClickTrackingCGI.prototype.pruneProto \x3d function() {\n  var alive \x3d false;\n  if (this.veIndex_ \x3d\x3d -1) {\n    this.veIndex_ \x3d null;\n  }\n  alive \x3d alive || (this.veIndex_ !\x3d null);\n  if (this.veType_ \x3d\x3d 0) {\n    this.veType_ \x3d null;\n  }\n  alive \x3d alive || (this.veType_ !\x3d null);\n  if (this.elementIndex_ \x3d\x3d -1) {\n    this.elementIndex_ \x3d null;\n  }\n  alive \x3d alive || (this.elementIndex_ !\x3d null);\n  if (this.resultIndex_ \x3d\x3d -1) {\n    this.resultIndex_ \x3d null;\n  }\n  alive \x3d alive || (this.resultIndex_ !\x3d null);\n  if (this.pageStart_ \x3d\x3d 0) {\n    this.pageStart_ \x3d null;\n  }\n  alive \x3d alive || (this.pageStart_ !\x3d null);\n  if (this.odelaySeLinker_ \x3d\x3d 0) {\n    this.odelaySeLinker_ \x3d null;\n  }\n  alive \x3d alive || (this.odelaySeLinker_ !\x3d null);\n  if (this.resultGroupElementIndex_ \x3d\x3d -1) {\n    this.resultGroupElementIndex_ \x3d null;\n  }\n  alive \x3d alive || (this.resultGroupElementIndex_ !\x3d null);\n  if (this.doNotLogUrl_ \x3d\x3d false) {\n    this.doNotLogUrl_ \x3d null;\n  }\n  alive \x3d alive || (this.doNotLogUrl_ !\x3d null);\n  if (this.nonArchivalVeIndex_ \x3d\x3d -1) {\n    this.nonArchivalVeIndex_ \x3d null;\n  }\n  alive \x3d alive || (this.nonArchivalVeIndex_ !\x3d null);\n  if (this.resultFprint_ \x3d\x3d jspb.BinaryConstants.ZERO_HASH) {\n    this.resultFprint_ \x3d null;\n  }\n  alive \x3d alive || (this.resultFprint_ !\x3d null);\n  this.veEventId_ \x3d /** @type {binary.ClientEventIdMessage} */\n      (jsproto.BinarySerializer.pruneVariant(this.veEventId_\n      ,binary.ClientEventIdMessage.pruner\n      ));\n  alive \x3d alive || (this.veEventId_ !\x3d null);\n  if (this.youtubeVeCounter_ \x3d\x3d -1) {\n    this.youtubeVeCounter_ \x3d null;\n  }\n  alive \x3d alive || (this.youtubeVeCounter_ !\x3d null);\n  this.veOffsetIdentifier_ \x3d /** @type {logs.binary.VeOffsetIdentifier} */\n      (jsproto.BinarySerializer.pruneVariant(this.veOffsetIdentifier_\n      ,logs.binary.VeOffsetIdentifier.pruner\n      ));\n  alive \x3d alive || (this.veOffsetIdentifier_ !\x3d null);\n  return alive ? this : null;\n};\n//------------------------------------------------------------------------------\n/**\n * Clears all fields of the proto.\n */\nlogs.binary.ClickTrackingCGI.prototype.clearProto \x3d function() {\n  this.veIndex_ \x3d null;\n  this.veType_ \x3d null;\n  this.elementIndex_ \x3d null;\n  this.resultIndex_ \x3d null;\n  this.pageStart_ \x3d null;\n  this.odelaySeLinker_ \x3d null;\n  this.resultGroupElementIndex_ \x3d null;\n  this.doNotLogUrl_ \x3d null;\n  this.nonArchivalVeIndex_ \x3d null;\n  this.resultFprint_ \x3d null;\n  binary.ClientEventIdMessage.free(this.veEventId_);\n  this.veEventId_ \x3d null;\n  this.youtubeVeCounter_ \x3d null;\n  logs.binary.VeOffsetIdentifier.free(this.veOffsetIdentifier_);\n  this.veOffsetIdentifier_ \x3d null;\n};\n//------------------------------------------------------------------------------\n/**\n * Dematerializes all materialized fields in this proto.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.recycleFields \x3d function() {\n};\n//------------------------------------------------------------------------------\n// Stub extension methods for classes that define no extension ranges.\n/**\n * Returns true if this message has an extension with the given field number.\n * @param {number} field\n * @return {boolean}\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.hasExtension \x3d function(field) {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n  return false;\n};\n/**\n * Removes an extension in this message.\n * @param {number} field\n */\nlogs.binary.ClickTrackingCGI.prototype.clearExtension \x3d function(field) {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n};\n/**\n * Retrieves the extension with the given field number.\n * @param {number} field\n * @return {?jspb.AnyFieldType}\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.getExtension \x3d function(field) {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n  return null;\n};\n/**\n * Returns the total number of extensions attached to this message.\n * @return {number}\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.getExtensionCount \x3d function() {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n  return 0;\n};\n/**\n * @return {!Array\x3c!jsproto.BinaryExtension\x3e}\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.getRawExtensionArray \x3d function() {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n  return [];\n};\n/**\n * Gets a mutable copy of an extension in this message, creating it if it\n * isn\x27t present. Only valid for extensions that are messages.\n * @param {number} field\n * @return {jspb.BinaryMessage}\n */\nlogs.binary.ClickTrackingCGI.prototype.mutableExtension \x3d function(field) {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n  return null;\n};\n/**\n * Sets an extension in this message.\n * @param {number} field\n * @param {jspb.AnyFieldType} value\n */\nlogs.binary.ClickTrackingCGI.prototype.setExtension \x3d function(field, value) {\n  goog.asserts.fail(\x22Type has no extension ranges!\x22);\n};\n//------------------------------------------------------------------------------\n// Alloc/free for messages that don\x27t use instance pools.\n/**\n * @return {!logs.binary.ClickTrackingCGI}\n */\nlogs.binary.ClickTrackingCGI.alloc \x3d function() {\n  return new logs.binary.ClickTrackingCGI();\n};\n/**\n * @param {logs.binary.ConstClickTrackingCGI} constProto\n */\nlogs.binary.ClickTrackingCGI.free \x3d function(constProto) {\n  var proto \x3d /** @type {logs.binary.ClickTrackingCGI} */(constProto);\n  if (proto) proto.clearProto();\n};\n//------------------------------------------------------------------------------\n// Static helper methods.\n/**\n * @return {!jspb.BinaryMessage}\n */\nlogs.binary.ClickTrackingCGI.builder \x3d function() {\n  return logs.binary.ClickTrackingCGI.alloc();\n};\n/**\n * @param {jspb.ConstBinaryMessage} message\n * @return {jspb.BinaryMessage}\n */\nlogs.binary.ClickTrackingCGI.cloner \x3d function(message) {\n  if (message \x3d\x3d\x3d null) return null;\n  var message2 \x3d /** @type {!logs.binary.ClickTrackingCGI} */(message);\n  return message2.cloneProto();\n};\n/**\n * @param {!jspb.BinaryMessage} message\n */\nlogs.binary.ClickTrackingCGI.recycler \x3d function(message) {\n  var message2 \x3d /** @type {!logs.binary.ClickTrackingCGI} */(message);\n  message2.recycleFields();\n};\n/**\n * @param {!jspb.BinaryMessage} message\n * @param {!jspb.BinaryReader} stream\n */\nlogs.binary.ClickTrackingCGI.reader \x3d function(message, stream) {\n  var message2 \x3d /** @type {!logs.binary.ClickTrackingCGI} */(message);\n  message2.readFrom(stream);\n};\n/**\n * @param {!logs.binary.ClickTrackingCGI} message\n * @param {!jspb.BinaryWriter} stream\n */\nlogs.binary.ClickTrackingCGI.writer \x3d function(message, stream) {\n  message.writeTo(stream);\n};\n/**\n * @param {jspb.BinaryMessage} message\n * @return {jspb.BinaryMessage}\n */\nlogs.binary.ClickTrackingCGI.pruner \x3d function(message) {\n  var message2 \x3d /** @type {!logs.binary.ClickTrackingCGI} */(message);\n  return message2.pruneProto();\n};\n/**\n * @param {?jspb.ConstBinaryMessage} messageA\n * @param {?jspb.ConstBinaryMessage} messageB\n */\nlogs.binary.ClickTrackingCGI.comparer \x3d function(messageA, messageB) {\n  messageA \x3d /** @type {?logs.binary.ClickTrackingCGI} */(messageA);\n  messageB \x3d /** @type {?logs.binary.ClickTrackingCGI} */(messageB);\n  if (messageA \x3d\x3d\x3d messageB) return true;\n  if (messageA \x3d\x3d\x3d null) return false;\n  if (messageB \x3d\x3d\x3d null) return false;\n  goog.asserts.assert(messageA.constructor \x3d\x3d\x3d logs.binary.ClickTrackingCGI);\n  goog.asserts.assert(messageB.constructor \x3d\x3d\x3d logs.binary.ClickTrackingCGI);\n  return messageA.equalsProto(messageB);\n};\n/**\n * Creates a new instance of this message type, deserialized the byte source\n * into it, and returns it.\n * @param {!jspb.ByteSource} data\n * @return {!logs.binary.ClickTrackingCGI}\n */\nlogs.binary.ClickTrackingCGI.readFrom \x3d function(data) {\n  var instance \x3d logs.binary.ClickTrackingCGI.alloc();\n  var reader \x3d jspb.BinaryReader.alloc(data);\n  instance.readFrom(reader);\n  reader.free();\n  return instance;\n};\n//------------------------------------------------------------------------------\n// logs.binary.ClickTrackingCGI.veIndex methods\n/** @const  */\nlogs.binary.ClickTrackingCGI.DEFAULT_VEINDEX \x3d -1;\n/**\n * hasField() for all fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.hasVeIndex \x3d function() {\n  if (this.veIndex_ !\x3d null) return true;\n  return false;\n};\n/**\n * clearField() for all fields.\n */\nlogs.binary.ClickTrackingCGI.prototype.clearVeIndex \x3d function() {\n  this.veIndex_ \x3d null;\n};\n/**\n * getField() for singular fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.getVeIndex \x3d function() {\n  if (this.veIndex_ \x3d\x3d null) {\n    return -1;\n  }\n  return /** @type {!number}*/(this.veIndex_);\n};\n/**\n * setField(value) for singular fields.\n * @param {!number} value\n */\nlogs.binary.ClickTrackingCGI.prototype.setVeIndex \x3d function(value) {\n  this.veIndex_ \x3d value;\n};\n//------------------------------------------------------------------------------\n// logs.binary.ClickTrackingCGI.veType methods\n/**\n * hasField() for all fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.hasVeType \x3d function() {\n  if (this.veType_ !\x3d null) return true;\n  return false;\n};\n/**\n * clearField() for all fields.\n */\nlogs.binary.ClickTrackingCGI.prototype.clearVeType \x3d function() {\n  this.veType_ \x3d null;\n};\n/**\n * getField() for singular fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.getVeType \x3d function() {\n  if (this.veType_ \x3d\x3d null) {\n    return 0;\n  }\n  return /** @type {!number}*/(this.veType_);\n};\n/**\n * setField(value) for singular fields.\n * @param {!number} value\n */\nlogs.binary.ClickTrackingCGI.prototype.setVeType \x3d function(value) {\n  this.veType_ \x3d value;\n};\n//------------------------------------------------------------------------------\n// logs.binary.ClickTrackingCGI.elementIndex methods\n/** @const  */\nlogs.binary.ClickTrackingCGI.DEFAULT_ELEMENTINDEX \x3d -1;\n/**\n * hasField() for all fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.hasElementIndex \x3d function() {\n  if (this.elementIndex_ !\x3d null) return true;\n  return false;\n};\n/**\n * clearField() for all fields.\n */\nlogs.binary.ClickTrackingCGI.prototype.clearElementIndex \x3d function() {\n  this.elementIndex_ \x3d null;\n};\n/**\n * getField() for singular fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.getElementIndex \x3d function() {\n  if (this.elementIndex_ \x3d\x3d null) {\n    return -1;\n  }\n  return /** @type {!number}*/(this.elementIndex_);\n};\n/**\n * setField(value) for singular fields.\n * @param {!number} value\n */\nlogs.binary.ClickTrackingCGI.prototype.setElementIndex \x3d function(value) {\n  this.elementIndex_ \x3d value;\n};\n//------------------------------------------------------------------------------\n// logs.binary.ClickTrackingCGI.resultIndex methods\n/** @const  */\nlogs.binary.ClickTrackingCGI.DEFAULT_RESULTINDEX \x3d -1;\n/**\n * hasField() for all fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.hasResultIndex \x3d function() {\n  if (this.resultIndex_ !\x3d null) return true;\n  return false;\n};\n/**\n * clearField() for all fields.\n */\nlogs.binary.ClickTrackingCGI.prototype.clearResultIndex \x3d function() {\n  this.resultIndex_ \x3d null;\n};\n/**\n * getField() for singular fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.getResultIndex \x3d function() {\n  if (this.resultIndex_ \x3d\x3d null) {\n    return -1;\n  }\n  return /** @type {!number}*/(this.resultIndex_);\n};\n/**\n * setField(value) for singular fields.\n * @param {!number} value\n */\nlogs.binary.ClickTrackingCGI.prototype.setResultIndex \x3d function(value) {\n  this.resultIndex_ \x3d value;\n};\n//------------------------------------------------------------------------------\n// logs.binary.ClickTrackingCGI.pageStart methods\n/**\n * hasField() for all fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.hasPageStart \x3d function() {\n  if (this.pageStart_ !\x3d null) return true;\n  return false;\n};\n/**\n * clearField() for all fields.\n */\nlogs.binary.ClickTrackingCGI.prototype.clearPageStart \x3d function() {\n  this.pageStart_ \x3d null;\n};\n/**\n * getField() for singular fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.getPageStart \x3d function() {\n  if (this.pageStart_ \x3d\x3d null) {\n    return 0;\n  }\n  return /** @type {!number}*/(this.pageStart_);\n};\n/**\n * setField(value) for singular fields.\n * @param {!number} value\n */\nlogs.binary.ClickTrackingCGI.prototype.setPageStart \x3d function(value) {\n  this.pageStart_ \x3d value;\n};\n//------------------------------------------------------------------------------\n// logs.binary.ClickTrackingCGI.odelaySeLinker methods\n/**\n * hasField() for all fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.hasOdelaySeLinker \x3d function() {\n  if (this.odelaySeLinker_ !\x3d null) return true;\n  return false;\n};\n/**\n * clearField() for all fields.\n */\nlogs.binary.ClickTrackingCGI.prototype.clearOdelaySeLinker \x3d function() {\n  this.odelaySeLinker_ \x3d null;\n};\n/**\n * getField() for singular fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.getOdelaySeLinker \x3d function() {\n  if (this.odelaySeLinker_ \x3d\x3d null) {\n    return 0;\n  }\n  return /** @type {!number}*/(this.odelaySeLinker_);\n};\n/**\n * setField(value) for singular fields.\n * @param {!number} value\n */\nlogs.binary.ClickTrackingCGI.prototype.setOdelaySeLinker \x3d function(value) {\n  this.odelaySeLinker_ \x3d value;\n};\n//------------------------------------------------------------------------------\n// logs.binary.ClickTrackingCGI.resultGroupElementIndex methods\n/** @const  */\nlogs.binary.ClickTrackingCGI.DEFAULT_RESULTGROUPELEMENTINDEX \x3d -1;\n/**\n * hasField() for all fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.hasResultGroupElementIndex \x3d function() {\n  if (this.resultGroupElementIndex_ !\x3d null) return true;\n  return false;\n};\n/**\n * clearField() for all fields.\n */\nlogs.binary.ClickTrackingCGI.prototype.clearResultGroupElementIndex \x3d function() {\n  this.resultGroupElementIndex_ \x3d null;\n};\n/**\n * getField() for singular fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.getResultGroupElementIndex \x3d function() {\n  if (this.resultGroupElementIndex_ \x3d\x3d null) {\n    return -1;\n  }\n  return /** @type {!number}*/(this.resultGroupElementIndex_);\n};\n/**\n * setField(value) for singular fields.\n * @param {!number} value\n */\nlogs.binary.ClickTrackingCGI.prototype.setResultGroupElementIndex \x3d function(value) {\n  this.resultGroupElementIndex_ \x3d value;\n};\n//------------------------------------------------------------------------------\n// logs.binary.ClickTrackingCGI.doNotLogUrl methods\n/** @const  */\nlogs.binary.ClickTrackingCGI.DEFAULT_DONOTLOGURL \x3d false;\n/**\n * hasField() for all fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.hasDoNotLogUrl \x3d function() {\n  if (this.doNotLogUrl_ !\x3d null) return true;\n  return false;\n};\n/**\n * clearField() for all fields.\n */\nlogs.binary.ClickTrackingCGI.prototype.clearDoNotLogUrl \x3d function() {\n  this.doNotLogUrl_ \x3d null;\n};\n/**\n * getField() for singular fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.getDoNotLogUrl \x3d function() {\n  if (this.doNotLogUrl_ \x3d\x3d null) {\n    return false;\n  }\n  return /** @type {!boolean}*/(this.doNotLogUrl_);\n};\n/**\n * setField(value) for singular fields.\n * @param {!boolean} value\n */\nlogs.binary.ClickTrackingCGI.prototype.setDoNotLogUrl \x3d function(value) {\n  this.doNotLogUrl_ \x3d value;\n};\n//------------------------------------------------------------------------------\n// logs.binary.ClickTrackingCGI.nonArchivalVeIndex methods\n/** @const  */\nlogs.binary.ClickTrackingCGI.DEFAULT_NONARCHIVALVEINDEX \x3d -1;\n/**\n * hasField() for all fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.hasNonArchivalVeIndex \x3d function() {\n  if (this.nonArchivalVeIndex_ !\x3d null) return true;\n  return false;\n};\n/**\n * clearField() for all fields.\n */\nlogs.binary.ClickTrackingCGI.prototype.clearNonArchivalVeIndex \x3d function() {\n  this.nonArchivalVeIndex_ \x3d null;\n};\n/**\n * getField() for singular fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.getNonArchivalVeIndex \x3d function() {\n  if (this.nonArchivalVeIndex_ \x3d\x3d null) {\n    return -1;\n  }\n  return /** @type {!number}*/(this.nonArchivalVeIndex_);\n};\n/**\n * setField(value) for singular fields.\n * @param {!number} value\n */\nlogs.binary.ClickTrackingCGI.prototype.setNonArchivalVeIndex \x3d function(value) {\n  this.nonArchivalVeIndex_ \x3d value;\n};\n//------------------------------------------------------------------------------\n// logs.binary.ClickTrackingCGI.resultFprint methods\n/**\n * hasField() for all fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.hasResultFprint \x3d function() {\n  if (this.resultFprint_ !\x3d null) return true;\n  return false;\n};\n/**\n * clearField() for all fields.\n */\nlogs.binary.ClickTrackingCGI.prototype.clearResultFprint \x3d function() {\n  this.resultFprint_ \x3d null;\n};\n/**\n * getField() for singular fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.getResultFprint \x3d function() {\n  if (this.resultFprint_ \x3d\x3d null) {\n    return jspb.BinaryConstants.ZERO_HASH;\n  }\n  return /** @type {!string}*/(this.resultFprint_);\n};\n/**\n * setField(value) for singular fields.\n * @param {!string} value\n */\nlogs.binary.ClickTrackingCGI.prototype.setResultFprint \x3d function(value) {\n  this.resultFprint_ \x3d value;\n};\n//------------------------------------------------------------------------------\n// logs.binary.ClickTrackingCGI.veEventId methods\n/**\n * hasField() for all fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.hasVeEventId \x3d function() {\n  if (this.veEventId_ !\x3d null) return true;\n  return false;\n};\n/**\n * clearField() for all fields.\n */\nlogs.binary.ClickTrackingCGI.prototype.clearVeEventId \x3d function() {\n  this.veEventId_ \x3d null;\n};\n/**\n * getField() for singular fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.getVeEventId \x3d function() {\n  if (this.veEventId_ \x3d\x3d\x3d null) {\n    this.veEventId_ \x3d binary.ClientEventIdMessage.alloc();\n  }\n  return /** @type {!binary.ClientEventIdMessage.Const}*/(this.veEventId_);\n};\n/**\n * setField(value) for singular fields.\n * @param {!binary.ClientEventIdMessage} value\n */\nlogs.binary.ClickTrackingCGI.prototype.setVeEventId \x3d function(value) {\n  this.veEventId_ \x3d value;\n};\n/**\n * mutableField() methods for singular message fields.\n * @return {!binary.ClientEventIdMessage}\n */\nlogs.binary.ClickTrackingCGI.prototype.mutableVeEventId \x3d function() {\n  if (this.veEventId_ \x3d\x3d\x3d null) {\n    this.veEventId_ \x3d binary.ClientEventIdMessage.alloc();\n  }\n  var value \x3d this.veEventId_;\n  goog.asserts.assert(value);\n  return value;\n};\n/**\n * recycleField() methods for message fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.recycleVeEventId \x3d function() {\n  if (this.veEventId_ \x3d\x3d null) return;\n  binary.ClientEventIdMessage.free(this.veEventId_);\n  this.veEventId_ \x3d null;\n};\n//------------------------------------------------------------------------------\n// logs.binary.ClickTrackingCGI.youtubeVeCounter methods\n/** @const  */\nlogs.binary.ClickTrackingCGI.DEFAULT_YOUTUBEVECOUNTER \x3d -1;\n/**\n * hasField() for all fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.hasYoutubeVeCounter \x3d function() {\n  if (this.youtubeVeCounter_ !\x3d null) return true;\n  return false;\n};\n/**\n * clearField() for all fields.\n */\nlogs.binary.ClickTrackingCGI.prototype.clearYoutubeVeCounter \x3d function() {\n  this.youtubeVeCounter_ \x3d null;\n};\n/**\n * getField() for singular fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.getYoutubeVeCounter \x3d function() {\n  if (this.youtubeVeCounter_ \x3d\x3d null) {\n    return -1;\n  }\n  return /** @type {!number}*/(this.youtubeVeCounter_);\n};\n/**\n * setField(value) for singular fields.\n * @param {!number} value\n */\nlogs.binary.ClickTrackingCGI.prototype.setYoutubeVeCounter \x3d function(value) {\n  this.youtubeVeCounter_ \x3d value;\n};\n//------------------------------------------------------------------------------\n// logs.binary.ClickTrackingCGI.veOffsetIdentifier methods\n/**\n * hasField() for all fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.hasVeOffsetIdentifier \x3d function() {\n  if (this.veOffsetIdentifier_ !\x3d null) return true;\n  return false;\n};\n/**\n * clearField() for all fields.\n */\nlogs.binary.ClickTrackingCGI.prototype.clearVeOffsetIdentifier \x3d function() {\n  this.veOffsetIdentifier_ \x3d null;\n};\n/**\n * getField() for singular fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.getVeOffsetIdentifier \x3d function() {\n  if (this.veOffsetIdentifier_ \x3d\x3d\x3d null) {\n    this.veOffsetIdentifier_ \x3d logs.binary.VeOffsetIdentifier.alloc();\n  }\n  return /** @type {!logs.binary.VeOffsetIdentifier.Const}*/(this.veOffsetIdentifier_);\n};\n/**\n * setField(value) for singular fields.\n * @param {!logs.binary.VeOffsetIdentifier} value\n */\nlogs.binary.ClickTrackingCGI.prototype.setVeOffsetIdentifier \x3d function(value) {\n  this.veOffsetIdentifier_ \x3d value;\n};\n/**\n * mutableField() methods for singular message fields.\n * @return {!logs.binary.VeOffsetIdentifier}\n */\nlogs.binary.ClickTrackingCGI.prototype.mutableVeOffsetIdentifier \x3d function() {\n  if (this.veOffsetIdentifier_ \x3d\x3d\x3d null) {\n    this.veOffsetIdentifier_ \x3d logs.binary.VeOffsetIdentifier.alloc();\n  }\n  var value \x3d this.veOffsetIdentifier_;\n  goog.asserts.assert(value);\n  return value;\n};\n/**\n * recycleField() methods for message fields.\n * @override\n */\nlogs.binary.ClickTrackingCGI.prototype.recycleVeOffsetIdentifier \x3d function() {\n  if (this.veOffsetIdentifier_ \x3d\x3d null) return;\n  logs.binary.VeOffsetIdentifier.free(this.veOffsetIdentifier_);\n  this.veOffsetIdentifier_ \x3d null;\n};\n//------------------------------------------------------------------------------\n// Extension methods\n\n//# sourceURL\x3dhttps://qs/logs/proto/visual_element/click_tracking_cgi-js-binary.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/ve/util.js";
goog.loadModule("goog.module(\x27search.log.ve.util\x27);\n\nconst BinaryEncoder \x3d goog.require(\x27jspb.BinaryEncoder\x27);\nconst BinaryReader \x3d goog.require(\x27jspb.BinaryReader\x27);\nconst ClickTrackingCGI \x3d goog.require(\x27logs.binary.ClickTrackingCGI\x27);\nconst ClientEventIdMessage \x3d goog.require(\x27binary.ClientEventIdMessage\x27);\nconst base64 \x3d goog.require(\x27goog.crypt.base64\x27);\nconst dataset \x3d goog.require(\x27goog.dom.dataset\x27);\nconst dom \x3d goog.require(\x27goog.dom\x27);\n\n// EIs (Event Id) is a base64 encoded EventIdMessage proto that uniquely\n// identifies an event on the page.\n// VEDs (Visual Element Data) are a base64 ClickTrackingCGIProto that is used\n// to identify clicks on a page (but their uses have expanded to also include\n// other user interactions besides clicks). VEDs contain EIs in them.\n// go/ei-in-ved\n\n// Base64 as opposed to javascript prefixing.\nconst VED_BASE64_ENCODING_PREFIX \x3d \x270\x27;\n\n// Prefix of VEDs which use go/explicit-ve-indexing.\nconst VED_BASE64_ENCODING_PREFIX_VE_OFFSET_ID \x3d \x272\x27;\n\n/**\n * Gets the ei from the given element.\n * @param {!Element} element\n * @return {?string}\n */\nfunction getEiFromElement(element) {\n  const ved \x3d exports.getVedFromElement(element);\n  if (!ved) {\n    if (!element.getAttribute) return null;\n    return element.getAttribute(\x27eid\x27);\n  }\n  return getEiFromVed(ved);\n}\n\n/**\n * Gets the ved from the given element.\n * @param {?Element\x3d} element\n * @return {string}\n */\nfunction getVedFromElement(element) {\n  if (goog.isDefAndNotNull(element) \x26\x26 dom.isElement(element)) {\n    return dataset.get(element, \x27ved\x27) || \x27\x27;\n  }\n  return \x27\x27;\n}\n\n/**\n * Gets the raw ved from the given element.\n * @param {?Element\x3d} element\n * @return {string}\n */\nfunction getRawVedFromElement(element) {\n  if (goog.isDefAndNotNull(element) \x26\x26 dom.isElement(element)) {\n    return element.getAttribute(\x27data-ved\x27) || \x27\x27;\n  }\n  return \x27\x27;\n}\n\n/**\n * Decodes and returns event id from VED (encoded visual element data)\n * @param {?string} ved The VED.\n * @return {?string} The EI.\n */\nfunction getEiFromVed(ved) {\n  return encodeEiFromClickTrackingCgi(decodeVed(ved));\n}\n\n/**\n * If the string starts with 0, VED is a base64 encoded wire form of\n * ClickTrackingCGI. This is decoded in the proto form here.\n * The EI is present in the VE Data. go/ei-in-ved\n * @param {?string} ved The VED.\n * @return {?ClickTrackingCGI} The decoded VE data.\n */\nfunction decodeVed(ved) {\n  if (!ved ||\n      ((ved.charAt(0) !\x3d VED_BASE64_ENCODING_PREFIX) \x26\x26\n       (ved.charAt(0) !\x3d VED_BASE64_ENCODING_PREFIX_VE_OFFSET_ID))) {\n    return null;\n  }\n  const value \x3d ved.substring(1);\n  const clickTrackingCgi \x3d new ClickTrackingCGI();\n\n  // If the string starts with 0, VED is a base64 encoded wire form of\n  // ClickTrackingCGI. This is decoded in the proto form here.\n  // The EI is present in the VE Data. go/ei-in-ved\n  try {\n    clickTrackingCgi.readFrom(new BinaryReader(value));\n  } catch (e) {\n    return null;\n  }\n  return clickTrackingCgi;\n}\n\n/**\n * Encodes the EI (in proto form) in base64 from a ClickTrackingCGIProto.\n * The logic is exactly replicated from:\n * depot/google3/logs/lib/eventid/eventid.go\n * @param {?ClickTrackingCGI} clickTrackingCgi The VE proto data.\n * @return {?string} The encoded EI.\n */\nfunction encodeEiFromClickTrackingCgi(clickTrackingCgi) {\n  if (!clickTrackingCgi) return null;\n  return encodeClientEventIdMessage(clickTrackingCgi.getVeEventId());\n}\n\n/**\n * Encodes the EI (in proto form) in base64 from a VeEventIdProto.\n * The logic is exactly replicated from:\n * depot/google3/logs/lib/eventid/eventid.go\n * @param {?ClientEventIdMessage.Const} clientEventIdMessage The VE proto data.\n * @return {?string} The encoded EI.\n */\nfunction encodeClientEventIdMessage(clientEventIdMessage) {\n  if (!clientEventIdMessage) return null;\n  const base \x3d clientEventIdMessage.getBase();\n\n  let time \x3d 0;\n  const tUsecEncoded \x3d base.getTimeUsec();\n  for (let i \x3d tUsecEncoded.length - 1; i \x3e\x3d 0; i--) {\n    time \x3d time * 256 + tUsecEncoded.charCodeAt(i);\n  }\n\n  const timeUSec \x3d time % 1000000;\n  const timeSec \x3d (time - timeUSec) / 1000000;\n  let encodedIp \x3d (base.getServerIp() - 0x0a000000);\n  if (encodedIp \x3c 0) {\n    // 2^32 + encodedIP.\n    encodedIp \x3d (4294967296) + encodedIp;\n  }\n  const processId \x3d base.getProcessId();\n\n  const writer \x3d new BinaryEncoder();\n  writer.writeInt32(timeSec);\n  writer.writeUnsignedVarint32(timeUSec);\n  writer.writeUnsignedVarint32(encodedIp);\n  writer.writeUnsignedVarint32(processId);\n  const buffer \x3d writer.end();\n  const result \x3d base64.encodeByteArray(buffer, true);\n  let i \x3d result.length;\n  while (result.charAt(i - 1) \x3d\x3d \x27.\x27) {\n    i--;\n  }\n  return result.substring(0, i);\n}\n\n/**\n * Finds and returns the relevant VED for the element. If the element has\n * a data-ved attribute, that is returned. Otherwise, the ved will be retrieved\n * from the nearest descendent in a depth first search. Otherwise, returns \x27\x27.\n *\n * @param {?Element} element The element to check for descendants\n *   with a data-ved. A null div is allowed since that is consistent with\n *   getVedFromElement() and getChildVed().\n * @return {string} The VED. Returns \x27\x27 if no descendant has a data-ved or div\n *   is null.\n */\nfunction getDepthFirstVed(element) {\n  if (!element) {\n    return \x27\x27;\n  }\n\n  return getVedFromElement(element) ||\n      getVedFromElement(element.querySelector(\x27[data-ved]\x27));\n}\n\nexports \x3d {\n  getEiFromElement,\n  getVedFromElement,\n  getRawVedFromElement,\n  getEiFromVed,\n  getDepthFirstVed,\n};\n\n//# sourceURL\x3dhttps://qs/gws/js/log/ve/util.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/log_builder.js";
goog.loadModule("goog.module(\x27search.log.LogBuilder\x27);\n\nconst DataHandler \x3d goog.require(\x27search.log.datahandler.DataHandler\x27);\nconst Gws204Transport \x3d goog.require(\x27search.log.transport.Gws204Transport\x27);\nconst Logger \x3d goog.require(\x27search.log.Logger\x27);\nconst Transport \x3d goog.require(\x27search.log.transport.Transport\x27);\nconst asserts \x3d goog.require(\x27goog.asserts\x27);\nconst isBackButton \x3d goog.require(\x27search.function.isBackButton\x27);\nconst veUtil \x3d goog.require(\x27search.log.ve.util\x27);\n\nlet idCounter \x3d 0;\n\nclass LogBuilder {\n  /**\n   * A LogBuilder wraps data that is then sent through a transport, e.g. a\n   * gen_204 that wraps ei and other data fields.\n   * TODO(twilkinson) make this constructor private once that annotation is\n   * enabled on constructors.\n   * @param {!Transport\x3d} transport The desired transport. Defaults to GWS\n   *     gen_204 logging via image fetch.\n   * @param {{\n   *    enableHandlers: (boolean|undefined),\n   *    enableHandlersOnAdd: (boolean|undefined),\n   * }\x3d} params\n   */\n  constructor(\n      transport \x3d LogBuilder.static.getDefaultTransport(),\n      {enableHandlers \x3d true} \x3d {}) {\n    /** @private @const {!Map\x3cstring, string\x3e} */\n    this.data_ \x3d new Map;\n\n    /** @private @const {!Transport} */\n    this.transport_ \x3d transport;\n\n    /** @private {boolean} */\n    this.enableHandlers_ \x3d enableHandlers;\n\n    /** @private {string} */\n    this.id_ \x3d `${idCounter++}`;\n\n    /**\n     * Sets the default ActionType. Other values:\n     *     - i: information. Goes to weblog.\n     *     - csi: Goes to csilog.\n     *     - prec: Pre-click tracking for GMM.\n     */\n    this.addData(\x27atyp\x27, \x27i\x27);\n\n    if (isBackButton()) {\n      this.addData(\x27bb\x27, \x271\x27);\n    }\n  }\n\n  /**\n   * A LogBuilder wraps data that is then sent through a transport.\n   * E.g. a gen_204 that wraps ei and other data fields.\n   * @param {!Transport\x3d} transport The desired transport. Defaults to image\n   *   transport method.\n   * @return {!LogBuilder}\n   */\n  static createDefaultInstance(transport \x3d undefined) {\n    return new LogBuilder(transport).addData(\x27ei\x27, google.kEI);\n  }\n\n  /**\n   * A LogBuilder wraps data that is then sent through a transport.\n   * E.g. a gen_204 that wraps ei and other data fields.\n   *\n   * The current algorithm for finding an EI from an element is to check if the\n   * element has a ved and to parse the EI from that. It\x27s possible and likely\n   * that other users have other needs when it comes to finding EIs (i.e.\n   * searching the DOM) so if your use case is different reach out to\n   * search-ui-chi@/twilkinson@/ndsouza@ or file a bug.\n   * @param {string} ei\n   * @param {!Transport\x3d} transport The desired transport. Defaults to the image\n   *     transport method.\n   * @return {!LogBuilder}\n   */\n  static createWithEi(ei, transport \x3d undefined) {\n    return new LogBuilder(transport).addData(\x27ei\x27, ei);\n  }\n\n  /**\n   * A LogBuilder wraps data that is then sent through a transport.\n   * E.g. a gen_204 that wraps ei and other data fields.\n   * @param {string} ved\n   * @param {!Transport\x3d} transport The desired transport. Defaults to the image\n   *     transport method.\n   * @return {!LogBuilder}\n   */\n  static createWithVed(ved, transport \x3d undefined) {\n    return new LogBuilder(transport).addData(\x27ved\x27, ved);\n  }\n\n  /**\n   * A LogBuilder wraps data that is then sent through a transport.\n   * E.g. a gen_204 that wraps ei and other data fields.\n   *\n   * The current algorithm for finding an EI from an element is to check if the\n   * element has a ved and to parse the EI from that. It\x27s possible and likely\n   * that other users have other needs when it comes to finding EIs (i.e.\n   * searching the DOM) so if your use case is different reach out to\n   * search-ui-chi@/twilkinson@/ndsouza@ or file a bug.\n   * @param {!Element} element\n   * @param {!Transport\x3d} transport The desired transport. Defaults to the image\n   *     transport method.\n   * @return {?LogBuilder}\n   */\n  static createWithElement(element, transport \x3d undefined) {\n    const ved \x3d veUtil.getVedFromElement(element);\n    if (ved) {\n      return LogBuilder.createWithVed(ved, transport);\n    }\n    const ei \x3d veUtil.getEiFromElement(element);\n    if (!ei) return null;\n    return LogBuilder.createWithEi(ei, transport);\n  }\n\n  /**\n   * Action type. Defaults to \x27i\x27 (informational). Other types might be \x27csi\x27.\n   * @param {string} type\n   * @return {!LogBuilder}\n   */\n  setActionType(type) {\n    this.addData(\x27atyp\x27, type);\n    return this;\n  }\n\n  /**\n   * @param {string} key\n   * @param {string} value\n   * @return {!LogBuilder}\n   */\n  addData(key, value) {\n    this.data_.set(key, value);\n    return this;\n  }\n\n  /**\n   * @param {!Map\x3cstring, string\x3e} data\n   * @return {!LogBuilder}\n   */\n  addAllData(data) {\n    data.forEach((value, key) \x3d\x3e this.addData(key, value));\n    return this;\n  }\n\n  /**\n   * Check if data has ei or ved params.\n   * @return {!LogBuilder}\n   */\n  assertCheck() {\n    asserts.assert(this.data_.has(\x27ei\x27) || this.data_.has(\x27ved\x27));\n    return this;\n  }\n\n  /**\n   * Logs the given data through the transport.\n   * @return {!LogBuilder}\n   */\n  log() {\n    if (this.enableHandlers_) {\n      LogBuilder.static.dataHandlers_.forEach(\n          (handler) \x3d\x3e handler.onLog(this.id_, this.data_));\n    }\n    this.transport_.logData(this.data_);\n    return this;\n  }\n}\n\n/**\n * Provides the default Transport. Right now, it is hard-coded to use\n * Gws204Transport with configurable Sender. It is not inlined so that we can\n * stub it in tests.\n */\nLogBuilder.static \x3d {\n  /**\n   * @return {!Transport}\n   */\n  getDefaultTransport() {\n    return new Gws204Transport(Logger.mod.getDefaultSender());\n  },\n\n  /**\n   * @private {!Array\x3c!DataHandler\x3e}\n   */\n  dataHandlers_: [],\n\n  /**\n   * Registers a new data handler.\n   *\n   * @param {!DataHandler} handler\n   */\n  registerDataHandler(handler) {\n    LogBuilder.static.dataHandlers_.push(handler);\n  }\n};\n\nexports \x3d LogBuilder;\n\n//# sourceURL\x3dhttps://qs/gws/js/log/log_builder.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/ve/vet_maker.js";
goog.loadModule("goog.module(\x27search.log.ve.VetMaker\x27);\ngoog.module.declareLegacyNamespace();\n\nconst GraftType \x3d goog.require(\x27search.log.ve.GraftType\x27);\nconst asserts \x3d goog.require(\x27goog.asserts\x27);\nconst util \x3d goog.require(\x27search.log.ve.util\x27);\n\n\n/**\n * The information required for one graft.\n *\n * search.log.ve.graft.GraftInformation has the following attributes:\n *\n * targetVed: The VED of the visual element being modified (shown / hidden, or\n * inserted into).\n *\n * targetElement: The element being modified (shown / hidden, or inserted into).\n * It will be used to obtain ei parameters. This can also be the string \x27_\x27 to\n * indicate the ei of the request. If null, no ei is produced. If targetElement\n * evaluates to false, no ei is produced for that element, which indicates that\n * the target ei is the same as the trigger ei.\n *\n * graftType: \x27s\x27 if the change is a show.\n *            \x27h\x27 if the change is a hide.\n *            \x27i\x27 if the change is an insert graft.\n *            Defaults to show.\n *\n * graftVed: The VED of the visual element being inserted, if it already exists.\n *\n * graftElement: The element being inserted in an insert graft, if it already\n * exists. Used to obtain ei parameters. The string \x27_\x27 indicates the ei of\n * the request.\n *\n * @typedef {{\n *   targetVed: string,\n *   targetElement: (?Element|string),\n *   graftType: !GraftType,\n *   graftVed: (string|undefined),\n *   graftElement: (!Element|string|undefined)\n * }}\n * @private\n */\nlet GraftInformation;\n\n\n/**\n * A class to build up and generate the vet string for visual element grafting.\n */\nclass VetMaker {\n  constructor() {\n    /**\n     * Store the information for each graft.\n     * @private {!Array\x3cGraftInformation\x3e}\n     */\n    this.graft_ \x3d [];\n\n    /**\n     * The ei of the trigger.\n     * @private {string}\n     */\n    this.triggerEI_ \x3d \x27\x27;\n  }\n\n\n  /**\n   * Adds a show graft.\n   * @param {string} targetVed The VED of the visual element being shown.\n   * @param {(?Element|string)\x3d} targetElement The div element of the target.\n   */\n  addShow(targetVed, targetElement \x3d \x27\x27) {\n    this.addGraft(GraftType.SHOW, targetVed, targetElement);\n  }\n\n  /**\n   * Adds a hide graft. This method can be called with no arguments to indicate\n   * a hide with no targetVed.\n   * @param {string\x3d} targetVed The VED of the visual element being\n   *     hidden.\n   * @param {(?Element|string)\x3d} targetElement The div element of the target.\n   */\n  addHide(targetVed \x3d \x27\x27, targetElement \x3d \x27\x27) {\n    this.addGraft(GraftType.HIDE, targetVed, targetElement);\n  }\n\n  /**\n   * Adds an insert graft.\n   * @param {string} targetVed The VED of the visual element being inserted into.\n   * @param {(?Element|string)\x3d} targetElement The div element of the target.\n   */\n  addInsert(targetVed, targetElement \x3d \x27\x27) {\n    this.addGraft(GraftType.INSERT, targetVed, targetElement);\n  }\n\n  /**\n   * Adds an insert graft of an existing VE tree. Normally the request this\n   * graft parameter is attached to does not create a VE tree (e.g. /gen_204).\n   * @param {!Element|string} targetElement The div element being inserted into.\n   * @param {!Element|string} graftElement The div element of the inserted tree.\n   * @param {string\x3d} targetVed The VED of the visual element being inserted\n   *     into. The data-ved attribute of the target element is used if\n   *     unspecified.\n   * @param {string\x3d} graftVed The VED of the visual element being inserted.\n   *     The data-ved attribute of the graft element is used if unspecified.\n   */\n  addInsertExistingTree(targetElement, graftElement, targetVed, graftVed) {\n    // TODO(ndsouza): Clean up references to this method and\n    // create separate methods for elements and veds.\n    let tVed \x3d targetVed ||\n        ((typeof targetElement \x3d\x3d \x27string\x27) ?\n             \x27\x27 :\n             util.getVedFromElement(targetElement));\n    let gVed \x3d graftVed ||\n        ((typeof graftElement \x3d\x3d \x27string\x27) ?\n             \x27\x27 :\n             util.getVedFromElement(graftElement));\n    this.graft_.push({\n      targetVed: tVed,\n      targetElement,\n      graftVed: gVed,\n      graftElement,\n      graftType: GraftType.INSERT\n    });\n  }\n\n  /**\n   * Sets the Trigger EI.\n   * @param {string} triggerEI The EI of the trigger.\n   */\n  setTriggerEI(triggerEI) {\n    this.triggerEI_ \x3d triggerEI;\n  }\n\n  /**\n   * Gets the EI from a dom element.\n   * Returns \x27\x27 if the EI matches the trigger EI, or targetElements is null.\n   * Returns \x27_\x27 if the element passed in is \x27_\x27.\n   * @param {?Element|string|undefined} element The dom element or \x27_\x27.\n   * @return {string} The targetEI.\n   */\n  makeEI(element) {\n    let targetEI \x3d \x27\x27;\n    if (element) {\n      targetEI \x3d (typeof element \x3d\x3d \x27string\x27) ? element : google.getEI(element);\n    }\n    // As an optimization, omit a targetEI that\x27s identical to the knownEI.\n    return (targetEI \x26\x26 (targetEI !\x3d this.triggerEI_)) ? targetEI : \x27\x27;\n  }\n\n  /**\n   * Returns the value of the vet attribute. This is used in gen204 requests for\n   * visual element grafting.\n   * The vet parameter\x27s value has the form 1\x3cgraft-action1\x3e;\x3cgraft-action2\x3e;\n   * etc, where each \x3cgraft-action\x3e can be any of: ved1.ei1 for a show,\n   *   ved1.ei1.h for a hide,\n   *   ved1.ei1.i for an insert with VE tree from the graft request, or\n   *   ved1.ei1.i.0.ved2.ei2 for an insert with VE tree from a previous request.\n   * Any eis that evaluate to false or match the triggerEI will be omitted.\n   * @return {string} The vet parameter\x27s value.\n   */\n  makeVetValue() {\n    const vetStrings \x3d [];\n    for (const {\n           targetVed,\n           targetElement,\n           graftType,\n           graftVed,\n           graftElement\n         } of this.graft_) {\n      let targetEI \x3d this.makeEI(targetElement) || \x27\x27;\n      switch (graftType) {\n        case GraftType.SHOW:\n          // Show is the default. Be explicit anyway by adding \x27s\x27.\n          vetStrings.push(targetVed + \x27.\x27 + targetEI + \x27.s\x27);\n          break;\n        case GraftType.INSERT:\n          let graftEI \x3d this.makeEI(graftElement);\n          let insertTree \x3d graftEI ? \x27.0.\x27 + graftVed + \x27.\x27 + graftEI : \x27\x27;\n          vetStrings.push(targetVed + \x27.\x27 + targetEI + \x27.i\x27 + insertTree);\n          break;\n        case GraftType.HIDE:\n          vetStrings.push(targetVed + \x27.\x27 + targetEI + \x27.h\x27);\n          break;\n        default:\n          // Unsupported graft type. This should be impossible except during\n          // development, as someone adds the next type.\n          asserts.fail(\x27Unsupported graft type \x27 + graftType);\n      }\n    }\n    return (vetStrings.length \x3e 0) ? \x271\x27 + vetStrings.join(\x27;\x27) : \x27\x27;\n  }\n\n  /**\n   * Returns the vet attribute and its value. This is used in gen204 requests\n   * for visual element grafting. The vet parameter has the form\n   * \x26vet\x3d1\x3cgraft-action1\x3e;\x3cgraft-action2\x3e; etc, where each \x3cgraft-action\x3e can\n   * be any of: ved1.ei1 for a show, ved1.ei1.h for a hide, ved1.ei1.i for an\n   * insert with VE tree from the graft request, or ved1.ei1.i.0.ved2.ei2 for\n   * an insert with VE tree from a previous request. Any eis that evaluate to\n   * false or match the triggerEI will be omitted.\n   * @return {string} The vet parameter.\n   */\n  makeVet() {\n    const vetValue \x3d this.makeVetValue();\n    if (vetValue) {\n      return \x27\x26vet\x3d\x27 + vetValue;\n    }\n    return \x27\x27;\n  }\n\n  /**\n   * Returns whether this has a graft or not.\n   * @return {boolean}\n   */\n  hasGraft() {\n    return this.graft_.length \x3e 0;\n  }\n\n  /**\n   * @param {!GraftType} graftType\n   * @param {string} targetVed The VED of the visual element being shown.\n   * @param {(?Element|string)\x3d} targetElement The div element of the target.\n   */\n  addGraft(graftType, targetVed, targetElement \x3d \x27\x27) {\n    this.graft_.push({targetVed, targetElement, graftType});\n  }\n}\n\n/**\n * Used only for testing.\n * @package\n */\nVetMaker.testing \x3d {\n  /**\n   * Initializes the graft.\n   * @param {!VetMaker} vetMaker\n   * @return {!VetMaker}\n   */\n  setUp(vetMaker) {\n    if (vetMaker) {\n      vetMaker.graft_ \x3d [];\n      vetMaker.triggerEI_ \x3d \x27\x27;\n      return vetMaker;\n    }\n    return new VetMaker();\n  },\n  /**\n   * @param {!VetMaker} vetMaker\n   * @param {string} ei\n   */\n  setTriggerEI(vetMaker, ei) {\n    vetMaker.triggerEI_ \x3d ei;\n  }\n};\n\nexports \x3d VetMaker;\n\n//# sourceURL\x3dhttps://qs/gws/js/log/ve/vet_maker.js\n");

$googDebugFname=undefined;
var $googDebugFname="logs/proto/visual_element/user_action_enum.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.logs.CardinalDirection\x27);\ngoog.provide(\x27proto.logs.UserAction\x27);\n\n/**\n * @enum {number}\n */\nproto.logs.UserAction \x3d {\n  UNASSIGNED_USER_ACTION_ID: 0,\n  AUTOMATED: 1,\n  USER: 2,\n  GENERIC_CLICK: 3,\n  TAP: 4,\n  KEYBOARD_ENTER: 5,\n  MOUSE_CLICK: 6,\n  LEFT_CLICK: 7,\n  RIGHT_CLICK: 8,\n  HOVER: 9,\n  INTO_BOUNDING_BOX: 10,\n  OUT_OF_BOUNDING_BOX: 11,\n  PINCH: 12,\n  PINCH_OPEN: 13,\n  PINCH_CLOSED: 14,\n  INPUT_TEXT: 15,\n  INPUT_KEYBOARD: 16,\n  INPUT_VOICE: 17,\n  RESIZE_BROWSER: 18,\n  ROTATE_SCREEN: 19,\n  DIRECTIONAL_MOVEMENT: 20,\n  SWIPE: 21,\n  SCROLL_BAR: 22,\n  MOUSE_WHEEL: 23,\n  ARROW_KEYS: 24,\n  NAVIGATE: 25,\n  BACK_BUTTON: 26,\n  UNKNOWN_ACTION: 27,\n  HEAD_MOVEMENT: 28,\n  SHAKE: 29,\n  DRAG: 30,\n  LONG_PRESS: 31,\n  KEY_PRESS: 32,\n  ACTION_BY_TIMER: 33,\n  DOUBLE_CLICK: 34,\n  DOUBLE_TAP: 35,\n  ROLL: 36,\n  DROP: 37,\n  FORCE_TOUCH: 38,\n  MULTI_KEY_PRESS: 39\n};\n\n/**\n * @enum {number}\n */\nproto.logs.CardinalDirection \x3d {\n  UNASSIGNED_DIRECTIONAL_MOVEMENT_ID: 0,\n  LEFT: 1,\n  RIGHT: 2,\n  UP: 3,\n  DOWN: 4\n};\n\n\n//# sourceURL\x3dhttps://qs/logs/proto/visual_element/user_action_enum.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/ve/interaction/logger.js";
goog.loadModule("goog.module(\x27search.log.ve.interaction\x27);\ngoog.module.declareLegacyNamespace();\n\nconst GraftType \x3d goog.require(\x27search.log.ve.GraftType\x27);\nconst LogBuilder \x3d goog.require(\x27search.log.LogBuilder\x27);\nconst UserAction \x3d goog.require(\x27proto.logs.UserAction\x27);\nconst VetMaker \x3d goog.require(\x27search.log.ve.VetMaker\x27);\nconst veUtil \x3d goog.require(\x27search.log.ve.util\x27);\nconst {assert} \x3d goog.require(\x27goog.asserts\x27);\n\n/**\n * The supported VE metrics for interaction logging.\n * @enum {string}\n */\nconst VeParams \x3d {\n  VED: \x27ved\x27,\n  VET: \x27vet\x27,\n  ICTX: \x27ictx\x27,\n  UACT: \x27uact\x27,\n};\n\n/**\n * Element that needs to be grafted along with the type of Graft.\n */\nclass Graft {\n  /**\n   * @param {!Element} element\n   * @param {!GraftType} type\n   */\n  constructor(element, type) {\n    this.element \x3d element;\n    this.type \x3d type;\n  }\n}\n\n/**\n * Logs interactions on elements that need to be grafted. These include\n * visibility changes as well as Insert Grafts. This API also logs an\n * interaction on the trigger element, if one is provided.\n * eg. See https://screenshot.googleplex.com/HfvegqXxhus\n * For more info on grafting, please read go/vegrafting.\n *\n * For interactionContext and userAction, please read go/multiple-interactions.\n *\n * Usage examples:\n * Show Graft:\n *  logGrafts([new Graft(element, GraftType.SHOW)], {triggerElement: trigger});\n *\n * Hide Graft:\n *  logGrafts([new Graft(element, GraftType.HIDE)], {triggerElement: trigger});\n *\n * More info and examples at go/web-interaction-api.\n *\n * @param {!Array\x3c!Graft\x3e} grafts\n * @param {{\n *    triggerElement: (!Element|undefined),\n *    interactionContext: (number|undefined),\n *    userAction: (!UserAction|undefined),\n *    data: (!Object\x3cstring, string\x3e|undefined),\n * }\x3d} params\n */\nfunction logGrafts(\n    grafts, {triggerElement, interactionContext, userAction, data} \x3d {}) {\n  logIt({\n    triggerElement,\n    interactionContext,\n    userAction,\n    grafts,\n    data\n  });\n}\n\n/**\n * Logs interactions on the element that are not grafts.\n * eg. See https://screenshot.googleplex.com/7wst7Zn5iWB\n *\n * @param {!Element} triggerElement\n * @param {{\n *    interactionContext: (number|undefined),\n *    userAction: (!UserAction|undefined),\n *    data: (!Object\x3cstring, string\x3e|undefined),\n * }\x3d} params\n */\nfunction logInteraction(\n    triggerElement, {interactionContext, userAction, data} \x3d {}) {\n  logIt({triggerElement, interactionContext, userAction, data});\n}\n\n/**\n * Actually builds the logger and logs the interactions given the transport.\n *\n * @param {{\n *    triggerElement: (!Element|undefined),\n *    interactionContext: (number|undefined),\n *    userAction: (!UserAction|undefined),\n *    grafts: (!Array\x3c!Graft\x3e|undefined),\n *    data: (!Object\x3cstring, string\x3e|undefined),\n * }\x3d} params\n */\nfunction logIt(\n    {triggerElement, interactionContext, userAction, grafts, data} \x3d {}) {\n  const ei \x3d triggerElement ? google.getEI(triggerElement) : google.kEI;\n  const logBuilder \x3d LogBuilder.createWithEi(ei);\n\n  if (triggerElement) {\n    // Only send the \x27ved\x27 if there is a trigger.\n    const ved \x3d veUtil.getVedFromElement(triggerElement);\n    assert(ved, \x27Trigger elements must have a ved in order to log grafts.\x27);\n    logBuilder.addData(VeParams.VED, ved);\n  }\n\n  if (interactionContext) {\n    logBuilder.addData(VeParams.ICTX, String(interactionContext));\n  }\n  if (userAction) {\n    logBuilder.addData(VeParams.UACT, String(userAction));\n  }\n\n  if (grafts) {\n    const graftMaker \x3d new VetMaker();\n    for (const graft of grafts) {\n      const ved \x3d veUtil.getVedFromElement(graft.element);\n      graftMaker.addGraft(graft.type, ved, graft.element);\n    }\n    // NOTE: This is only necessary because go/ei-in-vet is not launched yet.\n    // Setting this field on the graft will remove the redundant \x22Ei\x22 from\n    // the \x22vet\x22 parameter since we\x27re already adding a separate \x22ei\x22 param.\n    // \x22ei\x22 is required for analysis scripts to parent the event correctly.\n    // See https://screenshot.googleplex.com/krFcDsekyOC\n    // Once go/ei-in-vet is launched, we should remove the extra \x22ei\x22 param\n    // and this bit.\n    graftMaker.setTriggerEI(ei);\n    logBuilder.addData(VeParams.VET, graftMaker.makeVetValue());\n  }\n\n  // Any additional data that may need to be logged.\n  if (data) {\n    for (const key in data) {\n      logBuilder.addData(key, data[key]);\n    }\n  }\n  logBuilder.log();\n}\n\n\nexports \x3d {\n  logGrafts,\n  logInteraction,\n  Graft\n};\n\n//# sourceURL\x3dhttps://qs/gws/js/log/ve/interaction/logger.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/async/nexttick.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Provides a function to schedule running a function as soon\n * as possible after the current JS execution stops and yields to the event\n * loop.\n *\n * @author malteubl@google.com (Malte Ubl)\n */\n\ngoog.provide(\x27goog.async.nextTick\x27);\ngoog.provide(\x27goog.async.throwException\x27);\n\ngoog.require(\x27goog.debug.entryPointRegistry\x27);\ngoog.require(\x27goog.dom.TagName\x27);\ngoog.require(\x27goog.functions\x27);\ngoog.require(\x27goog.labs.userAgent.browser\x27);\ngoog.require(\x27goog.labs.userAgent.engine\x27);\n\n\n/**\n * Throw an item without interrupting the current execution context.  For\n * example, if processing a group of items in a loop, sometimes it is useful\n * to report an error while still allowing the rest of the batch to be\n * processed.\n * @param {*} exception\n */\ngoog.async.throwException \x3d function(exception) {\n  // Each throw needs to be in its own context.\n  goog.global.setTimeout(function() { throw exception; }, 0);\n};\n\n\n/**\n * Fires the provided callbacks as soon as possible after the current JS\n * execution context. setTimeout(\u2026, 0) takes at least 4ms when called from\n * within another setTimeout(\u2026, 0) for legacy reasons.\n *\n * This will not schedule the callback as a microtask (i.e. a task that can\n * preempt user input or networking callbacks). It is meant to emulate what\n * setTimeout(_, 0) would do if it were not throttled. If you desire microtask\n * behavior, use {@see goog.Promise} instead.\n *\n * @param {function(this:SCOPE)} callback Callback function to fire as soon as\n *     possible.\n * @param {SCOPE\x3d} opt_context Object in whose scope to call the listener.\n * @param {boolean\x3d} opt_useSetImmediate Avoid the IE workaround that\n *     ensures correctness at the cost of speed. See comments for details.\n * @template SCOPE\n */\ngoog.async.nextTick \x3d function(callback, opt_context, opt_useSetImmediate) {\n  var cb \x3d callback;\n  if (opt_context) {\n    cb \x3d goog.bind(callback, opt_context);\n  }\n  cb \x3d goog.async.nextTick.wrapCallback_(cb);\n  // Note we do allow callers to also request setImmediate if they are willing\n  // to accept the possible tradeoffs of incorrectness in exchange for speed.\n  // The IE fallback of readystate change is much slower. See useSetImmediate_\n  // for details.\n  if (goog.isFunction(goog.global.setImmediate) \x26\x26\n      (opt_useSetImmediate || goog.async.nextTick.useSetImmediate_())) {\n    goog.global.setImmediate(cb);\n    return;\n  }\n\n  // Look for and cache the custom fallback version of setImmediate.\n  if (!goog.async.nextTick.setImmediate_) {\n    goog.async.nextTick.setImmediate_ \x3d\n        goog.async.nextTick.getSetImmediateEmulator_();\n  }\n  goog.async.nextTick.setImmediate_(cb);\n};\n\n\n/**\n * Returns whether should use setImmediate implementation currently on window.\n *\n * window.setImmediate was introduced and currently only supported by IE10+,\n * but due to a bug in the implementation it is not guaranteed that\n * setImmediate is faster than setTimeout nor that setImmediate N is before\n * setImmediate N+1. That is why we do not use the native version if\n * available. We do, however, call setImmediate if it is a non-native function\n * because that indicates that it has been replaced by goog.testing.MockClock\n * which we do want to support.\n * See\n * http://connect.microsoft.com/IE/feedback/details/801823/setimmediate-and-messagechannel-are-broken-in-ie10\n *\n * @return {boolean} Whether to use the implementation of setImmediate defined\n *     on Window.\n * @private\n * @suppress {missingProperties} For \x22Window.prototype.setImmediate\x22\n */\ngoog.async.nextTick.useSetImmediate_ \x3d function() {\n  // Not a browser environment.\n  if (!goog.global.Window || !goog.global.Window.prototype) {\n    return true;\n  }\n\n  // MS Edge has window.setImmediate natively, but it\x27s not on Window.prototype.\n  // Also, there\x27s no clean way to detect if the goog.global.setImmediate has\n  // been replaced by mockClock as its replacement also shows up as \x22[native\n  // code]\x22 when using toString. Therefore, just always use\n  // goog.global.setImmediate for Edge. It\x27s unclear if it suffers the same\n  // issues as IE10/11, but based on\n  // https://dev.modern.ie/testdrive/demos/setimmediatesorting/\n  // it seems they\x27ve been working to ensure it\x27s WAI.\n  if (goog.labs.userAgent.browser.isEdge() ||\n      goog.global.Window.prototype.setImmediate !\x3d goog.global.setImmediate) {\n    // Something redefined setImmediate in which case we decide to use it (This\n    // is so that we use the mockClock setImmediate).\n    return true;\n  }\n\n  return false;\n};\n\n\n/**\n * Cache for the setImmediate implementation.\n * @type {function(function())}\n * @private\n */\ngoog.async.nextTick.setImmediate_;\n\n\n/**\n * Determines the best possible implementation to run a function as soon as\n * the JS event loop is idle.\n * @return {function(function())} The \x22setImmediate\x22 implementation.\n * @private\n */\ngoog.async.nextTick.getSetImmediateEmulator_ \x3d function() {\n  // Create a private message channel and use it to postMessage empty messages\n  // to ourselves.\n  /** @type {!Function|undefined} */\n  var Channel \x3d goog.global[\x27MessageChannel\x27];\n  // If MessageChannel is not available and we are in a browser, implement\n  // an iframe based polyfill in browsers that have postMessage and\n  // document.addEventListener. The latter excludes IE8 because it has a\n  // synchronous postMessage implementation.\n  if (typeof Channel \x3d\x3d\x3d \x27undefined\x27 \x26\x26 typeof window !\x3d\x3d \x27undefined\x27 \x26\x26\n      window.postMessage \x26\x26 window.addEventListener \x26\x26\n      // Presto (The old pre-blink Opera engine) has problems with iframes\n      // and contentWindow.\n      !goog.labs.userAgent.engine.isPresto()) {\n    /** @constructor */\n    Channel \x3d function() {\n      // Make an empty, invisible iframe.\n      var iframe \x3d /** @type {!HTMLIFrameElement} */ (\n          document.createElement(String(goog.dom.TagName.IFRAME)));\n      iframe.style.display \x3d \x27none\x27;\n      iframe.src \x3d \x27\x27;\n      document.documentElement.appendChild(iframe);\n      var win \x3d iframe.contentWindow;\n      var doc \x3d win.document;\n      doc.open();\n      doc.write(\x27\x27);\n      doc.close();\n      // Do not post anything sensitive over this channel, as the workaround for\n      // pages with file: origin could allow that information to be modified or\n      // intercepted.\n      var message \x3d \x27callImmediate\x27 + Math.random();\n      // The same origin policy rejects attempts to postMessage from file: urls\n      // unless the origin is \x27*\x27.\n      var origin \x3d win.location.protocol \x3d\x3d \x27file:\x27 ?\n          \x27*\x27 :\n          win.location.protocol + \x27//\x27 + win.location.host;\n      var onmessage \x3d goog.bind(function(e) {\n        // Validate origin and message to make sure that this message was\n        // intended for us. If the origin is set to \x27*\x27 (see above) only the\n        // message needs to match since, for example, \x27*\x27 !\x3d \x27file://\x27. Allowing\n        // the wildcard is ok, as we are not concerned with security here.\n        if ((origin !\x3d \x27*\x27 \x26\x26 e.origin !\x3d origin) || e.data !\x3d message) {\n          return;\n        }\n        this[\x27port1\x27].onmessage();\n      }, this);\n      win.addEventListener(\x27message\x27, onmessage, false);\n      this[\x27port1\x27] \x3d {};\n      this[\x27port2\x27] \x3d {\n        postMessage: function() { win.postMessage(message, origin); }\n      };\n    };\n  }\n  if (typeof Channel !\x3d\x3d \x27undefined\x27 \x26\x26 !goog.labs.userAgent.browser.isIE()) {\n    // Exclude all of IE due to\n    // http://codeforhire.com/2013/09/21/setimmediate-and-messagechannel-broken-on-internet-explorer-10/\n    // which allows starving postMessage with a busy setTimeout loop.\n    // This currently affects IE10 and IE11 which would otherwise be able\n    // to use the postMessage based fallbacks.\n    var channel \x3d new Channel();\n    // Use a fifo linked list to call callbacks in the right order.\n    var head \x3d {};\n    var tail \x3d head;\n    channel[\x27port1\x27].onmessage \x3d function() {\n      if (goog.isDef(head.next)) {\n        head \x3d head.next;\n        var cb \x3d head.cb;\n        head.cb \x3d null;\n        cb();\n      }\n    };\n    return function(cb) {\n      tail.next \x3d {cb: cb};\n      tail \x3d tail.next;\n      channel[\x27port2\x27].postMessage(0);\n    };\n  }\n  // Implementation for IE6 to IE10: Script elements fire an asynchronous\n  // onreadystatechange event when inserted into the DOM.\n  if (typeof document !\x3d\x3d \x27undefined\x27 \x26\x26\n      \x27onreadystatechange\x27 in\n          document.createElement(String(goog.dom.TagName.SCRIPT))) {\n    return function(cb) {\n      var script \x3d document.createElement(String(goog.dom.TagName.SCRIPT));\n      script.onreadystatechange \x3d function() {\n        // Clean up and call the callback.\n        script.onreadystatechange \x3d null;\n        script.parentNode.removeChild(script);\n        script \x3d null;\n        cb();\n        cb \x3d null;\n      };\n      document.documentElement.appendChild(script);\n    };\n  }\n  // Fall back to setTimeout with 0. In browsers this creates a delay of 5ms\n  // or more.\n  // NOTE(step): This fallback is used for IE11.\n  return function(cb) {\n    goog.global.setTimeout(/** @type {function()} */ (cb), 0);\n  };\n};\n\n\n/**\n * Helper function that is overrided to protect callbacks with entry point\n * monitor if the application monitors entry points.\n * @param {function()} callback Callback function to fire as soon as possible.\n * @return {function()} The wrapped callback.\n * @private\n */\ngoog.async.nextTick.wrapCallback_ \x3d goog.functions.identity;\n\n\n// Register the callback function as an entry point, so that it can be\n// monitored for exception handling, etc. This has to be done in this file\n// since it requires special code to handle all browsers.\ngoog.debug.entryPointRegistry.register(\n    /**\n     * @param {function(!Function): !Function} transformer The transforming\n     *     function.\n     */\n    function(transformer) { goog.async.nextTick.wrapCallback_ \x3d transformer; });\n\n//# sourceURL\x3dhttps://qs/javascript/closure/async/nexttick.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/async/freelist.js";
eval("// Copyright 2015 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Simple freelist.\n *\n * An anterative to goog.structs.SimplePool, it imposes the requirement that the\n * objects in the list contain a \x22next\x22 property that can be used to maintain\n * the pool.\n */\n\ngoog.provide(\x27goog.async.FreeList\x27);\n\n\n/**\n * @template ITEM\n */\ngoog.async.FreeList \x3d goog.defineClass(null, {\n  /**\n   * @param {function():ITEM} create\n   * @param {function(ITEM):void} reset\n   * @param {number} limit\n   */\n  constructor: function(create, reset, limit) {\n    /** @private @const {number} */\n    this.limit_ \x3d limit;\n    /** @private @const {function()} */\n    this.create_ \x3d create;\n    /** @private @const {function(ITEM):void} */\n    this.reset_ \x3d reset;\n\n    /** @private {number} */\n    this.occupants_ \x3d 0;\n    /** @private {ITEM} */\n    this.head_ \x3d null;\n  },\n\n  /**\n   * @return {ITEM}\n   */\n  get: function() {\n    var item;\n    if (this.occupants_ \x3e 0) {\n      this.occupants_--;\n      item \x3d this.head_;\n      this.head_ \x3d item.next;\n      item.next \x3d null;\n    } else {\n      item \x3d this.create_();\n    }\n    return item;\n  },\n\n  /**\n   * @param {ITEM} item An item available for possible future reuse.\n   */\n  put: function(item) {\n    this.reset_(item);\n    if (this.occupants_ \x3c this.limit_) {\n      this.occupants_++;\n      item.next \x3d this.head_;\n      this.head_ \x3d item;\n    }\n  },\n\n  /**\n   * Visible for testing.\n   * @package\n   * @return {number}\n   */\n  occupants: function() { return this.occupants_; }\n});\n\n//# sourceURL\x3dhttps://qs/javascript/closure/async/freelist.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/async/workqueue.js";
eval("// Copyright 2015 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ngoog.provide(\x27goog.async.WorkItem\x27);\ngoog.provide(\x27goog.async.WorkQueue\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.async.FreeList\x27);\n\n\n// TODO(johnlenz): generalize the WorkQueue if this is used by more\n// than goog.async.run.\n\n\n\n/**\n * A low GC workqueue. The key elements of this design:\n *   - avoids the need for goog.bind or equivalent by carrying scope\n *   - avoids the need for array reallocation by using a linked list\n *   - minimizes work entry objects allocation by recycling objects\n * @constructor\n * @final\n * @struct\n */\ngoog.async.WorkQueue \x3d function() {\n  this.workHead_ \x3d null;\n  this.workTail_ \x3d null;\n};\n\n\n/** @define {number} The maximum number of entries to keep for recycling. */\ngoog.define(\x27goog.async.WorkQueue.DEFAULT_MAX_UNUSED\x27, 100);\n\n\n/** @const @private {goog.async.FreeList\x3cgoog.async.WorkItem\x3e} */\ngoog.async.WorkQueue.freelist_ \x3d new goog.async.FreeList(\n    function() { return new goog.async.WorkItem(); },\n    function(item) { item.reset(); }, goog.async.WorkQueue.DEFAULT_MAX_UNUSED);\n\n\n/**\n * @param {function()} fn\n * @param {Object|null|undefined} scope\n */\ngoog.async.WorkQueue.prototype.add \x3d function(fn, scope) {\n  var item \x3d this.getUnusedItem_();\n  item.set(fn, scope);\n\n  if (this.workTail_) {\n    this.workTail_.next \x3d item;\n    this.workTail_ \x3d item;\n  } else {\n    goog.asserts.assert(!this.workHead_);\n    this.workHead_ \x3d item;\n    this.workTail_ \x3d item;\n  }\n};\n\n\n/**\n * @return {goog.async.WorkItem}\n */\ngoog.async.WorkQueue.prototype.remove \x3d function() {\n  var item \x3d null;\n\n  if (this.workHead_) {\n    item \x3d this.workHead_;\n    this.workHead_ \x3d this.workHead_.next;\n    if (!this.workHead_) {\n      this.workTail_ \x3d null;\n    }\n    item.next \x3d null;\n  }\n  return item;\n};\n\n\n/**\n * @param {goog.async.WorkItem} item\n */\ngoog.async.WorkQueue.prototype.returnUnused \x3d function(item) {\n  goog.async.WorkQueue.freelist_.put(item);\n};\n\n\n/**\n * @return {goog.async.WorkItem}\n * @private\n */\ngoog.async.WorkQueue.prototype.getUnusedItem_ \x3d function() {\n  return goog.async.WorkQueue.freelist_.get();\n};\n\n\n\n/**\n * @constructor\n * @final\n * @struct\n */\ngoog.async.WorkItem \x3d function() {\n  /** @type {?function()} */\n  this.fn \x3d null;\n  /** @type {Object|null|undefined} */\n  this.scope \x3d null;\n  /** @type {?goog.async.WorkItem} */\n  this.next \x3d null;\n};\n\n\n/**\n * @param {function()} fn\n * @param {Object|null|undefined} scope\n */\ngoog.async.WorkItem.prototype.set \x3d function(fn, scope) {\n  this.fn \x3d fn;\n  this.scope \x3d scope;\n  this.next \x3d null;\n};\n\n\n/** Reset the work item so they don\x27t prevent GC before reuse */\ngoog.async.WorkItem.prototype.reset \x3d function() {\n  this.fn \x3d null;\n  this.scope \x3d null;\n  this.next \x3d null;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/async/workqueue.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/async/run.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ngoog.provide(\x27goog.async.run\x27);\n\ngoog.require(\x27goog.async.WorkQueue\x27);\ngoog.require(\x27goog.async.nextTick\x27);\ngoog.require(\x27goog.async.throwException\x27);\n\n\n/**\n * Fires the provided callback just before the current callstack unwinds, or as\n * soon as possible after the current JS execution context.\n * @param {function(this:THIS)} callback\n * @param {THIS\x3d} opt_context Object to use as the \x22this value\x22 when calling\n *     the provided function.\n * @template THIS\n */\ngoog.async.run \x3d function(callback, opt_context) {\n  if (!goog.async.run.schedule_) {\n    goog.async.run.initializeRunner_();\n  }\n  if (!goog.async.run.workQueueScheduled_) {\n    // Nothing is currently scheduled, schedule it now.\n    goog.async.run.schedule_();\n    goog.async.run.workQueueScheduled_ \x3d true;\n  }\n\n  goog.async.run.workQueue_.add(callback, opt_context);\n};\n\n\n/**\n * Initializes the function to use to process the work queue.\n * @private\n */\ngoog.async.run.initializeRunner_ \x3d function() {\n  // If Promises are available in the browser, just schedule the callback\n  // on a fulfilled promise, which is specified to be async, but as fast as\n  // possible.  Use goog.global.Promise instead of just Promise because the\n  // relevant externs may be missing, and don\x27t alias it because this could\n  // confuse the compiler into thinking the polyfill is required when it should\n  // be treated as optional.\n  if (goog.global.Promise \x26\x26 goog.global.Promise.resolve) {\n    var promise \x3d goog.global.Promise.resolve(undefined);\n    goog.async.run.schedule_ \x3d function() {\n      promise.then(goog.async.run.processWorkQueue);\n    };\n  } else {\n    goog.async.run.schedule_ \x3d function() {\n      goog.async.nextTick(goog.async.run.processWorkQueue);\n    };\n  }\n};\n\n\n/**\n * Forces goog.async.run to use nextTick instead of Promise.\n *\n * This should only be done in unit tests. It\x27s useful because MockClock\n * replaces nextTick, but not the browser Promise implementation, so it allows\n * Promise-based code to be tested with MockClock.\n *\n * However, we also want to run promises if the MockClock is no longer in\n * control so we schedule a backup \x22setTimeout\x22 to the unmocked timeout if\n * provided.\n *\n * @param {function(function())\x3d} opt_realSetTimeout\n */\ngoog.async.run.forceNextTick \x3d function(opt_realSetTimeout) {\n  goog.async.run.schedule_ \x3d function() {\n    goog.async.nextTick(goog.async.run.processWorkQueue);\n    if (opt_realSetTimeout) {\n      opt_realSetTimeout(goog.async.run.processWorkQueue);\n    }\n  };\n};\n\n\n/**\n * The function used to schedule work asynchronousely.\n * @private {function()}\n */\ngoog.async.run.schedule_;\n\n\n/** @private {boolean} */\ngoog.async.run.workQueueScheduled_ \x3d false;\n\n\n/** @private {!goog.async.WorkQueue} */\ngoog.async.run.workQueue_ \x3d new goog.async.WorkQueue();\n\n\nif (goog.DEBUG) {\n  /**\n   * Reset the work queue. Only available for tests in debug mode.\n   */\n  goog.async.run.resetQueue \x3d function() {\n    goog.async.run.workQueueScheduled_ \x3d false;\n    goog.async.run.workQueue_ \x3d new goog.async.WorkQueue();\n  };\n}\n\n\n/**\n * Run any pending goog.async.run work items. This function is not intended\n * for general use, but for use by entry point handlers to run items ahead of\n * goog.async.nextTick.\n */\ngoog.async.run.processWorkQueue \x3d function() {\n  // NOTE: additional work queue items may be added while processing.\n  var item \x3d null;\n  while (item \x3d goog.async.run.workQueue_.remove()) {\n    try {\n      item.fn.call(item.scope);\n    } catch (e) {\n      goog.async.throwException(e);\n    }\n    goog.async.run.workQueue_.returnUnused(item);\n  }\n\n  // There are no more work items, allow processing to be scheduled again.\n  goog.async.run.workQueueScheduled_ \x3d false;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/async/run.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/promise/resolver.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ngoog.provide(\x27goog.promise.Resolver\x27);\n\ngoog.forwardDeclare(\x27goog.Promise\x27);\n\n\n\n/**\n * Resolver interface for promises. The resolver is a convenience interface that\n * bundles the promise and its associated resolve and reject functions together,\n * for cases where the resolver needs to be persisted internally.\n *\n * @interface\n * @template TYPE\n */\ngoog.promise.Resolver \x3d function() {};\n\n\n/**\n * The promise that created this resolver.\n * @type {!goog.Promise\x3cTYPE\x3e}\n */\ngoog.promise.Resolver.prototype.promise;\n\n\n/**\n * Resolves this resolver with the specified value.\n * @type {function((TYPE|goog.Promise\x3cTYPE\x3e|Thenable)\x3d)}\n */\ngoog.promise.Resolver.prototype.resolve;\n\n\n/**\n * Rejects this resolver with the specified reason.\n * @type {function(*\x3d): void}\n */\ngoog.promise.Resolver.prototype.reject;\n\n//# sourceURL\x3dhttps://qs/javascript/closure/promise/resolver.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/promise/thenable.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ngoog.provide(\x27goog.Thenable\x27);\n\n/** @suppress {extraRequire} */\ngoog.forwardDeclare(\x27goog.Promise\x27); // for the type reference.\n\n\n\n/**\n * Provides a more strict interface for Thenables in terms of\n * http://promisesaplus.com for interop with {@see goog.Promise}.\n *\n * @interface\n * @extends {IThenable\x3cTYPE\x3e}\n * @template TYPE\n */\ngoog.Thenable \x3d function() {};\n\n\n/**\n * Adds callbacks that will operate on the result of the Thenable, returning a\n * new child Promise.\n *\n * If the Thenable is fulfilled, the `onFulfilled` callback will be\n * invoked with the fulfillment value as argument, and the child Promise will\n * be fulfilled with the return value of the callback. If the callback throws\n * an exception, the child Promise will be rejected with the thrown value\n * instead.\n *\n * If the Thenable is rejected, the `onRejected` callback will be invoked\n * with the rejection reason as argument, and the child Promise will be rejected\n * with the return value of the callback or thrown value.\n *\n * @param {?(function(this:THIS, TYPE): VALUE)\x3d} opt_onFulfilled A\n *     function that will be invoked with the fulfillment value if the Promise\n *     is fulfilled.\n * @param {?(function(this:THIS, *): *)\x3d} opt_onRejected A function that will\n *     be invoked with the rejection reason if the Promise is rejected.\n * @param {THIS\x3d} opt_context An optional context object that will be the\n *     execution context for the callbacks. By default, functions are executed\n *     with the default this.\n *\n * @return {RESULT} A new Promise that will receive the result\n *     of the fulfillment or rejection callback.\n * @template VALUE\n * @template THIS\n *\n * When a Promise (or thenable) is returned from the fulfilled callback,\n * the result is the payload of that promise, not the promise itself.\n *\n * @template RESULT :\x3d type(\x27goog.Promise\x27,\n *     cond(isUnknown(VALUE), unknown(),\n *       mapunion(VALUE, (V) \x3d\x3e\n *         cond(isTemplatized(V) \x26\x26 sub(rawTypeOf(V), \x27IThenable\x27),\n *           templateTypeOf(V, 0),\n *           cond(sub(V, \x27Thenable\x27),\n *              unknown(),\n *              V)))))\n *  \x3d:\n *\n */\ngoog.Thenable.prototype.then \x3d function(\n    opt_onFulfilled, opt_onRejected, opt_context) {};\n\n\n/**\n * An expando property to indicate that an object implements\n * `goog.Thenable`.\n *\n * {@see addImplementation}.\n *\n * @const\n */\ngoog.Thenable.IMPLEMENTED_BY_PROP \x3d \x27$goog_Thenable\x27;\n\n\n/**\n * Marks a given class (constructor) as an implementation of Thenable, so\n * that we can query that fact at runtime. The class must have already\n * implemented the interface.\n * Exports a \x27then\x27 method on the constructor prototype, so that the objects\n * also implement the extern {@see goog.Thenable} interface for interop with\n * other Promise implementations.\n * @param {function(new:goog.Thenable,...?)} ctor The class constructor. The\n *     corresponding class must have already implemented the interface.\n */\ngoog.Thenable.addImplementation \x3d function(ctor) {\n  // Use bracket notation instead of goog.exportSymbol() so that the compiler\n  // won\x27t create a \x27var ctor;\x27 extern when the \x22create externs from exports\x22\n  // mode is enabled.\n  ctor.prototype[\x27then\x27] \x3d ctor.prototype.then;\n  if (COMPILED) {\n    ctor.prototype[goog.Thenable.IMPLEMENTED_BY_PROP] \x3d true;\n  } else {\n    // Avoids dictionary access in uncompiled mode.\n    ctor.prototype.$goog_Thenable \x3d true;\n  }\n};\n\n\n/**\n * @param {?} object\n * @return {boolean} Whether a given instance implements `goog.Thenable`.\n *     The class/superclass of the instance must call `addImplementation`.\n */\ngoog.Thenable.isImplementedBy \x3d function(object) {\n  if (!object) {\n    return false;\n  }\n  try {\n    if (COMPILED) {\n      return !!object[goog.Thenable.IMPLEMENTED_BY_PROP];\n    }\n    return !!object.$goog_Thenable;\n  } catch (e) {\n    // Property access seems to be forbidden.\n    return false;\n  }\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/promise/thenable.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/promise/promise.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ngoog.provide(\x27goog.Promise\x27);\n\ngoog.require(\x27goog.Thenable\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.async.FreeList\x27);\ngoog.require(\x27goog.async.run\x27);\ngoog.require(\x27goog.async.throwException\x27);\ngoog.require(\x27goog.debug.Error\x27);\ngoog.require(\x27goog.promise.Resolver\x27);\n\n\n\n/**\n * NOTE: This class was created in anticipation of the built-in Promise type\n * being standardized and implemented across browsers. Now that Promise is\n * available in modern browsers, and is automatically polyfilled by the Closure\n * Compiler, by default, most new code should use native `Promise`\n * instead of `goog.Promise`. However, `goog.Promise` has the\n * concept of cancellation which native Promises do not yet have. So code\n * needing cancellation may still want to use `goog.Promise`.\n *\n * Promises provide a result that may be resolved asynchronously. A Promise may\n * be resolved by being fulfilled with a fulfillment value, rejected with a\n * rejection reason, or blocked by another Promise. A Promise is said to be\n * settled if it is either fulfilled or rejected. Once settled, the Promise\n * result is immutable.\n *\n * Promises may represent results of any type, including undefined. Rejection\n * reasons are typically Errors, but may also be of any type. Closure Promises\n * allow for optional type annotations that enforce that fulfillment values are\n * of the appropriate types at compile time.\n *\n * The result of a Promise is accessible by calling `then` and registering\n * `onFulfilled` and `onRejected` callbacks. Once the Promise\n * is settled, the relevant callbacks are invoked with the fulfillment value or\n * rejection reason as argument. Callbacks are always invoked in the order they\n * were registered, even when additional `then` calls are made from inside\n * another callback. A callback is always run asynchronously sometime after the\n * scope containing the registering `then` invocation has returned.\n *\n * If a Promise is resolved with another Promise, the first Promise will block\n * until the second is settled, and then assumes the same result as the second\n * Promise. This allows Promises to depend on the results of other Promises,\n * linking together multiple asynchronous operations.\n *\n * This implementation is compatible with the Promises/A+ specification and\n * passes that specification\x27s conformance test suite. A Closure Promise may be\n * resolved with a Promise instance (or sufficiently compatible Promise-like\n * object) created by other Promise implementations. From the specification,\n * Promise-like objects are known as \x22Thenables\x22.\n *\n * @see http://promisesaplus.com/\n *\n * @param {function(\n *             this:RESOLVER_CONTEXT,\n *             function((TYPE|IThenable\x3cTYPE\x3e|Thenable)\x3d),\n *             function(*\x3d)): void} resolver\n *     Initialization function that is invoked immediately with `resolve`\n *     and `reject` functions as arguments. The Promise is resolved or\n *     rejected with the first argument passed to either function.\n * @param {RESOLVER_CONTEXT\x3d} opt_context An optional context for executing the\n *     resolver function. If unspecified, the resolver function will be executed\n *     in the default scope.\n * @constructor\n * @struct\n * @final\n * @implements {goog.Thenable\x3cTYPE\x3e}\n * @template TYPE,RESOLVER_CONTEXT\n */\ngoog.Promise \x3d function(resolver, opt_context) {\n  /**\n   * The internal state of this Promise. Either PENDING, FULFILLED, REJECTED, or\n   * BLOCKED.\n   * @private {goog.Promise.State_}\n   */\n  this.state_ \x3d goog.Promise.State_.PENDING;\n\n  /**\n   * The settled result of the Promise. Immutable once set with either a\n   * fulfillment value or rejection reason.\n   * @private {*}\n   */\n  this.result_ \x3d undefined;\n\n  /**\n   * For Promises created by calling `then()`, the originating parent.\n   * @private {goog.Promise}\n   */\n  this.parent_ \x3d null;\n\n  /**\n   * The linked list of `onFulfilled` and `onRejected` callbacks\n   * added to this Promise by calls to `then()`.\n   * @private {?goog.Promise.CallbackEntry_}\n   */\n  this.callbackEntries_ \x3d null;\n\n  /**\n   * The tail of the linked list of `onFulfilled` and `onRejected`\n   * callbacks added to this Promise by calls to `then()`.\n   * @private {?goog.Promise.CallbackEntry_}\n   */\n  this.callbackEntriesTail_ \x3d null;\n\n  /**\n   * Whether the Promise is in the queue of Promises to execute.\n   * @private {boolean}\n   */\n  this.executing_ \x3d false;\n\n  if (goog.Promise.UNHANDLED_REJECTION_DELAY \x3e 0) {\n    /**\n     * A timeout ID used when the `UNHANDLED_REJECTION_DELAY` is greater\n     * than 0 milliseconds. The ID is set when the Promise is rejected, and\n     * cleared only if an `onRejected` callback is invoked for the\n     * Promise (or one of its descendants) before the delay is exceeded.\n     *\n     * If the rejection is not handled before the timeout completes, the\n     * rejection reason is passed to the unhandled rejection handler.\n     * @private {number}\n     */\n    this.unhandledRejectionId_ \x3d 0;\n  } else if (goog.Promise.UNHANDLED_REJECTION_DELAY \x3d\x3d 0) {\n    /**\n     * When the `UNHANDLED_REJECTION_DELAY` is set to 0 milliseconds, a\n     * boolean that is set if the Promise is rejected, and reset to false if an\n     * `onRejected` callback is invoked for the Promise (or one of its\n     * descendants). If the rejection is not handled before the next timestep,\n     * the rejection reason is passed to the unhandled rejection handler.\n     * @private {boolean}\n     */\n    this.hadUnhandledRejection_ \x3d false;\n  }\n\n  if (goog.Promise.LONG_STACK_TRACES) {\n    /**\n     * A list of stack trace frames pointing to the locations where this Promise\n     * was created or had callbacks added to it. Saved to add additional context\n     * to stack traces when an exception is thrown.\n     * @private {!Array\x3cstring\x3e}\n     */\n    this.stack_ \x3d [];\n    this.addStackTrace_(new Error(\x27created\x27));\n\n    /**\n     * Index of the most recently executed stack frame entry.\n     * @private {number}\n     */\n    this.currentStep_ \x3d 0;\n  }\n\n  // As an optimization, we can skip this if resolver is goog.nullFunction.\n  // This value is passed internally when creating a promise which will be\n  // resolved through a more optimized path.\n  if (resolver !\x3d goog.nullFunction) {\n    try {\n      var self \x3d this;\n      resolver.call(\n          opt_context,\n          function(value) {\n            self.resolve_(goog.Promise.State_.FULFILLED, value);\n          },\n          function(reason) {\n            if (goog.DEBUG \x26\x26\n                !(reason instanceof goog.Promise.CancellationError)) {\n              try {\n                // Promise was rejected. Step up one call frame to see why.\n                if (reason instanceof Error) {\n                  throw reason;\n                } else {\n                  throw new Error(\x27Promise rejected.\x27);\n                }\n              } catch (e) {\n                // Only thrown so browser dev tools can catch rejections of\n                // promises when the option to break on caught exceptions is\n                // activated.\n              }\n            }\n            self.resolve_(goog.Promise.State_.REJECTED, reason);\n          });\n    } catch (e) {\n      this.resolve_(goog.Promise.State_.REJECTED, e);\n    }\n  }\n};\n\n\n/**\n * @define {boolean} Whether traces of `then` calls should be included in\n * exceptions thrown\n */\ngoog.define(\x27goog.Promise.LONG_STACK_TRACES\x27, false);\n\n\n/**\n * @define {number} The delay in milliseconds before a rejected Promise\x27s reason\n * is passed to the rejection handler. By default, the rejection handler\n * rethrows the rejection reason so that it appears in the developer console or\n * `window.onerror` handler.\n *\n * Rejections are rethrown as quickly as possible by default. A negative value\n * disables rejection handling entirely.\n */\ngoog.define(\x27goog.Promise.UNHANDLED_REJECTION_DELAY\x27, 0);\n\n\n/**\n * The possible internal states for a Promise. These states are not directly\n * observable to external callers.\n * @enum {number}\n * @private\n */\ngoog.Promise.State_ \x3d {\n  /** The Promise is waiting for resolution. */\n  PENDING: 0,\n\n  /** The Promise is blocked waiting for the result of another Thenable. */\n  BLOCKED: 1,\n\n  /** The Promise has been resolved with a fulfillment value. */\n  FULFILLED: 2,\n\n  /** The Promise has been resolved with a rejection reason. */\n  REJECTED: 3\n};\n\n\n\n/**\n * Entries in the callback chain. Each call to `then`,\n * `thenCatch`, or `thenAlways` creates an entry containing the\n * functions that may be invoked once the Promise is settled.\n *\n * @private @final @struct @constructor\n */\ngoog.Promise.CallbackEntry_ \x3d function() {\n  /** @type {?goog.Promise} */\n  this.child \x3d null;\n  /** @type {Function} */\n  this.onFulfilled \x3d null;\n  /** @type {Function} */\n  this.onRejected \x3d null;\n  /** @type {?} */\n  this.context \x3d null;\n  /** @type {?goog.Promise.CallbackEntry_} */\n  this.next \x3d null;\n\n  /**\n   * A boolean value to indicate this is a \x22thenAlways\x22 callback entry.\n   * Unlike a normal \x22then/thenVoid\x22 a \x22thenAlways doesn\x27t participate\n   * in \x22cancel\x22 considerations but is simply an observer and requires\n   * special handling.\n   * @type {boolean}\n   */\n  this.always \x3d false;\n};\n\n\n/** clear the object prior to reuse */\ngoog.Promise.CallbackEntry_.prototype.reset \x3d function() {\n  this.child \x3d null;\n  this.onFulfilled \x3d null;\n  this.onRejected \x3d null;\n  this.context \x3d null;\n  this.always \x3d false;\n};\n\n\n/**\n * @define {number} The number of currently unused objects to keep around for\n *    reuse.\n */\ngoog.define(\x27goog.Promise.DEFAULT_MAX_UNUSED\x27, 100);\n\n\n/** @const @private {goog.async.FreeList\x3c!goog.Promise.CallbackEntry_\x3e} */\ngoog.Promise.freelist_ \x3d new goog.async.FreeList(\n    function() { return new goog.Promise.CallbackEntry_(); },\n    function(item) { item.reset(); }, goog.Promise.DEFAULT_MAX_UNUSED);\n\n\n/**\n * @param {Function} onFulfilled\n * @param {Function} onRejected\n * @param {?} context\n * @return {!goog.Promise.CallbackEntry_}\n * @private\n */\ngoog.Promise.getCallbackEntry_ \x3d function(onFulfilled, onRejected, context) {\n  var entry \x3d goog.Promise.freelist_.get();\n  entry.onFulfilled \x3d onFulfilled;\n  entry.onRejected \x3d onRejected;\n  entry.context \x3d context;\n  return entry;\n};\n\n\n/**\n * @param {!goog.Promise.CallbackEntry_} entry\n * @private\n */\ngoog.Promise.returnEntry_ \x3d function(entry) {\n  goog.Promise.freelist_.put(entry);\n};\n\n\n// NOTE: this is the same template expression as is used for\n// goog.IThenable.prototype.then\n\n\n/**\n * @param {VALUE\x3d} opt_value\n * @return {RESULT} A new Promise that is immediately resolved\n *     with the given value. If the input value is already a goog.Promise, it\n *     will be returned immediately without creating a new instance.\n * @template VALUE\n * @template RESULT :\x3d type(\x27goog.Promise\x27,\n *     cond(isUnknown(VALUE), unknown(),\n *       mapunion(VALUE, (V) \x3d\x3e\n *         cond(isTemplatized(V) \x26\x26 sub(rawTypeOf(V), \x27IThenable\x27),\n *           templateTypeOf(V, 0),\n *           cond(sub(V, \x27Thenable\x27),\n *              unknown(),\n *              V)))))\n * \x3d:\n */\ngoog.Promise.resolve \x3d function(opt_value) {\n  if (opt_value instanceof goog.Promise) {\n    // Avoid creating a new object if we already have a promise object\n    // of the correct type.\n    return opt_value;\n  }\n\n  // Passing goog.nullFunction will cause the constructor to take an optimized\n  // path that skips calling the resolver function.\n  var promise \x3d new goog.Promise(goog.nullFunction);\n  promise.resolve_(goog.Promise.State_.FULFILLED, opt_value);\n  return promise;\n};\n\n\n/**\n * @param {*\x3d} opt_reason\n * @return {!goog.Promise} A new Promise that is immediately rejected with the\n *     given reason.\n */\ngoog.Promise.reject \x3d function(opt_reason) {\n  return new goog.Promise(function(resolve, reject) { reject(opt_reason); });\n};\n\n\n/**\n * This is identical to\n * {@code goog.Promise.resolve(value).then(onFulfilled, onRejected)}, but it\n * avoids creating an unnecessary wrapper Promise when `value` is already\n * thenable.\n *\n * @param {?(goog.Thenable\x3cTYPE\x3e|Thenable|TYPE)} value\n * @param {function(TYPE): ?} onFulfilled\n * @param {function(*): *} onRejected\n * @template TYPE\n * @private\n */\ngoog.Promise.resolveThen_ \x3d function(value, onFulfilled, onRejected) {\n  var isThenable \x3d\n      goog.Promise.maybeThen_(value, onFulfilled, onRejected, null);\n  if (!isThenable) {\n    goog.async.run(goog.partial(onFulfilled, value));\n  }\n};\n\n\n/**\n * @param {!Array\x3c?(goog.Promise\x3cTYPE\x3e|goog.Thenable\x3cTYPE\x3e|Thenable|*)\x3e}\n *     promises\n * @return {!goog.Promise\x3cTYPE\x3e} A Promise that receives the result of the\n *     first Promise (or Promise-like) input to settle immediately after it\n *     settles.\n * @template TYPE\n */\ngoog.Promise.race \x3d function(promises) {\n  return new goog.Promise(function(resolve, reject) {\n    if (!promises.length) {\n      resolve(undefined);\n    }\n    for (var i \x3d 0, promise; i \x3c promises.length; i++) {\n      promise \x3d promises[i];\n      goog.Promise.resolveThen_(promise, resolve, reject);\n    }\n  });\n};\n\n\n/**\n * @param {!Array\x3c?(goog.Promise\x3cTYPE\x3e|goog.Thenable\x3cTYPE\x3e|Thenable|*)\x3e}\n *     promises\n * @return {!goog.Promise\x3c!Array\x3cTYPE\x3e\x3e} A Promise that receives a list of\n *     every fulfilled value once every input Promise (or Promise-like) is\n *     successfully fulfilled, or is rejected with the first rejection reason\n *     immediately after it is rejected.\n * @template TYPE\n */\ngoog.Promise.all \x3d function(promises) {\n  return new goog.Promise(function(resolve, reject) {\n    var toFulfill \x3d promises.length;\n    var values \x3d [];\n\n    if (!toFulfill) {\n      resolve(values);\n      return;\n    }\n\n    var onFulfill \x3d function(index, value) {\n      toFulfill--;\n      values[index] \x3d value;\n      if (toFulfill \x3d\x3d 0) {\n        resolve(values);\n      }\n    };\n\n    var onReject \x3d function(reason) { reject(reason); };\n\n    for (var i \x3d 0, promise; i \x3c promises.length; i++) {\n      promise \x3d promises[i];\n      goog.Promise.resolveThen_(promise, goog.partial(onFulfill, i), onReject);\n    }\n  });\n};\n\n\n/**\n * @param {!Array\x3c?(goog.Promise\x3cTYPE\x3e|goog.Thenable\x3cTYPE\x3e|Thenable|*)\x3e}\n *     promises\n * @return {!goog.Promise\x3c!Array\x3c{\n *     fulfilled: boolean,\n *     value: (TYPE|undefined),\n *     reason: (*|undefined)}\x3e\x3e} A Promise that resolves with a list of\n *         result objects once all input Promises (or Promise-like) have\n *         settled. Each result object contains a \x27fulfilled\x27 boolean indicating\n *         whether an input Promise was fulfilled or rejected. For fulfilled\n *         Promises, the resulting value is stored in the \x27value\x27 field. For\n *         rejected Promises, the rejection reason is stored in the \x27reason\x27\n *         field.\n * @template TYPE\n */\ngoog.Promise.allSettled \x3d function(promises) {\n  return new goog.Promise(function(resolve, reject) {\n    var toSettle \x3d promises.length;\n    var results \x3d [];\n\n    if (!toSettle) {\n      resolve(results);\n      return;\n    }\n\n    var onSettled \x3d function(index, fulfilled, result) {\n      toSettle--;\n      results[index] \x3d fulfilled ? {fulfilled: true, value: result} :\n                                   {fulfilled: false, reason: result};\n      if (toSettle \x3d\x3d 0) {\n        resolve(results);\n      }\n    };\n\n    for (var i \x3d 0, promise; i \x3c promises.length; i++) {\n      promise \x3d promises[i];\n      goog.Promise.resolveThen_(\n          promise, goog.partial(onSettled, i, true /* fulfilled */),\n          goog.partial(onSettled, i, false /* fulfilled */));\n    }\n  });\n};\n\n\n/**\n * @param {!Array\x3c?(goog.Promise\x3cTYPE\x3e|goog.Thenable\x3cTYPE\x3e|Thenable|*)\x3e}\n *     promises\n * @return {!goog.Promise\x3cTYPE\x3e} A Promise that receives the value of the first\n *     input to be fulfilled, or is rejected with a list of every rejection\n *     reason if all inputs are rejected.\n * @template TYPE\n */\ngoog.Promise.firstFulfilled \x3d function(promises) {\n  return new goog.Promise(function(resolve, reject) {\n    var toReject \x3d promises.length;\n    var reasons \x3d [];\n\n    if (!toReject) {\n      resolve(undefined);\n      return;\n    }\n\n    var onFulfill \x3d function(value) { resolve(value); };\n\n    var onReject \x3d function(index, reason) {\n      toReject--;\n      reasons[index] \x3d reason;\n      if (toReject \x3d\x3d 0) {\n        reject(reasons);\n      }\n    };\n\n    for (var i \x3d 0, promise; i \x3c promises.length; i++) {\n      promise \x3d promises[i];\n      goog.Promise.resolveThen_(promise, onFulfill, goog.partial(onReject, i));\n    }\n  });\n};\n\n\n/**\n * @return {!goog.promise.Resolver\x3cTYPE\x3e} Resolver wrapping the promise and its\n *     resolve / reject functions. Resolving or rejecting the resolver\n *     resolves or rejects the promise.\n * @template TYPE\n */\ngoog.Promise.withResolver \x3d function() {\n  var resolve, reject;\n  var promise \x3d new goog.Promise(function(rs, rj) {\n    resolve \x3d rs;\n    reject \x3d rj;\n  });\n  return new goog.Promise.Resolver_(promise, resolve, reject);\n};\n\n\n/**\n * Adds callbacks that will operate on the result of the Promise, returning a\n * new child Promise.\n *\n * If the Promise is fulfilled, the `onFulfilled` callback will be invoked\n * with the fulfillment value as argument, and the child Promise will be\n * fulfilled with the return value of the callback. If the callback throws an\n * exception, the child Promise will be rejected with the thrown value instead.\n *\n * If the Promise is rejected, the `onRejected` callback will be invoked\n * with the rejection reason as argument, and the child Promise will be resolved\n * with the return value or rejected with the thrown value of the callback.\n *\n * @override\n */\ngoog.Promise.prototype.then \x3d function(\n    opt_onFulfilled, opt_onRejected, opt_context) {\n\n  if (opt_onFulfilled !\x3d null) {\n    goog.asserts.assertFunction(\n        opt_onFulfilled, \x27opt_onFulfilled should be a function.\x27);\n  }\n  if (opt_onRejected !\x3d null) {\n    goog.asserts.assertFunction(\n        opt_onRejected,\n        \x27opt_onRejected should be a function. Did you pass opt_context \x27 +\n            \x27as the second argument instead of the third?\x27);\n  }\n\n  if (goog.Promise.LONG_STACK_TRACES) {\n    this.addStackTrace_(new Error(\x27then\x27));\n  }\n\n  return this.addChildPromise_(\n      goog.isFunction(opt_onFulfilled) ? opt_onFulfilled : null,\n      goog.isFunction(opt_onRejected) ? opt_onRejected : null, opt_context);\n};\ngoog.Thenable.addImplementation(goog.Promise);\n\n\n/**\n * Adds callbacks that will operate on the result of the Promise without\n * returning a child Promise (unlike \x22then\x22).\n *\n * If the Promise is fulfilled, the `onFulfilled` callback will be invoked\n * with the fulfillment value as argument.\n *\n * If the Promise is rejected, the `onRejected` callback will be invoked\n * with the rejection reason as argument.\n *\n * @param {?(function(this:THIS, TYPE):?)\x3d} opt_onFulfilled A\n *     function that will be invoked with the fulfillment value if the Promise\n *     is fulfilled.\n * @param {?(function(this:THIS, *): *)\x3d} opt_onRejected A function that will\n *     be invoked with the rejection reason if the Promise is rejected.\n * @param {THIS\x3d} opt_context An optional context object that will be the\n *     execution context for the callbacks. By default, functions are executed\n *     with the default this.\n * @package\n * @template THIS\n */\ngoog.Promise.prototype.thenVoid \x3d function(\n    opt_onFulfilled, opt_onRejected, opt_context) {\n\n  if (opt_onFulfilled !\x3d null) {\n    goog.asserts.assertFunction(\n        opt_onFulfilled, \x27opt_onFulfilled should be a function.\x27);\n  }\n  if (opt_onRejected !\x3d null) {\n    goog.asserts.assertFunction(\n        opt_onRejected,\n        \x27opt_onRejected should be a function. Did you pass opt_context \x27 +\n            \x27as the second argument instead of the third?\x27);\n  }\n\n  if (goog.Promise.LONG_STACK_TRACES) {\n    this.addStackTrace_(new Error(\x27then\x27));\n  }\n\n  // Note: no default rejection handler is provided here as we need to\n  // distinguish unhandled rejections.\n  this.addCallbackEntry_(\n      goog.Promise.getCallbackEntry_(\n          opt_onFulfilled || goog.nullFunction, opt_onRejected || null,\n          opt_context));\n};\n\n\n/**\n * Adds a callback that will be invoked when the Promise is settled (fulfilled\n * or rejected). The callback receives no argument, and no new child Promise is\n * created. This is useful for ensuring that cleanup takes place after certain\n * asynchronous operations. Callbacks added with `thenAlways` will be\n * executed in the same order with other calls to `then`,\n * `thenAlways`, or `thenCatch`.\n *\n * Since it does not produce a new child Promise, cancellation propagation is\n * not prevented by adding callbacks with `thenAlways`. A Promise that has\n * a cleanup handler added with `thenAlways` will be canceled if all of\n * its children created by `then` (or `thenCatch`) are canceled.\n * Additionally, since any rejections are not passed to the callback, it does\n * not stop the unhandled rejection handler from running.\n *\n * @param {function(this:THIS): void} onSettled A function that will be invoked\n *     when the Promise is settled (fulfilled or rejected).\n * @param {THIS\x3d} opt_context An optional context object that will be the\n *     execution context for the callbacks. By default, functions are executed\n *     in the global scope.\n * @return {!goog.Promise\x3cTYPE\x3e} This Promise, for chaining additional calls.\n * @template THIS\n */\ngoog.Promise.prototype.thenAlways \x3d function(onSettled, opt_context) {\n  if (goog.Promise.LONG_STACK_TRACES) {\n    this.addStackTrace_(new Error(\x27thenAlways\x27));\n  }\n\n  var entry \x3d goog.Promise.getCallbackEntry_(onSettled, onSettled, opt_context);\n  entry.always \x3d true;\n  this.addCallbackEntry_(entry);\n  return this;\n};\n\n\n/**\n * Adds a callback that will be invoked only if the Promise is rejected. This\n * is equivalent to {@code then(null, onRejected)}.\n *\n * @param {function(this:THIS, *): *} onRejected A function that will be\n *     invoked with the rejection reason if the Promise is rejected.\n * @param {THIS\x3d} opt_context An optional context object that will be the\n *     execution context for the callbacks. By default, functions are executed\n *     in the global scope.\n * @return {!goog.Promise} A new Promise that will receive the result of the\n *     callback.\n * @template THIS\n */\ngoog.Promise.prototype.thenCatch \x3d function(onRejected, opt_context) {\n  if (goog.Promise.LONG_STACK_TRACES) {\n    this.addStackTrace_(new Error(\x27thenCatch\x27));\n  }\n  return this.addChildPromise_(null, onRejected, opt_context);\n};\n\n\n/**\n * Cancels the Promise if it is still pending by rejecting it with a cancel\n * Error. No action is performed if the Promise is already resolved.\n *\n * All child Promises of the canceled Promise will be rejected with the same\n * cancel error, as with normal Promise rejection. If the Promise to be canceled\n * is the only child of a pending Promise, the parent Promise will also be\n * canceled. Cancellation may propagate upward through multiple generations.\n *\n * @param {string\x3d} opt_message An optional debugging message for describing the\n *     cancellation reason.\n */\ngoog.Promise.prototype.cancel \x3d function(opt_message) {\n  if (this.state_ \x3d\x3d goog.Promise.State_.PENDING) {\n    goog.async.run(function() {\n      var err \x3d new goog.Promise.CancellationError(opt_message);\n      this.cancelInternal_(err);\n    }, this);\n  }\n};\n\n\n/**\n * Cancels this Promise with the given error.\n *\n * @param {!Error} err The cancellation error.\n * @private\n */\ngoog.Promise.prototype.cancelInternal_ \x3d function(err) {\n  if (this.state_ \x3d\x3d goog.Promise.State_.PENDING) {\n    if (this.parent_) {\n      // Cancel the Promise and remove it from the parent\x27s child list.\n      this.parent_.cancelChild_(this, err);\n      this.parent_ \x3d null;\n    } else {\n      this.resolve_(goog.Promise.State_.REJECTED, err);\n    }\n  }\n};\n\n\n/**\n * Cancels a child Promise from the list of callback entries. If the Promise has\n * not already been resolved, reject it with a cancel error. If there are no\n * other children in the list of callback entries, propagate the cancellation\n * by canceling this Promise as well.\n *\n * @param {!goog.Promise} childPromise The Promise to cancel.\n * @param {!Error} err The cancel error to use for rejecting the Promise.\n * @private\n */\ngoog.Promise.prototype.cancelChild_ \x3d function(childPromise, err) {\n  if (!this.callbackEntries_) {\n    return;\n  }\n  var childCount \x3d 0;\n  var childEntry \x3d null;\n  var beforeChildEntry \x3d null;\n\n  // Find the callback entry for the childPromise, and count whether there are\n  // additional child Promises.\n  for (var entry \x3d this.callbackEntries_; entry; entry \x3d entry.next) {\n    if (!entry.always) {\n      childCount++;\n      if (entry.child \x3d\x3d childPromise) {\n        childEntry \x3d entry;\n      }\n      if (childEntry \x26\x26 childCount \x3e 1) {\n        break;\n      }\n    }\n    if (!childEntry) {\n      beforeChildEntry \x3d entry;\n    }\n  }\n\n  // Can a child entry be missing?\n\n  // If the child Promise was the only child, cancel this Promise as well.\n  // Otherwise, reject only the child Promise with the cancel error.\n  if (childEntry) {\n    if (this.state_ \x3d\x3d goog.Promise.State_.PENDING \x26\x26 childCount \x3d\x3d 1) {\n      this.cancelInternal_(err);\n    } else {\n      if (beforeChildEntry) {\n        this.removeEntryAfter_(beforeChildEntry);\n      } else {\n        this.popEntry_();\n      }\n\n      this.executeCallback_(childEntry, goog.Promise.State_.REJECTED, err);\n    }\n  }\n};\n\n\n/**\n * Adds a callback entry to the current Promise, and schedules callback\n * execution if the Promise has already been settled.\n *\n * @param {goog.Promise.CallbackEntry_} callbackEntry Record containing\n *     `onFulfilled` and `onRejected` callbacks to execute after\n *     the Promise is settled.\n * @private\n */\ngoog.Promise.prototype.addCallbackEntry_ \x3d function(callbackEntry) {\n  if (!this.hasEntry_() \x26\x26 (this.state_ \x3d\x3d goog.Promise.State_.FULFILLED ||\n                            this.state_ \x3d\x3d goog.Promise.State_.REJECTED)) {\n    this.scheduleCallbacks_();\n  }\n  this.queueEntry_(callbackEntry);\n};\n\n\n/**\n * Creates a child Promise and adds it to the callback entry list. The result of\n * the child Promise is determined by the state of the parent Promise and the\n * result of the `onFulfilled` or `onRejected` callbacks as\n * specified in the Promise resolution procedure.\n *\n * @see http://promisesaplus.com/#the__method\n *\n * @param {?function(this:THIS, TYPE):\n *          (RESULT|goog.Promise\x3cRESULT\x3e|Thenable)} onFulfilled A callback that\n *     will be invoked if the Promise is fulfilled, or null.\n * @param {?function(this:THIS, *): *} onRejected A callback that will be\n *     invoked if the Promise is rejected, or null.\n * @param {THIS\x3d} opt_context An optional execution context for the callbacks.\n *     in the default calling context.\n * @return {!goog.Promise} The child Promise.\n * @template RESULT,THIS\n * @private\n */\ngoog.Promise.prototype.addChildPromise_ \x3d function(\n    onFulfilled, onRejected, opt_context) {\n\n  /** @type {goog.Promise.CallbackEntry_} */\n  var callbackEntry \x3d goog.Promise.getCallbackEntry_(null, null, null);\n\n  callbackEntry.child \x3d new goog.Promise(function(resolve, reject) {\n    // Invoke onFulfilled, or resolve with the parent\x27s value if absent.\n    callbackEntry.onFulfilled \x3d onFulfilled ? function(value) {\n      try {\n        var result \x3d onFulfilled.call(opt_context, value);\n        resolve(result);\n      } catch (err) {\n        reject(err);\n      }\n    } : resolve;\n\n    // Invoke onRejected, or reject with the parent\x27s reason if absent.\n    callbackEntry.onRejected \x3d onRejected ? function(reason) {\n      try {\n        var result \x3d onRejected.call(opt_context, reason);\n        if (!goog.isDef(result) \x26\x26\n            reason instanceof goog.Promise.CancellationError) {\n          // Propagate cancellation to children if no other result is returned.\n          reject(reason);\n        } else {\n          resolve(result);\n        }\n      } catch (err) {\n        reject(err);\n      }\n    } : reject;\n  });\n\n  callbackEntry.child.parent_ \x3d this;\n  this.addCallbackEntry_(callbackEntry);\n  return callbackEntry.child;\n};\n\n\n/**\n * Unblocks the Promise and fulfills it with the given value.\n *\n * @param {TYPE} value\n * @private\n */\ngoog.Promise.prototype.unblockAndFulfill_ \x3d function(value) {\n  goog.asserts.assert(this.state_ \x3d\x3d goog.Promise.State_.BLOCKED);\n  this.state_ \x3d goog.Promise.State_.PENDING;\n  this.resolve_(goog.Promise.State_.FULFILLED, value);\n};\n\n\n/**\n * Unblocks the Promise and rejects it with the given rejection reason.\n *\n * @param {*} reason\n * @private\n */\ngoog.Promise.prototype.unblockAndReject_ \x3d function(reason) {\n  goog.asserts.assert(this.state_ \x3d\x3d goog.Promise.State_.BLOCKED);\n  this.state_ \x3d goog.Promise.State_.PENDING;\n  this.resolve_(goog.Promise.State_.REJECTED, reason);\n};\n\n\n/**\n * Attempts to resolve a Promise with a given resolution state and value. This\n * is a no-op if the given Promise has already been resolved.\n *\n * If the given result is a Thenable (such as another Promise), the Promise will\n * be settled with the same state and result as the Thenable once it is itself\n * settled.\n *\n * If the given result is not a Thenable, the Promise will be settled (fulfilled\n * or rejected) with that result based on the given state.\n *\n * @see http://promisesaplus.com/#the_promise_resolution_procedure\n *\n * @param {goog.Promise.State_} state\n * @param {*} x The result to apply to the Promise.\n * @private\n */\ngoog.Promise.prototype.resolve_ \x3d function(state, x) {\n  if (this.state_ !\x3d goog.Promise.State_.PENDING) {\n    return;\n  }\n\n  if (this \x3d\x3d\x3d x) {\n    state \x3d goog.Promise.State_.REJECTED;\n    x \x3d new TypeError(\x27Promise cannot resolve to itself\x27);\n  }\n\n  this.state_ \x3d goog.Promise.State_.BLOCKED;\n  var isThenable \x3d goog.Promise.maybeThen_(\n      x, this.unblockAndFulfill_, this.unblockAndReject_, this);\n  if (isThenable) {\n    return;\n  }\n\n  this.result_ \x3d x;\n  this.state_ \x3d state;\n  // Since we can no longer be canceled, remove link to parent, so that the\n  // child promise does not keep the parent promise alive.\n  this.parent_ \x3d null;\n  this.scheduleCallbacks_();\n\n  if (state \x3d\x3d goog.Promise.State_.REJECTED \x26\x26\n      !(x instanceof goog.Promise.CancellationError)) {\n    goog.Promise.addUnhandledRejection_(this, x);\n  }\n};\n\n\n/**\n * Invokes the \x22then\x22 method of an input value if that value is a Thenable. This\n * is a no-op if the value is not thenable.\n *\n * @param {?} value A potentially thenable value.\n * @param {!Function} onFulfilled\n * @param {!Function} onRejected\n * @param {?} context\n * @return {boolean} Whether the input value was thenable.\n * @private\n */\ngoog.Promise.maybeThen_ \x3d function(value, onFulfilled, onRejected, context) {\n  if (value instanceof goog.Promise) {\n    value.thenVoid(onFulfilled, onRejected, context);\n    return true;\n  } else if (goog.Thenable.isImplementedBy(value)) {\n    value \x3d /** @type {!goog.Thenable} */ (value);\n    value.then(onFulfilled, onRejected, context);\n    return true;\n  } else if (goog.isObject(value)) {\n    try {\n      var then \x3d value[\x27then\x27];\n      if (goog.isFunction(then)) {\n        goog.Promise.tryThen_(value, then, onFulfilled, onRejected, context);\n        return true;\n      }\n    } catch (e) {\n      onRejected.call(context, e);\n      return true;\n    }\n  }\n\n  return false;\n};\n\n\n/**\n * Attempts to call the `then` method on an object in the hopes that it is\n * a Promise-compatible instance. This allows interoperation between different\n * Promise implementations, however a non-compliant object may cause a Promise\n * to hang indefinitely. If the `then` method throws an exception, the\n * dependent Promise will be rejected with the thrown value.\n *\n * @see http://promisesaplus.com/#point-70\n *\n * @param {Thenable} thenable An object with a `then` method that may be\n *     compatible with the Promise/A+ specification.\n * @param {!Function} then The `then` method of the Thenable object.\n * @param {!Function} onFulfilled\n * @param {!Function} onRejected\n * @param {*} context\n * @private\n */\ngoog.Promise.tryThen_ \x3d function(\n    thenable, then, onFulfilled, onRejected, context) {\n\n  var called \x3d false;\n  var resolve \x3d function(value) {\n    if (!called) {\n      called \x3d true;\n      onFulfilled.call(context, value);\n    }\n  };\n\n  var reject \x3d function(reason) {\n    if (!called) {\n      called \x3d true;\n      onRejected.call(context, reason);\n    }\n  };\n\n  try {\n    then.call(thenable, resolve, reject);\n  } catch (e) {\n    reject(e);\n  }\n};\n\n\n/**\n * Executes the pending callbacks of a settled Promise after a timeout.\n *\n * Section 2.2.4 of the Promises/A+ specification requires that Promise\n * callbacks must only be invoked from a call stack that only contains Promise\n * implementation code, which we accomplish by invoking callback execution after\n * a timeout. If `startExecution_` is called multiple times for the same\n * Promise, the callback chain will be evaluated only once. Additional callbacks\n * may be added during the evaluation phase, and will be executed in the same\n * event loop.\n *\n * All Promises added to the waiting list during the same browser event loop\n * will be executed in one batch to avoid using a separate timeout per Promise.\n *\n * @private\n */\ngoog.Promise.prototype.scheduleCallbacks_ \x3d function() {\n  if (!this.executing_) {\n    this.executing_ \x3d true;\n    goog.async.run(this.executeCallbacks_, this);\n  }\n};\n\n\n/**\n * @return {boolean} Whether there are any pending callbacks queued.\n * @private\n */\ngoog.Promise.prototype.hasEntry_ \x3d function() {\n  return !!this.callbackEntries_;\n};\n\n\n/**\n * @param {goog.Promise.CallbackEntry_} entry\n * @private\n */\ngoog.Promise.prototype.queueEntry_ \x3d function(entry) {\n  goog.asserts.assert(entry.onFulfilled !\x3d null);\n\n  if (this.callbackEntriesTail_) {\n    this.callbackEntriesTail_.next \x3d entry;\n    this.callbackEntriesTail_ \x3d entry;\n  } else {\n    // It the work queue was empty set the head too.\n    this.callbackEntries_ \x3d entry;\n    this.callbackEntriesTail_ \x3d entry;\n  }\n};\n\n\n/**\n * @return {goog.Promise.CallbackEntry_} entry\n * @private\n */\ngoog.Promise.prototype.popEntry_ \x3d function() {\n  var entry \x3d null;\n  if (this.callbackEntries_) {\n    entry \x3d this.callbackEntries_;\n    this.callbackEntries_ \x3d entry.next;\n    entry.next \x3d null;\n  }\n  // It the work queue is empty clear the tail too.\n  if (!this.callbackEntries_) {\n    this.callbackEntriesTail_ \x3d null;\n  }\n\n  if (entry !\x3d null) {\n    goog.asserts.assert(entry.onFulfilled !\x3d null);\n  }\n  return entry;\n};\n\n\n/**\n * @param {goog.Promise.CallbackEntry_} previous\n * @private\n */\ngoog.Promise.prototype.removeEntryAfter_ \x3d function(previous) {\n  goog.asserts.assert(this.callbackEntries_);\n  goog.asserts.assert(previous !\x3d null);\n  // If the last entry is being removed, update the tail\n  if (previous.next \x3d\x3d this.callbackEntriesTail_) {\n    this.callbackEntriesTail_ \x3d previous;\n  }\n\n  previous.next \x3d previous.next.next;\n};\n\n\n/**\n * Executes all pending callbacks for this Promise.\n *\n * @private\n */\ngoog.Promise.prototype.executeCallbacks_ \x3d function() {\n  var entry \x3d null;\n  while (entry \x3d this.popEntry_()) {\n    if (goog.Promise.LONG_STACK_TRACES) {\n      this.currentStep_++;\n    }\n    this.executeCallback_(entry, this.state_, this.result_);\n  }\n  this.executing_ \x3d false;\n};\n\n\n/**\n * Executes a pending callback for this Promise. Invokes an `onFulfilled`\n * or `onRejected` callback based on the settled state of the Promise.\n *\n * @param {!goog.Promise.CallbackEntry_} callbackEntry An entry containing the\n *     onFulfilled and/or onRejected callbacks for this step.\n * @param {goog.Promise.State_} state The resolution status of the Promise,\n *     either FULFILLED or REJECTED.\n * @param {*} result The settled result of the Promise.\n * @private\n */\ngoog.Promise.prototype.executeCallback_ \x3d function(\n    callbackEntry, state, result) {\n  // Cancel an unhandled rejection if the then/thenVoid call had an onRejected.\n  if (state \x3d\x3d goog.Promise.State_.REJECTED \x26\x26 callbackEntry.onRejected \x26\x26\n      !callbackEntry.always) {\n    this.removeUnhandledRejection_();\n  }\n\n  if (callbackEntry.child) {\n    // When the parent is settled, the child no longer needs to hold on to it,\n    // as the parent can no longer be canceled.\n    callbackEntry.child.parent_ \x3d null;\n    goog.Promise.invokeCallback_(callbackEntry, state, result);\n  } else {\n    // Callbacks created with thenAlways or thenVoid do not have the rejection\n    // handling code normally set up in the child Promise.\n    try {\n      callbackEntry.always ?\n          callbackEntry.onFulfilled.call(callbackEntry.context) :\n          goog.Promise.invokeCallback_(callbackEntry, state, result);\n    } catch (err) {\n      goog.Promise.handleRejection_.call(null, err);\n    }\n  }\n  goog.Promise.returnEntry_(callbackEntry);\n};\n\n\n/**\n * Executes the onFulfilled or onRejected callback for a callbackEntry.\n *\n * @param {!goog.Promise.CallbackEntry_} callbackEntry\n * @param {goog.Promise.State_} state\n * @param {*} result\n * @private\n */\ngoog.Promise.invokeCallback_ \x3d function(callbackEntry, state, result) {\n  if (state \x3d\x3d goog.Promise.State_.FULFILLED) {\n    callbackEntry.onFulfilled.call(callbackEntry.context, result);\n  } else if (callbackEntry.onRejected) {\n    callbackEntry.onRejected.call(callbackEntry.context, result);\n  }\n};\n\n\n/**\n * Records a stack trace entry for functions that call `then` or the\n * Promise constructor. May be disabled by unsetting `LONG_STACK_TRACES`.\n *\n * @param {!Error} err An Error object created by the calling function for\n *     providing a stack trace.\n * @private\n */\ngoog.Promise.prototype.addStackTrace_ \x3d function(err) {\n  if (goog.Promise.LONG_STACK_TRACES \x26\x26 goog.isString(err.stack)) {\n    // Extract the third line of the stack trace, which is the entry for the\n    // user function that called into Promise code.\n    var trace \x3d err.stack.split(\x27\\n\x27, 4)[3];\n    var message \x3d err.message;\n\n    // Pad the message to align the traces.\n    message +\x3d Array(11 - message.length).join(\x27 \x27);\n    this.stack_.push(message + trace);\n  }\n};\n\n\n/**\n * Adds extra stack trace information to an exception for the list of\n * asynchronous `then` calls that have been run for this Promise. Stack\n * trace information is recorded in {@see #addStackTrace_}, and appended to\n * rethrown errors when `LONG_STACK_TRACES` is enabled.\n *\n * @param {*} err An unhandled exception captured during callback execution.\n * @private\n */\ngoog.Promise.prototype.appendLongStack_ \x3d function(err) {\n  if (goog.Promise.LONG_STACK_TRACES \x26\x26 err \x26\x26 goog.isString(err.stack) \x26\x26\n      this.stack_.length) {\n    var longTrace \x3d [\x27Promise trace:\x27];\n\n    for (var promise \x3d this; promise; promise \x3d promise.parent_) {\n      for (var i \x3d this.currentStep_; i \x3e\x3d 0; i--) {\n        longTrace.push(promise.stack_[i]);\n      }\n      longTrace.push(\n          \x27Value: \x27 +\n          \x27[\x27 + (promise.state_ \x3d\x3d goog.Promise.State_.REJECTED ? \x27REJECTED\x27 :\n                                                                  \x27FULFILLED\x27) +\n          \x27] \x27 +\n          \x27\x3c\x27 + String(promise.result_) + \x27\x3e\x27);\n    }\n    err.stack +\x3d \x27\\n\\n\x27 + longTrace.join(\x27\\n\x27);\n  }\n};\n\n\n/**\n * Marks this rejected Promise as having being handled. Also marks any parent\n * Promises in the rejected state as handled. The rejection handler will no\n * longer be invoked for this Promise (if it has not been called already).\n *\n * @private\n */\ngoog.Promise.prototype.removeUnhandledRejection_ \x3d function() {\n  if (goog.Promise.UNHANDLED_REJECTION_DELAY \x3e 0) {\n    for (var p \x3d this; p \x26\x26 p.unhandledRejectionId_; p \x3d p.parent_) {\n      goog.global.clearTimeout(p.unhandledRejectionId_);\n      p.unhandledRejectionId_ \x3d 0;\n    }\n  } else if (goog.Promise.UNHANDLED_REJECTION_DELAY \x3d\x3d 0) {\n    for (var p \x3d this; p \x26\x26 p.hadUnhandledRejection_; p \x3d p.parent_) {\n      p.hadUnhandledRejection_ \x3d false;\n    }\n  }\n};\n\n\n/**\n * Marks this rejected Promise as unhandled. If no `onRejected` callback\n * is called for this Promise before the `UNHANDLED_REJECTION_DELAY`\n * expires, the reason will be passed to the unhandled rejection handler. The\n * handler typically rethrows the rejection reason so that it becomes visible in\n * the developer console.\n *\n * @param {!goog.Promise} promise The rejected Promise.\n * @param {*} reason The Promise rejection reason.\n * @private\n */\ngoog.Promise.addUnhandledRejection_ \x3d function(promise, reason) {\n  if (goog.Promise.UNHANDLED_REJECTION_DELAY \x3e 0) {\n    promise.unhandledRejectionId_ \x3d goog.global.setTimeout(function() {\n      promise.appendLongStack_(reason);\n      goog.Promise.handleRejection_.call(null, reason);\n    }, goog.Promise.UNHANDLED_REJECTION_DELAY);\n\n  } else if (goog.Promise.UNHANDLED_REJECTION_DELAY \x3d\x3d 0) {\n    promise.hadUnhandledRejection_ \x3d true;\n    goog.async.run(function() {\n      if (promise.hadUnhandledRejection_) {\n        promise.appendLongStack_(reason);\n        goog.Promise.handleRejection_.call(null, reason);\n      }\n    });\n  }\n};\n\n\n/**\n * A method that is invoked with the rejection reasons for Promises that are\n * rejected but have no `onRejected` callbacks registered yet.\n * @type {function(*)}\n * @private\n */\ngoog.Promise.handleRejection_ \x3d goog.async.throwException;\n\n\n/**\n * Sets a handler that will be called with reasons from unhandled rejected\n * Promises. If the rejected Promise (or one of its descendants) has an\n * `onRejected` callback registered, the rejection will be considered\n * handled, and the rejection handler will not be called.\n *\n * By default, unhandled rejections are rethrown so that the error may be\n * captured by the developer console or a `window.onerror` handler.\n *\n * @param {function(*)} handler A function that will be called with reasons from\n *     rejected Promises. Defaults to `goog.async.throwException`.\n */\ngoog.Promise.setUnhandledRejectionHandler \x3d function(handler) {\n  goog.Promise.handleRejection_ \x3d handler;\n};\n\n\n\n/**\n * Error used as a rejection reason for canceled Promises.\n *\n * @param {string\x3d} opt_message\n * @constructor\n * @extends {goog.debug.Error}\n * @final\n */\ngoog.Promise.CancellationError \x3d function(opt_message) {\n  goog.Promise.CancellationError.base(this, \x27constructor\x27, opt_message);\n};\ngoog.inherits(goog.Promise.CancellationError, goog.debug.Error);\n\n\n/** @override */\ngoog.Promise.CancellationError.prototype.name \x3d \x27cancel\x27;\n\n\n\n/**\n * Internal implementation of the resolver interface.\n *\n * @param {!goog.Promise\x3cTYPE\x3e} promise\n * @param {function((TYPE|goog.Promise\x3cTYPE\x3e|Thenable)\x3d)} resolve\n * @param {function(*\x3d): void} reject\n * @implements {goog.promise.Resolver\x3cTYPE\x3e}\n * @final @struct\n * @constructor\n * @private\n * @template TYPE\n */\ngoog.Promise.Resolver_ \x3d function(promise, resolve, reject) {\n  /** @const */\n  this.promise \x3d promise;\n\n  /** @const */\n  this.resolve \x3d resolve;\n\n  /** @const */\n  this.reject \x3d reject;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/promise/promise.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/common/base.js";
eval("/**\n * @fileoverview Exports and functions for the web search_base_module.\n * @author martone@google.com (Andy Martone)\n */\ngoog.require(\x27goog.Promise\x27);\ngoog.require(\x27goog.async.throwException\x27);\ngoog.require(\x27gws.msg\x27);\ngoog.require(\x27gws.nav\x27);\ngoog.require(\x27search.log.errorLogger\x27);\ngoog.require(\x27search.log.ve.GraftType\x27);\ngoog.require(\x27search.log.ve.interaction\x27);\n\n// In order to provide a good API for goog.Promise users, we change the global\n// promise rejection handler to just log, rather than re-throw. We don\x27t want\n// to throw because it forces all goog.Promise users to always handle errors,\n// even when we already do the error handling they want. We want this to hold\n// even in DEBUG mode, as in tests, in order to ensure that folks can use the\n// sane default.\ngoog.Promise.setUnhandledRejectionHandler((reason \x3d undefined) \x3d\x3e {\n  // reason may or may not be an Error, because reject can pass anything.\n  // Check the actual type.\n  // TODO(palladium): add a conformance check to ensure Promise.reject always\n  // passes an Error instance.\n  let err \x3d new Error(\x27Unhandled rejection\x27);\n  const context \x3d {\x27ur\x27: \x271\x27};\n  if (reason instanceof Error) {\n    // Use reason, which might have an interesting stack trace, due to\n    // goog.Promise\x27s implementation of rejection, rather than inventing a brand\n    // new Error. Without this check, our traces would all start at window, go\n    // through async.run, and end up here.\n    // \x27ur\x27 means unhandled reject \x27r\x27 means reason\n    err \x3d reason;\n    // If there are details attached to the error, they should be added to the\n    // context for debugging.\n    if (reason.details) {\n      Object.assign(context, reason.details);\n    }\n\n    // If we see an Error (indicating a runtime error) in debug mode, also\n    // schedule a re-throw of the error for the developer to see/debug. By doing\n    // this, the console can specially handle the native error objects (with\n    // full stack trace, links to files, etc), whereas our logging\n    // infrastructure serializes to strings for network transport.\n    if (goog.DEBUG) {\n      goog.async.throwException(reason);\n    }\n\n  } else if (reason) {\n    context[\x27r\x27] \x3d reason;\n  }\n  search.log.errorLogger.log(\n      err, {errorContext: /**@type {!Object\x3cstring, string\x3e} */ (context)});\n});\n\n\ngoog.exportSymbol(\x27google.msg.listen\x27, gws.msg.listen);\ngoog.exportSymbol(\x27google.msg.unlisten\x27, gws.msg.unlisten);\ngoog.exportSymbol(\x27google.msg.send\x27, gws.msg.send);\n\ngoog.exportSymbol(\x27google.nav.go\x27, gws.nav.go);\ngoog.exportSymbol(\x27google.nav.search\x27, gws.nav.search);\n\ngoog.exportSymbol(\x27google.lve.G\x27, search.log.ve.interaction.Graft);\n\ngoog.exportSymbol(\x27google.lve.GT\x27, search.log.ve.GraftType);\n\ngoog.exportSymbol(\x27google.lve.logG\x27, search.log.ve.interaction.logGrafts);\n\ngoog.exportSymbol(\n    \x27google.nav.getLocation\x27,\n    /**\n     * Delegates to window.location.href. This deprecated export\n     * for AGSA versions before 4.0 is not included in externs.js,\n     * but old AGSA binaries expect google.nav.getLocation to be\n     * defined whenever google.nav is defined (http://b/22604552).\n     * (Current AGSA builds just return the raw window location.)\n     * @return {string}\n     */\n    function() {\n      // Use window.location directly instead of using\n      // gws.location.getLocation() to keep base dependencies\n      // minimal. We use a separate function instead of goog.bind\n      // since Safari invalidates Location objects on reloads.\n      return window.location.href;\n    });\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/common/base.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/debug/flag.js";
eval("/**\n * @fileoverview Provides a way to interact with the deb query parameter from\n * javascript directly. Additional documentation can be found at go/deb.\n */\n\ngoog.provide(\x27gws.debug.flag\x27);\n\ngoog.require(\x27goog.functions\x27);\ngoog.require(\x27goog.string\x27);\ngoog.require(\x27goog.uri.utils\x27);\ngoog.require(\x27gws.location\x27);\n\ngoog.scope(function() {\nvar flag \x3d gws.debug.flag;\n\n\n/**\n * The default debug level to use for primary and secondary debug flags.\n * @const\n */\nflag.DEFAULT_DEBUG_LEVEL \x3d 1;\n\n\n/**\n * @define {boolean} If true, the gws.debug.flag API is enabled. By default,\n * this is disabled in production.\n */\ngoog.define(\x27gws.debug.flag.ENABLED\x27, goog.DEBUG);\n\n\n/**\n * Gets the debug level. If a flag is specified, return the secondary debug\n * level for that flag. If not, return the primary debug level.\n *\n * For example, if the deb query paramter is set to \x270T11\x27, then the primary\n * debug level is \x270\x27 and the secondary debug level for the \x27T\x27 flag is \x2711\x27.\n * @param {string\x3d} opt_debugFlag The flag whose secondary debug level to find.\n * @return {number}\n */\nflag.getDebugLevel \x3d flag.ENABLED ? function(opt_debugFlag) {\n  if (!goog.isDef(opt_debugFlag)) {\n    return flag.getPrimaryDebugLevel();\n  }\n\n  return flag.getValue_(opt_debugFlag);\n} : goog.functions.constant(0);\n\n\n/**\n * Gets the primary debug level specifed by the deb parameter. This is used to\n * enable/disable generic debugging, as well as some details of query parsing.\n * @return {number}\n */\nflag.getPrimaryDebugLevel \x3d flag.ENABLED ? function() {\n  var url \x3d gws.location.getLocation().href;\n  var debValue \x3d goog.uri.utils.getParamValue(url, \x27deb\x27);\n  if (debValue \x3d\x3d null) {\n    return 0;\n  }\n  // Grab the one-or-more digit number from the beginning of the the value,\n  // since that is where the primary debug level will be if it is provided.\n  var values \x3d debValue.match(/^\\d+/);\n  if (goog.isNull(values)) {\n    return flag.DEFAULT_DEBUG_LEVEL;\n  }\n  return goog.string.toNumber(values[0]);\n} : goog.functions.constant(0);\n\n\n/**\n * Gets the secondary debug level for a given debugFlag as set in the deb\n * parameter. These are used to provide additional functionality for debugging.\n * @param {string} debugFlagToFind The flag whose debug level to find.\n * @return {number}\n * @private\n */\nflag.getValue_ \x3d flag.ENABLED ? function(debugFlagToFind) {\n  var url \x3d gws.location.getLocation().href;\n  var debValue \x3d goog.uri.utils.getParamValue(url, \x27deb\x27);\n  if (debValue \x3d\x3d null) {\n    return 0;\n  }\n\n  var debValueWithoutPrimaryDebugLevel \x3d debValue.replace(/^\\d+/, \x27\x27);\n  var regex \x3d /([a-zA-Z_]+)(\\d+)?/g;\n  var array;\n  while (array \x3d regex.exec(debValueWithoutPrimaryDebugLevel)) {\n    // Every iteration of this regex executed over a string of secondary debug\n    // flags and levels will look at the next (flag, flag_debug_level) pair.\n    if (array[1] \x3d\x3d debugFlagToFind) {\n      return goog.isDef(array[2]) ? goog.string.toNumber(array[2]) :\n                                    flag.DEFAULT_DEBUG_LEVEL;\n    }\n  }\n  return flag.getPrimaryDebugLevel();\n} : goog.functions.constant(0);\n\n});  // goog.scope\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/debug/flag.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/debug/telemetry.js";
eval("/**\n * @fileoverview Provides an API for developers to add Timeline Interaction\n * Records to the page for use with chrome telemetry.\n * See go/chromium-TIR for details on these records.\n */\n\ngoog.provide(\x27gws.debug.telemetry\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.functions\x27);\ngoog.require(\x27gws.debug.flag\x27);\n\n\n/**\n * @define {boolean} Whether to turn on telemetry API in GWS. This define is\n * only true in the SOPI (pseudo-optimized instrumented) compile mode.  This\n * mode is triggered with the deb\x3d0j1 JS debugging flag.  All telemetry calls\n * are automatically removed in other modes.\n */\ngoog.define(\x27gws.debug.telemetry.ENABLED\x27, false);\n\ngoog.scope(function() {\nvar telemetry \x3d gws.debug.telemetry;\n\n\n/**\n * A lookup to keep track of how many instances of each beacon are running.\n * @private @const {!Object\x3cstring,number\x3e}\n */\ntelemetry.beacons_ \x3d {};\n\n\n/**\n * Begins an interaction on a page for a given beacon. If there is no\n * interaction with the beacon already in progress, then output a\n * console.time() to mark the start of the time interval.\n * @param {!gws.debug.telemetry.Beacon} beacon GWS timeline beacon\n */\ntelemetry.beginInteraction \x3d telemetry.ENABLED ? function(beacon) {\n  if (telemetry.isBeaconMonitored_(beacon)) {\n    var eventName \x3d beacon.getEventName();\n    if (!telemetry.isInteractionRunning(beacon)) {\n      telemetry.beacons_[eventName] \x3d 0;\n      console.time(eventName);\n    }\n    telemetry.beacons_[eventName] +\x3d 1;\n  }\n} : goog.nullFunction;\n\n\n/**\n * Ends an interaction on a page for a given beacon. If there are no other\n * interactions for that beacon left, then output a console.timeEnd() to mark\n * the end of the time interval.\n * @param {!gws.debug.telemetry.Beacon} beacon GWS timeline beacon\n * @param {boolean\x3d} opt_forced Force the interaction to end, regardless of\n     the number of previous calls to beginInteraction.\n */\ntelemetry.endInteraction \x3d telemetry.ENABLED ? function(beacon, opt_forced) {\n  if (telemetry.isBeaconMonitored_(beacon)) {\n    var eventName \x3d beacon.getEventName();\n    if (opt_forced || telemetry.beacons_[eventName] \x3d\x3d 1) {\n      console.timeEnd(eventName);\n      telemetry.beacons_[eventName] \x3d 0;\n    } else {\n      telemetry.beacons_[eventName] -\x3d 1;\n    }\n  }\n} : goog.nullFunction;\n\n\n/**\n * Marks that the interaction for a given beacon has failed. This adds the\n * interaction label to the list at window._telemetry_failedInteractions.\n * @param {!gws.debug.telemetry.Beacon} beacon GWS timeline beacon\n */\ntelemetry.markInteractionFailed \x3d telemetry.ENABLED ? function(beacon) {\n  var failed_interactions \x3d \x27_telemetry_failedInteractions\x27;\n  if (!(failed_interactions in window)) {\n    window[failed_interactions] \x3d [];\n  }\n  window[failed_interactions].push(beacon.getEventName());\n} : goog.nullFunction;\n\n\n/**\n * Determines whether an interaction on a page for a given beacon is currently\n * running.\n * @param {!gws.debug.telemetry.Beacon} beacon GWS timeline beacon\n * @return {boolean|undefined}\n */\ntelemetry.isInteractionRunning \x3d telemetry.ENABLED ? function(beacon) {\n  var eventName \x3d beacon.getEventName();\n  return goog.isDef(telemetry.beacons_[eventName]) \x26\x26\n      telemetry.beacons_[eventName] \x3e 0;\n} : goog.nullFunction;\n\n\n/**\n * Restarts the given beacon. If the beacon is currently running, it is marked\n * failed before starting.\n * @param {!gws.debug.telemetry.Beacon} beacon GWS timeline beacon\n */\ntelemetry.restartInteraction \x3d telemetry.ENABLED ? function(beacon) {\n  if (telemetry.isInteractionRunning(beacon)) {\n    telemetry.markInteractionFailed(beacon);\n    telemetry.endInteraction(beacon, true);\n  }\n  telemetry.beginInteraction(beacon);\n} : goog.nullFunction;\n\n\n/**\n * Iterates over the recorded beacon event names and determines which are still\n * active.\n * @return {!Array\x3cstring\x3e}\n */\ntelemetry.getActiveBeacons \x3d telemetry.ENABLED ? function() {\n  var activeBeacons \x3d [];\n  for (var eventName in telemetry.beacons_) {\n    if (telemetry.beacons_[eventName] \x3e 0) {\n      goog.array.insert(activeBeacons, eventName);\n    }\n  }\n  return activeBeacons;\n} : goog.functions.constant([]);\n\n\n/**\n * Enables the monitoring for the beacons with given types.\n * @param {...string} var_args\n */\ntelemetry.enableBeaconTypes \x3d telemetry.ENABLED ? function(var_args) {\n  window[\x27_telemetry_validBeacons\x27] \x3d window[\x27_telemetry_validBeacons\x27] || [];\n  goog.array.forEach(arguments, function(beaconType) {\n    goog.array.insert(window[\x27_telemetry_validBeacons\x27], beaconType);\n  });\n} : goog.nullFunction;\n\n\n/**\n * Determines if a given beacon should be monitored, based on the list of valid\n * beacons in window._telemetry_validBeacons (typically set in a chromium\n * telemetry page set) or if the \x27telemetry\x27 debug flag is enabled (e.g.,\n * deb\x3d0j1telemetry).\n * @param {!gws.debug.telemetry.Beacon} beacon GWS timeline beacon\n * @private\n * @return {boolean} Whether the beacon should be monitored.\n */\ntelemetry.isBeaconMonitored_ \x3d function(beacon) {\n  if (gws.debug.flag.getDebugLevel(\x27telemetry\x27)) {\n    return true;\n  }\n\n  var validBeacons \x3d window[\x27_telemetry_validBeacons\x27];\n  return !!validBeacons \x26\x26 goog.array.contains(validBeacons, beacon.getType());\n};\n\n\n/**\n * Causes main thread jank on the page. Useful for testing interactions, in\n * which JS-based jank will affect the animation. Not recommended for use in\n * live code.\n * TODO(ariblue): Update to add jank in other ways (e.g. manipulating the DOM)\n * @param {number} jankDuration Milliseconds of jank to add to the page.\n */\ntelemetry.causeJank \x3d telemetry.ENABLED ? function(jankDuration) {\n  var nowFunction \x3d window.performance ? window.performance.now : Date.now;\n  var startTime \x3d nowFunction();\n  while (nowFunction() \x3c startTime + jankDuration) {\n    // do nothing\n  }\n} : goog.nullFunction;\n\nif (telemetry.ENABLED) {\n  goog.exportSymbol(\n      \x27google.telemetry.beginInteraction\x27, telemetry.beginInteraction);\n  goog.exportSymbol(\n      \x27google.telemetry.endInteraction\x27, telemetry.endInteraction);\n}\n\n});  // goog.scope\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/debug/telemetry.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/debug/beacon.js";
eval("/**\n * @fileoverview Defines a telemetry beacon, which provides the chrome\n * telemetry tools a timeline interaction record on the page.\n * Records to the page for use with chrome telemetry.\n * See go/chromium-TIR for details on these records.\n */\n\ngoog.provide(\x27gws.debug.telemetry.Beacon\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.functions\x27);\ngoog.require(\x27gws.debug.telemetry\x27);\n\ngoog.scope(function() {\nvar telemetry \x3d gws.debug.telemetry;\n\n\n\n/**\n * An object that contains the necessary information for a timeline\n * interaction record (see go/chromium-TIR).\n * @param {string} type The type of event being performed.\n * @param {string\x3d} opt_subtype A qualifier to the type of the beacon.\n * @return {void}\n * @constructor\n */\ntelemetry.Beacon \x3d function(type, opt_subtype) {\n  if (telemetry.ENABLED) {\n    /** @private @const */\n    this.type_ \x3d type;\n\n    var label \x3d goog.isDef(opt_subtype) ? type + \x27:\x27 + opt_subtype : type;\n    /** @private @const {string} */\n    this.label_ \x3d label.replace(/\\./g, \x27_\x27);\n\n    /**\n     * A sorted array of flag. Each flag can only occur once.\n     * @private @const {!Array\x3ctelemetry.Beacon.Flag_\x3e}\n     */\n    this.flags_ \x3d [];\n\n    this.setRepeatable(true);\n  }\n};\n\n\n/**\n * Returns the timeline interaction record event name.\n * @this {telemetry.Beacon}\n * @return {string}\n */\ntelemetry.Beacon.prototype.getEventName \x3d telemetry.ENABLED ? function() {\n  return \x27Interaction.\x27 + this.label_ + \x27/\x27 + this.flags_.join(\x27,\x27);\n} : goog.functions.constant(\x27\x27);\n\n\n/**\n * Returns the beacon type.\n * @this {telemetry.Beacon}\n * @return {string}\n */\ntelemetry.Beacon.prototype.getType \x3d telemetry.ENABLED ? function() {\n  return this.type_;\n} : goog.functions.constant(\x27\x27);\n\n\n/**\n * Sets whether this beacon can occur more than once. Defaults to true.\n * @param {boolean} repeatable\n * @return {!gws.debug.telemetry.Beacon}\n */\ntelemetry.Beacon.prototype.setRepeatable \x3d function(repeatable) {\n  if (telemetry.ENABLED) {\n    this.enableFlag_(telemetry.Beacon.Flag_.REPEATABLE, repeatable);\n  }\n  return this;\n};\n\n\n/**\n * Sets whether to enable or disable the flag.\n * @param {telemetry.Beacon.Flag_} flag\n * @param {boolean} enable\n * @private\n */\ntelemetry.Beacon.prototype.enableFlag_ \x3d function(flag, enable) {\n  if (enable) {\n    goog.array.binaryInsert(this.flags_, flag);\n  } else {\n    goog.array.binaryRemove(this.flags_, flag);\n  }\n};\n\n\n/**\n * Flags that indicate the semantics of the interactions performed.\n * @enum {string}\n * @private\n */\ntelemetry.Beacon.Flag_ \x3d {\n  REPEATABLE: \x27repeatable\x27\n};\n\nif (telemetry.ENABLED) {\n  goog.exportSymbol(\x27google.telemetry.Beacon\x27, telemetry.Beacon);\n}\n\n});  // goog.scope\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/debug/beacon.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/build.js";
goog.loadModule("/**\n * @fileoverview Constants which are set in compile time flags that change\n * depending on the context of how the JS is being built.\n * TODO(b/70793841): Consider adding IS_DESKTOP and IS_MOBILE.\n */\ngoog.module(\x27search.build\x27);\ngoog.module.declareLegacyNamespace();\n\n/**\n * @define {boolean} If true, then JS is served in inline JS via Jslayout\n * template. If false, then the JS is served via a Pinto module in the late-\n * loaded javascript.\n * This exists because many GWS libraries are used in both Pinto and inline JS,\n * but for inline JS, we want to serve a simpler implementation or treat global\n * singletons differently. Note that it is typicaly preferrable to create\n * alternative implementation files for each use. However, that\x27s not always\n * practical, so this constant allows developers to provide different\n * implementations within the same file, leveraging the compiler to drop the\n * unused portions.\n */\nexports.INLINE \x3d false;\n\n//# sourceURL\x3dhttps://qs/gws/js/build.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/json/json.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview JSON utility functions.\n * @author arv@google.com (Erik Arvidsson)\n */\n\n\ngoog.provide(\x27goog.json\x27);\ngoog.provide(\x27goog.json.Replacer\x27);\ngoog.provide(\x27goog.json.Reviver\x27);\ngoog.provide(\x27goog.json.Serializer\x27);\n\n\n/**\n * @define {boolean} If true, use the native JSON parsing API.\n * NOTE: The default `goog.json.parse` implementation is able to handle\n * invalid JSON. JSPB used to produce invalid JSON which is not the case\n * anymore so this is safe to enable for parsing JSPB. Using native JSON is\n * faster and safer than the default implementation using `eval`.\n */\ngoog.define(\x27goog.json.USE_NATIVE_JSON\x27, false);\n\n/**\n * @define {boolean} If true, try the native JSON parsing API first. If it\n * fails, log an error and use `eval` instead. This is useful when\n * transitioning to `goog.json.USE_NATIVE_JSON`. The error logger needs to\n * be set by `goog.json.setErrorLogger`. If it is not set then the error\n * is ignored.\n */\ngoog.define(\x27goog.json.TRY_NATIVE_JSON\x27, false);\n\n\n/**\n * Tests if a string is an invalid JSON string. This only ensures that we are\n * not using any invalid characters\n * @param {string} s The string to test.\n * @return {boolean} True if the input is a valid JSON string.\n */\ngoog.json.isValid \x3d function(s) {\n  // All empty whitespace is not valid.\n  if (/^\\s*$/.test(s)) {\n    return false;\n  }\n\n  // This is taken from http://www.json.org/json2.js which is released to the\n  // public domain.\n  // Changes: We dissallow \\u2028 Line separator and \\u2029 Paragraph separator\n  // inside strings.  We also treat \\u2028 and \\u2029 as whitespace which they\n  // are in the RFC but IE and Safari does not match \\s to these so we need to\n  // include them in the reg exps in all places where whitespace is allowed.\n  // We allowed \\x7f inside strings because some tools don\x27t escape it,\n  // e.g. http://www.json.org/java/org/json/JSONObject.java\n\n  // Parsing happens in three stages. In the first stage, we run the text\n  // against regular expressions that look for non-JSON patterns. We are\n  // especially concerned with \x27()\x27 and \x27new\x27 because they can cause invocation,\n  // and \x27\x3d\x27 because it can cause mutation. But just to be safe, we want to\n  // reject all unexpected forms.\n\n  // We split the first stage into 4 regexp operations in order to work around\n  // crippling inefficiencies in IE\x27s and Safari\x27s regexp engines. First we\n  // replace all backslash pairs with \x27@\x27 (a non-JSON character). Second, we\n  // replace all simple value tokens with \x27]\x27 characters, but only when followed\n  // by a colon, comma, closing bracket or end of string. Third, we delete all\n  // open brackets that follow a colon or comma or that begin the text. Finally,\n  // we look to see that the remaining characters are only whitespace or \x27]\x27 or\n  // \x27,\x27 or \x27:\x27 or \x27{\x27 or \x27}\x27. If that is so, then the text is safe for eval.\n\n  // Don\x27t make these static since they have the global flag.\n  var backslashesRe \x3d /\\\\[\x22\\\\\\/bfnrtu]/g;\n  var simpleValuesRe \x3d\n      /(?:\x22[^\x22\\\\\\n\\r\\u2028\\u2029\\x00-\\x08\\x0a-\\x1f]*\x22|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)[\\s\\u2028\\u2029]*(?\x3d:|,|]|}|$)/g;\n  var openBracketsRe \x3d /(?:^|:|,)(?:[\\s\\u2028\\u2029]*\\[)+/g;\n  var remainderRe \x3d /^[\\],:{}\\s\\u2028\\u2029]*$/;\n\n  return remainderRe.test(\n      s.replace(backslashesRe, \x27@\x27)\n          .replace(simpleValuesRe, \x27]\x27)\n          .replace(openBracketsRe, \x27\x27));\n};\n\n/**\n * Logs a parsing error in `JSON.parse` solvable by using `eval`\n * if `goog.json.TRY_NATIVE_JSON` is enabled.\n * @private {function(string, !Error)} The first parameter is the error message,\n *     the second is the exception thrown by `JSON.parse`.\n */\ngoog.json.errorLogger_ \x3d goog.nullFunction;\n\n\n/**\n * Sets an error logger to use if there\x27s a recoverable parsing error and\n * `goog.json.TRY_NATIVE_JSON` is enabled.\n * @param {function(string, !Error)} errorLogger The first parameter is the\n *     error message, the second is the exception thrown by `JSON.parse`.\n */\ngoog.json.setErrorLogger \x3d function(errorLogger) {\n  goog.json.errorLogger_ \x3d errorLogger;\n};\n\n\n/**\n * Parses a JSON string and returns the result. This throws an exception if\n * the string is an invalid JSON string.\n *\n * Note that this is very slow on large strings. Use JSON.parse if possible.\n *\n * @param {*} s The JSON string to parse.\n * @throws Error if s is invalid JSON.\n * @return {Object} The object generated from the JSON string, or null.\n * @deprecated Use JSON.parse.\n */\ngoog.json.parse \x3d goog.json.USE_NATIVE_JSON ?\n    /** @type {function(*):Object} */ (goog.global[\x27JSON\x27][\x27parse\x27]) :\n    function(s) {\n      var error;\n      if (goog.json.TRY_NATIVE_JSON) {\n        try {\n          return goog.global[\x27JSON\x27][\x27parse\x27](s);\n        } catch (ex) {\n          error \x3d ex;\n        }\n      }\n      var o \x3d String(s);\n      if (goog.json.isValid(o)) {\n\n        try {\n          var result \x3d /** @type {?Object} */ (eval(\x27(\x27 + o + \x27)\x27));\n          if (error) {\n            goog.json.errorLogger_(\x27Invalid JSON: \x27 + o, error);\n          }\n          return result;\n        } catch (ex) {\n        }\n      }\n      throw new Error(\x27Invalid JSON string: \x27 + o);\n    };\n\n\n/**\n * JSON replacer, as defined in Section 15.12.3 of the ES5 spec.\n * @see http://ecma-international.org/ecma-262/5.1/#sec-15.12.3\n *\n * TODO(nicksantos): Array should also be a valid replacer.\n *\n * @typedef {function(this:Object, string, *): *}\n */\ngoog.json.Replacer;\n\n\n/**\n * JSON reviver, as defined in Section 15.12.2 of the ES5 spec.\n * @see http://ecma-international.org/ecma-262/5.1/#sec-15.12.3\n *\n * @typedef {function(this:Object, string, *): *}\n */\ngoog.json.Reviver;\n\n\n/**\n * Serializes an object or a value to a JSON string.\n *\n * @param {*} object The object to serialize.\n * @param {?goog.json.Replacer\x3d} opt_replacer A replacer function\n *     called for each (key, value) pair that determines how the value\n *     should be serialized. By defult, this just returns the value\n *     and allows default serialization to kick in.\n * @throws Error if there are loops in the object graph.\n * @return {string} A JSON string representation of the input.\n */\ngoog.json.serialize \x3d goog.json.USE_NATIVE_JSON ?\n    /** @type {function(*, ?goog.json.Replacer\x3d):string} */\n    (goog.global[\x27JSON\x27][\x27stringify\x27]) :\n    function(object, opt_replacer) {\n      // NOTE(nicksantos): Currently, we never use JSON.stringify.\n      //\n      // The last time I evaluated this, JSON.stringify had subtle bugs and\n      // behavior differences on all browsers, and the performance win was not\n      // large enough to justify all the issues. This may change in the future\n      // as browser implementations get better.\n      //\n      // assertSerialize in json_test contains if branches for the cases\n      // that fail.\n      return new goog.json.Serializer(opt_replacer).serialize(object);\n    };\n\n\n\n/**\n * Class that is used to serialize JSON objects to a string.\n * @param {?goog.json.Replacer\x3d} opt_replacer Replacer.\n * @constructor\n */\ngoog.json.Serializer \x3d function(opt_replacer) {\n  /**\n   * @type {goog.json.Replacer|null|undefined}\n   * @private\n   */\n  this.replacer_ \x3d opt_replacer;\n};\n\n\n/**\n * Serializes an object or a value to a JSON string.\n *\n * @param {*} object The object to serialize.\n * @throws Error if there are loops in the object graph.\n * @return {string} A JSON string representation of the input.\n */\ngoog.json.Serializer.prototype.serialize \x3d function(object) {\n  var sb \x3d [];\n  this.serializeInternal(object, sb);\n  return sb.join(\x27\x27);\n};\n\n\n/**\n * Serializes a generic value to a JSON string\n * @protected\n * @param {*} object The object to serialize.\n * @param {Array\x3cstring\x3e} sb Array used as a string builder.\n * @throws Error if there are loops in the object graph.\n */\ngoog.json.Serializer.prototype.serializeInternal \x3d function(object, sb) {\n  if (object \x3d\x3d null) {\n    // undefined \x3d\x3d null so this branch covers undefined as well as null\n    sb.push(\x27null\x27);\n    return;\n  }\n\n  if (typeof object \x3d\x3d \x27object\x27) {\n    if (goog.isArray(object)) {\n      this.serializeArray(object, sb);\n      return;\n    } else if (\n        object instanceof String || object instanceof Number ||\n        object instanceof Boolean) {\n      object \x3d object.valueOf();\n      // Fall through to switch below.\n    } else {\n      this.serializeObject_(/** @type {!Object} */ (object), sb);\n      return;\n    }\n  }\n\n  switch (typeof object) {\n    case \x27string\x27:\n      this.serializeString_(object, sb);\n      break;\n    case \x27number\x27:\n      this.serializeNumber_(object, sb);\n      break;\n    case \x27boolean\x27:\n      sb.push(String(object));\n      break;\n    case \x27function\x27:\n      sb.push(\x27null\x27);\n      break;\n    default:\n      throw new Error(\x27Unknown type: \x27 + typeof object);\n  }\n};\n\n\n/**\n * Character mappings used internally for goog.string.quote\n * @private\n * @type {!Object}\n */\ngoog.json.Serializer.charToJsonCharCache_ \x3d {\n  \x27\\\x22\x27: \x27\\\\\x22\x27,\n  \x27\\\\\x27: \x27\\\\\\\\\x27,\n  \x27/\x27: \x27\\\\/\x27,\n  \x27\\b\x27: \x27\\\\b\x27,\n  \x27\\f\x27: \x27\\\\f\x27,\n  \x27\\n\x27: \x27\\\\n\x27,\n  \x27\\r\x27: \x27\\\\r\x27,\n  \x27\\t\x27: \x27\\\\t\x27,\n\n  \x27\\x0B\x27: \x27\\\\u000b\x27  // \x27\\v\x27 is not supported in JScript\n};\n\n\n/**\n * Regular expression used to match characters that need to be replaced.\n * The S60 browser has a bug where unicode characters are not matched by\n * regular expressions. The condition below detects such behaviour and\n * adjusts the regular expression accordingly.\n * @private\n * @type {!RegExp}\n */\ngoog.json.Serializer.charsToReplace_ \x3d /\\uffff/.test(\x27\\uffff\x27) ?\n    /[\\\\\\\x22\\x00-\\x1f\\x7f-\\uffff]/g :\n    /[\\\\\\\x22\\x00-\\x1f\\x7f-\\xff]/g;\n\n\n/**\n * Serializes a string to a JSON string\n * @private\n * @param {string} s The string to serialize.\n * @param {Array\x3cstring\x3e} sb Array used as a string builder.\n */\ngoog.json.Serializer.prototype.serializeString_ \x3d function(s, sb) {\n  // The official JSON implementation does not work with international\n  // characters.\n  sb.push(\x27\x22\x27, s.replace(goog.json.Serializer.charsToReplace_, function(c) {\n    // caching the result improves performance by a factor 2-3\n    var rv \x3d goog.json.Serializer.charToJsonCharCache_[c];\n    if (!rv) {\n      rv \x3d \x27\\\\u\x27 + (c.charCodeAt(0) | 0x10000).toString(16).substr(1);\n      goog.json.Serializer.charToJsonCharCache_[c] \x3d rv;\n    }\n    return rv;\n  }), \x27\x22\x27);\n};\n\n\n/**\n * Serializes a number to a JSON string\n * @private\n * @param {number} n The number to serialize.\n * @param {Array\x3cstring\x3e} sb Array used as a string builder.\n */\ngoog.json.Serializer.prototype.serializeNumber_ \x3d function(n, sb) {\n  sb.push(isFinite(n) \x26\x26 !isNaN(n) ? String(n) : \x27null\x27);\n};\n\n\n/**\n * Serializes an array to a JSON string\n * @param {Array\x3cstring\x3e} arr The array to serialize.\n * @param {Array\x3cstring\x3e} sb Array used as a string builder.\n * @protected\n */\ngoog.json.Serializer.prototype.serializeArray \x3d function(arr, sb) {\n  var l \x3d arr.length;\n  sb.push(\x27[\x27);\n  var sep \x3d \x27\x27;\n  for (var i \x3d 0; i \x3c l; i++) {\n    sb.push(sep);\n\n    var value \x3d arr[i];\n    this.serializeInternal(\n        this.replacer_ ? this.replacer_.call(arr, String(i), value) : value,\n        sb);\n\n    sep \x3d \x27,\x27;\n  }\n  sb.push(\x27]\x27);\n};\n\n\n/**\n * Serializes an object to a JSON string\n * @private\n * @param {!Object} obj The object to serialize.\n * @param {Array\x3cstring\x3e} sb Array used as a string builder.\n */\ngoog.json.Serializer.prototype.serializeObject_ \x3d function(obj, sb) {\n  sb.push(\x27{\x27);\n  var sep \x3d \x27\x27;\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var value \x3d obj[key];\n      // Skip functions.\n      if (typeof value !\x3d \x27function\x27) {\n        sb.push(sep);\n        this.serializeString_(key, sb);\n        sb.push(\x27:\x27);\n\n        this.serializeInternal(\n            this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);\n\n        sep \x3d \x27,\x27;\n      }\n    }\n  }\n  sb.push(\x27}\x27);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/json/json.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/json/hybrid.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/**\n * @fileoverview Utility to attempt native JSON processing, falling back to\n *     goog.json if not available.\n *\n *     This is intended as a drop-in for current users of goog.json who want\n *     to take advantage of native JSON if present.\n *\n * @author nnaze@google.com (Nathan Naze)\n */\n\ngoog.provide(\x27goog.json.hybrid\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.json\x27);\n\n\n/**\n * Attempts to serialize the JSON string natively, falling back to\n * `goog.json.serialize` if unsuccessful.\n * @param {!Object} obj JavaScript object to serialize to JSON.\n * @return {string} Resulting JSON string.\n */\ngoog.json.hybrid.stringify \x3d\n    goog.json.USE_NATIVE_JSON ? goog.global[\x27JSON\x27][\x27stringify\x27] : function(\n                                                                       obj) {\n      if (goog.global.JSON) {\n        try {\n          return goog.global.JSON.stringify(obj);\n        } catch (e) {\n          // Native serialization failed.  Fall through to retry with\n          // goog.json.serialize.\n        }\n      }\n\n      return goog.json.serialize(obj);\n    };\n\n\n/**\n * Attempts to parse the JSON string natively, falling back to\n * the supplied `fallbackParser` if unsuccessful.\n * @param {string} jsonString JSON string to parse.\n * @param {function(string):Object} fallbackParser Fallback JSON parser used\n *     if native\n * @return {?Object} Resulting JSON object.\n * @private\n */\ngoog.json.hybrid.parse_ \x3d function(jsonString, fallbackParser) {\n  if (goog.global.JSON) {\n    try {\n      var obj \x3d goog.global.JSON.parse(jsonString);\n      goog.asserts.assert(typeof obj \x3d\x3d \x27object\x27);\n      return /** @type {?Object} */ (obj);\n    } catch (e) {\n      // Native parse failed.  Fall through to retry with goog.json.parse.\n    }\n  }\n\n  return fallbackParser(jsonString);\n};\n\n\n/**\n * Attempts to parse the JSON string natively, falling back to\n * `goog.json.parse` if unsuccessful.\n * @param {string} jsonString JSON string to parse.\n * @return {?Object} Resulting JSON object.\n */\ngoog.json.hybrid.parse \x3d\n    goog.json.USE_NATIVE_JSON ? goog.global[\x27JSON\x27][\x27parse\x27] : function(\n                                                                   jsonString) {\n      return goog.json.hybrid.parse_(jsonString, goog.json.parse);\n    };\n\n//# sourceURL\x3dhttps://qs/javascript/closure/json/hybrid.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/iter/iter.js";
eval("// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Python style iteration utilities.\n * @author arv@google.com (Erik Arvidsson)\n */\n\n\ngoog.provide(\x27goog.iter\x27);\ngoog.provide(\x27goog.iter.Iterable\x27);\ngoog.provide(\x27goog.iter.Iterator\x27);\ngoog.provide(\x27goog.iter.StopIteration\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.functions\x27);\ngoog.require(\x27goog.math\x27);\n\n\n/**\n * @typedef {goog.iter.Iterator|{length:number}|{__iterator__}}\n */\ngoog.iter.Iterable;\n\n\n/**\n * Singleton Error object that is used to terminate iterations.\n * @const {!Error}\n */\ngoog.iter.StopIteration \x3d (\x27StopIteration\x27 in goog.global) ?\n    // For script engines that support legacy iterators.\n    goog.global[\x27StopIteration\x27] :\n    {message: \x27StopIteration\x27, stack: \x27\x27};\n\n\n\n/**\n * Class/interface for iterators.  An iterator needs to implement a `next`\n * method and it needs to throw a `goog.iter.StopIteration` when the\n * iteration passes beyond the end.  Iterators have no `hasNext` method.\n * It is recommended to always use the helper functions to iterate over the\n * iterator or in case you are only targeting JavaScript 1.7 for in loops.\n * @constructor\n * @template VALUE\n */\ngoog.iter.Iterator \x3d function() {};\n\n\n/**\n * Returns the next value of the iteration.  This will throw the object\n * {@see goog.iter#StopIteration} when the iteration passes the end.\n * @return {VALUE} Any object or value.\n */\ngoog.iter.Iterator.prototype.next \x3d function() {\n  throw goog.iter.StopIteration;\n};\n\n\n/**\n * Returns the `Iterator` object itself.  This is used to implement\n * the iterator protocol in JavaScript 1.7\n * @param {boolean\x3d} opt_keys  Whether to return the keys or values. Default is\n *     to only return the values.  This is being used by the for-in loop (true)\n *     and the for-each-in loop (false).  Even though the param gives a hint\n *     about what the iterator will return there is no guarantee that it will\n *     return the keys when true is passed.\n * @return {!goog.iter.Iterator\x3cVALUE\x3e} The object itself.\n */\ngoog.iter.Iterator.prototype.__iterator__ \x3d function(opt_keys) {\n  return this;\n};\n\n\n/**\n * Returns an iterator that knows how to iterate over the values in the object.\n * @param {goog.iter.Iterator\x3cVALUE\x3e|goog.iter.Iterable} iterable  If the\n *     object is an iterator it will be returned as is.  If the object has an\n *     `__iterator__` method that will be called to get the value\n *     iterator.  If the object is an array-like object we create an iterator\n *     for that.\n * @return {!goog.iter.Iterator\x3cVALUE\x3e} An iterator that knows how to iterate\n *     over the values in `iterable`.\n * @template VALUE\n */\ngoog.iter.toIterator \x3d function(iterable) {\n  if (iterable instanceof goog.iter.Iterator) {\n    return iterable;\n  }\n  if (typeof iterable.__iterator__ \x3d\x3d \x27function\x27) {\n    return /** @type {{__iterator__:function(this:?, boolean\x3d)}} */ (iterable)\n        .__iterator__(false);\n  }\n  if (goog.isArrayLike(iterable)) {\n    var like \x3d /** @type {!IArrayLike\x3cnumber|string\x3e} */ (iterable);\n    var i \x3d 0;\n    var newIter \x3d new goog.iter.Iterator;\n    newIter.next \x3d function() {\n      while (true) {\n        if (i \x3e\x3d like.length) {\n          throw goog.iter.StopIteration;\n        }\n        // Don\x27t include deleted elements.\n        if (!(i in like)) {\n          i++;\n          continue;\n        }\n        return like[i++];\n      }\n    };\n    return newIter;\n  }\n\n\n  // TODO(arv): Should we fall back on goog.structs.getValues()?\n  throw new Error(\x27Not implemented\x27);\n};\n\n\n/**\n * Calls a function for each element in the iterator with the element of the\n * iterator passed as argument.\n *\n * @param {goog.iter.Iterator\x3cVALUE\x3e|goog.iter.Iterable} iterable  The iterator\n *     to iterate over. If the iterable is an object `toIterator` will be\n *     called on it.\n * @param {function(this:THIS,VALUE,?,!goog.iter.Iterator\x3cVALUE\x3e)} f\n *     The function to call for every element.  This function takes 3 arguments\n *     (the element, undefined, and the iterator) and the return value is\n *     irrelevant.  The reason for passing undefined as the second argument is\n *     so that the same function can be used in {@see goog.array#forEach} as\n *     well as others.  The third parameter is of type \x22number\x22 for\n *     arraylike objects, undefined, otherwise.\n * @param {THIS\x3d} opt_obj  The object to be used as the value of \x27this\x27 within\n *     `f`.\n * @template THIS, VALUE\n */\ngoog.iter.forEach \x3d function(iterable, f, opt_obj) {\n  if (goog.isArrayLike(iterable)) {\n\n    try {\n      // NOTES: this passes the index number to the second parameter\n      // of the callback contrary to the documentation above.\n      goog.array.forEach(\n          /** @type {IArrayLike\x3c?\x3e} */ (iterable), f, opt_obj);\n    } catch (ex) {\n      if (ex !\x3d\x3d goog.iter.StopIteration) {\n        throw ex;\n      }\n    }\n  } else {\n    iterable \x3d goog.iter.toIterator(iterable);\n\n    try {\n      while (true) {\n        f.call(opt_obj, iterable.next(), undefined, iterable);\n      }\n    } catch (ex) {\n      if (ex !\x3d\x3d goog.iter.StopIteration) {\n        throw ex;\n      }\n    }\n  }\n};\n\n\n/**\n * Calls a function for every element in the iterator, and if the function\n * returns true adds the element to a new iterator.\n *\n * @param {goog.iter.Iterator\x3cVALUE\x3e|goog.iter.Iterable} iterable The iterator\n *     to iterate over.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator\x3cVALUE\x3e):boolean} f\n *     The function to call for every element. This function takes 3 arguments\n *     (the element, undefined, and the iterator) and should return a boolean.\n *     If the return value is true the element will be included in the returned\n *     iterator.  If it is false the element is not included.\n * @param {THIS\x3d} opt_obj The object to be used as the value of \x27this\x27 within\n *     `f`.\n * @return {!goog.iter.Iterator\x3cVALUE\x3e} A new iterator in which only elements\n *     that passed the test are present.\n * @template THIS, VALUE\n */\ngoog.iter.filter \x3d function(iterable, f, opt_obj) {\n  var iterator \x3d goog.iter.toIterator(iterable);\n  var newIter \x3d new goog.iter.Iterator;\n  newIter.next \x3d function() {\n    while (true) {\n      var val \x3d iterator.next();\n      if (f.call(opt_obj, val, undefined, iterator)) {\n        return val;\n      }\n    }\n  };\n  return newIter;\n};\n\n\n/**\n * Calls a function for every element in the iterator, and if the function\n * returns false adds the element to a new iterator.\n *\n * @param {goog.iter.Iterator\x3cVALUE\x3e|goog.iter.Iterable} iterable The iterator\n *     to iterate over.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator\x3cVALUE\x3e):boolean} f\n *     The function to call for every element. This function takes 3 arguments\n *     (the element, undefined, and the iterator) and should return a boolean.\n *     If the return value is false the element will be included in the returned\n *     iterator.  If it is true the element is not included.\n * @param {THIS\x3d} opt_obj The object to be used as the value of \x27this\x27 within\n *     `f`.\n * @return {!goog.iter.Iterator\x3cVALUE\x3e} A new iterator in which only elements\n *     that did not pass the test are present.\n * @template THIS, VALUE\n */\ngoog.iter.filterFalse \x3d function(iterable, f, opt_obj) {\n  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);\n};\n\n\n/**\n * Creates a new iterator that returns the values in a range.  This function\n * can take 1, 2 or 3 arguments:\n * \x3cpre\x3e\n * range(5) same as range(0, 5, 1)\n * range(2, 5) same as range(2, 5, 1)\n * \x3c/pre\x3e\n *\n * @param {number} startOrStop  The stop value if only one argument is provided.\n *     The start value if 2 or more arguments are provided.  If only one\n *     argument is used the start value is 0.\n * @param {number\x3d} opt_stop  The stop value.  If left out then the first\n *     argument is used as the stop value.\n * @param {number\x3d} opt_step  The number to increment with between each call to\n *     next.  This can be negative.\n * @return {!goog.iter.Iterator\x3cnumber\x3e} A new iterator that returns the values\n *     in the range.\n */\ngoog.iter.range \x3d function(startOrStop, opt_stop, opt_step) {\n  var start \x3d 0;\n  var stop \x3d startOrStop;\n  var step \x3d opt_step || 1;\n  if (arguments.length \x3e 1) {\n    start \x3d startOrStop;\n    stop \x3d +opt_stop;\n  }\n  if (step \x3d\x3d 0) {\n    throw new Error(\x27Range step argument must not be zero\x27);\n  }\n\n  var newIter \x3d new goog.iter.Iterator;\n  newIter.next \x3d function() {\n    if (step \x3e 0 \x26\x26 start \x3e\x3d stop || step \x3c 0 \x26\x26 start \x3c\x3d stop) {\n      throw goog.iter.StopIteration;\n    }\n    var rv \x3d start;\n    start +\x3d step;\n    return rv;\n  };\n  return newIter;\n};\n\n\n/**\n * Joins the values in a iterator with a delimiter.\n * @param {goog.iter.Iterator\x3cVALUE\x3e|goog.iter.Iterable} iterable The iterator\n *     to get the values from.\n * @param {string} deliminator  The text to put between the values.\n * @return {string} The joined value string.\n * @template VALUE\n */\ngoog.iter.join \x3d function(iterable, deliminator) {\n  return goog.iter.toArray(iterable).join(deliminator);\n};\n\n\n/**\n * For every element in the iterator call a function and return a new iterator\n * with that value.\n *\n * @param {!goog.iter.Iterator\x3cVALUE\x3e|!goog.iter.Iterable} iterable The\n *     iterator to iterate over.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator\x3cVALUE\x3e):RESULT} f\n *     The function to call for every element.  This function takes 3 arguments\n *     (the element, undefined, and the iterator) and should return a new value.\n * @param {THIS\x3d} opt_obj The object to be used as the value of \x27this\x27 within\n *     `f`.\n * @return {!goog.iter.Iterator\x3cRESULT\x3e} A new iterator that returns the\n *     results of applying the function to each element in the original\n *     iterator.\n * @template THIS, VALUE, RESULT\n */\ngoog.iter.map \x3d function(iterable, f, opt_obj) {\n  var iterator \x3d goog.iter.toIterator(iterable);\n  var newIter \x3d new goog.iter.Iterator;\n  newIter.next \x3d function() {\n    var val \x3d iterator.next();\n    return f.call(opt_obj, val, undefined, iterator);\n  };\n  return newIter;\n};\n\n\n/**\n * Passes every element of an iterator into a function and accumulates the\n * result.\n *\n * @param {goog.iter.Iterator\x3cVALUE\x3e|goog.iter.Iterable} iterable The iterator\n *     to iterate over.\n * @param {function(this:THIS,VALUE,VALUE):VALUE} f The function to call for\n *     every element. This function takes 2 arguments (the function\x27s previous\n *     result or the initial value, and the value of the current element).\n *     function(previousValue, currentElement) : newValue.\n * @param {VALUE} val The initial value to pass into the function on the first\n *     call.\n * @param {THIS\x3d} opt_obj  The object to be used as the value of \x27this\x27 within\n *     f.\n * @return {VALUE} Result of evaluating f repeatedly across the values of\n *     the iterator.\n * @template THIS, VALUE\n */\ngoog.iter.reduce \x3d function(iterable, f, val, opt_obj) {\n  var rval \x3d val;\n  goog.iter.forEach(\n      iterable, function(val) { rval \x3d f.call(opt_obj, rval, val); });\n  return rval;\n};\n\n\n/**\n * Goes through the values in the iterator. Calls f for each of these, and if\n * any of them returns true, this returns true (without checking the rest). If\n * all return false this will return false.\n *\n * @param {goog.iter.Iterator\x3cVALUE\x3e|goog.iter.Iterable} iterable The iterator\n *     object.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator\x3cVALUE\x3e):boolean} f\n *     The function to call for every value. This function takes 3 arguments\n *     (the value, undefined, and the iterator) and should return a boolean.\n * @param {THIS\x3d} opt_obj The object to be used as the value of \x27this\x27 within\n *     `f`.\n * @return {boolean} true if any value passes the test.\n * @template THIS, VALUE\n */\ngoog.iter.some \x3d function(iterable, f, opt_obj) {\n  iterable \x3d goog.iter.toIterator(iterable);\n\n  try {\n    while (true) {\n      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {\n        return true;\n      }\n    }\n  } catch (ex) {\n    if (ex !\x3d\x3d goog.iter.StopIteration) {\n      throw ex;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Goes through the values in the iterator. Calls f for each of these and if any\n * of them returns false this returns false (without checking the rest). If all\n * return true this will return true.\n *\n * @param {goog.iter.Iterator\x3cVALUE\x3e|goog.iter.Iterable} iterable The iterator\n *     object.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator\x3cVALUE\x3e):boolean} f\n *     The function to call for every value. This function takes 3 arguments\n *     (the value, undefined, and the iterator) and should return a boolean.\n * @param {THIS\x3d} opt_obj The object to be used as the value of \x27this\x27 within\n *     `f`.\n * @return {boolean} true if every value passes the test.\n * @template THIS, VALUE\n */\ngoog.iter.every \x3d function(iterable, f, opt_obj) {\n  iterable \x3d goog.iter.toIterator(iterable);\n\n  try {\n    while (true) {\n      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {\n        return false;\n      }\n    }\n  } catch (ex) {\n    if (ex !\x3d\x3d goog.iter.StopIteration) {\n      throw ex;\n    }\n  }\n  return true;\n};\n\n\n/**\n * Takes zero or more iterables and returns one iterator that will iterate over\n * them in the order chained.\n * @param {...!goog.iter.Iterator\x3cVALUE\x3e|!goog.iter.Iterable} var_args Any\n *     number of iterable objects.\n * @return {!goog.iter.Iterator\x3cVALUE\x3e} Returns a new iterator that will\n *     iterate over all the given iterables\x27 contents.\n * @template VALUE\n */\ngoog.iter.chain \x3d function(var_args) {\n  return goog.iter.chainFromIterable(arguments);\n};\n\n\n/**\n * Takes a single iterable containing zero or more iterables and returns one\n * iterator that will iterate over each one in the order given.\n * @see https://goo.gl/5NRp5d\n * @param {goog.iter.Iterable} iterable The iterable of iterables to chain.\n * @return {!goog.iter.Iterator\x3cVALUE\x3e} Returns a new iterator that will\n *     iterate over all the contents of the iterables contained within\n *     `iterable`.\n * @template VALUE\n */\ngoog.iter.chainFromIterable \x3d function(iterable) {\n  var iterator \x3d goog.iter.toIterator(iterable);\n  var iter \x3d new goog.iter.Iterator();\n  var current \x3d null;\n\n  iter.next \x3d function() {\n    while (true) {\n      if (current \x3d\x3d null) {\n        var it \x3d iterator.next();\n        current \x3d goog.iter.toIterator(it);\n      }\n      try {\n        return current.next();\n      } catch (ex) {\n        if (ex !\x3d\x3d goog.iter.StopIteration) {\n          throw ex;\n        }\n        current \x3d null;\n      }\n    }\n  };\n\n  return iter;\n};\n\n\n/**\n * Builds a new iterator that iterates over the original, but skips elements as\n * long as a supplied function returns true.\n * @param {goog.iter.Iterator\x3cVALUE\x3e|goog.iter.Iterable} iterable The iterator\n *     object.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator\x3cVALUE\x3e):boolean} f\n *     The function to call for every value. This function takes 3 arguments\n *     (the value, undefined, and the iterator) and should return a boolean.\n * @param {THIS\x3d} opt_obj The object to be used as the value of \x27this\x27 within\n *     `f`.\n * @return {!goog.iter.Iterator\x3cVALUE\x3e} A new iterator that drops elements from\n *     the original iterator as long as `f` is true.\n * @template THIS, VALUE\n */\ngoog.iter.dropWhile \x3d function(iterable, f, opt_obj) {\n  var iterator \x3d goog.iter.toIterator(iterable);\n  var newIter \x3d new goog.iter.Iterator;\n  var dropping \x3d true;\n  newIter.next \x3d function() {\n    while (true) {\n      var val \x3d iterator.next();\n      if (dropping \x26\x26 f.call(opt_obj, val, undefined, iterator)) {\n        continue;\n      } else {\n        dropping \x3d false;\n      }\n      return val;\n    }\n  };\n  return newIter;\n};\n\n\n/**\n * Builds a new iterator that iterates over the original, but only as long as a\n * supplied function returns true.\n * @param {goog.iter.Iterator\x3cVALUE\x3e|goog.iter.Iterable} iterable The iterator\n *     object.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator\x3cVALUE\x3e):boolean} f\n *     The function to call for every value. This function takes 3 arguments\n *     (the value, undefined, and the iterator) and should return a boolean.\n * @param {THIS\x3d} opt_obj This is used as the \x27this\x27 object in f when called.\n * @return {!goog.iter.Iterator\x3cVALUE\x3e} A new iterator that keeps elements in\n *     the original iterator as long as the function is true.\n * @template THIS, VALUE\n */\ngoog.iter.takeWhile \x3d function(iterable, f, opt_obj) {\n  var iterator \x3d goog.iter.toIterator(iterable);\n  var iter \x3d new goog.iter.Iterator();\n  iter.next \x3d function() {\n    var val \x3d iterator.next();\n    if (f.call(opt_obj, val, undefined, iterator)) {\n      return val;\n    }\n    throw goog.iter.StopIteration;\n  };\n  return iter;\n};\n\n\n/**\n * Converts the iterator to an array\n * @param {goog.iter.Iterator\x3cVALUE\x3e|goog.iter.Iterable} iterable The iterator\n *     to convert to an array.\n * @return {!Array\x3cVALUE\x3e} An array of the elements the iterator iterates over.\n * @template VALUE\n */\ngoog.iter.toArray \x3d function(iterable) {\n  // Fast path for array-like.\n  if (goog.isArrayLike(iterable)) {\n    return goog.array.toArray(/** @type {!IArrayLike\x3c?\x3e} */ (iterable));\n  }\n  iterable \x3d goog.iter.toIterator(iterable);\n  var array \x3d [];\n  goog.iter.forEach(iterable, function(val) { array.push(val); });\n  return array;\n};\n\n\n/**\n * Iterates over two iterables and returns true if they contain the same\n * sequence of elements and have the same length.\n * @param {!goog.iter.Iterator\x3cVALUE\x3e|!goog.iter.Iterable} iterable1 The first\n *     iterable object.\n * @param {!goog.iter.Iterator\x3cVALUE\x3e|!goog.iter.Iterable} iterable2 The second\n *     iterable object.\n * @param {function(VALUE,VALUE):boolean\x3d} opt_equalsFn Optional comparison\n *     function.\n *     Should take two arguments to compare, and return true if the arguments\n *     are equal. Defaults to {@link goog.array.defaultCompareEquality} which\n *     compares the elements using the built-in \x27\x3d\x3d\x3d\x27 operator.\n * @return {boolean} true if the iterables contain the same sequence of elements\n *     and have the same length.\n * @template VALUE\n */\ngoog.iter.equals \x3d function(iterable1, iterable2, opt_equalsFn) {\n  var fillValue \x3d {};\n  var pairs \x3d goog.iter.zipLongest(fillValue, iterable1, iterable2);\n  var equalsFn \x3d opt_equalsFn || goog.array.defaultCompareEquality;\n  return goog.iter.every(\n      pairs, function(pair) { return equalsFn(pair[0], pair[1]); });\n};\n\n\n/**\n * Advances the iterator to the next position, returning the given default value\n * instead of throwing an exception if the iterator has no more entries.\n * @param {goog.iter.Iterator\x3cVALUE\x3e|goog.iter.Iterable} iterable The iterable\n *     object.\n * @param {VALUE} defaultValue The value to return if the iterator is empty.\n * @return {VALUE} The next item in the iteration, or defaultValue if the\n *     iterator was empty.\n * @template VALUE\n */\ngoog.iter.nextOrValue \x3d function(iterable, defaultValue) {\n  try {\n    return goog.iter.toIterator(iterable).next();\n  } catch (e) {\n    if (e !\x3d goog.iter.StopIteration) {\n      throw e;\n    }\n    return defaultValue;\n  }\n};\n\n\n/**\n * Cartesian product of zero or more sets.  Gives an iterator that gives every\n * combination of one element chosen from each set.  For example,\n * ([1, 2], [3, 4]) gives ([1, 3], [1, 4], [2, 3], [2, 4]).\n * @see http://docs.python.org/library/itertools.html#itertools.product\n * @param {...!IArrayLike\x3cVALUE\x3e} var_args Zero or more sets, as\n *     arrays.\n * @return {!goog.iter.Iterator\x3c!Array\x3cVALUE\x3e\x3e} An iterator that gives each\n *     n-tuple (as an array).\n * @template VALUE\n */\ngoog.iter.product \x3d function(var_args) {\n  var someArrayEmpty \x3d\n      goog.array.some(arguments, function(arr) { return !arr.length; });\n\n  // An empty set in a cartesian product gives an empty set.\n  if (someArrayEmpty || !arguments.length) {\n    return new goog.iter.Iterator();\n  }\n\n  var iter \x3d new goog.iter.Iterator();\n  var arrays \x3d arguments;\n\n  // The first indices are [0, 0, ...]\n  /** @type {?Array\x3cnumber\x3e} */\n  var indicies \x3d goog.array.repeat(0, arrays.length);\n\n  iter.next \x3d function() {\n\n    if (indicies) {\n      var retVal \x3d goog.array.map(indicies, function(valueIndex, arrayIndex) {\n        return arrays[arrayIndex][valueIndex];\n      });\n\n      // Generate the next-largest indices for the next call.\n      // Increase the rightmost index. If it goes over, increase the next\n      // rightmost (like carry-over addition).\n      for (var i \x3d indicies.length - 1; i \x3e\x3d 0; i--) {\n        // Assertion prevents compiler warning below.\n        goog.asserts.assert(indicies);\n        if (indicies[i] \x3c arrays[i].length - 1) {\n          indicies[i]++;\n          break;\n        }\n\n        // We\x27re at the last indices (the last element of every array), so\n        // the iteration is over on the next call.\n        if (i \x3d\x3d 0) {\n          indicies \x3d null;\n          break;\n        }\n        // Reset the index in this column and loop back to increment the\n        // next one.\n        indicies[i] \x3d 0;\n      }\n      return retVal;\n    }\n\n    throw goog.iter.StopIteration;\n  };\n\n  return iter;\n};\n\n\n/**\n * Create an iterator to cycle over the iterable\x27s elements indefinitely.\n * For example, ([1, 2, 3]) would return : 1, 2, 3, 1, 2, 3, ...\n * @see: http://docs.python.org/library/itertools.html#itertools.cycle.\n * @param {!goog.iter.Iterator\x3cVALUE\x3e|!goog.iter.Iterable} iterable The\n *     iterable object.\n * @return {!goog.iter.Iterator\x3cVALUE\x3e} An iterator that iterates indefinitely\n *     over the values in `iterable`.\n * @template VALUE\n */\ngoog.iter.cycle \x3d function(iterable) {\n  var baseIterator \x3d goog.iter.toIterator(iterable);\n\n  // We maintain a cache to store the iterable elements as we iterate\n  // over them. The cache is used to return elements once we have\n  // iterated over the iterable once.\n  var cache \x3d [];\n  var cacheIndex \x3d 0;\n\n  var iter \x3d new goog.iter.Iterator();\n\n  // This flag is set after the iterable is iterated over once\n  var useCache \x3d false;\n\n  iter.next \x3d function() {\n    var returnElement \x3d null;\n\n    // Pull elements off the original iterator if not using cache\n    if (!useCache) {\n      try {\n        // Return the element from the iterable\n        returnElement \x3d baseIterator.next();\n        cache.push(returnElement);\n        return returnElement;\n      } catch (e) {\n        // If an exception other than StopIteration is thrown\n        // or if there are no elements to iterate over (the iterable was empty)\n        // throw an exception\n        if (e !\x3d goog.iter.StopIteration || goog.array.isEmpty(cache)) {\n          throw e;\n        }\n        // set useCache to true after we know that a \x27StopIteration\x27 exception\n        // was thrown and the cache is not empty (to handle the \x27empty iterable\x27\n        // use case)\n        useCache \x3d true;\n      }\n    }\n\n    returnElement \x3d cache[cacheIndex];\n    cacheIndex \x3d (cacheIndex + 1) % cache.length;\n\n    return returnElement;\n  };\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that counts indefinitely from a starting value.\n * @see http://docs.python.org/2/library/itertools.html#itertools.count\n * @param {number\x3d} opt_start The starting value. Default is 0.\n * @param {number\x3d} opt_step The number to increment with between each call to\n *     next. Negative and floating point numbers are allowed. Default is 1.\n * @return {!goog.iter.Iterator\x3cnumber\x3e} A new iterator that returns the values\n *     in the series.\n */\ngoog.iter.count \x3d function(opt_start, opt_step) {\n  var counter \x3d opt_start || 0;\n  var step \x3d goog.isDef(opt_step) ? opt_step : 1;\n  var iter \x3d new goog.iter.Iterator();\n\n  iter.next \x3d function() {\n    var returnValue \x3d counter;\n    counter +\x3d step;\n    return returnValue;\n  };\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that returns the same object or value repeatedly.\n * @param {VALUE} value Any object or value to repeat.\n * @return {!goog.iter.Iterator\x3cVALUE\x3e} A new iterator that returns the\n *     repeated value.\n * @template VALUE\n */\ngoog.iter.repeat \x3d function(value) {\n  var iter \x3d new goog.iter.Iterator();\n\n  iter.next \x3d goog.functions.constant(value);\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that returns running totals from the numbers in\n * `iterable`. For example, the array {@code [1, 2, 3, 4, 5]} yields\n * {@code 1 -\x3e 3 -\x3e 6 -\x3e 10 -\x3e 15}.\n * @see http://docs.python.org/3.2/library/itertools.html#itertools.accumulate\n * @param {!goog.iter.Iterable} iterable The iterable of numbers to\n *     accumulate.\n * @return {!goog.iter.Iterator\x3cnumber\x3e} A new iterator that returns the\n *     numbers in the series.\n */\ngoog.iter.accumulate \x3d function(iterable) {\n  var iterator \x3d goog.iter.toIterator(iterable);\n  var total \x3d 0;\n  var iter \x3d new goog.iter.Iterator();\n\n  iter.next \x3d function() {\n    total +\x3d iterator.next();\n    return total;\n  };\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that returns arrays containing the ith elements from the\n * provided iterables. The returned arrays will be the same size as the number\n * of iterables given in `var_args`. Once the shortest iterable is\n * exhausted, subsequent calls to `next()` will throw\n * `goog.iter.StopIteration`.\n * @see http://docs.python.org/2/library/itertools.html#itertools.izip\n * @param {...!goog.iter.Iterator\x3cVALUE\x3e|!goog.iter.Iterable} var_args Any\n *     number of iterable objects.\n * @return {!goog.iter.Iterator\x3c!Array\x3cVALUE\x3e\x3e} A new iterator that returns\n *     arrays of elements from the provided iterables.\n * @template VALUE\n */\ngoog.iter.zip \x3d function(var_args) {\n  var args \x3d arguments;\n  var iter \x3d new goog.iter.Iterator();\n\n  if (args.length \x3e 0) {\n    var iterators \x3d goog.array.map(args, goog.iter.toIterator);\n    iter.next \x3d function() {\n      var arr \x3d goog.array.map(iterators, function(it) { return it.next(); });\n      return arr;\n    };\n  }\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that returns arrays containing the ith elements from the\n * provided iterables. The returned arrays will be the same size as the number\n * of iterables given in `var_args`. Shorter iterables will be extended\n * with `fillValue`. Once the longest iterable is exhausted, subsequent\n * calls to `next()` will throw `goog.iter.StopIteration`.\n * @see http://docs.python.org/2/library/itertools.html#itertools.izip_longest\n * @param {VALUE} fillValue The object or value used to fill shorter iterables.\n * @param {...!goog.iter.Iterator\x3cVALUE\x3e|!goog.iter.Iterable} var_args Any\n *     number of iterable objects.\n * @return {!goog.iter.Iterator\x3c!Array\x3cVALUE\x3e\x3e} A new iterator that returns\n *     arrays of elements from the provided iterables.\n * @template VALUE\n */\ngoog.iter.zipLongest \x3d function(fillValue, var_args) {\n  var args \x3d goog.array.slice(arguments, 1);\n  var iter \x3d new goog.iter.Iterator();\n\n  if (args.length \x3e 0) {\n    var iterators \x3d goog.array.map(args, goog.iter.toIterator);\n\n    iter.next \x3d function() {\n      var iteratorsHaveValues \x3d false;  // false when all iterators are empty.\n      var arr \x3d goog.array.map(iterators, function(it) {\n        var returnValue;\n        try {\n          returnValue \x3d it.next();\n          // Iterator had a value, so we\x27ve not exhausted the iterators.\n          // Set flag accordingly.\n          iteratorsHaveValues \x3d true;\n        } catch (ex) {\n          if (ex !\x3d\x3d goog.iter.StopIteration) {\n            throw ex;\n          }\n          returnValue \x3d fillValue;\n        }\n        return returnValue;\n      });\n\n      if (!iteratorsHaveValues) {\n        throw goog.iter.StopIteration;\n      }\n      return arr;\n    };\n  }\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that filters `iterable` based on a series of\n * `selectors`. On each call to `next()`, one item is taken from\n * both the `iterable` and `selectors` iterators. If the item from\n * `selectors` evaluates to true, the item from `iterable` is given.\n * Otherwise, it is skipped. Once either `iterable` or `selectors`\n * is exhausted, subsequent calls to `next()` will throw\n * `goog.iter.StopIteration`.\n * @see http://docs.python.org/2/library/itertools.html#itertools.compress\n * @param {!goog.iter.Iterator\x3cVALUE\x3e|!goog.iter.Iterable} iterable The\n *     iterable to filter.\n * @param {!goog.iter.Iterator\x3cVALUE\x3e|!goog.iter.Iterable} selectors An\n *     iterable of items to be evaluated in a boolean context to determine if\n *     the corresponding element in `iterable` should be included in the\n *     result.\n * @return {!goog.iter.Iterator\x3cVALUE\x3e} A new iterator that returns the\n *     filtered values.\n * @template VALUE\n */\ngoog.iter.compress \x3d function(iterable, selectors) {\n  var selectorIterator \x3d goog.iter.toIterator(selectors);\n\n  return goog.iter.filter(\n      iterable, function() { return !!selectorIterator.next(); });\n};\n\n\n\n/**\n * Implements the `goog.iter.groupBy` iterator.\n * @param {!goog.iter.Iterator\x3cVALUE\x3e|!goog.iter.Iterable} iterable The\n *     iterable to group.\n * @param {function(VALUE): KEY\x3d} opt_keyFunc  Optional function for\n *     determining the key value for each group in the `iterable`. Default\n *     is the identity function.\n * @constructor\n * @extends {goog.iter.Iterator\x3c!Array\x3c?\x3e\x3e}\n * @template KEY, VALUE\n * @private\n */\ngoog.iter.GroupByIterator_ \x3d function(iterable, opt_keyFunc) {\n\n  /**\n   * The iterable to group, coerced to an iterator.\n   * @type {!goog.iter.Iterator}\n   */\n  this.iterator \x3d goog.iter.toIterator(iterable);\n\n  /**\n   * A function for determining the key value for each element in the iterable.\n   * If no function is provided, the identity function is used and returns the\n   * element unchanged.\n   * @type {function(VALUE): KEY}\n   */\n  this.keyFunc \x3d opt_keyFunc || goog.functions.identity;\n\n  /**\n   * The target key for determining the start of a group.\n   * @type {KEY}\n   */\n  this.targetKey;\n\n  /**\n   * The current key visited during iteration.\n   * @type {KEY}\n   */\n  this.currentKey;\n\n  /**\n   * The current value being added to the group.\n   * @type {VALUE}\n   */\n  this.currentValue;\n};\ngoog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);\n\n\n/** @override */\ngoog.iter.GroupByIterator_.prototype.next \x3d function() {\n  while (this.currentKey \x3d\x3d this.targetKey) {\n    this.currentValue \x3d this.iterator.next();  // Exits on StopIteration\n    this.currentKey \x3d this.keyFunc(this.currentValue);\n  }\n  this.targetKey \x3d this.currentKey;\n  return [this.currentKey, this.groupItems_(this.targetKey)];\n};\n\n\n/**\n * Performs the grouping of objects using the given key.\n * @param {KEY} targetKey  The target key object for the group.\n * @return {!Array\x3cVALUE\x3e} An array of grouped objects.\n * @private\n */\ngoog.iter.GroupByIterator_.prototype.groupItems_ \x3d function(targetKey) {\n  var arr \x3d [];\n  while (this.currentKey \x3d\x3d targetKey) {\n    arr.push(this.currentValue);\n    try {\n      this.currentValue \x3d this.iterator.next();\n    } catch (ex) {\n      if (ex !\x3d\x3d goog.iter.StopIteration) {\n        throw ex;\n      }\n      break;\n    }\n    this.currentKey \x3d this.keyFunc(this.currentValue);\n  }\n  return arr;\n};\n\n\n/**\n * Creates an iterator that returns arrays containing elements from the\n * `iterable` grouped by a key value. For iterables with repeated\n * elements (i.e. sorted according to a particular key function), this function\n * has a `uniq`-like effect. For example, grouping the array:\n * {@code [A, B, B, C, C, A]} produces\n * {@code [A, [A]], [B, [B, B]], [C, [C, C]], [A, [A]]}.\n * @see http://docs.python.org/2/library/itertools.html#itertools.groupby\n * @param {!goog.iter.Iterator\x3cVALUE\x3e|!goog.iter.Iterable} iterable The\n *     iterable to group.\n * @param {function(VALUE): KEY\x3d} opt_keyFunc  Optional function for\n *     determining the key value for each group in the `iterable`. Default\n *     is the identity function.\n * @return {!goog.iter.Iterator\x3c!Array\x3c?\x3e\x3e} A new iterator that returns\n *     arrays of consecutive key and groups.\n * @template KEY, VALUE\n */\ngoog.iter.groupBy \x3d function(iterable, opt_keyFunc) {\n  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);\n};\n\n\n/**\n * Gives an iterator that gives the result of calling the given function\n * \x3ccode\x3ef\x3c/code\x3e with the arguments taken from the next element from\n * \x3ccode\x3eiterable\x3c/code\x3e (the elements are expected to also be iterables).\n *\n * Similar to {@see goog.iter#map} but allows the function to accept multiple\n * arguments from the iterable.\n *\n * @param {!goog.iter.Iterable} iterable The iterable of\n *     iterables to iterate over.\n * @param {function(this:THIS,...*):RESULT} f The function to call for every\n *     element.  This function takes N+2 arguments, where N represents the\n *     number of items from the next element of the iterable. The two\n *     additional arguments passed to the function are undefined and the\n *     iterator itself. The function should return a new value.\n * @param {THIS\x3d} opt_obj The object to be used as the value of \x27this\x27 within\n *     `f`.\n * @return {!goog.iter.Iterator\x3cRESULT\x3e} A new iterator that returns the\n *     results of applying the function to each element in the original\n *     iterator.\n * @template THIS, RESULT\n */\ngoog.iter.starMap \x3d function(iterable, f, opt_obj) {\n  var iterator \x3d goog.iter.toIterator(iterable);\n  var iter \x3d new goog.iter.Iterator();\n\n  iter.next \x3d function() {\n    var args \x3d goog.iter.toArray(iterator.next());\n    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));\n  };\n\n  return iter;\n};\n\n\n/**\n * Returns an array of iterators each of which can iterate over the values in\n * `iterable` without advancing the others.\n * @see http://docs.python.org/2/library/itertools.html#itertools.tee\n * @param {!goog.iter.Iterator\x3cVALUE\x3e|!goog.iter.Iterable} iterable The\n *     iterable to tee.\n * @param {number\x3d} opt_num  The number of iterators to create. Default is 2.\n * @return {!Array\x3cgoog.iter.Iterator\x3cVALUE\x3e\x3e} An array of iterators.\n * @template VALUE\n */\ngoog.iter.tee \x3d function(iterable, opt_num) {\n  var iterator \x3d goog.iter.toIterator(iterable);\n  var num \x3d goog.isNumber(opt_num) ? opt_num : 2;\n  var buffers \x3d\n      goog.array.map(goog.array.range(num), function() { return []; });\n\n  var addNextIteratorValueToBuffers \x3d function() {\n    var val \x3d iterator.next();\n    goog.array.forEach(buffers, function(buffer) { buffer.push(val); });\n  };\n\n  var createIterator \x3d function(buffer) {\n    // Each tee\x27d iterator has an associated buffer (initially empty). When a\n    // tee\x27d iterator\x27s buffer is empty, it calls\n    // addNextIteratorValueToBuffers(), adding the next value to all tee\x27d\n    // iterators\x27 buffers, and then returns that value. This allows each\n    // iterator to be advanced independently.\n    var iter \x3d new goog.iter.Iterator();\n\n    iter.next \x3d function() {\n      if (goog.array.isEmpty(buffer)) {\n        addNextIteratorValueToBuffers();\n      }\n      goog.asserts.assert(!goog.array.isEmpty(buffer));\n      return buffer.shift();\n    };\n\n    return iter;\n  };\n\n  return goog.array.map(buffers, createIterator);\n};\n\n\n/**\n * Creates an iterator that returns arrays containing a count and an element\n * obtained from the given `iterable`.\n * @see http://docs.python.org/2/library/functions.html#enumerate\n * @param {!goog.iter.Iterator\x3cVALUE\x3e|!goog.iter.Iterable} iterable The\n *     iterable to enumerate.\n * @param {number\x3d} opt_start  Optional starting value. Default is 0.\n * @return {!goog.iter.Iterator\x3c!Array\x3c?\x3e\x3e} A new iterator containing\n *     count/item pairs.\n * @template VALUE\n */\ngoog.iter.enumerate \x3d function(iterable, opt_start) {\n  return goog.iter.zip(goog.iter.count(opt_start), iterable);\n};\n\n\n/**\n * Creates an iterator that returns the first `limitSize` elements from an\n * iterable. If this number is greater than the number of elements in the\n * iterable, all the elements are returned.\n * @see http://goo.gl/V0sihp Inspired by the limit iterator in Guava.\n * @param {!goog.iter.Iterator\x3cVALUE\x3e|!goog.iter.Iterable} iterable The\n *     iterable to limit.\n * @param {number} limitSize  The maximum number of elements to return.\n * @return {!goog.iter.Iterator\x3cVALUE\x3e} A new iterator containing\n *     `limitSize` elements.\n * @template VALUE\n */\ngoog.iter.limit \x3d function(iterable, limitSize) {\n  goog.asserts.assert(goog.math.isInt(limitSize) \x26\x26 limitSize \x3e\x3d 0);\n\n  var iterator \x3d goog.iter.toIterator(iterable);\n\n  var iter \x3d new goog.iter.Iterator();\n  var remaining \x3d limitSize;\n\n  iter.next \x3d function() {\n    if (remaining-- \x3e 0) {\n      return iterator.next();\n    }\n    throw goog.iter.StopIteration;\n  };\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that is advanced `count` steps ahead. Consumed\n * values are silently discarded. If `count` is greater than the number\n * of elements in `iterable`, an empty iterator is returned. Subsequent\n * calls to `next()` will throw `goog.iter.StopIteration`.\n * @param {!goog.iter.Iterator\x3cVALUE\x3e|!goog.iter.Iterable} iterable The\n *     iterable to consume.\n * @param {number} count  The number of elements to consume from the iterator.\n * @return {!goog.iter.Iterator\x3cVALUE\x3e} An iterator advanced zero or more steps\n *     ahead.\n * @template VALUE\n */\ngoog.iter.consume \x3d function(iterable, count) {\n  goog.asserts.assert(goog.math.isInt(count) \x26\x26 count \x3e\x3d 0);\n\n  var iterator \x3d goog.iter.toIterator(iterable);\n\n  while (count-- \x3e 0) {\n    goog.iter.nextOrValue(iterator, null);\n  }\n\n  return iterator;\n};\n\n\n/**\n * Creates an iterator that returns a range of elements from an iterable.\n * Similar to {@see goog.array#slice} but does not support negative indexes.\n * @param {!goog.iter.Iterator\x3cVALUE\x3e|!goog.iter.Iterable} iterable The\n *     iterable to slice.\n * @param {number} start  The index of the first element to return.\n * @param {number\x3d} opt_end  The index after the last element to return. If\n *     defined, must be greater than or equal to `start`.\n * @return {!goog.iter.Iterator\x3cVALUE\x3e} A new iterator containing a slice of\n *     the original.\n * @template VALUE\n */\ngoog.iter.slice \x3d function(iterable, start, opt_end) {\n  goog.asserts.assert(goog.math.isInt(start) \x26\x26 start \x3e\x3d 0);\n\n  var iterator \x3d goog.iter.consume(iterable, start);\n\n  if (goog.isNumber(opt_end)) {\n    goog.asserts.assert(goog.math.isInt(opt_end) \x26\x26 opt_end \x3e\x3d start);\n    iterator \x3d goog.iter.limit(iterator, opt_end - start /* limitSize */);\n  }\n\n  return iterator;\n};\n\n\n/**\n * Checks an array for duplicate elements.\n * @param {?IArrayLike\x3cVALUE\x3e} arr The array to check for\n *     duplicates.\n * @return {boolean} True, if the array contains duplicates, false otherwise.\n * @private\n * @template VALUE\n */\n// TODO(dlindquist): Consider moving this into goog.array as a public function.\ngoog.iter.hasDuplicates_ \x3d function(arr) {\n  var deduped \x3d [];\n  goog.array.removeDuplicates(arr, deduped);\n  return arr.length !\x3d deduped.length;\n};\n\n\n/**\n * Creates an iterator that returns permutations of elements in\n * `iterable`.\n *\n * Permutations are obtained by taking the Cartesian product of\n * `opt_length` iterables and filtering out those with repeated\n * elements. For example, the permutations of {@code [1,2,3]} are\n * {@code [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]}.\n * @see http://docs.python.org/2/library/itertools.html#itertools.permutations\n * @param {!goog.iter.Iterator\x3cVALUE\x3e|!goog.iter.Iterable} iterable The\n *     iterable from which to generate permutations.\n * @param {number\x3d} opt_length Length of each permutation. If omitted, defaults\n *     to the length of `iterable`.\n * @return {!goog.iter.Iterator\x3c!Array\x3cVALUE\x3e\x3e} A new iterator containing the\n *     permutations of `iterable`.\n * @template VALUE\n */\ngoog.iter.permutations \x3d function(iterable, opt_length) {\n  var elements \x3d goog.iter.toArray(iterable);\n  var length \x3d goog.isNumber(opt_length) ? opt_length : elements.length;\n\n  var sets \x3d goog.array.repeat(elements, length);\n  var product \x3d goog.iter.product.apply(undefined, sets);\n\n  return goog.iter.filter(\n      product, function(arr) { return !goog.iter.hasDuplicates_(arr); });\n};\n\n\n/**\n * Creates an iterator that returns combinations of elements from\n * `iterable`.\n *\n * Combinations are obtained by taking the {@see goog.iter#permutations} of\n * `iterable` and filtering those whose elements appear in the order they\n * are encountered in `iterable`. For example, the 3-length combinations\n * of {@code [0,1,2,3]} are {@code [[0,1,2], [0,1,3], [0,2,3], [1,2,3]]}.\n * @see http://docs.python.org/2/library/itertools.html#itertools.combinations\n * @param {!goog.iter.Iterator\x3cVALUE\x3e|!goog.iter.Iterable} iterable The\n *     iterable from which to generate combinations.\n * @param {number} length The length of each combination.\n * @return {!goog.iter.Iterator\x3c!Array\x3cVALUE\x3e\x3e} A new iterator containing\n *     combinations from the `iterable`.\n * @template VALUE\n */\ngoog.iter.combinations \x3d function(iterable, length) {\n  var elements \x3d goog.iter.toArray(iterable);\n  var indexes \x3d goog.iter.range(elements.length);\n  var indexIterator \x3d goog.iter.permutations(indexes, length);\n  // sortedIndexIterator will now give arrays of with the given length that\n  // indicate what indexes into \x22elements\x22 should be returned on each iteration.\n  var sortedIndexIterator \x3d goog.iter.filter(\n      indexIterator, function(arr) { return goog.array.isSorted(arr); });\n\n  var iter \x3d new goog.iter.Iterator();\n\n  function getIndexFromElements(index) { return elements[index]; }\n\n  iter.next \x3d function() {\n    return goog.array.map(sortedIndexIterator.next(), getIndexFromElements);\n  };\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that returns combinations of elements from\n * `iterable`, with repeated elements possible.\n *\n * Combinations are obtained by taking the Cartesian product of `length`\n * iterables and filtering those whose elements appear in the order they are\n * encountered in `iterable`. For example, the 2-length combinations of\n * {@code [1,2,3]} are {@code [[1,1], [1,2], [1,3], [2,2], [2,3], [3,3]]}.\n * @see https://goo.gl/C0yXe4\n * @see https://goo.gl/djOCsk\n * @param {!goog.iter.Iterator\x3cVALUE\x3e|!goog.iter.Iterable} iterable The\n *     iterable to combine.\n * @param {number} length The length of each combination.\n * @return {!goog.iter.Iterator\x3c!Array\x3cVALUE\x3e\x3e} A new iterator containing\n *     combinations from the `iterable`.\n * @template VALUE\n */\ngoog.iter.combinationsWithReplacement \x3d function(iterable, length) {\n  var elements \x3d goog.iter.toArray(iterable);\n  var indexes \x3d goog.array.range(elements.length);\n  var sets \x3d goog.array.repeat(indexes, length);\n  var indexIterator \x3d goog.iter.product.apply(undefined, sets);\n  // sortedIndexIterator will now give arrays of with the given length that\n  // indicate what indexes into \x22elements\x22 should be returned on each iteration.\n  var sortedIndexIterator \x3d goog.iter.filter(\n      indexIterator, function(arr) { return goog.array.isSorted(arr); });\n\n  var iter \x3d new goog.iter.Iterator();\n\n  function getIndexFromElements(index) { return elements[index]; }\n\n  iter.next \x3d function() {\n    return goog.array.map(\n        /** @type {!Array\x3cnumber\x3e} */\n        (sortedIndexIterator.next()), getIndexFromElements);\n  };\n\n  return iter;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/iter/iter.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/storage/mechanism/errorcode.js";
eval("// Copyright 2011 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Defines error codes to be thrown by storage mechanisms.\n *\n * @author azzie@google.com (Marcin Marszalek)\n */\n\ngoog.provide(\x27goog.storage.mechanism.ErrorCode\x27);\n\n\n/**\n * Errors thrown by storage mechanisms.\n * @enum {string}\n */\ngoog.storage.mechanism.ErrorCode \x3d {\n  INVALID_VALUE: \x27Storage mechanism: Invalid value was encountered\x27,\n  QUOTA_EXCEEDED: \x27Storage mechanism: Quota exceeded\x27,\n  STORAGE_DISABLED: \x27Storage mechanism: Storage disabled\x27\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/storage/mechanism/errorcode.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/storage/mechanism/mechanism.js";
eval("// Copyright 2011 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Abstract interface for storing and retrieving data using\n * some persistence mechanism.\n *\n * @author azzie@google.com (Marcin Marszalek)\n */\n\ngoog.provide(\x27goog.storage.mechanism.Mechanism\x27);\n\n\n\n/**\n * Basic interface for all storage mechanisms.\n *\n * @constructor\n * @struct\n */\ngoog.storage.mechanism.Mechanism \x3d function() {};\n\n\n/**\n * Set a value for a key.\n *\n * @param {string} key The key to set.\n * @param {string} value The string to save.\n */\ngoog.storage.mechanism.Mechanism.prototype.set \x3d goog.abstractMethod;\n\n\n/**\n * Get the value stored under a key.\n *\n * @param {string} key The key to get.\n * @return {?string} The corresponding value, null if not found.\n */\ngoog.storage.mechanism.Mechanism.prototype.get \x3d goog.abstractMethod;\n\n\n/**\n * Remove a key and its value.\n *\n * @param {string} key The key to remove.\n */\ngoog.storage.mechanism.Mechanism.prototype.remove \x3d goog.abstractMethod;\n\n//# sourceURL\x3dhttps://qs/javascript/closure/storage/mechanism/mechanism.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/storage/mechanism/iterablemechanism.js";
eval("// Copyright 2011 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Interface for storing, retieving and scanning data using some\n * persistence mechanism.\n *\n * @author azzie@google.com (Marcin Marszalek)\n */\n\ngoog.provide(\x27goog.storage.mechanism.IterableMechanism\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.iter\x27);\ngoog.require(\x27goog.storage.mechanism.Mechanism\x27);\n\n\n\n/**\n * Interface for all iterable storage mechanisms.\n *\n * @constructor\n * @struct\n * @extends {goog.storage.mechanism.Mechanism}\n */\ngoog.storage.mechanism.IterableMechanism \x3d function() {\n  goog.storage.mechanism.IterableMechanism.base(this, \x27constructor\x27);\n};\ngoog.inherits(\n    goog.storage.mechanism.IterableMechanism, goog.storage.mechanism.Mechanism);\n\n\n/**\n * Get the number of stored key-value pairs.\n *\n * Could be overridden in a subclass, as the default implementation is not very\n * efficient - it iterates over all keys.\n *\n * @return {number} Number of stored elements.\n */\ngoog.storage.mechanism.IterableMechanism.prototype.getCount \x3d function() {\n  var count \x3d 0;\n  goog.iter.forEach(this.__iterator__(true), function(key) {\n    goog.asserts.assertString(key);\n    count++;\n  });\n  return count;\n};\n\n\n/**\n * Returns an iterator that iterates over the elements in the storage. Will\n * throw goog.iter.StopIteration after the last element.\n *\n * @param {boolean\x3d} opt_keys True to iterate over the keys. False to iterate\n *     over the values.  The default value is false.\n * @return {!goog.iter.Iterator} The iterator.\n */\ngoog.storage.mechanism.IterableMechanism.prototype.__iterator__ \x3d\n    goog.abstractMethod;\n\n\n/**\n * Remove all key-value pairs.\n *\n * Could be overridden in a subclass, as the default implementation is not very\n * efficient - it iterates over all keys.\n */\ngoog.storage.mechanism.IterableMechanism.prototype.clear \x3d function() {\n  // This converts the keys to an array first because otherwise\n  // removing while iterating results in unstable ordering of keys and\n  // can skip keys or terminate early.\n  var keys \x3d goog.iter.toArray(this.__iterator__(true));\n  var selfObj \x3d this;\n  goog.array.forEach(keys, function(key) { selfObj.remove(key); });\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/storage/mechanism/iterablemechanism.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/storage/mechanism/html5webstorage.js";
eval("// Copyright 2011 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Base class that implements functionality common\n * across both session and local web storage mechanisms.\n *\n * @author azzie@google.com (Marcin Marszalek)\n * @author czacharias@google.com (Chris Zacharias)\n * @author rakar@google.com (Rajesh Jagannathan)\n */\n\ngoog.provide(\x27goog.storage.mechanism.HTML5WebStorage\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.iter.Iterator\x27);\ngoog.require(\x27goog.iter.StopIteration\x27);\ngoog.require(\x27goog.storage.mechanism.ErrorCode\x27);\ngoog.require(\x27goog.storage.mechanism.IterableMechanism\x27);\n\n\n\n/**\n * Provides a storage mechanism that uses HTML5 Web storage.\n *\n * @param {Storage} storage The Web storage object.\n * @constructor\n * @struct\n * @extends {goog.storage.mechanism.IterableMechanism}\n */\ngoog.storage.mechanism.HTML5WebStorage \x3d function(storage) {\n  goog.storage.mechanism.HTML5WebStorage.base(this, \x27constructor\x27);\n\n  /**\n   * The web storage object (window.localStorage or window.sessionStorage).\n   * @private {Storage}\n   */\n  this.storage_ \x3d storage;\n};\ngoog.inherits(\n    goog.storage.mechanism.HTML5WebStorage,\n    goog.storage.mechanism.IterableMechanism);\n\n\n/**\n * The key used to check if the storage instance is available.\n * @private {string}\n * @const\n */\ngoog.storage.mechanism.HTML5WebStorage.STORAGE_AVAILABLE_KEY_ \x3d \x27__sak\x27;\n\n\n/**\n * Determines whether or not the mechanism is available.\n * It works only if the provided web storage object exists and is enabled.\n *\n * @return {boolean} True if the mechanism is available.\n */\ngoog.storage.mechanism.HTML5WebStorage.prototype.isAvailable \x3d function() {\n  if (!this.storage_) {\n    return false;\n  }\n\n  try {\n    // setItem will throw an exception if we cannot access WebStorage (e.g.,\n    // Safari in private mode).\n    this.storage_.setItem(\n        goog.storage.mechanism.HTML5WebStorage.STORAGE_AVAILABLE_KEY_, \x271\x27);\n    this.storage_.removeItem(\n        goog.storage.mechanism.HTML5WebStorage.STORAGE_AVAILABLE_KEY_);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n\n/** @override */\ngoog.storage.mechanism.HTML5WebStorage.prototype.set \x3d function(key, value) {\n\n  try {\n    // May throw an exception if storage quota is exceeded.\n    this.storage_.setItem(key, value);\n  } catch (e) {\n    // In Safari Private mode, conforming to the W3C spec, invoking\n    // Storage.prototype.setItem will allways throw a QUOTA_EXCEEDED_ERR\n    // exception.  Since it\x27s impossible to verify if we\x27re in private browsing\n    // mode, we throw a different exception if the storage is empty.\n    if (this.storage_.length \x3d\x3d 0) {\n      throw goog.storage.mechanism.ErrorCode.STORAGE_DISABLED;\n    } else {\n      throw goog.storage.mechanism.ErrorCode.QUOTA_EXCEEDED;\n    }\n  }\n};\n\n\n/** @override */\ngoog.storage.mechanism.HTML5WebStorage.prototype.get \x3d function(key) {\n  // According to W3C specs, values can be of any type. Since we only save\n  // strings, any other type is a storage error. If we returned nulls for\n  // such keys, i.e., treated them as non-existent, this would lead to a\n  // paradox where a key exists, but it does not when it is retrieved.\n  // http://www.w3.org/TR/2009/WD-webstorage-20091029/#the-storage-interface\n  var value \x3d this.storage_.getItem(key);\n  if (!goog.isString(value) \x26\x26 !goog.isNull(value)) {\n    throw goog.storage.mechanism.ErrorCode.INVALID_VALUE;\n  }\n  return value;\n};\n\n\n/** @override */\ngoog.storage.mechanism.HTML5WebStorage.prototype.remove \x3d function(key) {\n  this.storage_.removeItem(key);\n};\n\n\n/** @override */\ngoog.storage.mechanism.HTML5WebStorage.prototype.getCount \x3d function() {\n  return this.storage_.length;\n};\n\n\n/** @override */\ngoog.storage.mechanism.HTML5WebStorage.prototype.__iterator__ \x3d function(\n    opt_keys) {\n  var i \x3d 0;\n  var storage \x3d this.storage_;\n  var newIter \x3d new goog.iter.Iterator();\n  newIter.next \x3d function() {\n    if (i \x3e\x3d storage.length) {\n      throw goog.iter.StopIteration;\n    }\n    var key \x3d goog.asserts.assertString(storage.key(i++));\n    if (opt_keys) {\n      return key;\n    }\n    var value \x3d storage.getItem(key);\n    // The value must exist and be a string, otherwise it is a storage error.\n    if (!goog.isString(value)) {\n      throw goog.storage.mechanism.ErrorCode.INVALID_VALUE;\n    }\n    return value;\n  };\n  return newIter;\n};\n\n\n/** @override */\ngoog.storage.mechanism.HTML5WebStorage.prototype.clear \x3d function() {\n  this.storage_.clear();\n};\n\n\n/**\n * Gets the key for a given key index. If an index outside of\n * [0..this.getCount()) is specified, this function returns null.\n * @param {number} index A key index.\n * @return {?string} A storage key, or null if the specified index is out of\n *     range.\n */\ngoog.storage.mechanism.HTML5WebStorage.prototype.key \x3d function(index) {\n  return this.storage_.key(index);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/storage/mechanism/html5webstorage.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/storage/mechanism/html5sessionstorage.js";
eval("// Copyright 2011 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Provides data persistence using HTML5 session storage\n * mechanism. Session storage must be available under window.sessionStorage,\n * see: http://www.w3.org/TR/webstorage/#the-sessionstorage-attribute.\n *\n * @author rakar@google.com (Rajesh Jagannathan)\n */\n\ngoog.provide(\x27goog.storage.mechanism.HTML5SessionStorage\x27);\n\ngoog.require(\x27goog.storage.mechanism.HTML5WebStorage\x27);\n\n\n\n/**\n * Provides a storage mechanism that uses HTML5 session storage.\n *\n * @constructor\n * @struct\n * @extends {goog.storage.mechanism.HTML5WebStorage}\n */\ngoog.storage.mechanism.HTML5SessionStorage \x3d function() {\n  var storage \x3d null;\n\n  try {\n    // May throw an exception in cases where the session storage object is\n    // visible but access to it is disabled. For example, accessing the file\n    // in local mode in Firefox throws \x27Operation is not supported\x27 exception.\n    storage \x3d window.sessionStorage || null;\n  } catch (e) {\n  }\n  goog.storage.mechanism.HTML5SessionStorage.base(this, \x27constructor\x27, storage);\n};\ngoog.inherits(\n    goog.storage.mechanism.HTML5SessionStorage,\n    goog.storage.mechanism.HTML5WebStorage);\n\n//# sourceURL\x3dhttps://qs/javascript/closure/storage/mechanism/html5sessionstorage.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/module_interface/module_interface.js";
eval("// Copyright 2010 Google Inc. All Rights Reserved.\n\n/**\n * @fileoverview Module Interface client side implementation. For usage\n * information see http://go/gwsmoduleinterface.\n *\n * @author hurst@google.com (Joey Hurst)\n *\n * NOTE: As of 7/13/2017, usage of the moduleInterface should be restricted to\n * framework code that does not contain visible UI only. All new feature code\n * should use a Wiz controller. go/gws-wiz\n */\n\ngoog.provide(\x27gws.moduleInterface\x27);\ngoog.provide(\x27gws.moduleInterface.EventType\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.json.hybrid\x27);\ngoog.require(\x27goog.log\x27);\ngoog.require(\x27goog.storage.mechanism.HTML5SessionStorage\x27);\ngoog.require(\x27goog.string\x27);\ngoog.require(\x27gws.debug.telemetry\x27);\ngoog.require(\x27gws.debug.telemetry.Beacon\x27);\ngoog.require(\x27gws.error\x27);\ngoog.require(\x27search.build\x27);\n\n\n/**\n * The various events for which the module interface fires events for.\n * @enum {string}\n */\ngws.moduleInterface.EventType \x3d {\n  /**\n   * Invoked after Delayed Immediate and xjs code on each page transition\n   * (normal or JESR).\n   */\n  INIT: \x27init\x27,\n  /**\n   * Invoked after init.\n   */\n  HISTORY: \x27history\x27,\n  /**\n   * Not an actual event, but used to mark modules as always activated. These\n   * scripts\x27 callbacks are invoked regarless of the presence of a configuration\n   * object in google.pmc.\n   */\n  ALWAYS_ACTIVATED_SCRIPT_: \x27_e\x27\n};\n\n\n/**\n * Module interface logger instance.\n * @private {?goog.log.Logger}\n */\ngws.moduleInterface.logger_ \x3d goog.log.getLogger(\x27gws.moduleInterface\x27);\n\n\n/**\n * @typedef {!Object\x3cgws.moduleInterface.EventType, function(!Object)\x3e}\n * @private\n */\ngws.moduleInterface.ModuleConfig_;\n\n\n/**\n * Map from Pinto module ID to module listener maps.\n * @type {!Object\x3cstring, gws.moduleInterface.ModuleConfig_\x3e}\n * @private\n */\ngws.moduleInterface.moduleIdToListeners_ \x3d {};\n\n\n/**\n * Map from Pinto module ID to statistics.\n * @typedef {!Object\x3cstring, number\x3e}\n * @private\n */\ngws.moduleInterface.ModuleStatistics_;\n\n\n/**\n * List of script IDs in registration order.\n * @private {!Object\x3cgws.moduleInterface.EventType, !Array\x3cstring\x3e\x3e}\n */\ngws.moduleInterface.scriptRegistrationOrder_ \x3d {\n  [gws.moduleInterface.EventType.INIT]: [],\n  [gws.moduleInterface.EventType.HISTORY]: [],\n  [gws.moduleInterface.EventType.ALWAYS_ACTIVATED_SCRIPT_]: []\n};\n\n\n/**\n * Simple boolean that is true if the primary scripts have been initialized.\n * If we end up with a more complicated event system, we should consider making\n * this handle multiple states rather than a boolean.\n * @type {boolean}\n * @private\n */\ngws.moduleInterface.initialized_ \x3d false;\n\n\n/**\n * WebStorage key for module interface session history.\n * @type {string}\n * @const\n * @private\n */\ngws.moduleInterface.STORAGE_KEY_PREFIX_ \x3d \x27web-mh\x27;\n\n\n/**\n * Storage for module interface session history.\n * @type {goog.storage.mechanism.HTML5SessionStorage}\n * @private\n */\ngws.moduleInterface.storage_;\n\n\n/**\n * Init callbacks from late loaded modules.\n * @private {!Array\x3cfunction()\x3e}\n */\ngws.moduleInterface.pendingInits_ \x3d [];\n\n\n/**\n * @return {boolean} Whether the module interface is initialized.\n */\ngws.moduleInterface.isInitialized \x3d function() {\n  return gws.moduleInterface.initialized_;\n};\n\n\n/**\n * Registers module interface event listeners.  Should be invoked at the end of\n * a Pinto module.\n *\n * All script initialization, including event binding, must take place within\n * the init method.\n *\n * @param {string} moduleId ID of the registering Pinto module.\n * @param {gws.moduleInterface.ModuleConfig_} moduleListeners Map of event\n *     listener functions.\n * @deprecated Use a Wiz controller instead. go/gws-wiz\n */\ngws.moduleInterface.register \x3d function(moduleId, moduleListeners) {\n  for (var eventName in moduleListeners) {\n    goog.log.info(\n        gws.moduleInterface.logger_,\n        \x27Registering module interface callbacks for module \x27 + moduleId +\n            \x27 for event \x27 + eventName);\n    // When iterating over keys in an object, the type is provided as string,\n    // not EventType. So we cast back to an EventType to please the compiler.\n    gws.moduleInterface\n        .scriptRegistrationOrder_[\n            /** @type {!gws.moduleInterface.EventType} */ (eventName)]\n        .push(moduleId);\n  }\n  gws.moduleInterface.moduleIdToListeners_[moduleId] \x3d moduleListeners;\n  if (gws.moduleInterface.initialized_) {\n    goog.log.info(\n        gws.moduleInterface.logger_,\n        \x27Queueing init event for module \x27 + moduleId);\n    // Late loaded modules will call register after initialized_ is true, so we\n    // want to call init on them *after* the current late /xjs request is done\n    // parsing. See gws.moduleManager.loadAll for where we execute these.\n    var init \x3d goog.partial(\n        gws.moduleInterface.fireOneEvent_, gws.moduleInterface.EventType.INIT,\n        moduleId);\n    gws.moduleInterface.pendingInits_.push(init);\n  }\n};\n\n\n/**\n * Executes pending init functions from late loaded modules.\n */\ngws.moduleInterface.runPendingInits \x3d function() {\n  goog.log.info(\n      gws.moduleInterface.logger_,\n      \x27Firing init for late loaded modules: \x27 +\n          gws.moduleInterface.pendingInits_.length + \x27 functions to call\x27);\n  goog.array.forEach(gws.moduleInterface.pendingInits_, function(init) {\n    init();\n  });\n  gws.moduleInterface.clearPendingInits();\n};\n\n\n/**\n * Clears queued init functions. This is called during a JESR transition so we\n * don\x27t try to run queued init functions from the previous page.\n * NOTE(martone): this should *only* be called from JESR. If you find yourself\n * needing to use this, you\x27re probably Doing It Wrong.\n */\ngws.moduleInterface.clearPendingInits \x3d function() {\n  gws.moduleInterface.pendingInits_ \x3d [];\n};\n\n\n/**\n * Registers module interface event listeners for scripts that should be\n * activated regardless of the presence of a Pinto module configuration JSON\n * object in the page.\n *\n * This is most commonly used with scripts that have no matching\n * GwsScriptModuleExtension or are manually late loaded.\n *\n * Unlike `register`, callback functions passed to\n * registerAlwaysActivatedScript may receive a null config object.\n *\n * @param {string} moduleId ID of the registering Pinto module.\n * @param {gws.moduleInterface.ModuleConfig_} moduleListeners Map of event\n *     listener functions.\n * @deprecated Use a Wiz controller instead. go/gws-wiz\n */\ngws.moduleInterface.registerAlwaysActivatedScript \x3d function(\n    moduleId, moduleListeners) {\n  moduleListeners \x3d moduleListeners || {};\n  moduleListeners[gws.moduleInterface.EventType.ALWAYS_ACTIVATED_SCRIPT_] \x3d\n      goog.nullFunction;\n  gws.moduleInterface.register(moduleId, moduleListeners);\n};\n\n\n/**\n * Calculates an obfuscated key for the passed mod name.\n *\n * Unlike module IDs, which are publicly available and can therefore be used\n * directly with module interface methods, mod names are not exposed to the\n * client and therefore may contain proprietary information (project code names,\n * etc.).  We therefore use an obfuscated hash of mod names for module interface\n * keys.\n *\n * When compiled, invocations of this function are replaced directly with the\n * key via JSCompiler\x27s \x27idGenerator {stable}\x27 annotation, keeping mod names\n * out of production JS.\n * See https://github.com/google/closure-compiler/wiki/Id-Generator-Annotations\n * for details.\n *\n * @idGenerator {stable}\n * @param {string} modName The name of the mod.\n * @return {string} An obfuscated key for the passed mod, suitable for use with\n *     the module interface.\n */\ngws.moduleInterface.getModKey \x3d function(modName) {\n  var hashCode \x3d goog.string.hashCode(modName);\n  // Base64 encode the hashCode.  This could ideally be done with\n  // goog.crypt.base64, but that library has a bunch of static code that will\n  // not be compiled out when getModKey is compiled out via stableIdGenerator.\n  var base64Map \x3d\n      \x27ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\x27;\n  var s \x3d \x27\x27;\n  for (var i \x3d 0; i \x3c 5; ++i) {\n    s +\x3d base64Map.charAt((hashCode \x3e\x3e (26 - i * 6)) \x26 0x3f);\n  }\n  s +\x3d base64Map.charAt((hashCode \x3c\x3c 4) \x26 0x3f);\n  return s;\n};\n\n\n/**\n * Fires all registered event listeners. Listeners from primary scripts are\n * called before calling any registered secondary scripts.\n * @param {gws.moduleInterface.EventType} eventName The Module Interface event\n *     to fire.\n * @private\n */\ngws.moduleInterface.moduleEventDelegator_ \x3d function(eventName) {\n  // Abort if we can\x27t find the module configuration.\n  if (!google.pmc) {\n    goog.log.error(\n        gws.moduleInterface.logger_,\n        \x27No google.pmc, bailing early from event \x27 + eventName);\n    return;\n  }\n\n  goog.log.info(gws.moduleInterface.logger_, \x27Firing \x27 + eventName + \x27 event.\x27);\n  gws.moduleInterface.fireAllEvents_(eventName);\n\n  // Do not consider the module interface initialized until we fire the init\n  // event. Once this is set, any further calls to gws.moduleInterface.register\n  // will attempt to search through google.pmc for the module\x27s config and then\n  // fire the init event for that module - this allows us to initialize late\n  // loaded modules after they\x27ve been downloaded and call register.\n  if (eventName \x3d\x3d gws.moduleInterface.EventType.INIT) {\n    gws.moduleInterface.initialized_ \x3d true;\n  }\n};\n\n\n/**\n * Fires all registered event listeners for the given Module Interface event.\n * @param {gws.moduleInterface.EventType} eventName The Module Interface event\n *     to fire.\n * @private\n */\ngws.moduleInterface.fireAllEvents_ \x3d function(eventName) {\n  goog.array.forEach(\n      gws.moduleInterface.scriptRegistrationOrder_[eventName],\n      function(moduleId) {\n        gws.moduleInterface.fireOneEvent_(eventName, moduleId);\n      });\n};\n\n\n/**\n * Fires the event listener for the given module.\n * @param {gws.moduleInterface.EventType} eventName The Module Interface\n *     event to fire.\n * @param {string} moduleId The ID of the module to fire an event for.\n * @private\n */\ngws.moduleInterface.fireOneEvent_ \x3d function(eventName, moduleId) {\n  try {\n    var listeners \x3d gws.moduleInterface.moduleIdToListeners_[moduleId];\n    if (listeners) {\n      var eventHandler \x3d listeners[eventName];\n      var config \x3d google.pmc[moduleId];\n\n      if (eventHandler \x26\x26 !config \x26\x26\n          !gws.moduleInterface.isAlwaysActivatedScript_(moduleId) \x26\x26\n          (Math.random() \x3c .001) /* 0.1% sample rate */) {\n        // Log Pinto modules that are enabled but have null/missing configs\n        // (excluding always activated scripts), as this should not happen.\n        // With b/65199936, empty configs will not be sent anymore to the\n        // client, and the event handler below will always be triggered on\n        // enabled modules.\n        // TODO(b/65199936): Delete this log, once all such modules have been\n        // correctly enabled, i.e. this log does not get written anymore.\n        google.log(\x27nullpcfg\x27, \x27\x26m\x3d\x27 + moduleId + \x27\x26e\x3d\x27 + eventName);\n      }\n\n      // If the config is missing and the script wasn\x27t registered via\n      // registerAlwaysActivatedScript (determined by the presence of\n      // ALWAYS_ACTIVATED_SCRIPT_), don\x27t call the event. This allows us to\n      // handle the case where we\x27ve loaded a module on a base page and do a\n      // JESR transition to one where it\x27s not enabled.\n      if (eventHandler \x26\x26\n          (config || gws.moduleInterface.isAlwaysActivatedScript_(moduleId))) {\n        var telemetryBeacon \x3d new gws.debug.telemetry.Beacon(\n            \x27pinto_module_\x27 + eventName, moduleId);\n        gws.debug.telemetry.beginInteraction(telemetryBeacon);\n        goog.log.fine(\n            gws.moduleInterface.logger_,\n            \x27Firing \x27 + eventName + \x27 on \x27 + moduleId);\n        // TODO(hurst): Augment config object with global configuration\n        // properties and Mendel-defined configuration properties.\n        eventHandler(/** @type {!Object} */ (config));\n        gws.debug.telemetry.endInteraction(telemetryBeacon);\n      }\n    }\n  } catch (e) {\n    goog.log.error(\n        gws.moduleInterface.logger_,\n        \x27Error in module interface handler for \x27 + eventName + \x27 on \x27 +\n            moduleId + \x27. \x27 + e.toString());\n    gws.error.log(e, {\x27cause\x27: \x27m\x27 + eventName, \x27mid\x27: moduleId});\n  }\n};\n\n\n/**\n * @type {string} The page state string.\n * @private\n */\ngws.moduleInterface.pageState_;\n\n\n/**\n * Loads the hash table up from the form.\n * @param {string} pageState The page state, used as part of the key to cache.\n * @return {Object} The stored history state of null.\n * @private\n */\ngws.moduleInterface.loadCache_ \x3d function(pageState) {\n  gws.moduleInterface.historyCacheValue_ \x3d {};\n  try {\n    var storedValue \x3d gws.moduleInterface.storage_.get(\n        gws.moduleInterface.STORAGE_KEY_PREFIX_ + pageState);\n    if (storedValue) {\n      return gws.moduleInterface.parseJson_(storedValue);\n    }\n  } catch (e) {\n    goog.log.error(gws.moduleInterface.logger_, \x27Error in loadCache_\x27, e);\n  }\n  return null;\n};\n\n\n/**\n * Save the state into the history state.\n * @param {string} pageState The page state, used as part of the key to cache.\n * @param {!Object} state The history state to be stored.\n * @private\n */\ngws.moduleInterface.setCache_ \x3d function(pageState, state) {\n  try {\n    var serializedHistory \x3d gws.moduleInterface.serializeJson_(state);\n    if (serializedHistory) {\n      var cacheKey \x3d gws.moduleInterface.STORAGE_KEY_PREFIX_ + pageState;\n      gws.moduleInterface.storage_.set(cacheKey, serializedHistory);\n    }\n  } catch (e) {\n    goog.log.warning(gws.moduleInterface.logger_, \x27Warning in setCache\x27, e);\n  }\n};\n\n\n/**\n * Set a function to parse a JSON string.\n * @param {function(string): Object} parseFunction\n */\ngws.moduleInterface.setParseJson \x3d function(parseFunction) {\n  gws.moduleInterface.parseJson_ \x3d parseFunction;\n};\n\n\n/**\n * Function used to parse a JSON string.\n * @type {function(string): Object}\n * @private\n */\ngws.moduleInterface.parseJson_ \x3d function(json) {\n  var response \x3d goog.json.hybrid.parse(json);\n  return (response !\x3d null) ? goog.asserts.assertObject(response) : null;\n};\n\n\n/**\n * Set a function to serialize an object to a JSON string.\n * @param {function(!Object): string} serializeFunction\n */\ngws.moduleInterface.setSerializeJson \x3d function(serializeFunction) {\n  gws.moduleInterface.serializeJson_ \x3d serializeFunction;\n};\n\n\n/**\n * Function used to serialize an object to a JSON string.\n * @type {function(!Object): string}\n * @private\n */\ngws.moduleInterface.serializeJson_ \x3d goog.json.hybrid.stringify;\n\n\n/**\n * Determines whether a given script was registered through\n * gws.moduleInterface.registerAlwaysActivatedScript.\n *\n * @param {string} moduleId The Pinto module ID.\n * @return {boolean} Whether a given script is always activated.\n * @private\n */\ngws.moduleInterface.isAlwaysActivatedScript_ \x3d function(moduleId) {\n  var listeners \x3d gws.moduleInterface.moduleIdToListeners_[moduleId];\n  return Boolean(\n      listeners \x26\x26\n      listeners[gws.moduleInterface.EventType.ALWAYS_ACTIVATED_SCRIPT_]);\n};\n\n\n/**\n * Saves the state for the given module.\n *\n * @param {string} moduleId id of the module to change.\n * @param {Object} state The state value to save.\n */\ngws.moduleInterface.save \x3d function(moduleId, state) {\n  if (!gws.moduleInterface.storage_) {\n    goog.log.error(\n        gws.moduleInterface.logger_, \x27No storage_, bailing early from save\x27);\n    return;\n  }\n  // Note(kylescholz): Mobile HP doesn\x27t have a proper pageState set, so module\n  // history is incorrectly applied to subsequent page loads. Don\x27t save module\n  // history when pageState is empty.\n  if (gws.moduleInterface.pageState_ \x3d\x3d\x3d \x27\x27) {\n    goog.log.error(\n        gws.moduleInterface.logger_,\n        \x27pageState_ is empty, bailing early from save\x27);\n    return;\n  }\n  if (google.pmc[moduleId] ||\n      gws.moduleInterface.isAlwaysActivatedScript_(moduleId)) {\n    google.pmc[moduleId] \x3d state;\n    gws.moduleInterface.setCache_(gws.moduleInterface.pageState_, google.pmc);\n  }\n};\n\n\n/**\n * Perform the steps to initialize registered module interfaces.\n */\ngws.moduleInterface.init \x3d function() {\n  gws.moduleInterface.moduleEventDelegator_(gws.moduleInterface.EventType.INIT);\n  gws.moduleInterface.initHistory_();\n  gws.moduleInterface.moduleEventDelegator_(\n      gws.moduleInterface.EventType.HISTORY);\n};\n\n\n/**\n * Loads the config for the current page.\n * @private\n */\ngws.moduleInterface.initHistory_ \x3d function() {\n  goog.log.info(gws.moduleInterface.logger_, \x27initHistory\x27);\n  gws.moduleInterface.pageState_ \x3d google.kEI;\n  gws.moduleInterface.storage_ \x3d\n      new goog.storage.mechanism.HTML5SessionStorage();\n  var mc \x3d gws.moduleInterface.loadCache_(gws.moduleInterface.pageState_);\n  if (mc) {\n    goog.log.fine(gws.moduleInterface.logger_, \x27Restored saved history cache.\x27);\n    google.pmc \x3d mc;\n  }\n};\n\n/**\n * Some GWS pages don\x27t use the deferred module to initiliaze XJS, but instead\n * wrapp a call to google.med(\x27init\x27) in window.onload. This function is here\n * to support that use case.\n * TODO(cgagliardi): Remove this once all uses of google.med are gone.\n * @param {string} type\n * @private\n */\ngws.moduleInterface.legacyMed_ \x3d function(type) {\n  if (type \x3d\x3d \x27init\x27) {\n    gws.moduleInterface.init();\n  }\n};\n\n// If gws.moduleInterface is being used for inline JS, then we shouldn\x27t export\n// global symbols or it may override the XJS ones.\nif (!search.build.INLINE) {\n  goog.exportSymbol(\x27google.med\x27, gws.moduleInterface.legacyMed_);\n  goog.exportSymbol(\n      \x27google.raas\x27, gws.moduleInterface.registerAlwaysActivatedScript);\n}\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/module_interface/module_interface.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/fava/modules/scsjsurl.js";
eval("/**\n * @fileoverview Definition of the ScsJsUrl class for parsing and\n * constructing Javascript URLs for the Static Content Service.\n *\n * @author meheff@google.com (Mark Heffernan)\n */\n\ngoog.provide(\x27fava.modules.ScsJsUrl\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.object\x27);\ngoog.require(\x27goog.uri.utils\x27);\ngoog.require(\x27goog.uri.utils.ComponentIndex\x27);\n\n\n\n/**\n * Definition of ScsJsUrl class.\n * @constructor\n * @struct\n * @final\n */\nfava.modules.ScsJsUrl \x3d function() {\n  /**\n   * Keys and values of the URL path components.\n   * @private {!Object\x3cstring, string\x3e}\n   */\n  this.keys_ \x3d {};\n\n  /**\n   * URL prefix leading up to but not including the first\n   * key/value component.  For example, for\n   * https://mail.google.com/_/scs/mail-static/_/js/k\x3dgmail.main....\n   * the URL prefix is https://mail.google.com/_/scs/mail-static/_/js/.\n   * @private {string}\n   */\n  this.urlPrefix_ \x3d \x27\x27;\n};\n// TODO(malteubl): Rename to fava.modules.ScsUrl as also CSS urls are handled.\n\n\n/**\n * Definition of URL component keys.  Server-side these are defined in\n * google3/apps/framework/modulesets/assembler/url.cc.\n * @enum {string}\n * @private\n */\nfava.modules.ScsJsUrl.Keys_ \x3d {\n  ROW_KEY: \x27k\x27,\n  CSS_ROW_KEY: \x27ck\x27,\n  MODULES: \x27m\x27,\n  EXCLUDED_MODULES: \x27exm\x27,\n  EXCLUDED_CSS_MODULES: \x27excm\x27,\n  ACTIVE_MODS: \x27am\x27,\n  RESPONSE_TYPE: \x27rt\x27,\n  INCLUDE_DEPS: \x27d\x27,\n  EXCLUDED_DEPS: \x27ed\x27,\n  SPEC_VERSION: \x27sv\x27,\n  DEOBFUSCATION_VERSION: \x27deob\x27,\n  CALLBACK: \x27cb\x27,\n  SIGNATURE: \x27rs\x27,\n  DELTA_DICTIONARY_KEY: \x27dk\x27,\n  SDCH: \x27sdch\x27\n};\n\n\n/**\n * Indices of fields within the row key.  An example row key\n * is: gmail.main.en.IO22DO8SifY.DO\n * @enum {number}\n * @private\n */\nfava.modules.ScsJsUrl.RowKeyFieldIndex_ \x3d {\n  APP_NAME: 0,\n  MODULE_SET: 1,\n  LANGUAGE: 2,\n  VERSION_HASH: 3,\n  COMPILE_MODE: 4\n};\n\n\n/** @define {string} Prefix for cb-style callback names. */\ngoog.define(\x27fava.modules.ScsJsUrl.CALLBACK_PREFIX\x27, \x27loaded_\x27);\n\n\n/** @type {!RegExp} Regex for checking the callback name is valid. */\nfava.modules.ScsJsUrl.IS_VALID_CALLBACK_REGEX \x3d\n    new RegExp(\x27^\x27 + fava.modules.ScsJsUrl.CALLBACK_PREFIX + \x27\\\\d+$\x27);\n\n\n/**\n * @return {string} The URL as a string.\n * @override\n */\nfava.modules.ScsJsUrl.prototype.toString \x3d function() {\n  var components \x3d [];\n\n  goog.asserts.assert(\n      goog.isDef(this.keys_[fava.modules.ScsJsUrl.Keys_.ROW_KEY]),\n      \x27An SCS JS URL must have a row key.\x27);\n\n  var maybeAddComponent \x3d goog.bind(\n      function(key) {\n        if (goog.isDef(this.keys_[key])) {\n          components.push(key + \x27\x3d\x27 + this.keys_[key]);\n        }\n      },\n      this);\n\n  maybeAddComponent(fava.modules.ScsJsUrl.Keys_.SDCH);  // Must be first.\n  maybeAddComponent(fava.modules.ScsJsUrl.Keys_.ROW_KEY);\n  maybeAddComponent(fava.modules.ScsJsUrl.Keys_.CSS_ROW_KEY);\n  maybeAddComponent(fava.modules.ScsJsUrl.Keys_.MODULES);\n  maybeAddComponent(fava.modules.ScsJsUrl.Keys_.ACTIVE_MODS);\n  maybeAddComponent(fava.modules.ScsJsUrl.Keys_.RESPONSE_TYPE);\n\n  if (!(fava.modules.ScsJsUrl.Keys_.INCLUDE_DEPS in this.keys_)) {\n    this.setIncludeDeps(false);\n  }\n  maybeAddComponent(fava.modules.ScsJsUrl.Keys_.INCLUDE_DEPS);\n\n  maybeAddComponent(fava.modules.ScsJsUrl.Keys_.DELTA_DICTIONARY_KEY);\n  maybeAddComponent(fava.modules.ScsJsUrl.Keys_.EXCLUDED_MODULES);\n  maybeAddComponent(fava.modules.ScsJsUrl.Keys_.EXCLUDED_CSS_MODULES);\n\n  if (this.keys_[fava.modules.ScsJsUrl.Keys_.EXCLUDED_CSS_MODULES] ||\n      this.keys_[fava.modules.ScsJsUrl.Keys_.EXCLUDED_MODULES]) {\n    // If we\x27re excluding css or JS modules from the result, we always also\n    // want to exclude their dependencies.\n    components.push(fava.modules.ScsJsUrl.Keys_.EXCLUDED_DEPS + \x27\x3d1\x27);\n  }\n\n  maybeAddComponent(fava.modules.ScsJsUrl.Keys_.SIGNATURE);\n\n  // Always add callback at the end\n  maybeAddComponent(fava.modules.ScsJsUrl.Keys_.CALLBACK);\n  return this.urlPrefix_ + components.join(\x27/\x27);\n};\n\n\n/**\n * Returns the path component value associated with the given key.\n * @param {string} key The key of the path component.\n * @return {?string} The value associated with the key or null if not\n *     defined.\n * @private\n */\nfava.modules.ScsJsUrl.prototype.getKeyValue_ \x3d function(key) {\n  return this.keys_[key] ? this.keys_[key] : null;\n};\n\n\n/**\n * Sets the path component value associated with the given key.\n * @param {string} key Key value.\n * @param {?string} value Value to set.  If null, then clear value.\n * @private\n */\nfava.modules.ScsJsUrl.prototype.setKeyValue_ \x3d function(key, value) {\n  if (value) {\n    this.keys_[key] \x3d value;\n  } else {\n    delete this.keys_[key];\n  }\n};\n\n\n/**\n * Sets the prefix to the URL.\n * @param {string} urlPrefix Prefix to the URL.\n */\nfava.modules.ScsJsUrl.prototype.setUrlPrefix \x3d function(urlPrefix) {\n  this.urlPrefix_ \x3d urlPrefix;\n};\n\n\n/**\n * @return {string} Prefix to the URL.\n */\nfava.modules.ScsJsUrl.prototype.getUrlPrefix \x3d function() {\n  return this.urlPrefix_;\n};\n\n\n/**\n * Sets the row key.\n * @param {?string} rowKey Row key value. If null, then clear row key.\n */\nfava.modules.ScsJsUrl.prototype.setRowKey \x3d function(rowKey) {\n  this.setKeyValue_(fava.modules.ScsJsUrl.Keys_.ROW_KEY, rowKey);\n};\n\n\n/**\n * Sets the CSS row key.\n * @param {?string} cssRowKey CSS Row key value. If null, then clear row key.\n */\nfava.modules.ScsJsUrl.prototype.setCssRowKey \x3d function(cssRowKey) {\n  this.setKeyValue_(fava.modules.ScsJsUrl.Keys_.CSS_ROW_KEY, cssRowKey);\n};\n\n\n/**\n * @return {?string} The row key or null if not defined.\n */\nfava.modules.ScsJsUrl.prototype.getRowKey \x3d function() {\n  return this.getKeyValue_(fava.modules.ScsJsUrl.Keys_.ROW_KEY);\n};\n\n\n/**\n * @return {?string} The CSS row key or null if not defined.\n */\nfava.modules.ScsJsUrl.prototype.getCssRowKey \x3d function() {\n  return this.getKeyValue_(fava.modules.ScsJsUrl.Keys_.CSS_ROW_KEY);\n};\n\n\n/**\n * Returns the indicated row key field.\n * @param {fava.modules.ScsJsUrl.RowKeyFieldIndex_} index Field number.\n * @return {?string} The row key field or null if not defined.\n * @private\n */\nfava.modules.ScsJsUrl.prototype.getRowKeyField_ \x3d function(index) {\n  var rowKey \x3d this.getRowKey();\n  if (rowKey) {\n    var fields \x3d rowKey.split(\x27.\x27);\n    return (index \x3c fields.length) ? fields[index] : null;\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * @return {?string} The app name within URL row key or null if not defined.\n */\nfava.modules.ScsJsUrl.prototype.getAppName \x3d function() {\n  return this.getRowKeyField_(fava.modules.ScsJsUrl.RowKeyFieldIndex_.APP_NAME);\n};\n\n\n/**\n * @return {?string} The module set id or null if not defined.\n */\nfava.modules.ScsJsUrl.prototype.getModuleSetId \x3d function() {\n  return this.getRowKeyField_(\n      fava.modules.ScsJsUrl.RowKeyFieldIndex_.MODULE_SET);\n};\n\n\n/**\n * @return {?string} The language field value or null if not defined.\n */\nfava.modules.ScsJsUrl.prototype.getLanguage \x3d function() {\n  return this.getRowKeyField_(\n      fava.modules.ScsJsUrl.RowKeyFieldIndex_.LANGUAGE);\n};\n\n\n/**\n * @return {?string} The version hash or null if not defined.\n */\nfava.modules.ScsJsUrl.prototype.getVersionHash \x3d function() {\n  return this.getRowKeyField_(\n      fava.modules.ScsJsUrl.RowKeyFieldIndex_.VERSION_HASH);\n};\n\n\n/**\n * @return {?string} The compile mode identifier or null if not defined.\n */\nfava.modules.ScsJsUrl.prototype.getCompileMode \x3d function() {\n  return this.getRowKeyField_(\n      fava.modules.ScsJsUrl.RowKeyFieldIndex_.COMPILE_MODE);\n};\n\n\n/**\n * Set the ids of the modules to fetch.\n * @param {?Array\x3cstring\x3e} modules Array of module ids.\n */\nfava.modules.ScsJsUrl.prototype.setModuleIds \x3d function(modules) {\n  this.setKeyValue_(fava.modules.ScsJsUrl.Keys_.MODULES, modules.join(\x27,\x27));\n};\n\n\n/**\n * Set the ids of the modules to exclude.\n * @param {?Array\x3cstring\x3e} modules Array of module ids.\n */\nfava.modules.ScsJsUrl.prototype.setExcludedModuleIds \x3d function(modules) {\n  this.setKeyValue_(fava.modules.ScsJsUrl.Keys_.EXCLUDED_MODULES,\n      modules.join(\x27,\x27));\n};\n\n\n/**\n * @return {!Array\x3cstring\x3e} Array containing the module ids to exclude\n *     with the URL.\n */\nfava.modules.ScsJsUrl.prototype.getExcludedModuleIds \x3d function() {\n  var modulesStr \x3d\n      this.getKeyValue_(fava.modules.ScsJsUrl.Keys_.EXCLUDED_MODULES);\n  if (modulesStr) {\n    return modulesStr.split(\x27,\x27);\n  } else {\n    return [];\n  }\n};\n\n\n/**\n * @return {!Array\x3cstring\x3e} Array containing the module ids to fetch\n *     with the URL.\n */\nfava.modules.ScsJsUrl.prototype.getModuleIds \x3d function() {\n  var modulesStr \x3d this.getKeyValue_(fava.modules.ScsJsUrl.Keys_.MODULES);\n  if (modulesStr) {\n    return modulesStr.split(\x27,\x27);\n  } else {\n    return [];\n  }\n};\n\n\n/**\n * Set the active mods.\n * @param {?string} activeMods Active mods string.  If null, then\n *     active mods string.\n */\nfava.modules.ScsJsUrl.prototype.setActiveMods \x3d function(activeMods) {\n  this.setKeyValue_(fava.modules.ScsJsUrl.Keys_.ACTIVE_MODS, activeMods);\n};\n\n\n/**\n * @return {?string} The active mods string or null if not defined.\n */\nfava.modules.ScsJsUrl.prototype.getActiveMods \x3d function() {\n  return this.getKeyValue_(fava.modules.ScsJsUrl.Keys_.ACTIVE_MODS);\n};\n\n\n/**\n * Sets whether the Javascript should be returned as HTML.\n * @param {boolean} returnAsHtml Whether to return as HTML.\n */\nfava.modules.ScsJsUrl.prototype.setReturnAsHtml \x3d function(returnAsHtml) {\n  this.setKeyValue_(\n      fava.modules.ScsJsUrl.Keys_.RESPONSE_TYPE, returnAsHtml ? \x27h\x27 : \x27j\x27);\n};\n\n\n/**\n * @return {boolean} Whether the Javascript should be returned as HTML.\n */\nfava.modules.ScsJsUrl.prototype.getReturnAsHtml \x3d function() {\n  return this.getKeyValue_(fava.modules.ScsJsUrl.Keys_.RESPONSE_TYPE) \x3d\x3d \x27h\x27;\n};\n\n\n/**\n * Sets whether the dependent modules should be included.\n * @param {boolean} includeDeps Whether to include dependent modules.\n */\nfava.modules.ScsJsUrl.prototype.setIncludeDeps \x3d function(includeDeps) {\n  this.setKeyValue_(\n      fava.modules.ScsJsUrl.Keys_.INCLUDE_DEPS, includeDeps ? \x271\x27 : \x270\x27);\n};\n\n\n/**\n * @return {boolean} includeDeps Whether to include dependent modules.\n */\nfava.modules.ScsJsUrl.prototype.getIncludeDeps \x3d function() {\n  return this.getKeyValue_(fava.modules.ScsJsUrl.Keys_.INCLUDE_DEPS) \x3d\x3d \x271\x27;\n};\n\n\n/**\n * Sets whether to exclude the dependencies of excluded modules.\n * @param {boolean} excludeDeps Whether to exclude the dependencies of excluded\n *     modules.\n */\nfava.modules.ScsJsUrl.prototype.setExcludeDeps \x3d function(excludeDeps) {\n  this.setKeyValue_(\n      fava.modules.ScsJsUrl.Keys_.EXCLUDED_DEPS, excludeDeps ? \x271\x27 : \x270\x27);\n};\n\n\n/**\n * @return {boolean} excludeDeps Whether to exclude the dependencies of excluded\n *     modules.\n */\nfava.modules.ScsJsUrl.prototype.getExcludeDeps \x3d function() {\n  return this.getKeyValue_(fava.modules.ScsJsUrl.Keys_.EXCLUDED_DEPS) \x3d\x3d \x271\x27;\n};\n\n\n/**\n * Sets the resource signature.\n * @param {?string} signature Resource signature.  If null, then clear\n *     signature.\n */\nfava.modules.ScsJsUrl.prototype.setSignature \x3d function(signature) {\n  this.setKeyValue_(fava.modules.ScsJsUrl.Keys_.SIGNATURE, signature);\n};\n\n\n/**\n * @return {?string} signature Resource signature.\n */\nfava.modules.ScsJsUrl.prototype.getSignature \x3d function() {\n  return this.getKeyValue_(fava.modules.ScsJsUrl.Keys_.SIGNATURE);\n};\n\n\n/**\n * Sets the callback function name.\n * @param {?string} cb callback function name. Disable callback if null.\n */\nfava.modules.ScsJsUrl.prototype.setCallback \x3d function(cb) {\n  if (cb !\x3d null \x26\x26 !fava.modules.ScsJsUrl.IS_VALID_CALLBACK_REGEX.test(cb)) {\n    throw Error(cb + \x27 is not a valid callback function name.\x27);\n  }\n  this.setKeyValue_(fava.modules.ScsJsUrl.Keys_.CALLBACK, cb);\n};\n\n\n/**\n * Sets the path of the dictionary to use for delta compression.\n * @param {?string} path dictionary path. If null, then clear\n *     dictionary path.\n */\nfava.modules.ScsJsUrl.prototype.setDeltaDictionaryPath \x3d function(path) {\n  this.setKeyValue_(\n      fava.modules.ScsJsUrl.Keys_.DELTA_DICTIONARY_KEY,\n      goog.isNull(path) ? null : encodeURIComponent(path.replace(/\\//g, \x27:\x27)));\n};\n\n\n/**\n * @return {?string} Returns the URL path of the dictionary to use with\n *     delta compression.\n */\nfava.modules.ScsJsUrl.prototype.getDeltaDictionaryPath \x3d function() {\n  var encodedUrl \x3d this.getKeyValue_(\n      fava.modules.ScsJsUrl.Keys_.DELTA_DICTIONARY_KEY);\n  if (encodedUrl) {\n    return decodeURIComponent(encodedUrl).replace(/:/g, \x27/\x27);\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * Sets the key to use for SDCH dictionary.\n * @param {?string} sdch SDCH dictionary identifier.\n */\nfava.modules.ScsJsUrl.prototype.setSdch \x3d function(sdch) {\n  this.setKeyValue_(fava.modules.ScsJsUrl.Keys_.SDCH, sdch);\n};\n\n\n/**\n * Clears all path components associated with selection of modules.\n */\nfava.modules.ScsJsUrl.prototype.clearModuleSelection \x3d function() {\n  delete this.keys_[fava.modules.ScsJsUrl.Keys_.MODULES];\n  delete this.keys_[fava.modules.ScsJsUrl.Keys_.EXCLUDED_MODULES];\n  delete this.keys_[fava.modules.ScsJsUrl.Keys_.EXCLUDED_DEPS];\n  delete this.keys_[fava.modules.ScsJsUrl.Keys_.DELTA_DICTIONARY_KEY];\n  // Note that EXCLUDED_CSS_MODULES is intentionally left out here as it is\n  // intended to be persistent across all JS requests.\n};\n\n\n/**\n * Returns a clone of this object.\n * @return {!fava.modules.ScsJsUrl} Clone of the url object.\n */\nfava.modules.ScsJsUrl.prototype.clone \x3d function() {\n  return fava.modules.ScsJsUrl.parse(this.toString());\n};\n\n\n/**\n * Parses a URL and returns a corresponding\n * `fava.modules.ScsJsUrl` object.  Query parameters, any\n * fragment, and unrecognized path key/value pairs are ignored.\n * @param {string} url URL to parse.\n * @return {!fava.modules.ScsJsUrl} A `fava.modules.ScsJsUrl` object.\n */\nfava.modules.ScsJsUrl.parse \x3d function(url) {\n  goog.asserts.assert(\n      fava.modules.ScsJsUrl.isScsJsUrl(url),\n      \x27URL is not a valid SCS JS URL.\x27);\n\n  var scsJsUrl \x3d new fava.modules.ScsJsUrl();\n\n  // `goog.uril.utils.getPath` URI-decodes the path, so\n  // use `goog.uri.utils.split`.\n  var path \x3d goog.uri.utils.split(url)[goog.uri.utils.ComponentIndex.PATH];\n  goog.object.forEach(\n      fava.modules.ScsJsUrl.Keys_,\n      function(pathKey) {\n        var match \x3d path.match(\x27/\x27 + pathKey + \x27\x3d([^/]+)\x27);\n        if (match) {\n          scsJsUrl.setKeyValue_(pathKey, match[1]);\n        }\n      });\n\n  // Final substring in path before key/value pairs.\n  var URL_PREFIX_END \x3d url.indexOf(\x27_/ss/\x27) !\x3d -1 ? \x27_/ss/\x27 : \x27_/js/\x27;\n  scsJsUrl.setUrlPrefix(\n      url.substr(0, url.indexOf(URL_PREFIX_END) + URL_PREFIX_END.length));\n  return scsJsUrl;\n};\n\n\n/**\n * Returns true if the given URL appears to be a valid SCS Javascript URL.\n * @param {string} url URL to check.\n * @return {boolean} whether the URL is a valid SCS JS URL.\n */\nfava.modules.ScsJsUrl.isScsJsUrl \x3d function(url) {\n  var path \x3d goog.uri.utils.getPath(url);\n  return (!goog.isNull(path) \x26\x26 !!path.match(\x27(/_/js/)|(/_/ss/)\x27) \x26\x26\n      !!path.match(\x27/k\x3d\x27));\n};\n\n//# sourceURL\x3dhttps://qs/javascript/apps/fava/modules/scsjsurl.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/module/module.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n *\n * @fileoverview This class supports the dynamic loading of compiled\n * javascript modules at runtime, as described in the designdoc.\n *\n *   \x3chttp://go/js_modules_design\x3e\n *\n * @author mesch@google.com (Steffen Meschkat)\n * @author ssaviano@google.com (Steven Saviano) (Ported to Closure)\n */\n\ngoog.provide(\x27goog.module\x27);\n\n// TODO(johnlenz): Here we explicitly initialize the namespace to avoid\n// problems with the goog.module method in base.js. We should rename this\n// entire package to goog.loader and then we can delete this file.\n//\n// However, note that it is tricky to do that without breaking the world.\n// See discussion on https://critique.corp.google.com/#review/116016468.\n/**\n * @suppress {duplicate}\n * @type {function(string):void}\n */\ngoog.module \x3d goog.module || {};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/module/module.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/module/basemodule.js";
eval("// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Defines the base class for a module. This is used to allow the\n * code to be modularized, giving the benefits of lazy loading and loading on\n * demand.\n *\n * @author darick@google.com (Darick Tong)\n * @author pupius@google.com (Daniel Pupius)\n * @author ssaviano@google.com (Steven Saviano)\n */\n\ngoog.provide(\x27goog.module.BaseModule\x27);\n\ngoog.require(\x27goog.Disposable\x27);\n/** @suppress {extraRequire} */\ngoog.require(\x27goog.module\x27);\n\n\n\n/**\n * A basic module object that represents a module of Javascript code that can\n * be dynamically loaded.\n *\n * @constructor\n * @extends {goog.Disposable}\n */\ngoog.module.BaseModule \x3d function() {\n  goog.Disposable.call(this);\n};\ngoog.inherits(goog.module.BaseModule, goog.Disposable);\n\n\n/**\n * Performs any load-time initialization that the module requires.\n * @param {Object} context The module context.\n */\ngoog.module.BaseModule.prototype.initialize \x3d function(context) {};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/module/basemodule.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/module/moduleloadcallback.js";
eval("// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A simple callback mechanism for notification about module\n * loads. Should be considered package-private to goog.module.\n *\n * @author darick@google.com (Darick Tong)\n * @author pupius@google.com (Daniel Pupius)\n * @author jared@google.com (Jared Jacobs)\n * @author ssaviano@google.com (Steven Saviano)\n */\n\ngoog.provide(\x27goog.module.ModuleLoadCallback\x27);\n\ngoog.require(\x27goog.debug.entryPointRegistry\x27);\n/** @suppress {extraRequire} */\ngoog.require(\x27goog.module\x27);\n\n\n\n/**\n * Class used to encapsulate the callbacks to be called when a module loads.\n * @param {Function} fn Callback function.\n * @param {Object\x3d} opt_handler Optional handler under whose scope to execute\n *     the callback.\n * @constructor\n * @final\n */\ngoog.module.ModuleLoadCallback \x3d function(fn, opt_handler) {\n  /**\n   * Callback function.\n   * @type {Function}\n   * @private\n   */\n  this.fn_ \x3d fn;\n\n  /**\n   * Optional handler under whose scope to execute the callback.\n   * @type {Object|undefined}\n   * @private\n   */\n  this.handler_ \x3d opt_handler;\n};\n\n\n/**\n * Completes the operation and calls the callback function if appropriate.\n * @param {*} context The module context.\n */\ngoog.module.ModuleLoadCallback.prototype.execute \x3d function(context) {\n  if (this.fn_) {\n    this.fn_.call(this.handler_ || null, context);\n    this.handler_ \x3d null;\n    this.fn_ \x3d null;\n  }\n};\n\n\n/**\n * Abort the callback, but not the actual module load.\n */\ngoog.module.ModuleLoadCallback.prototype.abort \x3d function() {\n  this.fn_ \x3d null;\n  this.handler_ \x3d null;\n};\n\n\n// Register the browser event handler as an entry point, so that\n// it can be monitored for exception handling, etc.\ngoog.debug.entryPointRegistry.register(\n    /**\n     * @param {function(!Function): !Function} transformer The transforming\n     *     function.\n     */\n    function(transformer) {\n      goog.module.ModuleLoadCallback.prototype.execute \x3d\n          transformer(goog.module.ModuleLoadCallback.prototype.execute);\n    });\n\n//# sourceURL\x3dhttps://qs/javascript/closure/module/moduleloadcallback.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/module/moduleinfo.js";
eval("// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Defines the goog.module.ModuleInfo class.\n *\n * @author darick@google.com (Darick Tong)\n * @author pupius@google.com (Daniel Pupius)\n * @author jared@google.com (Jared Jacobs)\n * @author ssaviano@google.com (Steven Saviano)\n */\n\ngoog.provide(\x27goog.module.ModuleInfo\x27);\n\ngoog.require(\x27goog.Disposable\x27);\ngoog.require(\x27goog.async.throwException\x27);\ngoog.require(\x27goog.functions\x27);\ngoog.require(\x27goog.html.TrustedResourceUrl\x27);\n/** @suppress {extraRequire} */\ngoog.require(\x27goog.module\x27);\ngoog.require(\x27goog.module.BaseModule\x27);\ngoog.require(\x27goog.module.ModuleLoadCallback\x27);\n\ngoog.forwardDeclare(\x27goog.loader.AbstractModuleManager.FailureType\x27);\n\n\n\n/**\n * A ModuleInfo object is used by the ModuleManager to hold information about a\n * module of js code that may or may not yet be loaded into the environment.\n *\n * @param {Array\x3cstring\x3e} deps Ids of the modules that must be loaded before\n *     this one. The ids must be in dependency order (i.e. if the ith module\n *     depends on the jth module, then i \x3e j).\n * @param {string} id The module\x27s ID.\n * @constructor\n * @extends {goog.Disposable}\n * @final\n */\ngoog.module.ModuleInfo \x3d function(deps, id) {\n  goog.Disposable.call(this);\n\n  /**\n   * A list of the ids of the modules that must be loaded before this module.\n   * @type {Array\x3cstring\x3e}\n   * @private\n   */\n  this.deps_ \x3d deps;\n\n  /**\n   * The module\x27s ID.\n   * @type {string}\n   * @private\n   */\n  this.id_ \x3d id;\n\n  /**\n   * Callbacks to execute once this module is loaded.\n   * @type {Array\x3cgoog.module.ModuleLoadCallback\x3e}\n   * @private\n   */\n  this.onloadCallbacks_ \x3d [];\n\n  /**\n   * Callbacks to execute if the module load errors.\n   * @type {Array\x3cgoog.module.ModuleLoadCallback\x3e}\n   * @private\n   */\n  this.onErrorCallbacks_ \x3d [];\n\n  /**\n   * Early callbacks to execute once this module is loaded. Called after\n   * module initialization but before regular onload callbacks.\n   * @type {Array\x3cgoog.module.ModuleLoadCallback\x3e}\n   * @private\n   */\n  this.earlyOnloadCallbacks_ \x3d [];\n};\ngoog.inherits(goog.module.ModuleInfo, goog.Disposable);\n\n\n/**\n * The uris that can be used to retrieve this module\x27s code.\n * @type {?Array\x3c!goog.html.TrustedResourceUrl\x3e}\n * @private\n */\ngoog.module.ModuleInfo.prototype.uris_ \x3d null;\n\n\n/**\n * The constructor to use to instantiate the module object after the module\n * code is loaded. This must be either goog.module.BaseModule or a subclass of\n * it.\n * @type {Function}\n * @private\n */\ngoog.module.ModuleInfo.prototype.moduleConstructor_ \x3d goog.module.BaseModule;\n\n\n/**\n * The module object. This will be null until the module is loaded.\n * @type {goog.module.BaseModule?}\n * @private\n */\ngoog.module.ModuleInfo.prototype.module_ \x3d null;\n\n\n/**\n * Gets the dependencies of this module.\n * @return {Array\x3cstring\x3e} The ids of the modules that this module depends on.\n */\ngoog.module.ModuleInfo.prototype.getDependencies \x3d function() {\n  return this.deps_;\n};\n\n\n/**\n * Gets the ID of this module.\n * @return {string} The ID.\n */\ngoog.module.ModuleInfo.prototype.getId \x3d function() {\n  return this.id_;\n};\n\n\n/**\n * Sets the uris of this module.\n * @param {!Array\x3c!goog.html.TrustedResourceUrl\x3e} uris Uris for this module\x27s\n *     code.\n */\ngoog.module.ModuleInfo.prototype.setTrustedUris \x3d function(uris) {\n  this.uris_ \x3d uris;\n};\n\n\n/**\n * Gets the uris of this module.\n * @return {!Array\x3c!goog.html.TrustedResourceUrl\x3e} Uris for this module\x27s code.\n */\ngoog.module.ModuleInfo.prototype.getUris \x3d function() {\n  if (!this.uris_) {\n    this.uris_ \x3d [];\n  }\n  return this.uris_;\n};\n\n\n/**\n * Sets the constructor to use to instantiate the module object after the\n * module code is loaded.\n * @param {Function} constructor The constructor of a goog.module.BaseModule\n *     subclass.\n */\ngoog.module.ModuleInfo.prototype.setModuleConstructor \x3d function(constructor) {\n  if (this.moduleConstructor_ \x3d\x3d\x3d goog.module.BaseModule) {\n    this.moduleConstructor_ \x3d constructor;\n  } else {\n    throw new Error(\x27Cannot set module constructor more than once.\x27);\n  }\n};\n\n\n/**\n * Registers a function that should be called after the module is loaded. These\n * early callbacks are called after {@link Module#initialize} is called but\n * before the other callbacks are called.\n * @param {Function} fn A callback function that takes a single argument which\n *    is the module context.\n * @param {Object\x3d} opt_handler Optional handler under whose scope to execute\n *     the callback.\n * @return {!goog.module.ModuleLoadCallback} Reference to the callback\n *     object.\n */\ngoog.module.ModuleInfo.prototype.registerEarlyCallback \x3d function(\n    fn, opt_handler) {\n  return this.registerCallback_(this.earlyOnloadCallbacks_, fn, opt_handler);\n};\n\n\n/**\n * Registers a function that should be called after the module is loaded.\n * @param {Function} fn A callback function that takes a single argument which\n *    is the module context.\n * @param {Object\x3d} opt_handler Optional handler under whose scope to execute\n *     the callback.\n * @return {!goog.module.ModuleLoadCallback} Reference to the callback\n *     object.\n */\ngoog.module.ModuleInfo.prototype.registerCallback \x3d function(fn, opt_handler) {\n  return this.registerCallback_(this.onloadCallbacks_, fn, opt_handler);\n};\n\n\n/**\n * Registers a function that should be called if the module load fails.\n * @param {Function} fn A callback function that takes a single argument which\n *    is the failure type.\n * @param {Object\x3d} opt_handler Optional handler under whose scope to execute\n *     the callback.\n * @return {!goog.module.ModuleLoadCallback} Reference to the callback\n *     object.\n */\ngoog.module.ModuleInfo.prototype.registerErrback \x3d function(fn, opt_handler) {\n  return this.registerCallback_(this.onErrorCallbacks_, fn, opt_handler);\n};\n\n\n/**\n * Registers a function that should be called after the module is loaded.\n * @param {Array\x3cgoog.module.ModuleLoadCallback\x3e} callbacks The array to\n *     add the callback to.\n * @param {Function} fn A callback function that takes a single argument which\n *     is the module context.\n * @param {Object\x3d} opt_handler Optional handler under whose scope to execute\n *     the callback.\n * @return {!goog.module.ModuleLoadCallback} Reference to the callback\n *     object.\n * @private\n */\ngoog.module.ModuleInfo.prototype.registerCallback_ \x3d function(\n    callbacks, fn, opt_handler) {\n  var callback \x3d new goog.module.ModuleLoadCallback(fn, opt_handler);\n  callbacks.push(callback);\n  return callback;\n};\n\n\n/**\n * Determines whether the module has been loaded.\n * @return {boolean} Whether the module has been loaded.\n */\ngoog.module.ModuleInfo.prototype.isLoaded \x3d function() {\n  return !!this.module_;\n};\n\n\n/**\n * Gets the module.\n * @return {goog.module.BaseModule?} The module if it has been loaded.\n *     Otherwise, null.\n */\ngoog.module.ModuleInfo.prototype.getModule \x3d function() {\n  return this.module_;\n};\n\n\n/**\n * Sets this module as loaded.\n * @param {function() : Object} contextProvider A function that provides the\n *     module context.\n * @return {boolean} Whether any errors occurred while executing the onload\n *     callbacks.\n */\ngoog.module.ModuleInfo.prototype.onLoad \x3d function(contextProvider) {\n  // Instantiate and initialize the module object.\n  var module \x3d new this.moduleConstructor_;\n  module.initialize(contextProvider());\n\n  // Keep an internal reference to the module.\n  this.module_ \x3d module;\n\n  // Fire any early callbacks that were waiting for the module to be loaded.\n  var errors \x3d\n      !!this.callCallbacks_(this.earlyOnloadCallbacks_, contextProvider());\n\n  // Fire any callbacks that were waiting for the module to be loaded.\n  errors \x3d\n      errors || !!this.callCallbacks_(this.onloadCallbacks_, contextProvider());\n\n  if (!errors) {\n    // Clear the errbacks.\n    this.onErrorCallbacks_.length \x3d 0;\n  }\n\n  return errors;\n};\n\n\n/**\n * Calls the error callbacks for the module.\n * @param {goog.loader.AbstractModuleManager.FailureType} cause What caused the\n *     error.\n */\ngoog.module.ModuleInfo.prototype.onError \x3d function(cause) {\n  var result \x3d this.callCallbacks_(this.onErrorCallbacks_, cause);\n  if (result) {\n    // Throw an exception asynchronously. Do not let the exception leak\n    // up to the caller, or it will blow up the module loading framework.\n    window.setTimeout(\n        goog.functions.error(\x27Module errback failures: \x27 + result), 0);\n  }\n  this.earlyOnloadCallbacks_.length \x3d 0;\n  this.onloadCallbacks_.length \x3d 0;\n};\n\n\n/**\n * Helper to call the callbacks after module load.\n * @param {Array\x3cgoog.module.ModuleLoadCallback\x3e} callbacks The callbacks\n *     to call and then clear.\n * @param {*} context The module context.\n * @return {Array\x3c*\x3e} Any errors encountered while calling the callbacks,\n *     or null if there were no errors.\n * @private\n */\ngoog.module.ModuleInfo.prototype.callCallbacks_ \x3d function(callbacks, context) {\n  // NOTE(nicksantos):\n  // In practice, there are two error-handling scenarios:\n  // 1) The callback does some mandatory initialization of the module.\n  // 2) The callback is for completion of some optional UI event.\n  // There\x27s no good way to handle both scenarios.\n  //\n  // Our strategy here is to protect module manager from exceptions, so that\n  // the failure of one module doesn\x27t affect the loading of other modules.\n  // Errors are thrown outside of the current stack frame, so they still\n  // get reported but don\x27t interrupt execution.\n\n  // Call each callback in the order they were registered\n  var errors \x3d [];\n  for (var i \x3d 0; i \x3c callbacks.length; i++) {\n    try {\n      callbacks[i].execute(context);\n    } catch (e) {\n      goog.async.throwException(e);\n      errors.push(e);\n    }\n  }\n\n  // Clear the list of callbacks.\n  callbacks.length \x3d 0;\n  return errors.length ? errors : null;\n};\n\n\n/** @override */\ngoog.module.ModuleInfo.prototype.disposeInternal \x3d function() {\n  goog.module.ModuleInfo.superClass_.disposeInternal.call(this);\n  goog.dispose(this.module_);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/module/moduleinfo.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/module/abstractmoduleloader.js";
eval("// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview An interface for module loading.\n *\n * @author mgoodman@google.com (Mark Goodman)\n */\n\ngoog.provide(\x27goog.module.AbstractModuleLoader\x27);\n\n/** @suppress {extraRequire} */\ngoog.require(\x27goog.module\x27);\ngoog.require(\x27goog.module.ModuleInfo\x27);\n\n\n/**\n * An interface that loads JavaScript modules.\n * @interface\n */\ngoog.module.AbstractModuleLoader \x3d function() {};\n\n\n/**\n * Loads a list of JavaScript modules.\n *\n * @param {Array\x3cstring\x3e} ids The module ids in dependency order.\n * @param {!Object\x3cstring, !goog.module.ModuleInfo\x3e} moduleInfoMap A mapping\n *     from module id to ModuleInfo object.\n * @param {function()?\x3d} opt_successFn The callback if module loading is a\n *     success.\n * @param {function(?number)?\x3d} opt_errorFn The callback if module loading is an\n *     error.\n * @param {function()?\x3d} opt_timeoutFn The callback if module loading times out.\n * @param {boolean\x3d} opt_forceReload Whether to bypass cache while loading the\n *     module.\n */\ngoog.module.AbstractModuleLoader.prototype.loadModules \x3d function(\n    ids, moduleInfoMap, opt_successFn, opt_errorFn, opt_timeoutFn,\n    opt_forceReload) {};\n\n\n/**\n * Pre-fetches a JavaScript module.\n *\n * @param {string} id The module id.\n * @param {!goog.module.ModuleInfo} moduleInfo The module info.\n */\ngoog.module.AbstractModuleLoader.prototype.prefetchModule \x3d function(\n    id, moduleInfo) {};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/module/abstractmoduleloader.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/modulesets/moduleidmatcher.js";
goog.loadModule("goog.module(\x27modulesets.ModuleIdMatcher\x27);\ngoog.module.declareLegacyNamespace();\n\n\n/**\n * Checks if a module is synthetic as per the RESERVED_MODULE_ID_PATTERN from\n * java/com/google/javascript/modules/tools/PmfFileEnhancer.java.\n *\n * @param {string} id\n * @return {boolean}\n */\nconst isSyntheticModule \x3d (id) \x3d\x3e {\n  return /^sy[0-9a-z]{0,4}$/.test(id);\n};\n\n\n/**\n * Checks if a module is synthetic module or extracted mods. Ideally we should\n * always use this check, but there are some violations in google3.\n *\n * @param {string} id\n * @return {boolean}\n */\nconst isSyntheticModuleOrExtractedMod \x3d (id) \x3d\x3e {\n  return /^(?:sy|em)[0-9a-z]{0,4}$/.test(id);\n};\n\nexports.isSyntheticModule \x3d isSyntheticModule;\nexports.isSyntheticModuleOrExtractedMod \x3d isSyntheticModuleOrExtractedMod;\n\n//# sourceURL\x3dhttps://qs/javascript/modulesets/moduleidmatcher.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/modulemanager/moduleloader.js";
eval("/**\n * @fileoverview Module loader for GWS late loaded modules.\n * @author martone@google.com (Andy Martone)\n */\n\ngoog.provide(\x27gws.modules.ModuleLoader\x27);\n\ngoog.require(\x27fava.modules.ScsJsUrl\x27);\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.module.AbstractModuleLoader\x27);\ngoog.require(\x27goog.object\x27);\ngoog.require(\x27goog.uri.utils\x27);\ngoog.require(\x27gws.dom\x27);\ngoog.require(\x27modulesets.ModuleIdMatcher\x27);\n\ngoog.scope(() \x3d\x3e {\n\n/**\n * A module loader that adds GWS specific instrumentation when late\n * loading GWS modules.\n * @param {string} primaryUri The primary xjs URI.\n * @implements {goog.module.AbstractModuleLoader}\n * @constructor\n * @struct\n */\ngws.modules.ModuleLoader \x3d function(primaryUri) {\n  /**\n   * The parsed primary XJS URI, usually inititalized from google.xjsu.\n   * @protected {!fava.modules.ScsJsUrl}\n   */\n  this.primaryXjsUrl \x3d fava.modules.ScsJsUrl.parse(primaryUri);\n\n  /**\n   * The value of the ver query param, if any.\n   * @private @const {?string}\n   */\n  this.ver_ \x3d goog.uri.utils.getParamValue(primaryUri, \x27ver\x27);\n\n  /**\n   * The mendel experiment parameter for 2nd xjs cache hit rate.\n   * TODO(chirleym): revert this code after the experiment is over.\n   * go/uncoordinated-shipit-exp\n   * @type {?string}\n   * @private\n   */\n  this.xjsParam_ \x3d \x27s1\x27;\n  if (window.google.xjsv) {\n    this.xjsParam_ +\x3d window.google.xjsv;\n  }\n\n  /**\n   * A set of module ids that are have either loaded or in the process of being\n   * loaded.\n   * @protected {!Set\x3cstring\x3e}\n   */\n  this.requestedModules \x3d new Set([...this.primaryXjsUrl.getModuleIds()]);\n\n  /**\n   * True if modules have been loaded via the loadModules function.\n   * @private {boolean}\n   */\n  this.modulesLoaded_ \x3d false;\n\n  /**\n   * A variable to keep count of the secondary requests so that a cgi param\n   * could be appended to the url indicating the order of all the secondary\n   * requests. This count starts from ?xjs\x3ds1 for first secondary request where\n   * s stands for secondary.\n   * @private {number}\n   */\n  this.secondaryRequestCnt_ \x3d 0;\n};\n\n\n/**\n * The probability of sending a /gen_204 log when loading modules.\n * @private @const {number}\n */\ngws.modules.ModuleLoader.LOG_PROBABILITY_ \x3d 1e-2;\n\n\n/**\n * Whether to send a /gen_204 log when loading modules.\n * @return {boolean} True if a /gen_204 should be logged, else false.\n */\ngws.modules.ModuleLoader.shouldLogLoadedModules \x3d function() {\n  return Math.random() \x3c gws.modules.ModuleLoader.LOG_PROBABILITY_;\n};\n\n\n/**\n * Records a /gen_204 with the list of already loaded modules and the requested\n * modules. This will be used for the bloat test.\n *\n * @param {!Array\x3cstring\x3e} ids The module ids that are to be loaded.\n * @private\n */\ngws.modules.ModuleLoader.prototype.logPriorAndRequestedModules_ \x3d function(\n    ids) {\n  var notSyntheticIds \x3d goog.array.filter(ids, id \x3d\x3e {\n    return !modulesets.ModuleIdMatcher.isSyntheticModuleOrExtractedMod(id);\n  });\n  google.log(\n      \x27ppm\x27,\n      \x27\x26lids\x3d\x27 + this.primaryXjsUrl.getModuleIds().join(\x27,\x27) +\n          \x27\x26ids\x3d\x27 + notSyntheticIds.join(\x27,\x27) +\n          \x27\x26am\x3d\x27 + this.primaryXjsUrl.getActiveMods() +\n          \x27\x26k\x3d\x27 + this.primaryXjsUrl.getRowKey());\n};\n\n/** @override */\ngws.modules.ModuleLoader.prototype.loadModules \x3d function(\n    ids, moduleInfoMap, successFn, errFn, timeoutFn, forceReload) {\n  goog.asserts.assertArray(ids, \x27ids cannot be null\x27);\n  // Whenever loadModules is called, secondaryRequestCnt_ would increase by 1\n  // and gets appended as a cgi param to the url for xjs cache hit rate\n  // analysis.\n  this.secondaryRequestCnt_++;\n  if (!this.modulesLoaded_) {\n    // Sample only a small percentage of the time.\n    if (gws.modules.ModuleLoader.shouldLogLoadedModules()) {\n      this.logPriorAndRequestedModules_(ids);\n    }\n  }\n  ids \x3d goog.array.filter(ids, id \x3d\x3e {\n    return !modulesets.ModuleIdMatcher.isSyntheticModuleOrExtractedMod(id);\n  });\n  this.loadModulesInternal(ids);\n  this.modulesLoaded_ \x3d true;\n};\n\n/**\n * @param {!Array\x3cstring\x3e} ids\n * @protected\n */\ngws.modules.ModuleLoader.prototype.loadModulesInternal \x3d function(ids) {\n  ids \x3d goog.array.filter(ids, id \x3d\x3e {\n    return !this.requestedModules.has(id);\n  });\n  this.loadFromBaseModuleset(ids, this.requestedModules);\n  for (const id of ids) {\n    this.requestedModules.add(id);\n  }\n};\n\n/**\n * This function loads from the base moduleset and handles early loading for\n * certain modules based on the google.emod property.  See\n * go/split-gws-secondary-xjs.\n * @param {!Array\x3cstring\x3e} ids\n * @param {!Set\x3cstring\x3e} exm\n * @return {!Promise}\n * @protected\n */\ngws.modules.ModuleLoader.prototype.loadFromBaseModuleset \x3d function(ids, exm) {\n  // TODO(neilargade): Restructure for integration after experiment.\n  if (google.emod) {\n    // Make sure modules are being served\n    const earlyModules \x3d google.emod.split(\x27,\x27);\n    const earlyModulesOnPage \x3d earlyModules.filter((m) \x3d\x3e ids.includes(m));\n    if (!goog.array.isEmpty(earlyModules) \x26\x26\n        earlyModulesOnPage.length \x3d\x3d earlyModules.length) {\n      this.handleBaseModulesetSplitUrl(earlyModulesOnPage, exm, false);\n      this.secondaryRequestCnt_++;\n      for (const m of earlyModulesOnPage) {\n        goog.array.remove(ids, m);\n        exm.add(m);\n      }\n      return this.handleBaseModulesetSplitUrl(ids, exm, false);\n    }\n  }\n  return this.handleBaseModulesetSplitUrl(ids, exm);\n};\n\n/**\n * Split the request when the URL is too long. See b/35855668. This uses naive\n * (and compact) logic to split loading into two requests when needed. This\n * could be extended to support an arbitrary number of requests using logic\n * similar to:\n * http://google3/javascript/modulesets/moduleloader.js?q\x3dsymbol:loadModules\n * @param {!Array\x3cstring\x3e} ids\n * @param {!Set\x3cstring\x3e} exm\n * @param {boolean\x3d} async\n * @return {!Promise}\n * @protected\n */\ngws.modules.ModuleLoader.prototype.handleBaseModulesetSplitUrl \x3d function(\n    ids, exm, async \x3d true) {\n  const uri \x3d this.formatModuleUrl(ids, exm);\n  if (uri.length \x3c\x3d gws.modules.ModuleLoader.MAX_XJS_PATH_LENGTH_) {\n    return gws.modules.ModuleLoader.loadViaScript_(uri, async);\n  } else {\n    const half \x3d ids.length / 2;\n    gws.modules.ModuleLoader.loadViaScript_(\n        this.formatModuleUrl(ids.slice(0, half), exm), false);\n    return gws.modules.ModuleLoader.loadViaScript_(\n        this.formatModuleUrl(ids.slice(half), exm), false);\n  }\n};\n\n\n/**\n * See http://b/35855668#comment40.\n * @private @const\n */\ngws.modules.ModuleLoader.MAX_XJS_PATH_LENGTH_ \x3d 2083;\n\n\n/**\n * @param {string} uri\n * @param {boolean\x3d} async\n * @return {!Promise}\n * @private\n */\ngws.modules.ModuleLoader.loadViaScript_ \x3d function(uri, async \x3d true) {\n  return new Promise((resolve, reject) \x3d\x3e {\n    var xjs \x3d document.createElement(\x27script\x27);\n    xjs.src \x3d uri;\n    // When loading is split into multiple requests, disabling async execution\n    // ensures that scripts execute in dependency order. This will not work on\n    // certain old browsers that do not support the async property and default\n    // to async execution, namely IE \x3c10 and old WebKit (unclear which\n    // versions). See http://go/mdn/HTML/Element/script#Browser_compatibility.\n    // This probably does not affect any Tier 1 browsers\n    // \x3chttp://sites/gwsteam/policies/browser-support-policy\x3e, but if it ever\n    // does, we will need an alternate ordering implementation such as\n    // http://google3/javascript/modulesets/moduleloader.js?q\x3dsymbol:loadViaCallback_.\n    xjs.async \x3d async;\n    xjs.onload \x3d resolve;\n    gws.dom.append(xjs);\n  });\n};\n\n\n/** @override */\ngws.modules.ModuleLoader.prototype.prefetchModule \x3d function(id, moduleInfo) {\n  if (goog.DEBUG) {\n    throw Error(\n        \x27GWS ModuleLoader doesn\\\x27t support prefetching. \x27 +\n        \x27Contact gws-javascript-team if you\\\x27d like to use this.\x27);\n  }\n};\n\n\n/**\n * @param {!Array\x3cstring\x3e} ids The module ids in dependency order.\n * @param {!Set\x3cstring\x3e} exm The excluded modules.\n * @param {!fava.modules.ScsJsUrl\x3d} baseUrl The URL to base the secondary\n *     request off of. This will be cloned.\n * @return {string} The URL for loading the module.\n * @protected\n */\ngws.modules.ModuleLoader.prototype.formatModuleUrl \x3d function(\n    ids, exm, baseUrl \x3d this.primaryXjsUrl) {\n  const url \x3d baseUrl.clone();\n  url.setModuleIds(ids);\n  url.setExcludedModuleIds(Array.from(exm));\n  url.setIncludeDeps(true);\n  url.setExcludeDeps(true);\n\n  let pintoUrl \x3d url.toString();\n  const additionalParams \x3d {};\n  if (this.ver_) {\n    additionalParams[\x27ver\x27] \x3d this.ver_;\n  }\n\n  if (this.secondaryRequestCnt_ \x3d\x3d 1) {\n    additionalParams[\x27xjs\x27] \x3d this.xjsParam_;\n  }\n\n  if (goog.object.getCount(additionalParams)) {\n    pintoUrl +\x3d \x27?\x27 + goog.uri.utils.buildQueryDataFromMap(additionalParams);\n  }\n\n  return pintoUrl;\n};\n});\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/modulemanager/moduleloader.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/fava/delegate/delegate.js";
eval("// Copyright 2008 Google Inc. All rights reserved.\n\n/**\n * @fileoverview This class forms a basis for creating mods for individual\n * classes. It provides a mechanism and structure for identifying where\n * classes can call out to a mod to augment its functionality. The mod\x27s\n * code is isolated from the base code through the use of a mod-defined\n * subclass of a base-defined delegate class that is derived from this\n * class.\n *\n * The usage runs in 4 parts:\n * \x3cul\x3e\n *  \x3cli\x3eThe delegator defines a subclass of this class that defines the\n *    call-out points, including their parameters and return value.\n *    The call-out point may be an empty method or may define basic behavior\n *    that can be overridden by the individual delegates.\n *    \x3cbr\x3e\n *    The following functions are provided by fava.delegate.Delegate to create\n *    new delegate methods according to how the methods should be called.  If\n *    these are called with no argument, they will return a new, empty default\n *    implementation.  If they are called with an existing delegate method as\n *    an argument, they will set this calling convention for the existing\n *    method (see examples below).\n *    \x3cul\x3e\n *      \x3cli\x3ecallFirst: if called, then only the first delegate will be\n *        called, and its result will be returned, rather than an array of\n *        results. If no delegate is registered, the delegate base\x27s method\n *        will be called and its result returned.\x3c/li\x3e\n *      \x3cli\x3ecallUntilTrue: if called, then each delegate will be called and\n *        the return value of the call checked. If a delegate returns a value\n *        that evaluates to true, no further delegates will be called, and the\n *        method will return that value. If none of the delegates returns a\n *        truthy value, the method will return false. If no delegates implement\n *        the method, the delegate base\x27s method will be called and its result\n *        returned.\x3c/li\x3e\n *      \x3cli\x3ecallUntilDefined: if called, then each delegate will be called and\n *        the return value of the call checked. If a delegate returns any value\n *        other than null or undefined, no further delegates will be called, and\n *        the method will return that value. If none of the delegates returns a\n *        defined value, the method will return undefined. If no delegates\n *        implement the method, the delegate base\x27s method will be called and\n *        its result returned.\x3c/li\x3e\n *      \x3cli\x3enoResult: if called, the delegate is not expected to return a\n *        value, so any value that it actually does return can be\n *        discarded.\x3c/li\x3e\n *      \x3cli\x3eIf none of these functions is called on the delegate method, an\n *        array containing the return values from each delegate method is\n *        returned. In this case, the delegate base\x27s method should not be\n *        defined using an empty function, because the compiler might optimize\n *        it incorrectly causing undefined to sometimes be returned instead of\n *        an empty array. Thus, either provide a non-empty implementation or use\n *        {@link fava.delegate.Delegate.createMethod} for a null implementation.\n *        \x3c/li\x3e\n *    \x3c/ul\x3e\n *    The delegate base is registered as such using\n *    fava.delegate.Delegate.setBase()\n *  \x3c/li\x3e\n *  \x3cli\x3eThe mod subclasses the delegate class defined by the base,\n *    implements those functions it wishes to, and registers as a delegate\n *    using fava.delegate.Delegate.register() or\n *    fava.delegate.Delegate.registerStateless(), which handles both the\n *    registration and making the mod\x27s class derive from the base delegate\n *    class. If a mod has no state of its own, it can register its delegate\n *    as stateless, using fava.delegate.Delegate.registerStateless(). When it\n *    does so, the delegated methods it overrides will be invoked with \x22this\x22\n *    bound to a shared instance of the delegate base class. (This can have\n *    a significant positive effect on the number of objects allocated, but\n *    also can be dangerous if you forget your mod is stateless and start\n *    storing information in your delegate class code.)\x3c/li\x3e\n *  \x3cli\x3eThe delegator constructor calls this class to construct a delegate\n *    object that it stores in a property for use by the class\x27s methods. It\n *    can optionally do this by extending pinto.core.Delegator, or by calling\n *    pinto.core.Delegator in its constructor.\x3c/li\x3e\n *  \x3cli\x3eAt appropriate points in the delegator class, it invokes the relevant\n *    call-out method on the delegate object and possibly handles the\n *    return.\x3c/li\x3e\n * \x3c/ul\x3e\n *\n * For example: pinto.module.Foo defines pinto.module.FooDelegate as a subclass\n * of fava.delegate.Delegate. FooDelegate defines three methods: init,\n * allowLoad, and exit:\n *\n * \x3cpre\x3e\n * pinto.module.Foo \x3d function() {\n *   this.delegate_ \x3d fava.delegate.Delegate.create(this);\n * };\n *\n * pinto.module.FooDelegate \x3d function() {};\n * fava.delegate.Delegate.setBase(pinto.module.FooDelegate, pinto.module.Foo);\n *\n * // define call-out functions, with jsdoc comments\n * / ** @param {...User...} user * /\n * pinto.module.FooDelegate.prototype.init \x3d\n *     fava.delegate.Delegate.createMethod();\n * / ** @param {string} url. * /\n * pinto.module.FooDelegate.prototype.allowLoad \x3d\n *     fava.delegate.Delegate.createMethod();\n * pinto.module.FooDelegate.prototype.handleResponse \x3d\n *     fava.delegate.Delegate.callUntilTrue();\n * pinto.module.FooDelegate.prototype.exit \x3d\n *     fava.delegate.Delegate.noResult();\n * \x3c/pre\x3e\n *\n * Say there\x27s a mod that wishes to handle the init and allowLoad call-outs:\n *\n * \x3cpre\x3e\n * pinto.module.ModFooDelegate \x3d function() {};\n * fava.delegate.Delegate.register(\n *     pinto.module.ModFooDelegate, pinto.module.FooDelegate);\n *\n * pinto.module.ModFooDelegate.prototype.init \x3d function(user) {\n *   // do stuff\n * };\n *\n * pinto.module.ModFooDelegate.prototype.allowLoad \x3d function(url) {\n *   return this.isAllowed_(url);\n * };\n *\n * \x3c/pre\x3e\n *\n * Finally, in the Foo class:\n *\n * \x3cpre\x3e\n * pinto.module.Foo.prototype.init \x3d function() {\n *   var user \x3d getUserFromSomewhere();\n *\n *   this.delegate_.init(user);\n *   // other stuff\n * };\n *\n * pinto.module.Foo.prototype.load \x3d function(url) {\n *   if (goog.array.contains(this.delegate_.allowLoad(url), false)) {\n *     return false;\n *   }\n *   // carry on\n * };\n *\n * pinto.module.Foo.prototype.handleResponse \x3d function(response) {\n *   if (this.delegate_.handleResponse(response)) {\n *     return;\n *   }\n *   // handle the response ourselves.\n * };\n *\n * pinto.module.Foo.prototype.exit \x3d function() {\n *   // other stuff\n *\n *   // call out to delegates at the end, just cuz\n *   this.delegate_.exit();\n * };\n * \x3c/pre\x3e\n *\n * @author Adam de Boor (adeboor@google.com)\n */\n\ngoog.provide(\x27fava.delegate.Delegate\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\n\n\n\n/**\n * The base class for all delegates created using\n * fava.delegate.Delegate.create().\n * The class also provides the namespace for delegate-related functions,\n * like fava.delegate.Delegate.create().\n *\n * Subclasses do not need to call this in their constructor, but doing so\n * will not hurt anything.\n *\n * @param {Object} delegator The object that will be delegating calls to\n *     this object. Subclasses that need to know the object should store\n *     the object in their instance variables, where they know the data\n *     type of the object.\n * @constructor\n */\nfava.delegate.Delegate \x3d function(delegator) {};\n\n\n/**\n * Array of delegate instances, as created by the DelegateProxy manufactured\n * class.\n * @type {Array\x3cfava.delegate.Delegate\x3e}\n * @protected\n */\nfava.delegate.Delegate.prototype.delegates_;\n\n\n/**\n * Array of registered delegate classes for the delegate proxy.\n * @type {Array\x3cFunction\x3e}\n * @protected\n */\nfava.delegate.Delegate.prototype.delegateClasses_;\n\n\n/**\n * Register a class as the base class for delegates of a particular class.\n * This also makes the specified delegate base inherit from\n * fava.delegate.Delegate, if it\x27s not already so.\n *\n * @param {Function} delegateBase The class that anchors the tree of\n *     possible delegates for the delegator, and defines the delegation\n *     points. It is made a subclass of fava.delegate.Delegate by this function.\n * @param {Function} delegator The class that is doing the delegating.\n */\nfava.delegate.Delegate.setBase \x3d function(delegateBase, delegator) {\n  if (!delegateBase.superClass_) {\n    goog.inherits(delegateBase, fava.delegate.Delegate);\n  } else {\n    goog.asserts.assert(\n        delegateBase.prototype instanceof fava.delegate.Delegate,\n        \x27delegate base class is not a subclass of fava.delegate.Delegate\x27);\n  }\n  goog.asserts.assert(!delegator.delegateBase_,\n      \x27delegator already has a delegate base set\x27);\n\n  delegator.delegateBase_ \x3d delegateBase;\n\n  // Enforce the restriction that delegate bases registered on derived classes\n  // need to derive from delegate bases registered on base classes.\n  if (goog.DEBUG) {\n    // Find the first parent with a registered delegate base\n    var parent \x3d delegator;\n    do {\n      parent \x3d parent.superClass_ \x26\x26 parent.superClass_.constructor;\n    } while (parent \x26\x26 !parent.delegateBase_);\n    if (parent \x26\x26\n        parent.delegateBase_ !\x3d\x3d delegateBase.superClass_.constructor) {\n      throw Error(\x27delegate base must derive from superclass delegate base\x27);\n    }\n  }\n};\n\n\n/**\n * Register a class as a delegate and mark it as derived from the delegate\n * base, if not already so.\n *\n * @param {!Function} delegate The class that is a delegate.\n * @param {!Function} delegateBase The base delegate class from which it should\n *     derive.\n * @param {number\x3d} opt_priority Optional priority that controls the order\n *     in which delegates are called: higher number means call sooner. Equal\n *     numbers are called in registration order.\n */\nfava.delegate.Delegate.register \x3d\n    function(delegate, delegateBase, opt_priority) {\n  if (!delegate.superClass_) {\n    if (goog.DEBUG) {\n      for (var p in delegate.prototype) {\n        if (delegate.prototype.hasOwnProperty(p)) {\n          throw Error(\x27delegate registered after defining methods. \x27 +\n                      \x27you should extend your delegate base explicitly \x27 +\n                      \x27immediately after defining your delegate class\x27);\n        }\n      }\n    }\n    goog.inherits(delegate, delegateBase);\n  } else {\n    goog.asserts.assert(delegate.prototype instanceof delegateBase,\n        \x27delegate is not a subclass of the delegate base\x27);\n  }\n\n  goog.asserts.assert(!delegateBase.delegateProxyClass_,\n      \x27delegate registered after first delegator instantiation\x27);\n\n  var priority \x3d opt_priority || 0;\n  delegate.delegatePriority_ \x3d priority;\n\n  if (!delegateBase.delegateClasses_) {\n    delegateBase.delegateClasses_ \x3d [delegate];\n    return;\n  }\n\n  var c \x3d delegateBase.delegateClasses_;\n  var left \x3d 0;\n  var right \x3d c.length - 1;\n\n\n  // this is a modified binary search: because we can have multiple things\n  // at the same priority, and we need delegates at the same priority to be\n  // called in registration order, we cannot use binaryInsert, but instead\n  // need to keep searching to the right if we find a matching element,\n  // so we end up always doing log n comparisons and find the right edge\n  // of the run of same-priority delegates. Also note that we do this in\n  // descending order.\n  while (left \x3c\x3d right) {\n    var mid \x3d (left + right) \x3e\x3e 1;\n\n    if (priority \x3e c[mid].delegatePriority_) {\n      right \x3d mid - 1;\n    } else {\n      left \x3d mid + 1;\n    }\n  }\n  if (left \x3c c.length \x26\x26 c[left].delegatePriority_ \x3d\x3d priority) {\n    ++left;\n  }\n  c.splice(left, 0, delegate);\n};\n\n\n/**\n * A variant of fava.delegate.Delegate.register that allows you to register\n * a delegate as stateless, which means no delegate instance will be\n * constructed for you, but you can still reference whatever instance\n * variable in which the delegate base class stores its reference to the\n * delegator. Your delegate methods will be called with \x22this\x22 being an\n * instance of the delegate base class that is shared among all stateless\n * delegates for the delegator.\n *\n * NOTE: do not set any instance variables in your delegate methods or\n * the wrath of Khan will be visited upon you.\n *\n *\n * @param {!Function} delegate The class that is a delegate.\n * @param {!Function} delegateBase The base delegate class from which it should\n *     derive.\n * @param {number\x3d} opt_priority Optional priority that controls the order\n *     in which delegates are called: higher number means call sooner. Equal\n *     numbers are called in registration order.\n */\nfava.delegate.Delegate.registerStateless \x3d function(\n    delegate, delegateBase, opt_priority) {\n  delegate.delegateStateless_ \x3d true;\n  fava.delegate.Delegate.register(delegate, delegateBase, opt_priority);\n};\n\n\n/**\n * Construct the delegate proxy for a class. This object implements all the\n * methods of the delegator\x27s delegate base class.\n *\n * @param {Object} delegator The object doing the delegation.\n * @return {fava.delegate.Delegate} an object that is an instance of the\n *     delegateBase, with all of its methods set to call out to those instances\n *     of the delegate classes that actually implement the delegated methods.\n */\nfava.delegate.Delegate.create \x3d function(delegator) {\n  var base \x3d delegator.constructor;\n\n  // find the first class in the hierarchy that actually delegates.\n  while (base \x26\x26 !base.delegateBase_) {\n    base \x3d base.superClass_ \x26\x26 base.superClass_.constructor;\n  }\n\n  goog.asserts.assert(base, \x27trying to create delegate for non-delegating \x27 +\n      \x27class: did you forget to use fava.delegate.Delegate.setBase?\x27);\n\n  if (!base.delegateBase_.delegateProxyClass_) {\n    base.delegateBase_.delegateProxyClass_ \x3d\n        fava.delegate.Delegate.createDelegateProxyClass_(base);\n  }\n\n  return new base.delegateBase_.delegateProxyClass_(delegator);\n};\n\n\n\n/**\n * Create the delegate proxy class for a specified delegator. The delegate\n * proxy class is actually a subclass of the delegate base, and encapsulates\n * the list of known delegate classes, and what delegated methods they\n * implement, so fava.delegate.Delegate.create can just construct an instance of\n * this manufactured class.\n *\n * @param {Function} base The first class in the hierarchy that actually\n *     has a delegate base defined for it.\n * @return {!Function} The manufactured subclass of the delegate base.\n * @private\n */\nfava.delegate.Delegate.createDelegateProxyClass_ \x3d function(base) {\n  var delegateBase \x3d base.delegateBase_;\n\n  /**\n   * The class that forms the basis of the manufactured delegate class.\n   * It is responsible for constructing all the delegate instances, using\n   * information stored in its prototype by\n   * fava.delegate.Delegate.createDelegateClass_(). It\x27s an inner function\n   * because we need a new instance of the function each time\n   * fava.delegate.Delegate.createDelegateClass_ is called.\n   *\n   * @param {Object} delegator The instance that is delegating to the\n   *     the delegates this thing creates and manages.\n   * @constructor\n   * @extends {fava.delegate.Delegate}\n   */\n  var DelegateProxy \x3d function(delegator) {\n    DelegateProxy.superClass_.constructor.call(this, delegator);\n    var len \x3d this.delegateClasses_.length;\n    this.delegates_ \x3d [];\n    for (var i \x3d 0; i \x3c len; ++i) {\n      if (!this.delegateClasses_[i].delegateStateless_) {\n        this.delegates_[i] \x3d new (this.delegateClasses_[i])(delegator);\n      }\n    }\n  };\n  goog.inherits(DelegateProxy, delegateBase);\n  var delegateClasses \x3d [];\n\n  // Now we need to walk up the delegate base class tree to find the\n  // delegated methods, and which classes implement those methods. The\n  // result of this traversal will be that DelegateProxy.prototype will\n  // contain function objects for each of the delegated methods that\n  // when called will delegate to the proper delegate instances for the\n  // DelegateProxy instance.\n  while (base) {\n    delegateBase \x3d base.delegateBase_;\n    if (delegateBase) {\n      // if any registered delegates, add them to our list of delegate classes.\n      // the implication of where we put them is that delegate classes\n      // that are not immediate subclasses of a delegate base have precedence\n      // over those registered at a higher level of the hierarchy. if we\n      // find we don\x27t like this, we can walk the hierarchy twice: once to\n      // collect the registered classes and sort them by priority, and once\n      // to actually find who implements what.\n      if (delegateBase.delegateClasses_) {\n        goog.array.extend(delegateClasses, delegateBase.delegateClasses_);\n      }\n\n      var proto \x3d delegateBase.prototype;\n      for (var method in proto) {\n        // we\x27re only concerned here with methods (not values) of the delegate\n        // base (hence the check for hasOwnProperty), but we have to be\n        // careful because each prototype object has a \x27constructor\x27 property\n        // that refers back to the class for which the prototype is a prototype.\n        if (proto.hasOwnProperty(method) \x26\x26 goog.isFunction(proto[method]) \x26\x26\n            proto[method] !\x3d\x3d delegateBase) {\n          var callFirst \x3d !!proto[method].callFirst;\n\n          var callouts \x3d fava.delegate.Delegate.computeImplementers_(\n              method, proto, delegateClasses, callFirst);\n\n          var f \x3d fava.delegate.Delegate.getProxyFunction_(\n              method, proto, callouts, callFirst);\n\n          if (f) {\n            DelegateProxy.prototype[method] \x3d f;\n          }\n        }\n      }\n    }\n    base \x3d base.superClass_ \x26\x26 base.superClass_.constructor;\n  }\n  /** @override @private */\n  DelegateProxy.prototype.delegateClasses_ \x3d delegateClasses;\n\n  return DelegateProxy;\n};\n\n\n/**\n * Helper function that finds all the delegate classes that implement a\n * particular delegated method and returns an array of the indices of\n * those classes within the delegateClasses array.\n *\n * @param {string} method The name of the method we\x27re processing.\n * @param {Object} proto The prototype of the delegate base class being\n *     examined.\n * @param {Array\x3cFunction\x3e} delegateClasses The array of registered delegate\n *     classes that we need to examine.\n * @param {boolean} callFirst True if we\x27re only going to be calling the first\n *     delegate that implements the method.\n * @return {!Array\x3cnumber\x3e} array (possibly empty) holding the index of each\n *     of the delegate classes that implements the method.\n * @private\n */\nfava.delegate.Delegate.computeImplementers_ \x3d function(\n    method, proto, delegateClasses, callFirst) {\n  var callouts \x3d [];\n\n  for (var i \x3d 0; i \x3c delegateClasses.length; ++i) {\n    if (delegateClasses[i].prototype[method] !\x3d\x3d proto[method]) {\n      callouts.push(i);\n      if (callFirst) {\n        // no point pushing any other delegates if only the first\n        // will be used.\n        break;\n      }\n    }\n  }\n  return callouts;\n};\n\n\n/**\n * Construct a function object that will delegate the given delegated method\n * to all interested delegate instances.\n *\n * @param {string} method The name of the method we\x27re processing.\n * @param {Object} proto The prototype of the delegate base class being\n *     examined.\n * @param {Array\x3cnumber\x3e} callouts The indices of the interested delegate\n *     classes.\n * @param {boolean} callFirst True if only calling the first interested\n *     delegate.\n * @return {Function?} A new function object, or null if should use the\n *     delegate base class\x27s implementation of the method.\n * @private\n */\nfava.delegate.Delegate.getProxyFunction_ \x3d function(\n  method, proto, callouts, callFirst) {\n  var f;\n\n  if (callouts.length) {\n    if (callFirst) {\n      /**\n       * Function that is used as the front-end for the actual delegation\n       * when the prototype method in the delegate base class has the\n       * \x27callFirst\x27 property set to true. It pulls the information out of\n       * the delegate proxy and calls the proper method in the first delegate.\n       *\n       * @param {*} var_args The arguments of the function.\n       * @return {*} Any type.\n       * @private\n       * @this {fava.delegate.Delegate}\n       */\n      f \x3d function(var_args) {\n        var delegate \x3d this.delegates_[callouts[0]];\n        return delegate ?\n            delegate[method].apply(this.delegates_[callouts[0]], arguments) :\n            this.delegateClasses_[callouts[0]].prototype[method].apply(\n                this, arguments);\n      };\n    } else if (proto[method].callUntilTrue) {\n      /**\n       * Function that is used as the front-end for the actual delegation\n       * when the prototype method in the delegate base class has the\n       * \x27callUntilTrue\x27 property set to true. It uses the information in the\n       * activation object (i.e. this containing function\x27s parameters) to\n       * invoke the delegate proxy\x27s delegateUntilTrue method.\n       *\n       * @param {*} var_args The arguments of the function.\n       * @return {*} Last return value.\n       * @private\n       * @this {fava.delegate.Delegate}\n       */\n      f \x3d function(var_args) {\n        return this.delegateUntilTrue(\n          method, callouts,\n          Array.prototype.slice.call(arguments, 0));\n      };\n    } else if (proto[method].callUntilDefined) {\n      /**\n       * Function that is used as the front-end for the actual delegation\n       * when the prototype method in the delegate base class has the\n       * \x27callUntilDefined\x27 property set to true. It uses the information in the\n       * activation object (i.e. this containing function\x27s parameters) to\n       * invoke the delegate proxy\x27s delegateUntilDefined method.\n       *\n       * @param {*} var_args The arguments of the function.\n       * @return {Object|undefined} Undefined iff all delegates\n       *     return undefined or null.\n       * @private\n       * @this {fava.delegate.Delegate}\n       */\n      f \x3d function(var_args) {\n        return this.delegateUntilDefined(\n          method, callouts, Array.prototype.slice.call(arguments, 0));\n      };\n    } else if (proto[method].noResult) {\n      /**\n       * Function that is used as the front-end for the actual delegation\n       * when no result is expected. It uses the information in the activation\n       * object to pass the right parameters to the delegate proxy\x27s delegate\n       * method.\n       *\n       * @param {*} var_args The arguments of the function.\n       * @return {undefined} Undefined.\n       * @private\n       * @this {fava.delegate.Delegate}\n       */\n      f \x3d function(var_args) {\n        return this.delegateAndDiscard(\n            method, callouts, Array.prototype.slice.call(arguments, 0));\n      };\n    } else {\n      /**\n       * Function that is used as the front-end for the actual delegation\n       * when no special flags are set on the delegate prototype method. It\n       * uses the information in the activation object to pass the right\n       * parameters to the delegate proxy\x27s delegate method.\n       *\n       * @param {*} var_args The arguments of the function.\n       * @return {Array} Array of return values.\n       * @private\n       * @this {fava.delegate.Delegate}\n       */\n      f \x3d function(var_args) {\n        return this.delegate(method, callouts,\n                             Array.prototype.slice.call(arguments, 0));\n      };\n    }\n  } else if (!callFirst \x26\x26 !proto[method].callUntilTrue \x26\x26\n             !proto[method].callUntilDefined \x26\x26 !proto[method].noResult) {\n    // in the case of callFirst, callUntilTrue, callUntilDefined, or noResult,\n    // the delegate base prototype is expected to return the right value. For\n    // others, we have to return an empty array if there are no delegates\n    // implementing the method\n    f \x3d fava.delegate.Delegate.emptyDelegate_;\n  } else {\n    f \x3d null;\n  }\n  return f;\n};\n\n\n/**\n * The function used in the case of a delegated method for which none of\n * the delegate classes provides an implementation, when the delegated\n * method is neither callFirst nor callUntilTrue.\n * @return {!Array\x3cObject\x3e} an empty array.\n * @private\n */\nfava.delegate.Delegate.emptyDelegate_ \x3d function() {\n  return [];\n};\n\n\n/**\n * The method that does the actual work of delegating. Each of the delegates\n * is called and its result is added to the array that is returned.\n *\n * @param {string} method The method to call in the delegate.\n * @param {Array\x3cnumber\x3e} callouts The list of indices of delegates that\n *     implement the method.\n * @param {Array} args The arguments to pass to the method.\n * @return {!Array} The array of values returned by the delegates.\n */\nfava.delegate.Delegate.prototype.delegate \x3d function(method, callouts, args) {\n  var results \x3d [];\n\n  for (var i \x3d 0; i \x3c callouts.length; ++i) {\n    var delegate \x3d this.delegates_[callouts[i]];\n    results.push(delegate ? delegate[method].apply(delegate, args) :\n                 this.delegateClasses_[callouts[i]].prototype[method].apply(\n                     this, args));\n  }\n  return results;\n};\n\n\n/**\n * The method that does the actual work of delegating when no results are\n * expected. Each of the delegates is called.\n *\n * @param {string} method The method to call in the delegate.\n * @param {Array\x3cnumber\x3e} callouts The list of indices of delegates that\n *     implement the method.\n * @param {Array} args The arguments to pass to the method.\n */\nfava.delegate.Delegate.prototype.delegateAndDiscard \x3d function(\n    method, callouts, args) {\n  for (var i \x3d 0; i \x3c callouts.length; ++i) {\n    var delegate \x3d this.delegates_[callouts[i]];\n    if (delegate) {\n      delegate[method].apply(delegate, args);\n    } else {\n      this.delegateClasses_[callouts[i]].prototype[method].apply(this, args);\n    }\n  }\n};\n\n\n/**\n * The method that does the actual work of delegating until one of the\n * delegates returns true.\n *\n * @param {string} method The method to call in the delegate.\n * @param {Array\x3cnumber\x3e} callouts The list of indices of delegates that\n *     implement the method.\n * @param {Array} args The arguments to pass to the method.\n * @return {*} the value that the delegate returned if it evaluates to true\n *     in a boolean context, otherwise false.\n */\nfava.delegate.Delegate.prototype.delegateUntilTrue \x3d function(\n    method, callouts, args) {\n\n  for (var i \x3d 0; i \x3c callouts.length; ++i) {\n    var delegate \x3d this.delegates_[callouts[i]];\n    var ret \x3d delegate ?\n        delegate[method].apply(delegate, args) :\n        this.delegateClasses_[callouts[i]].prototype[method].apply(\n            this, args);\n    if (ret) {\n      return ret;\n    }\n  }\n  return false;\n};\n\n\n/**\n * The method that does the actual work of delegating until one of the\n * delegates returns a value that is not null or undefined.\n *\n * @param {string} method The method to call in the delegate.\n * @param {Array\x3cnumber\x3e} callouts The list of indices of delegates that\n *     implement the method.\n * @param {Array} args The arguments to pass to the method.\n * @return {Object|undefined} the value that the delegate returned if it is\n *     defined, otherwise undefined.\n */\nfava.delegate.Delegate.prototype.delegateUntilDefined \x3d function(\n    method, callouts, args) {\n\n  for (var i \x3d 0; i \x3c callouts.length; ++i) {\n    var delegate \x3d this.delegates_[callouts[i]];\n    var ret \x3d delegate ?\n        delegate[method].apply(delegate, args) :\n        this.delegateClasses_[callouts[i]].prototype[method].apply(\n            this, args);\n    if (goog.isDefAndNotNull(ret)) {\n      return ret;\n    }\n  }\n};\n\n\n/**\n * Locate a delegate of the specified class. This can be called by delegators\n * to enable mods to locate their instances that are associated with the\n * delegator. E.g.:\n *\n * \x3cpre\x3e\n * pinto.whatever.Something.prototype.findDelegate \x3d function(delegateClass) {\n *   return this.delegate_.findDelegate(delegateClass);\n * };\n * \x3c/pre\x3e\n *\n * @param {!Function} delegateClass The class of object to find.\n * @return {fava.delegate.Delegate?} The found delegate, or null if not found.\n */\nfava.delegate.Delegate.prototype.findDelegate \x3d function(delegateClass) {\n  if (this.delegates_) {\n    for (var i \x3d 0; i \x3c this.delegates_.length; ++i) {\n      if (this.delegates_[i] instanceof delegateClass) {\n        return this.delegates_[i];\n      }\n    }\n  }\n  return null;\n};\n\n\n/**\n * Creates a delegate method.\n * @return {!Function} The new, empty delegate method.\n */\nfava.delegate.Delegate.createMethod \x3d function() {\n  return function() {};\n};\n\n\n/**\n * Sets the calling convention on the method to callUntilTrue.  If no method is\n * provided, a new default is created.\n *\n * @param {!Function\x3d} opt_method Delegate method to modify.\n * @return {!Function} The delegate method with the calling convention set.\n */\nfava.delegate.Delegate.callUntilTrue \x3d function(opt_method) {\n  var method \x3d opt_method ? opt_method : function() {};\n  method.callUntilTrue \x3d true;\n  return method;\n};\n\n\n/**\n * Sets the calling convention on a delegate method to callUntilDefined.\n * If no method is provided, a new default is created.\n *\n * @param {!Function\x3d} opt_method Delegate method to modify.\n * @return {!Function} The delegate method with the calling convention set.\n */\nfava.delegate.Delegate.callUntilDefined \x3d function(opt_method) {\n  var method \x3d opt_method ? opt_method : function() {};\n  method.callUntilDefined \x3d true;\n  return method;\n};\n\n\n/**\n * Sets the calling convention on a delegate method to callFirst.\n * If no method is provided, a new default is created.\n *\n * @param {!Function\x3d} opt_method Delegate method to modify.\n * @return {!Function} The delegate method with the calling convention set.\n */\nfava.delegate.Delegate.callFirst \x3d function(opt_method) {\n  var method \x3d opt_method ? opt_method : function() {};\n  method.callFirst \x3d true;\n  return method;\n};\n\n\n/**\n * Sets the calling convention on a delegate method to noResult.\n * If no method is provided, a new default is created.\n *\n * @param {!Function\x3d} opt_method Delegate method to modify.\n * @return {!Function} The delegate method with the calling convention set.\n */\nfava.delegate.Delegate.noResult \x3d function(opt_method) {\n  var method \x3d opt_method ? opt_method : function() {};\n  method.noResult \x3d true;\n  return method;\n};\n\n\n/**\n * This function exists solely to tell the compiler about the various\n * calling convention properties that can be set on delegated methods.\n * @private\n */\nfava.delegate.Delegate.prototype.randomTemplateFunction_ \x3d function() {};\n\n\n/**\n * @type {boolean}\n */\nfava.delegate.Delegate.prototype.randomTemplateFunction_.callFirst;\n\n\n/**\n * @type {boolean}\n */\nfava.delegate.Delegate.prototype.randomTemplateFunction_.callUntilTrue;\n\n\n/**\n * @type {boolean}\n */\nfava.delegate.Delegate.prototype.randomTemplateFunction_.callUntilDefined;\n\n\n/**\n * @type {boolean}\n */\nfava.delegate.Delegate.prototype.randomTemplateFunction_.noResult;\n\n//# sourceURL\x3dhttps://qs/javascript/apps/fava/delegate/delegate.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/fava/delegate/delegator.js";
eval("// Copyright 2008 Google Inc. All rights reserved.\n\n/**\n * @fileoverview A helper that things using fava.delegate.Delegate can use\n * to get common operations.\n *\n * @author Adam de Boor (adeboor@google.com)\n */\ngoog.provide(\x27fava.delegate.Delegator\x27);\n\ngoog.require(\x27fava.delegate.Delegate\x27);\ngoog.require(\x27goog.asserts\x27);\n\n/**\n * The delegator must call this in its constructor.\n * @param {Object} delegator The delegator.\n */\nfava.delegate.Delegator.makeDelegator \x3d function(delegator) {\n  // if an instance is of a class where more than one class in its ancestry is\n  // a Delegator, we can be called multiple times, but\n  // fava.delegate.Delegate.create() handles this properly, so here we just\n  // need to check whether we\x27ve already constructed a delegate for the\n  // instance.\n  if (!delegator.delegate_) {\n    /**\n     * The delegate object for the instance, as constructed with\n     * fava.delegate.Delegate.create\n     * @type {fava.delegate.Delegate}\n     * @private\n     */\n    delegator.delegate_ \x3d fava.delegate.Delegate.create(delegator);\n\n    if (!delegator.findDelegate) {\n      delegator.findDelegate \x3d fava.delegate.Delegator.findDelegate;\n    } else {\n      goog.asserts.assert(delegator.findDelegate \x3d\x3d\n          fava.delegate.Delegator.findDelegate,\n              \x27conflicting definitions of findDelegate\x27);\n    }\n  }\n};\n\n\n/**\n * Find the delegate instance for this object that is of the specified class.\n * This allows a mod to talk to itself, through an object that the mod has\n * hooked, by finding the mod-defined delegate object associated with the\n * base instance and then communicating with that instance.\n *\n * @this {{delegate_: fava.delegate.Delegate}}\n * @param {!Function} delegateClass The class that was registered with this\n *     object\x27s constructor via fava.delegate.Delegate.registerDelegate.\n * @return {fava.delegate.Delegate?} the delegate instance, or null if the\n *     specified class wasn\x27t actually registered.\n */\nfava.delegate.Delegator.findDelegate \x3d function(delegateClass) {\n  return this.delegate_.findDelegate(delegateClass);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/apps/fava/delegate/delegator.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/structs/map.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Datastructure: Hash Map.\n *\n * @author arv@google.com (Erik Arvidsson)\n * @author jonp@google.com (Jon Perlow) Optimized for IE6\n *\n * This file contains an implementation of a Map structure. It implements a lot\n * of the methods used in goog.structs so those functions work on hashes. This\n * is best suited for complex key types. For simple keys such as numbers and\n * strings consider using the lighter-weight utilities in goog.object.\n * MOE:begin_intracomment_strip\n *\n * NOTE(flan): Internally, key types are NOT actually cast to\n * strings. Some people actually rely on this behavior even though it\n * is incorrect. For more information, see http://b/5622311.\n *\n * NOTE(flan): Erik Corry (erikcorry) from the V8 team went over this\n * class with me to help look for simplifications and\n * optimizations. In the end, he didn\x27t come up with very much. Erik\n * explained that \x22for (k in o)\x22 is not optimized in Crankshaft\n * because it needs to look up properties in the whole prototype\n * chain. It also needs to return the keys in order. Thus keeping an\n * array of keys is actually much more efficient.\n *\n * Likewise, one option to iterate safely with \x22for (k in o)\x22 is to\n * prefix the keys with some character, like \x27:\x27. This can create a\n * lot of strings that didn\x27t exist before. In Closure Labs,\n * goog.labs.structs.Map uses extra arrays to store non-safe keys and\n * values.\n *\n * Thus, there are not a lot of reasonable simplifications that can be\n * done here without impacting performance.\n *\n * TODO(chrishenry): Create some performance benchmarks for common\n * operations.\n * MOE:end_intracomment_strip\n */\n\n\ngoog.provide(\x27goog.structs.Map\x27);\n\ngoog.require(\x27goog.iter.Iterator\x27);\ngoog.require(\x27goog.iter.StopIteration\x27);\n\n\n\n/**\n * Class for Hash Map datastructure.\n * @param {*\x3d} opt_map Map or Object to initialize the map with.\n * @param {...*} var_args If 2 or more arguments are present then they\n *     will be used as key-value pairs.\n * @constructor\n * @template K, V\n * @deprecated This type is misleading: use ES6 Map instead.\n */\ngoog.structs.Map \x3d function(opt_map, var_args) {\n\n  /**\n   * Underlying JS object used to implement the map.\n   * @private {!Object}\n   */\n  this.map_ \x3d {};\n\n  /**\n   * An array of keys. This is necessary for two reasons:\n   *   1. Iterating the keys using for (var key in this.map_) allocates an\n   *      object for every key in IE which is really bad for IE6 GC perf.\n   *   2. Without a side data structure, we would need to escape all the keys\n   *      as that would be the only way we could tell during iteration if the\n   *      key was an internal key or a property of the object.\n   *\n   * This array can contain deleted keys so it\x27s necessary to check the map\n   * as well to see if the key is still in the map (this doesn\x27t require a\n   * memory allocation in IE).\n   * @private {!Array\x3cstring\x3e}\n   */\n  this.keys_ \x3d [];\n\n  /**\n   * The number of key value pairs in the map.\n   * @private {number}\n   */\n  this.count_ \x3d 0;\n\n  /**\n   * Version used to detect changes while iterating.\n   * @private {number}\n   */\n  this.version_ \x3d 0;\n\n  var argLength \x3d arguments.length;\n\n  if (argLength \x3e 1) {\n    if (argLength % 2) {\n      throw new Error(\x27Uneven number of arguments\x27);\n    }\n    for (var i \x3d 0; i \x3c argLength; i +\x3d 2) {\n      this.set(arguments[i], arguments[i + 1]);\n    }\n  } else if (opt_map) {\n    this.addAll(/** @type {!Object} */ (opt_map));\n  }\n};\n\n\n/**\n * @return {number} The number of key-value pairs in the map.\n */\ngoog.structs.Map.prototype.getCount \x3d function() {\n  return this.count_;\n};\n\n\n/**\n * Returns the values of the map.\n * @return {!Array\x3cV\x3e} The values in the map.\n */\ngoog.structs.Map.prototype.getValues \x3d function() {\n  this.cleanupKeysArray_();\n\n  var rv \x3d [];\n  for (var i \x3d 0; i \x3c this.keys_.length; i++) {\n    var key \x3d this.keys_[i];\n    rv.push(this.map_[key]);\n  }\n  return rv;\n};\n\n\n/**\n * Returns the keys of the map.\n * @return {!Array\x3cstring\x3e} Array of string values.\n */\ngoog.structs.Map.prototype.getKeys \x3d function() {\n  this.cleanupKeysArray_();\n  return /** @type {!Array\x3cstring\x3e} */ (this.keys_.concat());\n};\n\n\n/**\n * Whether the map contains the given key.\n * @param {*} key The key to check for.\n * @return {boolean} Whether the map contains the key.\n */\ngoog.structs.Map.prototype.containsKey \x3d function(key) {\n  return goog.structs.Map.hasKey_(this.map_, key);\n};\n\n\n/**\n * Whether the map contains the given value. This is O(n).\n * @param {V} val The value to check for.\n * @return {boolean} Whether the map contains the value.\n */\ngoog.structs.Map.prototype.containsValue \x3d function(val) {\n  for (var i \x3d 0; i \x3c this.keys_.length; i++) {\n    var key \x3d this.keys_[i];\n    if (goog.structs.Map.hasKey_(this.map_, key) \x26\x26 this.map_[key] \x3d\x3d val) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Whether this map is equal to the argument map.\n * @param {goog.structs.Map} otherMap The map against which to test equality.\n * @param {function(V, V): boolean\x3d} opt_equalityFn Optional equality function\n *     to test equality of values. If not specified, this will test whether\n *     the values contained in each map are identical objects.\n * @return {boolean} Whether the maps are equal.\n */\ngoog.structs.Map.prototype.equals \x3d function(otherMap, opt_equalityFn) {\n  if (this \x3d\x3d\x3d otherMap) {\n    return true;\n  }\n\n  if (this.count_ !\x3d otherMap.getCount()) {\n    return false;\n  }\n\n  var equalityFn \x3d opt_equalityFn || goog.structs.Map.defaultEquals;\n\n  this.cleanupKeysArray_();\n  for (var key, i \x3d 0; key \x3d this.keys_[i]; i++) {\n    if (!equalityFn(this.get(key), otherMap.get(key))) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n\n/**\n * Default equality test for values.\n * @param {*} a The first value.\n * @param {*} b The second value.\n * @return {boolean} Whether a and b reference the same object.\n */\ngoog.structs.Map.defaultEquals \x3d function(a, b) {\n  return a \x3d\x3d\x3d b;\n};\n\n\n/**\n * @return {boolean} Whether the map is empty.\n */\ngoog.structs.Map.prototype.isEmpty \x3d function() {\n  return this.count_ \x3d\x3d 0;\n};\n\n\n/**\n * Removes all key-value pairs from the map.\n */\ngoog.structs.Map.prototype.clear \x3d function() {\n  this.map_ \x3d {};\n  this.keys_.length \x3d 0;\n  this.count_ \x3d 0;\n  this.version_ \x3d 0;\n};\n\n\n/**\n * Removes a key-value pair based on the key. This is O(logN) amortized due to\n * updating the keys array whenever the count becomes half the size of the keys\n * in the keys array.\n * @param {*} key  The key to remove.\n * @return {boolean} Whether object was removed.\n */\ngoog.structs.Map.prototype.remove \x3d function(key) {\n  if (goog.structs.Map.hasKey_(this.map_, key)) {\n    delete this.map_[key];\n    this.count_--;\n    this.version_++;\n\n    // clean up the keys array if the threshold is hit\n    if (this.keys_.length \x3e 2 * this.count_) {\n      this.cleanupKeysArray_();\n    }\n\n    return true;\n  }\n  return false;\n};\n\n\n/**\n * Cleans up the temp keys array by removing entries that are no longer in the\n * map.\n * @private\n */\ngoog.structs.Map.prototype.cleanupKeysArray_ \x3d function() {\n  if (this.count_ !\x3d this.keys_.length) {\n    // First remove keys that are no longer in the map.\n    var srcIndex \x3d 0;\n    var destIndex \x3d 0;\n    while (srcIndex \x3c this.keys_.length) {\n      var key \x3d this.keys_[srcIndex];\n      if (goog.structs.Map.hasKey_(this.map_, key)) {\n        this.keys_[destIndex++] \x3d key;\n      }\n      srcIndex++;\n    }\n    this.keys_.length \x3d destIndex;\n  }\n\n  if (this.count_ !\x3d this.keys_.length) {\n    // If the count still isn\x27t correct, that means we have duplicates. This can\n    // happen when the same key is added and removed multiple times. Now we have\n    // to allocate one extra Object to remove the duplicates. This could have\n    // been done in the first pass, but in the common case, we can avoid\n    // allocating an extra object by only doing this when necessary.\n    var seen \x3d {};\n    var srcIndex \x3d 0;\n    var destIndex \x3d 0;\n    while (srcIndex \x3c this.keys_.length) {\n      var key \x3d this.keys_[srcIndex];\n      if (!(goog.structs.Map.hasKey_(seen, key))) {\n        this.keys_[destIndex++] \x3d key;\n        seen[key] \x3d 1;\n      }\n      srcIndex++;\n    }\n    this.keys_.length \x3d destIndex;\n  }\n};\n\n\n/**\n * Returns the value for the given key.  If the key is not found and the default\n * value is not given this will return `undefined`.\n * @param {*} key The key to get the value for.\n * @param {DEFAULT\x3d} opt_val The value to return if no item is found for the\n *     given key, defaults to undefined.\n * @return {V|DEFAULT} The value for the given key.\n * @template DEFAULT\n */\ngoog.structs.Map.prototype.get \x3d function(key, opt_val) {\n  if (goog.structs.Map.hasKey_(this.map_, key)) {\n    return this.map_[key];\n  }\n  return opt_val;\n};\n\n\n/**\n * Adds a key-value pair to the map.\n * @param {*} key The key.\n * @param {V} value The value to add.\n * @return {*} Some subclasses return a value.\n */\ngoog.structs.Map.prototype.set \x3d function(key, value) {\n  if (!(goog.structs.Map.hasKey_(this.map_, key))) {\n    this.count_++;\n    // TODO(johnlenz): This class lies, it claims to return an array of string\n    // keys, but instead returns the original object used.\n    this.keys_.push(/** @type {?} */ (key));\n    // Only change the version if we add a new key.\n    this.version_++;\n  }\n  this.map_[key] \x3d value;\n};\n\n\n/**\n * Adds multiple key-value pairs from another goog.structs.Map or Object.\n * @param {?Object} map Object containing the data to add.\n */\ngoog.structs.Map.prototype.addAll \x3d function(map) {\n  if (map instanceof goog.structs.Map) {\n    var keys \x3d map.getKeys();\n    for (var i \x3d 0; i \x3c keys.length; i++) {\n      this.set(keys[i], map.get(keys[i]));\n    }\n  } else {\n    for (var key in map) {\n      this.set(key, map[key]);\n    }\n  }\n};\n\n\n/**\n * Calls the given function on each entry in the map.\n * @param {function(this:T, V, K, goog.structs.Map\x3cK,V\x3e)} f\n * @param {T\x3d} opt_obj The value of \x22this\x22 inside f.\n * @template T\n */\ngoog.structs.Map.prototype.forEach \x3d function(f, opt_obj) {\n  var keys \x3d this.getKeys();\n  for (var i \x3d 0; i \x3c keys.length; i++) {\n    var key \x3d keys[i];\n    var value \x3d this.get(key);\n    f.call(opt_obj, value, key, this);\n  }\n};\n\n\n/**\n * Clones a map and returns a new map.\n * @return {!goog.structs.Map} A new map with the same key-value pairs.\n */\ngoog.structs.Map.prototype.clone \x3d function() {\n  return new goog.structs.Map(this);\n};\n\n\n/**\n * Returns a new map in which all the keys and values are interchanged\n * (keys become values and values become keys). If multiple keys map to the\n * same value, the chosen transposed value is implementation-dependent.\n *\n * It acts very similarly to {goog.object.transpose(Object)}.\n *\n * @return {!goog.structs.Map} The transposed map.\n */\ngoog.structs.Map.prototype.transpose \x3d function() {\n  var transposed \x3d new goog.structs.Map();\n  for (var i \x3d 0; i \x3c this.keys_.length; i++) {\n    var key \x3d this.keys_[i];\n    var value \x3d this.map_[key];\n    transposed.set(value, key);\n  }\n\n  return transposed;\n};\n\n\n/**\n * @return {!Object} Object representation of the map.\n */\ngoog.structs.Map.prototype.toObject \x3d function() {\n  this.cleanupKeysArray_();\n  var obj \x3d {};\n  for (var i \x3d 0; i \x3c this.keys_.length; i++) {\n    var key \x3d this.keys_[i];\n    obj[key] \x3d this.map_[key];\n  }\n  return obj;\n};\n\n\n/**\n * Returns an iterator that iterates over the keys in the map.  Removal of keys\n * while iterating might have undesired side effects.\n * @return {!goog.iter.Iterator} An iterator over the keys in the map.\n */\ngoog.structs.Map.prototype.getKeyIterator \x3d function() {\n  return this.__iterator__(true);\n};\n\n\n/**\n * Returns an iterator that iterates over the values in the map.  Removal of\n * keys while iterating might have undesired side effects.\n * @return {!goog.iter.Iterator} An iterator over the values in the map.\n */\ngoog.structs.Map.prototype.getValueIterator \x3d function() {\n  return this.__iterator__(false);\n};\n\n\n/**\n * Returns an iterator that iterates over the values or the keys in the map.\n * This throws an exception if the map was mutated since the iterator was\n * created.\n * @param {boolean\x3d} opt_keys True to iterate over the keys. False to iterate\n *     over the values.  The default value is false.\n * @return {!goog.iter.Iterator} An iterator over the values or keys in the map.\n */\ngoog.structs.Map.prototype.__iterator__ \x3d function(opt_keys) {\n  // Clean up keys to minimize the risk of iterating over dead keys.\n  this.cleanupKeysArray_();\n\n  var i \x3d 0;\n  var version \x3d this.version_;\n  var selfObj \x3d this;\n\n  var newIter \x3d new goog.iter.Iterator;\n  newIter.next \x3d function() {\n    if (version !\x3d selfObj.version_) {\n      throw new Error(\x27The map has changed since the iterator was created\x27);\n    }\n    if (i \x3e\x3d selfObj.keys_.length) {\n      throw goog.iter.StopIteration;\n    }\n    var key \x3d selfObj.keys_[i++];\n    return opt_keys ? key : selfObj.map_[key];\n  };\n  return newIter;\n};\n\n\n/**\n * Safe way to test for hasOwnProperty.  It even allows testing for\n * \x27hasOwnProperty\x27.\n * @param {!Object} obj The object to test for presence of the given key.\n * @param {*} key The key to check for.\n * @return {boolean} Whether the object has the key.\n * @private\n */\ngoog.structs.Map.hasKey_ \x3d function(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/structs/map.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/structs/simplepool.js";
eval("// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Datastructure: Pool.\n *\n * @author jonp@google.com (Jon Perlow)\n * @author pupius@google.com (Daniel Pupius)\n *\n * A generic class for handling pools of objects that is more efficient than\n * goog.structs.Pool because it doesn\x27t maintain a list of objects that are in\n * use. See constructor comment.\n */\n\n\ngoog.provide(\x27goog.structs.SimplePool\x27);\n\ngoog.require(\x27goog.Disposable\x27);\n\n\n\n/**\n * A generic pool class. Simpler and more efficient than goog.structs.Pool\n * because it doesn\x27t maintain a list of objects that are in use. This class\n * has constant overhead and doesn\x27t create any additional objects as part of\n * the pool management after construction time.\n *\n * IMPORTANT: If the objects being pooled are arrays or maps that can have\n * unlimited number of properties, they need to be cleaned before being\n * returned to the pool.\n *\n * Also note that {@see goog.object.clean} actually allocates an array to clean\n * the object passed to it, so simply using this function would defy the\n * purpose of using the pool.\n *\n * @param {number} initialCount Initial number of objects to populate the free\n *     pool at construction time.\n * @param {number} maxCount Maximum number of objects to keep in the free pool.\n * @constructor\n * @extends {goog.Disposable}\n * @template T\n */\ngoog.structs.SimplePool \x3d function(initialCount, maxCount) {\n  goog.Disposable.call(this);\n\n  /**\n   * Function for overriding createObject. The avoids a common case requiring\n   * subclassing this class.\n   * @private {Function}\n   */\n  this.createObjectFn_ \x3d null;\n\n  /**\n   * Function for overriding disposeObject. The avoids a common case requiring\n   * subclassing this class.\n   * @private {Function}\n   */\n  this.disposeObjectFn_ \x3d null;\n\n  /**\n   * Maximum number of objects allowed\n   * @private {number}\n   */\n  this.maxCount_ \x3d maxCount;\n\n  /**\n   * Queue used to store objects that are currently in the pool and available\n   * to be used.\n   * @private {Array\x3cT\x3e}\n   */\n  this.freeQueue_ \x3d [];\n\n  this.createInitial_(initialCount);\n};\ngoog.inherits(goog.structs.SimplePool, goog.Disposable);\n\n\n/**\n * Sets the `createObject` function which is used for creating a new\n * object in the pool.\n * @param {Function} createObjectFn Create object function which returns the\n *     newly created object.\n */\ngoog.structs.SimplePool.prototype.setCreateObjectFn \x3d function(createObjectFn) {\n  this.createObjectFn_ \x3d createObjectFn;\n};\n\n\n/**\n * Sets the `disposeObject` function which is used for disposing of an\n * object in the pool.\n * @param {Function} disposeObjectFn Dispose object function which takes the\n *     object to dispose as a parameter.\n */\ngoog.structs.SimplePool.prototype.setDisposeObjectFn \x3d function(\n    disposeObjectFn) {\n  this.disposeObjectFn_ \x3d disposeObjectFn;\n};\n\n\n/**\n * Gets an unused object from the the pool, if there is one available,\n * otherwise creates a new one.\n * @return {T} An object from the pool or a new one if necessary.\n */\ngoog.structs.SimplePool.prototype.getObject \x3d function() {\n  if (this.freeQueue_.length) {\n    return this.freeQueue_.pop();\n  }\n  return this.createObject();\n};\n\n\n/**\n * Returns an object to the pool so that it can be reused. If the pool is\n * already full, the object is disposed instead.\n * @param {T} obj The object to release.\n */\ngoog.structs.SimplePool.prototype.releaseObject \x3d function(obj) {\n  if (this.freeQueue_.length \x3c this.maxCount_) {\n    this.freeQueue_.push(obj);\n  } else {\n    this.disposeObject(obj);\n  }\n};\n\n\n/**\n * Populates the pool with initialCount objects.\n * @param {number} initialCount The number of objects to add to the pool.\n * @private\n */\ngoog.structs.SimplePool.prototype.createInitial_ \x3d function(initialCount) {\n  if (initialCount \x3e this.maxCount_) {\n    throw new Error(\n        \x27[goog.structs.SimplePool] Initial cannot be greater than max\x27);\n  }\n  for (var i \x3d 0; i \x3c initialCount; i++) {\n    this.freeQueue_.push(this.createObject());\n  }\n};\n\n\n/**\n * Should be overridden by sub-classes to return an instance of the object type\n * that is expected in the pool.\n * @return {T} The created object.\n */\ngoog.structs.SimplePool.prototype.createObject \x3d function() {\n  if (this.createObjectFn_) {\n    return this.createObjectFn_();\n  } else {\n    return {};\n  }\n};\n\n\n/**\n * Should be overrideen to dispose of an object. Default implementation is to\n * remove all of the object\x27s members, which should render it useless. Calls the\n *  object\x27s dispose method, if available.\n * @param {T} obj The object to dispose.\n */\ngoog.structs.SimplePool.prototype.disposeObject \x3d function(obj) {\n  if (this.disposeObjectFn_) {\n    this.disposeObjectFn_(obj);\n  } else if (goog.isObject(obj)) {\n    if (goog.isFunction(obj.dispose)) {\n      obj.dispose();\n    } else {\n      for (var i in obj) {\n        delete obj[i];\n      }\n    }\n  }\n};\n\n\n/**\n * Disposes of the pool and all objects currently held in the pool.\n * @override\n * @protected\n */\ngoog.structs.SimplePool.prototype.disposeInternal \x3d function() {\n  goog.structs.SimplePool.superClass_.disposeInternal.call(this);\n  // Call disposeObject on each object held by the pool.\n  var freeQueue \x3d this.freeQueue_;\n  while (freeQueue.length) {\n    this.disposeObject(freeQueue.pop());\n  }\n  delete this.freeQueue_;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/structs/simplepool.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/debug/tracer.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Definition of the Tracer class and associated classes.\n *\n * @author jonp@google.com (Jon Perlow)\n * @see ../demos/tracer.html\n */\n\ngoog.provide(\x27goog.debug.StopTraceDetail\x27);\ngoog.provide(\x27goog.debug.Trace\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.debug.Logger\x27);\ngoog.require(\x27goog.iter\x27);\ngoog.require(\x27goog.log\x27);\ngoog.require(\x27goog.structs.Map\x27);\ngoog.require(\x27goog.structs.SimplePool\x27);\n\n\n\n/**\n * Class used for singleton goog.debug.Trace.  Used for timing slow points in\n * the code. Based on the java Tracer class but optimized for javascript.\n * See com.google.common.tracing.Tracer.\n * It is also possible to bridge from this class to other tracer classes via\n * adding listeners.\n * @constructor\n * @private\n */\ngoog.debug.Trace_ \x3d function() {\n\n  /**\n   * Events in order.\n   * @private {!Array\x3c!goog.debug.Trace_.Event_\x3e}\n   */\n  this.events_ \x3d [];\n\n  /**\n   * Outstanding events that have started but haven\x27t yet ended. The keys are\n   * numeric ids and the values are goog.debug.Trace_.Event_ objects.\n   * @private {!goog.structs.Map\x3cnumber, !goog.debug.Trace_.Event_\x3e}\n   */\n  this.outstandingEvents_ \x3d new goog.structs.Map();\n\n  /**\n   * Start time of the event trace\n   * @private {number}\n   */\n  this.startTime_ \x3d 0;\n\n  /**\n   * Cummulative overhead of calls to startTracer\n   * @private {number}\n   */\n  this.tracerOverheadStart_ \x3d 0;\n\n  /**\n   * Cummulative overhead of calls to endTracer\n   * @private {number}\n   */\n  this.tracerOverheadEnd_ \x3d 0;\n\n  /**\n   * Cummulative overhead of calls to addComment\n   * @private {number}\n   */\n  this.tracerOverheadComment_ \x3d 0;\n\n  /**\n   * Keeps stats on different types of tracers. The keys are strings and the\n   * values are goog.debug.Stat\n   * @private {!goog.structs.Map}\n   */\n  this.stats_ \x3d new goog.structs.Map();\n\n  /**\n   * Total number of traces created in the trace.\n   * @private {number}\n   */\n  this.tracerCount_ \x3d 0;\n\n  /**\n   * Total number of comments created in the trace.\n   * @private {number}\n   */\n  this.commentCount_ \x3d 0;\n\n  /**\n   * Next id to use for the trace.\n   * @private {number}\n   */\n  this.nextId_ \x3d 1;\n\n  /**\n   * A pool for goog.debug.Trace_.Event_ objects so we don\x27t keep creating and\n   * garbage collecting these (which is very expensive in IE6).\n   * @private {!goog.structs.SimplePool}\n   */\n  this.eventPool_ \x3d new goog.structs.SimplePool(0, 4000);\n  this.eventPool_.createObject \x3d function() {\n    return new goog.debug.Trace_.Event_();\n  };\n\n\n  /**\n   * A pool for goog.debug.Trace_.Stat_ objects so we don\x27t keep creating and\n   * garbage collecting these (which is very expensive in IE6).\n   * @private {!goog.structs.SimplePool}\n   */\n  this.statPool_ \x3d new goog.structs.SimplePool(0, 50);\n  this.statPool_.createObject \x3d function() {\n    return new goog.debug.Trace_.Stat_();\n  };\n\n  var self \x3d this;\n\n  /** @private {!goog.structs.SimplePool} */\n  this.idPool_ \x3d new goog.structs.SimplePool(0, 2000);\n\n  // TODO(nicksantos): SimplePool is supposed to only return objects.\n  // Reconcile this so that we don\x27t have to cast to number below.\n  this.idPool_.createObject \x3d function() { return String(self.nextId_++); };\n  this.idPool_.disposeObject \x3d function(obj) {};\n\n  /**\n   * Default threshold below which a tracer shouldn\x27t be reported\n   * @private {number}\n   */\n  this.defaultThreshold_ \x3d 3;\n\n  /**\n   * An object containing three callback functions to be called when starting or\n   * stopping a trace, or creating a comment trace.\n   * @private {!goog.debug.Trace_.TracerCallbacks}\n   */\n  this.traceCallbacks_ \x3d {};\n};\n\n\n/**\n * Logger for the tracer\n * @private @const {?goog.log.Logger}\n */\ngoog.debug.Trace_.prototype.logger_ \x3d goog.log.getLogger(\x27goog.debug.Trace\x27);\n\n\n/**\n * Maximum size of the trace before we discard events\n * @type {number}\n */\ngoog.debug.Trace_.prototype.MAX_TRACE_SIZE \x3d 1000;\n\n\n/**\n * Event type supported by tracer\n * @enum {number}\n */\ngoog.debug.Trace_.EventType \x3d {\n  /**\n   * Start event type\n   */\n  START: 0,\n\n  /**\n   * Stop event type\n   */\n  STOP: 1,\n\n  /**\n   * Comment event type\n   */\n  COMMENT: 2\n};\n\n\n\n/**\n * Class to keep track of a stat of a single tracer type. Stores the count\n * and cumulative time.\n * @constructor\n * @private\n */\ngoog.debug.Trace_.Stat_ \x3d function() {\n  /**\n   * Number of tracers\n   * @type {number}\n   */\n  this.count \x3d 0;\n\n  /**\n   * Cumulative time of traces\n   * @type {number}\n   */\n  this.time \x3d 0;\n\n  /**\n   * Total number of allocations for this tracer type\n   * @type {number}\n   */\n  this.varAlloc \x3d 0;\n};\n\n\n/**\n * @type {string|null|undefined}\n */\ngoog.debug.Trace_.Stat_.prototype.type;\n\n\n/**\n * @return {string} A string describing the tracer stat.\n * @override\n */\ngoog.debug.Trace_.Stat_.prototype.toString \x3d function() {\n  var sb \x3d [];\n  sb.push(\n      this.type, \x27 \x27, this.count, \x27 (\x27, Math.round(this.time * 10) / 10,\n      \x27 ms)\x27);\n  if (this.varAlloc) {\n    sb.push(\x27 [VarAlloc \x3d \x27, this.varAlloc, \x27]\x27);\n  }\n  return sb.join(\x27\x27);\n};\n\n\n\n/**\n * Private class used to encapsulate a single event, either the start or stop\n * of a tracer.\n * @constructor\n * @private\n */\ngoog.debug.Trace_.Event_ \x3d function() {\n  // the fields are different for different events - see usage in code\n};\n\n\n/**\n * @type {string|null|undefined}\n */\ngoog.debug.Trace_.Event_.prototype.type;\n\n\n/**\n * Returns a formatted string for the event.\n * @param {number} startTime The start time of the trace to generate relative\n * times.\n * @param {number} prevTime The completion time of the previous event or -1.\n * @param {string} indent Extra indent for the message\n *     if there was no previous event.\n * @return {string} The formatted tracer string.\n */\ngoog.debug.Trace_.Event_.prototype.toTraceString \x3d function(\n    startTime, prevTime, indent) {\n  var sb \x3d [];\n\n  if (prevTime \x3d\x3d -1) {\n    sb.push(\x27    \x27);\n  } else {\n    sb.push(goog.debug.Trace_.longToPaddedString_(this.eventTime - prevTime));\n  }\n\n  sb.push(\x27 \x27, goog.debug.Trace_.formatTime_(this.eventTime - startTime));\n  if (this.eventType \x3d\x3d goog.debug.Trace_.EventType.START) {\n    sb.push(\x27 Start        \x27);\n  } else if (this.eventType \x3d\x3d goog.debug.Trace_.EventType.STOP) {\n    sb.push(\x27 Done \x27);\n    var delta \x3d this.stopTime - this.startTime;\n    sb.push(goog.debug.Trace_.longToPaddedString_(delta), \x27 ms \x27);\n  } else {\n    sb.push(\x27 Comment      \x27);\n  }\n\n  sb.push(indent, this);\n  if (this.totalVarAlloc \x3e 0) {\n    sb.push(\x27[VarAlloc \x27, this.totalVarAlloc, \x27] \x27);\n  }\n  return sb.join(\x27\x27);\n};\n\n\n/**\n * @return {string} A string describing the tracer event.\n * @override\n */\ngoog.debug.Trace_.Event_.prototype.toString \x3d function() {\n  if (this.type \x3d\x3d null) {\n    return this.comment;\n  } else {\n    return \x27[\x27 + this.type + \x27] \x27 + this.comment;\n  }\n};\n\n\n/**\n * A class to specify the types of the callback functions used by\n * `addTraceCallbacks`.\n * @record\n */\ngoog.debug.Trace_.TracerCallbacks \x3d function() {\n  /**\n   * A callback function to be called at `startTrace` with two parameters:\n   * a number as the started trace id and a string as the comment on the trace.\n   * @type {function(number, string)|undefined}\n   */\n  this.start;\n  /**\n   * A callback function to be called when a trace should be stopped either at\n   * `startTrace` or `clearOutstandingEvents_` with two parameters:\n   * a number as the id of the trace being stopped and an object containing\n   * extra information about stopping the trace (e.g. if it is cancelled).\n   * @type {function(number, !goog.debug.StopTraceDetail)|undefined}\n   */\n  this.stop;\n  /**\n   * A callback function to be called at `addComment` with two parameters:\n   * a string as the comment on the trace and an optional time stamp number (in\n   * milliseconds since epoch) when the comment should be added as a trace.\n   * @type {function(string, number\x3d)|undefined}\n   */\n  this.comment;\n};\n\n\n/** @private @const {!goog.debug.StopTraceDetail} */\ngoog.debug.Trace_.TRACE_CANCELLED_ \x3d {\n  wasCancelled: true\n};\n\n\n/** @private @const {!goog.debug.StopTraceDetail} */\ngoog.debug.Trace_.NORMAL_STOP_ \x3d {};\n\n\n/**\n * A function that combines two function with the same parameters in a sequence.\n * @param {!Function|undefined} fn1 The first function to be combined.\n * @param {!Function|undefined} fn2 The second function to be combined.\n * @return {!Function|undefined} A function that calls the inputs in sequence.\n * @private\n */\ngoog.debug.Trace_.TracerCallbacks.sequence_ \x3d function(fn1, fn2) {\n  return !fn1 ? fn2 : !fn2 ? fn1 : function() {\n    fn1.apply(undefined, arguments);\n    fn2.apply(undefined, arguments);\n  };\n};\n\n\n/**\n * Removes all registered callback functions. Mainly used for testing.\n */\ngoog.debug.Trace_.prototype.removeAllListeners \x3d function() {\n  this.traceCallbacks_ \x3d {};\n};\n\n\n/**\n * Adds up to three callback functions which are called on `startTracer`,\n * `stopTracer`, `clearOutstandingEvents_` and `addComment` in\n * order to bridge from the Closure tracer singleton object to any tracer class.\n * @param {!goog.debug.Trace_.TracerCallbacks} callbacks An object literal\n *   containing the callback functions.\n */\ngoog.debug.Trace_.prototype.addTraceCallbacks \x3d function(callbacks) {\n  this.traceCallbacks_.start \x3d goog.debug.Trace_.TracerCallbacks.sequence_(\n      this.traceCallbacks_.start, callbacks.start);\n  this.traceCallbacks_.stop \x3d goog.debug.Trace_.TracerCallbacks.sequence_(\n      this.traceCallbacks_.stop, callbacks.stop);\n  this.traceCallbacks_.comment \x3d goog.debug.Trace_.TracerCallbacks.sequence_(\n      this.traceCallbacks_.comment, callbacks.comment);\n};\n\n\n/**\n * Add the ability to explicitly set the start time. This is useful for example\n * for measuring initial load time where you can set a variable as soon as the\n * main page of the app is loaded and then later call this function when the\n * Tracer code has been loaded.\n * @param {number} startTime The start time to set.\n */\ngoog.debug.Trace_.prototype.setStartTime \x3d function(startTime) {\n  this.startTime_ \x3d startTime;\n};\n\n\n/**\n * Initializes and resets the current trace\n * @param {number} defaultThreshold The default threshold below which the\n * tracer output will be suppressed. Can be overridden on a per-Tracer basis.\n */\ngoog.debug.Trace_.prototype.initCurrentTrace \x3d function(defaultThreshold) {\n  this.reset(defaultThreshold);\n};\n\n\n/**\n * Clears the current trace\n */\ngoog.debug.Trace_.prototype.clearCurrentTrace \x3d function() {\n  this.reset(0);\n};\n\n\n/**\n * Clears the open traces and calls stop callback for them.\n * @private\n */\ngoog.debug.Trace_.prototype.clearOutstandingEvents_ \x3d function() {\n  if (this.traceCallbacks_.stop) {\n    goog.iter.forEach(this.outstandingEvents_, function(startEvent) {\n      this.traceCallbacks_.stop(\n          startEvent.id, goog.debug.Trace_.TRACE_CANCELLED_);\n    }, this);\n  }\n  this.outstandingEvents_.clear();\n};\n\n\n/**\n * Resets the trace.\n * @param {number} defaultThreshold The default threshold below which the\n * tracer output will be suppressed. Can be overridden on a per-Tracer basis.\n */\ngoog.debug.Trace_.prototype.reset \x3d function(defaultThreshold) {\n  this.defaultThreshold_ \x3d defaultThreshold;\n\n  this.clearOutstandingEvents_();\n  this.releaseEvents_();\n  this.startTime_ \x3d goog.debug.Trace_.now();\n  this.tracerOverheadStart_ \x3d 0;\n  this.tracerOverheadEnd_ \x3d 0;\n  this.tracerOverheadComment_ \x3d 0;\n  this.tracerCount_ \x3d 0;\n  this.commentCount_ \x3d 0;\n\n  var keys \x3d this.stats_.getKeys();\n  for (var i \x3d 0; i \x3c keys.length; i++) {\n    var key \x3d keys[i];\n    var stat \x3d this.stats_.get(key);\n    stat.count \x3d 0;\n    stat.time \x3d 0;\n    stat.varAlloc \x3d 0;\n    this.statPool_.releaseObject(/** @type {Object} */ (stat));\n  }\n  this.stats_.clear();\n};\n\n\n/**\n * @private\n */\ngoog.debug.Trace_.prototype.releaseEvents_ \x3d function() {\n  for (var i \x3d 0; i \x3c this.events_.length; i++) {\n    var event \x3d this.events_[i];\n    if (event.id) {  // Only start events have id.\n      // Only release the start event and its id if it is already stopped - this\n      // is to avoid having multiple traces with the same id.\n      if (!this.outstandingEvents_.containsKey(event.id)) {\n        this.idPool_.releaseObject(event.id);\n        this.eventPool_.releaseObject(event);\n      }\n    } else {  // Release stop and comment events.\n      this.eventPool_.releaseObject(event);\n    }\n  }\n  this.events_.length \x3d 0;\n};\n\n\n/**\n * Starts a tracer\n * @param {string} comment A comment used to identify the tracer. Does not\n *     need to be unique.\n * @param {string\x3d} opt_type Type used to identify the tracer. If a Trace is\n *     given a type (the first argument to the constructor) and multiple Traces\n *     are done on that type then a \x22TOTAL line will be produced showing the\n *     total number of traces and the sum of the time\n *     (\x22TOTAL Database 2 (37 ms)\x22 in our example). These traces should be\n *     mutually exclusive or else the sum won\x27t make sense (the time will\n *     be double counted if the second starts before the first ends).\n * @return {number} The identifier for the tracer that should be passed to the\n *     the stopTracer method.\n */\ngoog.debug.Trace_.prototype.startTracer \x3d function(comment, opt_type) {\n  var tracerStartTime \x3d goog.debug.Trace_.now();\n  var varAlloc \x3d this.getTotalVarAlloc();\n  var outstandingEventCount \x3d this.outstandingEvents_.getCount();\n  if (this.events_.length + outstandingEventCount \x3e this.MAX_TRACE_SIZE) {\n    // This is less likely and probably indicates that a lot of traces\n    // aren\x27t being closed. We want to avoid unnecessarily clearing\n    // this though in case the events do eventually finish.\n    if (outstandingEventCount \x3e this.MAX_TRACE_SIZE / 2) {\n      goog.log.warning(\n          this.logger_, \x27Giant thread trace. Clearing outstanding events.\x27);\n      this.clearOutstandingEvents_();\n    }\n    // This is the more likely case. This usually means that we\n    // either forgot to clear the trace or else we are performing a\n    // very large number of events\n    if (this.events_.length \x3e this.MAX_TRACE_SIZE / 2) {\n      goog.log.warning(\n          this.logger_, \x27Giant thread trace. Clearing to avoid memory leak.\x27);\n      this.releaseEvents_();\n    }\n  }\n\n  goog.debug.Logger.logToProfilers(\x27Start : \x27 + comment);\n\n  /** @const */\n  var event \x3d\n      /** @type {!goog.debug.Trace_.Event_} */ (this.eventPool_.getObject());\n  event.stopTime \x3d undefined;\n  event.totalVarAlloc \x3d varAlloc;\n  event.eventType \x3d goog.debug.Trace_.EventType.START;\n  event.id \x3d Number(this.idPool_.getObject());\n  event.comment \x3d comment;\n  event.type \x3d opt_type;\n  this.events_.push(event);\n  this.outstandingEvents_.set(String(event.id), event);\n  this.tracerCount_++;\n  var now \x3d goog.debug.Trace_.now();\n  event.startTime \x3d event.eventTime \x3d now;\n  this.tracerOverheadStart_ +\x3d now - tracerStartTime;\n  if (this.traceCallbacks_.start) {\n    this.traceCallbacks_.start(event.id, event.toString());\n  }\n  return event.id;\n};\n\n\n/**\n * Stops a tracer\n * @param {number|undefined|null} id The id of the tracer that is ending.\n * @param {number\x3d} opt_silenceThreshold Threshold below which the tracer is\n *    silenced.\n * @return {?number} The elapsed time for the tracer or null if the tracer\n *    identitifer was not recognized.\n */\ngoog.debug.Trace_.prototype.stopTracer \x3d function(id, opt_silenceThreshold) {\n  // this used to call goog.isDef(opt_silenceThreshold) but that causes an\n  // object allocation in IE for some reason (doh!). The following code doesn\x27t\n  // cause an allocation\n  var now \x3d goog.debug.Trace_.now();\n  var silenceThreshold;\n  if (opt_silenceThreshold \x3d\x3d\x3d 0) {\n    silenceThreshold \x3d 0;\n  } else if (opt_silenceThreshold) {\n    silenceThreshold \x3d opt_silenceThreshold;\n  } else {\n    silenceThreshold \x3d this.defaultThreshold_;\n  }\n\n  var startEvent \x3d this.outstandingEvents_.get(String(id));\n  if (startEvent \x3d\x3d null) {\n    return null;\n  }\n  goog.asserts.assertNumber(id);\n  if (this.traceCallbacks_.stop) {\n    this.traceCallbacks_.stop(Number(id), goog.debug.Trace_.NORMAL_STOP_);\n  }\n\n  this.outstandingEvents_.remove(String(id));\n\n  var stopEvent;\n  var elapsed \x3d now - startEvent.startTime;\n  if (elapsed \x3c silenceThreshold) {\n    var count \x3d this.events_.length;\n    for (var i \x3d count - 1; i \x3e\x3d 0; i--) {\n      var nextEvent \x3d this.events_[i];\n      if (nextEvent \x3d\x3d startEvent) {\n        this.events_.splice(i, 1);\n        this.idPool_.releaseObject(startEvent.id);\n        this.eventPool_.releaseObject(/** @type {Object} */ (startEvent));\n        break;\n      }\n    }\n  } else {\n    stopEvent \x3d\n        /** @type {goog.debug.Trace_.Event_} */ (this.eventPool_.getObject());\n    stopEvent.id \x3d undefined;\n    stopEvent.eventType \x3d goog.debug.Trace_.EventType.STOP;\n    stopEvent.startTime \x3d startEvent.startTime;\n    stopEvent.comment \x3d startEvent.comment;\n    stopEvent.type \x3d startEvent.type;\n    stopEvent.stopTime \x3d stopEvent.eventTime \x3d now;\n\n    this.events_.push(stopEvent);\n  }\n\n  var type \x3d startEvent.type;\n  var stat \x3d null;\n  if (type) {\n    stat \x3d this.getStat_(type);\n    stat.count++;\n    stat.time +\x3d elapsed;\n  }\n  if (stopEvent) {\n    goog.debug.Logger.logToProfilers(\x27Stop : \x27 + stopEvent.comment);\n\n    stopEvent.totalVarAlloc \x3d this.getTotalVarAlloc();\n\n    if (stat) {\n      stat.varAlloc +\x3d (stopEvent.totalVarAlloc - startEvent.totalVarAlloc);\n    }\n  }\n  var tracerFinishTime \x3d goog.debug.Trace_.now();\n  this.tracerOverheadEnd_ +\x3d tracerFinishTime - now;\n  return elapsed;\n};\n\n\n/**\n * Sets the ActiveX object that can be used to get GC tracing in IE6.\n * @param {Object} gcTracer GCTracer ActiveX object.\n */\ngoog.debug.Trace_.prototype.setGcTracer \x3d function(gcTracer) {\n  this.gcTracer_ \x3d gcTracer;\n};\n\n\n/**\n * Returns the total number of allocations since the GC stats were reset. Only\n * works in IE.\n * @return {number} The number of allocaitons or -1 if not supported.\n */\ngoog.debug.Trace_.prototype.getTotalVarAlloc \x3d function() {\n  var gcTracer \x3d this.gcTracer_;\n  // isTracing is defined on the ActiveX object.\n  if (gcTracer \x26\x26 gcTracer[\x27isTracing\x27]()) {\n    return gcTracer[\x27totalVarAlloc\x27];\n  }\n  return -1;\n};\n\n\n/**\n * Adds a comment to the trace. Makes it possible to see when a specific event\n * happened in relation to the traces.\n * @param {string} comment A comment that is inserted into the trace.\n * @param {?string\x3d} opt_type Type used to identify the tracer. If a comment is\n *     given a type and multiple comments are done on that type then a \x22TOTAL\n *     line will be produced showing the total number of comments of that type.\n * @param {?number\x3d} opt_timeStamp The timestamp to insert the comment. If not\n *    specified, the current time wil be used.\n */\ngoog.debug.Trace_.prototype.addComment \x3d function(\n    comment, opt_type, opt_timeStamp) {\n  var now \x3d goog.debug.Trace_.now();\n  var timeStamp \x3d opt_timeStamp ? opt_timeStamp : now;\n\n  var eventComment \x3d\n      /** @type {goog.debug.Trace_.Event_} */ (this.eventPool_.getObject());\n  eventComment.startTime \x3d undefined;\n  eventComment.stopTime \x3d undefined;\n  eventComment.id \x3d undefined;\n  eventComment.eventType \x3d goog.debug.Trace_.EventType.COMMENT;\n  eventComment.eventTime \x3d timeStamp;\n  eventComment.type \x3d opt_type;\n  eventComment.comment \x3d comment;\n  eventComment.totalVarAlloc \x3d this.getTotalVarAlloc();\n  this.commentCount_++;\n\n  if (opt_timeStamp) {\n    if (this.traceCallbacks_.comment) {\n      this.traceCallbacks_.comment(eventComment.toString(), opt_timeStamp);\n    }\n    var numEvents \x3d this.events_.length;\n    for (var i \x3d 0; i \x3c numEvents; i++) {\n      var event \x3d this.events_[i];\n      var eventTime \x3d event.eventTime;\n\n      if (eventTime \x3e timeStamp) {\n        goog.array.insertAt(this.events_, eventComment, i);\n        break;\n      }\n    }\n    if (i \x3d\x3d numEvents) {\n      this.events_.push(eventComment);\n    }\n  } else {  // No time_stamp\n    if (this.traceCallbacks_.comment) {\n      this.traceCallbacks_.comment(eventComment.toString());\n    }\n    this.events_.push(eventComment);\n  }\n\n  var type \x3d eventComment.type;\n  if (type) {\n    var stat \x3d this.getStat_(type);\n    stat.count++;\n  }\n\n  this.tracerOverheadComment_ +\x3d goog.debug.Trace_.now() - now;\n};\n\n\n/**\n * Gets a stat object for a particular type. The stat object is created if it\n * hasn\x27t yet been.\n * @param {string} type The type of stat.\n * @return {goog.debug.Trace_.Stat_} The stat object.\n * @private\n */\ngoog.debug.Trace_.prototype.getStat_ \x3d function(type) {\n  var stat \x3d this.stats_.get(type);\n  if (!stat) {\n    stat \x3d /** @type {goog.debug.Trace_.Event_} */ (this.statPool_.getObject());\n    stat.type \x3d type;\n    this.stats_.set(type, stat);\n  }\n  return /** @type {goog.debug.Trace_.Stat_} */ (stat);\n};\n\n\n/**\n * Returns a formatted string for the current trace\n * @return {string} A formatted string that shows the timings of the current\n *     trace.\n */\ngoog.debug.Trace_.prototype.getFormattedTrace \x3d function() {\n  return this.toString();\n};\n\n\n/**\n * Returns a formatted string that describes the thread trace.\n * @return {string} A formatted string.\n * @override\n */\ngoog.debug.Trace_.prototype.toString \x3d function() {\n  var sb \x3d [];\n  var etime \x3d -1;\n  var indent \x3d [];\n  for (var i \x3d 0; i \x3c this.events_.length; i++) {\n    var e \x3d this.events_[i];\n    if (e.eventType \x3d\x3d goog.debug.Trace_.EventType.STOP) {\n      indent.pop();\n    }\n    sb.push(\x27 \x27, e.toTraceString(this.startTime_, etime, indent.join(\x27\x27)));\n    etime \x3d e.eventTime;\n    sb.push(\x27\\n\x27);\n    if (e.eventType \x3d\x3d goog.debug.Trace_.EventType.START) {\n      indent.push(\x27|  \x27);\n    }\n  }\n\n  if (this.outstandingEvents_.getCount() !\x3d 0) {\n    var now \x3d goog.debug.Trace_.now();\n\n    sb.push(\x27 Unstopped timers:\\n\x27);\n    goog.iter.forEach(this.outstandingEvents_, function(startEvent) {\n      sb.push(\n          \x27  \x27, startEvent, \x27 (\x27, now - startEvent.startTime,\n          \x27 ms, started at \x27,\n          goog.debug.Trace_.formatTime_(startEvent.startTime), \x27)\\n\x27);\n    });\n  }\n\n  var statKeys \x3d this.stats_.getKeys();\n  for (var i \x3d 0; i \x3c statKeys.length; i++) {\n    var stat \x3d this.stats_.get(statKeys[i]);\n    if (stat.count \x3e 1) {\n      sb.push(\x27 TOTAL \x27, stat, \x27\\n\x27);\n    }\n  }\n\n  sb.push(\n      \x27Total tracers created \x27, this.tracerCount_, \x27\\n\x27,\n      \x27Total comments created \x27, this.commentCount_, \x27\\n\x27, \x27Overhead start: \x27,\n      this.tracerOverheadStart_, \x27 ms\\n\x27, \x27Overhead end: \x27,\n      this.tracerOverheadEnd_, \x27 ms\\n\x27, \x27Overhead comment: \x27,\n      this.tracerOverheadComment_, \x27 ms\\n\x27);\n\n  return sb.join(\x27\x27);\n};\n\n\n/**\n * Converts \x27v\x27 to a string and pads it with up to 3 spaces for\n * improved alignment. TODO there must be a better way\n * @param {number} v A number.\n * @return {string} A padded string.\n * @private\n */\ngoog.debug.Trace_.longToPaddedString_ \x3d function(v) {\n  v \x3d Math.round(v);\n  // todo (pupius) - there should be a generic string in goog.string for this\n  var space \x3d \x27\x27;\n  if (v \x3c 1000) space \x3d \x27 \x27;\n  if (v \x3c 100) space \x3d \x27  \x27;\n  if (v \x3c 10) space \x3d \x27   \x27;\n  return space + v;\n};\n\n\n/**\n * Return the sec.ms part of time (if time \x3d \x2220:06:11.566\x22,  \x2211.566\n * @param {number} time The time in MS.\n * @return {string} A formatted string as sec.ms\x27.\n * @private\n */\ngoog.debug.Trace_.formatTime_ \x3d function(time) {\n  time \x3d Math.round(time);\n  var sec \x3d (time / 1000) % 60;\n  var ms \x3d time % 1000;\n\n  // TODO their must be a nicer way to get zero padded integers\n  return String(100 + sec).substring(1, 3) + \x27.\x27 +\n      String(1000 + ms).substring(1, 4);\n};\n\n\n/**\n * Returns the current time. Done through a wrapper function so it can be\n * overridden by application code. Gmail has an ActiveX extension that provides\n * higher precision timing info.\n * @return {number} The current time in milliseconds.\n */\ngoog.debug.Trace_.now \x3d function() {\n  return goog.now();\n};\n\n\n/**\n * Singleton trace object\n * @type {goog.debug.Trace_}\n */\ngoog.debug.Trace \x3d new goog.debug.Trace_();\n\n\n/**\n * The detail of calling the stop callback for a trace.\n * @record\n */\ngoog.debug.StopTraceDetail \x3d function() {\n  /**\n   * The trace should be stopped since it has been cancelled. Note that this\n   * field is optional so, not-specifying it is like setting it to false.\n   * @type {boolean|undefined}\n   */\n  this.wasCancelled;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/debug/tracer.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/loader/abstractmodulemanager.js";
eval("// Copyright 2017 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview The interface for module managers. The default implementation\n * is goog.module.ModuleManager.\n */\n\ngoog.provide(\x27goog.loader.AbstractModuleManager\x27);\ngoog.provide(\x27goog.loader.AbstractModuleManager.CallbackType\x27);\ngoog.provide(\x27goog.loader.AbstractModuleManager.FailureType\x27);\n\ngoog.require(\x27goog.Disposable\x27);\ngoog.require(\x27goog.module.AbstractModuleLoader\x27);\ngoog.require(\x27goog.module.ModuleInfo\x27);\ngoog.require(\x27goog.module.ModuleLoadCallback\x27);\n\n\n\n/**\n * The ModuleManager keeps track of all modules in the environment.\n * Since modules may not have their code loaded, we must keep track of them.\n * @abstract\n * @constructor\n * @struct\n * @extends {goog.Disposable}\n */\ngoog.loader.AbstractModuleManager \x3d function() {\n  goog.loader.AbstractModuleManager.base(this, \x27constructor\x27);\n\n  /**\n   * The module context needed for module initialization.\n   * @private {?Object}\n   */\n  this.moduleContext_ \x3d null;\n\n  /**\n   * A loader for the modules that implements loadModules(ids, moduleInfoMap,\n   * opt_successFn, opt_errorFn, opt_timeoutFn, opt_forceReload) method.\n   * @private {?goog.module.AbstractModuleLoader}\n   */\n  this.loader_ \x3d null;\n};\ngoog.inherits(goog.loader.AbstractModuleManager, goog.Disposable);\n\n\n/**\n * The type of callbacks that can be registered with the module manager,.\n * @enum {string}\n */\ngoog.loader.AbstractModuleManager.CallbackType \x3d {\n  /**\n   * Fired when an error has occurred.\n   */\n  ERROR: \x27error\x27,\n\n  /**\n   * Fired when it becomes idle and has no more module loads to process.\n   */\n  IDLE: \x27idle\x27,\n\n  /**\n   * Fired when it becomes active and has module loads to process.\n   */\n  ACTIVE: \x27active\x27,\n\n  /**\n   * Fired when it becomes idle and has no more user-initiated module loads to\n   * process.\n   */\n  USER_IDLE: \x27userIdle\x27,\n\n  /**\n   * Fired when it becomes active and has user-initiated module loads to\n   * process.\n   */\n  USER_ACTIVE: \x27userActive\x27\n};\n\n\n/**\n * The possible reasons for a module load failure callback being fired.\n * @enum {number}\n */\ngoog.loader.AbstractModuleManager.FailureType \x3d {\n  /** 401 Status. */\n  UNAUTHORIZED: 0,\n\n  /** Error status (not 401) returned multiple times. */\n  CONSECUTIVE_FAILURES: 1,\n\n  /** Request timeout. */\n  TIMEOUT: 2,\n\n  /** 410 status, old code gone. */\n  OLD_CODE_GONE: 3,\n\n  /** The onLoad callbacks failed. */\n  INIT_ERROR: 4\n};\n\n\n/**\n * A non-HTTP status code indicating a corruption in loaded module.\n * This should be used by a ModuleLoader as a replacement for the HTTP code\n * given to the error handler function to indicated that the module was\n * corrupted.\n * This will set the forceReload flag on the loadModules method when retrying\n * module loading.\n * @type {number}\n */\ngoog.loader.AbstractModuleManager.CORRUPT_RESPONSE_STATUS_CODE \x3d 8001;\n\n\n/**\n * Sets the batch mode as enabled or disabled for the module manager.\n * @param {boolean} enabled Whether the batch mode is to be enabled or not.\n */\ngoog.loader.AbstractModuleManager.prototype.setBatchModeEnabled \x3d function(\n    enabled) {};\n\n\n/**\n * Sets the concurrent loading mode as enabled or disabled for the module\n * manager. Requires a moduleloader implementation that supports concurrent\n * loads. The default {@see goog.module.ModuleLoader} does not.\n * @param {boolean} enabled\n */\ngoog.loader.AbstractModuleManager.prototype.setConcurrentLoadingEnabled \x3d\n    function(enabled) {};\n\n\n/**\n * Sets the module info for all modules. Should only be called once.\n *\n * @param {!Object\x3c!Array\x3cstring\x3e\x3e} infoMap An object that contains a mapping\n *    from module id (String) to list of required module ids (Array).\n */\ngoog.loader.AbstractModuleManager.prototype.setAllModuleInfo \x3d function(\n    infoMap) {};\n\n\n/**\n * Sets the module info for all modules. Should only be called once. Also\n * marks modules that are currently being loaded.\n *\n * @param {string\x3d} opt_info A string representation of the module dependency\n *      graph, in the form: module1:dep1,dep2/module2:dep1,dep2 etc.\n *     Where depX is the base-36 encoded position of the dep in the module list.\n * @param {!Array\x3cstring\x3e\x3d} opt_loadingModuleIds A list of moduleIds that\n *     are currently being loaded.\n */\ngoog.loader.AbstractModuleManager.prototype.setAllModuleInfoString \x3d function(\n    opt_info, opt_loadingModuleIds) {};\n\n\n/**\n * Gets a module info object by id.\n * @param {string} id A module identifier.\n * @return {!goog.module.ModuleInfo} The module info.\n * @abstract\n */\ngoog.loader.AbstractModuleManager.prototype.getModuleInfo \x3d function(id) {};\n\n\n/**\n * Sets the module uris.\n * @param {!Object\x3cstring, !Array\x3c!goog.html.TrustedResourceUrl\x3e\x3e} moduleUriMap\n *     The map of id/uris pairs for each module.\n */\ngoog.loader.AbstractModuleManager.prototype.setModuleTrustedUris \x3d function(\n    moduleUriMap) {};\n\n\n/**\n * Gets the application-specific module loader.\n * @return {?goog.module.AbstractModuleLoader} An object that has a\n *     loadModules(ids, moduleInfoMap, opt_successFn, opt_errFn,\n *         opt_timeoutFn, opt_forceReload) method.\n */\ngoog.loader.AbstractModuleManager.prototype.getLoader \x3d function() {\n  return this.loader_;\n};\n\n\n/**\n * Sets the application-specific module loader.\n * @param {!goog.module.AbstractModuleLoader} loader An object that has a\n *     loadModules(ids, moduleInfoMap, opt_successFn, opt_errFn,\n *         opt_timeoutFn, opt_forceReload) method.\n */\ngoog.loader.AbstractModuleManager.prototype.setLoader \x3d function(loader) {\n  this.loader_ \x3d loader;\n};\n\n\n/**\n * Gets the module context to use to initialize the module.\n * @return {?Object} The context.\n */\ngoog.loader.AbstractModuleManager.prototype.getModuleContext \x3d function() {\n  return this.moduleContext_;\n};\n\n\n/**\n * Sets the module context to use to initialize the module.\n * @param {!Object} context The context.\n */\ngoog.loader.AbstractModuleManager.prototype.setModuleContext \x3d function(\n    context) {\n  this.moduleContext_ \x3d context;\n};\n\n\n/**\n * Determines if the ModuleManager is active\n * @return {boolean} TRUE iff the ModuleManager is active (i.e., not idle).\n */\ngoog.loader.AbstractModuleManager.prototype.isActive \x3d function() {\n  return false;\n};\n\n\n/**\n * Determines if the ModuleManager is user active\n * @return {boolean} TRUE iff the ModuleManager is user active (i.e., not idle).\n */\ngoog.loader.AbstractModuleManager.prototype.isUserActive \x3d function() {\n  return false;\n};\n\n\n/**\n * Preloads a module after a short delay.\n *\n * @param {string} id The id of the module to preload.\n * @param {number\x3d} opt_timeout The number of ms to wait before adding the\n *     module id to the loading queue (defaults to 0 ms). Note that the module\n *     will be loaded asynchronously regardless of the value of this parameter.\n * @return {!IThenable}\n * @abstract\n */\ngoog.loader.AbstractModuleManager.prototype.preloadModule \x3d function(\n    id, opt_timeout) {};\n\n\n/**\n * Prefetches a JavaScript module and its dependencies, which means that the\n * module will be downloaded, but not evaluated. To complete the module load,\n * the caller should also call load or execOnLoad after prefetching the module.\n *\n * @param {string} id The id of the module to prefetch.\n */\ngoog.loader.AbstractModuleManager.prototype.prefetchModule \x3d function(id) {\n  throw new Error(\x27prefetchModule is not implemented.\x27);\n};\n\n\n/**\n * Records that a module was loaded. Also initiates loading the next module if\n * any module requests are queued. This method is called by code that is\n * generated and appended to each dynamic module\x27s code at compilation time.\n *\n * @param {string} id A module id.\n * @abstract\n */\ngoog.loader.AbstractModuleManager.prototype.setLoaded \x3d function(id) {};\n\n\n/**\n * Gets whether a module is currently loading or in the queue, waiting to be\n * loaded.\n * @param {string} id A module id.\n * @return {boolean} TRUE iff the module is loading.\n * @abstract\n */\ngoog.loader.AbstractModuleManager.prototype.isModuleLoading \x3d function(id) {};\n\n\n/**\n * Requests that a function be called once a particular module is loaded.\n * Client code can use this method to safely call into modules that may not yet\n * be loaded. For consistency, this method always calls the function\n * asynchronously -- even if the module is already loaded. Initiates loading of\n * the module if necessary, unless opt_noLoad is true.\n *\n * @param {string} moduleId A module id.\n * @param {!Function} fn Function to execute when the module has loaded.\n * @param {!Object\x3d} opt_handler Optional handler under whose scope to execute\n *     the callback.\n * @param {boolean\x3d} opt_noLoad TRUE iff not to initiate loading of the module.\n * @param {boolean\x3d} opt_userInitiated TRUE iff the loading of the module was\n *     user initiated.\n * @param {boolean\x3d} opt_preferSynchronous TRUE iff the function should be\n *     executed synchronously if the module has already been loaded.\n * @return {!goog.module.ModuleLoadCallback} A callback wrapper that exposes\n *     an abort and execute method.\n * @abstract\n */\ngoog.loader.AbstractModuleManager.prototype.execOnLoad \x3d function(\n    moduleId, fn, opt_handler, opt_noLoad, opt_userInitiated,\n    opt_preferSynchronous) {};\n\n\n/**\n * Loads a module, returning an IThenable for keeping track of the result.\n *\n * @param {string} moduleId A module id.\n * @param {boolean\x3d} opt_userInitiated If the load is a result of a user action.\n * @return {!IThenable} A deferred object.\n * @abstract\n */\ngoog.loader.AbstractModuleManager.prototype.load \x3d function(\n    moduleId, opt_userInitiated) {};\n\n\n/**\n * Loads a list of modules, returning a map of IThenables for keeping track of\n * the results.\n *\n * @param {!Array\x3cstring\x3e} moduleIds A list of module ids.\n * @param {boolean\x3d} opt_userInitiated If the load is a result of a user action.\n * @return {!Object\x3cstring, !IThenable\x3e} A mapping from id (String)\n *     to deferred objects that will callback or errback when the load for that\n *     id is finished.\n * @abstract\n */\ngoog.loader.AbstractModuleManager.prototype.loadMultiple \x3d function(\n    moduleIds, opt_userInitiated) {};\n\n\n/**\n * Method called just before module code is loaded.\n * @param {string} id Identifier of the module.\n * @abstract\n */\ngoog.loader.AbstractModuleManager.prototype.beforeLoadModuleCode \x3d function(\n    id) {};\n\n\n/**\n * Method called just after module code is loaded\n * @param {string} id Identifier of the module.\n * @abstract\n */\ngoog.loader.AbstractModuleManager.prototype.afterLoadModuleCode \x3d function(\n    id) {};\n\n\n/**\n * Register an initialization callback for the currently loading module. This\n * should only be called by script that is executed during the evaluation of\n * a module\x27s javascript. This is almost equivalent to calling the function\n * inline, but ensures that all the code from the currently loading module\n * has been loaded. This makes it cleaner and more robust than calling the\n * function inline.\n *\n * If this function is called from the base module (the one that contains\n * the module manager code), the callback is held until #setAllModuleInfo\n * is called, or until #setModuleContext is called, whichever happens first.\n *\n * @param {!Function} fn A callback function that takes a single argument\n *    which is the module context.\n * @param {!Object\x3d} opt_handler Optional handler under whose scope to execute\n *     the callback.\n */\ngoog.loader.AbstractModuleManager.prototype.registerInitializationCallback \x3d\n    function(fn, opt_handler) {};\n\n\n/**\n * Register a late initialization callback for the currently loading module.\n * Callbacks registered via this function are executed similar to\n * {@see registerInitializationCallback}, but they are fired after all\n * initialization callbacks are called.\n *\n * @param {!Function} fn A callback function that takes a single argument\n *    which is the module context.\n * @param {!Object\x3d} opt_handler Optional handler under whose scope to execute\n *     the callback.\n */\ngoog.loader.AbstractModuleManager.prototype.registerLateInitializationCallback \x3d\n    function(fn, opt_handler) {};\n\n\n/**\n * Sets the constructor to use for the module object for the currently\n * loading module. The constructor should derive from\n * {@see goog.module.BaseModule}.\n * @param {!Function} fn The constructor function.\n */\ngoog.loader.AbstractModuleManager.prototype.setModuleConstructor \x3d function(\n    fn) {};\n\n\n/**\n * The function to call if the module manager is in error.\n * @param {!goog.loader.AbstractModuleManager.CallbackType|!Array\x3c\n *     !goog.loader.AbstractModuleManager.CallbackType\x3e} types The callback\n *         type.\n * @param {!Function} fn The function to register as a callback.\n */\ngoog.loader.AbstractModuleManager.prototype.registerCallback \x3d function(\n    types, fn) {};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/loader/abstractmodulemanager.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/loader/activemodulemanager.js";
goog.loadModule("// Copyright 2017 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A singleton interface for managing Javascript code modules.\n */\n\ngoog.module(\x27goog.loader.activeModuleManager\x27);\ngoog.module.declareLegacyNamespace();\n\nconst AbstractModuleManager \x3d goog.require(\x27goog.loader.AbstractModuleManager\x27);\nconst asserts \x3d goog.require(\x27goog.asserts\x27);\n\n\n/** @type {?AbstractModuleManager} */\nlet moduleManager \x3d null;\n\n/**\n * Gets the active module manager, instantiating one if necessary.\n *\n * @param {(function():!AbstractModuleManager)\x3d} getDefault\n * @return {!AbstractModuleManager}\n */\nconst get \x3d function(getDefault \x3d undefined) {\n  if (!moduleManager \x26\x26 getDefault) {\n    moduleManager \x3d getDefault();\n  }\n  asserts.assert(\n      moduleManager !\x3d null, \x27The module manager has not yet been set.\x27);\n  return moduleManager;\n};\n\n/**\n * Sets the active module manager. This should never be used to override an\n * existing manager.\n *\n * @param {!AbstractModuleManager} newModuleManager\n */\nconst set \x3d function(newModuleManager) {\n  asserts.assert(\n      moduleManager \x3d\x3d null, \x27The module manager cannot be redefined.\x27);\n  moduleManager \x3d newModuleManager;\n};\n\n/** Test-only method for removing the active module manager. */\nconst reset \x3d function() {\n  moduleManager \x3d null;\n};\n\n\nexports \x3d {\n  get,\n  set,\n  reset,\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/loader/activemodulemanager.js\n");

$googDebugFname=undefined;
var $googDebugFname="third_party/javascript/closure/mochikit/async/deferred.js";
eval("// Copyright 2007 Bob Ippolito. All Rights Reserved.\n// Modifications Copyright 2009 The Closure Library Authors. All Rights\n// Reserved.\n\n/**\n * @license Portions of this code are from MochiKit, received by\n * The Closure Authors under the MIT license. All other code is Copyright\n * 2005-2009 The Closure Authors. All Rights Reserved.\n */\n\n/**\n * @fileoverview Classes for tracking asynchronous operations and handling the\n * results. The Deferred object here is patterned after the Deferred object in\n * the Twisted python networking framework.\n *\n * See: http://twistedmatrix.com/projects/core/documentation/howto/defer.html\n *\n * Based on the Dojo code which in turn is based on the MochiKit code.\n *\n * @author abefettig@google.com (Abe Fettig)\n * @author arv@google.com (Erik Arvidsson)\n * @author brenneman@google.com (Shawn Brenneman)\n */\n\ngoog.provide(\x27goog.async.Deferred\x27);\ngoog.provide(\x27goog.async.Deferred.AlreadyCalledError\x27);\ngoog.provide(\x27goog.async.Deferred.CanceledError\x27);\n\ngoog.require(\x27goog.Promise\x27);\ngoog.require(\x27goog.Thenable\x27);\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.debug.Error\x27);\n\n\n\n/**\n * A Deferred represents the result of an asynchronous operation. A Deferred\n * instance has no result when it is created, and is \x22fired\x22 (given an initial\n * result) by calling `callback` or `errback`.\n *\n * Once fired, the result is passed through a sequence of callback functions\n * registered with `addCallback` or `addErrback`. The functions may\n * mutate the result before it is passed to the next function in the sequence.\n *\n * Callbacks and errbacks may be added at any time, including after the Deferred\n * has been \x22fired\x22. If there are no pending actions in the execution sequence\n * of a fired Deferred, any new callback functions will be called with the last\n * computed result. Adding a callback function is the only way to access the\n * result of the Deferred.\n *\n * If a Deferred operation is canceled, an optional user-provided cancellation\n * function is invoked which may perform any special cleanup, followed by firing\n * the Deferred\x27s errback sequence with a `CanceledError`. If the\n * Deferred has already fired, cancellation is ignored.\n *\n * Deferreds may be templated to a specific type they produce using generics\n * with syntax such as:\n *\n *    /** @type {goog.async.Deferred\x3cstring\x3e} *\\\n *    var d \x3d new goog.async.Deferred();\n *    // Compiler can infer that foo is a string.\n *    d.addCallback(function(foo) {...});\n *    d.callback(\x27string\x27);  // Checked to be passed a string\n *\n * Since deferreds are often used to produce different values across a chain,\n * the type information is not propagated across chains, but rather only\n * associated with specifically cast objects.\n *\n * @param {Function\x3d} opt_onCancelFunction A function that will be called if the\n *     Deferred is canceled. If provided, this function runs before the\n *     Deferred is fired with a `CanceledError`.\n * @param {Object\x3d} opt_defaultScope The default object context to call\n *     callbacks and errbacks in.\n * @constructor\n * @implements {goog.Thenable\x3cVALUE\x3e}\n * @template VALUE\n */\ngoog.async.Deferred \x3d function(opt_onCancelFunction, opt_defaultScope) {\n  /**\n   * Entries in the sequence are arrays containing a callback, an errback, and\n   * an optional scope. The callback or errback in an entry may be null.\n   * @type {!Array\x3c!Array\x3e}\n   * @private\n   */\n  this.sequence_ \x3d [];\n\n  /**\n   * Optional function that will be called if the Deferred is canceled.\n   * @type {Function|undefined}\n   * @private\n   */\n  this.onCancelFunction_ \x3d opt_onCancelFunction;\n\n  /**\n   * The default scope to execute callbacks and errbacks in.\n   * @type {Object}\n   * @private\n   */\n  this.defaultScope_ \x3d opt_defaultScope || null;\n\n  /**\n   * Whether the Deferred has been fired.\n   * @type {boolean}\n   * @private\n   */\n  this.fired_ \x3d false;\n\n  /**\n   * Whether the last result in the execution sequence was an error.\n   * @type {boolean}\n   * @private\n   */\n  this.hadError_ \x3d false;\n\n  /**\n   * The current Deferred result, updated as callbacks and errbacks are\n   * executed.\n   * @type {*}\n   * @private\n   */\n  this.result_ \x3d undefined;\n\n  /**\n   * Whether the Deferred is blocked waiting on another Deferred to fire. If a\n   * callback or errback returns a Deferred as a result, the execution sequence\n   * is blocked until that Deferred result becomes available.\n   * @type {boolean}\n   * @private\n   */\n  this.blocked_ \x3d false;\n\n  /**\n   * Whether this Deferred is blocking execution of another Deferred. If this\n   * instance was returned as a result in another Deferred\x27s execution\n   * sequence,that other Deferred becomes blocked until this instance\x27s\n   * execution sequence completes. No additional callbacks may be added to a\n   * Deferred once it is blocking another instance.\n   * @type {boolean}\n   * @private\n   */\n  this.blocking_ \x3d false;\n\n  /**\n   * Whether the Deferred has been canceled without having a custom cancel\n   * function.\n   * @type {boolean}\n   * @private\n   */\n  this.silentlyCanceled_ \x3d false;\n\n  /**\n   * If an error is thrown during Deferred execution with no errback to catch\n   * it, the error is rethrown after a timeout. Reporting the error after a\n   * timeout allows execution to continue in the calling context (empty when\n   * no error is scheduled).\n   * @type {number}\n   * @private\n   */\n  this.unhandledErrorId_ \x3d 0;\n\n  /**\n   * If this Deferred was created by branch(), this will be the \x22parent\x22\n   * Deferred.\n   * @type {goog.async.Deferred}\n   * @private\n   */\n  this.parent_ \x3d null;\n\n  /**\n   * The number of Deferred objects that have been branched off this one. This\n   * will be decremented whenever a branch is fired or canceled.\n   * @type {number}\n   * @private\n   */\n  this.branches_ \x3d 0;\n\n  if (goog.async.Deferred.LONG_STACK_TRACES) {\n    /**\n     * Holds the stack trace at time of deferred creation if the JS engine\n     * provides the Error.captureStackTrace API.\n     * @private {?string}\n     */\n    this.constructorStack_ \x3d null;\n    if (Error.captureStackTrace) {\n      var target \x3d { stack: \x27\x27 };\n      Error.captureStackTrace(target, goog.async.Deferred);\n      // Check if Error.captureStackTrace worked. It fails in gjstest.\n      if (typeof target.stack \x3d\x3d \x27string\x27) {\n        // Remove first line and force stringify to prevent memory leak due to\n        // holding on to actual stack frames.\n        this.constructorStack_ \x3d target.stack.replace(/^[^\\n]*\\n/, \x27\x27);\n      }\n    }\n  }\n};\n\n\n/**\n * @define {boolean} Whether unhandled errors should always get rethrown to the\n * global scope. Defaults to false.\n */\ngoog.define(\x27goog.async.Deferred.STRICT_ERRORS\x27, false);\n\n\n/**\n * @define {boolean} Whether to attempt to make stack traces long.  Defaults to\n * false.\n */\ngoog.define(\x27goog.async.Deferred.LONG_STACK_TRACES\x27, false);\n\n\n/**\n * Cancels a Deferred that has not yet been fired, or is blocked on another\n * deferred operation. If this Deferred is waiting for a blocking Deferred to\n * fire, the blocking Deferred will also be canceled.\n *\n * If this Deferred was created by calling branch() on a parent Deferred with\n * opt_propagateCancel set to true, the parent may also be canceled. If\n * opt_deepCancel is set, cancel() will be called on the parent (as well as any\n * other ancestors if the parent is also a branch). If one or more branches were\n * created with opt_propagateCancel set to true, the parent will be canceled if\n * cancel() is called on all of those branches.\n *\n * @param {boolean\x3d} opt_deepCancel If true, cancels this Deferred\x27s parent even\n *     if cancel() hasn\x27t been called on some of the parent\x27s branches. Has no\n *     effect on a branch without opt_propagateCancel set to true.\n */\ngoog.async.Deferred.prototype.cancel \x3d function(opt_deepCancel) {\n  if (!this.hasFired()) {\n    if (this.parent_) {\n      // Get rid of the parent reference before potentially running the parent\x27s\n      // canceler function to ensure that this cancellation isn\x27t\n      // double-counted.\n      var parent \x3d this.parent_;\n      delete this.parent_;\n      if (opt_deepCancel) {\n        parent.cancel(opt_deepCancel);\n      } else {\n        parent.branchCancel_();\n      }\n    }\n\n    if (this.onCancelFunction_) {\n      // Call in user-specified scope.\n      this.onCancelFunction_.call(this.defaultScope_, this);\n    } else {\n      this.silentlyCanceled_ \x3d true;\n    }\n    if (!this.hasFired()) {\n      this.errback(new goog.async.Deferred.CanceledError(this));\n    }\n  } else if (this.result_ instanceof goog.async.Deferred) {\n    this.result_.cancel();\n  }\n};\n\n\n/**\n * Handle a single branch being canceled. Once all branches are canceled, this\n * Deferred will be canceled as well.\n *\n * @private\n */\ngoog.async.Deferred.prototype.branchCancel_ \x3d function() {\n  this.branches_--;\n  if (this.branches_ \x3c\x3d 0) {\n    this.cancel();\n  }\n};\n\n\n/**\n * Called after a blocking Deferred fires. Unblocks this Deferred and resumes\n * its execution sequence.\n *\n * @param {boolean} isSuccess Whether the result is a success or an error.\n * @param {*} res The result of the blocking Deferred.\n * @private\n */\ngoog.async.Deferred.prototype.continue_ \x3d function(isSuccess, res) {\n  this.blocked_ \x3d false;\n  this.updateResult_(isSuccess, res);\n};\n\n\n/**\n * Updates the current result based on the success or failure of the last action\n * in the execution sequence.\n *\n * @param {boolean} isSuccess Whether the new result is a success or an error.\n * @param {*} res The result.\n * @private\n */\ngoog.async.Deferred.prototype.updateResult_ \x3d function(isSuccess, res) {\n  this.fired_ \x3d true;\n  this.result_ \x3d res;\n  this.hadError_ \x3d !isSuccess;\n  this.fire_();\n};\n\n\n/**\n * Verifies that the Deferred has not yet been fired.\n *\n * @private\n * @throws {Error} If this has already been fired.\n */\ngoog.async.Deferred.prototype.check_ \x3d function() {\n  if (this.hasFired()) {\n    if (!this.silentlyCanceled_) {\n      throw new goog.async.Deferred.AlreadyCalledError(this);\n    }\n    this.silentlyCanceled_ \x3d false;\n  }\n};\n\n\n/**\n * Fire the execution sequence for this Deferred by passing the starting result\n * to the first registered callback.\n * @param {VALUE\x3d} opt_result The starting result.\n */\ngoog.async.Deferred.prototype.callback \x3d function(opt_result) {\n  this.check_();\n  this.assertNotDeferred_(opt_result);\n  this.updateResult_(true /* isSuccess */, opt_result);\n};\n\n\n/**\n * Fire the execution sequence for this Deferred by passing the starting error\n * result to the first registered errback.\n * @param {*\x3d} opt_result The starting error.\n */\ngoog.async.Deferred.prototype.errback \x3d function(opt_result) {\n  this.check_();\n  this.assertNotDeferred_(opt_result);\n  this.makeStackTraceLong_(opt_result);\n  this.updateResult_(false /* isSuccess */, opt_result);\n};\n\n\n/**\n * Attempt to make the error\x27s stack trace be long in that it contains the\n * stack trace from the point where the deferred was created on top of the\n * current stack trace to give additional context.\n * @param {*} error\n * @private\n */\ngoog.async.Deferred.prototype.makeStackTraceLong_ \x3d function(error) {\n  if (!goog.async.Deferred.LONG_STACK_TRACES) {\n    return;\n  }\n  if (this.constructorStack_ \x26\x26 goog.isObject(error) \x26\x26 error.stack \x26\x26\n      // Stack looks like it was system generated. See\n      // https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\n      (/^[^\\n]+(\\n   [^\\n]+)+/).test(error.stack)) {\n    error.stack \x3d error.stack + \x27\\nDEFERRED OPERATION:\\n\x27 +\n        this.constructorStack_;\n  }\n};\n\n\n/**\n * Asserts that an object is not a Deferred.\n * @param {*} obj The object to test.\n * @throws {Error} Throws an exception if the object is a Deferred.\n * @private\n */\ngoog.async.Deferred.prototype.assertNotDeferred_ \x3d function(obj) {\n  goog.asserts.assert(\n      !(obj instanceof goog.async.Deferred),\n      \x27An execution sequence may not be initiated with a blocking Deferred.\x27);\n};\n\n\n/**\n * Register a callback function to be called with a successful result. If no\n * value is returned by the callback function, the result value is unchanged. If\n * a new value is returned, it becomes the Deferred result and will be passed to\n * the next callback in the execution sequence.\n *\n * If the function throws an error, the error becomes the new result and will be\n * passed to the next errback in the execution chain.\n *\n * If the function returns a Deferred, the execution sequence will be blocked\n * until that Deferred fires. Its result will be passed to the next callback (or\n * errback if it is an error result) in this Deferred\x27s execution sequence.\n *\n * @param {function(this:T,VALUE):?} cb The function to be called with a\n *     successful result.\n * @param {T\x3d} opt_scope An optional scope to call the callback in.\n * @return {!goog.async.Deferred} This Deferred.\n * @template T\n */\ngoog.async.Deferred.prototype.addCallback \x3d function(cb, opt_scope) {\n  return this.addCallbacks(cb, null, opt_scope);\n};\n\n\n/**\n * Register a callback function to be called with an error result. If no value\n * is returned by the function, the error result is unchanged. If a new error\n * value is returned or thrown, that error becomes the Deferred result and will\n * be passed to the next errback in the execution sequence.\n *\n * If the errback function handles the error by returning a non-error value,\n * that result will be passed to the next normal callback in the sequence.\n *\n * If the function returns a Deferred, the execution sequence will be blocked\n * until that Deferred fires. Its result will be passed to the next callback (or\n * errback if it is an error result) in this Deferred\x27s execution sequence.\n *\n * @param {function(this:T,?):?} eb The function to be called on an\n *     unsuccessful result.\n * @param {T\x3d} opt_scope An optional scope to call the errback in.\n * @return {!goog.async.Deferred\x3cVALUE\x3e} This Deferred.\n * @template T\n */\ngoog.async.Deferred.prototype.addErrback \x3d function(eb, opt_scope) {\n  return this.addCallbacks(null, eb, opt_scope);\n};\n\n\n/**\n * Registers one function as both a callback and errback.\n *\n * @param {function(this:T,?):?} f The function to be called on any result.\n * @param {T\x3d} opt_scope An optional scope to call the function in.\n * @return {!goog.async.Deferred} This Deferred.\n * @template T\n */\ngoog.async.Deferred.prototype.addBoth \x3d function(f, opt_scope) {\n  return this.addCallbacks(f, f, opt_scope);\n};\n\n\n/**\n * Like addBoth, but propagates uncaught exceptions in the errback.\n *\n * @param {function(this:T,?):?} f The function to be called on any result.\n * @param {T\x3d} opt_scope An optional scope to call the function in.\n * @return {!goog.async.Deferred\x3cVALUE\x3e} This Deferred.\n * @template T\n */\ngoog.async.Deferred.prototype.addFinally \x3d function(f, opt_scope) {\n  return this.addCallbacks(f, function(err) {\n    var result \x3d f.call(/** @type {?} */ (this), err);\n    if (!goog.isDef(result)) {\n      throw err;\n    }\n    return result;\n  }, opt_scope);\n};\n\n\n/**\n * Registers a callback function and an errback function at the same position\n * in the execution sequence. Only one of these functions will execute,\n * depending on the error state during the execution sequence.\n *\n * NOTE: This is not equivalent to {@code def.addCallback().addErrback()}! If\n * the callback is invoked, the errback will be skipped, and vice versa.\n *\n * @param {?(function(this:T,VALUE):?)} cb The function to be called on a\n *     successful result.\n * @param {?(function(this:T,?):?)} eb The function to be called on an\n *     unsuccessful result.\n * @param {T\x3d} opt_scope An optional scope to call the functions in.\n * @return {!goog.async.Deferred} This Deferred.\n * @template T\n */\ngoog.async.Deferred.prototype.addCallbacks \x3d function(cb, eb, opt_scope) {\n  goog.asserts.assert(!this.blocking_, \x27Blocking Deferreds can not be re-used\x27);\n  this.sequence_.push([cb, eb, opt_scope]);\n  if (this.hasFired()) {\n    this.fire_();\n  }\n  return this;\n};\n\n\n/**\n * Implements {@see goog.Thenable} for seamless integration with\n * {@see goog.Promise}.\n * Deferred results are mutable and may represent multiple values over\n * their lifetime. Calling `then` on a Deferred returns a Promise\n * with the result of the Deferred at that point in its callback chain.\n * Note that if the Deferred result is never mutated, and only\n * `then` calls are made, the Deferred will behave like a Promise.\n *\n * @override\n */\ngoog.async.Deferred.prototype.then \x3d function(opt_onFulfilled, opt_onRejected,\n    opt_context) {\n  var resolve, reject;\n  var promise \x3d new goog.Promise(function(res, rej) {\n    // Copying resolvers to outer scope, so that they are available when the\n    // deferred callback fires (which may be synchronous).\n    resolve \x3d res;\n    reject \x3d rej;\n  });\n  this.addCallbacks(resolve, function(reason) {\n    if (reason instanceof goog.async.Deferred.CanceledError) {\n      promise.cancel();\n    } else {\n      reject(reason);\n    }\n  });\n  return promise.then(opt_onFulfilled, opt_onRejected, opt_context);\n};\ngoog.Thenable.addImplementation(goog.async.Deferred);\n\n\n/**\n * Links another Deferred to the end of this Deferred\x27s execution sequence. The\n * result of this execution sequence will be passed as the starting result for\n * the chained Deferred, invoking either its first callback or errback.\n *\n * @param {!goog.async.Deferred} otherDeferred The Deferred to chain.\n * @return {!goog.async.Deferred} This Deferred.\n */\ngoog.async.Deferred.prototype.chainDeferred \x3d function(otherDeferred) {\n  this.addCallbacks(\n      otherDeferred.callback, otherDeferred.errback, otherDeferred);\n  return this;\n};\n\n\n/**\n * Makes this Deferred wait for another Deferred\x27s execution sequence to\n * complete before continuing.\n *\n * This is equivalent to adding a callback that returns `otherDeferred`,\n * but doesn\x27t prevent additional callbacks from being added to\n * `otherDeferred`.\n *\n * @param {!goog.async.Deferred|!goog.Thenable} otherDeferred The Deferred\n *     to wait for.\n * @return {!goog.async.Deferred} This Deferred.\n */\ngoog.async.Deferred.prototype.awaitDeferred \x3d function(otherDeferred) {\n  if (!(otherDeferred instanceof goog.async.Deferred)) {\n    // The Thenable case.\n    return this.addCallback(function() {\n      return otherDeferred;\n    });\n  }\n  return this.addCallback(goog.bind(otherDeferred.branch, otherDeferred));\n};\n\n\n/**\n * Creates a branch off this Deferred\x27s execution sequence, and returns it as a\n * new Deferred. The branched Deferred\x27s starting result will be shared with the\n * parent at the point of the branch, even if further callbacks are added to the\n * parent.\n *\n * All branches at the same stage in the execution sequence will receive the\n * same starting value.\n *\n * @param {boolean\x3d} opt_propagateCancel If cancel() is called on every child\n *     branch created with opt_propagateCancel, the parent will be canceled as\n *     well.\n * @return {!goog.async.Deferred\x3cVALUE\x3e} A Deferred that will be started with\n *     the computed result from this stage in the execution sequence.\n */\ngoog.async.Deferred.prototype.branch \x3d function(opt_propagateCancel) {\n  var d \x3d new goog.async.Deferred();\n  this.chainDeferred(d);\n  if (opt_propagateCancel) {\n    d.parent_ \x3d this;\n    this.branches_++;\n  }\n  return d;\n};\n\n\n/**\n * @return {boolean} Whether the execution sequence has been started on this\n *     Deferred by invoking `callback` or `errback`.\n */\ngoog.async.Deferred.prototype.hasFired \x3d function() {\n  return this.fired_;\n};\n\n\n/**\n * @param {*} res The latest result in the execution sequence.\n * @return {boolean} Whether the current result is an error that should cause\n *     the next errback to fire. May be overridden by subclasses to handle\n *     special error types.\n * @protected\n */\ngoog.async.Deferred.prototype.isError \x3d function(res) {\n  return res instanceof Error;\n};\n\n\n/**\n * @return {boolean} Whether an errback exists in the remaining sequence.\n * @private\n */\ngoog.async.Deferred.prototype.hasErrback_ \x3d function() {\n  return goog.array.some(this.sequence_, function(sequenceRow) {\n    // The errback is the second element in the array.\n    return goog.isFunction(sequenceRow[1]);\n  });\n};\n\n\n/**\n * Exhausts the execution sequence while a result is available. The result may\n * be modified by callbacks or errbacks, and execution will block if the\n * returned result is an incomplete Deferred.\n *\n * @private\n */\ngoog.async.Deferred.prototype.fire_ \x3d function() {\n  if (this.unhandledErrorId_ \x26\x26 this.hasFired() \x26\x26 this.hasErrback_()) {\n    // It is possible to add errbacks after the Deferred has fired. If a new\n    // errback is added immediately after the Deferred encountered an unhandled\n    // error, but before that error is rethrown, the error is unscheduled.\n    goog.async.Deferred.unscheduleError_(this.unhandledErrorId_);\n    this.unhandledErrorId_ \x3d 0;\n  }\n\n  if (this.parent_) {\n    this.parent_.branches_--;\n    delete this.parent_;\n  }\n\n  var res \x3d this.result_;\n  var unhandledException \x3d false;\n  var isNewlyBlocked \x3d false;\n\n  while (this.sequence_.length \x26\x26 !this.blocked_) {\n    var sequenceEntry \x3d this.sequence_.shift();\n\n    var callback \x3d sequenceEntry[0];\n    var errback \x3d sequenceEntry[1];\n    var scope \x3d sequenceEntry[2];\n\n    var f \x3d this.hadError_ ? errback : callback;\n    if (f) {\n\n      try {\n        var ret \x3d f.call(scope || this.defaultScope_, res);\n\n        // If no result, then use previous result.\n        if (goog.isDef(ret)) {\n          // Bubble up the error as long as the return value hasn\x27t changed.\n          this.hadError_ \x3d this.hadError_ \x26\x26 (ret \x3d\x3d res || this.isError(ret));\n          this.result_ \x3d res \x3d ret;\n        }\n\n        if (goog.Thenable.isImplementedBy(res) ||\n            (typeof goog.global[\x27Promise\x27] \x3d\x3d\x3d \x27function\x27 \x26\x26\n            res instanceof goog.global[\x27Promise\x27])) {\n          isNewlyBlocked \x3d true;\n          this.blocked_ \x3d true;\n        }\n\n      } catch (ex) {\n        res \x3d ex;\n        this.hadError_ \x3d true;\n        this.makeStackTraceLong_(res);\n\n        if (!this.hasErrback_()) {\n          // If an error is thrown with no additional errbacks in the queue,\n          // prepare to rethrow the error.\n          unhandledException \x3d true;\n        }\n      }\n    }\n  }\n\n  this.result_ \x3d res;\n\n  if (isNewlyBlocked) {\n    var onCallback \x3d goog.bind(this.continue_, this, true /* isSuccess */);\n    var onErrback \x3d goog.bind(this.continue_, this, false /* isSuccess */);\n\n    if (res instanceof goog.async.Deferred) {\n      res.addCallbacks(onCallback, onErrback);\n      res.blocking_ \x3d true;\n    } else {\n      /** @type {!IThenable} */ (res).then(onCallback, onErrback);\n    }\n  } else if (goog.async.Deferred.STRICT_ERRORS \x26\x26 this.isError(res) \x26\x26\n      !(res instanceof goog.async.Deferred.CanceledError)) {\n    this.hadError_ \x3d true;\n    unhandledException \x3d true;\n  }\n\n  if (unhandledException) {\n    // Rethrow the unhandled error after a timeout. Execution will continue, but\n    // the error will be seen by global handlers and the user. The throw will\n    // be canceled if another errback is appended before the timeout executes.\n    // The error\x27s original stack trace is preserved where available.\n    this.unhandledErrorId_ \x3d goog.async.Deferred.scheduleError_(res);\n  }\n};\n\n\n/**\n * Creates a Deferred that has an initial result.\n *\n * @param {*\x3d} opt_result The result.\n * @return {!goog.async.Deferred} The new Deferred.\n */\ngoog.async.Deferred.succeed \x3d function(opt_result) {\n  var d \x3d new goog.async.Deferred();\n  d.callback(opt_result);\n  return d;\n};\n\n\n/**\n * Creates a Deferred that fires when the given promise resolves.\n * Use only during migration to Promises.\n *\n * Note: If the promise resolves to a thenable value (which is not allowed by\n * conforming promise implementations), then the deferred may behave\n * unexpectedly as it tries to wait on it. This should not be a risk when using\n * goog.Promise, goog.async.Deferred, or native Promise objects.\n *\n * @param {!IThenable\x3cT\x3e} promise\n * @return {!goog.async.Deferred\x3cT\x3e} The new Deferred.\n * @template T\n */\ngoog.async.Deferred.fromPromise \x3d function(promise) {\n  var d \x3d new goog.async.Deferred();\n  promise.then(\n      function(value) {\n        d.callback(value);\n      },\n      function(error) {\n        d.errback(error);\n      });\n  return d;\n};\n\n\n/**\n * Creates a Deferred that has an initial error result.\n *\n * @param {*} res The error result.\n * @return {!goog.async.Deferred} The new Deferred.\n */\ngoog.async.Deferred.fail \x3d function(res) {\n  var d \x3d new goog.async.Deferred();\n  d.errback(res);\n  return d;\n};\n\n\n/**\n * Creates a Deferred that has already been canceled.\n *\n * @return {!goog.async.Deferred} The new Deferred.\n */\ngoog.async.Deferred.canceled \x3d function() {\n  var d \x3d new goog.async.Deferred();\n  d.cancel();\n  return d;\n};\n\n\n/**\n * Normalizes values that may or may not be Deferreds.\n *\n * If the input value is a Deferred, the Deferred is branched (so the original\n * execution sequence is not modified) and the input callback added to the new\n * branch. The branch is returned to the caller.\n *\n * If the input value is not a Deferred, the callback will be executed\n * immediately and an already firing Deferred will be returned to the caller.\n *\n * In the following (contrived) example, if \x3ccode\x3eisImmediate\x3c/code\x3e is true\n * then 3 is alerted immediately, otherwise 6 is alerted after a 2-second delay.\n *\n * \x3cpre\x3e\n * var value;\n * if (isImmediate) {\n *   value \x3d 3;\n * } else {\n *   value \x3d new goog.async.Deferred();\n *   setTimeout(function() { value.callback(6); }, 2000);\n * }\n *\n * var d \x3d goog.async.Deferred.when(value, alert);\n * \x3c/pre\x3e\n *\n * @param {*} value Deferred or normal value to pass to the callback.\n * @param {function(this:T, ?):?} callback The callback to execute.\n * @param {T\x3d} opt_scope An optional scope to call the callback in.\n * @return {!goog.async.Deferred} A new Deferred that will call the input\n *     callback with the input value.\n * @template T\n */\ngoog.async.Deferred.when \x3d function(value, callback, opt_scope) {\n  if (value instanceof goog.async.Deferred) {\n    return value.branch(true).addCallback(callback, opt_scope);\n  } else {\n    return goog.async.Deferred.succeed(value).addCallback(callback, opt_scope);\n  }\n};\n\n\n\n/**\n * An error sub class that is used when a Deferred has already been called.\n * @param {!goog.async.Deferred} deferred The Deferred.\n *\n * @constructor\n * @extends {goog.debug.Error}\n */\ngoog.async.Deferred.AlreadyCalledError \x3d function(deferred) {\n  goog.debug.Error.call(this);\n\n  /**\n   * The Deferred that raised this error.\n   * @type {goog.async.Deferred}\n   */\n  this.deferred \x3d deferred;\n};\ngoog.inherits(goog.async.Deferred.AlreadyCalledError, goog.debug.Error);\n\n\n/** @override */\ngoog.async.Deferred.AlreadyCalledError.prototype.message \x3d\n    \x27Deferred has already fired\x27;\n\n\n/** @override */\ngoog.async.Deferred.AlreadyCalledError.prototype.name \x3d \x27AlreadyCalledError\x27;\n\n\n\n/**\n * An error sub class that is used when a Deferred is canceled.\n *\n * @param {!goog.async.Deferred} deferred The Deferred object.\n * @constructor\n * @extends {goog.debug.Error}\n */\ngoog.async.Deferred.CanceledError \x3d function(deferred) {\n  goog.debug.Error.call(this);\n\n  /**\n   * The Deferred that raised this error.\n   * @type {goog.async.Deferred}\n   */\n  this.deferred \x3d deferred;\n};\ngoog.inherits(goog.async.Deferred.CanceledError, goog.debug.Error);\n\n\n/** @override */\ngoog.async.Deferred.CanceledError.prototype.message \x3d \x27Deferred was canceled\x27;\n\n\n/** @override */\ngoog.async.Deferred.CanceledError.prototype.name \x3d \x27CanceledError\x27;\n\n\n\n/**\n * Wrapper around errors that are scheduled to be thrown by failing deferreds\n * after a timeout.\n *\n * @param {*} error Error from a failing deferred.\n * @constructor\n * @final\n * @private\n * @struct\n */\ngoog.async.Deferred.Error_ \x3d function(error) {\n  /** @const @private {number} */\n  this.id_ \x3d goog.global.setTimeout(goog.bind(this.throwError, this), 0);\n\n  /** @const @private {*} */\n  this.error_ \x3d error;\n};\n\n\n/**\n * Actually throws the error and removes it from the list of pending\n * deferred errors.\n */\ngoog.async.Deferred.Error_.prototype.throwError \x3d function() {\n  goog.asserts.assert(goog.async.Deferred.errorMap_[this.id_],\n      \x27Cannot throw an error that is not scheduled.\x27);\n  delete goog.async.Deferred.errorMap_[this.id_];\n  throw this.error_;\n};\n\n\n/**\n * Resets the error throw timer.\n */\ngoog.async.Deferred.Error_.prototype.resetTimer \x3d function() {\n  goog.global.clearTimeout(this.id_);\n};\n\n\n/**\n * Map of unhandled errors scheduled to be rethrown in a future timestep.\n * @private {!Object\x3c(number|string), goog.async.Deferred.Error_\x3e}\n */\ngoog.async.Deferred.errorMap_ \x3d {};\n\n\n/**\n * Schedules an error to be thrown after a delay.\n * @param {*} error Error from a failing deferred.\n * @return {number} Id of the error.\n * @private\n */\ngoog.async.Deferred.scheduleError_ \x3d function(error) {\n  var deferredError \x3d new goog.async.Deferred.Error_(error);\n  goog.async.Deferred.errorMap_[deferredError.id_] \x3d deferredError;\n  return deferredError.id_;\n};\n\n\n/**\n * Unschedules an error from being thrown.\n * @param {number} id Id of the deferred error to unschedule.\n * @private\n */\ngoog.async.Deferred.unscheduleError_ \x3d function(id) {\n  var error \x3d goog.async.Deferred.errorMap_[id];\n  if (error) {\n    error.resetTimer();\n    delete goog.async.Deferred.errorMap_[id];\n  }\n};\n\n\n/**\n * Asserts that there are no pending deferred errors. If there are any\n * scheduled errors, one will be thrown immediately to make this function fail.\n */\ngoog.async.Deferred.assertNoErrors \x3d function() {\n  var map \x3d goog.async.Deferred.errorMap_;\n  for (var key in map) {\n    var error \x3d map[key];\n    error.resetTimer();\n    error.throwError();\n  }\n};\n\n//# sourceURL\x3dhttps://qs/third_party/javascript/closure/mochikit/async/deferred.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/module/modulemanager.js";
eval("// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A default implementation for managing Javascript code modules.\n *\n * @author darick@google.com (Darick Tong)\n * @author pupius@google.com (Daniel Pupius)\n * @author ssaviano@google.com (Steven Saviano)\n */\n\ngoog.provide(\x27goog.module.ModuleManager\x27);\ngoog.provide(\x27goog.module.ModuleManager.CallbackType\x27);\ngoog.provide(\x27goog.module.ModuleManager.FailureType\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.async.Deferred\x27);\ngoog.require(\x27goog.debug.Trace\x27);\ngoog.require(\x27goog.disposeAll\x27);\ngoog.require(\x27goog.loader.AbstractModuleManager\x27);\ngoog.require(\x27goog.loader.activeModuleManager\x27);\ngoog.require(\x27goog.log\x27);\n/** @suppress {extraRequire} */\ngoog.require(\x27goog.module\x27);\ngoog.require(\x27goog.module.ModuleInfo\x27);\ngoog.require(\x27goog.module.ModuleLoadCallback\x27);\ngoog.require(\x27goog.object\x27);\n\n\n/**\n * The ModuleManager keeps track of all modules in the environment.\n * Since modules may not have their code loaded, we must keep track of them.\n * @constructor\n * @extends {goog.loader.AbstractModuleManager}\n * @struct\n */\ngoog.module.ModuleManager \x3d function() {\n  goog.module.ModuleManager.base(this, \x27constructor\x27);\n\n  /**\n   * A mapping from module id to ModuleInfo object.\n   * @private {!Object\x3cstring, !goog.module.ModuleInfo\x3e}\n   */\n  this.moduleInfoMap_ \x3d {};\n\n  // TODO (malteubl): Switch this to a reentrant design.\n  /**\n   * The ids of the currently loading modules. If batch mode is disabled, then\n   * this array will never contain more than one element at a time.\n   * @type {!Array\x3cstring\x3e}\n   * @private\n   */\n  this.loadingModuleIds_ \x3d [];\n\n  /**\n   * The requested ids of the currently loading modules. This does not include\n   * module dependencies that may also be loading.\n   * @type {!Array\x3cstring\x3e}\n   * @private\n   */\n  this.requestedLoadingModuleIds_ \x3d [];\n\n  // TODO(malteubl): Make these and other arrays that are used as sets be\n  // actual sets.\n  /**\n   * All module ids that have ever been requested. In concurrent loading these\n   * are the ones to subtract from future requests.\n   * @type {!Array\x3cstring\x3e}\n   * @private\n   */\n  this.requestedModuleIds_ \x3d [];\n\n  /**\n   * A queue of the ids of requested but not-yet-loaded modules. The zero\n   * position is the front of the queue. This is a 2-D array to group modules\n   * together with other modules that should be batch loaded with them, if\n   * batch loading is enabled.\n   * @type {!Array\x3c!Array\x3cstring\x3e\x3e}\n   * @private\n   */\n  this.requestedModuleIdsQueue_ \x3d [];\n\n  /**\n   * The ids of the currently loading modules which have been initiated by user\n   * actions.\n   * @type {!Array\x3cstring\x3e}\n   * @private\n   */\n  this.userInitiatedLoadingModuleIds_ \x3d [];\n\n  /**\n   * A map of callback types to the functions to call for the specified\n   * callback type.\n   * @type {!Object\x3c!goog.loader.AbstractModuleManager.CallbackType,\n   *     !Array\x3c!Function\x3e\x3e}\n   * @private\n   */\n  this.callbackMap_ \x3d {};\n\n  /**\n   * Module info for the base module (the one that contains the module\n   * manager code), which we set as the loading module so one can\n   * register initialization callbacks in the base module.\n   *\n   * The base module is considered loaded when #setAllModuleInfo is called or\n   * #setModuleContext is called, whichever comes first.\n   *\n   * @type {!goog.module.ModuleInfo}\n   * @private\n   */\n  this.baseModuleInfo_ \x3d new goog.module.ModuleInfo([], \x27\x27);\n\n  /**\n   * The module that is currently loading, or null if not loading anything.\n   * @type {?goog.module.ModuleInfo}\n   * @private\n   */\n  this.currentlyLoadingModule_ \x3d this.baseModuleInfo_;\n\n  /**\n   * The id of the last requested initial module. When it loaded\n   * the deferred in `this.initialModulesLoaded_` resolves.\n   * @private {?string}\n   */\n  this.lastInitialModuleId_ \x3d null;\n\n  /**\n   * Deferred for when all initial modules have loaded. We currently block\n   * sending additional module requests until this deferred resolves. In a\n   * future optimization it may be possible to use the initial modules as\n   * seeds for the module loader \x22requested module ids\x22 and start making new\n   * requests even sooner.\n   * @private {!goog.async.Deferred}\n   */\n  this.initialModulesLoaded_ \x3d new goog.async.Deferred();\n\n  /**\n   * A logger.\n   * @private {?goog.log.Logger}\n   */\n  this.logger_ \x3d goog.log.getLogger(\x27goog.module.ModuleManager\x27);\n\n  /**\n   * Whether the batch mode (i.e. the loading of multiple modules with just one\n   * request) has been enabled.\n   * @private {boolean}\n   */\n  this.batchModeEnabled_ \x3d false;\n\n  /**\n   * Whether the module requests may be sent out of order.\n   * @private {boolean}\n   */\n  this.concurrentLoadingEnabled_ \x3d false;\n\n  // TODO(jananir): Remove tracer.\n  /**\n   * Tracer that measures how long it takes to load a module.\n   * @private {?number}\n   */\n  this.loadTracer_ \x3d null;\n\n  /**\n   * The number of consecutive failures that have happened upon module load\n   * requests.\n   * @private {number}\n   */\n  this.consecutiveFailures_ \x3d 0;\n\n  /**\n   * Determines if the module manager was just active before the processing of\n   * the last data.\n   * @private {boolean}\n   */\n  this.lastActive_ \x3d false;\n\n  /**\n   * Determines if the module manager was just user active before the processing\n   * of the last data. The module manager is user active if any of the\n   * user-initiated modules are loading or queued up to load.\n   * @private {boolean}\n   */\n  this.userLastActive_ \x3d false;\n};\ngoog.inherits(goog.module.ModuleManager, goog.loader.AbstractModuleManager);\n\n\n/**\n * The type of callbacks that can be registered with the module manager,.\n * @enum {string}\n */\ngoog.module.ModuleManager.CallbackType \x3d\n    goog.loader.AbstractModuleManager.CallbackType;\n\n\n/**\n * The possible reasons for a module load failure callback being fired.\n * @enum {number}\n */\ngoog.module.ModuleManager.FailureType \x3d\n    goog.loader.AbstractModuleManager.FailureType;\n\n\n/**\n * A non-HTTP status code indicating a corruption in loaded module.\n * This should be used by a ModuleLoader as a replacement for the HTTP code\n * given to the error handler function to indicated that the module was\n * corrupted.\n * This will set the forceReload flag on the loadModules method when retrying\n * module loading.\n * @type {number}\n */\ngoog.module.ModuleManager.CORRUPT_RESPONSE_STATUS_CODE \x3d\n    goog.loader.AbstractModuleManager.CORRUPT_RESPONSE_STATUS_CODE;\n\n\n/** @return {!goog.loader.AbstractModuleManager} */\ngoog.module.ModuleManager.getInstance \x3d function() {\n  return goog.loader.activeModuleManager.get(function() {\n    return new goog.module.ModuleManager();\n  });\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.setBatchModeEnabled \x3d function(enabled) {\n  this.batchModeEnabled_ \x3d enabled;\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.setConcurrentLoadingEnabled \x3d function(\n    enabled) {\n  this.concurrentLoadingEnabled_ \x3d enabled;\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.setAllModuleInfo \x3d function(infoMap) {\n  for (var id in infoMap) {\n    this.moduleInfoMap_[id] \x3d new goog.module.ModuleInfo(infoMap[id], id);\n  }\n  if (!this.initialModulesLoaded_.hasFired()) {\n    this.initialModulesLoaded_.callback();\n  }\n  this.maybeFinishBaseLoad_();\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.setAllModuleInfoString \x3d function(\n    opt_info, opt_loadingModuleIds) {\n  // Check for legacy direct-from-prototype usage.\n  if (!(this instanceof goog.module.ModuleManager)) {\n    this.setAllModuleInfoString(opt_info, opt_loadingModuleIds);\n    return;\n  }\n  if (!goog.isString(opt_info)) {\n    // The call to this method is generated in two steps, the argument is added\n    // after some of the compilation passes.  This means that the initial code\n    // doesn\x27t have any arguments and causes compiler errors.  We make it\n    // optional to satisfy this constraint.\n    return;\n  }\n\n  var modules \x3d opt_info.split(\x27/\x27);\n  var moduleIds \x3d [];\n\n  // Split the string into the infoMap of id-\x3edeps\n  for (var i \x3d 0; i \x3c modules.length; i++) {\n    var parts \x3d modules[i].split(\x27:\x27);\n    var id \x3d parts[0];\n    var deps;\n    if (parts[1]) {\n      deps \x3d parts[1].split(\x27,\x27);\n      for (var j \x3d 0; j \x3c deps.length; j++) {\n        var index \x3d parseInt(deps[j], 36);\n        goog.asserts.assert(\n            moduleIds[index], \x27No module @ %s, dep of %s @ %s\x27, index, id, i);\n        deps[j] \x3d moduleIds[index];\n      }\n    } else {\n      deps \x3d [];\n    }\n    moduleIds.push(id);\n    this.moduleInfoMap_[id] \x3d new goog.module.ModuleInfo(deps, id);\n  }\n  if (opt_loadingModuleIds \x26\x26 opt_loadingModuleIds.length) {\n    goog.array.extend(this.loadingModuleIds_, opt_loadingModuleIds);\n    // The last module in the list of initial modules. When it has loaded all\n    // initial modules have loaded.\n    this.lastInitialModuleId_ \x3d\n        /** @type {?string}  */ (goog.array.peek(opt_loadingModuleIds));\n  } else {\n    if (!this.initialModulesLoaded_.hasFired()) {\n      this.initialModulesLoaded_.callback();\n    }\n  }\n  this.maybeFinishBaseLoad_();\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.getModuleInfo \x3d function(id) {\n  return this.moduleInfoMap_[id];\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.setModuleTrustedUris \x3d function(\n    moduleUriMap) {\n  for (var id in moduleUriMap) {\n    this.moduleInfoMap_[id].setTrustedUris(moduleUriMap[id]);\n  }\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.setModuleContext \x3d function(context) {\n  goog.module.ModuleManager.base(this, \x27setModuleContext\x27, context);\n  this.maybeFinishBaseLoad_();\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.isActive \x3d function() {\n  return this.loadingModuleIds_.length \x3e 0;\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.isUserActive \x3d function() {\n  return this.userInitiatedLoadingModuleIds_.length \x3e 0;\n};\n\n\n/**\n * Dispatches an ACTIVE or IDLE event if necessary.\n * @private\n */\ngoog.module.ModuleManager.prototype.dispatchActiveIdleChangeIfNeeded_ \x3d\n    function() {\n  var lastActive \x3d this.lastActive_;\n  var active \x3d this.isActive();\n  if (active !\x3d lastActive) {\n    this.executeCallbacks_(\n        active ? goog.loader.AbstractModuleManager.CallbackType.ACTIVE :\n                 goog.loader.AbstractModuleManager.CallbackType.IDLE);\n\n    // Flip the last active value.\n    this.lastActive_ \x3d active;\n  }\n\n  // Check if the module manager is user active i.e., there are user initiated\n  // modules being loaded or queued up to be loaded.\n  var userLastActive \x3d this.userLastActive_;\n  var userActive \x3d this.isUserActive();\n  if (userActive !\x3d userLastActive) {\n    this.executeCallbacks_(\n        userActive ?\n            goog.loader.AbstractModuleManager.CallbackType.USER_ACTIVE :\n            goog.loader.AbstractModuleManager.CallbackType.USER_IDLE);\n\n    // Flip the last user active value.\n    this.userLastActive_ \x3d userActive;\n  }\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.preloadModule \x3d function(id, opt_timeout) {\n  var d \x3d new goog.async.Deferred();\n  window.setTimeout(\n      goog.bind(this.addLoadModule_, this, id, d), opt_timeout || 0);\n  return d;\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.prefetchModule \x3d function(id) {\n  var moduleInfo \x3d this.getModuleInfo(id);\n  if (moduleInfo.isLoaded() || this.isModuleLoading(id)) {\n    throw new Error(\x27Module load already requested: \x27 + id);\n  } else if (this.batchModeEnabled_) {\n    throw new Error(\x27Modules prefetching is not supported in batch mode\x27);\n  } else {\n    var idWithDeps \x3d this.getNotYetLoadedTransitiveDepIds_(id);\n    for (var i \x3d 0; i \x3c idWithDeps.length; i++) {\n      this.getLoader().prefetchModule(\n          idWithDeps[i], this.moduleInfoMap_[idWithDeps[i]]);\n    }\n  }\n};\n\n\n/**\n * Loads a single module for use with a given deferred.\n *\n * @param {string} id The id of the module to load.\n * @param {!goog.async.Deferred} d A deferred object.\n * @private\n */\ngoog.module.ModuleManager.prototype.addLoadModule_ \x3d function(id, d) {\n  var moduleInfo \x3d this.getModuleInfo(id);\n  if (moduleInfo.isLoaded()) {\n    d.callback(this.getModuleContext());\n    return;\n  }\n\n  this.registerModuleLoadCallbacks_(id, moduleInfo, false, d);\n  if (!this.isModuleLoading(id)) {\n    this.loadModulesOrEnqueue_([id]);\n  }\n};\n\n\n/**\n * Loads a list of modules or, if some other module is currently being loaded,\n * appends the ids to the queue of requested module ids. Registers callbacks a\n * module that is currently loading and returns a fired deferred for a module\n * that is already loaded.\n *\n * @param {!Array\x3cstring\x3e} ids The id of the module to load.\n * @param {boolean\x3d} opt_userInitiated If the load is a result of a user action.\n * @return {!Object\x3cstring, !goog.async.Deferred\x3e} A mapping from id (String)\n *     to deferred objects that will callback or errback when the load for that\n *     id is finished.\n * @private\n */\ngoog.module.ModuleManager.prototype.loadModulesOrEnqueueIfNotLoadedOrLoading_ \x3d\n    function(ids, opt_userInitiated) {\n  var uniqueIds \x3d [];\n  goog.array.removeDuplicates(ids, uniqueIds);\n  var idsToLoad \x3d [];\n  var deferredMap \x3d {};\n  for (var i \x3d 0; i \x3c uniqueIds.length; i++) {\n    var id \x3d uniqueIds[i];\n    var moduleInfo \x3d this.getModuleInfo(id);\n    if (!moduleInfo) {\n      throw new Error(\x27Unknown module: \x27 + id);\n    }\n    var d \x3d new goog.async.Deferred();\n    deferredMap[id] \x3d d;\n    if (moduleInfo.isLoaded()) {\n      d.callback(this.getModuleContext());\n    } else {\n      this.registerModuleLoadCallbacks_(id, moduleInfo, !!opt_userInitiated, d);\n      if (!this.isModuleLoading(id)) {\n        idsToLoad.push(id);\n      }\n    }\n  }\n\n  // If there are ids to load, load them, otherwise, they are all loading or\n  // loaded.\n  if (idsToLoad.length \x3e 0) {\n    this.loadModulesOrEnqueue_(idsToLoad);\n  }\n  return deferredMap;\n};\n\n\n/**\n * Registers the callbacks and handles logic if it is a user initiated module\n * load.\n *\n * @param {string} id The id of the module to possibly load.\n * @param {!goog.module.ModuleInfo} moduleInfo The module identifier for the\n *     given id.\n * @param {boolean} userInitiated If the load was user initiated.\n * @param {!goog.async.Deferred} d A deferred object.\n * @private\n */\ngoog.module.ModuleManager.prototype.registerModuleLoadCallbacks_ \x3d function(\n    id, moduleInfo, userInitiated, d) {\n  moduleInfo.registerCallback(d.callback, d);\n  moduleInfo.registerErrback(function(err) {\n    d.errback(Error(err));\n  });\n  // If it\x27s already loading, we don\x27t have to do anything besides handle\n  // if it was user initiated\n  if (this.isModuleLoading(id)) {\n    if (userInitiated) {\n      goog.log.info(\n          this.logger_, \x27User initiated module already loading: \x27 + id);\n      this.addUserInitiatedLoadingModule_(id);\n      this.dispatchActiveIdleChangeIfNeeded_();\n    }\n  } else {\n    if (userInitiated) {\n      goog.log.info(this.logger_, \x27User initiated module load: \x27 + id);\n      this.addUserInitiatedLoadingModule_(id);\n    } else {\n      goog.log.info(this.logger_, \x27Initiating module load: \x27 + id);\n    }\n  }\n};\n\n\n/**\n * Initiates loading of a list of modules or, if a module is currently being\n * loaded, appends the modules to the queue of requested module ids.\n *\n * The caller should verify that the requested modules are not already loaded or\n * loading. {@link #loadModulesOrEnqueueIfNotLoadedOrLoading_} is a more lenient\n * alternative to this method.\n *\n * @param {!Array\x3cstring\x3e} ids The ids of the modules to load.\n * @private\n */\ngoog.module.ModuleManager.prototype.loadModulesOrEnqueue_ \x3d function(ids) {\n  // With concurrent loading we always just send off the request.\n  if (this.concurrentLoadingEnabled_) {\n    // For now we wait for initial modules to have downloaded as this puts the\n    // loader in a good state for calculating the needed deps of additional\n    // loads.\n    // TODO(malteubl): Make this wait unnecessary.\n    this.initialModulesLoaded_.addCallback(\n        goog.bind(this.loadModules_, this, ids));\n  } else {\n    if (goog.array.isEmpty(this.loadingModuleIds_)) {\n      this.loadModules_(ids);\n    } else {\n      this.requestedModuleIdsQueue_.push(ids);\n      this.dispatchActiveIdleChangeIfNeeded_();\n    }\n  }\n};\n\n\n/**\n * Gets the amount of delay to wait before sending a request for more modules.\n * If a certain module request fails, we backoff a little bit and try again.\n * @return {number} Delay, in ms.\n * @private\n */\ngoog.module.ModuleManager.prototype.getBackOff_ \x3d function() {\n  // 5 seconds after one error, 20 seconds after 2.\n  return Math.pow(this.consecutiveFailures_, 2) * 5000;\n};\n\n\n/**\n * Loads a list of modules and any of their not-yet-loaded prerequisites.\n * If batch mode is enabled, the prerequisites will be loaded together with the\n * requested modules and all requested modules will be loaded at the same time.\n *\n * The caller should verify that the requested modules are not already loaded\n * and that no modules are currently loading before calling this method.\n *\n * @param {!Array\x3cstring\x3e} ids The ids of the modules to load.\n * @param {boolean\x3d} opt_isRetry If the load is a retry of a previous load\n *     attempt.\n * @param {boolean\x3d} opt_forceReload Whether to bypass cache while loading the\n *     module.\n * @private\n */\ngoog.module.ModuleManager.prototype.loadModules_ \x3d function(\n    ids, opt_isRetry, opt_forceReload) {\n  if (!opt_isRetry) {\n    this.consecutiveFailures_ \x3d 0;\n  }\n\n  // Not all modules may be loaded immediately if batch mode is not enabled.\n  var idsToLoadImmediately \x3d this.processModulesForLoad_(ids);\n\n  goog.log.info(this.logger_, \x27Loading module(s): \x27 + idsToLoadImmediately);\n  this.loadingModuleIds_ \x3d idsToLoadImmediately;\n\n  if (this.batchModeEnabled_) {\n    this.requestedLoadingModuleIds_ \x3d ids;\n  } else {\n    // If batch mode is disabled, we treat each dependency load as a separate\n    // load.\n    this.requestedLoadingModuleIds_ \x3d goog.array.clone(idsToLoadImmediately);\n  }\n\n  // Dispatch an active/idle change if needed.\n  this.dispatchActiveIdleChangeIfNeeded_();\n\n  if (goog.array.isEmpty(idsToLoadImmediately)) {\n    // All requested modules and deps have been either loaded already or have\n    // already been requested.\n    return;\n  }\n\n  this.requestedModuleIds_.push.apply(\n      this.requestedModuleIds_, idsToLoadImmediately);\n\n  var loadFn \x3d goog.bind(\n      this.getLoader().loadModules, goog.asserts.assert(this.getLoader()),\n      goog.array.clone(idsToLoadImmediately),\n      goog.asserts.assert(this.moduleInfoMap_), null,\n      goog.bind(\n          this.handleLoadError_, this, this.requestedLoadingModuleIds_,\n          idsToLoadImmediately),\n      goog.bind(this.handleLoadTimeout_, this), !!opt_forceReload);\n\n  var delay \x3d this.getBackOff_();\n  if (delay) {\n    window.setTimeout(loadFn, delay);\n  } else {\n    loadFn();\n  }\n};\n\n\n/**\n * Processes a list of module ids for loading. Checks if any of the modules are\n * already loaded and then gets transitive deps. Queues any necessary modules\n * if batch mode is not enabled. Returns the list of ids that should be loaded.\n *\n * @param {!Array\x3cstring\x3e} ids The ids that need to be loaded.\n * @return {!Array\x3cstring\x3e} The ids to load, including dependencies.\n * @throws {!Error} If the module is already loaded.\n * @private\n */\ngoog.module.ModuleManager.prototype.processModulesForLoad_ \x3d function(ids) {\n  for (var i \x3d 0; i \x3c ids.length; i++) {\n    var moduleInfo \x3d this.moduleInfoMap_[ids[i]];\n    if (moduleInfo.isLoaded()) {\n      throw new Error(\x27Module already loaded: \x27 + ids[i]);\n    }\n  }\n\n  // Build a list of the ids of this module and any of its not-yet-loaded\n  // prerequisite modules in dependency order.\n  var idsWithDeps \x3d [];\n  for (var i \x3d 0; i \x3c ids.length; i++) {\n    idsWithDeps \x3d\n        idsWithDeps.concat(this.getNotYetLoadedTransitiveDepIds_(ids[i]));\n  }\n  goog.array.removeDuplicates(idsWithDeps);\n\n  if (!this.batchModeEnabled_ \x26\x26 idsWithDeps.length \x3e 1) {\n    var idToLoad \x3d idsWithDeps.shift();\n    goog.log.info(\n        this.logger_, \x27Must load \x27 + idToLoad + \x27 module before \x27 + ids);\n\n    // Insert the requested module id and any other not-yet-loaded prereqs\n    // that it has at the front of the queue.\n    var queuedModules \x3d goog.array.map(idsWithDeps, function(id) {\n      return [id];\n    });\n    this.requestedModuleIdsQueue_ \x3d\n        queuedModules.concat(this.requestedModuleIdsQueue_);\n    return [idToLoad];\n  } else {\n    return idsWithDeps;\n  }\n};\n\n\n/**\n * Builds a list of the ids of the not-yet-loaded modules that a particular\n * module transitively depends on, including itself.\n *\n * @param {string} id The id of a not-yet-loaded module.\n * @return {!Array\x3cstring\x3e} An array of module ids in dependency order that\x27s\n *     guaranteed to end with the provided module id.\n * @private\n */\ngoog.module.ModuleManager.prototype.getNotYetLoadedTransitiveDepIds_ \x3d function(\n    id) {\n  var requestedModuleSet \x3d goog.object.createSet(this.requestedModuleIds_);\n  // NOTE(pupius): We want the earliest occurrence of a module, not the first\n  // dependency we find. Therefore we strip duplicates at the end rather than\n  // during.  See the tests for concrete examples.\n  var ids \x3d [];\n  if (!requestedModuleSet[id]) {\n    ids.push(id);\n  }\n  var depIdLookupList \x3d [id];\n  // BFS by iterating through dependencies and enqueuing their respective\n  // dependencies into the lookup list.\n  for (var i \x3d 0; i \x3c depIdLookupList.length; i++) {\n    var depIds \x3d this.getModuleInfo(depIdLookupList[i]).getDependencies();\n    for (var j \x3d depIds.length - 1; j \x3e\x3d 0; j--) {\n      var depId \x3d depIds[j];\n      if (!this.getModuleInfo(depId).isLoaded() \x26\x26 !requestedModuleSet[depId]) {\n        ids.push(depId);\n        depIdLookupList.push(depId);\n      }\n    }\n  }\n\n  // Leaf dependencies should come before others. Please refer to test cases for\n  // exact order.\n  ids.reverse();\n  goog.array.removeDuplicates(ids);\n  return ids;\n};\n\n\n/**\n * If we are still loading the base module, consider the load complete.\n * @private\n */\ngoog.module.ModuleManager.prototype.maybeFinishBaseLoad_ \x3d function() {\n  if (this.currentlyLoadingModule_ \x3d\x3d this.baseModuleInfo_) {\n    this.currentlyLoadingModule_ \x3d null;\n    var error \x3d\n        this.baseModuleInfo_.onLoad(goog.bind(this.getModuleContext, this));\n    if (error) {\n      this.dispatchModuleLoadFailed_(\n          goog.loader.AbstractModuleManager.FailureType.INIT_ERROR);\n    }\n\n    this.dispatchActiveIdleChangeIfNeeded_();\n  }\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.setLoaded \x3d function(id) {\n  if (this.isDisposed()) {\n    goog.log.warning(\n        this.logger_, \x27Module loaded after module manager was disposed: \x27 + id);\n    return;\n  }\n\n  goog.log.info(this.logger_, \x27Module loaded: \x27 + id);\n\n  var error \x3d\n      this.moduleInfoMap_[id].onLoad(goog.bind(this.getModuleContext, this));\n  if (error) {\n    this.dispatchModuleLoadFailed_(\n        goog.loader.AbstractModuleManager.FailureType.INIT_ERROR);\n  }\n\n  // Remove the module id from the user initiated set if it existed there.\n  goog.array.remove(this.userInitiatedLoadingModuleIds_, id);\n\n  // Remove the module id from the loading modules if it exists there.\n  goog.array.remove(this.loadingModuleIds_, id);\n\n  if (goog.array.isEmpty(this.loadingModuleIds_)) {\n    // No more modules are currently being loaded (e.g. arriving later in the\n    // same HTTP response), so proceed to load the next module in the queue.\n    this.loadNextModules_();\n  }\n\n  if (this.lastInitialModuleId_ \x26\x26 id \x3d\x3d this.lastInitialModuleId_) {\n    if (!this.initialModulesLoaded_.hasFired()) {\n      this.initialModulesLoaded_.callback();\n    }\n  }\n\n  // Dispatch an active/idle change if needed.\n  this.dispatchActiveIdleChangeIfNeeded_();\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.isModuleLoading \x3d function(id) {\n  if (goog.array.contains(this.loadingModuleIds_, id)) {\n    return true;\n  }\n  for (var i \x3d 0; i \x3c this.requestedModuleIdsQueue_.length; i++) {\n    if (goog.array.contains(this.requestedModuleIdsQueue_[i], id)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.execOnLoad \x3d function(\n    moduleId, fn, opt_handler, opt_noLoad, opt_userInitiated,\n    opt_preferSynchronous) {\n  var moduleInfo \x3d this.moduleInfoMap_[moduleId];\n  var callbackWrapper;\n\n  if (moduleInfo.isLoaded()) {\n    goog.log.info(this.logger_, moduleId + \x27 module already loaded\x27);\n    // Call async so that code paths don\x27t change between loaded and unloaded\n    // cases.\n    callbackWrapper \x3d new goog.module.ModuleLoadCallback(fn, opt_handler);\n    if (opt_preferSynchronous) {\n      callbackWrapper.execute(this.getModuleContext());\n    } else {\n      window.setTimeout(goog.bind(callbackWrapper.execute, callbackWrapper), 0);\n    }\n  } else if (this.isModuleLoading(moduleId)) {\n    goog.log.info(this.logger_, moduleId + \x27 module already loading\x27);\n    callbackWrapper \x3d moduleInfo.registerCallback(fn, opt_handler);\n    if (opt_userInitiated) {\n      goog.log.info(\n          this.logger_, \x27User initiated module already loading: \x27 + moduleId);\n      this.addUserInitiatedLoadingModule_(moduleId);\n      this.dispatchActiveIdleChangeIfNeeded_();\n    }\n  } else {\n    goog.log.info(this.logger_, \x27Registering callback for module: \x27 + moduleId);\n    callbackWrapper \x3d moduleInfo.registerCallback(fn, opt_handler);\n    if (!opt_noLoad) {\n      if (opt_userInitiated) {\n        goog.log.info(this.logger_, \x27User initiated module load: \x27 + moduleId);\n        this.addUserInitiatedLoadingModule_(moduleId);\n      }\n      goog.log.info(this.logger_, \x27Initiating module load: \x27 + moduleId);\n      this.loadModulesOrEnqueue_([moduleId]);\n    }\n  }\n  return callbackWrapper;\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.load \x3d function(\n    moduleId, opt_userInitiated) {\n  return this.loadModulesOrEnqueueIfNotLoadedOrLoading_(\n      [moduleId], opt_userInitiated)[moduleId];\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.loadMultiple \x3d function(\n    moduleIds, opt_userInitiated) {\n  return this.loadModulesOrEnqueueIfNotLoadedOrLoading_(\n      moduleIds, opt_userInitiated);\n};\n\n\n/**\n * Ensures that the module with the given id is listed as a user-initiated\n * module that is being loaded. This method guarantees that a module will never\n * get listed more than once.\n * @param {string} id Identifier of the module.\n * @private\n */\ngoog.module.ModuleManager.prototype.addUserInitiatedLoadingModule_ \x3d function(\n    id) {\n  if (!goog.array.contains(this.userInitiatedLoadingModuleIds_, id)) {\n    this.userInitiatedLoadingModuleIds_.push(id);\n  }\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.beforeLoadModuleCode \x3d function(id) {\n  this.loadTracer_ \x3d\n      goog.debug.Trace.startTracer(\x27Module Load: \x27 + id, \x27Module Load\x27);\n  if (this.currentlyLoadingModule_) {\n    goog.log.error(\n        this.logger_,\n        \x27beforeLoadModuleCode called with module \x22\x27 + id + \x27\x22 while module \x22\x27 +\n            this.currentlyLoadingModule_.getId() + \x27\x22 is loading\x27);\n  }\n  this.currentlyLoadingModule_ \x3d this.getModuleInfo(id);\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.afterLoadModuleCode \x3d function(id) {\n  if (!this.currentlyLoadingModule_ ||\n      id !\x3d this.currentlyLoadingModule_.getId()) {\n    goog.log.error(\n        this.logger_,\n        \x27afterLoadModuleCode called with module \x22\x27 + id +\n            \x27\x22 while loading module \x22\x27 +\n            (this.currentlyLoadingModule_ \x26\x26\n             this.currentlyLoadingModule_.getId()) +\n            \x27\x22\x27);\n  }\n  this.currentlyLoadingModule_ \x3d null;\n  goog.debug.Trace.stopTracer(this.loadTracer_);\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.registerInitializationCallback \x3d function(\n    fn, opt_handler) {\n  if (!this.currentlyLoadingModule_) {\n    goog.log.error(this.logger_, \x27No module is currently loading\x27);\n  } else {\n    this.currentlyLoadingModule_.registerEarlyCallback(fn, opt_handler);\n  }\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.registerLateInitializationCallback \x3d\n    function(fn, opt_handler) {\n  if (!this.currentlyLoadingModule_) {\n    goog.log.error(this.logger_, \x27No module is currently loading\x27);\n  } else {\n    this.currentlyLoadingModule_.registerCallback(fn, opt_handler);\n  }\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.setModuleConstructor \x3d function(fn) {\n  if (!this.currentlyLoadingModule_) {\n    goog.log.error(this.logger_, \x27No module is currently loading\x27);\n    return;\n  }\n  this.currentlyLoadingModule_.setModuleConstructor(fn);\n};\n\n\n/**\n * Handles a module load failure.\n *\n * @param {!Array\x3cstring\x3e} requestedLoadingModuleIds Modules ids that were\n *     requested in failed request. Does not included calculated dependencies.\n * @param {!Array\x3cstring\x3e} requestedModuleIdsWithDeps All module ids requested\n *     in the failed request including all dependencies.\n * @param {?number} status The error status.\n * @private\n */\ngoog.module.ModuleManager.prototype.handleLoadError_ \x3d function(\n    requestedLoadingModuleIds, requestedModuleIdsWithDeps, status) {\n  this.consecutiveFailures_++;\n  // Module manager was not designed to be reentrant. Reinstate the instance\n  // var with actual value when request failed (Other requests may have\n  // started already.)\n  this.requestedLoadingModuleIds_ \x3d requestedLoadingModuleIds;\n  // Pretend we never requested the failed modules.\n  goog.array.forEach(\n      requestedModuleIdsWithDeps,\n      goog.partial(goog.array.remove, this.requestedModuleIds_), this);\n\n  if (status \x3d\x3d 401) {\n    // The user is not logged in. They\x27ve cleared their cookies or logged out\n    // from another window.\n    goog.log.info(this.logger_, \x27Module loading unauthorized\x27);\n    this.dispatchModuleLoadFailed_(\n        goog.loader.AbstractModuleManager.FailureType.UNAUTHORIZED);\n    // Drop any additional module requests.\n    this.requestedModuleIdsQueue_.length \x3d 0;\n  } else if (status \x3d\x3d 410) {\n    // The requested module js is old and not available.\n    this.requeueBatchOrDispatchFailure_(\n        goog.loader.AbstractModuleManager.FailureType.OLD_CODE_GONE);\n    this.loadNextModules_();\n  } else if (this.consecutiveFailures_ \x3e\x3d 3) {\n    goog.log.info(\n        this.logger_,\n        \x27Aborting after failure to load: \x27 + this.loadingModuleIds_);\n    this.requeueBatchOrDispatchFailure_(\n        goog.loader.AbstractModuleManager.FailureType.CONSECUTIVE_FAILURES);\n    this.loadNextModules_();\n  } else {\n    goog.log.info(\n        this.logger_,\n        \x27Retrying after failure to load: \x27 + this.loadingModuleIds_);\n    var forceReload \x3d status \x3d\x3d\n        goog.loader.AbstractModuleManager.CORRUPT_RESPONSE_STATUS_CODE;\n    this.loadModules_(this.requestedLoadingModuleIds_, true, forceReload);\n  }\n};\n\n\n/**\n * Handles a module load timeout.\n * @private\n */\ngoog.module.ModuleManager.prototype.handleLoadTimeout_ \x3d function() {\n  goog.log.info(\n      this.logger_, \x27Aborting after timeout: \x27 + this.loadingModuleIds_);\n  this.requeueBatchOrDispatchFailure_(\n      goog.loader.AbstractModuleManager.FailureType.TIMEOUT);\n  this.loadNextModules_();\n};\n\n\n/**\n * Requeues batch loads that had more than one requested module\n * (i.e. modules that were not included as dependencies) as separate loads or\n * if there was only one requested module, fails that module with the received\n * cause.\n * @param {!goog.loader.AbstractModuleManager.FailureType} cause The reason for\n *     the failure.\n * @private\n */\ngoog.module.ModuleManager.prototype.requeueBatchOrDispatchFailure_ \x3d function(\n    cause) {\n  // The load failed, so if there are more than one requested modules, then we\n  // need to retry each one as a separate load. Otherwise, if there is only one\n  // requested module, remove it and its dependencies from the queue.\n  if (this.requestedLoadingModuleIds_.length \x3e 1) {\n    var queuedModules \x3d\n        goog.array.map(this.requestedLoadingModuleIds_, function(id) {\n          return [id];\n        });\n    this.requestedModuleIdsQueue_ \x3d\n        queuedModules.concat(this.requestedModuleIdsQueue_);\n  } else {\n    this.dispatchModuleLoadFailed_(cause);\n  }\n};\n\n\n/**\n * Handles when a module load failed.\n * @param {!goog.loader.AbstractModuleManager.FailureType} cause The reason for\n *     the failure.\n * @private\n */\ngoog.module.ModuleManager.prototype.dispatchModuleLoadFailed_ \x3d function(\n    cause) {\n  var failedIds \x3d this.requestedLoadingModuleIds_;\n  this.loadingModuleIds_.length \x3d 0;\n  // If any pending modules depend on the id that failed,\n  // they need to be removed from the queue.\n  var idsToCancel \x3d [];\n  for (var i \x3d 0; i \x3c this.requestedModuleIdsQueue_.length; i++) {\n    var dependentModules \x3d goog.array.filter(\n        this.requestedModuleIdsQueue_[i],\n        /**\n         * Returns true if the requestedId has dependencies on the modules that\n         * just failed to load.\n         * @param {string} requestedId The module to check for dependencies.\n         * @return {boolean} True if the module depends on failed modules.\n         */\n        function(requestedId) {\n          var requestedDeps \x3d\n              this.getNotYetLoadedTransitiveDepIds_(requestedId);\n          return goog.array.some(failedIds, function(id) {\n            return goog.array.contains(requestedDeps, id);\n          });\n        },\n        this);\n    goog.array.extend(idsToCancel, dependentModules);\n  }\n\n  // Also insert the ids that failed to load as ids to cancel.\n  for (var i \x3d 0; i \x3c failedIds.length; i++) {\n    goog.array.insert(idsToCancel, failedIds[i]);\n  }\n\n  // Remove ids to cancel from the queues.\n  for (var i \x3d 0; i \x3c idsToCancel.length; i++) {\n    for (var j \x3d 0; j \x3c this.requestedModuleIdsQueue_.length; j++) {\n      goog.array.remove(this.requestedModuleIdsQueue_[j], idsToCancel[i]);\n    }\n    goog.array.remove(this.userInitiatedLoadingModuleIds_, idsToCancel[i]);\n  }\n\n  // Call the functions for error notification.\n  var errorCallbacks \x3d\n      this.callbackMap_[goog.loader.AbstractModuleManager.CallbackType.ERROR];\n  if (errorCallbacks) {\n    for (var i \x3d 0; i \x3c errorCallbacks.length; i++) {\n      var callback \x3d errorCallbacks[i];\n      for (var j \x3d 0; j \x3c idsToCancel.length; j++) {\n        callback(\n            goog.loader.AbstractModuleManager.CallbackType.ERROR,\n            idsToCancel[j], cause);\n      }\n    }\n  }\n\n  // Call the errbacks on the module info.\n  for (var i \x3d 0; i \x3c failedIds.length; i++) {\n    if (this.moduleInfoMap_[failedIds[i]]) {\n      this.moduleInfoMap_[failedIds[i]].onError(cause);\n    }\n  }\n\n  // Clear the requested loading module ids.\n  this.requestedLoadingModuleIds_.length \x3d 0;\n\n  this.dispatchActiveIdleChangeIfNeeded_();\n};\n\n\n/**\n * Loads the next modules on the queue.\n * @private\n */\ngoog.module.ModuleManager.prototype.loadNextModules_ \x3d function() {\n  while (this.requestedModuleIdsQueue_.length) {\n    // Remove modules that are already loaded.\n    var nextIds \x3d\n        goog.array.filter(this.requestedModuleIdsQueue_.shift(), function(id) {\n          return !this.getModuleInfo(id).isLoaded();\n        }, this);\n    if (nextIds.length \x3e 0) {\n      this.loadModules_(nextIds);\n      return;\n    }\n  }\n\n  // Dispatch an active/idle change if needed.\n  this.dispatchActiveIdleChangeIfNeeded_();\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.registerCallback \x3d function(types, fn) {\n  if (!goog.isArray(types)) {\n    types \x3d [types];\n  }\n\n  for (var i \x3d 0; i \x3c types.length; i++) {\n    this.registerCallback_(types[i], fn);\n  }\n};\n\n\n/**\n * Register a callback for the specified callback type.\n * @param {!goog.loader.AbstractModuleManager.CallbackType} type The callback\n *     type.\n * @param {!Function} fn The callback function.\n * @private\n */\ngoog.module.ModuleManager.prototype.registerCallback_ \x3d function(type, fn) {\n  var callbackMap \x3d this.callbackMap_;\n  if (!callbackMap[type]) {\n    callbackMap[type] \x3d [];\n  }\n  callbackMap[type].push(fn);\n};\n\n\n/**\n * Call the callback functions of the specified type.\n * @param {!goog.loader.AbstractModuleManager.CallbackType} type The callback\n *     type.\n * @private\n */\ngoog.module.ModuleManager.prototype.executeCallbacks_ \x3d function(type) {\n  var callbacks \x3d this.callbackMap_[type];\n  for (var i \x3d 0; callbacks \x26\x26 i \x3c callbacks.length; i++) {\n    callbacks[i](type);\n  }\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.disposeInternal \x3d function() {\n  goog.module.ModuleManager.base(this, \x27disposeInternal\x27);\n\n  // Dispose of each ModuleInfo object.\n  goog.disposeAll(\n      goog.object.getValues(this.moduleInfoMap_), this.baseModuleInfo_);\n  this.moduleInfoMap_ \x3d {};\n  this.loadingModuleIds_ \x3d [];\n  this.requestedLoadingModuleIds_ \x3d [];\n  this.userInitiatedLoadingModuleIds_ \x3d [];\n  this.requestedModuleIdsQueue_ \x3d [];\n  this.callbackMap_ \x3d {};\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/module/modulemanager.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/modulemanager/modulemanager.js";
eval("// Copyright 2012 Google Inc. All Rights Reserved.\n\n/**\n * @fileoverview GWS late loaded module support.\n * @author martone@google.com (Andy Martone)\n */\n\ngoog.provide(\x27gws.ModuleManagerDelegate\x27);\ngoog.provide(\x27gws.moduleManager\x27);\ngoog.provide(\x27gws.moduleManager.Singleton\x27);\n\ngoog.require(\x27fava.delegate.Delegate\x27);\ngoog.require(\x27fava.delegate.Delegator\x27);\ngoog.require(\x27fava.modules.ScsJsUrl\x27);\ngoog.require(\x27goog.Promise\x27);\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.functions\x27);\ngoog.require(\x27goog.log\x27);\ngoog.require(\x27goog.module.ModuleManager\x27);\ngoog.require(\x27goog.object\x27);\ngoog.require(\x27goog.uri.utils\x27);\ngoog.require(\x27gws.error\x27);\ngoog.require(\x27gws.moduleInterface\x27);\ngoog.require(\x27gws.modules.ModuleLoader\x27);\n\ngoog.forwardDeclare(\x27goog.loader.AbstractModuleManager\x27);\n\n/**\n * @package {{\n *   createModuleLoader: function(): !gws.modules.ModuleLoader\n * }}\n */\ngws.moduleManager.mod \x3d {\n  createModuleLoader() {\n    return new gws.modules.ModuleLoader(google.xjsu);\n  },\n};\n\n/**\n * Whether we\x27ve initialized our copy of the ModuleManager\n * @type {boolean}\n * @private\n */\ngws.moduleManager.initialized_ \x3d false;\n\n\n/**\n * Module manager logger instance.\n * @private {?goog.log.Logger}\n */\ngws.moduleManager.logger_ \x3d goog.log.getLogger(\x27gws.moduleManager\x27);\n\n\n/**\n * Performs necessary initialization of the ModuleManager once and then returns\n * it.\n * @return {!goog.loader.AbstractModuleManager} an initialized instance of\n *     ModuleManager.\n */\ngws.moduleManager.getModuleManager \x3d function() {\n  var moduleManager \x3d goog.module.ModuleManager.getInstance();\n  if (!gws.moduleManager.initialized_) {\n    var loader \x3d gws.moduleManager.mod.createModuleLoader();\n    moduleManager.setBatchModeEnabled(true);\n    moduleManager.setLoader(loader);\n    gws.moduleManager.initialized_ \x3d true;\n  }\n\n  return moduleManager;\n};\n\n\n/**\n * Initiates a client-side load of the desired Pinto module, and optionally\n * executes a callback once it\x27s loaded.  Throws an error immediately if the\n * passed module ID is invalid/unknown.\n * @param {string} moduleId the ID of the pinto_module to load.\n * @param {function(this: T)\x3d} opt_callback a function to execute once the\n *     module loads successfully.\n * @param {T\x3d} opt_scope Scope under which to execute the callback.\n * @template T\n */\ngws.moduleManager.load \x3d function(moduleId, opt_callback, opt_scope) {\n  gws.moduleManager.Singleton.getInstance().load(\n      moduleId, opt_callback, opt_scope);\n};\n\n\n/**\n * Whether a secondary Pinto request has been made.\n * @type {boolean}\n */\ngws.moduleManager.secondaryLoaded \x3d false;\n\n\n/**\n * Initiates a client-side load of multiple Pinto modules.\n * @param {!Array\x3cstring\x3e} moduleIds The module IDs to load.\n * @param {function()\x3d} opt_callback a function to execute once all modules\n *     load successfully.\n */\ngws.moduleManager.loadAll \x3d function(moduleIds, opt_callback) {\n  gws.moduleManager.Singleton.getInstance().loadAll(moduleIds, opt_callback);\n};\n\n\n/**\n * @return {string} The initialized Pinto version.\n */\ngws.moduleManager.getPintoModuleSetVersion \x3d function() {\n  var version \x3d gws.moduleManager.pintoModuleSetVersion_;\n  goog.asserts.assertString(version, \x27Pinto version was never determined.\x27);\n  return version;\n};\n\n\n/**\n * @return {string} the ID of the current module set.\n */\ngws.moduleManager.getPintoModuleSetId \x3d function() {\n  return goog.asserts.assert(gws.moduleManager.pintoModuleSetId_);\n};\n\n\n/**\n * The Pinto module set version.\n * This is extracted from the Pinto URL (in google.xjsu) at startup.\n * @private {?string}\n */\ngws.moduleManager.pintoModuleSetVersion_;\n\n\n/**\n * The Pinto module set ID.\n * This is extracted from the Pinto URL (in google.xjsu) at startup.\n * @private {?string}\n */\ngws.moduleManager.pintoModuleSetId_;\n\n\n/**\n * Sets the pinto module set version by parsing the parameter out of the\n * Pinto URL given in google.xjsu.\n * @private\n */\ngws.moduleManager.initializePintoModuleSetVersion_ \x3d function() {\n  if (google.xjsu) {\n    const pintoUrl \x3d fava.modules.ScsJsUrl.parse(google.xjsu);\n    // In dev environment the module set version is specified via the \x27ver\x27\n    // query parameter instead of the pinto url parameter format.\n    gws.moduleManager.pintoModuleSetVersion_ \x3d\n        goog.uri.utils.getParamValue(google.xjsu, \x27ver\x27) ||\n        pintoUrl.getRowKey();\n    gws.moduleManager.pintoModuleSetId_ \x3d pintoUrl.getModuleSetId();\n  }\n};\ngoog.exportSymbol(\x27google.load\x27, gws.moduleManager.load);\ngoog.exportSymbol(\x27google.loadAll\x27, gws.moduleManager.loadAll);\n\n\n/**\n * Provides late-loading support for pinto modules.\n */\ngws.moduleManager.Singleton \x3d goog.defineClass(null, {\n  constructor: function() {\n    /**\n     * The delegate instance which will be set by the makeDelegator(this) call\n     * below.\n     * @private {!gws.ModuleManagerDelegate}\n     */\n    this.delegate_;\n\n    fava.delegate.Delegator.makeDelegator(this);\n  },\n\n  /**\n   * Initiates a client-side load of the desired Pinto module, and optionally\n   * executes a callback once it\x27s loaded.  Throws an error immediately if the\n   * passed module ID is invalid/unknown.\n   * @param {string} moduleId the ID of the pinto_module to load.\n   * @param {function(this: T)\x3d} opt_callback a function to execute once the\n   *     module loads successfully.\n   * @param {T\x3d} opt_scope Scope under which to execute the callback.\n   * @template T\n   */\n  load: function(moduleId, opt_callback, opt_scope) {\n    this.delegate_.load(moduleId, opt_callback, opt_scope);\n  },\n\n  /**\n   * Initiates a client-side load of multiple Pinto modules.\n   * @param {!Array\x3cstring\x3e} moduleIds The module IDs to load.\n   * @param {function()\x3d} opt_callback a function to execute once all modules\n   *     load successfully.\n   */\n  loadAll: function(moduleIds, opt_callback) {\n    this.delegate_.loadAll(moduleIds, opt_callback);\n  },\n\n  /**\n   * Function called after each module is loaded.\n   * @param {string} id The id of the module just loaded.\n   */\n  afterLoadModuleCode: function(id) {\n    this.delegate_.afterLoadModuleCode(id);\n  },\n\n  /**\n   * Returns a sequence of functions to call after modules load.\n   * @param {function()} callback The final function to call in sequence.\n   * @return {function()} The sequence of functions to call.\n   */\n  getCallbackFunctionSequence: function(callback) {\n    return this.delegate_.getCallbackFunctionSequence(callback);\n  }\n});\ngoog.addSingletonGetter(gws.moduleManager.Singleton);\n\n\n\n/**\n * @constructor\n * @extends {fava.delegate.Delegate}\n */\ngws.ModuleManagerDelegate \x3d function() {};\nfava.delegate.Delegate.setBase(\n    gws.ModuleManagerDelegate, gws.moduleManager.Singleton);\n\n\n/**\n * Initiates a client-side load of the desired Pinto module, and optionally\n * executes a callback once it\x27s loaded.  Throws an error immediately if the\n * passed module ID is invalid/unknown.\n * @param {string} moduleId the ID of the pinto_module to load.\n * @param {function(this: T)\x3d} opt_callback a function to execute once the\n *     module loads successfully.\n * @param {T\x3d} opt_scope Scope under which to execute the callback.\n * @template T\n */\ngws.ModuleManagerDelegate.prototype.load \x3d function(\n    moduleId, opt_callback, opt_scope) {\n  goog.log.info(gws.moduleManager.logger_, \x27loading module \x27 + moduleId);\n  // NOTE(martone): if a module is late loaded and registers with the module\n  // interface, we want to run its init function after it loads, and then the\n  // callback passed as a parameter.\n  var callbacks \x3d goog.functions.sequence(\n      gws.moduleInterface.runPendingInits, opt_callback || goog.nullFunction);\n  var moduleManager \x3d gws.moduleManager.getModuleManager();\n  moduleManager.execOnLoad(\n      moduleId, callbacks,\n      goog.isDef(opt_scope) ? goog.asserts.assertObject(opt_scope) : undefined);\n};\nfava.delegate.Delegate.callFirst(gws.ModuleManagerDelegate.prototype.load);\n\n\n/**\n * Initiates a client-side load of multiple Pinto modules.\n * @param {!Array\x3cstring\x3e} moduleIds The module IDs to load.\n * @param {function()\x3d} opt_callback a function to execute once all modules\n *     load successfully.\n */\ngws.ModuleManagerDelegate.prototype.loadAll \x3d function(\n    moduleIds, opt_callback) {\n  goog.log.info(gws.moduleManager.logger_, \x27loading modules \x27 + moduleIds);\n  goog.asserts.assert(\n      !goog.array.isEmpty(moduleIds), \x27loadAll called without any module IDs\x27);\n\n  var moduleManager \x3d gws.moduleManager.getModuleManager();\n\n  // Classify the ids into known and unknown.\n  var buckets \x3d /** @type {!Object\x3cboolean, !Array\x3cstring\x3e\x3e} */ (\n      goog.array.bucket(moduleIds, function(id) {\n        return !!moduleManager.getModuleInfo(id);\n      }));\n  // Log error if there are module ids not known to the module manager.\n  var unknownIds \x3d buckets[false] || [];\n  if (unknownIds.length) {\n    gws.error.log(\n        new Error(\x27loadAll called with unknown module IDs\x27),\n        {\x27ids\x27: unknownIds});\n  }\n\n  var doneCallback \x3d opt_callback || goog.nullFunction;\n  var ids \x3d buckets[true] || [];\n  // Check if there are still any modules to be loaded.\n  var needsToLoad \x3d goog.array.some(ids, function(id) {\n    return !moduleManager.getModuleInfo(id).isLoaded();\n  });\n  if (!needsToLoad) {\n    doneCallback();\n    return;\n  }\n\n  // If so, load them.\n  var loadMap \x3d moduleManager.loadMultiple(ids);\n  goog.log.info(\n      gws.moduleManager.logger_,\n      \x27enqueuing late loaded callbacks after modules \x27 + ids.join(\x27, \x27));\n  var callback \x3d\n      gws.moduleManager.Singleton.getInstance().getCallbackFunctionSequence(\n          doneCallback);\n\n  goog.Promise.allSettled(goog.object.getValues(loadMap)).then(callback);\n  gws.moduleManager.secondaryLoaded \x3d true;\n};\nfava.delegate.Delegate.callFirst(gws.ModuleManagerDelegate.prototype.loadAll);\n\n\n/**\n * Function called after each module is loaded.\n * @param {string} id The id of the module just loaded.\n */\ngws.ModuleManagerDelegate.prototype.afterLoadModuleCode \x3d\n    fava.delegate.Delegate.createMethod();\n\n\n/**\n * Returns a sequence of functions to call after modules load.\n * @param {function()} doneCallback The final function to call in sequence.\n * @return {function()} The sequence of functions to call.\n */\ngws.ModuleManagerDelegate.prototype.getCallbackFunctionSequence \x3d function(\n    doneCallback) {\n  return goog.functions.sequence(\n      gws.moduleInterface.runPendingInits, doneCallback);\n};\nfava.delegate.Delegate.callFirst(\n    gws.ModuleManagerDelegate.prototype.getCallbackFunctionSequence);\n\n\n// Attempt to initialize at startup.\ngws.moduleManager.initializePintoModuleSetVersion_();\n\n// Extra logging code if our script loading fails with a syntax error in\n// uncompiled mode.\nif (!COMPILED) {\n  var delegateOnerror \x3d window.onerror;\n  /**\n   * @type {function(?\x3d, ?\x3d, ?\x3d):undefined}\n   */\n  var onError \x3d function(errorMessage, url, lineno) {\n    if (delegateOnerror) {\n      // Try/catch because it will re-throw the error.\n      try {\n        delegateOnerror.apply(null, arguments);\n      } catch (e) {\n      }\n    }\n    var source \x3d arguments[1] \x3d\x3d\x3d undefined ? \x27\x3cno source arg\x3e\x27 : arguments[1];\n    var line \x3d\n        arguments[2] \x3d\x3d\x3d undefined ? \x27\x3cno line arg\x3e\x27 : String(arguments[2]);\n    var column \x3d\n        arguments[3] \x3d\x3d\x3d undefined ? \x27\x3cno column arg\x3e\x27 : String(arguments[3]);\n    var error \x3d arguments[4];\n    var errorMsg \x3d \x27\x27;\n    if (error \x26\x26 error.stack) {\n      if (error.stack.indexOf(\x27SyntaxError:\x27) !\x3d -1) {\n        var firstFrameRe \x3d /^\\s*at\\s.*\\(([^)]+)\\).*$/m;\n        var syntaxErrorLineMatch \x3d error.stack.match(firstFrameRe);\n        var syntaxErrorLine \x3d syntaxErrorLineMatch \x26\x26 syntaxErrorLineMatch[1] ?\n            syntaxErrorLineMatch[1] :\n            \x27\x27;\n        errorMsg \x3d\n            \x27There was a JavaScript syntax error in the JS source files \x27 +\n            `while loading ${source} at line ${line}:${column}. You can add ` +\n            \x27deb\x3d0cc1 to get a better compilation error printed to the \x27 +\n            \x27console.\\n\\n\x27;\n        if (syntaxErrorLine \x3d\x3d \x27\x3canonymous\x3e\x27) {\n          errorMsg +\x3d \x27The exact file for this syntax error can\\\x27t be \x27 +\n              \x27determined. Try running in ?jsmode\x3dSU, or looking at the \x27 +\n              \x27files in your client for the error.\x27;\n        } else if (syntaxErrorLine) {\n          errorMsg +\x3d\n              \x27The file with the syntax error is the line \x27 + syntaxErrorLine;\n        }\n      }\n    } else {\n      errorMsg \x3d\n          \x27There may be a JavaScript syntax error in the JS source files \x27 +\n          \x27but we dont have the Error object. Error message: \x27 + errorMessage;\n    }\n    console.error(errorMsg);\n  };\n  window.onerror \x3d onError;\n}\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/modulemanager/modulemanager.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/modulemanager/modulesetscope.js";
goog.loadModule("/**\n * @fileoverview Scope to evaluate add-on moduleset XJS code.\n * // TODO(fishx): Generate this list automatically.\n */\n\ngoog.module(\x27search.modules.ModulesetScope\x27);\n\n/**\n * Scope that add-on moduleset XJS code is evaluated in.\n */\nclass ModulesetScope {\n  constructor() {\n    // Sets up any global calls via goog.global.\n    // clear/setTimeout are native method, so should be bind to goog.global for\n    // correct execution context.\n    /** @public @const {function((number|undefined?)):undefined} */\n    this.clearTimeout \x3d (timeoutId) \x3d\x3e\n        goog.global.clearTimeout.call(goog.global, timeoutId);\n    /** @public @const {function((!Function|string), number\x3d, ...?):number} */\n    this.setTimeout \x3d (callback, opt_delay, var_args) \x3d\x3e\n        goog.global.setTimeout.call(goog.global, callback, opt_delay, var_args);\n\n    // Clear symbols in base moduleset\n\n    /** @public @const {!Object} */\n    this.goog \x3d {};\n    /** @public @const {!Object} */\n    this.gws \x3d {};\n    /** @public @const {!Object} */\n    this.jslayout \x3d {};\n    /** @public @const {!Object} */\n    this.jsaction \x3d {};\n    /** @public @const {!Object} */\n    this.search \x3d {};\n    /** @public @const {!Object} */\n    this.fava \x3d {};\n    /** @public @const {!Object} */\n    this.proto \x3d {};\n    /** @public @const {!Object} */\n    this.jspb \x3d {};\n    /** @public @const {!Object} */\n    this.searchbox \x3d {};\n    /** @public @const {!Object} */\n    this.wireless \x3d {};\n    /** @public @const {?Function} */\n    this.xid \x3d null;\n    /** @public @const {!Object} */\n    this.wiz \x3d {};\n  }\n}\n\nexports \x3d ModulesetScope;\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/modulemanager/modulesetscope.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/xid/xid.js";
eval("/**\n * @fileoverview Provides a stable id generator for use from JS and soy.\n */\ngoog.provide(\x27xid\x27);\ngoog.provide(\x27xid.String\x27);\n\ngoog.require(\x27goog.asserts\x27);\n\n\n/**\n * Returns a stable relatively short obfuscated string for a given input\n * string literal.\n *\n * It can be assumed that it is guaranteed that xid(a) !\x3d xid(b) if b !\x3d a;\n * It is guaranteed that xid(a) \x3d\x3d xid(a).\n * In unobfuscated mode the string is just returned with \x27_\x27 appended to\n * mark the processing.\n * TODO(malteubl) Point to equivalent soy implementation.\n * @param {string} id The identifier to obfuscate.\n * @return {xid.String}\n *\n * @idGenerator {xid}\n *\n * NOTE: This must *not* be declared as `var xid`.\n * In super uncompiled mode this file will be loaded and executed in a\n * strict-mode eval, so `var xid` would create a locally scoped variable.\n * The goog.provide(\x27xid\x27) call above correctly creates a global `xid` we can\n * assign to here.\n */\nxid \x3d function(id) {\n  return xid.internal_(id);\n};\n\n\n/**\n * Returns a stable relatively short obfuscated string for a given input\n * string literal.\n * @param {string} id The identifier to obfuscate.\n * @return {xid.String}\n * @private\n */\nxid.internal_ \x3d function(id) {\n  return /** @type {xid.String} */ (id + \x27_\x27);\n};\n\n\n/**\n * Returns the unobfuscated version of the xid string. Only works in\n * UNCOMPILED mode.\n * @param {xid.String} xidStr\n * @return {string}\n */\nxid.literal \x3d function(xidStr) {\n  if (COMPILED) {\n    throw new Error(\x27xid.literal must not be used in COMPILED mode.\x27);\n  }\n  return xidStr.replace(/_$/, \x27\x27);\n};\n\n\n/**\n * A subtype of string that allows code to accept only strings that have been\n * passed through the xid() function.\n * @enum {string}\n */\nxid.String \x3d {DO_NOT_USE: \x27\x27}; // Enums cannot be empty.\n\n\n/**\n * Returns an Object literal that has every key transformed to be xid(key).\n * @param {!Object.\x3c?\x3e} id Must be an object literal.\n * @return {!Object.\x3cxid.String, ?\x3e}\n * @idGenerator {xid}\n * @suppress {strictMissingProperties} Object.toString() is not defined.\n */\nxid.object \x3d function(id) {\n  // Check if object looks like an object literal in a way that is safe across\n  // frames.\n  if (id \x26\x26 id.constructor \x26\x26\n      id.constructor.toString() \x3d\x3d\x3d Object.toString()) {\n    var copy \x3d {};\n    for (var key in id) {\n      if (id.hasOwnProperty(key)) {\n        copy[xid.internal_(key)] \x3d id[key];\n      }\n    }\n    return copy;\n  }\n  throw new Error(\x27xid.object must be called with an object literal.\x27);\n};\n\n\n/**\n * @define {boolean} Whether xid is used and all names should be assumed to be\n * obfuscated.\n */\ngoog.define(\x27xid.ENFORCE_USAGE\x27, true);\n\n\n/**\n * Asserts that the passed in string looks like it passed through xid. This\n * should be run on engineer written input to make sure they do not forget\n * to obfuscate things.\n * @param {*} id The string to check.\n * @param {string\x3d} opt_message Custom error message.\n * @return {xid.String}\n */\nxid.assertXidLikeString \x3d function(id, opt_message) {\n  if (!goog.asserts.ENABLE_ASSERTS) {\n    return /** @type {xid.String} */ (id);\n  }\n  if (!xid.ENFORCE_USAGE) {\n    return /** @type {xid.String} */ (id);\n  }\n  if (xid.isObfuscating()) {\n    // Obfuscated strings do not have a particular shape.\n    return /** @type {xid.String} */ (id);\n  }\n  goog.asserts.assert(id \x26\x26\n      typeof id \x3d\x3d \x27string\x27 \x26\x26\n      \x27_\x27 \x3d\x3d id.substr(id.length - 1),\n      opt_message || \x27The string \x3c\x27 + id + \x27\x3e does not look like it was \x27 +\n      \x27passed through xid. Did you forget to use xid?\x27);\n  return /** @type {xid.String} */ (id);\n};\n\n\n/**\n * @return {boolean} Returns true if the current compilation mode obfuscates\n *     xid values.\n */\nxid.isObfuscating \x3d function() {\n  return xid(\x27a\x27) !\x3d \x27a_\x27;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/apps/xid/xid.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/xid/integer.js";
eval("/**\n * @fileoverview Provides a function to turn xids into a 32bit integer\n * representation.\n * This file needs to be kept in sync and compatible with\n * http://cs/java/com/google/common/css/FixedMap.java\n * which provides the only implementation used to encode xids. Compatibility\n * is ensured using golden string tests on both sides. The implementations\n * should be kept as similar as possible.\n */\ngoog.provide(\x27xid.integer\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27xid\x27);\n\n\n/** @private @const Possible first chars in a xid. */\nxid.integer.START_CHARS_ \x3d\n    \x27abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\x27;\n\n\n/** @private @const {string} Possible non-first chars in a xid. */\nxid.integer.CHARS_ \x3d xid.integer.START_CHARS_ + \x270123456789\x27;\n\n\n/** @private @const {number} */\nxid.integer.START_RADIX_ \x3d xid.integer.START_CHARS_.length;\n\n\n/** @private @const {number} */\nxid.integer.RADIX_ \x3d xid.integer.CHARS_.length;\n\n\n/** @private @const {number} Minimum value of a Java integer. */\nxid.integer.JAVA_INT_MIN_VALUE_ \x3d 1 \x3c\x3c 31;\n\n\n/**\n * Turns an xid string into a (currently) 32bit integer representation of the\n * same value.\n * @param {string} xidStr\n * @return {number}\n */\nxid.integer.toInteger \x3d function(xidStr) {\n  goog.asserts.assert(xidStr.length \x3c\x3d 6,\n      \x27Xids should not be longer than 6 characters\x27);\n  // Does the opposite of {@see xid.integer.toString}.\n  var i \x3d 0;\n  for (var index \x3d xidStr.length - 1; index \x3e\x3d 0; index--) {\n    var c \x3d xidStr.charAt(index);\n    // Pos is also the modulo of i and radix in the encoding algorithm.\n    var pos \x3d xid.integer.CHARS_.indexOf(c);\n    var radix \x3d (index \x3d\x3d 0) ? xid.integer.START_RADIX_ : xid.integer.RADIX_;\n    // Reverse the division from the encoding algorithm and add pos to\n    // account for the Math.floor in the encoding algorithm.\n    i \x3d i * radix + pos;\n  }\n  // The toString function initially subtracts this to make the integer be\n  // always positive. This reverses that operation.\n  return i + xid.integer.JAVA_INT_MIN_VALUE_;\n};\n\n\n/**\n * Implementation of FixedMap.toString(int i).\n * @param {number} i Integer to be converted to xid format.\n * @return {string} Xid string.\n */\nxid.integer.toString \x3d function(i) {\n  var buf \x3d [];\n  var len \x3d 0;\n\n  var l \x3d i - xid.integer.JAVA_INT_MIN_VALUE_;\n  buf[len++] \x3d xid.integer.START_CHARS_.charAt(l % xid.integer.START_RADIX_);\n  i \x3d Math.floor(l / xid.integer.START_RADIX_);\n\n  while (i \x3e 0) {\n    buf[len++] \x3d xid.integer.CHARS_.charAt(i % xid.integer.RADIX_);\n    i \x3d Math.floor(i / xid.integer.RADIX_);\n  }\n\n  return buf.join(\x27\x27);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/apps/xid/integer.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/xid/hash.js";
eval("/**\n * @fileoverview Implements the legacy Google 32-bit hash function. Based\n * on the Java implementation located at:\n * http://cs/java/com/google/common/hash/TradeSecretHashing.java\n * The hash function should be kept in sync with the one used in:\n * http://cs/java/com/google/common/css/FixedMap.java\n */\ngoog.provide(\x27xid.hash\x27);\n\ngoog.require(\x27xid\x27);\ngoog.require(\x27xid.integer\x27);\n\n\n/**\n * Default 32-bit hash constant (from golden ratio; arbitrary).\n * @private {number}\n */\nxid.hash.CONSTANT_ \x3d 0x9e3779b9;\n\n\n/**\n * Default 32-bit hash seed (from pi; arbitrary).\n * @private {number}\n */\nxid.hash.SEED_ \x3d 0x12b9b0a1;\n\n\n/**\n * Returns a 32-bit hash of the input string.\n * @param {string} str\n * @return {string}\n */\nxid.hash.toHash \x3d function(str) {\n  var input \x3d xid.hash.strToBytes_(str);\n  var a \x3d xid.hash.CONSTANT_;\n  var b \x3d xid.hash.CONSTANT_;\n  var c \x3d xid.hash.SEED_;\n  var len \x3d input.length;\n  var keylen \x3d len;\n  var off \x3d 0;\n\n  /**\n   * The mixing step of the hash function.\n   */\n  var mix \x3d function() {\n    a -\x3d b; a -\x3d c; a ^\x3d c \x3e\x3e\x3e 13;\n    b -\x3d c; b -\x3d a; b ^\x3d a \x3c\x3c 8;\n    c -\x3d a; c -\x3d b; c ^\x3d b \x3e\x3e\x3e 13;\n    a -\x3d b; a -\x3d c; a ^\x3d c \x3e\x3e\x3e 12;\n    b -\x3d c; b -\x3d a; b ^\x3d a \x3c\x3c 16;\n    c -\x3d a; c -\x3d b; c ^\x3d b \x3e\x3e\x3e 5;\n    a -\x3d b; a -\x3d c; a ^\x3d c \x3e\x3e\x3e 3;\n    b -\x3d c; b -\x3d a; b ^\x3d a \x3c\x3c 10;\n    c -\x3d a; c -\x3d b; c ^\x3d b \x3e\x3e\x3e 15;\n  };\n\n  for (; keylen \x3e\x3d 12; keylen -\x3d 12, off +\x3d 12) {\n    a +\x3d xid.hash.fingerprint_(input, off);\n    b +\x3d xid.hash.fingerprint_(input, off + 4);\n    c +\x3d xid.hash.fingerprint_(input, off + 8);\n    mix();\n  }\n\n  c +\x3d len;\n  switch (keylen) {\n    case 11: c +\x3d input[off + 10] \x3c\x3c 24;  // fallthrough\n    case 10: c +\x3d input[off + 9] \x3c\x3c 16;  // fallthrough\n    case 9: c +\x3d input[off + 8] \x3c\x3c 8;  // fallthrough\n    case 8: b +\x3d input[off + 7] \x3c\x3c 24;  // fallthrough\n    case 7: b +\x3d input[off + 6] \x3c\x3c 16;  // fallthrough\n    case 6: b +\x3d input[off + 5] \x3c\x3c 8;  // fallthrough\n    case 5: b +\x3d input[off + 4];  // fallthrough\n    case 4: a +\x3d input[off + 3] \x3c\x3c 24;  // fallthrough\n    case 3: a +\x3d input[off + 2] \x3c\x3c 16;  // fallthrough\n    case 2: a +\x3d input[off + 1] \x3c\x3c 8;  // fallthrough\n    case 1: a +\x3d input[off + 0]; // fallthrough\n    case 0: break;  // nothing left to add\n    default: break;  // nothing left to add\n  }\n\n  mix();\n\n  return xid.integer.toString(c);\n};\n\n\n/**\n * Best effort method to turn something that was passed through xid to an\n * actual xid hash string. Does nothing for non-debug builds which are\n * expected to be obfuscated.\n * @param {string} xidString A string that was passed through the xid function.\n * @return {string} Always returns the obfuscated version of the passed in\n *     string independent of compile mode.\n */\nxid.hash.toHashIfNecessary \x3d function(xidString) {\n  if (xid.isObfuscating()) {\n    return xidString;\n  }\n  if (!/_$/.test(xidString)) {\n    return xidString;\n  }\n  return xid.hash.toHash(xidString.replace(/_$/, \x27\x27));\n};\n\n\n/**\n * Converts a string into a byte array.\n * @param {string} str Input string.\n * @return {Array.\x3cnumber\x3e} Byte array representation of string.\n * @private\n */\nxid.hash.strToBytes_ \x3d function(str) {\n  var bytes \x3d [];\n  for (var i \x3d 0; i \x3c str.length; i++) {\n    bytes.push(str.charCodeAt(i));\n  }\n  return bytes;\n};\n\n\n/**\n * Returns the integer value whose C++ representation is stored\n * in the first 4 bytes of input at the offset.\n * @param {Array.\x3cnumber\x3e} input\n * @param {number} off Offset to start reading at inside the byte array.\n * @return {number}\n * @private\n */\nxid.hash.fingerprint_ \x3d function(input, off) {\n  return input[off + 0] +\n      (input[off + 1] \x3c\x3c 8) +\n      (input[off + 2] \x3c\x3c 16) +\n      (input[off + 3] \x3c\x3c 24);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/apps/xid/hash.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/modulemanager/multi_moduleset_registry.js";
goog.loadModule("/**\n * @fileoverview Description of this file.\n */\n\ngoog.module(\x27search.modules.MultiModulesetRegistry\x27);\n\nconst xid \x3d goog.require(\x27xid\x27);\nconst xidHash \x3d goog.require(\x27xid.hash\x27);\n\n/**\n * Info for a feature that hosting on an add-on moduleset.\n * @record\n */\nclass AddonModulesetInfo {\n  constructor() {\n    /**\n     * Module id for the feature in add-on moduleset.\n     * @type {string}\n     */\n    this.featureModule;\n\n    /**\n     * Name of the add-on moduleset this feature is in. If it is empty, it means\n     * that this feature module is in base moduleset.\n     * @type {?string}\n     */\n    this.modulesetName;\n\n    /**\n     * An module id in base moduleset. This module will be used to make sure\n     * that we load lib required by this feature in base moduleset.\n     * @type {string}\n     */\n    this.baseModule;\n  }\n}\n\n/**\n * @type {!Array\x3c!AddonModulesetInfo\x3e}\n */\nconst AddonModulesetInfoList \x3d [];\n\n/**\n * @param {!AddonModulesetInfo} info\n */\nfunction registerAddonModuleset(info) {\n  // Make sure that module name has been obfuscated properly. Copied from\n  // wiz.objectIdWithAutoRegistration.\n  if (xid.isObfuscating()) {\n    AddonModulesetInfoList.push(info);\n  } else {\n    AddonModulesetInfoList.push({\n      featureModule: xidHash.toHashIfNecessary(info.featureModule),\n      modulesetName: info.modulesetName,\n      baseModule: xidHash.toHashIfNecessary(info.baseModule),\n    });\n  }\n}\n\nexports \x3d {\n  AddonModulesetInfo,\n  AddonModulesetInfoList,\n  registerAddonModuleset,\n};\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/modulemanager/multi_moduleset_registry.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/transport/anchor_ping_constants.js";
goog.loadModule("/**\n * @fileoverview Exported constants used by gws.anchor.\n */\ngoog.module(\x27search.log.transport.AnchorPingConstants\x27);\n\nexports \x3d {\n  /**\n   * ID of anchor element used by search.log.transport.AnchorPingSender to\n   * simulate click and send ping.\n   * @const\n   */\n  LINK_ID: \x27sender-ping-el\x27,\n};\n\n//# sourceURL\x3dhttps://qs/gws/js/log/transport/anchor_ping_constants.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/animation/internal/debug.js";
goog.loadModule("/**\n * @fileoverview Debug utilities for Quantum animations.\n */\n\ngoog.module(\x27search.animation.internal.debug\x27);\ngoog.module.declareLegacyNamespace();\n\n\n/** @record */\nclass SteppableAnimation {\n  /**\n   * @param {number} elapsed Milliseconds elapsed since the last update.\n   */\n  update(elapsed) {}\n}\n\n\n/**\n * Starts the animation loop.\n */\nfunction requestAnimationFrame() {}\n\n\n/**\n * Add an animation to the global animation list.\n * @param {!SteppableAnimation} animation\n */\nfunction addAnimation(animation) {}\n\n\n/**\n * Remove a finished animation from the list of running animations.\n * @param {!SteppableAnimation} animation\n */\nfunction removeAnimation(animation) {}\n\n\n/**\n * @return {number}\n */\nfunction getSlowdownFactor() {\n  return 1;\n}\n\n\n/**\n * @return {boolean} Wheather deadlines are disabled for motions.\n */\nfunction isNoDeadline() {\n  return false;\n}\n\n\n/**\n * @param {!Element} elem\n * @return {string} A devtools style description of elem.\n */\nfunction describeElement(elem) {\n  var id \x3d elem.id ? \x27#\x27 + elem.id : \x27\x27;\n  var classes \x3d elem.className ? \x27.\x27 + elem.className.replace(/ /g, \x27.\x27) : \x27\x27;\n  return elem.tagName.toLowerCase() + id + classes;\n}\n\n\nexports \x3d {\n  SteppableAnimation,\n  getSlowdownFactor,\n  isNoDeadline,\n  describeElement,\n  removeAnimation,\n  addAnimation,\n  requestAnimationFrame\n};\n\n//# sourceURL\x3dhttps://qs/gws/js/animation/internal/debug.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/url/url_param_key_sets.js";
goog.loadModule("goog.module(\x27search.url.urlParamKeySets\x27);\n\n/** @const {!Set\x3cstring\x3e} */\nconst additionalUgly \x3d new Set([\n  \x27prmd\x27,\n  \x27tbas\x27,\n  \x27btnG\x27,\n]);\n\n/** @const {!Set\x3cstring\x3e} */\nconst asyncSticky \x3d new Set([\n  \x27aomd\x27,\n  \x27authuser\x27,\n  \x27dcr\x27,\n  \x27data_push_epoch\x27,\n  \x27deb\x27,\n  \x27debtime\x27,\n  \x27e\x27,\n  \x27esrch\x27,\n  \x27expflags\x27,\n  \x27expid\x27,\n  \x27explain\x27,\n  \x27exprollouts\x27,\n  \x27fesp\x27,\n  \x27gl\x27,\n  \x27hl\x27,\n  \x27host\x27,\n  \x27hotel_dates\x27,\n  \x27hotel_ds\x27,\n  \x27hotswaps\x27,\n  \x27lsf\x27,\n  \x27lsft\x27,\n  \x27noj\x27,\n  \x27ogdeb\x27,\n  \x27opti\x27,\n  \x27opts\x27,\n  \x27optq\x27,\n  \x27optt\x27,\n  \x27mergelabel\x27,\n  \x27mlp\x27,\n  \x27plugin\x27,\n  \x27rciv\x27,\n  \x27rlst\x27,\n  \x27safe\x27,\n  \x27skew_host\x27,\n  \x27source_ip\x27,\n  \x27ssl_dbg\x27,\n  \x27st\x27,\n  \x27tbcp\x27,\n  \x27tbs\x27,\n  \x27tcfs\x27,\n  \x27tsdo\x27,\n  \x27uideb\x27,\n  \x27useragent\x27,\n  \x27uuld\x27,\n  \x27uule\x27,\n  \x27v\x27,\n]);\n\n/** @const {!Set\x3cstring\x3e} */\nconst cgiStableDebug \x3d new Set([\n  \x27data_push_epoch\x27,\n  \x27deb\x27,\n  \x27e\x27,\n  \x27espv\x27,\n  \x27esrch\x27,\n  \x27expflags\x27,\n  \x27expid\x27,\n  \x27expid_c\x27,\n  \x27exprollouts\x27,\n  \x27fesp\x27,\n  \x27host\x27,\n  \x27hotswaps\x27,\n  \x27ion\x27,\n  \x27ix\x27,\n  \x27nossl\x27,\n  \x27ogdeb\x27,\n  \x27uuld\x27,\n  \x27duul\x27,\n  \x27nuul\x27,\n]);\n\n/** @const {!Set\x3cstring\x3e} */\nconst cgiStableProd \x3d new Set([\n  \x27ampcct\x27,\n  \x27client\x27,\n  \x27dcr\x27,\n  \x27hs\x27,\n  \x27v\x27,\n]);\n\n/** @const {!Set\x3cstring\x3e} */\nconst form \x3d new Set([\n  \x27as_q\x27,\n  \x27dq\x27,\n  \x27oq\x27,\n  \x27q\x27,\n]);\n\n/** @const {!Set\x3cstring\x3e} */\nconst ignoreForEquality \x3d new Set([\n]);\n\n/** @const {!Set\x3cstring\x3e} */\nconst pretty \x3d new Set([\n  \x27ad\x27,\n  \x27adsafe\x27,\n  \x27adtest\x27,\n  \x27adtest-useragent\x27,\n  \x27amp\x27,\n  \x27ampcct\x27,\n  \x27ampidx\x27,\n  \x27ampru\x27,\n  \x27amps\x27,\n  \x27aomd\x27,\n  \x27as_author\x27,\n  \x27as_drrb\x27,\n  \x27as_dt\x27,\n  \x27as_epq\x27,\n  \x27as_eq\x27,\n  \x27as_filetype\x27,\n  \x27as_ft\x27,\n  \x27as_maxd\x27,\n  \x27as_maxm\x27,\n  \x27as_mind\x27,\n  \x27as_minm\x27,\n  \x27as_nhi\x27,\n  \x27as_nlo\x27,\n  \x27as_nloc\x27,\n  \x27as_nsrc\x27,\n  \x27as_occt\x27,\n  \x27as_oq\x27,\n  \x27as_q\x27,\n  \x27as_qdr\x27,\n  \x27as_rights\x27,\n  \x27as_scoring\x27,\n  \x27as_sitesearch\x27,\n  \x27as_st\x27,\n  \x27authuser\x27,\n  \x27avx\x27,\n  \x27bret\x27,\n  \x27c2coff\x27,\n  \x27channel\x27,\n  \x27chips\x27,\n  \x27complete\x27,\n  \x27cr\x27,\n  \x27deb\x27,\n  \x27debtime\x27,\n  \x27ctb\x27,\n  \x27data_push_epoch\x27,\n  \x27dcr\x27,\n  \x27docid\x27,\n  \x27domains\x27,\n  \x27duul\x27,\n  \x27e\x27,\n  \x27esrch\x27,\n  \x27expflags\x27,\n  \x27expid\x27,\n  \x27expid_c\x27,\n  \x27explain\x27,\n  \x27expnd\x27,\n  \x27exprollouts\x27,\n  \x27fakeads\x27,\n  \x27filter\x27,\n  \x27fir\x27,\n  \x27fiu\x27,\n  \x27flav\x27,\n  \x27flbr\x27,\n  \x27fll\x27,\n  \x27frcnw\x27,\n  \x27fspn\x27,\n  \x27fz\x27,\n  \x27gfns\x27,\n  \x27gib\x27,\n  \x27gl\x27,\n  \x27gpc\x27,\n  \x27gsas\x27,\n  \x27hl\x27,\n  \x27host\x27,\n  \x27hotel_dates\x27,\n  \x27hotel_ds\x27,\n  \x27hotel_lqtkn\x27,\n  \x27hotel_occupancy\x27,\n  \x27hotswaps\x27,\n  \x27hpcs\x27,\n  \x27hq\x27,\n  \x27ibp\x27,\n  \x27ictx\x27,\n  \x27igu\x27,\n  \x27imgcolor\x27,\n  \x27imgil\x27,\n  \x27imgrefurl\x27,\n  \x27imgsz\x27,\n  \x27imgtype\x27,\n  \x27imgurl\x27,\n  \x27imgwo\x27,\n  \x27inlang\x27,\n  \x27interests\x27,\n  \x27ix\x27,\n  \x27kptab\x27,\n  \x27lite\x27,\n  \x27lnu\x27,\n  \x27lpis\x27,\n  \x27lpsid\x27,\n  \x27lqi\x27,\n  \x27lr\x27,\n  \x27lrfsid\x27,\n  \x27lsf\x27,\n  \x27lsspp\x27,\n  \x27ltype\x27,\n  \x27ludocid\x27,\n  \x27lxcar\x27,\n  \x27mergelabel\x27,\n  \x27meta\x27,\n  \x27mid\x27,\n  \x27mrestrict\x27,\n  \x27near\x27,\n  \x27newwindow\x27,\n  \x27nfpr\x27,\n  \x27nirf\x27,\n  \x27noj\x27,\n  \x27nomo\x27,\n  \x27nord\x27,\n  \x27nota\x27,\n  \x27nps\x27,\n  \x27num\x27,\n  \x27og\x27,\n  \x27ogdeb\x27,\n  \x27ohl\x27,\n  \x27oi\x27,\n  \x27oll\x27,\n  \x27optaqua\x27,\n  \x27optd\x27,\n  \x27opti\x27,\n  \x27optq\x27,\n  \x27opts\x27,\n  \x27optt\x27,\n  \x27ospn\x27,\n  \x27oz\x27,\n  \x27pcr\x27,\n  \x27plugin\x27,\n  \x27prds\x27,\n  \x27prmd\x27,\n  \x27psgn\x27,\n  \x27pstick\x27,\n  \x27pws\x27,\n  \x27pwst\x27,\n  \x27q\x27,\n  \x27qf\x27,\n  \x27qid\x27,\n  \x27qr\x27,\n  \x27quantum\x27,\n  \x27query\x27,\n  \x27pcmp\x27,\n  \x27rciv\x27,\n  \x27rct\x27,\n  \x27restrict\x27,\n  \x27rflfq\x27,\n  \x27rldimm\x27,\n  \x27rlha\x27,\n  \x27rlhsc\x27,\n  \x27rlla\x27,\n  \x27rllag\x27,\n  \x27rllas\x27,\n  \x27rlst\x27,\n  \x27rlt\x27,\n  \x27sab\x27,\n  \x27sabf\x27,\n  \x27safe\x27,\n  \x27safeui\x27,\n  \x27scoring\x27,\n  \x27search\x27,\n  \x27signedin\x27,\n  \x27site_flavored\x27,\n  \x27sitesearch\x27,\n  \x27skew_host\x27,\n  \x27skip\x27,\n  \x27sll\x27,\n  \x27source_ip\x27,\n  \x27sout\x27,\n  \x27sp\x27,\n  \x27srpd\x27,\n  \x27srds\x27,\n  \x27sspn\x27,\n  \x27ssui\x27,\n  \x27start\x27,\n  \x27stick\x27,\n  \x27strmmid\x27,\n  \x27superroot\x27,\n  \x27surl\x27,\n  \x27sz\x27,\n  \x27tbas\x27,\n  \x27tbcp\x27,\n  \x27tbm\x27,\n  \x27tbnid\x27,\n  \x27tbs\x27,\n  \x27tci\x27,\n  \x27tfs\x27,\n  \x27tsdo\x27,\n  \x27tsq\x27,\n  \x27ttsm\x27,\n  \x27uclite\x27,\n  \x27uid\x27,\n  \x27uideb\x27,\n  \x27um\x27,\n  \x27useragent\x27,\n  \x27userid\x27,\n  \x27usg\x27,\n  \x27uuld\x27,\n  \x27uule\x27,\n  \x27vgi\x27,\n]);\n\n/** @const {!Set\x3cstring\x3e} */\nconst prettyDebug \x3d new Set([\n  \x27mldebug\x27,\n]);\n\n/** @const {!Set\x3cstring\x3e} */\nconst ugly \x3d new Set([\n  \x27action\x27,\n  \x27addh\x27,\n  \x27affdom\x27,\n  \x27agsad\x27,\n  \x27agsabk\x27,\n  \x27aqs\x27,\n  \x27ar\x27,\n  \x27bav\x27,\n  \x27bih\x27,\n  \x27biw\x27,\n  \x27br\x27,\n  \x27brd\x27,\n  \x27bs\x27,\n  \x27bvm\x27,\n  \x27cad\x27,\n  \x27cd\x27,\n  \x27client\x27,\n  \x27changed_loc\x27,\n  \x27cp\x27,\n  \x27ct\x27,\n  \x27ctf\x27,\n  \x27ctzn\x27,\n  \x27dbl\x27,\n  \x27ctxs\x27,\n  \x27devicelang\x27,\n  \x27devloc\x27,\n  \x27dpr\x27,\n  \x27dq\x27,\n  \x27ds\x27,\n  \x27ech\x27,\n  \x27ei\x27,\n  \x27entrypoint\x27,\n  \x27ertn\x27,\n  \x27espv\x27,\n  \x27fheit\x27,\n  \x27fp\x27,\n  \x27gbv\x27,\n  \x27gc\x27,\n  \x27gcc\x27,\n  \x27gcs\x27,\n  \x27gko_vi\x27,\n  \x27gll\x27,\n  \x27gm\x27,\n  \x27gr\x27,\n  \x27gs_id\x27,\n  \x27gs_ivs\x27,\n  \x27gs_l\x27,\n  \x27gs_lp\x27,\n  \x27gs_mss\x27,\n  \x27gs_ri\x27,\n  \x27gs_rn\x27,\n  \x27gs_ssp\x27,\n  \x27hs\x27,\n  \x27hw\x27,\n  \x27ie\x27,\n  \x27ig\x27,\n  \x27inm\x27,\n  \x27ion\x27,\n  \x27ircip\x27,\n  \x27isn\x27,\n  \x27kapk\x27,\n  \x27lei\x27,\n  \x27lrad\x27,\n  \x27lsft\x27,\n  \x27luul\x27,\n  \x27mapsl\x27,\n  \x27muul\x27,\n  \x27mvs\x27,\n  \x27ndsp\x27,\n  \x27noa\x27,\n  \x27norc\x27,\n  \x27npsic\x27,\n  \x27ntyp\x27,\n  \x27oe\x27,\n  \x27output\x27,\n  \x27oq\x27,\n  \x27osm\x27,\n  \x27padb\x27,\n  \x27padt\x27,\n  \x27pbx\x27,\n  \x27pdl\x27,\n  \x27pei\x27,\n  \x27pf\x27,\n  \x27pjf\x27,\n  \x27pnp\x27,\n  \x27pq\x27,\n  \x27prmdo\x27,\n  \x27prog\x27,\n  \x27psi\x27,\n  \x27psj\x27,\n  \x27qsd\x27,\n  \x27qsubts\x27,\n  \x27ram_mb\x27,\n  \x27rcid\x27,\n  \x27redir\x27,\n  \x27redir_esc\x27,\n  \x27ref\x27,\n  \x27resnum\x27,\n  \x27revid\x27,\n  \x27rf\x27,\n  \x27rlakp\x27,\n  \x27rls\x27,\n  \x27rlz\x27,\n  \x27sa\x27,\n  \x27sclient\x27,\n  \x27scsr\x27,\n  \x27sert\x27,\n  \x27sesinv\x27,\n  \x27site\x27,\n  \x27sla\x27,\n  \x27sns\x27,\n  \x27source\x27,\n  \x27sourceid\x27,\n  \x27spell\x27,\n  \x27spknlang\x27,\n  \x27sqi\x27,\n  \x27sugexp\x27,\n  \x27suggest\x27,\n  \x27sugvcr\x27,\n  \x27tab\x27,\n  \x27tbo\x27,\n  \x27tch\x27,\n  \x27tel\x27,\n  \x27tok\x27,\n  \x27v\x27,\n  \x27ved\x27,\n  \x27wf\x27,\n  \x27wphc-agsa\x27,\n  \x27wrapid\x27,\n  \x27xhr\x27,\n  \x27zx\x27,\n]);\n\n/** @const {!Set\x3cstring\x3e} */\nconst update \x3d new Set([\n  \x27a\x27,\n  \x27agsa\x27,\n  \x27activetab\x27,\n  \x27aie\x27,\n  \x27ampct\x27,\n  \x27ampedu\x27,\n  \x27ampf\x27,\n  \x27amph\x27,\n  \x27amph-dlg\x27,\n  \x27ampshare\x27,\n  \x27aq\x27,\n  \x27asst\x27,\n  \x27astick\x27,\n  \x27async\x27,\n  \x27ahotel_dates\x27,\n  \x27b\x27,\n  \x27ba_cen\x27,\n  \x27ba_loc\x27,\n  \x27btnK\x27,\n  \x27btnI\x27,\n  \x27clb\x27,\n  \x27cns\x27,\n  \x27ctmdlg\x27,\n  \x27d\x27,\n  \x27ddle\x27,\n  \x27ddlx\x27,\n  \x27delay\x27,\n  \x27demost\x27,\n  \x27dest_mid\x27,\n  \x27dest_src\x27,\n  \x27dest_bgc\x27,\n  \x27dfparams\x27,\n  \x27di\x27,\n  \x27dlnr\x27,\n  \x27dnlb\x27,\n  \x27dobs\x27,\n  \x27dobc\x27,\n  \x27dt\x27,\n  \x27duf3\x27,\n  \x27el\x27,\n  \x27eob\x27,\n  \x27epc\x27,\n  \x27epd\x27,\n  \x27epi\x27,\n  \x27exp\x27,\n  \x27f\x27,\n  \x27facrc\x27,\n  \x27fesp\x27,\n  \x27fdss\x27,\n  \x27fid\x27,\n  \x27fie\x27,\n  \x27flst\x27,\n  \x27flt\x27,\n  \x27fpstate\x27,\n  \x27fsapp\x27,\n  \x27fsc\x27,\n  \x27fved\x27,\n  \x27gfe_rd\x27,\n  \x27gws_rd\x27,\n  \x27hide\x27,\n  \x27h\x27,\n  \x27hco\x27,\n  \x27hlgstate\x27,\n  \x27hlsdstate\x27,\n  \x27hmtt\x27,\n  \x27htichips\x27,\n  \x27htidocid\x27,\n  \x27htilrad\x27,\n  \x27htiltype\x27,\n  \x27htin\x27,\n  \x27htiorcl\x27,\n  \x27htiq\x27,\n  \x27htischips\x27,\n  \x27htisorc\x27,\n  \x27htitab\x27,\n  \x27htivrt\x27,\n  \x27idx\x27,\n  \x27igsahc\x27,\n  \x27igsashs\x27,\n  \x27igsas\x27,\n  \x27igsat\x27,\n  \x27igsaurl\x27,\n  \x27ip\x27,\n  \x27imagekey\x27,\n  \x27imgdii\x27,\n  \x27imgrc\x27,\n  \x27intent\x27,\n  \x27isa\x27,\n  \x27istate\x27,\n  \x27iqh\x27,\n  \x27jpe\x27,\n  \x27jpp\x27,\n  \x27kpevlbx\x27,\n  \x27kpvalbx\x27,\n  \x27laa\x27,\n  \x27lat\x27,\n  \x27lbdf\x27,\n  \x27lbl\x27,\n  \x27lcm\x27,\n  \x27lkt\x27,\n  \x27lh-im\x27,\n  \x27lng\x27,\n  \x27loh\x27,\n  \x27lok\x27,\n  \x27loec\x27,\n  \x27loart\x27,\n  \x27lpqa\x27,\n  \x27lpstate\x27,\n  \x27lrd\x27,\n  \x27lrf-gec-article-id\x27,\n  \x27ltdfid\x27,\n  \x27ltdg\x27,\n  \x27ltdl\x27,\n  \x27luac\x27,\n  \x27mdp\x27,\n  \x27mhb\x27,\n  \x27mhpiv\x27,\n  \x27mie\x27,\n  \x27mldd\x27,\n  \x27mlp\x27,\n  \x27mlpv\x27,\n  \x27msldlg\x27,\n  \x27mhwb\x27,\n  \x27mpp\x27,\n  \x27nmlbx\x27,\n  \x27np\x27,\n  \x27od\x27,\n  \x27ofu\x27,\n  \x27om\x27,\n  \x27osrpsb\x27,\n  \x27oved\x27,\n  \x27p\x27,\n  \x27pk\x27,\n  \x27pdlg\x27,\n  \x27pie\x27,\n  \x27pjd\x27,\n  \x27pkfs\x27,\n  \x27pli\x27,\n  \x27plansrcu\x27,\n  \x27plansrcq\x27,\n  \x27pmd\x27,\n  \x27pscid\x27,\n  \x27pupdlg\x27,\n  \x27puprlbx\x27,\n  \x27qbp\x27,\n  \x27qm\x27,\n  \x27qop\x27,\n  \x27ri\x27,\n  \x27rid\x27,\n  \x27rii\x27,\n  \x27rldoc\x27,\n  \x27rlfi\x27,\n  \x27rlfl\x27,\n  \x27rlhd\x27,\n  \x27rlhs\x27,\n  \x27rlimm\x27,\n  \x27rlmf\x27,\n  \x27rlvp\x27,\n  \x27rlmlel\x27,\n  \x27rltbs\x27,\n  \x27rpd\x27,\n  \x27rrid\x27,\n  \x27sabs\x27,\n  \x27search_plus_one\x27,\n  \x27sflt\x27,\n  \x27sfltf\x27,\n  \x27sglb\x27,\n  \x27sgro\x27,\n  \x27sh\x27,\n  \x27shd\x27,\n  \x27shtvs\x27,\n  \x27shwcslb\x27,\n  \x27si\x27,\n  \x27siv\x27,\n  \x27sie\x27,\n  \x27scso\x27,\n  \x27scrl\x27,\n  \x27smids\x27,\n  \x27smr\x27,\n  \x27sng\x27,\n  \x27spd\x27,\n  \x27spf\x27,\n  \x27spsd\x27,\n  \x27spud\x27,\n  \x27srblb\x27,\n  \x27ssbf\x27,\n  \x27ssl_dbg\x27,\n  \x27st\x27,\n  \x27sti\x27,\n  \x27tbnh\x27,\n  \x27tbnid\x27,\n  \x27tbnw\x27,\n  \x27tbstate\x27,\n  \x27tduds\x27,\n  \x27tdurt\x27,\n  \x27tdusp\x27,\n  \x27t\x27,\n  \x27tcfs\x27,\n  \x27tctx\x27,\n  \x27tpd\x27,\n  \x27trex\x27,\n  \x27trifp\x27,\n  \x27trip_id\x27,\n  \x27tsp\x27,\n  \x27trref\x27,\n  \x27tts\x27,\n  \x27tw\x27,\n  \x27twd\x27,\n  \x27twmlbx\x27,\n  \x27vet\x27,\n  \x27ugc\x27,\n  \x27viewerState\x27,\n  \x27vto\x27,\n  \x27vtst\x27,\n  \x27w\x27,\n  \x27wgvs\x27,\n  \x27wptab\x27,\n  \x27xxri\x27,\n]);\n\nexports \x3d {\n  additionalUgly,\n  asyncSticky,\n  cgiStableDebug,\n  cgiStableProd,\n  form,\n  ignoreForEquality,\n  pretty,\n  prettyDebug,\n  ugly,\n  update,\n};\n\n//# sourceURL\x3dhttps://qs/gws/js/url/url_param_key_sets.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/url/url_param_keys.js";
goog.loadModule("goog.module(\x27search.url.urlParamKeys\x27);\n\nconst urlParamKeySets \x3d goog.require(\x27search.url.urlParamKeySets\x27);\n\n/**\n * URL parameter names having kind `PRETTY`, i.e., names of parameters\n * that should be sent in outgoing JESR requests, shown to the user in JESR\n * bookmarks, and included in JESR cache keys.\n *\n * @const {!Set\x3cstring\x3e}\n */\nconst prettyParamKeySet \x3d urlParamKeySets.pretty;\n\nif (goog.DEBUG) {\n  for (let key of urlParamKeySets.prettyDebug) {\n    prettyParamKeySet.add(key);\n  }\n}\n\n/**\n * URL parameter names having kind `UGLY`, i.e., names of parameters\n * that should be sent in outgoing JESR requests, but not shown to the user in\n * bookmarks, and not included in cache keys. Most new parameters should be\n * pretty instead; keep derived state in JS memory or the DOM whenever possible.\n * Note, we don\x27t currently strip ugly params on the base page URL, so they\n * do leak into bookmarks via that query string.\n * \x3cp\x3eSome of these parameters are set by AGSA after JESR issues requests, and\n * hence are ugly to keep JESR from interacting with them.\n *\n * @const {!Set\x3cstring\x3e}\n */\nconst uglyParamKeySet \x3d urlParamKeySets.ugly;\n\n/**\n * URL parameter which are likely ignorable for some purposes.\n * @const {!Set\x3cstring\x3e}\n */\nconst additionalUglyParamKeySet \x3d urlParamKeySets.additionalUgly;\n\n/**\n * URL parameter names having kind `UPDATE`, i.e., names of parameters\n * that are used to encode state for features which decorate an existing primary\n * state. These parameters should not be sent in outgoing JESR requests and are\n * not included in cache keys. They are shown to the user in bookmarks.\n *\n * Update parameters should only be in the hash and should NOT be sent to the\n * server during a page load. It is okay to have two parameters that hold the\n * same information, but one is put in the hash and one is put in the search.\n *\n * DO NOT reuse parameter names even though it may be convenient.\n *\n * @const {!Set\x3cstring\x3e}\n */\nconst updateParamKeySet \x3d urlParamKeySets.update;\n\n/**\n * URL params that should be copied from the URL to the GWS async request.\n *\n * @const {!Set\x3cstring\x3e}\n */\nconst asyncStickyParamKeySet \x3d urlParamKeySets.asyncSticky;\n\n/**\n * A set of param key names that should be ignored when checking equality.\n * This allows implementation to hide parameters.\n *\n * @const {!Set\x3cstring\x3e}\n */\nconst ignoreForEqualityParamKeySet \x3d urlParamKeySets.ignoreForEquality;\n\n/**\n * Names of URL parameters that are form-encoded. These parameters will use \x27+\x27\n * to represent a space (instead of the more typical \x27%20\x27) when encoded.\n *\n * @const {!Set\x3cstring\x3e}\n */\nconst formParamKeySet \x3d urlParamKeySets.form;\n\n/**\n * Collection of debug CGI parameters that must be passed to a state, if present\n * in the base page.\n *\n * @const {!Set\x3cstring\x3e}\n */\nconst cgiStableDebugParamKeySet \x3d urlParamKeySets.cgiStableDebug;\n\n/**\n * Collection of production-affecting CGI parameters that must be passed to a\n * state, if present in the base page and not requested to be dropped. These are\n * params intended for external use which may appear on google urls in the wild.\n *\n * @const {!Set\x3cstring\x3e}\n */\nconst cgiStableProdParamKeySet \x3d urlParamKeySets.cgiStableProd;\n\n/**\n * Collection of CGI parameters that must be passed to a state, if present\n * in the base page.\n * @const {!Set\x3cstring\x3e}\n */\nconst cgiStableParamKeySet \x3d\n    new Set([...cgiStableDebugParamKeySet, ...cgiStableProdParamKeySet]);\n\n/**\n * @param {string} key\n * @return {boolean}\n */\nfunction isPrimaryParamKey(key) {\n  return prettyParamKeySet.has(key) || uglyParamKeySet.has(key);\n}\n\n/**\n * @param {string} key\n * @return {boolean}\n */\nfunction isPathParamKey(key) {\n  return key \x3d\x3d \x27/\x27;\n}\n\n/**\n * @param {string} key\n * @return {boolean}\n */\nfunction isKnownKey(key) {\n  return isPrimaryParamKey(key) || updateParamKeySet.has(key);\n}\n\n/**\n * @enum {string}\n */\nconst ParamKeyType \x3d {\n  HASH: \x27h\x27,\n  SEARCH: \x27s\x27,\n};\n\nexports \x3d {\n  ParamKeyType,\n  additionalUglyParamKeySet,\n  asyncStickyParamKeySet,\n  cgiStableDebugParamKeySet,\n  cgiStableProdParamKeySet,\n  cgiStableParamKeySet,\n  formParamKeySet,\n  ignoreForEqualityParamKeySet,\n  isKnownKey,\n  isPathParamKey,\n  isPrimaryParamKey,\n  prettyParamKeySet,\n  uglyParamKeySet,\n  updateParamKeySet,\n};\n\n//# sourceURL\x3dhttps://qs/gws/js/url/url_param_keys.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/url/gws_form_value_decoder.js";
goog.loadModule("/**\n * @fileoverview This file contains parsers that are meant to be used on any GWS\n * page. It wraps search specific configuration such as known variables and\n * encodings.\n */\ngoog.module(\x27search.url.gwsFormValueDecoder\x27);\n\nconst urlParamKeys \x3d goog.require(\x27search.url.urlParamKeys\x27);\nconst {formDataValue: formDataValueParser} \x3d goog.require(\x27urls.urlComponentParsers\x27);\n\nconst gwsFormValueDecoder \x3d {\n  /**\n   * @param {string} value\n   * @param {string} key\n   * @return {string}\n   */\n  serialize(value, key) {\n    return urlParamKeys.formParamKeySet.has(key) ?\n        formDataValueParser.serialize(value) :\n        value;\n  },\n\n  /**\n   * @param {string} value\n   * @param {string} key\n   * @return {string}\n   */\n  deserialize(value, key) {\n    return urlParamKeys.formParamKeySet.has(key) ?\n        formDataValueParser.deserialize(value) :\n        value;\n  },\n};\n\nexports \x3d gwsFormValueDecoder;\n\n//# sourceURL\x3dhttps://qs/gws/js/url/gws_form_value_decoder.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/url/gws_value_decoder.js";
goog.loadModule("/**\n * @fileoverview This file contains parsers that are meant to be used on the\n * search results page or any other page served through search frontend\n * infrastructure. It wraps search specific configuration such as known\n * variables and encodings.\n */\ngoog.module(\x27search.url.gwsValueDecoder\x27);\n\nconst gwsFormValueDecoder \x3d goog.require(\x27search.url.gwsFormValueDecoder\x27);\nconst {dataValue: dataValueParser} \x3d goog.require(\x27urls.urlComponentParsers\x27);\n\n/**\n * Adds form and dataValue serialization in addition to parameter list parsing.\n */\nconst gwsValueDecoder \x3d {\n  /**\n   * @param {string} value\n   * @param {string} key\n   * @return {string}\n   */\n  serialize(value, key) {\n    return gwsFormValueDecoder.serialize(dataValueParser.serialize(value), key);\n  },\n\n  /**\n   * @param {string} value\n   * @param {string} key\n   * @return {string}\n   */\n  deserialize(value, key) {\n    return dataValueParser.deserialize(\n        gwsFormValueDecoder.deserialize(value, key));\n  },\n};\n\nexports \x3d gwsValueDecoder;\n\n//# sourceURL\x3dhttps://qs/gws/js/url/gws_value_decoder.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/urls/url_with_hash_params.js";
goog.loadModule("/**\n * @fileoverview Defines UrlWithHashParams, an extension of Url that encodes\n * query-like parameters in the URL\x27s \x22hash\x22 (fragment identifier) string.\n */\n\ngoog.module(\x27urls.UrlWithHashParams\x27);\n\nconst CompatibilityUrlParams \x3d goog.require(\x27urls.CompatibilityUrlParams\x27);\nconst Url \x3d goog.require(\x27urls.Url\x27);\nconst UrlParams \x3d goog.require(\x27urls.UrlParams\x27);\nconst {dataValue: dataValueParser} \x3d goog.require(\x27urls.urlComponentParsers\x27);\n\nclass UrlWithHashParams extends Url {\n  /**\n   * @param {string} url The string form of the URL.\n   * @param {{\n   *     paramValueDecoder: !UrlParams.ValueDecoder,\n   * }\x3d} options  Options to configure the URL:\n   *     paramValueDecoder: A decoder for both the query parameters and the hash\n   *         parameters.\n   */\n  constructor(url, {paramValueDecoder \x3d dataValueParser} \x3d {}) {\n    super(url, {searchValueDecoder: paramValueDecoder});\n\n    /**\n     * @type {!UrlParams}\n     */\n    this.hashParams \x3d new UrlParams(this.hash.substring(1), paramValueDecoder);\n\n    // Define a \x27hash\x27 property that overrides the superclass hash and reflects\n    // the hashParams property.\n    if (goog.isFunction(Object.defineProperties)) {\n      Object.defineProperties(this, {\n        hash: {\n          get: () \x3d\x3e this.getHash_(),\n          set: (hash) \x3d\x3e this.setHash_(hash),\n        },\n      });\n    } else {\n      this.hashParams \x3d new CompatibilityUrlParams(\n          this.hash.substring(1), paramValueDecoder,\n          () \x3d\x3e {\n            this.setHash_(this.hash);\n          },\n          () \x3d\x3e {\n            this.hash \x3d this.getHash_();\n          });\n    }\n  }\n\n  /**\n   * @return {string}\n   * @private\n   */\n  getHash_() {\n    const fragment \x3d this.hashParams.toString();\n    return (fragment ? \x27#\x27 : \x27\x27) + fragment;\n  }\n\n  /**\n   * @param {string} hash\n   * @private\n   */\n  setHash_(hash) {\n    if (hash.length \x26\x26 hash.charAt(0) \x3d\x3d \x27#\x27) {\n      hash \x3d hash.substr(1);\n    }\n    this.hashParams.setValue(hash);\n  }\n}\n\nexports \x3d UrlWithHashParams;\n\n//# sourceURL\x3dhttps://qs/javascript/urls/url_with_hash_params.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/url/gws_url.js";
goog.loadModule("goog.module(\x27search.url.GwsUrl\x27);\n\nconst UrlParams \x3d goog.require(\x27urls.UrlParams\x27);\nconst UrlWithHashParams \x3d goog.require(\x27urls.UrlWithHashParams\x27);\nconst gwsValueDecoder \x3d goog.require(\x27search.url.gwsValueDecoder\x27);\n\n/**\n * This extends the functionality of `UrlWithHashParams` for GWS URLs.  Params\n * that are marked as form parameters (searchbox fields, for instance) encode\n * spaces with \x27+\x27 instead of \x27%20\x27.  See the url param key sets for the full\n * list of form parameters, or to add a new form parameter.\n * @extends {UrlWithHashParams}\n */\nclass GwsUrl extends UrlWithHashParams {\n  /**\n   * @param {string} url\n   * @param {{\n   *     paramValueDecoder: !UrlParams.ValueDecoder,\n   * }\x3d} options Options to configure the GwsUrl. Options are:\n   *     paramValueDecoder: A decoder to override the default gws decoder.\n   */\n  constructor(url, {paramValueDecoder \x3d gwsValueDecoder} \x3d {}) {\n    super(url, {paramValueDecoder});\n  }\n}\n\nexports \x3d GwsUrl;\n\n//# sourceURL\x3dhttps://qs/gws/js/url/gws_url.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/urls/map_like.js";
goog.loadModule("goog.module(\x27urls.MapLike\x27);\n\n/**\n * Interface for objects that look like string-keyed and -valued Maps.\n * @record\n * @extends {Iterable\x3c!Array\x3cstring\x3e\x3e}\n */\nclass MapLike {\n  /**\n   * @param {string} key\n   * @return {string|undefined} value\n   */\n  get(key) {}\n\n  /**\n   * @param {string} key\n   * @return {boolean}\n   */\n  has(key) {}\n\n  /**\n   * @param {string} key\n   * @param {string} value\n   * @return {?}\n   */\n  set(key, value) {}\n\n  /**\n   * @param {string} key\n   * @return {?}\n   */\n  delete(key) {}\n\n  /**\n   * @return {!Iterator\x3c!Array\x3cstring\x3e\x3e}\n   */\n  [Symbol.iterator]() {}\n\n  /**\n   * NOTE(twilkinson): There\x27s something weird going on here with the compiler\n   * where it complains about mismatched toString functions where the \x22this\x22 is\n   * \x22*\x22 for MapLike but a concrete type for the passed in parameter. I suspect\n   * it has to do with any method on Object that is overridden by a concrete\n   * type, because without this we can\x27t pass in UrlParams to\n   * propagateStableInitialParams.\n   * @return {string}\n   */\n  toString() {}\n}\n\nexports \x3d MapLike;\n\n//# sourceURL\x3dhttps://qs/javascript/urls/map_like.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/urls/part_parser.js";
goog.loadModule("goog.module(\x27urls.PartParser\x27);\n\n/**\n * @record\n * @template T\n */\nclass PartParser {\n  /**\n   * @param {T} deserialized\n   * @return {string}\n   */\n  serialize(deserialized) {}\n\n  /**\n   * @param {string} serialized\n   * @return {T}\n   */\n  deserialize(serialized) {}\n}\n\nexports \x3d PartParser;\n\n//# sourceURL\x3dhttps://qs/javascript/urls/part_parser.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/urls/map_parser.js";
goog.loadModule("goog.module(\x27urls.MapParser\x27);\n\nconst ListParser \x3d goog.require(\x27urls.ListParser\x27);\nconst MapLike \x3d goog.require(\x27urls.MapLike\x27);\nconst ParameterParser \x3d goog.require(\x27urls.ParameterParser\x27);\nconst PartParser \x3d goog.require(\x27urls.PartParser\x27);\n\n/**\n * A PartParser that deserializes a string of parameters of the form\n * \x27foo\x3d1\x26bar\x3d2\x26baz\x3d3\x27 into a Map (or map-like object) with {foo: \x271\x27, bar: \x272\x27,\n * baz: \x273\x27}. No additional decoding of the values or keys is done.\n *\n * If you are parsing GWS URLs, you should use search.urls.parameterListParser,\n * which properly handles the encoding of special \x22form params\x22 like q.\n */\nclass MapParser {\n  /**\n   * @param {!PartParser\x3c{key: string, value: string}\x3e\x3d} parameterParser\n   * @param {!PartParser\x3c!Array\x3cstring\x3e\x3e\x3d} listParser\n   * @param {function(): !MapLike\x3d} mapProvider\n   */\n  constructor(\n      parameterParser \x3d new ParameterParser(), listParser \x3d new ListParser(),\n      mapProvider \x3d () \x3d\x3e new Map()) {\n    /** @const @private {!PartParser\x3c{key: string, value: string}\x3e} */\n    this.parameterParser_ \x3d parameterParser;\n\n    /** @const @private {!PartParser\x3c!Array\x3cstring\x3e\x3e} */\n    this.listParser_ \x3d listParser;\n\n    /** @const @private {function(): !MapLike} */\n    this.mapProvider_ \x3d mapProvider;\n  }\n\n  /**\n   * Serializes a Map of parameters to a string.\n   * @param {!MapLike} deserialized\n   * @return {string}\n   */\n  serialize(deserialized) {\n    const parameters \x3d [];\n    for (const [key, value] of deserialized) {\n      parameters.push(this.parameterParser_.serialize({key, value}));\n    }\n    return this.listParser_.serialize(parameters);\n  }\n\n  /**\n   * Deserializes a string to a map of parameters. If the same key is used more\n   * than once, then only the first key\x27s value is used.\n   * @param {string} serialized\n   * @return {!MapLike}\n   */\n  deserialize(serialized) {\n    const parameters \x3d this.mapProvider_();\n    for (const parameter of this.listParser_.deserialize(serialized)) {\n      const {key, value} \x3d this.parameterParser_.deserialize(parameter);\n      // Duplicate key \x27q\x3dfoo\x26q\x3dbar\x27 will only use the first value.\n      if (parameters.has(key)) continue;\n      parameters.set(key, value);\n    }\n    return parameters;\n  }\n}\n\nexports \x3d MapParser;\n\n//# sourceURL\x3dhttps://qs/javascript/urls/map_parser.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/urls/nested_parameter_list_parser.js";
goog.loadModule("/**\n * @fileoverview NestedParameterListParser provides a way to parse and encode\n * \x22nested\x22 GWS parameters like tbs.\n * Example:\n * const nestedParameterListParser \x3d new NestedParameterListParser();\n * const nestedParams \x3d\n *     nestedParameterListParser.deserialize(\x27a:foo,b:bar,c:123\x27);\n * console.log(nestedParam.get(\x27a\x27)); // logs \x27foo\x27\n * nestedParams.set(\x27d\x27, \x27456\x27);\n * const serialized \x3d nestedParameterListParser.serialize(nestedParams);\n * console.log(serialize); // logs \x27a:foo,b:bar,c:123,d:456\x27\n */\ngoog.module(\x27urls.NestedParameterListParser\x27);\n\nconst ListParser \x3d goog.require(\x27urls.ListParser\x27);\nconst MapLike \x3d goog.require(\x27urls.MapLike\x27);\nconst MapParser \x3d goog.require(\x27urls.MapParser\x27);\nconst ParameterParser \x3d goog.require(\x27urls.ParameterParser\x27);\n\n/**\n * Does additional logic to convert a nested data value. The method used is to\n * replace and \x27,\x27 which is used as the delimeter in a nested value with \x27`,\x27.\n * This wraps another parser operation that would do further percent encoding.\n */\nconst nestedDataValueParser \x3d {\n  /** @type {function(string): string} */\n  serialize: (deserialized) \x3d\x3e\n      deserialized.replace(/`/g, \x27``\x27).replace(/,/g, \x27`,\x27),\n  /** @type {function(string): string} */\n  deserialize: (serialized) \x3d\x3e\n      serialized.replace(/`,/g, \x27,\x27).replace(/``/g, \x27`\x27),\n};\n\n/**\n * @type {!ListParser}\n */\nconst baseListParser \x3d new ListParser(\x27,\x27);\n\n/**\n * A parser that uses the default ListParser serialize but needs a special\n * regex search to split the list into an array.\n */\nconst nestedListParser \x3d {\n  /** @type {function(!Array\x3cstring\x3e): string} */\n  serialize: baseListParser.serialize,\n  /** @type {function(string): !Array\x3cstring\x3e} */\n  deserialize: (serialized) \x3d\x3e {\n    const re \x3d /(?:^|[^`])(?:(?:``)*),/g;\n    let index \x3d 0;\n    let match;\n    const splitString \x3d [];\n    while (!goog.isNull(match \x3d re.exec(serialized))) {\n      if (match !\x3d null) {\n        const newIndex \x3d match.index + match[0].length;\n        splitString.push(serialized.substring(index, newIndex - 1));\n        index \x3d newIndex;\n      }\n    }\n    splitString.push(serialized.substr(index));\n    return splitString;\n  },\n};\n\n/**\n * A NestedParameterListParser takes a string of parameters and splits them into\n * a Map (or other Map-like object). The assumption is that the entire string\n * has been decoded prior to being passed into this parser.  Ex. \x27a:1,b:2\x27 -\x3e\n * {a: 1, b: 2}\n */\nclass NestedParameterListParser {\n  /**\n   * @param {function(): !MapLike\x3d} mapProvider\n   */\n  constructor(mapProvider \x3d () \x3d\x3e new Map()) {\n    /**\n     * The base parser does the splitting and joining.\n     * @const @private @type {!MapParser}\n     */\n    this.baseMapParser_ \x3d\n        new MapParser(new ParameterParser(\x27:\x27), nestedListParser, mapProvider);\n  }\n\n  /**\n   * @param {!MapLike} deserialized\n   * @return {string}\n   */\n  serialize(deserialized) {\n    const serialized \x3d new Map();\n    for (const [key, value] of deserialized) {\n      serialized.set(key, nestedDataValueParser.serialize(value));\n    }\n    return this.baseMapParser_.serialize(serialized);\n  }\n\n  /**\n   * @param {string} serialized\n   * @return {!MapLike}\n   */\n  deserialize(serialized) {\n    const deserialized \x3d this.baseMapParser_.deserialize(serialized);\n    for (const [key, value] of deserialized) {\n      deserialized.set(key, nestedDataValueParser.deserialize(value));\n    }\n    return deserialized;\n  }\n}\n\nexports \x3d NestedParameterListParser;\n\n//# sourceURL\x3dhttps://qs/javascript/urls/nested_parameter_list_parser.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/task/task.js";
goog.loadModule("goog.module(\x27search.task.Task\x27);\n\nconst Promise \x3d goog.require(\x27goog.Promise\x27);\n\n/**\n * @record\n */\nclass Task {\n  /**\n   * Start an asynchronous task that resolves the returned promise when\n   * complete.\n   * TODO(cgagliardi) Change this to Thenable so native Promise can be used to.\n   *     See http://g/javascript-style/3LhFK-aa058\n   * @return {!Promise}\n   */\n  play() {}\n\n  /**\n   * Synchronously complete the task. play() may or may not have already been\n   * called. finish() is called either because play() is taking longer than\n   * getDeadline() or because scheduler.flush() was called.\n   *\n   * This should not be called if play()\x27s promise is resolved, but it is\n   * possible if scheduler.flush() is called synchronously after a the promise\n   * is resolved.\n   */\n  finish() {}\n\n  /**\n   * Specifies the deadline for a watchdog timer that will cause finish() to\n   * get called before play() resolves.\n   * Should be conservative and longer than the expected duration of the\n   * task, because it also includes JS execution time.\n   *\n   * @return {number} Milliseconds after which play() must have finished.\n   */\n  getDeadline() {}\n}\n\nexports \x3d Task;\n\n//# sourceURL\x3dhttps://qs/gws/js/task/task.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/animation/playable.js";
goog.loadModule("/**\n * @fileoverview Defines abstract functionality for animations.\n */\n\ngoog.module(\x27search.animation.Playable\x27);\ngoog.module.declareLegacyNamespace();\n\nconst Task \x3d goog.require(\x27search.task.Task\x27);\n\n\n/**\n * Interface to trigger an animation or group of animations.\n * @implements {Task}\n */\nconst Playable \x3d goog.defineClass(null, {\n  constructor() {},\n\n  /**\n   * Don\x27t call it directly, use search.task.scheduler to play animations\n   * instead, e.g. search.task.scheduler.playNow(animation).\n   * @override\n   */\n  play: goog.abstractMethod,\n\n\n  /** @override */\n  finish: goog.abstractMethod,\n\n\n  /** @override */\n  getDeadline: goog.abstractMethod,\n\n\n  /**\n   * @param {number} factor\n   */\n  slowdownByFactorOf: function(factor) {\n    this.getChildren().forEach(child \x3d\x3e {\n      child.slowdownByFactorOf(factor);\n    });\n  },\n\n\n  /**\n   * @return {!Array\x3c!Playable\x3e} Child Playables.\n   */\n  getChildren: function() {\n    return [];\n  }\n});\n\nexports \x3d Playable;\n\n//# sourceURL\x3dhttps://qs/gws/js/animation/playable.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/animation/motion.js";
goog.loadModule("/**\n * @fileoverview A generic motion controller that is aware of DOM measure and\n * mutation tasks.  These tasks are properly split in a way that minimizes the\n * number of layout recalcs and layout mutations, in order to reduce animation\n * jank.\n */\ngoog.module(\x27search.animation.Motion\x27);\ngoog.module.declareLegacyNamespace();\n\nconst Beacon \x3d goog.require(\x27gws.debug.telemetry.Beacon\x27);\nconst Playable \x3d goog.require(\x27search.animation.Playable\x27);\nconst Promise \x3d goog.require(\x27goog.Promise\x27);\nconst asserts \x3d goog.require(\x27goog.asserts\x27);\nconst debug \x3d goog.require(\x27search.animation.internal.debug\x27);\nconst log \x3d goog.require(\x27goog.log\x27);\nconst telemetry \x3d goog.require(\x27gws.debug.telemetry\x27);\n\n\n/**\n * Motion wraps an Animation with steps that measure and mutate the DOM to set\n * it up before playing, and then cleans up after it is done. A Motion is\n * Playable, and so Motions can be grouped using SeqGroup and ParGroup like\n * other Playables.\n *\n * Usually Motions affect a group of elements which they take as parameters.\n * Motions are intended to be reused and composed, so they should not presume\n * too much about their initial state. cleanup() should undo temporary hacks\n * that mutate() sets up.\n *\n * Motions have hooks for tracing to allow instrumentation.\n */\nconst Motion \x3d goog.defineClass(Playable, {\n  /**\n   * @extends {Playable}\n   */\n  constructor: function() {\n    Motion.base(this, \x27constructor\x27);\n\n    /** @const @private {!goog.promise.Resolver} */\n    this.resolver_ \x3d Promise.withResolver();\n\n    /** @private {?Playable} */\n    this.animation_ \x3d null;\n\n    /** @private {number} */\n    this.watchdogTimerId_ \x3d -1;\n\n    /** @private {boolean} */\n    this.cleanupCalled_ \x3d false;\n\n    /** @private {boolean} */\n    this.mutateCalled_ \x3d false;\n\n    /** @private {boolean} */\n    this.playCalled_ \x3d false;\n\n    /** @private {?log.Logger} */\n    this.logger_ \x3d log.getLogger(\x27search.animation.Motion\x27);\n\n    /** @protected {!Beacon} */\n    this.telemetryBeacon \x3d new Beacon(\x27motion\x27);\n  },\n\n\n  /** @override */\n  getChildren: function() {\n    return this.animation_ ? [this.animation_] : [];\n  },\n\n\n  /** @override */\n  play: function() {\n    this.measureAndSetup();\n    this.mutateOnce();\n    this.playOnce();\n    return this.resolver_.promise;\n  },\n\n\n  /** @override */\n  finish: function() {\n    if (!this.cleanupCalled_) {\n      this.measureAndSetup();\n      this.mutateOnce();\n      asserts.assert(this.animation_).finish();\n      this.cleanupOnce();\n      this.resolver_.resolve(null);\n    }\n  },\n\n\n  /**\n   * Measures the DOM and sets up the animation.\n   * @package\n   */\n  measureAndSetup: function() {\n    if (!this.animation_ \x26\x26 !this.cleanupCalled_) {\n      this.measure();\n      this.animation_ \x3d this.buildAnimation();\n      if (goog.DEBUG \x26\x26 debug.getSlowdownFactor() !\x3d 1) {\n        this.slowdownByFactorOf(debug.getSlowdownFactor());\n      }\n    }\n  },\n\n\n  /**\n   * Mutates the DOM if the motion hasn\x27t been cleaned up.\n   * @package\n   */\n  mutateOnce: function() {\n    if (!this.mutateCalled_ \x26\x26 !this.cleanupCalled_) {\n      this.mutateCalled_ \x3d true;\n      asserts.assert(!!this.animation_);\n      this.mutate();\n    }\n  },\n\n\n  /**\n   * Records the telemetry interaction and plays the animation.\n   * @param {boolean\x3d} opt_skipCleanup Set to true to skip calling cleanup when\n   *     the animation is finished.\n   * @return {!Promise}\n   * @package\n   */\n  playOnce: function(opt_skipCleanup) {\n    if (!this.playCalled_ \x26\x26 !this.cleanupCalled_) {\n      this.playCalled_ \x3d true;\n      asserts.assert(!!this.mutateCalled_);\n      telemetry.beginInteraction(this.telemetryBeacon);\n\n      this.setWatchdogTimer_();\n\n      asserts.assert(!!this.animation_);\n      this.animation_.play().then(playResult \x3d\x3e {\n        this.clearWatchdogTimer_();\n        telemetry.endInteraction(this.telemetryBeacon);\n        if (!opt_skipCleanup) {\n          this.cleanupOnce();\n        }\n        this.resolver_.resolve(playResult);\n      });\n    }\n    return this.resolver_.promise;\n  },\n\n\n  /**\n   * Sets a timer to ensure the motion completes by its deadline.\n   * Watchdog timers address two issues:\n   * (1) An animation is taking too long and we desire to short-circuit it.\n   *     This happens when a device is really slow or a procedurally generated\n   *     animation has an unexpected corner case, e.g. a very tall card.\n   * (2) An animation will never complete. Its promise will never be\n   *     resolved. This happens because CSS animations have a broken event\n   *     model where in some surprisingly common situations, end events do not\n   *     fire. For example, display:none elements fire no animation events.\n   * @private\n   */\n  setWatchdogTimer_: function() {\n    if (goog.DEBUG \x26\x26 debug.isNoDeadline()) {\n      // Deadlines can be disabled via \x22quantum\x3dnodeadline:1\x22.\n      return;\n    }\n    let deadline \x3d this.getDeadline();\n    if (goog.DEBUG \x26\x26 debug.getSlowdownFactor() !\x3d 1) {\n      // Makes deadline match animation slowdown when debugging.\n      deadline *\x3d debug.getSlowdownFactor();\n    }\n    this.watchdogTimerId_ \x3d\n        window.setTimeout(goog.bind(this.onWatchdogTimeout_, this), deadline);\n  },\n\n\n  /**\n   * Triggered via a timeout when the deadline for running a Motion has expired.\n   */\n  onWatchdogTimeout_: function() {\n    this.watchdogTimerId_ \x3d -1;\n    asserts.assert(this.animation_);\n    this.animation_.finish();\n    telemetry.markInteractionFailed(this.telemetryBeacon);\n    log.error(this.logger_, \x27watchdog timer fired\x27);\n  },\n\n\n  /**\n   * Clears the watchdog timer if set.\n   * @private\n   */\n  clearWatchdogTimer_: function() {\n    if (this.watchdogTimerId_ !\x3d -1) {\n      window.clearTimeout(this.watchdogTimerId_);\n      this.watchdogTimerId_ \x3d -1;\n    }\n  },\n\n\n  /**\n   * Calls cleanup if not already called. Used to allow finish to cleanup\n   * synchronously.\n   * @package\n   */\n  cleanupOnce: function() {\n    if (!this.cleanupCalled_) {\n      this.cleanupCalled_ \x3d true;\n      this.clearWatchdogTimer_();\n      this.cleanup();\n    }\n  },\n\n\n  /**\n   * Measures DOM elements.\n   */\n  measure: goog.abstractMethod,\n\n\n  /**\n   * Mutates the DOM.\n   */\n  mutate: goog.abstractMethod,\n\n\n  /**\n   * Builds an animation.\n   * @return {!Playable}\n   */\n  buildAnimation: goog.abstractMethod,\n\n\n  /**\n   * Specifies the deadline for a watchdog timer that will abort animation.\n   * Should be conservative and longer than the expected duration of the\n   * animation, because it also includes variable painting time.\n   *\n   * Implementations are asked to specify this separately to guard against\n   * improperly coded animations that run for too long (or forever).\n   *\n   * @override\n   * @return {number} Milliseconds after which play() must have finished.\n   */\n  getDeadline: goog.abstractMethod,\n\n\n  /**\n   * Cleans up DOM after the animation is done.\n   */\n  cleanup: goog.nullFunction\n});\n\nexports \x3d Motion;\n\n//# sourceURL\x3dhttps://qs/gws/js/animation/motion.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/task/scheduler.js";
goog.loadModule("/**\n * @fileoverview When animations are running, it\x27s critical that other\n * JavaScript isn\x27t running in order to maintain 60fps. task.scheduler provides\n * an API for delaying asynchronous code until animations are complete.\n *\n * The scheduler is implemented by different mods:\n * - default, tasks and functions are executed in the same event loop.\n * - cooperativeSchedulerMod, JavaScript execution is deferred while a task\n *   (e.g. Animation) is running.\n *\n * For simplicity, import scheduler functions using destructuring.\n * const { setTimeout, clearTimeout, nextTick, schedule } \x3d\n *     goog.require(\x27search.task.scheduler\x27);\n */\n\ngoog.module(\x27search.task.scheduler\x27);\n\nconst IDisposable \x3d goog.require(\x27goog.disposable.IDisposable\x27);\nconst Promise \x3d goog.require(\x27goog.Promise\x27);\nconst Task \x3d goog.require(\x27search.task.Task\x27);\nconst nextTick \x3d goog.require(\x27goog.async.nextTick\x27);\n\n\n/**\n * @param {!Task} task\n * @return {!Promise}\n */\nfunction schedule(task) {\n  return task.play();\n}\n\n\n/**\n * @param {!Task} task\n * @return {!Promise}\n */\nfunction playNow(task) {\n  return task.play();\n}\n\n\n/**\n * Synchronously complete all tasks.\n */\nfunction flush() {}\n\n\n/**\n * @param {!Function} func\n * @param {!IDisposable\x3d} opt_disposableOwner An optional IDisposable \x22owner\x22,\n *     in most cases an instance whose class extends Disposable. If this owner\n *     is disposed by the time the deferred func is called, the func is not\n *     called. This skip happens without error, so if you want to do something\n *     special like log when the owner is disposed, don\x27t pass this optional\n *     argument and handle the disposed check yourself in func. This argument\n *     does not bind this in the eventual func call.\n * @return {!Promise}\n */\nfunction scheduleNextTick(func, opt_disposableOwner) {\n  const resolver \x3d Promise.withResolver();\n  nextTick(() \x3d\x3e {\n    if (goog.isDef(opt_disposableOwner) \x26\x26 opt_disposableOwner.isDisposed()) {\n      resolver.resolve();\n    } else {\n      resolver.resolve(func());\n    }\n  });\n  return resolver.promise;\n}\n\n\n/**\n * Decorates a function so that it executes at most once per scheduler tick.\n * @param {function(this:(T|undefined), ...)} func A function.\n * @param {T\x3d} opt_selfObj The scope in which to call func.\n * @return {!Function} A debounced wrapper around func.\n * @template T\n */\nfunction debounce(func, opt_selfObj) {\n  let scheduled \x3d false;\n  /** @param {...*} args */\n  const wrapped \x3d (...args) \x3d\x3e {\n    if (scheduled) {\n      return;\n    }\n    scheduled \x3d true;\n    scheduleNextTick(() \x3d\x3e {\n      scheduled \x3d false;\n    });\n    func.apply(opt_selfObj, args);\n  };\n  return wrapped;\n}\n\n\n/**\n * @param {!Function} func\n * @param {!IDisposable\x3d} opt_disposableOwner An optional IDisposable \x22owner\x22,\n *     in most cases an instance whose class extends Disposable. If the owner is\n *     currently disposed, func is not called. The owner does not bind this in\n *     the func call.\n * @return {!Promise}\n */\nfunction now(func, opt_disposableOwner) {\n  if (goog.isDef(opt_disposableOwner) \x26\x26 opt_disposableOwner.isDisposed()) {\n    return Promise.resolve();\n  }\n  return Promise.resolve(func());\n}\n\n\n/**\n * @param {!Function} func\n * @return {!Function}\n */\nfunction scheduleWhenCalled(func) {\n  return func;\n}\n\n\n/**\n * @param {!Function} func\n * @param {number} time\n * @param {...*} args\n * @return {number}\n */\nfunction scheduleSetTimeout(func, time, ...args) {\n  return setTimeout(() \x3d\x3e func(...args), time);\n}\n\n\n/**\n * @param {?number} id The timer id.\n */\nfunction scheduleClearTimeout(id) {\n  if (goog.isDefAndNotNull(id)) {\n    clearTimeout(id);\n  }\n}\n\n\n/**\n * @param {!Function} func\n * @param {number} time\n * @param {...*} args\n * @return {number}\n */\nfunction scheduleSetInterval(func, time, ...args) {\n  return setInterval(() \x3d\x3e func(...args), time);\n}\n\n\n/**\n * @param {?number} id The timer id.\n */\nfunction scheduleClearInterval(id) {\n  if (goog.isDefAndNotNull(id)) {\n    clearInterval(id);\n  }\n}\n\ngoog.exportSymbol(\x27google.sx.setTimeout\x27, scheduleSetTimeout);\n\nexports \x3d {\n  schedule,\n  playNow,\n  flush,\n  nextTick: scheduleNextTick,\n  debounce,\n  now,\n  scheduleWhenCalled,\n  setTimeout: scheduleSetTimeout,\n  clearTimeout: scheduleClearTimeout,\n  setInterval: scheduleSetInterval,\n  clearInterval: scheduleClearInterval\n};\n\n//# sourceURL\x3dhttps://qs/gws/js/task/scheduler.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/net/cookies.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Functions for setting, getting and deleting cookies.\n *\n * @author arv@google.com (Erik Arvidsson)\n */\n\n\ngoog.provide(\x27goog.net.Cookies\x27);\ngoog.provide(\x27goog.net.cookies\x27);\n\ngoog.require(\x27goog.string\x27);\n\n\n\n/**\n * A class for handling browser cookies.\n * @param {?Document} context The context document to get/set cookies on.\n * @constructor\n * @final\n */\ngoog.net.Cookies \x3d function(context) {\n  /**\n  * The context document to get/set cookies on. If no document context is\n  * passed, use a fake one with only the \x22cookie\x22 attribute. This allows\n  * this class to be instantiated safely in web worker environments.\n  * @private {{cookie: string}}\n  */\n  this.document_ \x3d context || {cookie: \x27\x27};\n};\n\n\n/**\n * Static constant for the size of cookies. Per the spec, there\x27s a 4K limit\n * to the size of a cookie. To make sure users can\x27t break this limit, we\n * should truncate long cookies at 3950 bytes, to be extra careful with dumb\n * browsers/proxies that interpret 4K as 4000 rather than 4096.\n * @type {number}\n */\ngoog.net.Cookies.MAX_COOKIE_LENGTH \x3d 3950;\n\n\n/**\n * Returns true if cookies are enabled.\n * @return {boolean} True if cookies are enabled.\n */\ngoog.net.Cookies.prototype.isEnabled \x3d function() {\n  return navigator.cookieEnabled;\n};\n\n\n/**\n * We do not allow \x27\x3d\x27, \x27;\x27, or white space in the name.\n *\n * NOTE: The following are allowed by this method, but should be avoided for\n * cookies handled by the server.\n * - any name starting with \x27$\x27\n * - \x27Comment\x27\n * - \x27Domain\x27\n * - \x27Expires\x27\n * - \x27Max-Age\x27\n * - \x27Path\x27\n * - \x27Secure\x27\n * - \x27Version\x27\n *\n * @param {string} name Cookie name.\n * @return {boolean} Whether name is valid.\n *\n * @see \x3ca href\x3d\x22http://tools.ietf.org/html/rfc2109\x22\x3eRFC 2109\x3c/a\x3e\n * @see \x3ca href\x3d\x22http://tools.ietf.org/html/rfc2965\x22\x3eRFC 2965\x3c/a\x3e\n */\ngoog.net.Cookies.prototype.isValidName \x3d function(name) {\n  return !(/[;\x3d\\s]/.test(name));\n};\n\n\n/**\n * We do not allow \x27;\x27 or line break in the value.\n *\n * Spec does not mention any illegal characters, but in practice semi-colons\n * break parsing and line breaks truncate the name.\n *\n * @param {string} value Cookie value.\n * @return {boolean} Whether value is valid.\n *\n * @see \x3ca href\x3d\x22http://tools.ietf.org/html/rfc2109\x22\x3eRFC 2109\x3c/a\x3e\n * @see \x3ca href\x3d\x22http://tools.ietf.org/html/rfc2965\x22\x3eRFC 2965\x3c/a\x3e\n */\ngoog.net.Cookies.prototype.isValidValue \x3d function(value) {\n  return !(/[;\\r\\n]/.test(value));\n};\n\n\n/**\n * Sets a cookie.  The max_age can be -1 to set a session cookie. To remove and\n * expire cookies, use remove() instead.\n *\n * Neither the `name` nor the `value` are encoded in any way. It is\n * up to the callers of `get` and `set` (as well as all the other\n * methods) to handle any possible encoding and decoding.\n *\n * @throws {!Error} If the `name` fails #goog.net.cookies.isValidName.\n * @throws {!Error} If the `value` fails #goog.net.cookies.isValidValue.\n *\n * @param {string} name  The cookie name.\n * @param {string} value  The cookie value.\n * @param {number\x3d} opt_maxAge  The max age in seconds (from now). Use -1 to\n *     set a session cookie. If not provided, the default is -1\n *     (i.e. set a session cookie).\n * @param {?string\x3d} opt_path  The path of the cookie. If not present then this\n *     uses the full request path.\n * @param {?string\x3d} opt_domain  The domain of the cookie, or null to not\n *     specify a domain attribute (browser will use the full request host name).\n *     If not provided, the default is null (i.e. let browser use full request\n *     host name).\n * @param {boolean\x3d} opt_secure Whether the cookie should only be sent over\n *     a secure channel.\n */\ngoog.net.Cookies.prototype.set \x3d function(\n    name, value, opt_maxAge, opt_path, opt_domain, opt_secure) {\n  if (!this.isValidName(name)) {\n    throw new Error(\x27Invalid cookie name \x22\x27 + name + \x27\x22\x27);\n  }\n  if (!this.isValidValue(value)) {\n    throw new Error(\x27Invalid cookie value \x22\x27 + value + \x27\x22\x27);\n  }\n\n  if (!goog.isDef(opt_maxAge)) {\n    opt_maxAge \x3d -1;\n  }\n\n  var domainStr \x3d opt_domain ? \x27;domain\x3d\x27 + opt_domain : \x27\x27;\n  var pathStr \x3d opt_path ? \x27;path\x3d\x27 + opt_path : \x27\x27;\n  var secureStr \x3d opt_secure ? \x27;secure\x27 : \x27\x27;\n\n  var expiresStr;\n\n  // Case 1: Set a session cookie.\n  if (opt_maxAge \x3c 0) {\n    expiresStr \x3d \x27\x27;\n\n    // Case 2: Remove the cookie.\n    // Note: We don\x27t tell people about this option in the function doc because\n    // we prefer people to use remove() to remove cookies.\n  } else if (opt_maxAge \x3d\x3d 0) {\n    // Note: Don\x27t use Jan 1, 1970 for date because NS 4.76 will try to convert\n    // it to local time, and if the local time is before Jan 1, 1970, then the\n    // browser will ignore the Expires attribute altogether.\n    var pastDate \x3d new Date(1970, 1 /*Feb*/, 1);  // Feb 1, 1970\n    expiresStr \x3d \x27;expires\x3d\x27 + pastDate.toUTCString();\n\n    // Case 3: Set a persistent cookie.\n  } else {\n    var futureDate \x3d new Date(goog.now() + opt_maxAge * 1000);\n    expiresStr \x3d \x27;expires\x3d\x27 + futureDate.toUTCString();\n  }\n\n  this.setCookie_(\n      name + \x27\x3d\x27 + value + domainStr + pathStr + expiresStr + secureStr);\n};\n\n\n/**\n * Returns the value for the first cookie with the given name.\n * @param {string} name  The name of the cookie to get.\n * @param {string\x3d} opt_default  If not found this is returned instead.\n * @return {string|undefined}  The value of the cookie. If no cookie is set this\n *     returns opt_default or undefined if opt_default is not provided.\n */\ngoog.net.Cookies.prototype.get \x3d function(name, opt_default) {\n  var nameEq \x3d name + \x27\x3d\x27;\n  var parts \x3d this.getParts_();\n  for (var i \x3d 0, part; i \x3c parts.length; i++) {\n    part \x3d goog.string.trim(parts[i]);\n    // startsWith\n    if (part.lastIndexOf(nameEq, 0) \x3d\x3d 0) {\n      return part.substr(nameEq.length);\n    }\n    if (part \x3d\x3d name) {\n      return \x27\x27;\n    }\n  }\n  return opt_default;\n};\n\n\n/**\n * Removes and expires a cookie.\n * @param {string} name  The cookie name.\n * @param {string\x3d} opt_path  The path of the cookie, or null to expire a cookie\n *     set at the full request path. If not provided, the default is \x27/\x27\n *     (i.e. path\x3d/).\n * @param {string\x3d} opt_domain  The domain of the cookie, or null to expire a\n *     cookie set at the full request host name. If not provided, the default is\n *     null (i.e. cookie at full request host name).\n * @return {boolean} Whether the cookie existed before it was removed.\n */\ngoog.net.Cookies.prototype.remove \x3d function(name, opt_path, opt_domain) {\n  var rv \x3d this.containsKey(name);\n  this.set(name, \x27\x27, 0, opt_path, opt_domain);\n  return rv;\n};\n\n\n/**\n * Gets the names for all the cookies.\n * @return {Array\x3cstring\x3e} An array with the names of the cookies.\n */\ngoog.net.Cookies.prototype.getKeys \x3d function() {\n  return this.getKeyValues_().keys;\n};\n\n\n/**\n * Gets the values for all the cookies.\n * @return {Array\x3cstring\x3e} An array with the values of the cookies.\n */\ngoog.net.Cookies.prototype.getValues \x3d function() {\n  return this.getKeyValues_().values;\n};\n\n\n/**\n * @return {boolean} Whether there are any cookies for this document.\n */\ngoog.net.Cookies.prototype.isEmpty \x3d function() {\n  return !this.getCookie_();\n};\n\n\n/**\n * @return {number} The number of cookies for this document.\n */\ngoog.net.Cookies.prototype.getCount \x3d function() {\n  var cookie \x3d this.getCookie_();\n  if (!cookie) {\n    return 0;\n  }\n  return this.getParts_().length;\n};\n\n\n/**\n * Returns whether there is a cookie with the given name.\n * @param {string} key The name of the cookie to test for.\n * @return {boolean} Whether there is a cookie by that name.\n */\ngoog.net.Cookies.prototype.containsKey \x3d function(key) {\n  // substring will return empty string if the key is not found, so the get\n  // function will only return undefined\n  return goog.isDef(this.get(key));\n};\n\n\n/**\n * Returns whether there is a cookie with the given value. (This is an O(n)\n * operation.)\n * @param {string} value  The value to check for.\n * @return {boolean} Whether there is a cookie with that value.\n */\ngoog.net.Cookies.prototype.containsValue \x3d function(value) {\n  // this O(n) in any case so lets do the trivial thing.\n  var values \x3d this.getKeyValues_().values;\n  for (var i \x3d 0; i \x3c values.length; i++) {\n    if (values[i] \x3d\x3d value) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Removes all cookies for this document.  Note that this will only remove\n * cookies from the current path and domain.  If there are cookies set using a\n * subpath and/or another domain these will still be there.\n */\ngoog.net.Cookies.prototype.clear \x3d function() {\n  var keys \x3d this.getKeyValues_().keys;\n  for (var i \x3d keys.length - 1; i \x3e\x3d 0; i--) {\n    this.remove(keys[i]);\n  }\n};\n\n\n/**\n * Private helper function to allow testing cookies without depending on the\n * browser.\n * @param {string} s The cookie string to set.\n * @private\n */\ngoog.net.Cookies.prototype.setCookie_ \x3d function(s) {\n  this.document_.cookie \x3d s;\n};\n\n\n/**\n * Private helper function to allow testing cookies without depending on the\n * browser. IE6 can return null here.\n * @return {string} Returns the `document.cookie`.\n * @private\n */\ngoog.net.Cookies.prototype.getCookie_ \x3d function() {\n  return this.document_.cookie;\n};\n\n\n/**\n * @return {!Array\x3cstring\x3e} The cookie split on semi colons.\n * @private\n */\ngoog.net.Cookies.prototype.getParts_ \x3d function() {\n  return (this.getCookie_() || \x27\x27).split(\x27;\x27);\n};\n\n\n/**\n * Gets the names and values for all the cookies.\n * @return {{keys:!Array\x3cstring\x3e, values:!Array\x3cstring\x3e}} An object with keys\n *     and values.\n * @private\n */\ngoog.net.Cookies.prototype.getKeyValues_ \x3d function() {\n  var parts \x3d this.getParts_();\n  var keys \x3d [], values \x3d [], index, part;\n  for (var i \x3d 0; i \x3c parts.length; i++) {\n    part \x3d goog.string.trim(parts[i]);\n    index \x3d part.indexOf(\x27\x3d\x27);\n\n    if (index \x3d\x3d -1) {  // empty name\n      keys.push(\x27\x27);\n      values.push(part);\n    } else {\n      keys.push(part.substring(0, index));\n      values.push(part.substring(index + 1));\n    }\n  }\n  return {keys: keys, values: values};\n};\n\n\n// TODO(closure-team): This should be a singleton getter instead of a static\n// instance.\n/**\n * A static default instance.\n * @const {!goog.net.Cookies}\n */\ngoog.net.cookies \x3d\n    new goog.net.Cookies(typeof document \x3d\x3d \x27undefined\x27 ? null : document);\n\n\n/**\n * Getter for the static instance of goog.net.Cookies.\n * @return {!goog.net.Cookies}\n */\ngoog.net.Cookies.getInstance \x3d function() {\n  return goog.net.cookies;\n};\n\n\n/**\n * Define the constant on the instance in order not to break many references to\n * it.\n * @type {number}\n * @deprecated Use goog.net.Cookies.MAX_COOKIE_LENGTH instead.\n */\ngoog.net.cookies.MAX_COOKIE_LENGTH \x3d goog.net.Cookies.MAX_COOKIE_LENGTH;\n\n//# sourceURL\x3dhttps://qs/javascript/closure/net/cookies.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/common/cookies.js";
eval("/**\n * @fileoverview GWS specific cookie handling utilities.\n */\n\ngoog.provide(\x27gws.cookies\x27);\n\ngoog.require(\x27goog.net.cookies\x27);\ngoog.require(\x27goog.string\x27);\n\n\n/**\n * The name of the test cookie to set. Approved in http://b/11748450.\n * @private {string}\n * @const\n */\ngws.cookies.TEMP_COOKIE_NAME_ \x3d \x27TESTCOOKIESENABLED\x27;\n\n\n/**\n * The value of the test cookie to set.\n * @private {string}\n * @const\n */\ngws.cookies.TEMP_COOKIE_VALUE_ \x3d \x271\x27;\n\n\n/**\n * How long the test cookie should live. 60 seconds is probably overkill.\n * @private {number}\n * @const\n */\ngws.cookies.TEMP_COOKIE_LIFETIME_SECONDS_ \x3d 60;\n\n\n/**\n * In IE, turning off cookies won\x27t actually make navigator.cookieEnabled\n * return false (thanks, Redmond). So we need to get creative and investigate a\n * little further to determine whether cookies are enabled.\n * @return {boolean} whether cookies are enabled.\n */\ngws.cookies.areCookiesEnabled \x3d function() {\n  try {\n    if (!goog.net.cookies.isEnabled()) {\n      return false;\n    }\n\n    // Check the PREF cookie. GWS users should *always* have a PREF cookie.\n    var pref \x3d /** @type {string} */ (goog.net.cookies.get(\x27PREF\x27, \x27\x27));\n    if (goog.string.isEmptyOrWhitespace(pref)) {\n      // Ok, if there\x27s no PREF cookie, things are suspicious. Set a temp cookie\n      // value and try to read it back out to see if cookies are enabled.\n      goog.net.cookies.set(\n          gws.cookies.TEMP_COOKIE_NAME_, gws.cookies.TEMP_COOKIE_VALUE_,\n          gws.cookies.TEMP_COOKIE_LIFETIME_SECONDS_);\n      if (goog.net.cookies.get(gws.cookies.TEMP_COOKIE_NAME_) !\x3d\n          gws.cookies.TEMP_COOKIE_VALUE_) {\n        return false;\n      }\n      // Clean up after ourselves.\n      goog.net.cookies.remove(gws.cookies.TEMP_COOKIE_NAME_);\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/common/cookies.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/cache/namespace.js";
goog.loadModule("/**\n * @fileoverview Namespaces for cache writing. Send a CL to gws-reviewers to add\n * a new namespace.\n */\ngoog.module(\x27search.cache.Namespace\x27);\ngoog.module.declareLegacyNamespace();\n\n/**\n * @typedef {{name: string, noInMemoryCache: (boolean|undefined)}}\n */\nvar CacheOptions;\n\n/**\n * The Namespace enum to be used by teams writing to the cache.\n *\n * If you are going to use the GWS Cache in a new way, add your feature to the\n * namespace below in the alphabetically correct location. Do not use existing\n * namespaces in ways they were not intended.\n * @enum {CacheOptions}\n */\nconst Namespace \x3d {\n  // Please keep this alphabetized.\n\n  // twilkinson@, search-ui-chi@\n  ACT_ATOM_STORAGE: {\n    name: \x27acta\x27,\n  },\n\n  // twilkinson@, search-ui-chi@\n  ACT_MISC_STORAGE: {\n    name: \x27actm\x27,\n  },\n\n  // twilkinson@, search-ui-chi@\n  ACT_NODE_STORAGE: {\n    name: \x27actn\x27,\n  },\n\n  // ariaxu@, explore-onback@\n  ADS_ON_BACK: {\n    name: \x27aob\x27,\n  },\n\n  // doshis@\n  ADS_SAB_CHAT: {\n    name: \x27ads.sab.chat\x27,\n  },\n\n  // ericfs@, amp-viewer-eng@\n  AMP: {\n    name: \x27amp\x27,\n  },\n\n  // domnit@, gws-async@\n  ASYNC: {\n    name: \x27async\x27,\n  },\n\n  // dsliu@, ke-books-feature@\n  BOOKS_BORROW_ACTION: {\n    name: \x27bba\x27,\n  },\n\n  // twilkinson@, search-ui-chi@\n  CACHE_INTERNAL: {\n    name: \x27ci\x27,\n  },\n\n  // ariblue@, consent-bump-search@\n  CONSENT: {\n    name: \x27cns\x27,\n  },\n\n  // portnoy@, travel-trips-fe@\n  DESTINATIONS: {\n    name: \x27dst\x27,\n  },\n\n  // jonatanw@, domainless-team@\n  DOMAINLESS: {\n    name: \x27dml\x27,\n  },\n\n  // qfiard@, easysignin-eng@\n  EASYSIGNIN: {\n    name: \x27esi\x27,\n  },\n\n  // jfriedman@\n  ELECTIONS_ADDRESS: {\n    name: \x27eaddr\x27,\n  },\n\n  // samarth@, kmadhusu@\n  EMBEDDED_SEARCH_HOTWORD: {\n    name: \x27embhw\x27,\n  },\n\n  // vaidehi@, search-engagement-vote@\n  ENGAGEMENT_HISTORY_UTIL: {\n    name: \x27vt\x27,\n  },\n\n  // mrefaat@\n  EPRIVACY_BAR: {\n    name: \x27epbar\x27,\n  },\n\n  // shiboluo@, horizon-team@\n  EVENTS_SEARCH_STORAGE: {\n    name: \x27ess\x27,\n  },\n\n  // busaryev, explore-dev@\n  EXPLORE_CACHE: {\n    name: \x27exc\x27,\n  },\n\n  // exw@, explore-onback@\n  EXPLORE_DESKTOP_HISTORY: {\n    name: \x27expd\x27,\n  },\n\n  // exw@, explore-onback@\n  EXPLORE_ON_BACK: {\n    name: \x27eob\x27,\n  },\n\n  // ofirp@, flights-fe-eng@\n  FLIGHTS: {\n    name: \x27flights\x27,\n  },\n\n  // xingjuan@\n  FULLSCREEN_DEMO: {\n    name: \x27fdemo\x27,\n  },\n\n  // remulla@, glee-rank@\n  GLEE: {\n    name: \x27glee\x27,\n  },\n\n  // @ravia, attention-logging@\n  GWS_OVERRIDES_LOGGING: {\n    name: \x27LH\x27,\n  },\n\n  // martone@\n  HANDWRITING: {\n    name: \x27hw\x27,\n  },\n\n  // martone@, leonting@\n  HANDWRITING_FIRST_USE: {\n    name: \x27hwf\x27,\n  },\n\n  // zigaham@, mattiacci@\n  HIGHLIGHT_HISTORY_STATE: {\n    name: \x27hlg\x27,\n  },\n\n  // twilkinson@, search-ui-chi@\n  HISTORY_STATE_BACK_STACK: {\n    name: \x27hsb\x27,\n  },\n\n  // cgagliardi@, search-ui-chi@\n  HISTORY_STATE_POLYFILL: {\n    name: \x27hs\x27,\n  },\n\n  // hulu-eng@\n  HOTELS: {\n    name: \x27th\x27,\n  },\n\n  // sarna@,\n  IMAGES_BREAKOUT: {\n    name: \x27images-br\x27,\n  },\n\n  // joescalise@\n  IMAGES_STARS: {\n    name: \x27istar\x27,\n  },\n\n  // ses@\n  IMAGE_VIEWER_UTILS: {\n    name: \x27irc\x27,\n  },\n\n  // koshima@, agsa-infra@\n  IMMERSIVE_STATE_NAVIGATOR: {\n    name: \x27isn\x27,\n  },\n\n  // mattnewton@, fruit-eng@\n  INFINITE_FETCH_SESSION: {\n    name: \x27ifs\x27,\n  },\n\n  // ariblue@, janakj@\n  JS_REDIRECT: {\n    name: \x27jsRedirect\x27,\n  },\n\n  // vocabulary-lr@\n  KNOWLEDGE_GAME: {\n    name: \x27lrkg\x27,\n  },\n\n  // sports-lr-ui@\n  LIVE_RESULTS_SPORTS: {\n    name: \x27lrs\x27,\n  },\n\n  // kedolan@\n  LOCATION_PROMPT: {\n    name: \x27gllp\x27,\n  },\n\n  // calebchao@, rap-frontend@\n  LU_ADD_A_PLACE: {\n    name: \x27luaap\x27,\n  },\n\n  // tristanhale@, local-search-ui@\n  LU_DIRECTIONS: {\n    name: \x27lud\x27,\n  },\n\n  // calebchao@, rap-frontend@\n  LU_MERCHANT_PANEL_TODO_LIST: {\n    name: \x27mpp\x27,\n  },\n\n  // tristanhale@, local-search-ui@\n  LU_PLACE_QA: {\n    name: \x27pqa\x27,\n  },\n\n  // yehudas@, local-search-ui@, constellations@\n  LU_SAVE_ACTION: {\n    name: \x27lusa\x27,\n  },\n\n  // andrewaprice@, plsa@\n  LU_VISIT_HISTORY: {\n    name: \x27vh\x27,\n  },\n\n  // jeremycho@, manhattan-eng@\n  MANHATTAN_BARS: {\n    name: \x27abar\x27,\n  },\n\n  // mingzhiz@, explore-dev@\n  MINIBAR: {\n    name: \x27mbar\x27,\n  },\n\n  // portalfire@\n  MOBILE_BOOKMARK_HOMEPAGE_PROMO: {\n    name: \x27mbhp\x27,\n  },\n\n  // liuxi@\n  PRODUCT_LISTING: {\n    name: \x27plac\x27,\n  },\n\n  // psychic-eng@\n  PSYCHIC: {\n    name: \x27psy\x27,\n  },\n\n  // channingwong@, search-ui-chi@\n  RABBIT_HOLE_EASTER_EGG: {\n    name: \x27rh\x27,\n  },\n\n  // yasmo@, riddler-eng@\n  RIDDLER: {\n    name: \x27lrcs\x27,\n  },\n\n  // go/saves-persistent-signed-out\n  // hcutts@, saves-eng@\n  SAVE_PERSISTENT_SIGNED_OUT: {\n    name: \x27spso\x27,\n  },\n\n  // chrisq@, hoainguyen@, mattdv@\n  SCROLLER: {\n    name: \x27scroll\x27,\n  },\n\n  // twilkinson@, search-ui-chi@\n  SCROLL_RESTORATION: {\n    name: \x27sr\x27,\n  },\n\n  // ravia@, search-ui-chi@\n  SEARCH_LOG_DATA_HANDLER: {\n    name: \x27sldh\x27,\n    noInMemoryCache: true,\n  },\n\n  // Send to device dynamically creates prefixes, all of which begin with this\n  // key.\n  // htt@\n  SEND_TO_DEVICE: {\n    name: \x27GRrgstrddv\x27,\n  },\n\n  // tantalo@\n  SHOPPING_AGSA_PERSISTENCE: {\n    name: \x27sap\x27,\n  },\n\n  // tantalo@, shopex-ui@\n  SHOPPING_CLIENTSIDE: {\n    name: \x27shop3\x27,\n  },\n\n  // jfweitz@, srp-pagination@\n  SRP_PAGINATION: {\n    name: \x27srpp\x27,\n  },\n\n  // sv-ui@\n  SUPER_VERTICAL_MINIAPP: {\n    name: \x27svm\x27,\n  },\n\n  // twilkinson@, search-ui-chi@\n  TEST1: {\n    name: \x27t1\x27,\n  },\n\n  // twilkinson@, search-ui-chi@\n  TEST2: {\n    name: \x27t2\x27,\n  },\n\n  // ajpace@, tpla-eng@\n  TRANSACTABLE_PRODUCT_LIST_ADS: {\n    name: \x27tpla\x27,\n  },\n\n  // jessec@, travel-unifiednav-eng@\n  TRAVEL_UNIFIED_NAVIGATION: {\n    name: \x27trun\x27,\n  },\n\n  // hcutts@, saves-eng@\n  TRAY: {\n    name: \x27tray\x27,\n  },\n\n  // minhtruong@, sungroa@\n  VOICE_PROMO: {\n    name: \x27vpromo\x27,\n  },\n\n  // vaidehi@, search-engagement-vote@\n  VOTEMORT: {\n    name: \x27vtmt\x27,\n  },\n\n  // andreykl@, weather-lr@\n  WEATHER: {\n    name: \x27weat\x27,\n  },\n\n  // jayjang@, ke-tvm@\n  WHOLEPAGE: {\n    name: \x27wp\x27,\n  },\n\n  // tristanhale@\n  WRITE_REVIEW: {\n    name: \x27wrpks\x27,\n  },\n};\n\nexports \x3d Namespace;\n\n//# sourceURL\x3dhttps://qs/gws/js/cache/namespace.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/storagecache/mechanism/constants.js";
goog.loadModule("goog.module(\x27storagecache.mechanism.constants\x27);\n\n/**\n * @type {string} The separator between the metadata and value in serialized\n * cache entries\n */\nconst metaDataSeparator \x3d \x27_\x27;\n\n/**\n * @type {string} The namespace separator.\n */\nconst keySeparator \x3d \x27;;\x27;\n\n/**\n * @type {string} A namespace reserved for keeping track of the cache.\n */\nconst CACHE_INTERNAL_NAMESPACE \x3d \x27_c\x27;\n\n/**\n * @type {string} Used to store the incrementing ID in storage.\n */\nconst ID_KEY \x3d \x27i\x27;\n\nexports \x3d {\n  metaDataSeparator,\n  keySeparator,\n  CACHE_INTERNAL_NAMESPACE,\n  ID_KEY,\n};\n\n//# sourceURL\x3dhttps://qs/javascript/apps/storagecache/mechanism/constants.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/storagecache/priority.js";
goog.loadModule("/**\n * @fileoverview Priority of entries in the cache.\n */\ngoog.module(\x27storagecache.Priority\x27);\ngoog.module.declareLegacyNamespace();\n\n/**\n * The priority of the cache storage.  Used for the eviction strategy.\n * The names of these are chosen for sorting properties where the higher\n * priority characters are less than higher priority characters.\n * @enum {string}\n */\nconst Priority \x3d {\n  VERY_HIGH: \x27*\x27,\n  HIGH: \x27h\x27,\n  MEDIUM: \x27m\x27,\n  LOW: \x27w\x27,\n  MEMORY_ONLY: \x27x\x27,\n};\n\nexports \x3d Priority;\n\n//# sourceURL\x3dhttps://qs/javascript/apps/storagecache/priority.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/storagecache/mechanism/metadata.js";
goog.loadModule("goog.module(\x27storagecache.mechanism.Metadata\x27);\n\nconst Priority \x3d goog.require(\x27storagecache.Priority\x27);\n\n/**\n * Typedef for metadata associated with a value.\n * @typedef {{\n *   lastAccessed: (number|undefined),\n *   priority: !Priority\n * }}\n */\nvar Metadata;\n\nexports \x3d Metadata;\n\n//# sourceURL\x3dhttps://qs/javascript/apps/storagecache/mechanism/metadata.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/storage/errorcode.js";
eval("// Copyright 2011 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Defines errors to be thrown by the storage.\n *\n * @author azzie@google.com (Marcin Marszalek)\n */\n\ngoog.provide(\x27goog.storage.ErrorCode\x27);\n\n\n/**\n * Errors thrown by the storage.\n * @enum {string}\n */\ngoog.storage.ErrorCode \x3d {\n  INVALID_VALUE: \x27Storage: Invalid value was encountered\x27,\n  DECRYPTION_ERROR: \x27Storage: The value could not be decrypted\x27\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/storage/errorcode.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/jsonable.js";
goog.loadModule("goog.module(\x27search.Jsonable\x27);\n\n/**\n * @typedef {boolean|number|string}\n */\nlet Primitive;\n\n/**\n * @typedef {Primitive|!Array|!Object}\n */\nlet NestedType;\n\n/**\n * Types that can be JSON serialized. We only check one level deep for Objects\n * and Arrays so it\x27s not checked at compile time whether nested types are\n * correct, and it would be possible for a user to pass in an invalid JSON\n * object. Which would be a bummer.\n * NOTE(gws-javascript-team): If the compiler were to support recursive\n * typedefs, this would be\n * {boolean|number|string|!Object\x3cstring, !Jsonable\x3e|!Array\x3c!Jsonable\x3e}.\n * Recursive type checking is supported by @record but not @typedef.\n * @typedef {?Primitive|!Object\x3cstring, ?NestedType\x3e|!Array\x3c?NestedType\x3e}\n */\nlet Jsonable;\n\nexports \x3d Jsonable;\n\n//# sourceURL\x3dhttps://qs/gws/js/jsonable.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/storagecache/mechanism/wrapped_value.js";
goog.loadModule("goog.module(\x27storagecache.mechanism.WrappedValue\x27);\n\nconst ErrorCode \x3d goog.require(\x27goog.storage.ErrorCode\x27);\nconst Jsonable \x3d goog.require(\x27search.Jsonable\x27);\nconst Metadata \x3d goog.require(\x27storagecache.mechanism.Metadata\x27);\nconst Priority \x3d goog.require(\x27storagecache.Priority\x27);\nconst asserts \x3d goog.require(\x27goog.asserts\x27);\nconst googObject \x3d goog.require(\x27goog.object\x27);\nconst json \x3d goog.require(\x27goog.json\x27);\nconst { metaDataSeparator } \x3d goog.require(\x27storagecache.mechanism.constants\x27);\n\n/**\n * @enum {string}\n */\nconst SerializedMetadataKey \x3d {\n  PRIORITY: \x27p\x27,\n  LAST_ACCESSED: \x27l\x27\n};\n\n// Matches the metadata\nconst METADATA_REGEX \x3d new RegExp(\n    // TODO: one day when g4 fix works with templating strings, this would be\n    // cleaner to convert.\n    \x27^\x27 + SerializedMetadataKey.PRIORITY + \x27:([a-z\\\\*])\\\\|\x27 +\n        SerializedMetadataKey.LAST_ACCESSED + \x27:(\\\\d+)\x27,\n    \x27i\x27);\n\nclass WrappedValue {\n  /**\n   * Wraps the value in something that mechanisms pass around with\n   * metadata.\n   * Either value or valueString must be passed in.\n   * @param {!Metadata} metadata\n   * @param {!Jsonable\x3d} value\n   * @param {string\x3d} valueString The serialized value string.\n   */\n  constructor(metadata, value \x3d undefined, valueString \x3d undefined) {\n    asserts.assert(goog.isDef(value) || goog.isDef(valueString));\n    /**\n     * The wrapped value.\n     * @private {!Jsonable|undefined}\n     */\n    this.value_ \x3d value;\n    /**\n     * The serialized value string\n     * @private {string|undefined}\n     */\n    this.valueString_ \x3d valueString;\n\n    /**\n     * Metadata object that subclasses use to add value to the stored\n     * object.\n     * @type {!Metadata}\n     */\n    this.metadata \x3d metadata;\n  }\n\n  /**\n   * This is a potentially expensive method if the WrappedValue is\n   * wrapping a string value, because then we will parse the string.\n   * @return {!Jsonable}\n   */\n  getValue() {\n    if (!goog.isDef(this.value_)) {\n      this.value_ \x3d deserializeValue(/** @type {string} */ (this.valueString_));\n    }\n    return /** @type {!Jsonable} */ (this.value_);\n  }\n\n  /**\n   * This is a potentially expensive method if the WrappedValue is\n   * wrapping a value, because then we will serialize the value to a string.\n   * If the value doesn\x27t parse correctly then it will throw an invalid error.\n   * @return {string}\n   * @private\n   */\n  getValueString_() {\n    if (!goog.isDef(this.valueString_)) {\n      this.valueString_ \x3d json.serialize(this.value_);\n    }\n    return /** @type {string} */ (this.valueString_);\n  }\n\n  /**\n   * Serializes the wrapped object into a string representation.\n   * @return {string}\n   */\n  serialize() {\n    asserts.assert(goog.isDef(this.metadata.priority));\n    asserts.assert(goog.isDef(this.metadata.lastAccessed));\n    return WrappedValue.serialize(\n        this.getValueString_(), this.metadata.priority,\n        this.metadata.lastAccessed);\n  }\n\n  /**\n   * This is a static function so that it can be used by inline_cache.js without\n   * using the entire WrappedValue class.\n   * @param {string} valueString\n   * @param {!Priority} priority\n   * @param {number} lastAccessed\n   * @return {string}\n   */\n  static serialize(valueString, priority, lastAccessed) {\n    let serializedString \x3d \x27\x27;\n    serializedString +\x3d SerializedMetadataKey.PRIORITY + \x27:\x27 + priority + \x27|\x27;\n    serializedString +\x3d SerializedMetadataKey.LAST_ACCESSED + \x27:\x27 +\n        lastAccessed + metaDataSeparator;\n    serializedString +\x3d valueString;\n    return serializedString;\n  }\n\n  /**\n   * Parse the wrapped value from the previously serialized string.\n   * @param {string} serializedString\n   * @return {?WrappedValue}\n   */\n  static deserialize(serializedString) {\n    const splitString \x3d splitSerializedString(serializedString);\n    if (goog.isNull(splitString)) {\n      return null;\n    }\n    const metadata \x3d deserializeMetadata(splitString.metadataString);\n    if (goog.isNull(metadata)) {\n      return null;\n    }\n    // Always lazily load the deserialized value.\n    return new WrappedValue(metadata, undefined, splitString.valueString);\n  }\n}\n\n\n/**\n * Parse the metadata from the previously serialized string and return the\n * remaining portion of the string.\n * @param {string} serializedString\n * @return {{\n *   metadataString: string,\n *   valueString: string\n * }|null}\n */\nfunction splitSerializedString(serializedString) {\n  const indexOfSplitChar \x3d serializedString.indexOf(metaDataSeparator);\n  if (indexOfSplitChar \x3c 0) {\n    return null;\n  }\n  const metadataString \x3d serializedString.substr(0, indexOfSplitChar);\n  const valueString \x3d serializedString.substr(indexOfSplitChar + 1);\n  return {metadataString: metadataString, valueString: valueString};\n}\n\n/**\n * Deserialize the given metadata string into a metadata object.\n * @param {string} metadataString\n * @return {?Metadata}\n */\nfunction deserializeMetadata(metadataString) {\n  const result \x3d METADATA_REGEX.exec(metadataString);\n  if (goog.isNull(result)) {\n    return null;\n  }\n  const priority \x3d /** @type {!Priority} */ (result[1]);\n  const lastAccessed \x3d parseInt(result[2], 10);\n  if (Number.isNaN(lastAccessed)) {\n    return null;\n  }\n  asserts.assert(\n      googObject.containsValue(Priority, priority) \x26\x26\n      goog.isDef(priority) \x26\x26 !goog.isNull(priority) \x26\x26\n      goog.isDef(lastAccessed) \x26\x26 !goog.isNull(lastAccessed));\n  return {priority: priority, lastAccessed: lastAccessed};\n}\n\n/**\n * Deserialize the given value string into a Jsonable\n * @param {string} valueString\n * @return {!Jsonable}\n */\nfunction deserializeValue(valueString) {\n  asserts.assert(valueString);\n\n  try {\n    let value \x3d json.parse(valueString);\n    if (goog.isNull(value)) {\n      // Consider throwing a different value here.\n      throw new Error(ErrorCode.INVALID_VALUE);\n    }\n    return value;\n  } catch (e) {\n    throw new Error(ErrorCode.INVALID_VALUE);\n  }\n}\n\nexports \x3d WrappedValue;\n\n//# sourceURL\x3dhttps://qs/javascript/apps/storagecache/mechanism/wrapped_value.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/storagecache/mechanism/mechanism.js";
goog.loadModule("/**\n * @fileoverview Base class for a mechanism that acts as a layer between some\n * user facing API and some storage.\n */\n\ngoog.module(\x27storagecache.mechanism.Mechanism\x27);\n\nconst Iterator \x3d goog.require(\x27goog.iter.Iterator\x27);\nconst WrappedValue \x3d goog.require(\x27storagecache.mechanism.WrappedValue\x27);\nconst iter \x3d goog.require(\x27goog.iter\x27);\n\nconst isNull \x3d goog.isNull;\n\n/**\n * A base class for other Mechanisms that make up the cache.\n * @abstract\n */\nclass Mechanism {\n  /**\n   * Base constructor for all Mechanism classes.\n   */\n  constructor() {}\n\n  /**\n   * Gets the value for the given key.\n   * @abstract\n   * @param {string} key\n   * @param {boolean\x3d} noSideEffects Whether or not the get should also mutate\n   *     side effected things (such as lastAccessed). Used by __iterator__ to\n   *     get items without setting metadata back into the Cache about them.\n   * @return {?WrappedValue}\n   */\n  get(key, noSideEffects) {}\n\n  /**\n   * Tells whether the given key exists in the cache.\n   * @abstract\n   * @param {string} key\n   * @return {boolean}\n   */\n  has(key) {}\n\n  /**\n   * Sets the value for the given key.\n   * @abstract\n   * @param {string} key\n   * @param {!WrappedValue} value\n   */\n  set(key, value) {}\n\n  /**\n   * Remove the value at the given key\n   * @abstract\n   * @param {string} key\n   */\n  remove(key){}\n\n  /**\n   * Returns an iterator over the keys stored in the mechanism.\n   * @abstract\n   * @return {!Iterator\x3cstring\x3e}\n   */\n  __iterator__() {}\n\n  /**\n   * Clear all keys and associated values that have been set on this mechanism.\n   */\n  clear() {\n    Mechanism.clear(this);\n  }\n\n  /**\n   * Used by mechanisms that have extra resetting to perform\n   * at the end of a clear operation.\n   * @protected\n   */\n  reset() {}\n\n  /**\n   * Default implementation that iterates over all keys calling remove and\n   * then calls reset.\n   * @param {!Mechanism} mechanism\n   */\n  static clear(mechanism) {\n    // This calls iter.toArray to parse all the keys because some iterators\n    // have bad indexing semantics if you remove while iterating, and will\n    // skip over keys or terminate early.  This is unfortunate, but\n    // WebStorage does not guarantee key ordering.\n    for (const key of iter.toArray(mechanism)) {\n      mechanism.remove(key);\n    }\n    mechanism.reset();\n  }\n}\n\nexports \x3d Mechanism;\n\n//# sourceURL\x3dhttps://qs/javascript/apps/storagecache/mechanism/mechanism.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/storagecache/mechanism/chained_mechanism.js";
goog.loadModule("goog.module(\x27storagecache.mechanism.ChainedMechanism\x27);\n\nconst Mechanism \x3d goog.require(\x27storagecache.mechanism.Mechanism\x27);\n\nconst isNull \x3d goog.isNull;\n\n/**\n * A ChainedMechanism wraps another mechanism. This base class provides default\n * (delegating) methods so that subclasses can implement only the extra methods\n * that they require.\n */\nclass ChainedMechanism extends Mechanism {\n  /**\n   * Constructs a chain mechanism.\n   * @param {!Mechanism} mechanism\n   * functions.\n   */\n  constructor(mechanism) {\n    super();\n    /**\n     * @const @protected {!Mechanism}\n     */\n    this.mechanism \x3d mechanism;\n  }\n\n  /** @override */\n  get(key, noSideEffects \x3d false) {\n    return this.mechanism.get(key, noSideEffects);\n  }\n\n  /** @override */\n  has(key) {\n    return this.mechanism.has(key);\n  }\n\n  /** @override */\n  set(key, value) {\n    this.mechanism.set(key, value);\n  }\n\n  /** @override */\n  remove(key) {\n    this.mechanism.remove(key);\n  }\n\n  /** @override */\n  clear() {\n    this.mechanism.clear();\n  }\n\n  /** @override */\n  reset() {\n    this.mechanism.reset();\n  }\n\n  /** @override */\n  __iterator__() {\n    return this.mechanism.__iterator__();\n  }\n}\n\nexports \x3d ChainedMechanism;\n\n//# sourceURL\x3dhttps://qs/javascript/apps/storagecache/mechanism/chained_mechanism.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/storagecache/mechanism/error_mechanism.js";
goog.loadModule("goog.module(\x27storagecache.mechanism.ErrorMechanism\x27);\n\nconst ChainedMechanism \x3d goog.require(\x27storagecache.mechanism.ChainedMechanism\x27);\nconst Iterator \x3d goog.require(\x27goog.iter.Iterator\x27);\nconst Mechanism \x3d goog.require(\x27storagecache.mechanism.Mechanism\x27);\nconst iter \x3d goog.require(\x27goog.iter\x27);\n\n/**\n * A function that handles errors raised by a mechanism.  Since some places in\n * the codebase throw strings instead of Error objects, we accept\n * these as a valid parameter type.  It supports the following arguments:\n *\n * 1) The raised error (either in Error or string form);\n * 2) The operation name which triggered the error, as defined per the\n *    Operation enum;\n * 3) Arguments that were passed to the method as an object;\n *\n * @typedef {function(\n *   (!Error|string),\n *   !Operation,\n *   !Object\x3cstring, *\x3e)}\n */\nlet ErrorListener;\n\n/**\n * Operation enum to describe which mechanism function threw the error.\n * @enum {string}\n */\nconst Operation \x3d {\n  SET: \x27set\x27,\n  GET: \x27get\x27,\n  HAS: \x27has\x27,\n  REMOVE: \x27remove\x27,\n  ITERATOR: \x27iterator\x27,\n  CLEAR: \x27clear\x27,\n  RESET: \x27reset\x27\n};\n\n// The number of times we will forward an error to the errorListener in\n// __iterator__ steps before giving up on iteration. Without this, we have the\n// potential for an infinite loop. 5 was chosen as a value that will allow\n// for some errors, without totally spamming the errorListener.\nconst MAX_ITERATION_ERRORS \x3d 5;\n\n/**\n * A mechanism that wraps other mechanisms, catches errors, and calls an error\n * listener callback.\n */\nclass ErrorMechanism extends ChainedMechanism {\n  /**\n   * @param {!ErrorListener} errorListener\n   * @param {!Mechanism} mechanism\n   */\n  constructor(errorListener, mechanism) {\n    super(mechanism);\n\n    /**\n     * @const @private\n     */\n    this.errorListener_ \x3d errorListener;\n  }\n\n  /** @override */\n  get(key, noSideEffects \x3d false) {\n    let value \x3d null;\n    this.handleErrors_(\n        () \x3d\x3e value \x3d super.get(key, noSideEffects), Operation.GET, {key: key});\n    return value;\n  }\n\n  /** @override */\n  has(key) {\n    let answer \x3d false;\n    this.handleErrors_(\n        () \x3d\x3e answer \x3d super.has(key), Operation.HAS, {key: key});\n    return answer;\n  }\n\n  /** @override */\n  set(key, value) {\n    this.handleErrors_(\n        () \x3d\x3e super.set(key, value), Operation.SET,\n        {key: key, value: value.getValue()});\n  }\n\n  /** @override */\n  remove(key) {\n    this.handleErrors_(() \x3d\x3e super.remove(key), Operation.REMOVE, {key: key});\n  }\n\n  /** @override */\n  __iterator__() {\n    let superIter;\n    const newIter \x3d new Iterator();\n    try {\n      superIter \x3d this.mechanism.__iterator__();\n    } catch (e) {\n      this.errorListener_(e, Operation.ITERATOR, {});\n      newIter.next \x3d () \x3d\x3e {\n        throw iter.StopIteration;\n      };\n      return newIter;\n    }\n    let numErrors \x3d 0;\n    newIter.next \x3d () \x3d\x3e {\n      while (true) {\n        try {\n          return superIter.next();\n        } catch (e) {\n          numErrors++;\n          if (numErrors \x3e MAX_ITERATION_ERRORS || e \x3d\x3d iter.StopIteration) {\n            throw iter.StopIteration;\n          }\n          this.errorListener_(e, Operation.ITERATOR, {});\n        }\n      }\n    };\n    return newIter;\n  }\n\n  /** @override */\n  clear() {\n    this.handleErrors_(() \x3d\x3e super.clear(), Operation.CLEAR);\n  }\n\n  /** @override */\n  reset() {\n    this.handleErrors_(() \x3d\x3e super.reset(), Operation.RESET);\n  }\n\n  /**\n   * @param {function()} callback\n   * @param {!Operation} operation\n   * @param {!Object\x3cstring, *\x3e\x3d} args\n   * @private\n   */\n  handleErrors_(callback, operation, args \x3d {}) {\n    try {\n      callback();\n    } catch (e) {\n      this.errorListener_(e, operation, args);\n    }\n  }\n}\n\nErrorMechanism.Operation \x3d Operation;\nErrorMechanism.ErrorListener \x3d ErrorListener;\n/**\n * @package Visible for testing.\n * @const {number}\n */\nErrorMechanism.MAX_ITERATION_ERRORS \x3d MAX_ITERATION_ERRORS;\n\nexports \x3d ErrorMechanism;\n\n//# sourceURL\x3dhttps://qs/javascript/apps/storagecache/mechanism/error_mechanism.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/storagecache/mechanism/last_accessed_mechanism.js";
goog.loadModule("goog.module(\x27storagecache.mechanism.LastAccessedMechanism\x27);\n\nconst ChainedMechanism \x3d goog.require(\x27storagecache.mechanism.ChainedMechanism\x27);\nconst Mechanism \x3d goog.require(\x27storagecache.mechanism.Mechanism\x27);\nconst Priority \x3d goog.require(\x27storagecache.Priority\x27);\n\nconst isNull \x3d goog.isNull;\n\n/**\n * A mechanism that takes a function nextLastAccessed. This function should\n * increment some global counter and return the next value.\n * @final\n */\nclass LastAccessedMechanism extends ChainedMechanism {\n  /**\n   * @param {function():number} nextLastAccessed\n   * @param {!Mechanism} mechanism A mechanism to delegate to.\n   */\n  constructor(nextLastAccessed, mechanism) {\n    super(mechanism);\n\n    /**\n     * Callback to return next lastAccessed number.\n     * @const @private {function():number}\n     */\n    this.nextLastAccessed_ \x3d nextLastAccessed;\n  }\n\n  /** @override */\n  get(key, noSideEffects \x3d false) {\n    const value \x3d super.get(key, noSideEffects);\n    if (!noSideEffects \x26\x26 value \x26\x26\n        // The MEMORY_ONLY Priority exists to avoid the cost of actually using\n        // the underlying storage. Since keys set with Priority MEMORY_ONLY\n        // aren\x27t stored to any type of browser storage (sessionStorage or\n        // localStorage), they aren\x27t subject to eviction, and are never seen by\n        // the LRUMechanism. Therefore, they don\x27t need to ever have their\n        // lastAccessed tag set.\n        //\n        // Furthermore, nextLastAccessed_() does access the browser storage,\n        // incurring the very cost we were trying to avoid.\n        //\n        // So skip this logic if the key is Priority.MEMORY_ONLY.\n        value.metadata.priority \x3c Priority.MEMORY_ONLY) {\n      value.metadata.lastAccessed \x3d this.nextLastAccessed_();\n      super.set(key, value);\n    }\n    return value;\n  }\n\n  /** @override */\n  set(key, value) {\n    // Please see the comment above in get() for the rationale of this\n    // condition.\n    if (value.metadata.priority \x3c Priority.MEMORY_ONLY) {\n      value.metadata.lastAccessed \x3d this.nextLastAccessed_();\n    }\n    super.set(key, value);\n  }\n}\n\nexports \x3d LastAccessedMechanism;\n\n//# sourceURL\x3dhttps://qs/javascript/apps/storagecache/mechanism/last_accessed_mechanism.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/storagecache/mechanism/error.js";
goog.loadModule("/**\n * @fileoverview Errors thrown by mechanisms\n */\n\ngoog.module(\x27storagecache.mechanism.error\x27);\n\n/** @const {!Error} */\nexports.OVERSIZED_OBJECT \x3d\n    new Error(\x27this object is too large to store in the cache\x27);\n\n/** @const {!Error} */\nexports.EVICTION_ERROR \x3d\n    new Error(\x27not enough room in storage for an entry of this priority\x27);\n\n//# sourceURL\x3dhttps://qs/javascript/apps/storagecache/mechanism/error.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/storagecache/mechanism/lru_mechanism.js";
goog.loadModule("/**\n * @fileoverview Provides an LRU (least-recently used) cache mechanism. This\n * is meant to wrap Web Storage which has a strictly enforced quota (e.g. 10mb).\n * Applications can use the LRU mechanism to put data in storage and not worry\n * about quota exceptions; the mechanism will automatically remove old data\n * from storage to make room for new data.\n *\n * By default, the LRU mechanism will store as much data as possible without\n * exceeding quota, so the storage will typically be almost full if the app\n * never deletes data. This prevents other apps on the same origin (which use\n * the same session/local storage) from storing data after.\n */\n\ngoog.module(\x27storagecache.mechanism.LruMechanism\x27);\n\nconst ErrorCode \x3d goog.require(\x27goog.storage.mechanism.ErrorCode\x27);\nconst IterableMechanism \x3d goog.require(\x27goog.storage.mechanism.IterableMechanism\x27);\nconst Mechanism \x3d goog.require(\x27storagecache.mechanism.Mechanism\x27);\nconst Priority \x3d goog.require(\x27storagecache.Priority\x27);\nconst WrappedValue \x3d goog.require(\x27storagecache.mechanism.WrappedValue\x27);\nconst asserts \x3d goog.require(\x27goog.asserts\x27);\nconst error \x3d goog.require(\x27storagecache.mechanism.error\x27);\nconst iter \x3d goog.require(\x27goog.iter\x27);\n\nconst MAX_ATTEMPTS \x3d 4;\nconst EVICTION_RATIO \x3d (MAX_ATTEMPTS - 2) / (MAX_ATTEMPTS - 1);\n\n/**\n * @typedef {{\n *   priority: !Priority,\n *   lastAccessed: number,\n *   weight: number\n * }}\n */\nvar EvictionValue;\n\n\nclass LruMechanism extends Mechanism {\n  /**\n   * @param {!IterableMechanism} mechanism\n   * @param {string} type (PersistentStorageType)\n   */\n  constructor(mechanism, type) {\n    super();\n    /**\n     * The underlying storage mechanism.\n     * @private @const {!IterableMechanism}\n     */\n    this.mechanism_ \x3d mechanism;\n\n    /**\n     * The storage type that this mechanism accesses.\n     * @private\n     */\n    this.type_ \x3d type;\n\n    /**\n     * A number greater than or equal to the maximum weight we can store in the\n     * underlying storage before throwing a QUOTA_EXCEEDED error.\n     * Package visible for testing purposes only.\n     * @package {number|undefined}\n     */\n    this.maxWeight;\n\n    /**\n     * The current weight currently being stored by the LruMechanism\n     * @package {number}\n     */\n    this.totalWeight \x3d 0;\n\n    /**\n     * The weighted cache manager to handle evictions and priorities\n     * @private @const {!Object\x3cstring, !EvictionValue\x3e}\n     */\n    this.evictionMap_ \x3d {};\n\n    /**\n     * Whether or not we have loaded in all the keys that may be in storage\n     * already that belong to us but that we don\x27t know about.\n     * @private {boolean}\n     */\n    this.initializedKeys_ \x3d false;\n  }\n\n  /**\n   * Weigh function to weigh the key and value.  Currently this just gets the\n   * length of the strings and adds them togehter.\n   * @param {string} key\n   * @param {string} value\n   * @return {number} A number representing how much memory this entry takes up\n   *     in WebStorage.\n   */\n  static weigh(key, value) {\n    return key.length + value.length;\n  }\n\n  /** @override */\n  get(key, noSideEffects \x3d false) {\n    const cacheValueString \x3d this.mechanism_.get(key);\n    if (goog.isNull(cacheValueString)) {\n      return null;\n    }\n    const cacheValue \x3d WrappedValue.deserialize(cacheValueString);\n    // Cache value might deserialize to null if the value doesn\x27t belong to us\n    // or the metadata is malformed.\n    if (goog.isNull(cacheValue)) {\n      return null;\n    }\n    if (!goog.isDef(this.evictionMap_[key])) {\n      const weight \x3d LruMechanism.weigh(key, cacheValueString);\n      const evictionValue \x3d {\n        priority: cacheValue.metadata.priority,\n        lastAccessed: asserts.assertNumber(cacheValue.metadata.lastAccessed),\n        weight: weight\n      };\n      this.evictionMap_[key] \x3d evictionValue;\n      // If we don\x27t have this value already in storage, then we definitely\n      // need to add it to the total weight and the max wieght, if it exists\n      // yet.\n      this.totalWeight +\x3d weight;\n      if (goog.isDef(this.maxWeight)) {\n        this.maxWeight +\x3d weight;\n      }\n    }\n    return cacheValue;\n  }\n\n  /** @override */\n  has(key) {\n    return this.mechanism_.get(key) !\x3d\x3d null;\n  }\n\n  /** @override */\n  remove(key) {\n    const cacheValueString \x3d this.mechanism_.get(key);\n    if (goog.isNull(cacheValueString)) {\n      return;\n    }\n    if (key in this.evictionMap_) {\n      delete this.evictionMap_[key];\n      this.totalWeight -\x3d LruMechanism.weigh(key, cacheValueString);\n    }\n    this.mechanism_.remove(key);\n  }\n\n  /** @override */\n  reset() {\n    this.maxWeight \x3d undefined;\n    this.totalWeight \x3d 0;\n    for (const key of Object.keys(this.evictionMap_)) {\n      delete this.evictionMap_[key];\n    }\n  }\n\n  /** @override */\n  set(key, value) {\n    // Remove the old weight if we\x27re doing an update.\n    if (key in this.evictionMap_) {\n      this.remove(key);\n    }\n    asserts.assert(goog.isDef(value.metadata.lastAccessed));\n    this.setInternal_(\n        key, value.metadata.priority, value.metadata.lastAccessed,\n        value.serialize());\n  }\n\n  /**\n   * Try to write to storage. If the write fails (exceeds quota), then we will\n   * set the LRU max weight and evict some values, and try the write again. If\n   * the write retry fails again, then we will throw an error. Also, if the\n   * weight of the key + value exceeds LRU max weight, then we throw an error.\n   * @param {string} key\n   * @param {!Priority} priority\n   * @param {number} lastAccessed\n   * @param {string} serializedValue\n   * @param {number\x3d} maybeWeight May be set if the weight has already been\n   *     calculated.\n   * @param {number\x3d} attempt What number attempt this is.\n   * @private\n   */\n  setInternal_(\n      key, priority, lastAccessed, serializedValue, maybeWeight \x3d undefined,\n      attempt \x3d 0) {\n    const weight \x3d maybeWeight || LruMechanism.weigh(key, serializedValue);\n    if (goog.isDef(this.maxWeight) \x26\x26 attempt \x3d\x3d 0 \x26\x26\n        weight \x3e\x3d this.maxWeight) {\n      throw error.OVERSIZED_OBJECT;\n    }\n    try {\n      this.mechanism_.set(key, serializedValue);\n    } catch (e) {\n      if (e \x3d\x3d ErrorCode.QUOTA_EXCEEDED \x26\x26 attempt \x3c MAX_ATTEMPTS) {\n        this.maybeInitializeFromStorage_();\n        // The totalWeight is the current size of items we have stored in our\n        // cache. The weight is the size of the item we are trying to add, which\n        // overflowed the cache. So we know the cache can hold somewhere between\n        // the totalWeight and the totalWeight + weight but we aren\x27t sure\n        // exactly how much. Because other users may be writing to this same\n        // cache, there\x27s no way for us to deterministically keep track of the\n        // absolute max weight. If we set evict down to the lower bound\n        // (totalWeight) then we are possibly evicting too many\n        // things. If we evict down to the upper bound (totalWeight + weight)\n        // then we evict only one thing per attempt. So instead, we use the\n        // eviction ratio which will evict a number of items with sizes greater\n        // than or equal to 1 / (ATTEMPTS - 1), so that we can incrementally\n        // find a closer estimate of the maxWeight. The cost of this is a few\n        // extra writes to the cache, but it allows us to be more agnostic\n        // of the maxWeight.\n        this.maxWeight \x3d this.totalWeight + Math.ceil(EVICTION_RATIO * weight);\n        this.maybeEvict_(weight, priority, key.split(\x27;;\x27)[0]);\n        this.setInternal_(\n            key, priority, lastAccessed, serializedValue, weight, attempt + 1);\n        return;\n      } else {\n        throw e;\n      }\n    }\n    // If we succeeded, add the weight and set the eviction value.\n    this.totalWeight +\x3d weight;\n    if (goog.isDef(this.maxWeight)) {\n      this.maxWeight \x3d Math.max(this.maxWeight, this.totalWeight);\n    }\n    this.evictionMap_[key] \x3d {\n      priority: priority,\n      lastAccessed: lastAccessed,\n      weight: weight\n    };\n  }\n\n  /**\n   * Evict from the evictionMap until we have evicted our total weight below\n   * our max weight. If the max weight is already greater than the total weight,\n   * this function will do nothing.\n   * @param {number} weight\n   * @param {!Priority} priority\n   * @param {string} namespace\n   * @private\n   */\n  maybeEvict_(weight, priority, namespace) {\n    asserts.assert(this.initializedKeys_);\n    if (this.maxWeight \x3e this.totalWeight + weight) {\n      return;\n    }\n    const keys \x3d this.getKeysSortedForEviction_(priority);\n    if (keys.length \x26\x26 evictionListener) {\n      evictionListener(this.type_, weight, priority, namespace);\n    }\n    for (const key of keys) {\n      this.remove(key);\n      if (this.maxWeight \x3e this.totalWeight + weight) {\n        break;\n      }\n    }\n  }\n\n  /**\n   * @param {!Priority} maxPriority The highest priority to consider evicting.\n   * @return {!Array\x3cstring\x3e} The keys sorted first by priority and second by\n   *     last accessed.\n   * @private\n   */\n  getKeysSortedForEviction_(maxPriority) {\n    let keys \x3d Array.from(Object.keys(this.evictionMap_));\n    keys \x3d keys.filter(key \x3d\x3e this.evictionMap_[key].priority \x3e\x3d maxPriority);\n    // It\x27s possible that everything in the cache is higher priority\n    // than this item, and so we shounldn\x27t evict things that are higher\n    // priority in order to store this item, and so we throw an error\n    // to alert the user that their thing wasn\x27t stored in cache.\n    if (keys.length \x3d\x3d 0) {\n      throw error.EVICTION_ERROR;\n    }\n    keys.sort((lhs, rhs) \x3d\x3e {\n      const lhsEvictionValue \x3d this.evictionMap_[lhs];\n      const rhsEvictionValue \x3d this.evictionMap_[rhs];\n      if (lhsEvictionValue.priority \x3d\x3d rhsEvictionValue.priority) {\n        return lhsEvictionValue.lastAccessed - rhsEvictionValue.lastAccessed;\n      }\n      return lhsEvictionValue.priority \x3c rhsEvictionValue.priority ? 1 : -1;\n    });\n    return keys;\n  }\n\n  /**\n   * Check to see if we have been initialized from the underlying storage layer,\n   * and if not, load everything in to the eviction map so that our totalWeight\n   * is accurate as to what the cache can actually hold.\n   * @private\n   */\n  maybeInitializeFromStorage_() {\n    if (!this.initializedKeys_) {\n      iter.forEach(this, (key) \x3d\x3e {\n        if (!(key in this.evictionMap_)) {\n          // Get the key to load it into our eviction map.\n          this.get(key);\n        }\n      });\n      this.initializedKeys_ \x3d true;\n    }\n  }\n\n  /**\n   * @param {?function(string, number, !Priority, string)} listener\n   */\n  static setEvictionListener(listener) {\n    evictionListener \x3d listener;\n  }\n\n  /** @override */\n  __iterator__() {\n    return this.mechanism_.__iterator__(true /* keys */);\n  }\n}\n\n/**\n * The function to be called if an eviction takes place.\n * @type {?function(string, number, !Priority, string)}\n */\nlet evictionListener \x3d null;\n\nexports \x3d LruMechanism;\n\n//# sourceURL\x3dhttps://qs/javascript/apps/storagecache/mechanism/lru_mechanism.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/storagecache/mechanism/memory_mechanism.js";
goog.loadModule("goog.module(\x27storagecache.mechanism.MemoryMechanism\x27);\n\nconst Mechanism \x3d goog.require(\x27storagecache.mechanism.Mechanism\x27);\nconst Priority \x3d goog.require(\x27storagecache.Priority\x27);\nconst WrappedValue \x3d goog.require(\x27storagecache.mechanism.WrappedValue\x27);\nconst iter \x3d goog.require(\x27goog.iter\x27);\n\n/**\n * Memory mechanism that keeps a backup of the values in memory.\n */\nclass MemoryMechanism extends Mechanism {\n  /**\n   * @param {?Mechanism\x3d} mechanism\n   */\n  constructor(mechanism \x3d null) {\n    super();\n\n    /** @private @const */\n    this.mechanism_ \x3d mechanism;\n\n    /**\n     * The in memory storage.\n     * @private {!Object\x3cstring, !WrappedValue\x3e}\n     */\n    this.inMemoryStorage_ \x3d {};\n  }\n\n  /** @override */\n  get(key, noSideEffects \x3d false) {\n    let value \x3d this.inMemoryStorage_[key] || null;\n    // If the value doesn\x27t exist in memory, get it from storage.\n    if (goog.isNull(value)) {\n      if (this.mechanism_) {\n        value \x3d this.mechanism_.get(key, noSideEffects);\n        if (!goog.isNull(value)) {\n          // If the value exists in storage, sync it in memory.\n          this.inMemoryStorage_[key] \x3d value;\n        }\n      }\n    }\n    return value;\n  }\n\n  /** @override */\n  has(key) {\n    return this.inMemoryStorage_.hasOwnProperty(key) ||\n        (this.mechanism_ !\x3d null \x26\x26 this.mechanism_.has(key));\n  }\n\n  /** @override */\n  set(key, value) {\n    this.inMemoryStorage_[key] \x3d value;\n    if (value.metadata.priority \x3c Priority.MEMORY_ONLY \x26\x26 this.mechanism_) {\n      this.mechanism_.set(key, value);\n    }\n  }\n\n  /** @override */\n  remove(key) {\n    let value \x3d this.inMemoryStorage_[key];\n    if (this.mechanism_) {\n      if ((value \x26\x26 value.metadata.priority \x3c Priority.MEMORY_ONLY) || !value) {\n        this.mechanism_.remove(key);\n      }\n    }\n    delete this.inMemoryStorage_[key];\n  }\n\n  /** @override */\n  clear() {\n    if (this.mechanism_) this.mechanism_.clear();\n    this.inMemoryStorage_ \x3d {};\n  }\n\n  /** @override */\n  __iterator__() {\n    const keys \x3d Object.keys(this.inMemoryStorage_);\n    const inMemoryIter \x3d iter.toIterator(keys);\n    if (!this.mechanism_) {\n      return inMemoryIter;\n    }\n    const mechanismIter \x3d\n        iter.filter(this.mechanism_, (key) \x3d\x3e !(key in this.inMemoryStorage_));\n    return iter.chain(inMemoryIter, mechanismIter);\n  }\n}\n\nexports \x3d MemoryMechanism;\n\n//# sourceURL\x3dhttps://qs/javascript/apps/storagecache/mechanism/memory_mechanism.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/storagecache/mechanism/namespace_mechanism.js";
goog.loadModule("goog.module(\x27storagecache.mechanism.NamespaceMechanism\x27);\n\nconst ChainedMechanism \x3d goog.require(\x27storagecache.mechanism.ChainedMechanism\x27);\nconst Mechanism \x3d goog.require(\x27storagecache.mechanism.Mechanism\x27);\nconst constants \x3d goog.require(\x27storagecache.mechanism.constants\x27);\nconst functions \x3d goog.require(\x27goog.functions\x27);\nconst iter \x3d goog.require(\x27goog.iter\x27);\n\n/**\n * Wraps a Mechanism and adds namespaces to keys for get, set,\n * remove and iteration.\n */\nclass NamespaceMechanism extends ChainedMechanism {\n  /**\n   * Wraps another mechanism and appends a namespace to all key accesses.\n   * @param {string} namespace\n   * @param {!Mechanism} mechanism\n   */\n  constructor(namespace, mechanism) {\n    super(mechanism);\n\n    /**\n     * The namespace to append to strings.\n     * The namespace separator character ;; is deliberately different than the\n     * goog.storage prefixedMechanism separator which is ::. This prevents\n     * js skew issues when switching over from goog.storage, or if both are\n     * running on the page.\n     * @private @const {string}\n     */\n    this.namespace_ \x3d namespace + constants.keySeparator;\n  }\n\n  /** @override */\n  get(key, noSideEffects \x3d false) {\n    return super.get(this.namespace_ + key, noSideEffects);\n  }\n\n  /** @override */\n  has(key) {\n    return super.has(this.namespace_ + key);\n  }\n\n  /** @override */\n  set(key, value) {\n    super.set(this.namespace_ + key, value);\n  }\n\n  /** @override */\n  remove(key) {\n    super.remove(this.namespace_ + key);\n  }\n\n  /** @override */\n  __iterator__() {\n    const namespaceLength \x3d this.namespace_.length;\n    const suffixedIter \x3d iter.map(this.mechanism, key \x3d\x3e {\n      if (key.substr(0, namespaceLength) \x3d\x3d this.namespace_) {\n        return key.substr(namespaceLength);\n      }\n      return undefined;\n    });\n    // Removed the undefined values from the mapping.\n    return iter.filter(suffixedIter, functions.identity);\n  }\n\n  /** @override */\n  clear() {\n    Mechanism.clear(this);\n  }\n\n  /**\n   * ChainedMechanism\x27s reset will also reset lower down mechanisms that should\n   * only be reset if all namespaces have been cleared, so we override.\n   * @override\n   */\n  reset() {}\n\n  /**\n   * Extract namespace from key using \x27;;\x27 buffer\n   * @param {string} key\n   * @return {?string} namespace\n   */\n  static extractNamespaceFromKey(key) {\n    const bufferIndex \x3d key.indexOf(\x27;;\x27);\n    if (bufferIndex \x3c\x3d 0) {\n      return null;\n    } else {\n      return key.substr(0, bufferIndex);\n    }\n  }\n}\n\nexports \x3d NamespaceMechanism;\n\n//# sourceURL\x3dhttps://qs/javascript/apps/storagecache/mechanism/namespace_mechanism.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/storagecache/persistent_storage_type.js";
goog.loadModule("/**\n * @fileoverview Type of storage passed to Factory for creation of Cache.\n */\ngoog.module(\x27storagecache.PersistentStorageType\x27);\ngoog.module.declareLegacyNamespace();\n\n/**\n * The supported storage types.\n * @enum {string}\n */\nconst PersistentStorageType \x3d {\n  LOCAL: \x27l\x27,\n  SESSION: \x27s\x27,\n  NONE: \x27n\x27,\n};\n\nexports \x3d PersistentStorageType;\n\n//# sourceURL\x3dhttps://qs/javascript/apps/storagecache/persistent_storage_type.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/storagecache/storage_entry.js";
goog.loadModule("goog.module(\x27storagecache.StorageEntry\x27);\n\nconst Jsonable \x3d goog.require(\x27search.Jsonable\x27);\nconst Priority \x3d goog.require(\x27storagecache.Priority\x27);\n\n/**\n * Typedef for objects that are stored in a Cache. Returned by cache.entries().\n * @typedef {{\n *   key: string,\n *   value: !Jsonable,\n *   priority: !Priority,\n *   lastAccessed: number\n * }}\n */\nvar StorageEntry;\n\nexports \x3d StorageEntry;\n\n//# sourceURL\x3dhttps://qs/javascript/apps/storagecache/storage_entry.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/storage/mechanism/html5localstorage.js";
eval("// Copyright 2011 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Provides data persistence using HTML5 local storage\n * mechanism. Local storage must be available under window.localStorage,\n * see: http://www.w3.org/TR/webstorage/#the-localstorage-attribute.\n *\n * @author azzie@google.com (Marcin Marszalek)\n * @author czacharias@google.com (Chris Zacharias)\n */\n\ngoog.provide(\x27goog.storage.mechanism.HTML5LocalStorage\x27);\n\ngoog.require(\x27goog.storage.mechanism.HTML5WebStorage\x27);\n\n\n\n/**\n * Provides a storage mechanism that uses HTML5 local storage.\n *\n * @constructor\n * @struct\n * @extends {goog.storage.mechanism.HTML5WebStorage}\n */\ngoog.storage.mechanism.HTML5LocalStorage \x3d function() {\n  var storage \x3d null;\n\n  try {\n    // May throw an exception in cases where the local storage object\n    // is visible but access to it is disabled.\n    storage \x3d window.localStorage || null;\n  } catch (e) {\n  }\n  goog.storage.mechanism.HTML5LocalStorage.base(this, \x27constructor\x27, storage);\n};\ngoog.inherits(\n    goog.storage.mechanism.HTML5LocalStorage,\n    goog.storage.mechanism.HTML5WebStorage);\n\n//# sourceURL\x3dhttps://qs/javascript/closure/storage/mechanism/html5localstorage.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/storagecache/cache.js";
goog.loadModule("goog.module(\x27storagecache.Cache\x27);\n\nconst ErrorMechanism \x3d goog.require(\x27storagecache.mechanism.ErrorMechanism\x27);\nconst HTML5LocalStorage \x3d goog.require(\x27goog.storage.mechanism.HTML5LocalStorage\x27);\nconst HTML5SessionStorage \x3d goog.require(\x27goog.storage.mechanism.HTML5SessionStorage\x27);\nconst HTML5WebStorage \x3d goog.require(\x27goog.storage.mechanism.HTML5WebStorage\x27);\nconst Iterator \x3d goog.require(\x27goog.iter.Iterator\x27);\nconst Jsonable \x3d goog.require(\x27search.Jsonable\x27);\nconst LastAccessedMechanism \x3d goog.require(\x27storagecache.mechanism.LastAccessedMechanism\x27);\nconst LruMechanism \x3d goog.require(\x27storagecache.mechanism.LruMechanism\x27);\nconst Mechanism \x3d goog.require(\x27storagecache.mechanism.Mechanism\x27);\nconst MemoryMechanism \x3d goog.require(\x27storagecache.mechanism.MemoryMechanism\x27);\nconst NamespaceMechanism \x3d goog.require(\x27storagecache.mechanism.NamespaceMechanism\x27);\nconst PersistentStorageType \x3d goog.require(\x27storagecache.PersistentStorageType\x27);\nconst Priority \x3d goog.require(\x27storagecache.Priority\x27);\nconst StorageEntry \x3d goog.require(\x27storagecache.StorageEntry\x27);\nconst WrappedValue \x3d goog.require(\x27storagecache.mechanism.WrappedValue\x27);\nconst asserts \x3d goog.require(\x27goog.asserts\x27);\nconst browser \x3d goog.require(\x27goog.labs.userAgent.browser\x27);\nconst cookies \x3d goog.require(\x27gws.cookies\x27);\nconst googObject \x3d goog.require(\x27goog.object\x27);\nconst iter \x3d goog.require(\x27goog.iter\x27);\nconst {ID_KEY, CACHE_INTERNAL_NAMESPACE} \x3d goog.require(\x27storagecache.mechanism.constants\x27);\n\n/**\n * @typedef {{\n *   errorHandler: (\n *     function((!Error|string), string, !Object\x3cstring, *\x3e)\n *     |undefined),\n *   noInMemoryCache: (boolean|undefined)\n * }}\n */\nlet CacheOptions;\n\nconst isDef \x3d goog.isDef;\nconst isNull \x3d goog.isNull;\n\n/**\n * @enum {number}\n */\nconst IsqArgs \x3d {\n  STORAGE_TYPE: 0,\n  NAMESPACE: 1,\n  KEY: 2,\n  VALUE: 3,\n  PRIORITY: 4\n};\n\n/**\n * Cache wrapper for writing to storage.  This is used as an\n * interface between users and HTML5 web storage (session or local).  It is\n * meant to be used as a cache, where things will be stored optimistically in\n * the chosen storage with some evicition policy optimistically, and also\n * backed up to memory so that even if things are evicted they are not\n * completely deleted. See the g3doc for more details.\n */\nclass Cache {\n  /**\n   * Constructor for cache that takes a type and a namespace name.\n   * @param {!PersistentStorageType} type\n   * @param {string} namespace A short, unique namespace for this feature.\n   * @param {!CacheOptions\x3d} options\n   */\n  constructor(type, namespace, {\n    errorHandler \x3d Cache.defaultErrorHandler(),\n    noInMemoryCache \x3d false,\n  } \x3d {}) {\n    asserts.assert(namespace !\x3d CACHE_INTERNAL_NAMESPACE);\n\n    /**\n     * Returns an integer that is greater than the last time getNextId\n     * was called, scoped to the storage type that was provided. This value will\n     * also be unique amongst other Cache instances of the same storage type.\n     *\n     * This method exists because users of the Cache often need to have an\n     * incrementing counter that is scoped to the storage type. Because any\n     * values can potentially be removed from the Cache, it\x27s impossible for\n     * users to safely implement a counter on top of the Cache.\n     * @const {function():number}\n     */\n    this.getNextId \x3d getNextIdFunction(type, errorHandler);\n\n    /** @const @private {!LastAccessedMechanism} */\n    this.mechanism_ \x3d createLastAccessedMechanism(\n        this.getNextId,\n        createBaseMechanism(namespace, type, errorHandler, noInMemoryCache));\n\n    this.flushInlineCacheQueue_(type, namespace);\n  }\n\n  /**\n   * Checks whether the storage is available to be used.  Even if the storage\n   * is unavailable, the Cache will fallback to in memory.\n   * @param {!PersistentStorageType} type\n   * @return {boolean} Whether the storage is available\n   */\n  static isAvailable(type) {\n    if (type \x3d\x3d PersistentStorageType.NONE) {\n      return true;\n    }\n    const storage \x3d Cache.getOrCreateSharedStorage(type);\n    // Checks whether we should disable localStorage access in IE (when\n    // cookies are disabled) to mimic behavior in other browsers.\n    return !(storage instanceof HTML5LocalStorage \x26\x26 browser.isIE() \x26\x26\n             !cookies.areCookiesEnabled()) \x26\x26\n        storage.isAvailable();\n  }\n\n  /**\n   * @param {string} key\n   * @param {!Jsonable} value\n   * @param {!Priority\x3d} priority Controls the priority for removal when the\n   *     cache needs to free up space. An enum of values VERY_HIGH, HIGH,\n   *     MEDIUM, and LOW. Use of the VERY_HIGH value is blocked by a\n   *     whitelisted conformance test.\n   */\n  set(key, value, priority \x3d Priority.MEDIUM) {\n    this.mechanism_.set(key, new WrappedValue({priority}, value));\n  }\n\n  /**\n   * @param {string} key\n   * @return {?Jsonable}\n   */\n  get(key) {\n    const wrappedValue \x3d this.mechanism_.get(key);\n    return wrappedValue ? wrappedValue.getValue() : null;\n  }\n\n  /**\n   * @param {string} key\n   * @return {boolean}\n   */\n  has(key) {\n    return this.mechanism_.has(key);\n  }\n\n  /**\n   * Iterates all values that we have both in-memory \x26 WebStorage.\n   * This is necessary for allowing developers to free up JavaScript memory.\n   *\n   * Unlike calls to get \x26 set, this will-not update the LRU\u2019s timestamp.\n   * @return {!Iterator\x3c!StorageEntry\x3e}\n   */\n  __iterator__() {\n    const keyToStorageEntry \x3d /** @type {function(string):?StorageEntry} */\n        (key \x3d\x3e {\n          const value \x3d this.mechanism_.get(key, true /* noSideEffects */);\n          if (!value) return null;\n          return {\n            key: key,\n            value: value.getValue(),\n            priority: value.metadata.priority,\n            lastAccessed: /** @type {number} */ (value.metadata.lastAccessed),\n          };\n        });\n    return /** @type {!Iterator\x3c!StorageEntry\x3e} */ (iter.filter(\n        iter.map(this.mechanism_, keyToStorageEntry), value \x3d\x3e Boolean(value)));\n  }\n\n  /**\n   * @param {string} key\n   */\n  remove(key) {\n    this.mechanism_.remove(key);\n  }\n\n  /**\n   * Completely empty this Cache.\n   */\n  clear() {\n    this.mechanism_.clear();\n  }\n\n  /**\n   * inline_cache.js saves any writes to google.isq. This is for 2 reasons:\n   * 1. inline_cache.js does not support cache flushing, so if the write fails,\n   *    retry the write here in the real Cache code.\n   * 2. In case the storage type is unavailable or too full for our entry,\n   *    uphold the in-memory gaurantee of the cache by saving it here.\n   * @param {!PersistentStorageType} type\n   * @param {string} namespace A short, unique namespace for this feature.\n   * @private\n   */\n  flushInlineCacheQueue_(type, namespace) {\n    if (typeof google \x3d\x3d \x27undefined\x27 || !google || !google.isq) return;\n    const newQueue \x3d [];\n    for (const item of google.isq) {\n      const args \x3d item[1];\n      if (args[IsqArgs.STORAGE_TYPE] \x3d\x3d type \x26\x26\n          args[IsqArgs.NAMESPACE] \x3d\x3d namespace) {\n        // item matches this Cache, ensure the entry is svaed in-memory and\n        // write to storage if the original write failed.\n        this.setInlineQueueEntry_(item);\n      } else {\n        newQueue.push(item);\n      }\n    }\n    google.isq \x3d newQueue;\n  }\n\n  /**\n   * @param {!Array\x3cboolean|!IArrayLike\x3c!Jsonable\x3e|?number\x3e} item A google.isq\n   *     entry.\n   * @private\n   */\n  setInlineQueueEntry_(item) {\n    const args \x3d /** @type {!IArrayLike\x3c!Jsonable\x3e} */ (item[1]);\n    asserts.assert(goog.isArrayLike(args));\n\n    const priority \x3d\n        /** @type {?Priority} */ (args[IsqArgs.PRIORITY]) || Priority.MEDIUM;\n    const key \x3d asserts.assertString(args[IsqArgs.KEY]);\n    const value \x3d /** @type {!Jsonable} */ (args[IsqArgs.VALUE]);\n\n    const setSucceeded \x3d asserts.assertBoolean(item[0]);\n    if (setSucceeded) {\n      // inline_cache.js was able to write item to storage. Get it, so that it\n      // loads into any memory local caches we have.\n      this.mechanism_.get(key);\n    } else {\n      // The write in inline_cache.js must have failed. Retry now that\n      // cache-eviction is available.\n      this.set(key, value, priority);\n    }\n  }\n\n  /**\n   * Clears all of the shared mechanisms and storages.\n   * Package visibility for testing.\n   * @package\n   */\n  static clearAll() {\n    googObject.forEach(sharedStorages, storage \x3d\x3e {\n      storage.clear();\n    });\n    googObject.forEach(sharedMechanisms, mechanism \x3d\x3e {\n      mechanism.clear();\n    });\n    googObject.forEach(sharedIdMechanisms, mechanism \x3d\x3e {\n      mechanism.clear();\n    });\n    googObject.clear(sharedStorages);\n    googObject.clear(sharedMechanisms);\n    googObject.clear(sharedIdMechanisms);\n  }\n\n  /**\n   * Gets or creates the storage mechanism for type.\n   * Package visibility for testing.\n   * @param {!PersistentStorageType} type Either SESSION or LOCAL. NONE is not\n   *     a valid type.\n   * @return {!HTML5WebStorage}\n   * @package\n   */\n  static getOrCreateSharedStorage(type) {\n    asserts.assert(type !\x3d PersistentStorageType.NONE);\n    if (type in sharedStorages) {\n      return sharedStorages[type];\n    }\n    let storage;\n    if (type \x3d\x3d PersistentStorageType.SESSION) {\n      storage \x3d new HTML5SessionStorage();\n    } else {\n      storage \x3d new HTML5LocalStorage();\n    }\n    return (sharedStorages[type] \x3d storage);\n  }\n\n  /**\n   * Gets shared mechanisms, storages, and mechanisms that control\n   * nextId.\n   * Package visible for testing.\n   * @package\n   * @return {{\n   *   sharedMechanisms: !Object\x3cstring, !Mechanism\x3e,\n   *   sharedStorages: !Object\x3c!PersistentStorageType, !HTML5WebStorage\x3e,\n   *   sharedIdMechanisms: !Object\x3c!PersistentStorageType, !Mechanism\x3e\n   * }}\n   */\n  static getSharedStorages() {\n    return {\n      sharedMechanisms,\n      sharedStorages,\n      sharedIdMechanisms,\n    };\n  }\n\n  /**\n   * Returns the last accessed key used by the internals to store the last\n   * accessed incremented counter.\n   * Package visibility for testing.\n   * @return {string}\n   * @package\n   */\n  static getLastAccessedKey() {\n    return ID_KEY;\n  }\n\n  /**\n   * @return {function((!Error|string), string, !Object\x3cstring, *\x3e)}\n   */\n  static defaultErrorHandler() {\n    // The default swallows the errors.\n    return defaultErrorHandler;\n  }\n\n  /**\n   * @param {function((!Error|string), string, !Object\x3cstring, *\x3e)} errorHandler\n   */\n  static setDefaultErrorHandler(errorHandler) {\n    defaultErrorHandler \x3d errorHandler;\n  }\n\n  /**\n   * Finds all of the namespaces in the cache.\n   * Always returns Internal namespaces such as \x27_c\x27.\n   * @param {!PersistentStorageType} type\n   * @return {!Map\x3cstring, number\x3e} map\n   */\n  static getUsageInformation(type) {\n    // For each namespace, note number of occurrences and total size of values\n    const usageByKey \x3d new Map();\n    const storage \x3d Cache.getOrCreateSharedStorage(type);\n    const storageIterator \x3d storage.__iterator__(true /** opt_keys */);\n    iter.forEach(storageIterator, key \x3d\x3e {\n      let value \x3d asserts.assertString(storage.get(key));\n      const namespace \x3d NamespaceMechanism.extractNamespaceFromKey(key);\n      const currentWeight \x3d LruMechanism.weigh(key, value);\n      if (!namespace) return;\n      if (!usageByKey.get(namespace)) {\n        usageByKey.set(namespace, 0);\n      }\n      usageByKey.set(namespace, usageByKey.get(namespace) + currentWeight);\n    });\n    return usageByKey;\n  }\n\n  /**\n   * Forwards the given function to LruMechanism\x27s\n   * setEvictionListener function.\n   * @param {?function(string, number, !Priority, string)} listener\n   */\n  static setEvictionListener(listener) {\n    LruMechanism.setEvictionListener(listener);\n  }\n}\n\n/**\n * @typedef {{hits: number, weight: number}}\n */\nCache.UsageInfo;\n\n/** @type {!Object\x3cstring, !Mechanism\x3e} */\nconst sharedMechanisms \x3d {};\n/** @type {!Object\x3c!PersistentStorageType, !HTML5WebStorage\x3e} */\nconst sharedStorages \x3d {};\n/** @type {!Object\x3c!PersistentStorageType, !Mechanism\x3e} */\nconst sharedIdMechanisms \x3d {};\n\n/**\n * Handles exceptions thrown when interacting with a storage instance.\n * @param {!Error|string} error The thrown exception.\n * @param {string} operation The operation that triggered the exception.\n * @param {!Object\x3cstring, *\x3e} args\n */\nlet defaultErrorHandler \x3d goog.nullFunction;\n\n/**\n * Handles exceptions thrown when interacting with a storage instance.\n * @param {!Error|string} error The thrown exception.\n * @param {string} operation The operation that triggered the exception.\n * @param {!Object\x3cstring, *\x3e} args\n */\nlet nextIdDelegateErrorHandler \x3d goog.nullFunction;\n\n/**\n * Handles exceptions thrown when interacting with a storage instance.\n * @param {!Error|string} error The thrown exception.\n * @param {string} operation The operation that triggered the exception.\n * @param {!Object\x3cstring, *\x3e} args\n */\nfunction nextIdErrorHandler(error, operation, args) {\n  nextIdDelegateErrorHandler(error, operation, args);\n}\n\n/**\n * Increments a global counter stored in persistent storage and returns it.\n * @param {!PersistentStorageType} type\n * @param {function((!Error|string), string, !Object\x3cstring, *\x3e)}\n *     errorHandler\n * @return {function():number}\n */\nfunction getNextIdFunction(type, errorHandler) {\n  let nextIdMechanism \x3d getOrCreateSharedIdMechanism(type);\n  const setId \x3d id \x3d\x3e {\n    nextIdMechanism.set(\n        ID_KEY,\n        new WrappedValue(\n            {\n              priority: Priority.VERY_HIGH,\n              // Max safe integer so that it parses correctly, and doesn\x27t get\n              // evicted. Because we are bootstrapping, there\x27s no mechanism\n              // to set this like most entries into storage.\n              lastAccessed: Number.MAX_SAFE_INTEGER,\n            },\n            id));\n  };\n  const getId \x3d () \x3d\x3e {\n    const wrappedIdValue \x3d nextIdMechanism.get(ID_KEY);\n    if (isNull(wrappedIdValue)) {\n      setId(0);\n    }\n    let idValue \x3d 0;\n    // TODO(twilkinson) We should log if we ever get null. In testing it\x27s\n    // alright to get null, and we should degrade gracefully if external\n    // users delete our stored id.\n    if (wrappedIdValue !\x3d null) {\n      idValue \x3d asserts.assertNumber(wrappedIdValue.getValue());\n    }\n    return asserts.assertNumber(idValue);\n  };\n  return () \x3d\x3e {\n    nextIdDelegateErrorHandler \x3d errorHandler;\n    const id \x3d getId();\n    setId(id + 1);\n    nextIdDelegateErrorHandler \x3d goog.nullFunction;\n    return id;\n  };\n}\n\n/**\n * Gets or creates a shared mechanism for nextId storing.\n * @param {!PersistentStorageType} type\n * @return {!Mechanism}\n */\nfunction getOrCreateSharedIdMechanism(type) {\n  if (!(type in sharedIdMechanisms)) {\n    // TODO(twilkinson): Reconsider this shared id mechanism, since it\x27ll\n    // have issues for local storage when two windows are writing at the same\n    // time.\n    sharedIdMechanisms[type] \x3d createBaseMechanism(\n        CACHE_INTERNAL_NAMESPACE, type, nextIdErrorHandler, false);\n  }\n  return sharedIdMechanisms[type];\n}\n\n/**\n * Creates a base mechanism.\n * @param {string} namespace\n * @param {!PersistentStorageType} type\n * @param {function((!Error|string), string, !Object\x3cstring, *\x3e)}\n *     errorHandler\n * @param {boolean} noInMemoryCache\n * @return {!Mechanism}\n */\nfunction createBaseMechanism(namespace, type, errorHandler, noInMemoryCache) {\n  if (!Cache.isAvailable(type)) {\n    type \x3d PersistentStorageType.NONE;\n  }\n\n  let mechanism;\n  if (type \x3d\x3d PersistentStorageType.NONE) {\n    // We don\x27t need to bother with a NamespaceMechanism when there is no\n    // persistent storage.\n    mechanism \x3d new MemoryMechanism();\n  } else {\n    mechanism \x3d getOrCreatePersistentMechanism(type);\n    mechanism \x3d new ErrorMechanism(errorHandler, mechanism);\n    mechanism \x3d new NamespaceMechanism(namespace, mechanism);\n    if (!noInMemoryCache) {\n      mechanism \x3d new MemoryMechanism(mechanism);\n    }\n  }\n  return mechanism;\n}\n\n/**\n * @param {function():number} getNextId\n * @param {!Mechanism} inner\n * @return {!LastAccessedMechanism} A LastAccessedMechanism that wraps inner.\n */\nfunction createLastAccessedMechanism(getNextId, inner) {\n  return new LastAccessedMechanism(getNextId, inner);\n}\n\n/**\n * In order to efficiently handle LRU caching, there can only be 1 copy of each\n * persistent storage mechanism.\n * @param {!PersistentStorageType} type\n * @return {!Mechanism}\n */\nfunction getOrCreatePersistentMechanism(type) {\n  asserts.assert(type !\x3d PersistentStorageType.NONE);\n  if (type in sharedMechanisms) {\n    return sharedMechanisms[type];\n  }\n  const mechanism \x3d\n      new LruMechanism(Cache.getOrCreateSharedStorage(type), type);\n  return (sharedMechanisms[type] \x3d mechanism);\n}\n\n/** @package @const */\nCache.testing \x3d {\n  /**\n   * @param {!Cache} cache\n   * @param {string} key\n   * @return {!WrappedValue|undefined}\n   */\n  getWrapped(cache, key) {\n    return cache.mechanism_.get(key) || undefined;\n  },\n};\n\nexports \x3d Cache;\n\n//# sourceURL\x3dhttps://qs/javascript/apps/storagecache/cache.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/cache/factory.js";
goog.loadModule("/**\n * @fileoverview Cache factory for generating new cache objects and checking\n *   availability\n */\ngoog.module(\x27search.cache.factory\x27);\ngoog.module.declareLegacyNamespace();\n\nconst Cache \x3d goog.require(\x27storagecache.Cache\x27);\nconst MechanismErrorCode \x3d goog.require(\x27goog.storage.mechanism.ErrorCode\x27);\nconst Namespace \x3d goog.require(\x27search.cache.Namespace\x27);\nconst PersistentStorageType \x3d goog.require(\x27storagecache.PersistentStorageType\x27);\nconst Priority \x3d goog.require(\x27storagecache.Priority\x27);\nconst googObject \x3d goog.require(\x27goog.object\x27);\nconst json \x3d goog.require(\x27goog.json\x27);\nconst mechanismError \x3d goog.require(\x27storagecache.mechanism.error\x27);\n\n/**\n * @param {!PersistentStorageType} type SESSION, LOCAL, or NONE\n * @param {!Namespace} namespace A short, unique namespace for this feature.\n * @return {!Cache}\n */\nfunction get(type, namespace) {\n  return getOrCreateCache(type, namespace);\n}\n\n/**\n * @param {!PersistentStorageType} type SESSION, LOCAL or NONE\n * @return {boolean} True if the underlying storage mechanism is\n *     available. Note that create() will always work for the given type,\n *     it just may only be acting as in-memory storage.\n */\nfunction isAvailable(type) {\n  return Cache.isAvailable(type);\n}\n\n/**\n * A map between storage types and their corresponding storage instance sets.\n * @type {!Object\x3c!PersistentStorageType, !Object\x3cstring, !Cache\x3e\x3e}\n */\nlet instances \x3d {};\n\n/**\n * Gets or creates a cache if one does not exist\n * @param {!PersistentStorageType} type The type of storage.\n * @param {!Namespace} namespace The namespace for the cache.\n * @return {!Cache}\n */\nfunction getOrCreateCache(type, namespace) {\n  googObject.setIfUndefined(instances, type, {});\n  const namespaceName \x3d namespace.name;\n  if (instances[type][namespaceName]) {\n    return instances[type][namespaceName];\n  } else {\n    return (instances[type][namespaceName] \x3d new Cache(type, namespaceName, {\n              noInMemoryCache: !!namespace.noInMemoryCache\n            }));\n  }\n}\n\n/**\n * Clears all the caches.  Used for testing.\n * @package\n */\nfunction clearAll() {\n  googObject.forEach(instances, instanceMap \x3d\x3e {\n    googObject.forEach(instanceMap, cache \x3d\x3e {\n      cache.clear();\n    });\n    googObject.clear(instanceMap);\n  });\n  googObject.clear(instances);\n}\n\n/**\n * Handles exceptions thrown when interacting with a storage instance.\n * @param {!Error|string} error The thrown exception.\n * @param {string} operation The operation that triggered the exception.\n * @param {!Object\x3cstring, *\x3e} args\n */\nfunction errorHandler(error, operation, args) {\n  // We don\x27t care about logging exceptions for users with disabled storage\n  // (e.g., Safari Private mode), or storage quota issues.\n  // TODO(twilkinson): implement QUOTA_EXCEEDED logging.\n  // TODO(twilkinson): Implement EvictionError info logging.\n  if (error \x3d\x3d MechanismErrorCode.STORAGE_DISABLED ||\n      error \x3d\x3d MechanismErrorCode.QUOTA_EXCEEDED ||\n      error \x3d\x3d mechanismError.EVICTION_ERROR) {\n    return;\n  }\n\n  // Log the error in jcatcher.\n  let exception \x3d goog.isString(error) ? new Error(error) : error;\n  let data \x3d {};\n  if (args.key) {\n    data[\x27k\x27] \x3d args.key;\n  }\n  if (args.value) {\n    data[\x27v\x27] \x3d args.value;\n  }\n  data[\x27op\x27] \x3d operation;\n  // TODO(twilkinson): Investigate gws.error.log over google.ml\n  google.ml(exception, false, data);\n}\n\nCache.setDefaultErrorHandler(errorHandler);\n\n/**\n * Migrates some keys stored in gws.storage to storagecache.\n *\n * This function should be called whenever a module is updated to use\n * storagecache instead of gws.storage, because it will ensure that older items\n * are deleted and do not remain in localStorage forever, taking up space. This\n * function also attempts to copy those items back to localStorage using\n * storagecache, if those keys are not already present in storagecache. However,\n * it is possible that the items won\x27t actually be copied if there is not enough\n * space for them. This can occur because storagecache stores more metadata per\n * item than gws.storage. However, since storagecache can evict lower priority\n * entries, items will usually be migrated successfully.\n *\n * Please note that this is not a complete solution to migrating to\n * storagecache. In particular, skew can cause this function to produce\n * unexpected results, particularly because this function only migrates keys\n * once, and only from gws.storage to storagecache. After this function is used\n * on a client later updates to keys in gws.storage will not be migrated to\n * storagecache. Furthermore, keys saved in storagecache will not be migrated to\n * gws.storage. Consider the context of each key being migrated, and use\n * removeGwsStorageKeys if necessary.\n *\n * @param {string} gwsStoragePrefix\n * @param {!Array\x3cstring\x3e} keys\n * @param {!Priority\x3d} priority Controls the priority for removal when the\n *     cache needs to free up space. An enum of values VERY_HIGH, HIGH,\n *     MEDIUM, and LOW. Use of the VERY_HIGH value is blocked by a\n *     whitelisted conformance test.\n * @param {boolean\x3d} removeGwsStorageKeys If true, causes keys to be deleted\n *     from gws.storage. Removing keys may cause skew problems in some cases.\n *     However, if keys are not eventually removed they will stay in users\x27\n *     browsers forever. Defaults to true.\n * @param {string\x3d} newPrefix Defaults to gwsStoragePrefix.\n */\nfunction migrateLocalItems(\n    gwsStoragePrefix, keys, priority \x3d Priority.MEDIUM,\n    removeGwsStorageKeys \x3d true, newPrefix \x3d gwsStoragePrefix) {\n  if (!Cache.isAvailable(PersistentStorageType.LOCAL)) {\n    return;\n  }\n  const localStorage \x3d /** @type {!Storage} */ (window.localStorage);\n  const cache \x3d new Cache(PersistentStorageType.LOCAL, newPrefix);\n  for (const key of keys) {\n    const prefixedKey \x3d gwsStoragePrefix + \x27::\x27 + key;\n    const unparsed \x3d localStorage.getItem(prefixedKey);\n    if (removeGwsStorageKeys) {\n      localStorage.removeItem(prefixedKey);\n    }\n    if (goog.isNull(cache.get(key))) {\n      if (!goog.isNull(unparsed)) {\n        const value \x3d json.parse(unparsed);\n        if (!goog.isNull(value)) {\n          cache.set(key, value, priority);\n        }\n      }\n    }\n  }\n}\n\nexports \x3d {\n  get,\n  isAvailable,\n  clearAll,\n  migrateLocalItems,\n};\n\n//# sourceURL\x3dhttps://qs/gws/js/cache/factory.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/jspb/map.js";
eval("\ngoog.provide(\x27jspb.Map\x27);\n\ngoog.require(\x27goog.asserts\x27);\n\ngoog.forwardDeclare(\x27jspb.BinaryReader\x27);\ngoog.forwardDeclare(\x27jspb.BinaryWriter\x27);\n\n\n\n/**\n * Constructs a new Map. A Map is a container that is used to implement map\n * fields on message objects. It closely follows the ES6 Map API; however,\n * it is distinct because we do not want to depend on external polyfills or\n * on ES6 itself.\n *\n * This constructor should only be called from generated message code. It is not\n * intended for general use by library consumers.\n *\n * @template K, V\n *\n * @param {!Array\x3c!Array\x3c?\x3e\x3e} arr\n *\n * @param {?function(new:V, ?\x3d)\x3d} opt_valueCtor\n *    The constructor for type V, if type V is a message type.\n *\n * @constructor\n * @struct\n */\njspb.Map \x3d function(arr, opt_valueCtor) {\n  /** @const @private */\n  this.arr_ \x3d arr;\n  /** @const @private */\n  this.valueCtor_ \x3d opt_valueCtor;\n\n  /** @type {!Object\x3cstring, !jspb.Map.Entry_\x3cK,V\x3e\x3e} @private */\n  this.map_ \x3d {};\n\n  /**\n   * Is `this.arr_ updated with respect to `this.map_`?\n   * @type {boolean}\n   */\n  this.arrClean \x3d true;\n\n  if (this.arr_.length \x3e 0) {\n    this.loadFromArray_();\n  }\n};\n\n\n/**\n * Load initial content from underlying array.\n * @private\n */\njspb.Map.prototype.loadFromArray_ \x3d function() {\n  for (var i \x3d 0; i \x3c this.arr_.length; i++) {\n    var record \x3d this.arr_[i];\n    var key \x3d record[0];\n    var value \x3d record[1];\n    this.map_[key.toString()] \x3d new jspb.Map.Entry_(key, value);\n  }\n  this.arrClean \x3d true;\n};\n\n\n/**\n * Synchronize content to underlying array, if needed, and return it.\n * @return {!Array\x3c!Array\x3c!Object\x3e\x3e}\n */\njspb.Map.prototype.toArray \x3d function() {\n  if (this.arrClean) {\n    if (this.valueCtor_) {\n      // We need to recursively sync maps in submessages to their arrays.\n      var m \x3d this.map_;\n      for (var p in m) {\n        if (Object.prototype.hasOwnProperty.call(m, p)) {\n          var valueWrapper \x3d /** @type {?jspb.Message} */ (m[p].valueWrapper);\n          if (valueWrapper) {\n            valueWrapper.toArray();\n          }\n        }\n      }\n    }\n  } else {\n    // Delete all elements.\n    this.arr_.length \x3d 0;\n    var strKeys \x3d this.stringKeys_();\n    // Output keys in deterministic (sorted) order.\n    strKeys.sort();\n    for (var i \x3d 0; i \x3c strKeys.length; i++) {\n      var entry \x3d this.map_[strKeys[i]];\n      var valueWrapper \x3d /** @type {?jspb.Message} */ (entry.valueWrapper);\n      if (valueWrapper) {\n        valueWrapper.toArray();\n      }\n      this.arr_.push([entry.key, entry.value]);\n    }\n    this.arrClean \x3d true;\n  }\n  return this.arr_;\n};\n\n\n/**\n * Returns the map formatted as an array of key-value pairs, suitable for the\n * toObject() form of a message.\n *\n * @param {boolean\x3d} includeInstance Whether to include the JSPB instance for\n *    transitional soy proto support: http://goto/soy-param-migration\n * @param {function((boolean|undefined),V):!Object\x3d} valueToObject\n *    The static toObject() method, if V is a message type.\n * @return {!Array\x3c!Array\x3c!Object\x3e\x3e}\n */\njspb.Map.prototype.toObject \x3d function(includeInstance, valueToObject) {\n  var rawArray \x3d this.toArray();\n  var entries \x3d [];\n  for (var i \x3d 0; i \x3c rawArray.length; i++) {\n    var entry \x3d this.map_[rawArray[i][0].toString()];\n    this.wrapEntry_(entry);\n    var valueWrapper \x3d /** @type {V|undefined} */ (entry.valueWrapper);\n    if (valueWrapper) {\n      goog.asserts.assert(valueToObject);\n      entries.push([entry.key, valueToObject(includeInstance, valueWrapper)]);\n    } else {\n      entries.push([entry.key, entry.value]);\n    }\n  }\n  return entries;\n};\n\n\n/**\n * Returns a Map from the given array of key-value pairs when the values are of\n * message type. The values in the array must match the format returned by their\n * message type\x27s toObject() method.\n *\n * @template K, V\n * @param {!Array\x3c!Array\x3c!Object\x3e\x3e} entries\n * @param {function(new:V,?\x3d)} valueCtor\n *    The constructor for type V.\n * @param {function(!Object):V} valueFromObject\n *    The fromObject function for type V.\n * @return {!jspb.Map\x3cK, V\x3e}\n */\njspb.Map.fromObject \x3d function(entries, valueCtor, valueFromObject) {\n  var result \x3d new jspb.Map([], valueCtor);\n  for (var i \x3d 0; i \x3c entries.length; i++) {\n    var key \x3d entries[i][0];\n    var value \x3d valueFromObject(entries[i][1]);\n    result.set(key, value);\n  }\n  return result;\n};\n\n\n/**\n * Helper: an IteratorIterable over an array.\n * @template T\n * @param {!Array\x3cT\x3e} arr the array\n * @implements {IteratorIterable\x3cT\x3e}\n * @constructor @struct\n * @private\n */\njspb.Map.ArrayIteratorIterable_ \x3d function(arr) {\n  /** @type {number} @private */\n  this.idx_ \x3d 0;\n\n  /** @const @private */\n  this.arr_ \x3d arr;\n};\n\n\n/** @override @final */\njspb.Map.ArrayIteratorIterable_.prototype.next \x3d function() {\n  if (this.idx_ \x3c this.arr_.length) {\n    return {done: false, value: this.arr_[this.idx_++]};\n  } else {\n    return {done: true, value: undefined};\n  }\n};\n\nif (typeof(Symbol) !\x3d \x27undefined\x27) {\n  /** @override */\n  jspb.Map.ArrayIteratorIterable_.prototype[Symbol.iterator] \x3d function() {\n    return this;\n  };\n}\n\n\n/**\n * Returns the map\x27s length (number of key/value pairs).\n * @return {number}\n */\njspb.Map.prototype.getLength \x3d function() {\n  return this.stringKeys_().length;\n};\n\n\n/**\n * Clears the map.\n */\njspb.Map.prototype.clear \x3d function() {\n  this.map_ \x3d {};\n  this.arrClean \x3d false;\n};\n\n\n/**\n * Deletes a particular key from the map.\n * N.B.: differs in name from ES6 Map\x27s `delete` because IE8 does not support\n * reserved words as property names.\n * @this {jspb.Map}\n * @param {K} key\n * @return {boolean} Whether any entry with this key was deleted.\n */\njspb.Map.prototype.del \x3d function(key) {\n  var keyValue \x3d key.toString();\n  var hadKey \x3d this.map_.hasOwnProperty(keyValue);\n  delete this.map_[keyValue];\n  this.arrClean \x3d false;\n  return hadKey;\n};\n\n\n/**\n * Returns an array of [key, value] pairs in the map.\n *\n * This is redundant compared to the plain entries() method, but we provide this\n * to help out Angular 1.x users.  Still evaluating whether this is the best\n * option.\n *\n * @return {!Array\x3c!Array\x3cK|V\x3e\x3e}\n */\njspb.Map.prototype.getEntryList \x3d function() {\n  var entries \x3d [];\n  var strKeys \x3d this.stringKeys_();\n  strKeys.sort();\n  for (var i \x3d 0; i \x3c strKeys.length; i++) {\n    var entry \x3d this.map_[strKeys[i]];\n    entries.push([entry.key, entry.value]);\n  }\n  return entries;\n};\n\n\n/**\n * Returns an iterator-iterable over [key, value] pairs in the map.\n * Closure compiler sadly doesn\x27t support tuples, ie. Iterator\x3c[K,V]\x3e.\n * @return {!IteratorIterable\x3c!Array\x3cK|V\x3e\x3e} The iterator-iterable.\n */\njspb.Map.prototype.entries \x3d function() {\n  var entries \x3d [];\n  var strKeys \x3d this.stringKeys_();\n  strKeys.sort();\n  for (var i \x3d 0; i \x3c strKeys.length; i++) {\n    var entry \x3d this.map_[strKeys[i]];\n    entries.push([entry.key, this.wrapEntry_(entry)]);\n  }\n  return new jspb.Map.ArrayIteratorIterable_(entries);\n};\n\n\n/**\n * Returns an iterator-iterable over keys in the map.\n * @return {!IteratorIterable\x3cK\x3e} The iterator-iterable.\n */\njspb.Map.prototype.keys \x3d function() {\n  var keys \x3d [];\n  var strKeys \x3d this.stringKeys_();\n  strKeys.sort();\n  for (var i \x3d 0; i \x3c strKeys.length; i++) {\n    var entry \x3d this.map_[strKeys[i]];\n    keys.push(entry.key);\n  }\n  return new jspb.Map.ArrayIteratorIterable_(keys);\n};\n\n\n/**\n * Returns an iterator-iterable over values in the map.\n * @return {!IteratorIterable\x3cV\x3e} The iterator-iterable.\n */\njspb.Map.prototype.values \x3d function() {\n  var values \x3d [];\n  var strKeys \x3d this.stringKeys_();\n  strKeys.sort();\n  for (var i \x3d 0; i \x3c strKeys.length; i++) {\n    var entry \x3d this.map_[strKeys[i]];\n    values.push(this.wrapEntry_(entry));\n  }\n  return new jspb.Map.ArrayIteratorIterable_(values);\n};\n\n\n/**\n * Iterates over entries in the map, calling a function on each.\n * @template T\n * @param {function(this:T, V, K, ?jspb.Map\x3cK, V\x3e)} cb\n * @param {T\x3d} opt_thisArg\n */\njspb.Map.prototype.forEach \x3d function(cb, opt_thisArg) {\n  var strKeys \x3d this.stringKeys_();\n  strKeys.sort();\n  for (var i \x3d 0; i \x3c strKeys.length; i++) {\n    var entry \x3d this.map_[strKeys[i]];\n    cb.call(opt_thisArg, this.wrapEntry_(entry), entry.key, this);\n  }\n};\n\n\n/**\n * Sets a key in the map to the given value.\n * @param {K} key The key\n * @param {V} value The value\n * @return {!jspb.Map\x3cK,V\x3e}\n */\njspb.Map.prototype.set \x3d function(key, value) {\n  var entry \x3d new jspb.Map.Entry_(key);\n  if (this.valueCtor_) {\n    entry.valueWrapper \x3d value;\n    // .toArray() on a message returns a reference to the underlying array\n    // rather than a copy.\n    entry.value \x3d value.toArray();\n  } else {\n    entry.value \x3d value;\n  }\n  this.map_[key.toString()] \x3d entry;\n  this.arrClean \x3d false;\n  return this;\n};\n\n\n/**\n * Helper: lazily construct a wrapper around an entry, if needed, and return the\n * user-visible type.\n * @param {!jspb.Map.Entry_\x3cK,V\x3e} entry\n * @return {V}\n * @private\n */\njspb.Map.prototype.wrapEntry_ \x3d function(entry) {\n  if (this.valueCtor_) {\n    if (!entry.valueWrapper) {\n      entry.valueWrapper \x3d new this.valueCtor_(entry.value);\n    }\n    return /** @type {V} */ (entry.valueWrapper);\n  } else {\n    return entry.value;\n  }\n};\n\n\n/**\n * Gets the value corresponding to a key in the map.\n * @param {K} key\n * @return {V|undefined} The value, or `undefined` if key not present\n */\njspb.Map.prototype.get \x3d function(key) {\n  var keyValue \x3d key.toString();\n  var entry \x3d this.map_[keyValue];\n  if (entry) {\n    return this.wrapEntry_(entry);\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * Determines whether the given key is present in the map.\n * @param {K} key\n * @return {boolean} `true` if the key is present\n */\njspb.Map.prototype.has \x3d function(key) {\n  var keyValue \x3d key.toString();\n  return (keyValue in this.map_);\n};\n\n\n/**\n * Write this Map field in wire format to a BinaryWriter, using the given field\n * number.\n * @param {number} fieldNumber\n * @param {!jspb.BinaryWriter} writer\n * @param {function(this:jspb.BinaryWriter,number,K)} keyWriterFn\n *     The method on BinaryWriter that writes type K to the stream.\n * @param {function(this:jspb.BinaryWriter,number,V,?\x3d)|\n *          function(this:jspb.BinaryWriter,number,V,?)} valueWriterFn\n *     The method on BinaryWriter that writes type V to the stream.  May be\n *     writeMessage, in which case the second callback arg form is used.\n * @param {function(V,!jspb.BinaryWriter)\x3d} opt_valueWriterCallback\n *    The BinaryWriter serialization callback for type V, if V is a message\n *    type.\n */\njspb.Map.prototype.serializeBinary \x3d function(\n    fieldNumber, writer, keyWriterFn, valueWriterFn, opt_valueWriterCallback) {\n  var strKeys \x3d this.stringKeys_();\n  strKeys.sort();\n  for (var i \x3d 0; i \x3c strKeys.length; i++) {\n    var entry \x3d this.map_[strKeys[i]];\n    writer.beginSubMessage(fieldNumber);\n    keyWriterFn.call(writer, 1, entry.key);\n    if (this.valueCtor_) {\n      valueWriterFn.call(writer, 2, this.wrapEntry_(entry),\n                         opt_valueWriterCallback);\n    } else {\n      /** @type {function(this:jspb.BinaryWriter,number,?)} */ (valueWriterFn)\n          .call(writer, 2, entry.value);\n    }\n    writer.endSubMessage();\n  }\n};\n\n\n/**\n * Read one key/value message from the given BinaryReader. Compatible as the\n * `reader` callback parameter to jspb.BinaryReader.readMessage, to be called\n * when a key/value pair submessage is encountered.\n * @template K, V\n * @param {!jspb.Map} map\n * @param {!jspb.BinaryReader} reader\n * @param {function(this:jspb.BinaryReader):K} keyReaderFn\n *     The method on BinaryReader that reads type K from the stream.\n *\n * @param {function(this:jspb.BinaryReader):V|\n *          function(this:jspb.BinaryReader,V,\n *                  function(V,!jspb.BinaryReader))} valueReaderFn\n *    The method on BinaryReader that reads type V from the stream. May be\n *    readMessage, in which case the second callback arg form is used.\n *\n * @param {?function(V,!jspb.BinaryReader)\x3d} opt_valueReaderCallback\n *    The BinaryReader parsing callback for type V, if V is a message type.\n *\n */\njspb.Map.deserializeBinary \x3d function(map, reader, keyReaderFn, valueReaderFn,\n                                      opt_valueReaderCallback) {\n  var key \x3d undefined;\n  var value \x3d undefined;\n\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    if (field \x3d\x3d 1) {\n      // Key.\n      key \x3d keyReaderFn.call(reader);\n    } else if (field \x3d\x3d 2) {\n      // Value.\n      if (map.valueCtor_) {\n        goog.asserts.assert(opt_valueReaderCallback);\n        value \x3d new map.valueCtor_();\n        valueReaderFn.call(reader, value, opt_valueReaderCallback);\n      } else {\n        value \x3d\n            (/** @type {function(this:jspb.BinaryReader):?} */ (valueReaderFn))\n                .call(reader);\n      }\n    }\n  }\n\n  goog.asserts.assert(key !\x3d undefined);\n  goog.asserts.assert(value !\x3d undefined);\n  map.set(key, value);\n};\n\n\n/**\n * Helper: compute the list of all stringified keys in the underlying Object\n * map.\n * @return {!Array\x3cstring\x3e}\n * @private\n */\njspb.Map.prototype.stringKeys_ \x3d function() {\n  var m \x3d this.map_;\n  var ret \x3d [];\n  for (var p in m) {\n    if (Object.prototype.hasOwnProperty.call(m, p)) {\n      ret.push(p);\n    }\n  }\n  return ret;\n};\n\n\n\n/**\n * @param {K} key The entry\x27s key.\n * @param {V\x3d} opt_value The entry\x27s value wrapper.\n * @constructor\n * @struct\n * @template K, V\n * @private\n */\njspb.Map.Entry_ \x3d function(key, opt_value) {\n  /** @const {K} */\n  this.key \x3d key;\n\n  // The JSPB-serializable value.  For primitive types this will be of type V.\n  // For message types it will be an array.\n  /** @type {V} */\n  this.value \x3d opt_value;\n\n  // Only used for submessage values.\n  /** @type {V} */\n  this.valueWrapper \x3d undefined;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/apps/jspb/map.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/apps/jspb/message.js";
eval("// Copyright 2010 Google Inc. All Rights Reserved.\n\n/**\n * @fileoverview Definition of jspb.Message.\n *\n * @author mwr@google.com (Mark Rawling)\n */\n\ngoog.provide(\x27jspb.ExtensionFieldBinaryInfo\x27);\ngoog.provide(\x27jspb.ExtensionFieldInfo\x27);\ngoog.provide(\x27jspb.Message\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.crypt.base64\x27);\ngoog.require(\x27jspb.Map\x27);\n\n// Not needed in compilation units that have no protos with xids.\ngoog.forwardDeclare(\x27xid.String\x27);\n\n\n\n/**\n * Stores information for a single extension field.\n *\n * For example, an extension field defined like so:\n *\n *     extend BaseMessage {\n *       optional MyMessage my_field \x3d 123;\n *     }\n *\n * will result in an ExtensionFieldInfo object with these properties:\n *\n *     {\n *       fieldIndex: 123,\n *       fieldName: {my_field_renamed: 0},\n *       ctor: proto.example.MyMessage,\n *       toObjectFn: proto.example.MyMessage.toObject,\n *       isRepeated: 0\n *     }\n *\n * We include `toObjectFn` to allow the JSCompiler to perform dead-code removal\n * on unused toObject() methods.\n *\n * If an extension field is primitive, ctor and toObjectFn will be null.\n * isRepeated should be 0 or 1.\n *\n * binary{Reader,Writer}Fn and (if message type) binaryMessageSerializeFn are\n * always provided. binaryReaderFn and binaryWriterFn are references to the\n * appropriate methods on BinaryReader/BinaryWriter to read/write the value of\n * this extension, and binaryMessageSerializeFn is a reference to the message\n * class\x27s .serializeBinary method, if available.\n *\n * @param {number} fieldNumber\n * @param {Object} fieldName This has the extension field name as a property.\n * @param {?function(new: jspb.Message, Array\x3d)} ctor\n * @param {?function((boolean|undefined),!jspb.Message):!Object} toObjectFn\n * @param {number} isRepeated\n * @constructor\n * @struct\n * @template T\n */\njspb.ExtensionFieldInfo \x3d function(fieldNumber, fieldName, ctor, toObjectFn,\n    isRepeated) {\n  /** @const */\n  this.fieldIndex \x3d fieldNumber;\n  /** @const */\n  this.fieldName \x3d fieldName;\n  /** @const */\n  this.ctor \x3d ctor;\n  /** @const */\n  this.toObjectFn \x3d toObjectFn;\n  /** @const */\n  this.isRepeated \x3d isRepeated;\n};\n\n/**\n * Stores binary-related information for a single extension field.\n * @param {!jspb.ExtensionFieldInfo\x3cT\x3e} fieldInfo\n * @param {function(this:jspb.BinaryReader,number,?)} binaryReaderFn\n * @param {function(this:jspb.BinaryWriter,number,?)\n *        |function(this:jspb.BinaryWriter,number,?,?,?,?,?)} binaryWriterFn\n * @param {function(?,?)\x3d} opt_binaryMessageSerializeFn\n * @param {function(?,?)\x3d} opt_binaryMessageDeserializeFn\n * @param {boolean\x3d} opt_isPacked\n * @constructor\n * @struct\n * @template T\n */\njspb.ExtensionFieldBinaryInfo \x3d function(fieldInfo, binaryReaderFn, binaryWriterFn,\n    opt_binaryMessageSerializeFn, opt_binaryMessageDeserializeFn, opt_isPacked) {\n  /** @const */\n  this.fieldInfo \x3d fieldInfo;\n  /** @const */\n  this.binaryReaderFn \x3d binaryReaderFn;\n  /** @const */\n  this.binaryWriterFn \x3d binaryWriterFn;\n  /** @const */\n  this.binaryMessageSerializeFn \x3d opt_binaryMessageSerializeFn;\n  /** @const */\n  this.binaryMessageDeserializeFn \x3d opt_binaryMessageDeserializeFn;\n  /** @const */\n  this.isPacked \x3d opt_isPacked;\n};\n\n/**\n * @return {boolean} Does this field represent a sub Message?\n */\njspb.ExtensionFieldInfo.prototype.isMessageType \x3d function() {\n  return !!this.ctor;\n};\n\n\n/**\n * Base class for all JsPb messages.\n *\n * Several common methods (toObject, serializeBinary, in particular) are not\n * defined on the prototype to encourage code patterns that minimize code bloat\n * due to otherwise unused code on all protos contained in the project.\n *\n * If you want to call these methods on a generic message, either\n * pass in your instance of method as a parameter:\n *     someFunction(instanceOfKnownProto,\n *                  KnownProtoClass.prototype.serializeBinary);\n * or use a lambda that knows the type:\n *     someFunction(()\x3d\x3einstanceOfKnownProto.serializeBinary());\n * or, if you don\x27t care about code size, just suppress the\n *     WARNING - Property serializeBinary never defined on jspb.Message\n * and call it the intuitive way.\n *\n * @constructor\n * @struct\n */\njspb.Message \x3d function() {\n};\n\n\n/**\n * @define {boolean} Whether to generate toObject methods for objects. Turn\n *     this off, if you do not want toObject to be ever used in your project.\n *     When turning off this flag, consider adding a conformance test that bans\n *     calling toObject. Enabling this will disable the JSCompiler\x27s ability to\n *     dead code eliminate fields used in protocol buffers that are never used\n *     in an application.\n */\ngoog.define(\x27jspb.Message.GENERATE_TO_OBJECT\x27, true);\n\n\n/**\n * @define {boolean} Whether to generate fromObject methods for objects. Turn\n *     this off, if you do not want fromObject to be ever used in your project.\n *     When turning off this flag, consider adding a conformance test that bans\n *     calling fromObject. Enabling this might disable the JSCompiler\x27s ability\n *     to dead code eliminate fields used in protocol buffers that are never\n *     used in an application.\n *     NOTE: By default no protos actually have a fromObject method. You need to\n *     add the jspb.generate_from_object options to the proto definition to\n *     activate the feature.\n *     By default this is enabled for test code only.\n */\ngoog.define(\x27jspb.Message.GENERATE_FROM_OBJECT\x27, !goog.DISALLOW_TEST_ONLY_CODE);\n\n\n/**\n * @define {boolean} Whether to generate toString methods for objects. Turn\n *     this off if you do not use toString in your project and want to trim it\n *     from the compiled JS.\n */\ngoog.define(\x27jspb.Message.GENERATE_TO_STRING\x27, true);\n\n\n/**\n * @define {boolean} Whether arrays passed to initialize() can be assumed to be\n *     local (e.g. not from another iframe) and thus safely classified with\n *     instanceof Array.\n */\ngoog.define(\x27jspb.Message.ASSUME_LOCAL_ARRAYS\x27, false);\n\n\n// TODO(jakubvrana): Turn this off by default.\n/**\n * @define {boolean} Disabling the serialization of empty trailing fields\n *     reduces the size of serialized protos. The price is an extra iteration of\n *     the proto before serialization. This is enabled by default to be\n *     backwards compatible. Projects are advised to turn this flag always off.\n */\ngoog.define(\x27jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS\x27, true);\n\n\n/**\n * Does this JavaScript environment support Uint8Aray typed arrays?\n * @type {boolean}\n * @private\n */\njspb.Message.SUPPORTS_UINT8ARRAY_ \x3d (typeof Uint8Array \x3d\x3d \x27function\x27);\n\n\n/**\n * The internal data array.\n * @type {!Array}\n * @protected\n */\njspb.Message.prototype.array;\n\n\n/**\n * Wrappers are the constructed instances of message-type fields. They are built\n * on demand from the raw array data. Includes message fields, repeated message\n * fields and extension message fields. Indexed by field number.\n * @type {Object}\n * @private\n */\njspb.Message.prototype.wrappers_;\n\n\n/**\n * The object that contains extension fields, if any. This is an object that\n * maps from a proto field number to the field\x27s value.\n * @type {Object}\n * @private\n */\njspb.Message.prototype.extensionObject_;\n\n\n/**\n * Non-extension fields with a field number at or above the pivot are\n * stored in the extension object (in addition to all extension fields).\n * @type {number}\n * @private\n */\njspb.Message.prototype.pivot_;\n\n\n/**\n * The JsPb message_id of this proto.\n * @type {string|undefined} the message id or undefined if this message\n *     has no id.\n * @private\n */\njspb.Message.prototype.messageId_;\n\n\n/**\n * Repeated float or double fields which have been converted to include only\n * numbers and not strings holding \x22NaN\x22, \x22Infinity\x22 and \x22-Infinity\x22.\n * @private {!Object\x3cnumber,boolean\x3e|undefined}\n */\njspb.Message.prototype.convertedFloatingPointFields_;\n\n\n/**\n * Repeated fields numbers.\n * @protected {?Array\x3cnumber\x3e|undefined}\n */\njspb.Message.prototype.repeatedFields;\n\n\n/**\n * The xid of this proto type (The same for all instances of a proto). Provides\n * a way to identify a proto by stable obfuscated name.\n * @see {xid}.\n * Available if {@link jspb.generate_xid} is added as a Message option to\n * a protocol buffer.\n * @const {!xid.String|undefined} The xid or undefined if message is\n *     annotated to generate the xid.\n */\njspb.Message.prototype.messageXid;\n\n\n\n/**\n * Returns the JsPb message_id of this proto.\n * @return {string|undefined} the message id or undefined if this message\n *     has no id.\n */\njspb.Message.prototype.getJsPbMessageId \x3d function() {\n  return this.messageId_;\n};\n\n\n/**\n * An offset applied to lookups into this.array to account for the presence or\n * absence of a messageId at position 0. For response messages, this will be 0.\n * Otherwise, it will be -1 so that the first array position is not wasted.\n * @type {number}\n * @private\n */\njspb.Message.prototype.arrayIndexOffset_;\n\n\n/**\n * Returns the index into msg.array at which the proto field with tag number\n * fieldNumber will be located.\n * @param {!jspb.Message} msg Message for which we\x27re calculating an index.\n * @param {number} fieldNumber The field number.\n * @return {number} The index.\n * @private\n */\njspb.Message.getIndex_ \x3d function(msg, fieldNumber) {\n  return fieldNumber + msg.arrayIndexOffset_;\n};\n\n\n/**\n * Returns the tag number based on the index in msg.array.\n * @param {!jspb.Message} msg Message for which we\x27re calculating an index.\n * @param {number} index The tag number.\n * @return {number} The field number.\n * @private\n */\njspb.Message.getFieldNumber_ \x3d function(msg, index) {\n  return index - msg.arrayIndexOffset_;\n};\n\n\n/**\n * Initializes a JsPb Message.\n * @param {!jspb.Message} msg The JsPb proto to modify.\n * @param {Array|undefined} data An initial data array.\n * @param {string|number} messageId For response messages, the message id or \x27\x27\n *     if no message id is specified. For non-response messages, 0.\n * @param {number} suggestedPivot The field number at which to start putting\n *     fields into the extension object. This is only used if data does not\n *     contain an extension object already. -1 if no extension object is\n *     required for this message type.\n * @param {Array\x3cnumber\x3e} repeatedFields The message\x27s repeated fields.\n * @param {Array\x3c!Array\x3cnumber\x3e\x3e\x3d} opt_oneofFields The fields belonging to\n *     each of the message\x27s oneof unions.\n * @protected\n */\njspb.Message.initialize \x3d function(\n    msg, data, messageId, suggestedPivot, repeatedFields, opt_oneofFields) {\n  msg.wrappers_ \x3d null;\n  if (!data) {\n    data \x3d messageId ? [messageId] : [];\n  }\n  msg.messageId_ \x3d messageId ? String(messageId) : undefined;\n  // If the messageId is 0, this message is not a response message, so we shift\n  // array indices down by 1 so as not to waste the first position in the array,\n  // which would otherwise go unused.\n  msg.arrayIndexOffset_ \x3d messageId \x3d\x3d\x3d 0 ? -1 : 0;\n  msg.array \x3d data;\n  jspb.Message.initPivotAndExtensionObject_(msg, suggestedPivot);\n  msg.convertedFloatingPointFields_ \x3d {};\n\n  if (!jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS) {\n    // TODO(jakubvrana): This is same for all instances, move to prototype.\n    // TODO(jakubvrana): There are indexOf calls on this in serializtion,\n    // consider switching to a set.\n    msg.repeatedFields \x3d repeatedFields;\n  }\n\n  if (repeatedFields) {\n    for (var i \x3d 0; i \x3c repeatedFields.length; i++) {\n      var fieldNumber \x3d repeatedFields[i];\n      if (fieldNumber \x3c msg.pivot_) {\n        var index \x3d jspb.Message.getIndex_(msg, fieldNumber);\n        msg.array[index] \x3d\n            msg.array[index] || jspb.Message.EMPTY_LIST_SENTINEL_;\n      } else {\n        jspb.Message.maybeInitEmptyExtensionObject_(msg);\n        msg.extensionObject_[fieldNumber] \x3d msg.extensionObject_[fieldNumber] ||\n            jspb.Message.EMPTY_LIST_SENTINEL_;\n      }\n    }\n  }\n\n  if (opt_oneofFields \x26\x26 opt_oneofFields.length) {\n    // Compute the oneof case for each union. This ensures only one value is\n    // set in the union.\n    for (var i \x3d 0; i \x3c opt_oneofFields.length; i++) {\n      jspb.Message.computeOneofCase(msg, opt_oneofFields[i]);\n    }\n  }\n};\n\n\n/**\n * Used to mark empty repeated fields. Serializes to null when serialized\n * to JSON.\n * When reading a repeated field readers must check the return value against\n * this value and return and replace it with a new empty array if it is\n * present.\n * @private @const {!Object}\n */\njspb.Message.EMPTY_LIST_SENTINEL_ \x3d goog.DEBUG \x26\x26 Object.freeze ?\n    Object.freeze([]) :\n    [];\n\n\n/**\n * Returns true if the provided argument is an array.\n * @param {*} o The object to classify as array or not.\n * @return {boolean} True if the provided object is an array.\n * @private\n */\njspb.Message.isArray_ \x3d function(o) {\n  return jspb.Message.ASSUME_LOCAL_ARRAYS ? o instanceof Array :\n                                            goog.isArray(o);\n};\n\n\n/**\n * If the array contains an extension object in its last position, then the\n * object is kept in place and its position is used as the pivot.  If not,\n * decides the pivot of the message based on suggestedPivot without\n * materializing the extension object.\n *\n * @param {!jspb.Message} msg The JsPb proto to modify.\n * @param {number} suggestedPivot See description for initialize().\n * @private\n */\njspb.Message.initPivotAndExtensionObject_ \x3d function(msg, suggestedPivot) {\n  if (msg.array.length) {\n    var foundIndex \x3d msg.array.length - 1;\n    var obj \x3d msg.array[foundIndex];\n    // Normal fields are never objects, so we can be sure that if we find an\n    // object here, then it\x27s the extension object. However, we must ensure that\n    // the object is not an array, since arrays are valid field values.\n    // NOTE(lukestebbing): We avoid looking at .length to avoid a JIT bug\n    // in Safari on iOS 8. See the description of CL/86511464 for details.\n    if (obj \x26\x26 typeof obj \x3d\x3d \x27object\x27 \x26\x26 !jspb.Message.isArray_(obj) \x26\x26\n        !(jspb.Message.SUPPORTS_UINT8ARRAY_ \x26\x26 obj instanceof Uint8Array)) {\n      msg.pivot_ \x3d jspb.Message.getFieldNumber_(msg, foundIndex);\n      msg.extensionObject_ \x3d obj;\n      return;\n    }\n  }\n\n  if (suggestedPivot \x3e -1) {\n    msg.pivot_ \x3d suggestedPivot;\n    // Avoid changing the shape of the proto with an empty extension object by\n    // deferring the materialization of the extension object until the first\n    // time a field set into it (may be due to getting a repeated proto field\n    // from it, in which case a new empty array is set into it at first).\n    msg.extensionObject_ \x3d null;\n  } else {\n    // suggestedPivot is -1, which means that we don\x27t have an extension object\n    // at all, in which case all fields are stored in the array.\n    msg.pivot_ \x3d Number.MAX_VALUE;\n  }\n};\n\n\n/**\n * Creates an empty extensionObject_ if non exists.\n * @param {!jspb.Message} msg The JsPb proto to modify.\n * @private\n */\njspb.Message.maybeInitEmptyExtensionObject_ \x3d function(msg) {\n  var pivotIndex \x3d jspb.Message.getIndex_(msg, msg.pivot_);\n  if (!msg.array[pivotIndex]) {\n    msg.extensionObject_ \x3d msg.array[pivotIndex] \x3d {};\n  }\n};\n\n\n/**\n * Converts a JsPb repeated message field into an object list.\n * @param {!Array\x3cT\x3e} field The repeated message field to be\n *     converted.\n * @param {?function(boolean\x3d): Object|\n *     function((boolean|undefined),T): Object} toObjectFn The toObject\n *     function for this field.  We need to pass this for effective dead code\n *     removal.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Array\x3cObject\x3e} An array of converted message objects.\n * @template T\n */\njspb.Message.toObjectList \x3d function(field, toObjectFn, opt_includeInstance) {\n  // Not using goog.array.map in the generated code to keep it small.\n  // And not using it here to avoid a function call.\n  var result \x3d [];\n  for (var i \x3d 0; i \x3c field.length; i++) {\n    result[i] \x3d toObjectFn.call(field[i], opt_includeInstance, field[i]);\n  }\n  return result;\n};\n\n\n/**\n * Adds a proto\x27s extension data to a Soy rendering object.\n * @param {!jspb.Message} proto The proto whose extensions to convert.\n * @param {!Object} obj The Soy object to add converted extension data to.\n * @param {!Object} extensions The proto class\x27 registered extensions.\n * @param {function(this:?, jspb.ExtensionFieldInfo) : *} getExtensionFn\n *     The proto class\x27 getExtension function. Passed for effective dead code\n *     removal.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n */\njspb.Message.toObjectExtension \x3d function(proto, obj, extensions,\n    getExtensionFn, opt_includeInstance) {\n  for (var fieldNumber in extensions) {\n    var fieldInfo \x3d extensions[fieldNumber];\n    var value \x3d getExtensionFn.call(proto, fieldInfo);\n    if (value !\x3d null) {\n      for (var name in fieldInfo.fieldName) {\n        if (fieldInfo.fieldName.hasOwnProperty(name)) {\n          break; // the compiled field name\n        }\n      }\n      if (!fieldInfo.toObjectFn) {\n        obj[name] \x3d value;\n      } else {\n        if (fieldInfo.isRepeated) {\n          obj[name] \x3d jspb.Message.toObjectList(\n              /** @type {!Array\x3c!jspb.Message\x3e} */ (value),\n              fieldInfo.toObjectFn, opt_includeInstance);\n        } else {\n          obj[name] \x3d fieldInfo.toObjectFn(\n              opt_includeInstance, /** @type {!jspb.Message} */ (value));\n        }\n      }\n    }\n  }\n};\n\n\n/**\n * Writes a proto\x27s extension data to a binary-format output stream.\n * @param {!jspb.Message} proto The proto whose extensions to convert.\n * @param {*} writer The binary-format writer to write to.\n * @param {!Object} extensions The proto class\x27 registered extensions.\n * @param {function(this:jspb.Message,!jspb.ExtensionFieldInfo) : *} getExtensionFn The proto\n *     class\x27 getExtension function. Passed for effective dead code removal.\n */\njspb.Message.serializeBinaryExtensions \x3d function(proto, writer, extensions,\n    getExtensionFn) {\n  for (var fieldNumber in extensions) {\n    var binaryFieldInfo \x3d extensions[fieldNumber];\n    var fieldInfo \x3d binaryFieldInfo.fieldInfo;\n\n    // The old codegen doesn\x27t add the extra fields to ExtensionFieldInfo, so we\n    // need to gracefully error-out here rather than produce a null dereference\n    // below.\n    if (!binaryFieldInfo.binaryWriterFn) {\n      throw new Error(\x27Message extension present that was generated \x27 +\n                      \x27without binary serialization support\x27);\n    }\n    var value \x3d getExtensionFn.call(proto, fieldInfo);\n    if (value !\x3d null) {\n      if (fieldInfo.isMessageType()) {\n        // If the message type of the extension was generated without binary\n        // support, there may not be a binary message serializer function, and\n        // we can\x27t know when we codegen the extending message that the extended\n        // message may require binary support, so we can *only* catch this error\n        // here, at runtime (and this decoupled codegen is the whole point of\n        // extensions!).\n        if (binaryFieldInfo.binaryMessageSerializeFn) {\n          binaryFieldInfo.binaryWriterFn.call(writer, fieldInfo.fieldIndex,\n              value, binaryFieldInfo.binaryMessageSerializeFn);\n        } else {\n          throw new Error(\x27Message extension present holding submessage \x27 +\n                          \x27without binary support enabled, and message is \x27 +\n                          \x27being serialized to binary format\x27);\n        }\n      } else {\n        binaryFieldInfo.binaryWriterFn.call(\n            writer, fieldInfo.fieldIndex, value);\n      }\n    }\n  }\n};\n\n\n/**\n * Reads an extension field from the given reader and, if a valid extension,\n * sets the extension value.\n * @param {!jspb.Message} msg A jspb proto.\n * @param {{\n *   skipField:function(this:jspb.BinaryReader),\n *   getFieldNumber:function(this:jspb.BinaryReader):number\n * }} reader\n * @param {!Object} extensions The extensions object.\n * @param {function(this:jspb.Message,!jspb.ExtensionFieldInfo)} getExtensionFn\n * @param {function(this:jspb.Message,!jspb.ExtensionFieldInfo, ?)} setExtensionFn\n */\njspb.Message.readBinaryExtension \x3d function(msg, reader, extensions,\n    getExtensionFn, setExtensionFn) {\n  var binaryFieldInfo \x3d extensions[reader.getFieldNumber()];\n  if (!binaryFieldInfo) {\n    reader.skipField();\n    return;\n  }\n  var fieldInfo \x3d binaryFieldInfo.fieldInfo;\n  if (!binaryFieldInfo.binaryReaderFn) {\n    throw new Error(\x27Deserializing extension whose generated code does not \x27 +\n                    \x27support binary format\x27);\n  }\n\n  var value;\n  if (fieldInfo.isMessageType()) {\n    value \x3d new fieldInfo.ctor();\n    binaryFieldInfo.binaryReaderFn.call(\n        reader, value, binaryFieldInfo.binaryMessageDeserializeFn);\n  } else {\n    // All other types.\n    value \x3d binaryFieldInfo.binaryReaderFn.call(reader);\n  }\n\n  if (fieldInfo.isRepeated \x26\x26 !binaryFieldInfo.isPacked) {\n    var currentList \x3d getExtensionFn.call(msg, fieldInfo);\n    if (!currentList) {\n      setExtensionFn.call(msg, fieldInfo, [value]);\n    } else {\n      currentList.push(value);\n    }\n  } else {\n    setExtensionFn.call(msg, fieldInfo, value);\n  }\n};\n\n\n/**\n * Gets the value of a non-extension field.\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @return {string|number|boolean|Uint8Array|Array|null|undefined}\n * The field\x27s value.\n * @protected\n */\njspb.Message.getField \x3d function(msg, fieldNumber) {\n  if (fieldNumber \x3c msg.pivot_) {\n    var index \x3d jspb.Message.getIndex_(msg, fieldNumber);\n    var val \x3d msg.array[index];\n    if (val \x3d\x3d\x3d jspb.Message.EMPTY_LIST_SENTINEL_) {\n      return msg.array[index] \x3d [];\n    }\n    return val;\n  } else {\n    if (!msg.extensionObject_) {\n      return undefined;\n    }\n    var val \x3d msg.extensionObject_[fieldNumber];\n    if (val \x3d\x3d\x3d jspb.Message.EMPTY_LIST_SENTINEL_) {\n      return msg.extensionObject_[fieldNumber] \x3d [];\n    }\n    return val;\n  }\n};\n\n\n/**\n * Gets the value of a non-extension repeated field.\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @return {!Array}\n * The field\x27s value.\n * @protected\n */\njspb.Message.getRepeatedField \x3d function(msg, fieldNumber) {\n  if (fieldNumber \x3c msg.pivot_) {\n    var index \x3d jspb.Message.getIndex_(msg, fieldNumber);\n    var val \x3d msg.array[index];\n    if (val \x3d\x3d\x3d jspb.Message.EMPTY_LIST_SENTINEL_) {\n      return msg.array[index] \x3d [];\n    }\n    return val;\n  }\n\n  var val \x3d msg.extensionObject_[fieldNumber];\n  if (val \x3d\x3d\x3d jspb.Message.EMPTY_LIST_SENTINEL_) {\n    return msg.extensionObject_[fieldNumber] \x3d [];\n  }\n  return val;\n};\n\n\n/**\n * Gets the value of an optional float or double field.\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @return {?number|undefined} The field\x27s value.\n * @protected\n */\njspb.Message.getOptionalFloatingPointField \x3d function(msg, fieldNumber) {\n  var value \x3d jspb.Message.getField(msg, fieldNumber);\n  // Converts \x22NaN\x22, \x22Infinity\x22 and \x22-Infinity\x22 to their corresponding numbers.\n  return value \x3d\x3d null ? value : +value;\n};\n\n\n/**\n * Gets the value of a repeated float or double field.\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @return {!Array\x3cnumber\x3e} The field\x27s value.\n * @protected\n */\njspb.Message.getRepeatedFloatingPointField \x3d function(msg, fieldNumber) {\n  var values \x3d jspb.Message.getRepeatedField(msg, fieldNumber);\n  if (!msg.convertedFloatingPointFields_) {\n    msg.convertedFloatingPointFields_ \x3d {};\n  }\n  if (!msg.convertedFloatingPointFields_[fieldNumber]) {\n    for (var i \x3d 0; i \x3c values.length; i++) {\n      // Converts \x22NaN\x22, \x22Infinity\x22 and \x22-Infinity\x22 to their corresponding\n      // numbers.\n      values[i] \x3d +values[i];\n    }\n    msg.convertedFloatingPointFields_[fieldNumber] \x3d true;\n  }\n  return /** @type {!Array\x3cnumber\x3e} */ (values);\n};\n\n\n/**\n * Coerce a \x27bytes\x27 field to a base 64 string.\n * @param {string|Uint8Array|null} value\n * @return {?string} The field\x27s coerced value.\n */\njspb.Message.bytesAsB64 \x3d function(value) {\n  if (value \x3d\x3d null || goog.isString(value)) {\n    return value;\n  }\n  if (jspb.Message.SUPPORTS_UINT8ARRAY_ \x26\x26 value instanceof Uint8Array) {\n    return goog.crypt.base64.encodeByteArray(value);\n  }\n  goog.asserts.fail(\x27Cannot coerce to b64 string: \x27 + goog.typeOf(value));\n  return null;\n};\n\n\n/**\n * Coerce a \x27bytes\x27 field to a Uint8Array byte buffer.\n * Note that Uint8Array is not supported on IE versions before 10 nor on Opera\n * Mini. @see http://caniuse.com/Uint8Array\n * @param {string|Uint8Array|null} value\n * @return {?Uint8Array} The field\x27s coerced value.\n */\njspb.Message.bytesAsU8 \x3d function(value) {\n  if (value \x3d\x3d null || value instanceof Uint8Array) {\n    return value;\n  }\n  if (goog.isString(value)) {\n    return goog.crypt.base64.decodeStringToUint8Array(value);\n  }\n  goog.asserts.fail(\x27Cannot coerce to Uint8Array: \x27 + goog.typeOf(value));\n  return null;\n};\n\n\n/**\n * Coerce a repeated \x27bytes\x27 field to an array of base 64 strings.\n * Note: the returned array should be treated as immutable.\n * @param {!Array\x3cstring\x3e|!Array\x3c!Uint8Array\x3e} value\n * @return {!Array\x3cstring?\x3e} The field\x27s coerced value.\n */\njspb.Message.bytesListAsB64 \x3d function(value) {\n  jspb.Message.assertConsistentTypes_(value);\n  if (!value.length || goog.isString(value[0])) {\n    return /** @type {!Array\x3cstring\x3e} */ (value);\n  }\n  return goog.array.map(value, jspb.Message.bytesAsB64);\n};\n\n\n/**\n * Coerce a repeated \x27bytes\x27 field to an array of Uint8Array byte buffers.\n * Note: the returned array should be treated as immutable.\n * Note that Uint8Array is not supported on IE versions before 10 nor on Opera\n * Mini. @see http://caniuse.com/Uint8Array\n * @param {!Array\x3cstring\x3e|!Array\x3c!Uint8Array\x3e} value\n * @return {!Array\x3cUint8Array?\x3e} The field\x27s coerced value.\n */\njspb.Message.bytesListAsU8 \x3d function(value) {\n  jspb.Message.assertConsistentTypes_(value);\n  if (!value.length || value[0] instanceof Uint8Array) {\n    return /** @type {!Array\x3c!Uint8Array\x3e} */ (value);\n  }\n  return goog.array.map(value, jspb.Message.bytesAsU8);\n};\n\n\n/**\n * Asserts that all elements of an array are of the same type.\n * @param {Array?} array The array to test.\n * @private\n */\njspb.Message.assertConsistentTypes_ \x3d function(array) {\n  if (goog.DEBUG \x26\x26 array \x26\x26 array.length \x3e 1) {\n    var expected \x3d goog.typeOf(array[0]);\n    goog.array.forEach(array, function(e) {\n      if (goog.typeOf(e) !\x3d expected) {\n        goog.asserts.fail(\x27Inconsistent type in JSPB repeated field array. \x27 +\n            \x27Got \x27 + goog.typeOf(e) + \x27 expected \x27 + expected);\n      }\n    });\n  }\n};\n\n\n/**\n * Gets the value of a non-extension primitive field, with proto3 (non-nullable\n * primitives) semantics. Returns `defaultValue` if the field is not otherwise\n * set.\n * @template T\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @param {T} defaultValue The default value.\n * @return {T} The field\x27s value.\n * @protected\n */\njspb.Message.getFieldWithDefault \x3d function(msg, fieldNumber, defaultValue) {\n  var value \x3d jspb.Message.getField(msg, fieldNumber);\n  if (value \x3d\x3d null) {\n    return defaultValue;\n  } else {\n    return value;\n  }\n};\n\n\n/**\n * Alias for getFieldWithDefault used by older generated code.\n * @template T\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @param {T} defaultValue The default value.\n * @return {T} The field\x27s value.\n * @protected\n */\njspb.Message.getFieldProto3 \x3d jspb.Message.getFieldWithDefault;\n\n\n/**\n * Gets the value of a map field, lazily creating the map container if\n * necessary.\n *\n * This should only be called from generated code, because it requires knowledge\n * of serialization/parsing callbacks (which are required by the map at\n * construction time, and the map may be constructed here).\n *\n * @template K, V\n * @param {!jspb.Message} msg\n * @param {number} fieldNumber\n * @param {boolean|undefined} noLazyCreate\n * @param {?\x3d} opt_valueCtor\n * @return {!jspb.Map\x3cK, V\x3e|undefined}\n * @protected\n */\njspb.Message.getMapField \x3d function(msg, fieldNumber, noLazyCreate,\n    opt_valueCtor) {\n  if (!msg.wrappers_) {\n    msg.wrappers_ \x3d {};\n  }\n  // If we already have a map in the map wrappers, return that.\n  if (fieldNumber in msg.wrappers_) {\n    return msg.wrappers_[fieldNumber];\n  } else if (noLazyCreate) {\n    return undefined;\n  } else {\n    // Wrap the underlying elements array with a Map.\n    var arr \x3d jspb.Message.getField(msg, fieldNumber);\n    if (!arr) {\n      arr \x3d [];\n      jspb.Message.setField(msg, fieldNumber, arr);\n    }\n    return msg.wrappers_[fieldNumber] \x3d\n        new jspb.Map(\n            /** @type {!Array\x3c!Array\x3c!Object\x3e\x3e} */ (arr), opt_valueCtor);\n  }\n};\n\n\n/**\n * Sets the value of a non-extension field.\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @param {string|number|boolean|Uint8Array|Array|undefined} value New value\n * @protected\n */\njspb.Message.setField \x3d function(msg, fieldNumber, value) {\n  if (fieldNumber \x3c msg.pivot_) {\n    msg.array[jspb.Message.getIndex_(msg, fieldNumber)] \x3d value;\n  } else {\n    jspb.Message.maybeInitEmptyExtensionObject_(msg);\n    msg.extensionObject_[fieldNumber] \x3d value;\n  }\n};\n\n\n/**\n * Sets the value of a non-extension integer field of a proto3\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @param {number} value New value\n * @protected\n */\njspb.Message.setProto3IntField \x3d function(msg, fieldNumber, value) {\n  jspb.Message.setFieldIgnoringDefault_(msg, fieldNumber, value, 0);\n};\n\n\n/**\n * Sets the value of a non-extension floating point field of a proto3\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @param {number} value New value\n * @protected\n */\njspb.Message.setProto3FloatField \x3d function(msg, fieldNumber, value) {\n  jspb.Message.setFieldIgnoringDefault_(msg, fieldNumber, value, 0.0);\n};\n\n\n/**\n * Sets the value of a non-extension boolean field of a proto3\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @param {boolean} value New value\n * @protected\n */\njspb.Message.setProto3BooleanField \x3d function(msg, fieldNumber, value) {\n  jspb.Message.setFieldIgnoringDefault_(msg, fieldNumber, value, false);\n};\n\n\n/**\n * Sets the value of a non-extension String field of a proto3\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @param {string} value New value\n * @protected\n */\njspb.Message.setProto3StringField \x3d function(msg, fieldNumber, value) {\n  jspb.Message.setFieldIgnoringDefault_(msg, fieldNumber, value, \x22\x22);\n};\n\n\n/**\n * Sets the value of a non-extension Bytes field of a proto3\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @param {!Uint8Array|string} value New value\n * @protected\n */\njspb.Message.setProto3BytesField \x3d function(msg, fieldNumber, value) {\n  jspb.Message.setFieldIgnoringDefault_(msg, fieldNumber, value, \x22\x22);\n};\n\n\n/**\n * Sets the value of a non-extension enum field of a proto3\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @param {number} value New value\n * @protected\n */\njspb.Message.setProto3EnumField \x3d function(msg, fieldNumber, value) {\n  jspb.Message.setFieldIgnoringDefault_(msg, fieldNumber, value, 0);\n};\n\n\n/**\n * Sets the value of a non-extension int field of a proto3 that has jstype set\n * to String.\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @param {string} value New value\n * @protected\n */\njspb.Message.setProto3StringIntField \x3d function(msg, fieldNumber, value) {\n  jspb.Message.setFieldIgnoringDefault_(msg, fieldNumber, value, \x220\x22);\n};\n\n/**\n * Sets the value of a non-extension primitive field, with proto3 (non-nullable\n * primitives) semantics of ignoring values that are equal to the type\x27s\n * default.\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @param {!Uint8Array|string|number|boolean|undefined} value New value\n * @param {!Uint8Array|string|number|boolean} defaultValue The default value.\n * @private\n */\njspb.Message.setFieldIgnoringDefault_ \x3d function(\n    msg, fieldNumber, value, defaultValue) {\n  if (value !\x3d defaultValue) {\n    jspb.Message.setField(msg, fieldNumber, value);\n  } else {\n    msg.array[jspb.Message.getIndex_(msg, fieldNumber)] \x3d null;\n  }\n};\n\n\n/**\n * Adds a value to a repeated, primitive field.\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @param {string|number|boolean|!Uint8Array} value New value\n * @param {number\x3d} opt_index Index where to put new value.\n * @protected\n */\njspb.Message.addToRepeatedField \x3d function(msg, fieldNumber, value, opt_index) {\n  var arr \x3d jspb.Message.getRepeatedField(msg, fieldNumber);\n  if (opt_index !\x3d undefined) {\n    arr.splice(opt_index, 0, value);\n  } else {\n    arr.push(value);\n  }\n};\n\n\n/**\n * Sets the value of a field in a oneof union and clears all other fields in\n * the union.\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @param {!Array\x3cnumber\x3e} oneof The fields belonging to the union.\n * @param {string|number|boolean|Uint8Array|Array|undefined} value New value\n * @protected\n */\njspb.Message.setOneofField \x3d function(msg, fieldNumber, oneof, value) {\n  var currentCase \x3d jspb.Message.computeOneofCase(msg, oneof);\n  if (currentCase \x26\x26 currentCase !\x3d\x3d fieldNumber \x26\x26 value !\x3d\x3d undefined) {\n    if (msg.wrappers_ \x26\x26 currentCase in msg.wrappers_) {\n      msg.wrappers_[currentCase] \x3d undefined;\n    }\n    jspb.Message.setField(msg, currentCase, undefined);\n  }\n  jspb.Message.setField(msg, fieldNumber, value);\n};\n\n\n/**\n * Computes the selection in a oneof group for the given message, ensuring\n * only one field is set in the process.\n *\n * According to the protobuf language guide (\n * https://developers.google.com/protocol-buffers/docs/proto#oneof), \x22if the\n * parser encounters multiple members of the same oneof on the wire, only the\n * last member seen is used in the parsed message.\x22 Since JSPB serializes\n * messages to a JSON array, the \x22last member seen\x22 will always be the field\n * with the greatest field number (directly corresponding to the greatest\n * array index).\n *\n * @param {!jspb.Message} msg A jspb proto.\n * @param {!Array\x3cnumber\x3e} oneof The field numbers belonging to the union.\n * @return {number} The field number currently set in the union, or 0 if none.\n * @protected\n */\njspb.Message.computeOneofCase \x3d function(msg, oneof) {\n  var oneofField;\n  var oneofValue;\n\n  for (var i \x3d 0; i \x3c oneof.length; i++) {\n    var fieldNumber \x3d oneof[i];\n    var value \x3d jspb.Message.getField(msg, fieldNumber);\n    if (value !\x3d null) {\n      oneofField \x3d fieldNumber;\n      oneofValue \x3d value;\n      jspb.Message.setField(msg, fieldNumber, undefined);\n    }\n  }\n\n  if (oneofField) {\n    // NB: We know the value is unique, so we can call jspb.Message.setField\n    // directly instead of jpsb.Message.setOneofField. Also, setOneofField\n    // calls this function.\n    jspb.Message.setField(msg, oneofField, oneofValue);\n    return oneofField;\n  }\n\n  return 0;\n};\n\n\n/**\n * Gets and wraps a proto field on access.\n * @param {!jspb.Message} msg A jspb proto.\n * @param {function(new:jspb.Message, Array)} ctor Constructor for the field.\n * @param {number} fieldNumber The field number.\n * @param {number\x3d} opt_required True (1) if this is a required field.\n * @return {jspb.Message} The field as a jspb proto.\n * @protected\n */\njspb.Message.getWrapperField \x3d function(msg, ctor, fieldNumber, opt_required) {\n  // TODO(mwr): Consider copying data and/or arrays.\n  if (!msg.wrappers_) {\n    msg.wrappers_ \x3d {};\n  }\n  if (!msg.wrappers_[fieldNumber]) {\n    var data \x3d /** @type {Array} */ (jspb.Message.getField(msg, fieldNumber));\n    if (opt_required || data) {\n      // TODO(mwr): Remove existence test for always valid default protos.\n      msg.wrappers_[fieldNumber] \x3d new ctor(data);\n    }\n  }\n  return /** @type {jspb.Message} */ (msg.wrappers_[fieldNumber]);\n};\n\n\n/**\n * Gets and wraps a repeated proto field on access.\n * @param {!jspb.Message} msg A jspb proto.\n * @param {function(new:jspb.Message, Array)} ctor Constructor for the field.\n * @param {number} fieldNumber The field number.\n * @return {Array\x3c!jspb.Message\x3e} The repeated field as an array of protos.\n * @protected\n */\njspb.Message.getRepeatedWrapperField \x3d function(msg, ctor, fieldNumber) {\n  jspb.Message.wrapRepeatedField_(msg, ctor, fieldNumber);\n  var val \x3d msg.wrappers_[fieldNumber];\n  if (val \x3d\x3d jspb.Message.EMPTY_LIST_SENTINEL_) {\n    val \x3d msg.wrappers_[fieldNumber] \x3d [];\n  }\n  return /** @type {!Array\x3c!jspb.Message\x3e} */ (val);\n};\n\n\n/**\n * Wraps underlying array into proto message representation if it wasn\x27t done\n * before.\n * @param {!jspb.Message} msg A jspb proto.\n * @param {function(new:jspb.Message, ?Array)} ctor Constructor for the field.\n * @param {number} fieldNumber The field number.\n * @private\n */\njspb.Message.wrapRepeatedField_ \x3d function(msg, ctor, fieldNumber) {\n  if (!msg.wrappers_) {\n    msg.wrappers_ \x3d {};\n  }\n  if (!msg.wrappers_[fieldNumber]) {\n    var data \x3d jspb.Message.getRepeatedField(msg, fieldNumber);\n    for (var wrappers \x3d [], i \x3d 0; i \x3c data.length; i++) {\n      wrappers[i] \x3d new ctor(data[i]);\n    }\n    msg.wrappers_[fieldNumber] \x3d wrappers;\n  }\n};\n\n\n/**\n * Sets a proto field and syncs it to the backing array.\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @param {?jspb.Message|?jspb.Map|undefined} value A new value for this proto\n * field.\n * @protected\n */\njspb.Message.setWrapperField \x3d function(msg, fieldNumber, value) {\n  if (!msg.wrappers_) {\n    msg.wrappers_ \x3d {};\n  }\n  var data \x3d value ? value.toArray() : value;\n  msg.wrappers_[fieldNumber] \x3d value;\n  jspb.Message.setField(msg, fieldNumber, data);\n};\n\n\n/**\n * Sets a proto field in a oneof union and syncs it to the backing array.\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @param {!Array\x3cnumber\x3e} oneof The fields belonging to the union.\n * @param {jspb.Message|undefined} value A new value for this proto field.\n * @protected\n */\njspb.Message.setOneofWrapperField \x3d function(msg, fieldNumber, oneof, value) {\n  if (!msg.wrappers_) {\n    msg.wrappers_ \x3d {};\n  }\n  var data \x3d value ? value.toArray() : value;\n  msg.wrappers_[fieldNumber] \x3d value;\n  jspb.Message.setOneofField(msg, fieldNumber, oneof, data);\n};\n\n\n/**\n * Sets a repeated proto field and syncs it to the backing array.\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @param {Array\x3c!jspb.Message\x3e|undefined} value An array of protos.\n * @protected\n */\njspb.Message.setRepeatedWrapperField \x3d function(msg, fieldNumber, value) {\n  if (!msg.wrappers_) {\n    msg.wrappers_ \x3d {};\n  }\n  value \x3d value || [];\n  for (var data \x3d [], i \x3d 0; i \x3c value.length; i++) {\n    data[i] \x3d value[i].toArray();\n  }\n  msg.wrappers_[fieldNumber] \x3d value;\n  jspb.Message.setField(msg, fieldNumber, data);\n};\n\n\n/**\n * Add a message to a repeated proto field.\n * @param {!jspb.Message} msg A jspb proto.\n * @param {number} fieldNumber The field number.\n * @param {T_CHILD|undefined} value Proto that will be added to the\n *     repeated field.\n * @param {function(new:T_CHILD, ?Array\x3d)} ctor The constructor of the\n *     message type.\n * @param {number|undefined} index Index at which to insert the value.\n * @return {T_CHILD_NOT_UNDEFINED} proto that was inserted to the repeated field\n * @template MessageType\n * Use go/closure-ttl to declare a non-undefined version of T_CHILD. Replace the\n * undefined in blah|undefined with none. This is necessary because the compiler\n * will infer T_CHILD to be |undefined.\n * @template T_CHILD\n * @template T_CHILD_NOT_UNDEFINED :\x3d\n *     cond(isUnknown(T_CHILD), unknown(),\n *       mapunion(T_CHILD, (X) \x3d\x3e\n *         cond(eq(X, \x27undefined\x27), none(), X)))\n * \x3d:\n * @protected\n */\njspb.Message.addToRepeatedWrapperField \x3d function(\n    msg, fieldNumber, value, ctor, index) {\n  jspb.Message.wrapRepeatedField_(msg, ctor, fieldNumber);\n  var wrapperArray \x3d msg.wrappers_[fieldNumber];\n  if (!wrapperArray) {\n    wrapperArray \x3d msg.wrappers_[fieldNumber] \x3d [];\n  }\n  var insertedValue \x3d value ? value : new ctor();\n  var array \x3d jspb.Message.getRepeatedField(msg, fieldNumber);\n  if (index !\x3d undefined) {\n    wrapperArray.splice(index, 0, insertedValue);\n    array.splice(index, 0, insertedValue.toArray());\n  } else {\n    wrapperArray.push(insertedValue);\n    array.push(insertedValue.toArray());\n  }\n  return insertedValue;\n};\n\n\n/**\n * Converts a JsPb repeated message field into a map. The map will contain\n * protos unless an optional toObject function is given, in which case it will\n * contain objects suitable for Soy rendering.\n * @param {!Array\x3cT\x3e} field The repeated message field to be\n *     converted.\n * @param {function() : string?} mapKeyGetterFn The function to get the key of\n *     the map.\n * @param {?function(boolean\x3d): Object|\n *     function((boolean|undefined),T): Object} opt_toObjectFn The\n *     toObject function for this field. We need to pass this for effective\n *     dead code removal.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object\x3cstring, Object\x3e} A map of proto or Soy objects.\n * @template T\n */\njspb.Message.toMap \x3d function(\n    field, mapKeyGetterFn, opt_toObjectFn, opt_includeInstance) {\n  var result \x3d {};\n  for (var i \x3d 0; i \x3c field.length; i++) {\n    result[mapKeyGetterFn.call(field[i])] \x3d opt_toObjectFn ?\n        opt_toObjectFn.call(field[i], opt_includeInstance,\n            /** @type {!jspb.Message} */ (field[i])) : field[i];\n  }\n  return result;\n};\n\n\n/**\n * Syncs all map fields\x27 contents back to their underlying arrays.\n * @private\n */\njspb.Message.prototype.syncMapFields_ \x3d function() {\n  // This iterates over submessage, map, and repeated fields, which is intended.\n  // Submessages can contain maps which also need to be synced.\n  //\n  // There is a lot of opportunity for optimization here.  For example we could\n  // statically determine that some messages have no submessages with maps and\n  // optimize this method away for those just by generating one extra static\n  // boolean per message type.\n  if (this.wrappers_) {\n    for (var fieldNumber in this.wrappers_) {\n      var val \x3d this.wrappers_[fieldNumber];\n      if (goog.isArray(val)) {\n        for (var i \x3d 0; i \x3c val.length; i++) {\n          if (val[i]) {\n            val[i].toArray();\n          }\n        }\n      } else {\n        // Works for submessages and maps.\n        if (val) {\n          val.toArray();\n        }\n      }\n    }\n  }\n};\n\n\n/**\n * Returns the internal array of this proto.\n * \x3cp\x3eNote: If you use this array to construct a second proto, the content\n * would then be partially shared between the two protos.\n * @return {!Array} The proto represented as an array.\n */\njspb.Message.prototype.toArray \x3d function() {\n  this.syncMapFields_();\n  return this.array;\n};\n\n\n// BEGIN GOOGLE-INTERNAL\n\n// We are not releasing the JSPB wire format in open-source until it is\n// better standardized.\n\n\n/**\n * Serializes a JsPb proto for use in server requests.\n * @this {!jspb.Message}\n * @return {string} The serialized proto.\n */\njspb.Message.prototype.serialize \x3d jspb.Message.SUPPORTS_UINT8ARRAY_ ?\n    /**\n     * @return {string} The serialized proto.\n     * @suppress {newCheckTypes} Modifying the prototype is only allowed if the\n     *     constructor is in the same scope\n     */\n    function() {\n      // Monkey-patch Uint8Array to generate JSON in base64 encoding. We do this\n      // rather than use stringify\x27s |replacer| to dodge a \x3e50% performance hit.\n      // See http://b/26173701#comment4 for more background.\n      var old_toJSON \x3d Uint8Array.prototype.toJSON;\n      /** @override */\n      Uint8Array.prototype.toJSON \x3d function() {\n        return goog.crypt.base64.encodeByteArray(this);\n      };\n      try {\n        return JSON.stringify(\n            this.array \x26\x26\n                jspb.Message.prepareForSerialize_(this.toArray(), this),\n            jspb.Message.serializeSpecialNumbers_);\n      } finally {\n        /** @override */\n        Uint8Array.prototype.toJSON \x3d old_toJSON;\n      }\n    } :\n    function() {\n      return JSON.stringify(\n          this.array \x26\x26 jspb.Message.prepareForSerialize_(this.toArray(), this),\n          jspb.Message.serializeSpecialNumbers_);\n    };\n\n\n/**\n * Removes empty fields from arrays.\n * @param {!Array} array\n * @param {!jspb.Message|!Array\x3c!jspb.Message\x3e|undefined} msg This is\n *     jspb.Message when serializing messages, Array when serializing nested\n *     repeated fields and undefined if the type is unknown.\n * @return {!Array}\n * @private\n */\njspb.Message.prepareForSerialize_ \x3d function(array, msg) {\n  if (jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS) {\n    return array;\n  }\n  // To minimize memory allocations, we copy the array only if it\x27s different\n  // from the original.\n  var result;\n  var length \x3d array.length;\n  var needsCopy \x3d false;\n  var extension;\n  for (var i \x3d array.length; i--;) {\n    var value \x3d array[i];\n    if (jspb.Message.isArray_(value)) {\n      // wrappers_ contain an array of jspb.Message for a repeated field or\n      // jspb.Message for a single field.\n      var nestedMsg;\n      if (goog.isArray(msg)) {\n        nestedMsg \x3d msg[i];\n      } else if (msg \x26\x26 msg.wrappers_) {\n        nestedMsg \x3d msg.wrappers_[jspb.Message.getFieldNumber_(msg, i)];\n      } else {\n        nestedMsg \x3d undefined;\n      }\n      value \x3d jspb.Message.prepareForSerialize_(value, nestedMsg);\n      if (!value.length \x26\x26 msg) {\n        if (goog.isArray(msg)) {\n          // We are inside a repeated field of nested messages. It means that\n          // value is a message and not a repeated field. We must keep it.\n        } else if (msg.repeatedFields) {\n          var fieldNumber \x3d jspb.Message.getFieldNumber_(msg, i);\n          if (msg.repeatedFields.indexOf(fieldNumber) !\x3d -1) {\n            // This is a repeated field, we could remove it.\n            value \x3d null;\n          }\n          // Otherwise, it\x27s a nested message, keep it.\n        } else {\n          // We know nothing about the field, rather keep it.\n        }\n      }\n      if (value !\x3d array[i]) {\n        needsCopy \x3d true;\n      }\n    } else if (goog.isObject(value)) {\n      extension \x3d jspb.Message.prepareExtensionForSerialize_(\n          value, msg \x26\x26 goog.asserts.assertInstanceof(msg, jspb.Message));\n      if (extension !\x3d value) {\n        needsCopy \x3d true;\n      }\n      length--;\n      continue;\n    }\n    if (value \x3d\x3d null \x26\x26 length \x3d\x3d i + 1) {\n      needsCopy \x3d true;\n      length--;\n    } else if (needsCopy) {\n      if (!result) {\n        result \x3d array.slice(0, length);\n      }\n      result[i] \x3d value;\n    }\n  }\n  if (!needsCopy) {\n    return array;\n  }\n  if (!result) {\n    result \x3d array.slice(0, length);\n  }\n  if (extension) {\n    result.push(extension);\n  }\n  return result;\n};\n\n\n/**\n * Removes empty fields from extension.\n * @param {!Object} extension\n * @param {!jspb.Message|undefined} msg\n * @return {?Object} Extension object with removed empty fields or null if\n *     empty.\n * @private\n */\njspb.Message.prepareExtensionForSerialize_ \x3d function(extension, msg) {\n  var result \x3d {};\n  var changed \x3d false;\n  for (var key in extension) {\n    var value \x3d extension[key];\n    if (jspb.Message.isArray_(value)) {\n      var prepared \x3d jspb.Message.prepareForSerialize_(\n          value, msg \x26\x26 msg.wrappers_ \x26\x26 msg.wrappers_[key]);\n      if (prepared.length || !msg || !msg.repeatedFields ||\n          msg.repeatedFields.indexOf(+key) \x3d\x3d -1) {\n        result[key] \x3d prepared;\n      }\n      if (result[key] !\x3d value) {\n        changed \x3d true;\n      }\n    } else if (value !\x3d null) {\n      result[key] \x3d value;\n    } else {\n      changed \x3d true;\n    }\n  }\n  if (!changed) {\n    // We return the original object if possible.\n    return extension;\n  }\n  // Equivalent to goog.object.isEmpty.\n  for (var key in result) {\n    return result;\n  }\n  return null;\n};\n\n\n/**\n * Converts NaN to \x22NaN\x22, Infinity to \x22Infinity\x22 and -Infinity to \x22-Infinity\x22.\n * These numbers are otherwise serialized as null.\n * @param {string} key\n * @param {*} value\n * @return {*} The converted proto message.\n * @private\n */\njspb.Message.serializeSpecialNumbers_ \x3d function(key, value) {\n  if (goog.isNumber(value)) {\n    if (isNaN(value) || value \x3d\x3d\x3d Infinity || value \x3d\x3d\x3d -Infinity) {\n      return String(value);\n    }\n  }\n  return value;\n};\n\n\n/**\n * Deserialize a JsPb string.\n * @param {function(new:JSPB, Array\x3d)} ctor The constructor of the\n *     message type.\n * @param {string} data Our serialized data.\n * @return {JSPB} The new message with the serialized data populating\n *     its fields.\n * @template JSPB\n */\njspb.Message.deserialize \x3d function(ctor, data) {\n  // data should be always non-empty but especially tests are sometimes passing\n  // undefined.\n  var msg \x3d new ctor(data ? /** @type {?Array} */ (JSON.parse(data)) : null);\n  goog.asserts.assertInstanceof(msg, jspb.Message);\n  return msg;\n};\n\n\n/**\n * Builds a JsPb message proto from Js array data. This is intended for code\n * like the Request Queue which might need to build protos without knowing\n * their type in advance. The proto type must have a JsPb message_id option.\n * To construct a proto object when you know the type in advance, you should\n * call its constructor directly.\n * @param {!Array} data The response data array.\n * @return {!jspb.Message} The converted proto message.\n * @throws {Error} If the message type is unknown, or the data fails to convert.\n */\njspb.Message.buildMessageFromArray \x3d function(data) {\n  var messageCtor \x3d jspb.Message.registry_[data[0]];\n  if (!messageCtor) {\n    throw Error(\x27Unknown JsPb message type: \x27 + data[0]);\n  }\n  return new messageCtor(data);\n};\n\n// END GOOGLE-INTERNAL\n\nif (jspb.Message.GENERATE_TO_STRING) {\n\n/**\n * Creates a string representation of the internal data array of this proto.\n * \x3cp\x3eNOTE: This string is *not* suitable for use in server requests.\n * @return {string} A string representation of this proto.\n * @override\n */\njspb.Message.prototype.toString \x3d function() {\n  this.syncMapFields_();\n  return this.array.toString();\n};\n\n}\n\n/**\n * Gets the value of the extension field from the extended object.\n * @param {jspb.ExtensionFieldInfo\x3cT\x3e} fieldInfo Specifies the field to get.\n * @return {T} The value of the field.\n * @template T\n */\njspb.Message.prototype.getExtension \x3d function(fieldInfo) {\n  if (!this.extensionObject_) {\n    return undefined;\n  }\n  if (!this.wrappers_) {\n    this.wrappers_ \x3d {};\n  }\n  var fieldNumber \x3d fieldInfo.fieldIndex;\n  if (fieldInfo.isRepeated) {\n    if (fieldInfo.isMessageType()) {\n      if (!this.wrappers_[fieldNumber]) {\n        this.wrappers_[fieldNumber] \x3d\n            goog.array.map(this.extensionObject_[fieldNumber] || [],\n                function(arr) {\n                  return new fieldInfo.ctor(arr);\n                });\n      }\n      return this.wrappers_[fieldNumber];\n    } else {\n      return this.extensionObject_[fieldNumber];\n    }\n  } else {\n    if (fieldInfo.isMessageType()) {\n      if (!this.wrappers_[fieldNumber] \x26\x26 this.extensionObject_[fieldNumber]) {\n        this.wrappers_[fieldNumber] \x3d new fieldInfo.ctor(\n            /** @type {Array|undefined} */ (\n                this.extensionObject_[fieldNumber]));\n      }\n      return this.wrappers_[fieldNumber];\n    } else {\n      return this.extensionObject_[fieldNumber];\n    }\n  }\n};\n\n\n/**\n * Sets the value of the extension field in the extended object.\n * @param {jspb.ExtensionFieldInfo} fieldInfo Specifies the field to set.\n * @param {jspb.Message|string|Uint8Array|number|boolean|Array?} value The value\n *     to set.\n * @return {THIS} For chaining\n * @this {THIS}\n * @template THIS\n */\njspb.Message.prototype.setExtension \x3d function(fieldInfo, value) {\n  // Cast self, since the inferred THIS is unknown inside the function body.\n  // https://github.com/google/closure-compiler/issues/1411#issuecomment-232442220\n  var self \x3d /** @type {!jspb.Message} */ (this);\n  if (!self.wrappers_) {\n    self.wrappers_ \x3d {};\n  }\n  jspb.Message.maybeInitEmptyExtensionObject_(self);\n  var fieldNumber \x3d fieldInfo.fieldIndex;\n  if (fieldInfo.isRepeated) {\n    value \x3d value || [];\n    if (fieldInfo.isMessageType()) {\n      self.wrappers_[fieldNumber] \x3d value;\n      self.extensionObject_[fieldNumber] \x3d goog.array.map(\n          /** @type {!Array\x3c!jspb.Message\x3e} */ (value), function(msg) {\n        return msg.toArray();\n      });\n    } else {\n      self.extensionObject_[fieldNumber] \x3d value;\n    }\n  } else {\n    if (fieldInfo.isMessageType()) {\n      self.wrappers_[fieldNumber] \x3d value;\n      self.extensionObject_[fieldNumber] \x3d\n          value ? /** @type {!jspb.Message} */ (value).toArray() : value;\n    } else {\n      self.extensionObject_[fieldNumber] \x3d value;\n    }\n  }\n  return self;\n};\n\n\n/**\n * Creates a difference object between two messages.\n *\n * The result will contain the top-level fields of m2 that differ from those of\n * m1 at any level of nesting. No data is cloned, the result object will\n * share its top-level elements with m2 (but not with m1).\n *\n * Note that repeated fields should not have null/undefined elements, but if\n * they do, this operation will treat repeated fields of different length as\n * the same if the only difference between them is due to trailing\n * null/undefined values.\n *\n * @param {!jspb.Message} m1 The first message object.\n * @param {!jspb.Message} m2 The second message object.\n * @return {!jspb.Message} The difference returned as a proto message.\n *     Note that the returned message may be missing required fields. This is\n *     currently tolerated in Js, but would cause an error if you tried to\n *     send such a proto to the server. You can access the raw difference\n *     array with result.toArray().\n * @throws {Error} If the messages are responses with different types.\n */\njspb.Message.difference \x3d function(m1, m2) {\n  if (!(m1 instanceof m2.constructor)) {\n    throw new Error(\x27Messages have different types.\x27);\n  }\n  var arr1 \x3d m1.toArray();\n  var arr2 \x3d m2.toArray();\n  var res \x3d [];\n  var start \x3d 0;\n  var length \x3d arr1.length \x3e arr2.length ? arr1.length : arr2.length;\n  if (m1.getJsPbMessageId()) {\n    res[0] \x3d m1.getJsPbMessageId();\n    start \x3d 1;\n  }\n  for (var i \x3d start; i \x3c length; i++) {\n    if (!jspb.Message.compareFields(arr1[i], arr2[i])) {\n      res[i] \x3d arr2[i];\n    }\n  }\n  return new m1.constructor(res);\n};\n\n\n/**\n * Tests whether two messages are equal.\n * @param {jspb.Message|undefined} m1 The first message object.\n * @param {jspb.Message|undefined} m2 The second message object.\n * @return {boolean} true if both messages are null/undefined, or if both are\n *     of the same type and have the same field values.\n */\njspb.Message.equals \x3d function(m1, m2) {\n  return m1 \x3d\x3d m2 || (!!(m1 \x26\x26 m2) \x26\x26 (m1 instanceof m2.constructor) \x26\x26\n      jspb.Message.compareFields(m1.toArray(), m2.toArray()));\n};\n\n\n/**\n * Compares two message extension fields recursively.\n * @param {!Object} extension1 The first field.\n * @param {!Object} extension2 The second field.\n * @return {boolean} true if the extensions are null/undefined, or otherwise\n *     equal.\n */\njspb.Message.compareExtensions \x3d function(extension1, extension2) {\n  extension1 \x3d extension1 || {};\n  extension2 \x3d extension2 || {};\n\n  var keys \x3d {};\n  for (var name in extension1) {\n    keys[name] \x3d 0;\n  }\n  for (var name in extension2) {\n    keys[name] \x3d 0;\n  }\n  for (name in keys) {\n    if (!jspb.Message.compareFields(extension1[name], extension2[name])) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * Compares two message fields recursively.\n * @param {*} field1 The first field.\n * @param {*} field2 The second field.\n * @return {boolean} true if the fields are null/undefined, or otherwise equal.\n */\njspb.Message.compareFields \x3d function(field1, field2) {\n  // If the fields are trivially equal, they\x27re equal.\n  if (field1 \x3d\x3d field2) return true;\n\n  if (!goog.isObject(field1) || !goog.isObject(field2)) {\n    // NaN !\x3d NaN so we cover this case.\n    if ((goog.isNumber(field1) \x26\x26 isNaN(field1)) ||\n        (goog.isNumber(field2) \x26\x26 isNaN(field2))) {\n      // One of the fields might be a string \x27NaN\x27.\n      return String(field1) \x3d\x3d String(field2);\n    }\n    // If the fields aren\x27t trivially equal and one of them isn\x27t an object,\n    // they can\x27t possibly be equal.\n    return false;\n  }\n\n  // We have two objects. If they\x27re different types, they\x27re not equal.\n  field1 \x3d /** @type {!Object} */(field1);\n  field2 \x3d /** @type {!Object} */(field2);\n  if (field1.constructor !\x3d field2.constructor) return false;\n\n  // If both are Uint8Arrays, compare them element-by-element.\n  if (jspb.Message.SUPPORTS_UINT8ARRAY_ \x26\x26 field1.constructor \x3d\x3d\x3d Uint8Array) {\n    var bytes1 \x3d /** @type {!Uint8Array} */(field1);\n    var bytes2 \x3d /** @type {!Uint8Array} */(field2);\n    if (bytes1.length !\x3d bytes2.length) return false;\n    for (var i \x3d 0; i \x3c bytes1.length; i++) {\n      if (bytes1[i] !\x3d bytes2[i]) return false;\n    }\n    return true;\n  }\n\n  // If they\x27re both Arrays, compare them element by element except for the\n  // optional extension objects at the end, which we compare separately.\n  if (field1.constructor \x3d\x3d\x3d Array) {\n    var typedField1 \x3d /** @type {!Array\x3c?\x3e} */ (field1);\n    var typedField2 \x3d /** @type {!Array\x3c?\x3e} */ (field2);\n    var extension1 \x3d undefined;\n    var extension2 \x3d undefined;\n\n    var length \x3d Math.max(typedField1.length, typedField2.length);\n    for (var i \x3d 0; i \x3c length; i++) {\n      var val1 \x3d typedField1[i];\n      var val2 \x3d typedField2[i];\n\n      if (val1 \x26\x26 (val1.constructor \x3d\x3d Object)) {\n        goog.asserts.assert(extension1 \x3d\x3d\x3d undefined);\n        goog.asserts.assert(i \x3d\x3d\x3d typedField1.length - 1);\n        extension1 \x3d val1;\n        val1 \x3d undefined;\n      }\n\n      if (val2 \x26\x26 (val2.constructor \x3d\x3d Object)) {\n        goog.asserts.assert(extension2 \x3d\x3d\x3d undefined);\n        goog.asserts.assert(i \x3d\x3d\x3d typedField2.length - 1);\n        extension2 \x3d val2;\n        val2 \x3d undefined;\n      }\n\n      if (!jspb.Message.compareFields(val1, val2)) {\n        return false;\n      }\n    }\n\n    if (extension1 || extension2) {\n      extension1 \x3d extension1 || {};\n      extension2 \x3d extension2 || {};\n      return jspb.Message.compareExtensions(extension1, extension2);\n    }\n\n    return true;\n  }\n\n  // If they\x27re both plain Objects (i.e. extensions), compare them as\n  // extensions.\n  if (field1.constructor \x3d\x3d\x3d Object) {\n    return jspb.Message.compareExtensions(field1, field2);\n  }\n\n  throw new Error(\x27Invalid type in JSPB array\x27);\n};\n\n\n/**\n * Templated, type-safe cloneMessage definition.\n * @return {THIS}\n * @this {THIS}\n * @template THIS\n */\njspb.Message.prototype.cloneMessage \x3d function() {\n  return jspb.Message.cloneMessage(/** @type {!jspb.Message} */ (this));\n};\n\n/**\n * Alias clone to cloneMessage. goog.object.unsafeClone uses clone to\n * efficiently copy objects. Without this alias, copying jspb messages comes\n * with a large performance penalty.\n * @return {THIS}\n * @this {THIS}\n * @template THIS\n */\njspb.Message.prototype.clone \x3d function() {\n  return jspb.Message.cloneMessage(/** @type {!jspb.Message} */ (this));\n};\n\n/**\n * Static clone function. NOTE: A type-safe method called \x22cloneMessage\x22\n * exists\n * on each generated JsPb class. Do not call this function directly.\n * @param {!jspb.Message} msg A message to clone.\n * @return {!jspb.Message} A deep clone of the given message.\n */\njspb.Message.clone \x3d function(msg) {\n  // Although we could include the wrappers, we leave them out here.\n  return jspb.Message.cloneMessage(msg);\n};\n\n\n/**\n * @param {!jspb.Message} msg A message to clone.\n * @return {!jspb.Message} A deep clone of the given message.\n * @protected\n */\njspb.Message.cloneMessage \x3d function(msg) {\n  // Although we could include the wrappers, we leave them out here.\n  return new msg.constructor(jspb.Message.clone_(msg.toArray()));\n};\n\n\n/**\n * Takes 2 messages of the same type and copies the contents of the first\n * message into the second. After this the 2 messages will equals in terms of\n * value semantics but share no state. All data in the destination message will\n * be overridden.\n *\n * @param {MESSAGE} fromMessage Message that will be copied into toMessage.\n * @param {MESSAGE} toMessage Message which will receive a copy of fromMessage\n *     as its contents.\n * @template MESSAGE\n */\njspb.Message.copyInto \x3d function(fromMessage, toMessage) {\n  goog.asserts.assertInstanceof(fromMessage, jspb.Message);\n  goog.asserts.assertInstanceof(toMessage, jspb.Message);\n  goog.asserts.assert(fromMessage.constructor \x3d\x3d toMessage.constructor,\n      \x27Copy source and target message should have the same type.\x27);\n  var copyOfFrom \x3d jspb.Message.clone(fromMessage);\n\n  var to \x3d toMessage.toArray();\n  var from \x3d copyOfFrom.toArray();\n\n  // Empty destination in case it has more values at the end of the array.\n  to.length \x3d 0;\n  // and then copy everything from the new to the existing message.\n  for (var i \x3d 0; i \x3c from.length; i++) {\n    to[i] \x3d from[i];\n  }\n\n  // This is either null or empty for a fresh copy.\n  toMessage.wrappers_ \x3d copyOfFrom.wrappers_;\n  // Just a reference into the shared array.\n  toMessage.extensionObject_ \x3d copyOfFrom.extensionObject_;\n};\n\n\n/**\n * Helper for cloning an internal JsPb object.\n * @param {!Object} obj A JsPb object, eg, a field, to be cloned.\n * @return {!Object} A clone of the input object.\n * @private\n */\njspb.Message.clone_ \x3d function(obj) {\n  var o;\n  if (goog.isArray(obj)) {\n    // Allocate array of correct size.\n    var clonedArray \x3d new Array(obj.length);\n    // Use array iteration where possible because it is faster than for-in.\n    for (var i \x3d 0; i \x3c obj.length; i++) {\n      o \x3d obj[i];\n      if (o !\x3d null) {\n        // NOTE:redundant null check existing for NTI compatibility.\n        // see b/70515949\n        clonedArray[i] \x3d (typeof o \x3d\x3d \x27object\x27) ?\n            jspb.Message.clone_(goog.asserts.assert(o)) :\n            o;\n      }\n    }\n    return clonedArray;\n  }\n  if (jspb.Message.SUPPORTS_UINT8ARRAY_ \x26\x26 obj instanceof Uint8Array) {\n    return new Uint8Array(obj);\n  }\n  var clone \x3d {};\n  for (var key in obj) {\n    o \x3d obj[key];\n    if (o !\x3d null) {\n      // NOTE:redundant null check existing for NTI compatibility.\n      // see b/70515949\n      clone[key] \x3d (typeof o \x3d\x3d \x27object\x27) ?\n          jspb.Message.clone_(goog.asserts.assert(o)) :\n          o;\n    }\n  }\n  return clone;\n};\n\n\n/**\n * Registers a JsPb message type id with its constructor.\n * @param {string} id The id for this type of message.\n * @param {Function} constructor The message constructor.\n */\njspb.Message.registerMessageType \x3d function(id, constructor) {\n  jspb.Message.registry_[id] \x3d constructor;\n  // This is needed so we can later access messageId directly on the contructor,\n  // otherwise it is not available due to \x27property collapsing\x27 by the compiler.\n  /**\n   * @suppress {strictMissingProperties} messageId is not defined on Function\n   */\n  constructor.messageId \x3d id;\n};\n\n\n/**\n * The registry of message ids to message constructors.\n * @private\n */\njspb.Message.registry_ \x3d {};\n\n\n/**\n * The extensions registered on MessageSet. This is a map of extension\n * field number to field info object. This should be considered as a\n * private API.\n *\n * This is similar to [jspb class name].extensions object for\n * non-MessageSet. We special case MessageSet so that we do not need\n * to goog.require MessageSet from classes that extends MessageSet.\n *\n * @type {!Object\x3cnumber, jspb.ExtensionFieldInfo\x3e}\n */\njspb.Message.messageSetExtensions \x3d {};\n\n/**\n * @type {!Object\x3cnumber, jspb.ExtensionFieldBinaryInfo\x3e}\n */\njspb.Message.messageSetExtensionsBinary \x3d {};\n\n//# sourceURL\x3dhttps://qs/javascript/apps/jspb/message.js\n");

$googDebugFname=undefined;
var $googDebugFname="experiments/framework/extensions/heterodyne/proto/device_experiment_ids_jspb_lib.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\n\ngoog.provide(\x27proto.experiments.heterodyne.DeviceExperimentIds\x27);\ngoog.provide(\x27proto.experiments.heterodyne.DeviceExperimentToken\x27);\ngoog.provide(\x27proto.experiments.heterodyne.DeviceExperimentToken.Version\x27);\n\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.Message\x27);\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.experiments.heterodyne.DeviceExperimentIds \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.experiments.heterodyne.DeviceExperimentIds.repeatedFields_, null);\n};\ngoog.inherits(proto.experiments.heterodyne.DeviceExperimentIds, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.experiments.heterodyne.DeviceExperimentIds.displayName \x3d \x27proto.experiments.heterodyne.DeviceExperimentIds\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nproto.experiments.heterodyne.DeviceExperimentIds.repeatedFields_ \x3d [1,2,3,4];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.experiments.heterodyne.DeviceExperimentIds.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.experiments.heterodyne.DeviceExperimentIds.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.experiments.heterodyne.DeviceExperimentIds} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.experiments.heterodyne.DeviceExperimentIds.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    byGaiaList: jspb.Message.getRepeatedField(msg, 1),\n    byPseudonymousList: jspb.Message.getRepeatedField(msg, 2),\n    alwaysList: jspb.Message.getRepeatedField(msg, 3),\n    byOtherList: jspb.Message.getRepeatedField(msg, 4)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.experiments.heterodyne.DeviceExperimentIds}\n */\nproto.experiments.heterodyne.DeviceExperimentIds.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.experiments.heterodyne.DeviceExperimentIds;\n  return proto.experiments.heterodyne.DeviceExperimentIds.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.experiments.heterodyne.DeviceExperimentIds} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.experiments.heterodyne.DeviceExperimentIds}\n */\nproto.experiments.heterodyne.DeviceExperimentIds.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.addByGaia(value);\n      break;\n    case 2:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.addByPseudonymous(value);\n      break;\n    case 3:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.addAlways(value);\n      break;\n    case 4:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.addByOther(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.experiments.heterodyne.DeviceExperimentIds.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.experiments.heterodyne.DeviceExperimentIds.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.experiments.heterodyne.DeviceExperimentIds} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.experiments.heterodyne.DeviceExperimentIds.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d message.getByGaiaList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedInt32(\n      1,\n      f\n    );\n  }\n  f \x3d message.getByPseudonymousList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedInt32(\n      2,\n      f\n    );\n  }\n  f \x3d message.getAlwaysList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedInt32(\n      3,\n      f\n    );\n  }\n  f \x3d message.getByOtherList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedInt32(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated int32 by_gaia \x3d 1;\n * @return {!Array\x3cnumber\x3e}\n */\nproto.experiments.heterodyne.DeviceExperimentIds.prototype.getByGaiaList \x3d function() {\n  return /** @type {!Array\x3cnumber\x3e} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/** @param {Array\x3cnumber\x3e|undefined} value */\nproto.experiments.heterodyne.DeviceExperimentIds.prototype.setByGaiaList \x3d function(value) {\n  jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number\x3d} opt_index\n */\nproto.experiments.heterodyne.DeviceExperimentIds.prototype.addByGaia \x3d function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\nproto.experiments.heterodyne.DeviceExperimentIds.prototype.clearByGaiaList \x3d function() {\n  this.setByGaiaList([]);\n};\n\n\n/**\n * repeated int32 by_pseudonymous \x3d 2;\n * @return {!Array\x3cnumber\x3e}\n */\nproto.experiments.heterodyne.DeviceExperimentIds.prototype.getByPseudonymousList \x3d function() {\n  return /** @type {!Array\x3cnumber\x3e} */ (jspb.Message.getRepeatedField(this, 2));\n};\n\n\n/** @param {Array\x3cnumber\x3e|undefined} value */\nproto.experiments.heterodyne.DeviceExperimentIds.prototype.setByPseudonymousList \x3d function(value) {\n  jspb.Message.setField(this, 2, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number\x3d} opt_index\n */\nproto.experiments.heterodyne.DeviceExperimentIds.prototype.addByPseudonymous \x3d function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n\n\nproto.experiments.heterodyne.DeviceExperimentIds.prototype.clearByPseudonymousList \x3d function() {\n  this.setByPseudonymousList([]);\n};\n\n\n/**\n * repeated int32 always \x3d 3;\n * @return {!Array\x3cnumber\x3e}\n */\nproto.experiments.heterodyne.DeviceExperimentIds.prototype.getAlwaysList \x3d function() {\n  return /** @type {!Array\x3cnumber\x3e} */ (jspb.Message.getRepeatedField(this, 3));\n};\n\n\n/** @param {Array\x3cnumber\x3e|undefined} value */\nproto.experiments.heterodyne.DeviceExperimentIds.prototype.setAlwaysList \x3d function(value) {\n  jspb.Message.setField(this, 3, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number\x3d} opt_index\n */\nproto.experiments.heterodyne.DeviceExperimentIds.prototype.addAlways \x3d function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 3, value, opt_index);\n};\n\n\nproto.experiments.heterodyne.DeviceExperimentIds.prototype.clearAlwaysList \x3d function() {\n  this.setAlwaysList([]);\n};\n\n\n/**\n * repeated int32 by_other \x3d 4;\n * @return {!Array\x3cnumber\x3e}\n */\nproto.experiments.heterodyne.DeviceExperimentIds.prototype.getByOtherList \x3d function() {\n  return /** @type {!Array\x3cnumber\x3e} */ (jspb.Message.getRepeatedField(this, 4));\n};\n\n\n/** @param {Array\x3cnumber\x3e|undefined} value */\nproto.experiments.heterodyne.DeviceExperimentIds.prototype.setByOtherList \x3d function(value) {\n  jspb.Message.setField(this, 4, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number\x3d} opt_index\n */\nproto.experiments.heterodyne.DeviceExperimentIds.prototype.addByOther \x3d function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 4, value, opt_index);\n};\n\n\nproto.experiments.heterodyne.DeviceExperimentIds.prototype.clearByOtherList \x3d function() {\n  this.setByOtherList([]);\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.experiments.heterodyne.DeviceExperimentIds}\n */\nproto.experiments.heterodyne.DeviceExperimentIds.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.experiments.heterodyne.DeviceExperimentIds, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.experiments.heterodyne.DeviceExperimentToken \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.experiments.heterodyne.DeviceExperimentToken, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.experiments.heterodyne.DeviceExperimentToken.displayName \x3d \x27proto.experiments.heterodyne.DeviceExperimentToken\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.experiments.heterodyne.DeviceExperimentToken.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.experiments.heterodyne.DeviceExperimentToken.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.experiments.heterodyne.DeviceExperimentToken} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.experiments.heterodyne.DeviceExperimentToken.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    version: jspb.Message.getField(msg, 1),\n    payload: msg.getPayload_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.experiments.heterodyne.DeviceExperimentToken}\n */\nproto.experiments.heterodyne.DeviceExperimentToken.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.experiments.heterodyne.DeviceExperimentToken;\n  return proto.experiments.heterodyne.DeviceExperimentToken.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.experiments.heterodyne.DeviceExperimentToken} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.experiments.heterodyne.DeviceExperimentToken}\n */\nproto.experiments.heterodyne.DeviceExperimentToken.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {!proto.experiments.heterodyne.DeviceExperimentToken.Version} */ (reader.readEnum());\n      msg.setVersion(value);\n      break;\n    case 2:\n      var value \x3d /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setPayload(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.experiments.heterodyne.DeviceExperimentToken.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.experiments.heterodyne.DeviceExperimentToken.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.experiments.heterodyne.DeviceExperimentToken} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.experiments.heterodyne.DeviceExperimentToken.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {!proto.experiments.heterodyne.DeviceExperimentToken.Version} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?(string|Uint8Array)} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.experiments.heterodyne.DeviceExperimentToken.Version \x3d {\n  UNKNOWN: 0,\n  VERSION_1: 1,\n  VERSION_2: 2\n};\n\n/**\n * optional Version version \x3d 1;\n * @return {!proto.experiments.heterodyne.DeviceExperimentToken.Version}\n */\nproto.experiments.heterodyne.DeviceExperimentToken.prototype.getVersion \x3d function() {\n  return /** @type {!proto.experiments.heterodyne.DeviceExperimentToken.Version} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?proto.experiments.heterodyne.DeviceExperimentToken.Version|undefined} value */\nproto.experiments.heterodyne.DeviceExperimentToken.prototype.setVersion \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.experiments.heterodyne.DeviceExperimentToken.prototype.clearVersion \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.experiments.heterodyne.DeviceExperimentToken.prototype.hasVersion \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional bytes payload \x3d 2;\n * @return {?string}\n */\nproto.experiments.heterodyne.DeviceExperimentToken.prototype.getPayload \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 2));\n};\n\n\n/**\n * optional bytes payload \x3d 2;\n * This is a type-conversion wrapper around `getPayload()`\n * @return {?string}\n */\nproto.experiments.heterodyne.DeviceExperimentToken.prototype.getPayload_asB64 \x3d function() {\n  return /** @type {?string} */ (jspb.Message.bytesAsB64(\n      this.getPayload()));\n};\n\n\n/**\n * optional bytes payload \x3d 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getPayload()`\n * @return {?Uint8Array}\n */\nproto.experiments.heterodyne.DeviceExperimentToken.prototype.getPayload_asU8 \x3d function() {\n  return /** @type {?Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getPayload()));\n};\n\n\n/** @param {?(string|Uint8Array)|undefined} value */\nproto.experiments.heterodyne.DeviceExperimentToken.prototype.setPayload \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.experiments.heterodyne.DeviceExperimentToken.prototype.clearPayload \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.experiments.heterodyne.DeviceExperimentToken.prototype.hasPayload \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.experiments.heterodyne.DeviceExperimentToken}\n */\nproto.experiments.heterodyne.DeviceExperimentToken.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.experiments.heterodyne.DeviceExperimentToken, data);\n};\n\n\n\n//# sourceURL\x3dhttps://qs/experiments/framework/extensions/heterodyne/proto/device_experiment_ids_jspb_lib.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/frameworks/client/analytics/transport/transport.js";
eval("goog.provide(\x27frameworks.client.analytics.Transport\x27);\n\n\n\n/**\n * An interface representing a generic transport layer that can be used by web\n * apps to deliver any arbitrary payload from the browsers (desktop/mobile) to a\n * logging endpoint at Google.\n * @interface\n */\nframeworks.client.analytics.Transport \x3d function() {};\n\n\n/**\n * Method to be called when a message is ready to be dispatched over the wire.\n * The expectation is that the transport layer implementation will queue up the\n * message for delivery and then transmit it over the wire at an appropriate\n * time. Please note that this method should be able to handle any JSPB message.\n * @param {!jspb.Message} event\n */\nframeworks.client.analytics.Transport.prototype.dispatch \x3d\n    goog.abstractMethod;\n\n/**\n * Types of failures that can occur when calling Transport.flush.\n * @enum {string}\n */\nframeworks.client.analytics.Transport.FlushFailureType \x3d {\n  /**\n   * This failure type indicates that sending the flush request over the\n   * network failed.  The associated failure context should be the HTTP status\n   * code.\n   */\n  NET_SEND_FAILED: \x27net-send-failed\x27,\n\n  /**\n   * This failure type indicates that (a) a prior flush attempt failed with\n   * HTTP 401 and a particular auth token, and (b) the auth token has not yet\n   * changed.  All future flush requests are likely to fail until the auth\n   * token can be refreshed.  There is no associated failure context for this\n   * failure type.\n   */\n  STALE_AUTH_TOKEN: \x27stale-auth-token\x27,\n\n  /**\n   * This failure type indicates that sending the flush request was not\n   * attempted because not enough time has elapsed since the last flush request\n   * was sent.  This can happen because a previous server response indicated\n   * the client should not send again until a minimum amount of time has\n   * elapsed.  There is no associated failure context for this\n   * failure type.\n   */\n  THROTTLED: \x27throttled\x27,\n};\n\n/**\n * Method to be called only when the client wants any pending messages in the\n * transport layer to be flushed immediately. Care must be taken to throttle\n * calls to this method so as not to overwhelm the transport. If you are not\n * sure how to implement this method, please  contact clearcut-eng.\n * @param {function()\x3d} opt_successCallback An optional success callback.\n * @param {function(frameworks.client.analytics.Transport.FlushFailureType,\n *     number\x3d)\x3d} opt_failureCallback An optional failure callback.  There will\n *     always be a FlushFailureType provided.  For some failure types, there may\n *     be additional failure context in the second arg.  See the documentation\n *     on the various failure types for details.\n */\nframeworks.client.analytics.Transport.prototype.flush \x3d\n    goog.abstractMethod;\n\n//# sourceURL\x3dhttps://qs/javascript/frameworks/client/analytics/transport/transport.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/timer/timer.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A timer class to which other classes and objects can listen on.\n * This is only an abstraction above `setInterval`.\n *\n * @author pupius@google.com (Daniel Pupius)\n * @see ../demos/timers.html\n */\n\ngoog.provide(\x27goog.Timer\x27);\n\ngoog.require(\x27goog.Promise\x27);\ngoog.require(\x27goog.events.EventTarget\x27);\n\n\n\n/**\n * Class for handling timing events.\n *\n * @param {number\x3d} opt_interval Number of ms between ticks (default: 1ms).\n * @param {Object\x3d} opt_timerObject  An object that has `setTimeout`,\n *     `setInterval`, `clearTimeout` and `clearInterval`\n *     (e.g., `window`).\n * @constructor\n * @extends {goog.events.EventTarget}\n */\ngoog.Timer \x3d function(opt_interval, opt_timerObject) {\n  goog.events.EventTarget.call(this);\n\n  /**\n   * Number of ms between ticks\n   * @private {number}\n   */\n  this.interval_ \x3d opt_interval || 1;\n\n  /**\n   * An object that implements `setTimeout`, `setInterval`,\n   * `clearTimeout` and `clearInterval`. We default to the window\n   * object. Changing this on {@link goog.Timer.prototype} changes the object\n   * for all timer instances which can be useful if your environment has some\n   * other implementation of timers than the `window` object.\n   * @private {{setTimeout:!Function, clearTimeout:!Function}}\n   */\n  this.timerObject_ \x3d /** @type {{setTimeout, clearTimeout}} */ (\n      opt_timerObject || goog.Timer.defaultTimerObject);\n\n  /**\n   * Cached `tick_` bound to the object for later use in the timer.\n   * @private {Function}\n   * @const\n   */\n  this.boundTick_ \x3d goog.bind(this.tick_, this);\n\n  /**\n   * Firefox browser often fires the timer event sooner (sometimes MUCH sooner)\n   * than the requested timeout. So we compare the time to when the event was\n   * last fired, and reschedule if appropriate. See also\n   * {@link goog.Timer.intervalScale}.\n   * @private {number}\n   */\n  this.last_ \x3d goog.now();\n};\ngoog.inherits(goog.Timer, goog.events.EventTarget);\n\n\n/**\n * Maximum timeout value.\n *\n * Timeout values too big to fit into a signed 32-bit integer may cause overflow\n * in FF, Safari, and Chrome, resulting in the timeout being scheduled\n * immediately. It makes more sense simply not to schedule these timeouts, since\n * 24.8 days is beyond a reasonable expectation for the browser to stay open.\n *\n * @private {number}\n * @const\n */\ngoog.Timer.MAX_TIMEOUT_ \x3d 2147483647;\n\n\n/**\n * A timer ID that cannot be returned by any known implementation of\n * `window.setTimeout`. Passing this value to `window.clearTimeout`\n * should therefore be a no-op.\n *\n * @private {number}\n * @const\n */\ngoog.Timer.INVALID_TIMEOUT_ID_ \x3d -1;\n\n\n/**\n * Whether this timer is enabled\n * @type {boolean}\n */\ngoog.Timer.prototype.enabled \x3d false;\n\n\n/**\n * An object that implements `setTimeout`, `setInterval`,\n * `clearTimeout` and `clearInterval`. We default to the global\n * object. Changing `goog.Timer.defaultTimerObject` changes the object for\n * all timer instances which can be useful if your environment has some other\n * implementation of timers you\x27d like to use.\n * @type {{setTimeout, clearTimeout}}\n */\ngoog.Timer.defaultTimerObject \x3d goog.global;\n\n\n/**\n * Variable that controls the timer error correction. If the timer is called\n * before the requested interval times `intervalScale`, which often\n * happens on Mozilla, the timer is rescheduled.\n * @see {@link #last_}\n * @type {number}\n */\ngoog.Timer.intervalScale \x3d 0.8;\n\n\n/**\n * Variable for storing the result of `setInterval`.\n * @private {?number}\n */\ngoog.Timer.prototype.timer_ \x3d null;\n\n\n/**\n * Gets the interval of the timer.\n * @return {number} interval Number of ms between ticks.\n */\ngoog.Timer.prototype.getInterval \x3d function() {\n  return this.interval_;\n};\n\n\n/**\n * Sets the interval of the timer.\n * @param {number} interval Number of ms between ticks.\n */\ngoog.Timer.prototype.setInterval \x3d function(interval) {\n  this.interval_ \x3d interval;\n  if (this.timer_ \x26\x26 this.enabled) {\n    // Stop and then start the timer to reset the interval.\n    this.stop();\n    this.start();\n  } else if (this.timer_) {\n    this.stop();\n  }\n};\n\n\n/**\n * Callback for the `setTimeout` used by the timer.\n * @private\n */\ngoog.Timer.prototype.tick_ \x3d function() {\n  if (this.enabled) {\n    var elapsed \x3d goog.now() - this.last_;\n    if (elapsed \x3e 0 \x26\x26 elapsed \x3c this.interval_ * goog.Timer.intervalScale) {\n      this.timer_ \x3d this.timerObject_.setTimeout(\n          this.boundTick_, this.interval_ - elapsed);\n      return;\n    }\n\n    // Prevents setInterval from registering a duplicate timeout when called\n    // in the timer event handler.\n    if (this.timer_) {\n      this.timerObject_.clearTimeout(this.timer_);\n      this.timer_ \x3d null;\n    }\n\n    this.dispatchTick();\n    // The timer could be stopped in the timer event handler.\n    if (this.enabled) {\n      this.timer_ \x3d\n          this.timerObject_.setTimeout(this.boundTick_, this.interval_);\n      this.last_ \x3d goog.now();\n    }\n  }\n};\n\n\n/**\n * Dispatches the TICK event. This is its own method so subclasses can override.\n */\ngoog.Timer.prototype.dispatchTick \x3d function() {\n  this.dispatchEvent(goog.Timer.TICK);\n};\n\n\n/**\n * Starts the timer.\n */\ngoog.Timer.prototype.start \x3d function() {\n  this.enabled \x3d true;\n\n  // If there is no interval already registered, start it now\n  if (!this.timer_) {\n    // IMPORTANT!\n    // window.setInterval in FireFox has a bug - it fires based on\n    // absolute time, rather than on relative time. What this means\n    // is that if a computer is sleeping/hibernating for 24 hours\n    // and the timer interval was configured to fire every 1000ms,\n    // then after the PC wakes up the timer will fire, in rapid\n    // succession, 3600*24 times.\n    // This bug is described here and is already fixed, but it will\n    // take time to propagate, so for now I am switching this over\n    // to setTimeout logic.\n    //     https://bugzilla.mozilla.org/show_bug.cgi?id\x3d376643\n    //\n    this.timer_ \x3d this.timerObject_.setTimeout(this.boundTick_, this.interval_);\n    this.last_ \x3d goog.now();\n  }\n};\n\n\n/**\n * Stops the timer.\n */\ngoog.Timer.prototype.stop \x3d function() {\n  this.enabled \x3d false;\n  if (this.timer_) {\n    this.timerObject_.clearTimeout(this.timer_);\n    this.timer_ \x3d null;\n  }\n};\n\n\n/** @override */\ngoog.Timer.prototype.disposeInternal \x3d function() {\n  goog.Timer.superClass_.disposeInternal.call(this);\n  this.stop();\n  delete this.timerObject_;\n};\n\n\n/**\n * Constant for the timer\x27s event type.\n * @const\n */\ngoog.Timer.TICK \x3d \x27tick\x27;\n\n\n/**\n * Calls the given function once, after the optional pause.\n * \x3cp\x3e\n * The function is always called asynchronously, even if the delay is 0. This\n * is a common trick to schedule a function to run after a batch of browser\n * event processing.\n *\n * @param {function(this:SCOPE)|{handleEvent:function()}|null} listener Function\n *     or object that has a handleEvent method.\n * @param {number\x3d} opt_delay Milliseconds to wait; default is 0.\n * @param {SCOPE\x3d} opt_handler Object in whose scope to call the listener.\n * @return {number} A handle to the timer ID.\n * @template SCOPE\n */\ngoog.Timer.callOnce \x3d function(listener, opt_delay, opt_handler) {\n  if (goog.isFunction(listener)) {\n    if (opt_handler) {\n      listener \x3d goog.bind(listener, opt_handler);\n    }\n  } else if (listener \x26\x26 typeof listener.handleEvent \x3d\x3d \x27function\x27) {\n    // using typeof to prevent strict js warning\n    listener \x3d goog.bind(listener.handleEvent, listener);\n  } else {\n    throw new Error(\x27Invalid listener argument\x27);\n  }\n\n  if (Number(opt_delay) \x3e goog.Timer.MAX_TIMEOUT_) {\n    // Timeouts greater than MAX_INT return immediately due to integer\n    // overflow in many browsers.  Since MAX_INT is 24.8 days, just don\x27t\n    // schedule anything at all.\n    return goog.Timer.INVALID_TIMEOUT_ID_;\n  } else {\n    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);\n  }\n};\n\n\n/**\n * Clears a timeout initiated by {@link #callOnce}.\n * @param {?number} timerId A timer ID.\n */\ngoog.Timer.clear \x3d function(timerId) {\n  goog.Timer.defaultTimerObject.clearTimeout(timerId);\n};\n\n\n/**\n * @param {number} delay Milliseconds to wait.\n * @param {(RESULT|goog.Thenable\x3cRESULT\x3e|Thenable)\x3d} opt_result The value\n *     with which the promise will be resolved.\n * @return {!goog.Promise\x3cRESULT\x3e} A promise that will be resolved after\n *     the specified delay, unless it is canceled first.\n * @template RESULT\n */\ngoog.Timer.promise \x3d function(delay, opt_result) {\n  var timerKey \x3d null;\n  return new goog\n      .Promise(function(resolve, reject) {\n        timerKey \x3d\n            goog.Timer.callOnce(function() { resolve(opt_result); }, delay);\n        if (timerKey \x3d\x3d goog.Timer.INVALID_TIMEOUT_ID_) {\n          reject(new Error(\x27Failed to schedule timer.\x27));\n        }\n      })\n      .thenCatch(function(error) {\n        // Clear the timer. The most likely reason is \x22cancel\x22 signal.\n        goog.Timer.clear(timerKey);\n        throw error;\n      });\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/timer/timer.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/net/errorcode.js";
eval("// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Error codes shared between goog.net.IframeIo and\n * goog.net.XhrIo.\n */\n\ngoog.provide(\x27goog.net.ErrorCode\x27);\n\n\n/**\n * Error codes\n * @enum {number}\n */\ngoog.net.ErrorCode \x3d {\n\n  /**\n   * There is no error condition.\n   */\n  NO_ERROR: 0,\n\n  /**\n   * The most common error from iframeio, unfortunately, is that the browser\n   * responded with an error page that is classed as a different domain. The\n   * situations, are when a browser error page  is shown -- 404, access denied,\n   * DNS failure, connection reset etc.)\n   *\n   */\n  ACCESS_DENIED: 1,\n\n  /**\n   * Currently the only case where file not found will be caused is when the\n   * code is running on the local file system and a non-IE browser makes a\n   * request to a file that doesn\x27t exist.\n   */\n  FILE_NOT_FOUND: 2,\n\n  /**\n   * If Firefox shows a browser error page, such as a connection reset by\n   * server or access denied, then it will fail silently without the error or\n   * load handlers firing.\n   */\n  FF_SILENT_ERROR: 3,\n\n  /**\n   * Custom error provided by the client through the error check hook.\n   */\n  CUSTOM_ERROR: 4,\n\n  /**\n   * Exception was thrown while processing the request.\n   */\n  EXCEPTION: 5,\n\n  /**\n   * The Http response returned a non-successful http status code.\n   */\n  HTTP_ERROR: 6,\n\n  /**\n   * The request was aborted.\n   */\n  ABORT: 7,\n\n  /**\n   * The request timed out.\n   */\n  TIMEOUT: 8,\n\n  /**\n   * The resource is not available offline.\n   */\n  OFFLINE: 9\n};\n\n\n/**\n * Returns a friendly error message for an error code. These messages are for\n * debugging and are not localized.\n * @param {goog.net.ErrorCode} errorCode An error code.\n * @return {string} A message for debugging.\n */\ngoog.net.ErrorCode.getDebugMessage \x3d function(errorCode) {\n  switch (errorCode) {\n    case goog.net.ErrorCode.NO_ERROR:\n      return \x27No Error\x27;\n\n    case goog.net.ErrorCode.ACCESS_DENIED:\n      return \x27Access denied to content document\x27;\n\n    case goog.net.ErrorCode.FILE_NOT_FOUND:\n      return \x27File not found\x27;\n\n    case goog.net.ErrorCode.FF_SILENT_ERROR:\n      return \x27Firefox silently errored\x27;\n\n    case goog.net.ErrorCode.CUSTOM_ERROR:\n      return \x27Application custom error\x27;\n\n    case goog.net.ErrorCode.EXCEPTION:\n      return \x27An exception occurred\x27;\n\n    case goog.net.ErrorCode.HTTP_ERROR:\n      return \x27Http response at 400 or 500 level\x27;\n\n    case goog.net.ErrorCode.ABORT:\n      return \x27Request was aborted\x27;\n\n    case goog.net.ErrorCode.TIMEOUT:\n      return \x27Request timed out\x27;\n\n    case goog.net.ErrorCode.OFFLINE:\n      return \x27The resource is not available offline\x27;\n\n    default:\n      return \x27Unrecognized error code\x27;\n  }\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/net/errorcode.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/net/eventtype.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Common events for the network classes.\n */\n\n\ngoog.provide(\x27goog.net.EventType\x27);\n\n\n/**\n * Event names for network events\n * @enum {string}\n */\ngoog.net.EventType \x3d {\n  COMPLETE: \x27complete\x27,\n  SUCCESS: \x27success\x27,\n  ERROR: \x27error\x27,\n  ABORT: \x27abort\x27,\n  READY: \x27ready\x27,\n  READY_STATE_CHANGE: \x27readystatechange\x27,\n  TIMEOUT: \x27timeout\x27,\n  INCREMENTAL_DATA: \x27incrementaldata\x27,\n  PROGRESS: \x27progress\x27,\n  // DOWNLOAD_PROGRESS and UPLOAD_PROGRESS are special events dispatched by\n  // goog.net.XhrIo to allow binding listeners specific to each type of\n  // progress.\n  DOWNLOAD_PROGRESS: \x27downloadprogress\x27,\n  UPLOAD_PROGRESS: \x27uploadprogress\x27\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/net/eventtype.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/net/httpstatus.js";
eval("// Copyright 2011 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Constants for HTTP status codes.\n */\n\ngoog.provide(\x27goog.net.HttpStatus\x27);\n\n\n/**\n * HTTP Status Codes defined in RFC 2616 and RFC 6585.\n * @see http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\n * @see http://tools.ietf.org/html/rfc6585\n * @enum {number}\n */\ngoog.net.HttpStatus \x3d {\n  // Informational 1xx\n  CONTINUE: 100,\n  SWITCHING_PROTOCOLS: 101,\n\n  // Successful 2xx\n  OK: 200,\n  CREATED: 201,\n  ACCEPTED: 202,\n  NON_AUTHORITATIVE_INFORMATION: 203,\n  NO_CONTENT: 204,\n  RESET_CONTENT: 205,\n  PARTIAL_CONTENT: 206,\n\n  // Redirection 3xx\n  MULTIPLE_CHOICES: 300,\n  MOVED_PERMANENTLY: 301,\n  FOUND: 302,\n  SEE_OTHER: 303,\n  NOT_MODIFIED: 304,\n  USE_PROXY: 305,\n  TEMPORARY_REDIRECT: 307,\n\n  // Client Error 4xx\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  PAYMENT_REQUIRED: 402,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  METHOD_NOT_ALLOWED: 405,\n  NOT_ACCEPTABLE: 406,\n  PROXY_AUTHENTICATION_REQUIRED: 407,\n  REQUEST_TIMEOUT: 408,\n  CONFLICT: 409,\n  GONE: 410,\n  LENGTH_REQUIRED: 411,\n  PRECONDITION_FAILED: 412,\n  REQUEST_ENTITY_TOO_LARGE: 413,\n  REQUEST_URI_TOO_LONG: 414,\n  UNSUPPORTED_MEDIA_TYPE: 415,\n  REQUEST_RANGE_NOT_SATISFIABLE: 416,\n  EXPECTATION_FAILED: 417,\n  PRECONDITION_REQUIRED: 428,\n  TOO_MANY_REQUESTS: 429,\n  REQUEST_HEADER_FIELDS_TOO_LARGE: 431,\n\n  // Server Error 5xx\n  INTERNAL_SERVER_ERROR: 500,\n  NOT_IMPLEMENTED: 501,\n  BAD_GATEWAY: 502,\n  SERVICE_UNAVAILABLE: 503,\n  GATEWAY_TIMEOUT: 504,\n  HTTP_VERSION_NOT_SUPPORTED: 505,\n  NETWORK_AUTHENTICATION_REQUIRED: 511,\n\n  /*\n   * IE returns this code for 204 due to its use of URLMon, which returns this\n   * code for \x27Operation Aborted\x27. The status text is \x27Unknown\x27, the response\n   * headers are \x27\x27. Known to occur on IE 6 on XP through IE9 on Win7.\n   */\n  QUIRK_IE_NO_CONTENT: 1223\n};\n\n\n/**\n * Returns whether the given status should be considered successful.\n *\n * Successful codes are OK (200), CREATED (201), ACCEPTED (202),\n * NO CONTENT (204), PARTIAL CONTENT (206), NOT MODIFIED (304),\n * and IE\x27s no content code (1223).\n *\n * @param {number} status The status code to test.\n * @return {boolean} Whether the status code should be considered successful.\n */\ngoog.net.HttpStatus.isSuccess \x3d function(status) {\n  switch (status) {\n    case goog.net.HttpStatus.OK:\n    case goog.net.HttpStatus.CREATED:\n    case goog.net.HttpStatus.ACCEPTED:\n    case goog.net.HttpStatus.NO_CONTENT:\n    case goog.net.HttpStatus.PARTIAL_CONTENT:\n    case goog.net.HttpStatus.NOT_MODIFIED:\n    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:\n      return true;\n\n    default:\n      return false;\n  }\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/net/httpstatus.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/net/xhrlike.js";
eval("// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ngoog.provide(\x27goog.net.XhrLike\x27);\n\n\n\n/**\n * Interface for the common parts of XMLHttpRequest.\n *\n * Mostly copied from externs/w3c_xml.js.\n *\n * @interface\n * @see http://www.w3.org/TR/XMLHttpRequest/\n */\ngoog.net.XhrLike \x3d function() {};\n\n\n/**\n * Typedef that refers to either native or custom-implemented XHR objects.\n * @typedef {!goog.net.XhrLike|!XMLHttpRequest}\n */\ngoog.net.XhrLike.OrNative;\n\n\n/**\n * @type {function()|null|undefined}\n * @see http://www.w3.org/TR/XMLHttpRequest/#handler-xhr-onreadystatechange\n */\ngoog.net.XhrLike.prototype.onreadystatechange;\n\n\n/**\n * @type {string}\n * @see http://www.w3.org/TR/XMLHttpRequest/#the-responsetext-attribute\n */\ngoog.net.XhrLike.prototype.responseText;\n\n\n/**\n * @type {Document}\n * @see http://www.w3.org/TR/XMLHttpRequest/#the-responsexml-attribute\n */\ngoog.net.XhrLike.prototype.responseXML;\n\n\n/**\n * @type {number}\n * @see http://www.w3.org/TR/XMLHttpRequest/#readystate\n */\ngoog.net.XhrLike.prototype.readyState;\n\n\n/**\n * @type {number}\n * @see http://www.w3.org/TR/XMLHttpRequest/#status\n */\ngoog.net.XhrLike.prototype.status;\n\n\n/**\n * @type {string}\n * @see http://www.w3.org/TR/XMLHttpRequest/#statustext\n */\ngoog.net.XhrLike.prototype.statusText;\n\n\n/**\n * @param {string} method\n * @param {string} url\n * @param {?boolean\x3d} opt_async\n * @param {?string\x3d} opt_user\n * @param {?string\x3d} opt_password\n * @see http://www.w3.org/TR/XMLHttpRequest/#the-open()-method\n */\ngoog.net.XhrLike.prototype.open \x3d function(\n    method, url, opt_async, opt_user, opt_password) {};\n\n\n/**\n * @param {ArrayBuffer|ArrayBufferView|Blob|Document|FormData|string\x3d} opt_data\n * @see http://www.w3.org/TR/XMLHttpRequest/#the-send()-method\n */\ngoog.net.XhrLike.prototype.send \x3d function(opt_data) {};\n\n\n/**\n * @see http://www.w3.org/TR/XMLHttpRequest/#the-abort()-method\n */\ngoog.net.XhrLike.prototype.abort \x3d function() {};\n\n\n/**\n * @param {string} header\n * @param {string} value\n * @see http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader()-method\n */\ngoog.net.XhrLike.prototype.setRequestHeader \x3d function(header, value) {};\n\n\n/**\n * @param {string} header\n * @return {string}\n * @see http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method\n */\ngoog.net.XhrLike.prototype.getResponseHeader \x3d function(header) {};\n\n\n/**\n * @return {string}\n * @see http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method\n */\ngoog.net.XhrLike.prototype.getAllResponseHeaders \x3d function() {};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/net/xhrlike.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/net/xmlhttpfactory.js";
eval("// Copyright 2010 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Interface for a factory for creating XMLHttpRequest objects\n * and metadata about them.\n * @author dbk@google.com (David Barrett-Kahn)\n */\n\ngoog.provide(\x27goog.net.XmlHttpFactory\x27);\n\n/** @suppress {extraRequire} Typedef. */\ngoog.require(\x27goog.net.XhrLike\x27);\n\n\n\n/**\n * Abstract base class for an XmlHttpRequest factory.\n * @constructor\n */\ngoog.net.XmlHttpFactory \x3d function() {};\n\n\n/**\n * Cache of options - we only actually call internalGetOptions once.\n * @type {Object}\n * @private\n */\ngoog.net.XmlHttpFactory.prototype.cachedOptions_ \x3d null;\n\n\n/**\n * @return {!goog.net.XhrLike.OrNative} A new XhrLike instance.\n */\ngoog.net.XmlHttpFactory.prototype.createInstance \x3d goog.abstractMethod;\n\n\n/**\n * @return {Object} Options describing how xhr objects obtained from this\n *     factory should be used.\n */\ngoog.net.XmlHttpFactory.prototype.getOptions \x3d function() {\n  return this.cachedOptions_ ||\n      (this.cachedOptions_ \x3d this.internalGetOptions());\n};\n\n\n/**\n * Override this method in subclasses to preserve the caching offered by\n * getOptions().\n * @return {Object} Options describing how xhr objects obtained from this\n *     factory should be used.\n * @protected\n */\ngoog.net.XmlHttpFactory.prototype.internalGetOptions \x3d goog.abstractMethod;\n\n//# sourceURL\x3dhttps://qs/javascript/closure/net/xmlhttpfactory.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/net/wrapperxmlhttpfactory.js";
eval("// Copyright 2010 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Implementation of XmlHttpFactory which allows construction from\n * simple factory methods.\n * @author dbk@google.com (David Barrett-Kahn)\n */\n\ngoog.provide(\x27goog.net.WrapperXmlHttpFactory\x27);\n\n/** @suppress {extraRequire} Typedef. */\ngoog.require(\x27goog.net.XhrLike\x27);\ngoog.require(\x27goog.net.XmlHttpFactory\x27);\n\n\n\n/**\n * An xhr factory subclass which can be constructed using two factory methods.\n * This exists partly to allow the preservation of goog.net.XmlHttp.setFactory()\n * with an unchanged signature.\n * @param {function():!goog.net.XhrLike.OrNative} xhrFactory\n *     A function which returns a new XHR object.\n * @param {function():!Object} optionsFactory A function which returns the\n *     options associated with xhr objects from this factory.\n * @extends {goog.net.XmlHttpFactory}\n * @constructor\n * @final\n */\ngoog.net.WrapperXmlHttpFactory \x3d function(xhrFactory, optionsFactory) {\n  goog.net.XmlHttpFactory.call(this);\n\n  /**\n   * XHR factory method.\n   * @type {function() : !goog.net.XhrLike.OrNative}\n   * @private\n   */\n  this.xhrFactory_ \x3d xhrFactory;\n\n  /**\n   * Options factory method.\n   * @type {function() : !Object}\n   * @private\n   */\n  this.optionsFactory_ \x3d optionsFactory;\n};\ngoog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);\n\n\n/** @override */\ngoog.net.WrapperXmlHttpFactory.prototype.createInstance \x3d function() {\n  return this.xhrFactory_();\n};\n\n\n/** @override */\ngoog.net.WrapperXmlHttpFactory.prototype.getOptions \x3d function() {\n  return this.optionsFactory_();\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/net/wrapperxmlhttpfactory.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/net/xmlhttp.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Low level handling of XMLHttpRequest.\n * @author arv@google.com (Erik Arvidsson)\n * @author dbk@google.com (David Barrett-Kahn)\n */\n\ngoog.provide(\x27goog.net.DefaultXmlHttpFactory\x27);\ngoog.provide(\x27goog.net.XmlHttp\x27);\ngoog.provide(\x27goog.net.XmlHttp.OptionType\x27);\ngoog.provide(\x27goog.net.XmlHttp.ReadyState\x27);\ngoog.provide(\x27goog.net.XmlHttpDefines\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.net.WrapperXmlHttpFactory\x27);\ngoog.require(\x27goog.net.XmlHttpFactory\x27);\n\n\n/**\n * Static class for creating XMLHttpRequest objects.\n * @return {!goog.net.XhrLike.OrNative} A new XMLHttpRequest object.\n */\ngoog.net.XmlHttp \x3d function() {\n  return goog.net.XmlHttp.factory_.createInstance();\n};\n\n\n/**\n * @define {boolean} Whether to assume XMLHttpRequest exists. Setting this to\n *     true bypasses the ActiveX probing code.\n * NOTE(ruilopes): Due to the way JSCompiler works, this define *will not* strip\n * out the ActiveX probing code from binaries.  To achieve this, use\n * `goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR` instead.\n * TODO(ruilopes): Collapse both defines.\n */\ngoog.define(\x27goog.net.XmlHttp.ASSUME_NATIVE_XHR\x27, false);\n\n\n/** @const */\ngoog.net.XmlHttpDefines \x3d {};\n\n\n/**\n * @define {boolean} Whether to assume XMLHttpRequest exists. Setting this to\n *     true eliminates the ActiveX probing code.\n */\ngoog.define(\x27goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR\x27, false);\n\n\n/**\n * Gets the options to use with the XMLHttpRequest objects obtained using\n * the static methods.\n * @return {Object} The options.\n */\ngoog.net.XmlHttp.getOptions \x3d function() {\n  return goog.net.XmlHttp.factory_.getOptions();\n};\n\n\n/**\n * Type of options that an XmlHttp object can have.\n * @enum {number}\n */\ngoog.net.XmlHttp.OptionType \x3d {\n  /**\n   * Whether a goog.nullFunction should be used to clear the onreadystatechange\n   * handler instead of null.\n   */\n  USE_NULL_FUNCTION: 0,\n\n  /**\n   * NOTE(pupius): In IE if send() errors on a *local* request the readystate\n   * is still changed to COMPLETE.  We need to ignore it and allow the\n   * try/catch around send() to pick up the error.\n   */\n  LOCAL_REQUEST_ERROR: 1\n};\n\n\n/**\n * Status constants for XMLHTTP, matches:\n * https://msdn.microsoft.com/en-us/library/ms534361(v\x3dvs.85).aspx\n * @enum {number}\n */\ngoog.net.XmlHttp.ReadyState \x3d {\n  /**\n   * Constant for when xmlhttprequest.readyState is uninitialized\n   */\n  UNINITIALIZED: 0,\n\n  /**\n   * Constant for when xmlhttprequest.readyState is loading.\n   */\n  LOADING: 1,\n\n  /**\n   * Constant for when xmlhttprequest.readyState is loaded.\n   */\n  LOADED: 2,\n\n  /**\n   * Constant for when xmlhttprequest.readyState is in an interactive state.\n   */\n  INTERACTIVE: 3,\n\n  /**\n   * Constant for when xmlhttprequest.readyState is completed\n   */\n  COMPLETE: 4\n};\n\n\n/**\n * The global factory instance for creating XMLHttpRequest objects.\n * @type {goog.net.XmlHttpFactory}\n * @private\n */\ngoog.net.XmlHttp.factory_;\n\n\n/**\n * Sets the factories for creating XMLHttpRequest objects and their options.\n * @param {Function} factory The factory for XMLHttpRequest objects.\n * @param {Function} optionsFactory The factory for options.\n * @deprecated Use setGlobalFactory instead.\n */\ngoog.net.XmlHttp.setFactory \x3d function(factory, optionsFactory) {\n  goog.net.XmlHttp.setGlobalFactory(\n      new goog.net.WrapperXmlHttpFactory(\n          goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));\n};\n\n\n/**\n * Sets the global factory object.\n * @param {!goog.net.XmlHttpFactory} factory New global factory object.\n */\ngoog.net.XmlHttp.setGlobalFactory \x3d function(factory) {\n  goog.net.XmlHttp.factory_ \x3d factory;\n};\n\n\n\n/**\n * Default factory to use when creating xhr objects.  You probably shouldn\x27t be\n * instantiating this directly, but rather using it via goog.net.XmlHttp.\n * @extends {goog.net.XmlHttpFactory}\n * @constructor\n */\ngoog.net.DefaultXmlHttpFactory \x3d function() {\n  goog.net.XmlHttpFactory.call(this);\n};\ngoog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);\n\n\n/** @override */\ngoog.net.DefaultXmlHttpFactory.prototype.createInstance \x3d function() {\n  var progId \x3d this.getProgId_();\n  if (progId) {\n    return new ActiveXObject(progId);\n  } else {\n    return new XMLHttpRequest();\n  }\n};\n\n\n/** @override */\ngoog.net.DefaultXmlHttpFactory.prototype.internalGetOptions \x3d function() {\n  var progId \x3d this.getProgId_();\n  var options \x3d {};\n  if (progId) {\n    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] \x3d true;\n    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] \x3d true;\n  }\n  return options;\n};\n\n\n/**\n * The ActiveX PROG ID string to use to create xhr\x27s in IE. Lazily initialized.\n * @type {string|undefined}\n * @private\n */\ngoog.net.DefaultXmlHttpFactory.prototype.ieProgId_;\n\n\n/**\n * Initialize the private state used by other functions.\n * @return {string} The ActiveX PROG ID string to use to create xhr\x27s in IE.\n * @private\n */\ngoog.net.DefaultXmlHttpFactory.prototype.getProgId_ \x3d function() {\n  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR ||\n      goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {\n    return \x27\x27;\n  }\n\n  // The following blog post describes what PROG IDs to use to create the\n  // XMLHTTP object in Internet Explorer:\n  // http://blogs.msdn.com/xmlteam/archive/2006/10/23/using-the-right-version-of-msxml-in-internet-explorer.aspx\n  // However we do not (yet) fully trust that this will be OK for old versions\n  // of IE on Win9x so we therefore keep the last 2.\n  if (!this.ieProgId_ \x26\x26 typeof XMLHttpRequest \x3d\x3d \x27undefined\x27 \x26\x26\n      typeof ActiveXObject !\x3d \x27undefined\x27) {\n    // Candidate Active X types.\n    var ACTIVE_X_IDENTS \x3d [\n      \x27MSXML2.XMLHTTP.6.0\x27, \x27MSXML2.XMLHTTP.3.0\x27, \x27MSXML2.XMLHTTP\x27,\n      \x27Microsoft.XMLHTTP\x27\n    ];\n    for (var i \x3d 0; i \x3c ACTIVE_X_IDENTS.length; i++) {\n      var candidate \x3d ACTIVE_X_IDENTS[i];\n\n      try {\n        new ActiveXObject(candidate);\n        // NOTE(pupius): cannot assign progid and return candidate in one line\n        // because JSCompiler complaings: BUG 658126\n        this.ieProgId_ \x3d candidate;\n        return candidate;\n      } catch (e) {\n        // do nothing; try next choice\n      }\n    }\n\n    // couldn\x27t find any matches\n    throw new Error(\n        \x27Could not create ActiveXObject. ActiveX might be disabled,\x27 +\n        \x27 or MSXML might not be installed\x27);\n  }\n\n  return /** @type {string} */ (this.ieProgId_);\n};\n\n\n// Set the global factory to an instance of the default factory.\ngoog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory());\n\n//# sourceURL\x3dhttps://qs/javascript/closure/net/xmlhttp.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/structs/structs.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Generics method for collection-like classes and objects.\n *\n * @author arv@google.com (Erik Arvidsson)\n *\n * This file contains functions to work with collections. It supports using\n * Map, Set, Array and Object and other classes that implement collection-like\n * methods.\n * @suppress {strictMissingProperties}\n */\n\n\ngoog.provide(\x27goog.structs\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.object\x27);\n\n\n// We treat an object as a dictionary if it has getKeys or it is an object that\n// isn\x27t arrayLike.\n\n\n/**\n * Returns the number of values in the collection-like object.\n * @param {Object} col The collection-like object.\n * @return {number} The number of values in the collection-like object.\n */\ngoog.structs.getCount \x3d function(col) {\n  if (col.getCount \x26\x26 typeof col.getCount \x3d\x3d \x27function\x27) {\n    return col.getCount();\n  }\n  if (goog.isArrayLike(col) || goog.isString(col)) {\n    return col.length;\n  }\n  return goog.object.getCount(col);\n};\n\n\n/**\n * Returns the values of the collection-like object.\n * @param {Object} col The collection-like object.\n * @return {!Array\x3c?\x3e} The values in the collection-like object.\n */\ngoog.structs.getValues \x3d function(col) {\n  if (col.getValues \x26\x26 typeof col.getValues \x3d\x3d \x27function\x27) {\n    return col.getValues();\n  }\n  if (goog.isString(col)) {\n    return col.split(\x27\x27);\n  }\n  if (goog.isArrayLike(col)) {\n    var rv \x3d [];\n    var l \x3d col.length;\n    for (var i \x3d 0; i \x3c l; i++) {\n      rv.push(col[i]);\n    }\n    return rv;\n  }\n  return goog.object.getValues(col);\n};\n\n\n/**\n * Returns the keys of the collection. Some collections have no notion of\n * keys/indexes and this function will return undefined in those cases.\n * @param {Object} col The collection-like object.\n * @return {!Array|undefined} The keys in the collection.\n */\ngoog.structs.getKeys \x3d function(col) {\n  if (col.getKeys \x26\x26 typeof col.getKeys \x3d\x3d \x27function\x27) {\n    return col.getKeys();\n  }\n  // if we have getValues but no getKeys we know this is a key-less collection\n  if (col.getValues \x26\x26 typeof col.getValues \x3d\x3d \x27function\x27) {\n    return undefined;\n  }\n  if (goog.isArrayLike(col) || goog.isString(col)) {\n    var rv \x3d [];\n    var l \x3d col.length;\n    for (var i \x3d 0; i \x3c l; i++) {\n      rv.push(i);\n    }\n    return rv;\n  }\n\n  return goog.object.getKeys(col);\n};\n\n\n/**\n * Whether the collection contains the given value. This is O(n) and uses\n * equals (\x3d\x3d) to test the existence.\n * @param {Object} col The collection-like object.\n * @param {*} val The value to check for.\n * @return {boolean} True if the map contains the value.\n */\ngoog.structs.contains \x3d function(col, val) {\n  if (col.contains \x26\x26 typeof col.contains \x3d\x3d \x27function\x27) {\n    return col.contains(val);\n  }\n  if (col.containsValue \x26\x26 typeof col.containsValue \x3d\x3d \x27function\x27) {\n    return col.containsValue(val);\n  }\n  if (goog.isArrayLike(col) || goog.isString(col)) {\n    return goog.array.contains(/** @type {!Array\x3c?\x3e} */ (col), val);\n  }\n  return goog.object.containsValue(col, val);\n};\n\n\n/**\n * Whether the collection is empty.\n * @param {Object} col The collection-like object.\n * @return {boolean} True if empty.\n */\ngoog.structs.isEmpty \x3d function(col) {\n  if (col.isEmpty \x26\x26 typeof col.isEmpty \x3d\x3d \x27function\x27) {\n    return col.isEmpty();\n  }\n\n  // We do not use goog.string.isEmptyOrWhitespace because here we treat the\n  // string as\n  // collection and as such even whitespace matters\n\n  if (goog.isArrayLike(col) || goog.isString(col)) {\n    return goog.array.isEmpty(/** @type {!Array\x3c?\x3e} */ (col));\n  }\n  return goog.object.isEmpty(col);\n};\n\n\n/**\n * Removes all the elements from the collection.\n * @param {Object} col The collection-like object.\n */\ngoog.structs.clear \x3d function(col) {\n  // NOTE(arv): This should not contain strings because strings are immutable\n  if (col.clear \x26\x26 typeof col.clear \x3d\x3d \x27function\x27) {\n    col.clear();\n  } else if (goog.isArrayLike(col)) {\n    goog.array.clear(/** @type {IArrayLike\x3c?\x3e} */ (col));\n  } else {\n    goog.object.clear(col);\n  }\n};\n\n\n/**\n * Calls a function for each value in a collection. The function takes\n * three arguments; the value, the key and the collection.\n *\n * @param {S} col The collection-like object.\n * @param {function(this:T,?,?,S):?} f The function to call for every value.\n *     This function takes\n *     3 arguments (the value, the key or undefined if the collection has no\n *     notion of keys, and the collection) and the return value is irrelevant.\n * @param {T\x3d} opt_obj The object to be used as the value of \x27this\x27\n *     within `f`.\n * @template T,S\n * @deprecated Use a more specific method, e.g. goog.array.forEach,\n *     goog.object.forEach, or for-of.\n */\ngoog.structs.forEach \x3d function(col, f, opt_obj) {\n  if (col.forEach \x26\x26 typeof col.forEach \x3d\x3d \x27function\x27) {\n    col.forEach(f, opt_obj);\n  } else if (goog.isArrayLike(col) || goog.isString(col)) {\n    goog.array.forEach(/** @type {!Array\x3c?\x3e} */ (col), f, opt_obj);\n  } else {\n    var keys \x3d goog.structs.getKeys(col);\n    var values \x3d goog.structs.getValues(col);\n    var l \x3d values.length;\n    for (var i \x3d 0; i \x3c l; i++) {\n      f.call(/** @type {?} */ (opt_obj), values[i], keys \x26\x26 keys[i], col);\n    }\n  }\n};\n\n\n/**\n * Calls a function for every value in the collection. When a call returns true,\n * adds the value to a new collection (Array is returned by default).\n *\n * @param {S} col The collection-like object.\n * @param {function(this:T,?,?,S):boolean} f The function to call for every\n *     value. This function takes\n *     3 arguments (the value, the key or undefined if the collection has no\n *     notion of keys, and the collection) and should return a Boolean. If the\n *     return value is true the value is added to the result collection. If it\n *     is false the value is not included.\n * @param {T\x3d} opt_obj The object to be used as the value of \x27this\x27\n *     within `f`.\n * @return {!Object|!Array\x3c?\x3e} A new collection where the passed values are\n *     present. If col is a key-less collection an array is returned.  If col\n *     has keys and values a plain old JS object is returned.\n * @template T,S\n */\ngoog.structs.filter \x3d function(col, f, opt_obj) {\n  if (typeof col.filter \x3d\x3d \x27function\x27) {\n    return col.filter(f, opt_obj);\n  }\n  if (goog.isArrayLike(col) || goog.isString(col)) {\n    return goog.array.filter(/** @type {!Array\x3c?\x3e} */ (col), f, opt_obj);\n  }\n\n  var rv;\n  var keys \x3d goog.structs.getKeys(col);\n  var values \x3d goog.structs.getValues(col);\n  var l \x3d values.length;\n  if (keys) {\n    rv \x3d {};\n    for (var i \x3d 0; i \x3c l; i++) {\n      if (f.call(/** @type {?} */ (opt_obj), values[i], keys[i], col)) {\n        rv[keys[i]] \x3d values[i];\n      }\n    }\n  } else {\n    // We should not use goog.array.filter here since we want to make sure that\n    // the index is undefined as well as make sure that col is passed to the\n    // function.\n    rv \x3d [];\n    for (var i \x3d 0; i \x3c l; i++) {\n      if (f.call(opt_obj, values[i], undefined, col)) {\n        rv.push(values[i]);\n      }\n    }\n  }\n  return rv;\n};\n\n\n/**\n * Calls a function for every value in the collection and adds the result into a\n * new collection (defaults to creating a new Array).\n *\n * @param {S} col The collection-like object.\n * @param {function(this:T,?,?,S):V} f The function to call for every value.\n *     This function takes 3 arguments (the value, the key or undefined if the\n *     collection has no notion of keys, and the collection) and should return\n *     something. The result will be used as the value in the new collection.\n * @param {T\x3d} opt_obj  The object to be used as the value of \x27this\x27\n *     within `f`.\n * @return {!Object\x3cV\x3e|!Array\x3cV\x3e} A new collection with the new values.  If\n *     col is a key-less collection an array is returned.  If col has keys and\n *     values a plain old JS object is returned.\n * @template T,S,V\n */\ngoog.structs.map \x3d function(col, f, opt_obj) {\n  if (typeof col.map \x3d\x3d \x27function\x27) {\n    return col.map(f, opt_obj);\n  }\n  if (goog.isArrayLike(col) || goog.isString(col)) {\n    return goog.array.map(/** @type {!Array\x3c?\x3e} */ (col), f, opt_obj);\n  }\n\n  var rv;\n  var keys \x3d goog.structs.getKeys(col);\n  var values \x3d goog.structs.getValues(col);\n  var l \x3d values.length;\n  if (keys) {\n    rv \x3d {};\n    for (var i \x3d 0; i \x3c l; i++) {\n      rv[keys[i]] \x3d f.call(/** @type {?} */ (opt_obj), values[i], keys[i], col);\n    }\n  } else {\n    // We should not use goog.array.map here since we want to make sure that\n    // the index is undefined as well as make sure that col is passed to the\n    // function.\n    rv \x3d [];\n    for (var i \x3d 0; i \x3c l; i++) {\n      rv[i] \x3d f.call(/** @type {?} */ (opt_obj), values[i], undefined, col);\n    }\n  }\n  return rv;\n};\n\n\n/**\n * Calls f for each value in a collection. If any call returns true this returns\n * true (without checking the rest). If all returns false this returns false.\n *\n * @param {S} col The collection-like object.\n * @param {function(this:T,?,?,S):boolean} f The function to call for every\n *     value. This function takes 3 arguments (the value, the key or undefined\n *     if the collection has no notion of keys, and the collection) and should\n *     return a boolean.\n * @param {T\x3d} opt_obj  The object to be used as the value of \x27this\x27\n *     within `f`.\n * @return {boolean} True if any value passes the test.\n * @template T,S\n */\ngoog.structs.some \x3d function(col, f, opt_obj) {\n  if (typeof col.some \x3d\x3d \x27function\x27) {\n    return col.some(f, opt_obj);\n  }\n  if (goog.isArrayLike(col) || goog.isString(col)) {\n    return goog.array.some(/** @type {!Array\x3c?\x3e} */ (col), f, opt_obj);\n  }\n  var keys \x3d goog.structs.getKeys(col);\n  var values \x3d goog.structs.getValues(col);\n  var l \x3d values.length;\n  for (var i \x3d 0; i \x3c l; i++) {\n    if (f.call(/** @type {?} */ (opt_obj), values[i], keys \x26\x26 keys[i], col)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Calls f for each value in a collection. If all calls return true this return\n * true this returns true. If any returns false this returns false at this point\n *  and does not continue to check the remaining values.\n *\n * @param {S} col The collection-like object.\n * @param {function(this:T,?,?,S):boolean} f The function to call for every\n *     value. This function takes 3 arguments (the value, the key or\n *     undefined if the collection has no notion of keys, and the collection)\n *     and should return a boolean.\n * @param {T\x3d} opt_obj  The object to be used as the value of \x27this\x27\n *     within `f`.\n * @return {boolean} True if all key-value pairs pass the test.\n * @template T,S\n */\ngoog.structs.every \x3d function(col, f, opt_obj) {\n  if (typeof col.every \x3d\x3d \x27function\x27) {\n    return col.every(f, opt_obj);\n  }\n  if (goog.isArrayLike(col) || goog.isString(col)) {\n    return goog.array.every(/** @type {!Array\x3c?\x3e} */ (col), f, opt_obj);\n  }\n  var keys \x3d goog.structs.getKeys(col);\n  var values \x3d goog.structs.getValues(col);\n  var l \x3d values.length;\n  for (var i \x3d 0; i \x3c l; i++) {\n    if (!f.call(/** @type {?} */ (opt_obj), values[i], keys \x26\x26 keys[i], col)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/structs/structs.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/net/xhrio.js";
eval("// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Wrapper class for handling XmlHttpRequests.\n *\n * One off requests can be sent through goog.net.XhrIo.send() or an\n * instance can be created to send multiple requests.  Each request uses its\n * own XmlHttpRequest object and handles clearing of the event callback to\n * ensure no leaks.\n *\n * XhrIo is event based, it dispatches events on success, failure, finishing,\n * ready-state change, or progress (download and upload).\n *\n * The ready-state or timeout event fires first, followed by\n * a generic completed event. Then the abort, error, or success event\n * is fired as appropriate. Progress events are fired as they are\n * received. Lastly, the ready event will fire to indicate that the\n * object may be used to make another request.\n *\n * The error event may also be called before completed and\n * ready-state-change if the XmlHttpRequest.open() or .send() methods throw.\n *\n * This class does not support multiple requests, queuing, or prioritization.\n *\n * When progress events are supported by the browser, and progress is\n * enabled via .setProgressEventsEnabled(true), the\n * goog.net.EventType.PROGRESS event will be the re-dispatched browser\n * progress event. Additionally, a DOWNLOAD_PROGRESS or UPLOAD_PROGRESS event\n * will be fired for download and upload progress respectively.\n *\n * @author pupius@google.com (Daniel Pupius)\n */\n\n\ngoog.provide(\x27goog.net.XhrIo\x27);\ngoog.provide(\x27goog.net.XhrIo.ResponseType\x27);\n\ngoog.require(\x27goog.Timer\x27);\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.debug.entryPointRegistry\x27);\ngoog.require(\x27goog.events.EventTarget\x27);\ngoog.require(\x27goog.json.hybrid\x27);\ngoog.require(\x27goog.log\x27);\ngoog.require(\x27goog.net.ErrorCode\x27);\ngoog.require(\x27goog.net.EventType\x27);\ngoog.require(\x27goog.net.HttpStatus\x27);\ngoog.require(\x27goog.net.XmlHttp\x27);\ngoog.require(\x27goog.string\x27);\ngoog.require(\x27goog.structs\x27);\ngoog.require(\x27goog.structs.Map\x27);\ngoog.require(\x27goog.uri.utils\x27);\ngoog.require(\x27goog.userAgent\x27);\n\ngoog.forwardDeclare(\x27goog.Uri\x27);\n\n\n\n/**\n * Basic class for handling XMLHttpRequests.\n * @param {goog.net.XmlHttpFactory\x3d} opt_xmlHttpFactory Factory to use when\n *     creating XMLHttpRequest objects.\n * @constructor\n * @extends {goog.events.EventTarget}\n */\ngoog.net.XhrIo \x3d function(opt_xmlHttpFactory) {\n  goog.net.XhrIo.base(this, \x27constructor\x27);\n\n  /**\n   * Map of default headers to add to every request, use:\n   * XhrIo.headers.set(name, value)\n   * @type {!goog.structs.Map}\n   */\n  this.headers \x3d new goog.structs.Map();\n\n  /**\n   * Optional XmlHttpFactory\n   * @private {goog.net.XmlHttpFactory}\n   */\n  this.xmlHttpFactory_ \x3d opt_xmlHttpFactory || null;\n\n  /**\n   * Whether XMLHttpRequest is active.  A request is active from the time send()\n   * is called until onReadyStateChange() is complete, or error() or abort()\n   * is called.\n   * @private {boolean}\n   */\n  this.active_ \x3d false;\n\n  /**\n   * The XMLHttpRequest object that is being used for the transfer.\n   * @private {?goog.net.XhrLike.OrNative}\n   */\n  this.xhr_ \x3d null;\n\n  /**\n   * The options to use with the current XMLHttpRequest object.\n   * @private {Object}\n   */\n  this.xhrOptions_ \x3d null;\n\n  /**\n   * Last URL that was requested.\n   * @private {string|goog.Uri}\n   */\n  this.lastUri_ \x3d \x27\x27;\n\n  /**\n   * Method for the last request.\n   * @private {string}\n   */\n  this.lastMethod_ \x3d \x27\x27;\n\n  /**\n   * Last error code.\n   * @private {!goog.net.ErrorCode}\n   */\n  this.lastErrorCode_ \x3d goog.net.ErrorCode.NO_ERROR;\n\n  /**\n   * Last error message.\n   * @private {Error|string}\n   */\n  this.lastError_ \x3d \x27\x27;\n\n  /**\n   * Used to ensure that we don\x27t dispatch an multiple ERROR events. This can\n   * happen in IE when it does a synchronous load and one error is handled in\n   * the ready statte change and one is handled due to send() throwing an\n   * exception.\n   * @private {boolean}\n   */\n  this.errorDispatched_ \x3d false;\n\n  /**\n   * Used to make sure we don\x27t fire the complete event from inside a send call.\n   * @private {boolean}\n   */\n  this.inSend_ \x3d false;\n\n  /**\n   * Used in determining if a call to {@link #onReadyStateChange_} is from\n   * within a call to this.xhr_.open.\n   * @private {boolean}\n   */\n  this.inOpen_ \x3d false;\n\n  /**\n   * Used in determining if a call to {@link #onReadyStateChange_} is from\n   * within a call to this.xhr_.abort.\n   * @private {boolean}\n   */\n  this.inAbort_ \x3d false;\n\n  /**\n   * Number of milliseconds after which an incomplete request will be aborted\n   * and a {@link goog.net.EventType.TIMEOUT} event raised; 0 means no timeout\n   * is set.\n   * @private {number}\n   */\n  this.timeoutInterval_ \x3d 0;\n\n  /**\n   * Timer to track request timeout.\n   * @private {?number}\n   */\n  this.timeoutId_ \x3d null;\n\n  /**\n   * The requested type for the response. The empty string means use the default\n   * XHR behavior.\n   * @private {goog.net.XhrIo.ResponseType}\n   */\n  this.responseType_ \x3d goog.net.XhrIo.ResponseType.DEFAULT;\n\n  /**\n   * Whether a \x22credentialed\x22 request is to be sent (one that is aware of\n   * cookies and authentication). This is applicable only for cross-domain\n   * requests and more recent browsers that support this part of the HTTP Access\n   * Control standard.\n   *\n   * @see http://www.w3.org/TR/XMLHttpRequest/#the-withcredentials-attribute\n   *\n   * @private {boolean}\n   */\n  this.withCredentials_ \x3d false;\n\n  /**\n   * Whether progress events are enabled for this request. This is\n   * disabled by default because setting a progress event handler\n   * causes pre-flight OPTIONS requests to be sent for CORS requests,\n   * even in cases where a pre-flight request would not otherwise be\n   * sent.\n   *\n   * @see http://xhr.spec.whatwg.org/#security-considerations\n   *\n   * Note that this can cause problems for Firefox 22 and below, as an\n   * older \x22LSProgressEvent\x22 will be dispatched by the browser. That\n   * progress event is no longer supported, and can lead to failures,\n   * including throwing exceptions.\n   *\n   * @see http://bugzilla.mozilla.org/show_bug.cgi?id\x3d845631\n   * @see b/23469793\n   *\n   * @private {boolean}\n   */\n  this.progressEventsEnabled_ \x3d false;\n\n  /**\n   * True if we can use XMLHttpRequest\x27s timeout directly.\n   * @private {boolean}\n   */\n  this.useXhr2Timeout_ \x3d false;\n};\ngoog.inherits(goog.net.XhrIo, goog.events.EventTarget);\n\n\n/**\n * Response types that may be requested for XMLHttpRequests.\n * @enum {string}\n * @see http://www.w3.org/TR/XMLHttpRequest/#the-responsetype-attribute\n */\ngoog.net.XhrIo.ResponseType \x3d {\n  DEFAULT: \x27\x27,\n  TEXT: \x27text\x27,\n  DOCUMENT: \x27document\x27,\n  // Not supported as of Chrome 10.0.612.1 dev\n  BLOB: \x27blob\x27,\n  ARRAY_BUFFER: \x27arraybuffer\x27\n};\n\n\n/**\n * A reference to the XhrIo logger\n * @private {?goog.log.Logger}\n * @const\n */\ngoog.net.XhrIo.prototype.logger_ \x3d goog.log.getLogger(\x27goog.net.XhrIo\x27);\n\n\n/**\n * The Content-Type HTTP header name\n * @type {string}\n */\ngoog.net.XhrIo.CONTENT_TYPE_HEADER \x3d \x27Content-Type\x27;\n\n\n/**\n * The Content-Transfer-Encoding HTTP header name\n * @type {string}\n */\ngoog.net.XhrIo.CONTENT_TRANSFER_ENCODING \x3d \x27Content-Transfer-Encoding\x27;\n\n\n/**\n * The pattern matching the \x27http\x27 and \x27https\x27 URI schemes\n * @type {!RegExp}\n */\ngoog.net.XhrIo.HTTP_SCHEME_PATTERN \x3d /^https?$/i;\n\n\n/**\n * The methods that typically come along with form data.  We set different\n * headers depending on whether the HTTP action is one of these.\n * @type {!Array\x3cstring\x3e}\n */\ngoog.net.XhrIo.METHODS_WITH_FORM_DATA \x3d [\x27POST\x27, \x27PUT\x27];\n\n\n/**\n * The Content-Type HTTP header value for a url-encoded form\n * @type {string}\n */\ngoog.net.XhrIo.FORM_CONTENT_TYPE \x3d\n    \x27application/x-www-form-urlencoded;charset\x3dutf-8\x27;\n\n\n/**\n * The XMLHttpRequest Level two timeout delay ms property name.\n *\n * @see http://www.w3.org/TR/XMLHttpRequest/#the-timeout-attribute\n *\n * @private {string}\n * @const\n */\ngoog.net.XhrIo.XHR2_TIMEOUT_ \x3d \x27timeout\x27;\n\n\n/**\n * The XMLHttpRequest Level two ontimeout handler property name.\n *\n * @see http://www.w3.org/TR/XMLHttpRequest/#the-timeout-attribute\n *\n * @private {string}\n * @const\n */\ngoog.net.XhrIo.XHR2_ON_TIMEOUT_ \x3d \x27ontimeout\x27;\n\n\n/**\n * All non-disposed instances of goog.net.XhrIo created\n * by {@link goog.net.XhrIo.send} are in this Array.\n * @see goog.net.XhrIo.cleanup\n * @private {!Array\x3c!goog.net.XhrIo\x3e}\n */\ngoog.net.XhrIo.sendInstances_ \x3d [];\n\n\n/**\n * Static send that creates a short lived instance of XhrIo to send the\n * request.\n * @see goog.net.XhrIo.cleanup\n * @param {string|goog.Uri} url Uri to make request to.\n * @param {?function(this:goog.net.XhrIo, ?)\x3d} opt_callback Callback function\n *     for when request is complete.\n * @param {string\x3d} opt_method Send method, default: GET.\n * @param {ArrayBuffer|ArrayBufferView|Blob|Document|FormData|string\x3d}\n *     opt_content Body data.\n * @param {Object|goog.structs.Map\x3d} opt_headers Map of headers to add to the\n *     request.\n * @param {number\x3d} opt_timeoutInterval Number of milliseconds after which an\n *     incomplete request will be aborted; 0 means no timeout is set.\n * @param {boolean\x3d} opt_withCredentials Whether to send credentials with the\n *     request. Default to false. See {@link goog.net.XhrIo#setWithCredentials}.\n * @return {!goog.net.XhrIo} The sent XhrIo.\n */\ngoog.net.XhrIo.send \x3d function(\n    url, opt_callback, opt_method, opt_content, opt_headers,\n    opt_timeoutInterval, opt_withCredentials) {\n  var x \x3d new goog.net.XhrIo();\n  goog.net.XhrIo.sendInstances_.push(x);\n  if (opt_callback) {\n    x.listen(goog.net.EventType.COMPLETE, opt_callback);\n  }\n  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);\n  if (opt_timeoutInterval) {\n    x.setTimeoutInterval(opt_timeoutInterval);\n  }\n  if (opt_withCredentials) {\n    x.setWithCredentials(opt_withCredentials);\n  }\n  x.send(url, opt_method, opt_content, opt_headers);\n  return x;\n};\n\n\n/**\n * Disposes all non-disposed instances of goog.net.XhrIo created by\n * {@link goog.net.XhrIo.send}.\n * {@link goog.net.XhrIo.send} cleans up the goog.net.XhrIo instance\n * it creates when the request completes or fails.  However, if\n * the request never completes, then the goog.net.XhrIo is not disposed.\n * This can occur if the window is unloaded before the request completes.\n * We could have {@link goog.net.XhrIo.send} return the goog.net.XhrIo\n * it creates and make the client of {@link goog.net.XhrIo.send} be\n * responsible for disposing it in this case.  However, this makes things\n * significantly more complicated for the client, and the whole point\n * of {@link goog.net.XhrIo.send} is that it\x27s simple and easy to use.\n * Clients of {@link goog.net.XhrIo.send} should call\n * {@link goog.net.XhrIo.cleanup} when doing final\n * cleanup on window unload.\n */\ngoog.net.XhrIo.cleanup \x3d function() {\n  var instances \x3d goog.net.XhrIo.sendInstances_;\n  while (instances.length) {\n    instances.pop().dispose();\n  }\n};\n\n\n/**\n * Installs exception protection for all entry point introduced by\n * goog.net.XhrIo instances which are not protected by\n * {@link goog.debug.ErrorHandler#protectWindowSetTimeout},\n * {@link goog.debug.ErrorHandler#protectWindowSetInterval}, or\n * {@link goog.events.protectBrowserEventEntryPoint}.\n *\n * @param {goog.debug.ErrorHandler} errorHandler Error handler with which to\n *     protect the entry point(s).\n */\ngoog.net.XhrIo.protectEntryPoints \x3d function(errorHandler) {\n  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ \x3d\n      errorHandler.protectEntryPoint(\n          goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);\n};\n\n\n/**\n * Disposes of the specified goog.net.XhrIo created by\n * {@link goog.net.XhrIo.send} and removes it from\n * {@link goog.net.XhrIo.pendingStaticSendInstances_}.\n * @private\n */\ngoog.net.XhrIo.prototype.cleanupSend_ \x3d function() {\n  this.dispose();\n  goog.array.remove(goog.net.XhrIo.sendInstances_, this);\n};\n\n\n/**\n * Returns the number of milliseconds after which an incomplete request will be\n * aborted, or 0 if no timeout is set.\n * @return {number} Timeout interval in milliseconds.\n */\ngoog.net.XhrIo.prototype.getTimeoutInterval \x3d function() {\n  return this.timeoutInterval_;\n};\n\n\n/**\n * Sets the number of milliseconds after which an incomplete request will be\n * aborted and a {@link goog.net.EventType.TIMEOUT} event raised; 0 means no\n * timeout is set.\n * @param {number} ms Timeout interval in milliseconds; 0 means none.\n */\ngoog.net.XhrIo.prototype.setTimeoutInterval \x3d function(ms) {\n  this.timeoutInterval_ \x3d Math.max(0, ms);\n};\n\n\n/**\n * Sets the desired type for the response. At time of writing, this is only\n * supported in very recent versions of WebKit (10.0.612.1 dev and later).\n *\n * If this is used, the response may only be accessed via {@link #getResponse}.\n *\n * @param {goog.net.XhrIo.ResponseType} type The desired type for the response.\n */\ngoog.net.XhrIo.prototype.setResponseType \x3d function(type) {\n  this.responseType_ \x3d type;\n};\n\n\n/**\n * Gets the desired type for the response.\n * @return {goog.net.XhrIo.ResponseType} The desired type for the response.\n */\ngoog.net.XhrIo.prototype.getResponseType \x3d function() {\n  return this.responseType_;\n};\n\n\n/**\n * Sets whether a \x22credentialed\x22 request that is aware of cookie and\n * authentication information should be made. This option is only supported by\n * browsers that support HTTP Access Control. As of this writing, this option\n * is not supported in IE.\n *\n * @param {boolean} withCredentials Whether this should be a \x22credentialed\x22\n *     request.\n */\ngoog.net.XhrIo.prototype.setWithCredentials \x3d function(withCredentials) {\n  this.withCredentials_ \x3d withCredentials;\n};\n\n\n/**\n * Gets whether a \x22credentialed\x22 request is to be sent.\n * @return {boolean} The desired type for the response.\n */\ngoog.net.XhrIo.prototype.getWithCredentials \x3d function() {\n  return this.withCredentials_;\n};\n\n\n/**\n * Sets whether progress events are enabled for this request. Note\n * that progress events require pre-flight OPTIONS request handling\n * for CORS requests, and may cause trouble with older browsers. See\n * progressEventsEnabled_ for details.\n * @param {boolean} enabled Whether progress events should be enabled.\n */\ngoog.net.XhrIo.prototype.setProgressEventsEnabled \x3d function(enabled) {\n  this.progressEventsEnabled_ \x3d enabled;\n};\n\n\n/**\n * Gets whether progress events are enabled.\n * @return {boolean} Whether progress events are enabled for this request.\n */\ngoog.net.XhrIo.prototype.getProgressEventsEnabled \x3d function() {\n  return this.progressEventsEnabled_;\n};\n\n\n/**\n * Instance send that actually uses XMLHttpRequest to make a server call.\n * @param {string|goog.Uri} url Uri to make request to.\n * @param {string\x3d} opt_method Send method, default: GET.\n * @param {ArrayBuffer|ArrayBufferView|Blob|Document|FormData|string\x3d}\n *     opt_content Body data.\n * @param {Object|goog.structs.Map\x3d} opt_headers Map of headers to add to the\n *     request.\n * @suppress {deprecated} Use deprecated goog.structs.forEach to allow different\n * types of parameters for opt_headers.\n */\ngoog.net.XhrIo.prototype.send \x3d function(\n    url, opt_method, opt_content, opt_headers) {\n  if (this.xhr_) {\n    throw new Error(\n        \x27[goog.net.XhrIo] Object is active with another request\x3d\x27 +\n        this.lastUri_ + \x27; newUri\x3d\x27 + url);\n  }\n\n  var method \x3d opt_method ? opt_method.toUpperCase() : \x27GET\x27;\n\n  this.lastUri_ \x3d url;\n  this.lastError_ \x3d \x27\x27;\n  this.lastErrorCode_ \x3d goog.net.ErrorCode.NO_ERROR;\n  this.lastMethod_ \x3d method;\n  this.errorDispatched_ \x3d false;\n  this.active_ \x3d true;\n\n  // Use the factory to create the XHR object and options\n  this.xhr_ \x3d this.createXhr();\n  this.xhrOptions_ \x3d this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() :\n                                            goog.net.XmlHttp.getOptions();\n\n  // Set up the onreadystatechange callback\n  this.xhr_.onreadystatechange \x3d goog.bind(this.onReadyStateChange_, this);\n\n  // Set up upload/download progress events, if progress events are supported.\n  if (this.getProgressEventsEnabled() \x26\x26 \x27onprogress\x27 in this.xhr_) {\n    this.xhr_.onprogress \x3d\n        goog.bind(function(e) { this.onProgressHandler_(e, true); }, this);\n    if (this.xhr_.upload) {\n      this.xhr_.upload.onprogress \x3d goog.bind(this.onProgressHandler_, this);\n    }\n  }\n\n  /**\n   * Try to open the XMLHttpRequest (always async), if an error occurs here it\n   * is generally permission denied\n   */\n  try {\n    goog.log.fine(this.logger_, this.formatMsg_(\x27Opening Xhr\x27));\n    this.inOpen_ \x3d true;\n    this.xhr_.open(method, String(url), true);  // Always async!\n    this.inOpen_ \x3d false;\n  } catch (err) {\n    goog.log.fine(\n        this.logger_, this.formatMsg_(\x27Error opening Xhr: \x27 + err.message));\n    this.error_(goog.net.ErrorCode.EXCEPTION, err);\n    return;\n  }\n\n  // We can\x27t use null since this won\x27t allow requests with form data to have a\n  // content length specified which will cause some proxies to return a 411\n  // error.\n  var content \x3d opt_content || \x27\x27;\n\n  var headers \x3d this.headers.clone();\n\n  // Add headers specific to this request\n  if (opt_headers) {\n    goog.structs.forEach(\n        opt_headers, function(value, key) { headers.set(key, value); });\n  }\n\n  // Find whether a content type header is set, ignoring case.\n  // HTTP header names are case-insensitive.  See:\n  // http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\n  var contentTypeKey \x3d\n      goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);\n\n  var contentIsFormData \x3d\n      (goog.global[\x27FormData\x27] \x26\x26 (content instanceof goog.global[\x27FormData\x27]));\n  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) \x26\x26\n      !contentTypeKey \x26\x26 !contentIsFormData) {\n    // For requests typically with form data, default to the url-encoded form\n    // content type unless this is a FormData request.  For FormData,\n    // the browser will automatically add a multipart/form-data content type\n    // with an appropriate multipart boundary.\n    headers.set(\n        goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);\n  }\n\n  // Add the headers to the Xhr object\n  headers.forEach(function(value, key) {\n    this.xhr_.setRequestHeader(key, value);\n  }, this);\n\n  if (this.responseType_) {\n    this.xhr_.responseType \x3d this.responseType_;\n  }\n  // Set xhr_.withCredentials only when the value is different, or else in\n  // synchronous XMLHtppRequest.open Firefox will throw an exception.\n  // https://bugzilla.mozilla.org/show_bug.cgi?id\x3d736340\n  if (\x27withCredentials\x27 in this.xhr_ \x26\x26\n      this.xhr_.withCredentials !\x3d\x3d this.withCredentials_) {\n    this.xhr_.withCredentials \x3d this.withCredentials_;\n  }\n\n  /**\n   * Try to send the request, or other wise report an error (404 not found).\n   */\n  try {\n    this.cleanUpTimeoutTimer_();  // Paranoid, should never be running.\n    if (this.timeoutInterval_ \x3e 0) {\n      this.useXhr2Timeout_ \x3d goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);\n      goog.log.fine(\n          this.logger_, this.formatMsg_(\n                            \x27Will abort after \x27 + this.timeoutInterval_ +\n                            \x27ms if incomplete, xhr2 \x27 + this.useXhr2Timeout_));\n      if (this.useXhr2Timeout_) {\n        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] \x3d this.timeoutInterval_;\n        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] \x3d\n            goog.bind(this.timeout_, this);\n      } else {\n        this.timeoutId_ \x3d\n            goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);\n      }\n    }\n    goog.log.fine(this.logger_, this.formatMsg_(\x27Sending request\x27));\n    this.inSend_ \x3d true;\n    this.xhr_.send(content);\n    this.inSend_ \x3d false;\n\n  } catch (err) {\n    goog.log.fine(this.logger_, this.formatMsg_(\x27Send error: \x27 + err.message));\n    this.error_(goog.net.ErrorCode.EXCEPTION, err);\n  }\n};\n\n\n/**\n * Determines if the argument is an XMLHttpRequest that supports the level 2\n * timeout value and event.\n *\n * Currently, FF 21.0 OS X has the fields but won\x27t actually call the timeout\n * handler.  Perhaps the confusion in the bug referenced below hasn\x27t\n * entirely been resolved.\n *\n * @see http://www.w3.org/TR/XMLHttpRequest/#the-timeout-attribute\n * @see https://bugzilla.mozilla.org/show_bug.cgi?id\x3d525816\n *\n * @param {!goog.net.XhrLike.OrNative} xhr The request.\n * @return {boolean} True if the request supports level 2 timeout.\n * @private\n */\ngoog.net.XhrIo.shouldUseXhr2Timeout_ \x3d function(xhr) {\n  return goog.userAgent.IE \x26\x26 goog.userAgent.isVersionOrHigher(9) \x26\x26\n      goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) \x26\x26\n      goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);\n};\n\n\n/**\n * @param {string} header An HTTP header key.\n * @return {boolean} Whether the key is a content type header (ignoring\n *     case.\n * @private\n */\ngoog.net.XhrIo.isContentTypeHeader_ \x3d function(header) {\n  return goog.string.caseInsensitiveEquals(\n      goog.net.XhrIo.CONTENT_TYPE_HEADER, header);\n};\n\n\n/**\n * Creates a new XHR object.\n * @return {!goog.net.XhrLike.OrNative} The newly created XHR object.\n * @protected\n */\ngoog.net.XhrIo.prototype.createXhr \x3d function() {\n  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() :\n                                goog.net.XmlHttp();\n};\n\n\n/**\n * The request didn\x27t complete after {@link goog.net.XhrIo#timeoutInterval_}\n * milliseconds; raises a {@link goog.net.EventType.TIMEOUT} event and aborts\n * the request.\n * @private\n */\ngoog.net.XhrIo.prototype.timeout_ \x3d function() {\n  if (typeof goog \x3d\x3d \x27undefined\x27) {\n    // If goog is undefined then the callback has occurred as the application\n    // is unloading and will error.  Thus we let it silently fail.\n  } else if (this.xhr_) {\n    this.lastError_ \x3d\n        \x27Timed out after \x27 + this.timeoutInterval_ + \x27ms, aborting\x27;\n    this.lastErrorCode_ \x3d goog.net.ErrorCode.TIMEOUT;\n    goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));\n    this.dispatchEvent(goog.net.EventType.TIMEOUT);\n    this.abort(goog.net.ErrorCode.TIMEOUT);\n  }\n};\n\n\n/**\n * Something errorred, so inactivate, fire error callback and clean up\n * @param {goog.net.ErrorCode} errorCode The error code.\n * @param {Error} err The error object.\n * @private\n */\ngoog.net.XhrIo.prototype.error_ \x3d function(errorCode, err) {\n  this.active_ \x3d false;\n  if (this.xhr_) {\n    this.inAbort_ \x3d true;\n    this.xhr_.abort();  // Ensures XHR isn\x27t hung (FF)\n    this.inAbort_ \x3d false;\n  }\n  this.lastError_ \x3d err;\n  this.lastErrorCode_ \x3d errorCode;\n  this.dispatchErrors_();\n  this.cleanUpXhr_();\n};\n\n\n/**\n * Dispatches COMPLETE and ERROR in case of an error. This ensures that we do\n * not dispatch multiple error events.\n * @private\n */\ngoog.net.XhrIo.prototype.dispatchErrors_ \x3d function() {\n  if (!this.errorDispatched_) {\n    this.errorDispatched_ \x3d true;\n    this.dispatchEvent(goog.net.EventType.COMPLETE);\n    this.dispatchEvent(goog.net.EventType.ERROR);\n  }\n};\n\n\n/**\n * Abort the current XMLHttpRequest\n * @param {goog.net.ErrorCode\x3d} opt_failureCode Optional error code to use -\n *     defaults to ABORT.\n */\ngoog.net.XhrIo.prototype.abort \x3d function(opt_failureCode) {\n  if (this.xhr_ \x26\x26 this.active_) {\n    goog.log.fine(this.logger_, this.formatMsg_(\x27Aborting\x27));\n    this.active_ \x3d false;\n    this.inAbort_ \x3d true;\n    this.xhr_.abort();\n    this.inAbort_ \x3d false;\n    this.lastErrorCode_ \x3d opt_failureCode || goog.net.ErrorCode.ABORT;\n    this.dispatchEvent(goog.net.EventType.COMPLETE);\n    this.dispatchEvent(goog.net.EventType.ABORT);\n    this.cleanUpXhr_();\n  }\n};\n\n\n/**\n * Nullifies all callbacks to reduce risks of leaks.\n * @override\n * @protected\n */\ngoog.net.XhrIo.prototype.disposeInternal \x3d function() {\n  if (this.xhr_) {\n    // We explicitly do not call xhr_.abort() unless active_ is still true.\n    // This is to avoid unnecessarily aborting a successful request when\n    // dispose() is called in a callback triggered by a complete response, but\n    // in which browser cleanup has not yet finished.\n    // (See http://b/issue?id\x3d1684217.)\n    if (this.active_) {\n      this.active_ \x3d false;\n      this.inAbort_ \x3d true;\n      this.xhr_.abort();\n      this.inAbort_ \x3d false;\n    }\n    this.cleanUpXhr_(true);\n  }\n\n  goog.net.XhrIo.base(this, \x27disposeInternal\x27);\n};\n\n\n/**\n * Internal handler for the XHR object\x27s readystatechange event.  This method\n * checks the status and the readystate and fires the correct callbacks.\n * If the request has ended, the handlers are cleaned up and the XHR object is\n * nullified.\n * @private\n */\ngoog.net.XhrIo.prototype.onReadyStateChange_ \x3d function() {\n  if (this.isDisposed()) {\n    // This method is the target of an untracked goog.Timer.callOnce().\n    return;\n  }\n  if (!this.inOpen_ \x26\x26 !this.inSend_ \x26\x26 !this.inAbort_) {\n    // Were not being called from within a call to this.xhr_.send\n    // this.xhr_.abort, or this.xhr_.open, so this is an entry point\n    this.onReadyStateChangeEntryPoint_();\n  } else {\n    this.onReadyStateChangeHelper_();\n  }\n};\n\n\n/**\n * Used to protect the onreadystatechange handler entry point.  Necessary\n * as {#onReadyStateChange_} maybe called from within send or abort, this\n * method is only called when {#onReadyStateChange_} is called as an\n * entry point.\n * {@see #protectEntryPoints}\n * @private\n */\ngoog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ \x3d function() {\n  this.onReadyStateChangeHelper_();\n};\n\n\n/**\n * Helper for {@link #onReadyStateChange_}.  This is used so that\n * entry point calls to {@link #onReadyStateChange_} can be routed through\n * {@link #onReadyStateChangeEntryPoint_}.\n * @private\n */\ngoog.net.XhrIo.prototype.onReadyStateChangeHelper_ \x3d function() {\n  if (!this.active_) {\n    // can get called inside abort call\n    return;\n  }\n\n  if (typeof goog \x3d\x3d \x27undefined\x27) {\n    // NOTE(pupius): If goog is undefined then the callback has occurred as the\n    // application is unloading and will error.  Thus we let it silently fail.\n\n  } else if (\n      this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] \x26\x26\n      this.getReadyState() \x3d\x3d goog.net.XmlHttp.ReadyState.COMPLETE \x26\x26\n      this.getStatus() \x3d\x3d 2) {\n    // NOTE(pupius): In IE if send() errors on a *local* request the readystate\n    // is still changed to COMPLETE.  We need to ignore it and allow the\n    // try/catch around send() to pick up the error.\n    goog.log.fine(\n        this.logger_,\n        this.formatMsg_(\x27Local request error detected and ignored\x27));\n\n  } else {\n    // In IE when the response has been cached we sometimes get the callback\n    // from inside the send call and this usually breaks code that assumes that\n    // XhrIo is asynchronous.  If that is the case we delay the callback\n    // using a timer.\n    if (this.inSend_ \x26\x26\n        this.getReadyState() \x3d\x3d goog.net.XmlHttp.ReadyState.COMPLETE) {\n      goog.Timer.callOnce(this.onReadyStateChange_, 0, this);\n      return;\n    }\n\n    this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);\n\n    // readyState indicates the transfer has finished\n    if (this.isComplete()) {\n      goog.log.fine(this.logger_, this.formatMsg_(\x27Request complete\x27));\n\n      this.active_ \x3d false;\n\n      try {\n        // Call the specific callbacks for success or failure. Only call the\n        // success if the status is 200 (HTTP_OK) or 304 (HTTP_CACHED)\n        if (this.isSuccess()) {\n          this.dispatchEvent(goog.net.EventType.COMPLETE);\n          this.dispatchEvent(goog.net.EventType.SUCCESS);\n        } else {\n          this.lastErrorCode_ \x3d goog.net.ErrorCode.HTTP_ERROR;\n          this.lastError_ \x3d\n              this.getStatusText() + \x27 [\x27 + this.getStatus() + \x27]\x27;\n          this.dispatchErrors_();\n        }\n      } finally {\n        this.cleanUpXhr_();\n      }\n    }\n  }\n};\n\n\n/**\n * Internal handler for the XHR object\x27s onprogress event. Fires both a generic\n * PROGRESS event and either a DOWNLOAD_PROGRESS or UPLOAD_PROGRESS event to\n * allow specific binding for each XHR progress event.\n * @param {!ProgressEvent} e XHR progress event.\n * @param {boolean\x3d} opt_isDownload Whether the current progress event is from a\n *     download. Used to determine whether DOWNLOAD_PROGRESS or UPLOAD_PROGRESS\n *     event should be dispatched.\n * @private\n */\ngoog.net.XhrIo.prototype.onProgressHandler_ \x3d function(e, opt_isDownload) {\n  goog.asserts.assert(\n      e.type \x3d\x3d\x3d goog.net.EventType.PROGRESS,\n      \x27goog.net.EventType.PROGRESS is of the same type as raw XHR progress.\x27);\n  this.dispatchEvent(\n      goog.net.XhrIo.buildProgressEvent_(e, goog.net.EventType.PROGRESS));\n  this.dispatchEvent(\n      goog.net.XhrIo.buildProgressEvent_(\n          e, opt_isDownload ? goog.net.EventType.DOWNLOAD_PROGRESS :\n                              goog.net.EventType.UPLOAD_PROGRESS));\n};\n\n\n/**\n * Creates a representation of the native ProgressEvent. IE doesn\x27t support\n * constructing ProgressEvent via \x22new\x22, and the alternatives (e.g.,\n * ProgressEvent.initProgressEvent) are non-standard or deprecated.\n * @param {!ProgressEvent} e XHR progress event.\n * @param {!goog.net.EventType} eventType The type of the event.\n * @return {!ProgressEvent} The progress event.\n * @private\n */\ngoog.net.XhrIo.buildProgressEvent_ \x3d function(e, eventType) {\n  return /** @type {!ProgressEvent} */ ({\n    type: eventType,\n    lengthComputable: e.lengthComputable,\n    loaded: e.loaded,\n    total: e.total\n  });\n};\n\n\n/**\n * Remove the listener to protect against leaks, and nullify the XMLHttpRequest\n * object.\n * @param {boolean\x3d} opt_fromDispose If this is from the dispose (don\x27t want to\n *     fire any events).\n * @private\n */\ngoog.net.XhrIo.prototype.cleanUpXhr_ \x3d function(opt_fromDispose) {\n  if (this.xhr_) {\n    // Cancel any pending timeout event handler.\n    this.cleanUpTimeoutTimer_();\n\n    // Save reference so we can mark it as closed after the READY event.  The\n    // READY event may trigger another request, thus we must nullify this.xhr_\n    var xhr \x3d this.xhr_;\n    var clearedOnReadyStateChange \x3d\n        this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ?\n        goog.nullFunction :\n        null;\n    this.xhr_ \x3d null;\n    this.xhrOptions_ \x3d null;\n\n    if (!opt_fromDispose) {\n      this.dispatchEvent(goog.net.EventType.READY);\n    }\n\n    try {\n      // NOTE(pupius): Not nullifying in FireFox can still leak if the callbacks\n      // are defined in the same scope as the instance of XhrIo. But, IE doesn\x27t\n      // allow you to set the onreadystatechange to NULL so nullFunction is\n      // used.\n      xhr.onreadystatechange \x3d clearedOnReadyStateChange;\n    } catch (e) {\n      // This seems to occur with a Gears HTTP request. Delayed the setting of\n      // this onreadystatechange until after READY is sent out and catching the\n      // error to see if we can track down the problem.\n      goog.log.error(\n          this.logger_,\n          \x27Problem encountered resetting onreadystatechange: \x27 + e.message);\n    }\n  }\n};\n\n\n/**\n * Make sure the timeout timer isn\x27t running.\n * @private\n */\ngoog.net.XhrIo.prototype.cleanUpTimeoutTimer_ \x3d function() {\n  if (this.xhr_ \x26\x26 this.useXhr2Timeout_) {\n    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] \x3d null;\n  }\n  if (this.timeoutId_) {\n    goog.Timer.clear(this.timeoutId_);\n    this.timeoutId_ \x3d null;\n  }\n};\n\n\n/**\n * @return {boolean} Whether there is an active request.\n */\ngoog.net.XhrIo.prototype.isActive \x3d function() {\n  return !!this.xhr_;\n};\n\n\n/**\n * @return {boolean} Whether the request has completed.\n */\ngoog.net.XhrIo.prototype.isComplete \x3d function() {\n  return this.getReadyState() \x3d\x3d goog.net.XmlHttp.ReadyState.COMPLETE;\n};\n\n\n/**\n * @return {boolean} Whether the request completed with a success.\n */\ngoog.net.XhrIo.prototype.isSuccess \x3d function() {\n  var status \x3d this.getStatus();\n  // A zero status code is considered successful for local files.\n  return goog.net.HttpStatus.isSuccess(status) ||\n      status \x3d\x3d\x3d 0 \x26\x26 !this.isLastUriEffectiveSchemeHttp_();\n};\n\n\n/**\n * @return {boolean} whether the effective scheme of the last URI that was\n *     fetched was \x27http\x27 or \x27https\x27.\n * @private\n */\ngoog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ \x3d function() {\n  var scheme \x3d goog.uri.utils.getEffectiveScheme(String(this.lastUri_));\n  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);\n};\n\n\n/**\n * Get the readystate from the Xhr object\n * Will only return correct result when called from the context of a callback\n * @return {goog.net.XmlHttp.ReadyState} goog.net.XmlHttp.ReadyState.*.\n */\ngoog.net.XhrIo.prototype.getReadyState \x3d function() {\n  return this.xhr_ ?\n      /** @type {goog.net.XmlHttp.ReadyState} */ (this.xhr_.readyState) :\n                                                 goog.net.XmlHttp.ReadyState\n                                                     .UNINITIALIZED;\n};\n\n\n/**\n * Get the status from the Xhr object\n * Will only return correct result when called from the context of a callback\n * @return {number} Http status.\n */\ngoog.net.XhrIo.prototype.getStatus \x3d function() {\n  /**\n   * IE doesn\x27t like you checking status until the readystate is greater than 2\n   * (i.e. it is receiving or complete).  The try/catch is used for when the\n   * page is unloading and an ERROR_NOT_AVAILABLE may occur when accessing xhr_.\n   */\n  try {\n    return this.getReadyState() \x3e goog.net.XmlHttp.ReadyState.LOADED ?\n        this.xhr_.status :\n        -1;\n  } catch (e) {\n    return -1;\n  }\n};\n\n\n/**\n * Get the status text from the Xhr object\n * Will only return correct result when called from the context of a callback\n * @return {string} Status text.\n */\ngoog.net.XhrIo.prototype.getStatusText \x3d function() {\n  /**\n   * IE doesn\x27t like you checking status until the readystate is greater than 2\n   * (i.e. it is receiving or complete).  The try/catch is used for when the\n   * page is unloading and an ERROR_NOT_AVAILABLE may occur when accessing xhr_.\n   */\n  try {\n    return this.getReadyState() \x3e goog.net.XmlHttp.ReadyState.LOADED ?\n        this.xhr_.statusText :\n        \x27\x27;\n  } catch (e) {\n    goog.log.fine(this.logger_, \x27Can not get status: \x27 + e.message);\n    return \x27\x27;\n  }\n};\n\n\n/**\n * Get the last Uri that was requested\n * @return {string} Last Uri.\n */\ngoog.net.XhrIo.prototype.getLastUri \x3d function() {\n  return String(this.lastUri_);\n};\n\n\n/**\n * Get the response text from the Xhr object\n * Will only return correct result when called from the context of a callback.\n * @return {string} Result from the server, or \x27\x27 if no result available.\n */\ngoog.net.XhrIo.prototype.getResponseText \x3d function() {\n  try {\n    return this.xhr_ ? this.xhr_.responseText : \x27\x27;\n  } catch (e) {\n    // http://www.w3.org/TR/XMLHttpRequest/#the-responsetext-attribute\n    // states that responseText should return \x27\x27 (and responseXML null)\n    // when the state is not LOADING or DONE. Instead, IE can\n    // throw unexpected exceptions, for example when a request is aborted\n    // or no data is available yet.\n    goog.log.fine(this.logger_, \x27Can not get responseText: \x27 + e.message);\n    return \x27\x27;\n  }\n};\n\n\n/**\n * Get the response body from the Xhr object. This property is only available\n * in IE since version 7 according to MSDN:\n * http://msdn.microsoft.com/en-us/library/ie/ms534368(v\x3dvs.85).aspx\n * Will only return correct result when called from the context of a callback.\n *\n * One option is to construct a VBArray from the returned object and convert\n * it to a JavaScript array using the toArray method:\n * {@code (new window[\x27VBArray\x27](xhrIo.getResponseBody())).toArray()}\n * This will result in an array of numbers in the range of [0..255]\n *\n * Another option is to use the VBScript CStr method to convert it into a\n * string as outlined in http://stackoverflow.com/questions/1919972\n *\n * @return {Object} Binary result from the server or null if not available.\n */\ngoog.net.XhrIo.prototype.getResponseBody \x3d function() {\n\n  try {\n    if (this.xhr_ \x26\x26 \x27responseBody\x27 in this.xhr_) {\n      return this.xhr_[\x27responseBody\x27];\n    }\n  } catch (e) {\n    // IE can throw unexpected exceptions, for example when a request is aborted\n    // or no data is yet available.\n    goog.log.fine(this.logger_, \x27Can not get responseBody: \x27 + e.message);\n  }\n  return null;\n};\n\n\n/**\n * Get the response XML from the Xhr object\n * Will only return correct result when called from the context of a callback.\n * @return {Document} The DOM Document representing the XML file, or null\n * if no result available.\n */\ngoog.net.XhrIo.prototype.getResponseXml \x3d function() {\n\n  try {\n    return this.xhr_ ? this.xhr_.responseXML : null;\n  } catch (e) {\n    goog.log.fine(this.logger_, \x27Can not get responseXML: \x27 + e.message);\n    return null;\n  }\n};\n\n\n/**\n * Get the response and evaluates it as JSON from the Xhr object\n * Will only return correct result when called from the context of a callback\n * @param {string\x3d} opt_xssiPrefix Optional XSSI prefix string to use for\n *     stripping of the response before parsing. This needs to be set only if\n *     your backend server prepends the same prefix string to the JSON response.\n * @throws Error if the response text is invalid JSON.\n * @return {Object|undefined} JavaScript object.\n */\ngoog.net.XhrIo.prototype.getResponseJson \x3d function(opt_xssiPrefix) {\n  if (!this.xhr_) {\n    return undefined;\n  }\n\n  var responseText \x3d this.xhr_.responseText;\n  if (opt_xssiPrefix \x26\x26 responseText.indexOf(opt_xssiPrefix) \x3d\x3d 0) {\n    responseText \x3d responseText.substring(opt_xssiPrefix.length);\n  }\n\n  return goog.json.hybrid.parse(responseText);\n};\n\n\n/**\n * Get the response as the type specificed by {@link #setResponseType}. At time\n * of writing, this is only directly supported in very recent versions of WebKit\n * (10.0.612.1 dev and later). If the field is not supported directly, we will\n * try to emulate it.\n *\n * Emulating the response means following the rules laid out at\n * http://www.w3.org/TR/XMLHttpRequest/#the-response-attribute\n *\n * On browsers with no support for this (Chrome \x3c 10, Firefox \x3c 4, etc), only\n * response types of DEFAULT or TEXT may be used, and the response returned will\n * be the text response.\n *\n * On browsers with Mozilla\x27s draft support for array buffers (Firefox 4, 5),\n * only response types of DEFAULT, TEXT, and ARRAY_BUFFER may be used, and the\n * response returned will be either the text response or the Mozilla\n * implementation of the array buffer response.\n *\n * On browsers will full support, any valid response type supported by the\n * browser may be used, and the response provided by the browser will be\n * returned.\n *\n * @return {*} The response.\n */\ngoog.net.XhrIo.prototype.getResponse \x3d function() {\n\n  try {\n    if (!this.xhr_) {\n      return null;\n    }\n    if (\x27response\x27 in this.xhr_) {\n      return this.xhr_.response;\n    }\n    switch (this.responseType_) {\n      case goog.net.XhrIo.ResponseType.DEFAULT:\n      case goog.net.XhrIo.ResponseType.TEXT:\n        return this.xhr_.responseText;\n      // DOCUMENT and BLOB don\x27t need to be handled here because they are\n      // introduced in the same spec that adds the .response field, and would\n      // have been caught above.\n      // ARRAY_BUFFER needs an implementation for Firefox 4, where it was\n      // implemented using a draft spec rather than the final spec.\n      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:\n        if (\x27mozResponseArrayBuffer\x27 in this.xhr_) {\n          return this.xhr_.mozResponseArrayBuffer;\n        }\n    }\n    // Fell through to a response type that is not supported on this browser.\n    goog.log.error(\n        this.logger_, \x27Response type \x27 + this.responseType_ + \x27 is not \x27 +\n            \x27supported on this browser\x27);\n    return null;\n  } catch (e) {\n    goog.log.fine(this.logger_, \x27Can not get response: \x27 + e.message);\n    return null;\n  }\n};\n\n\n/**\n * Get the value of the response-header with the given name from the Xhr object\n * Will only return correct result when called from the context of a callback\n * and the request has completed\n * @param {string} key The name of the response-header to retrieve.\n * @return {string|undefined} The value of the response-header named key.\n */\ngoog.net.XhrIo.prototype.getResponseHeader \x3d function(key) {\n  if (!this.xhr_ || !this.isComplete()) {\n    return undefined;\n  }\n\n  var value \x3d this.xhr_.getResponseHeader(key);\n  return goog.isNull(value) ? undefined : value;\n};\n\n\n/**\n * Gets the text of all the headers in the response.\n * Will only return correct result when called from the context of a callback\n * and the request has completed.\n * @return {string} The value of the response headers or empty string.\n */\ngoog.net.XhrIo.prototype.getAllResponseHeaders \x3d function() {\n  // getAllResponseHeaders can return null if no response has been received,\n  // ensure we always return an empty string.\n  return this.xhr_ \x26\x26 this.isComplete() ?\n      (this.xhr_.getAllResponseHeaders() || \x27\x27) :\n      \x27\x27;\n};\n\n\n/**\n * Returns all response headers as a key-value map.\n * Multiple values for the same header key can be combined into one,\n * separated by a comma and a space.\n * Note that the native getResponseHeader method for retrieving a single header\n * does a case insensitive match on the header name. This method does not\n * include any case normalization logic, it will just return a key-value\n * representation of the headers.\n * See: http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method\n * @return {!Object\x3cstring, string\x3e} An object with the header keys as keys\n *     and header values as values.\n */\ngoog.net.XhrIo.prototype.getResponseHeaders \x3d function() {\n  var headersObject \x3d {};\n  var headersArray \x3d this.getAllResponseHeaders().split(\x27\\r\\n\x27);\n  for (var i \x3d 0; i \x3c headersArray.length; i++) {\n    if (goog.string.isEmptyOrWhitespace(headersArray[i])) {\n      continue;\n    }\n    var keyValue \x3d goog.string.splitLimit(headersArray[i], \x27: \x27, 2);\n    if (headersObject[keyValue[0]]) {\n      headersObject[keyValue[0]] +\x3d \x27, \x27 + keyValue[1];\n    } else {\n      headersObject[keyValue[0]] \x3d keyValue[1];\n    }\n  }\n  return headersObject;\n};\n\n\n/**\n * Get the value of the response-header with the given name from the Xhr object.\n * As opposed to {@link #getResponseHeader}, this method does not require that\n * the request has completed.\n * @param {string} key The name of the response-header to retrieve.\n * @return {?string} The value of the response-header, or null if it is\n *     unavailable.\n */\ngoog.net.XhrIo.prototype.getStreamingResponseHeader \x3d function(key) {\n  return this.xhr_ ? this.xhr_.getResponseHeader(key) : null;\n};\n\n\n/**\n * Gets the text of all the headers in the response. As opposed to\n * {@link #getAllResponseHeaders}, this method does not require that the request\n * has completed.\n * @return {string} The value of the response headers or empty string.\n */\ngoog.net.XhrIo.prototype.getAllStreamingResponseHeaders \x3d function() {\n  return this.xhr_ ? this.xhr_.getAllResponseHeaders() : \x27\x27;\n};\n\n\n/**\n * Get the last error message\n * @return {!goog.net.ErrorCode} Last error code.\n */\ngoog.net.XhrIo.prototype.getLastErrorCode \x3d function() {\n  return this.lastErrorCode_;\n};\n\n\n/**\n * Get the last error message\n * @return {string} Last error message.\n */\ngoog.net.XhrIo.prototype.getLastError \x3d function() {\n  return goog.isString(this.lastError_) ? this.lastError_ :\n                                          String(this.lastError_);\n};\n\n\n/**\n * Adds the last method, status and URI to the message.  This is used to add\n * this information to the logging calls.\n * @param {string} msg The message text that we want to add the extra text to.\n * @return {string} The message with the extra text appended.\n * @private\n */\ngoog.net.XhrIo.prototype.formatMsg_ \x3d function(msg) {\n  return msg + \x27 [\x27 + this.lastMethod_ + \x27 \x27 + this.lastUri_ + \x27 \x27 +\n      this.getStatus() + \x27]\x27;\n};\n\n\n// Register the xhr handler as an entry point, so that\n// it can be monitored for exception handling, etc.\ngoog.debug.entryPointRegistry.register(\n    /**\n     * @param {function(!Function): !Function} transformer The transforming\n     *     function.\n     */\n    function(transformer) {\n      goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ \x3d\n          transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);\n    });\n\n//# sourceURL\x3dhttps://qs/javascript/closure/net/xhrio.js\n");

$googDebugFname=undefined;
var $googDebugFname="wireless/android/play/playlog/js/clearcutnetwork.js";
eval("/**\n * @fileoverview Clearcut network IO implementation.\n *\n * This class provides static method used by Clearcut for making a network\n * request through xhrIO.\n */\n\ngoog.provide(\x27playlog.clearcut.network\x27);\n\ngoog.require(\x27goog.net.XhrIo\x27);\n\n\n/**\n * Clearcut network request parameters.\n * @record\n */\nplaylog.clearcut.network.RequestParams \x3d function() {};\n\n/**\n * Clearcut server url.\n * @type {string}\n */\nplaylog.clearcut.network.RequestParams.prototype.url;\n\n/**\n * Request type i.e. either \x27GET\x27 or \x27POST\x27.\n * @type {string}\n */\nplaylog.clearcut.network.RequestParams.prototype.requestType;\n\n/**\n * Request body. Must be either JSONified string or a byte array.\n * @type {string|!Uint8Array}\n */\nplaylog.clearcut.network.RequestParams.prototype.body;\n\n/**\n * Network request body type enum.\n * @enum {number}\n */\nplaylog.clearcut.network.RequestParams.bodyType \x3d {\n  STRING: 1,\n  BYTE_ARRAY: 2\n};\n\n/**\n * Indicates request body type.\n * @type {!playlog.clearcut.network.RequestParams.bodyType}\n */\nplaylog.clearcut.network.RequestParams.prototype.bodyType;\n\n/** @type {!Object\x3cstring, string\x3e} */\nplaylog.clearcut.network.RequestParams.prototype.requestHeaders;\n\n/**\n * Indicates if credentials must be sent with the request.\n * @type {boolean}\n */\nplaylog.clearcut.network.RequestParams.prototype.withCredentials;\n\n\n/**\n * Makes a network request through xhrIO and notifies callback.\n * @param {!playlog.clearcut.network.RequestParams} params The parameters\n *     used when making a network request.\n * @param {function(string)} successCallback A success callback to notify that\n *     the request succeeded with the response as a string.\n * @param {function(number)} failureCallback A failure callback to notify that\n *     the request failed with the provided errorCode.\n */\nplaylog.clearcut.network.send \x3d\n    function(params, successCallback, failureCallback) {\n  // TODO(b/22348915): Handle offline clients and consider using XhrManager.\n  goog.net.XhrIo.send(params.url, function(e) {\n    var xhr \x3d e.target;\n    if (xhr.isSuccess()) {\n      successCallback(xhr.getResponseText());\n    } else {\n      failureCallback(xhr.getStatus());\n    }\n  }, params.requestType, params.body, params.requestHeaders, 0,\n     params.withCredentials);\n};\n\n//# sourceURL\x3dhttps://qs/wireless/android/play/playlog/js/clearcutnetwork.js\n");

$googDebugFname=undefined;
var $googDebugFname="wireless/android/play/playlog/js/client_info_util_interface.js";
eval("goog.provide(\x27playlog.clearcut.ClientInfoUtilInterface\x27);\n\n\n\n/**\n * An interface for attaching additional client information in the events logged\n * to clearcut.\n * @interface\n */\nplaylog.clearcut.ClientInfoUtilInterface \x3d function() {};\n\n\n/**\n * Adds additional client information to the supplied `ClientInfo` proto.\n * @param {!proto.wireless_android_play_playlog.ClientInfo} clientInfo\n * @param {boolean\x3d} opt_isServiceWorkerScope\n */\nplaylog.clearcut.ClientInfoUtilInterface.prototype.addClientInfo \x3d function(\n    clientInfo, opt_isServiceWorkerScope) {};\n\n//# sourceURL\x3dhttps://qs/wireless/android/play/playlog/js/client_info_util_interface.js\n");

$googDebugFname=undefined;
var $googDebugFname="wireless/android/play/playlog/js/gzip_compressor.js";
eval("goog.provide(\x27playlog.clearcut.GzipCompressor\x27);\n\n/**\n * An interface for providing Gzip compression functionality.\n * @interface\n */\nplaylog.clearcut.GzipCompressor \x3d function() {};\n\n/**\n * Gzip-compress the given string. This does not intend to be a general\n * interface. Instead, it is meant to be used with the Clearcut JS library, and\n * called only on platformas where typed array is supported. Caller is\n * responsible for checking this pre-condition using {@link\n * #supportsTypedArray}. Typed array is the return type, while the actual gzip\n * implementation may support ordinary untyped array, because the Clearcut\n * library uses XHR by default and XHR supports only typed array for sending\n * binary data.\n * @param {string} s The string to gzip-compress.\n * @return {!Uint8Array} gzip binary array.\n */\nplaylog.clearcut.GzipCompressor.prototype.compress \x3d function(s) {};\n\n/**\n * Whether the Gzip compressor is supported in the browser.\n * @return {boolean}\n */\nplaylog.clearcut.GzipCompressor.prototype.isSupported \x3d function() {};\n\n//# sourceURL\x3dhttps://qs/wireless/android/play/playlog/js/gzip_compressor.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/math/exponentialbackoff.js";
eval("// Copyright 2011 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/**\n * @fileoverview Utility class to manage the mathematics behind computing an\n * exponential backoff model.  Given an initial backoff value and a maximum\n * backoff value, every call to backoff() will double the value until maximum\n * backoff value is reached.\n *\n * @author rjfioravanti@google.com (Ryan Fioravanti)\n * @author dominicl@google.com (Dominic Leung)\n */\n\n\ngoog.provide(\x27goog.math.ExponentialBackoff\x27);\n\ngoog.require(\x27goog.asserts\x27);\n\n\n\n/**\n * @struct\n * @constructor\n *\n * @param {number} initialValue The initial backoff value.\n * @param {number} maxValue The maximum backoff value.\n * @param {number\x3d} opt_randomFactor When set, adds randomness to the backoff\n *     and decay to avoid a thundering herd problem. Should be a number between\n *     0 and 1, where 0 means no randomness and 1 means a factor of 0x to 2x.\n * @param {number\x3d} opt_backoffFactor The factor to backoff by. Defaults to 2.\n *     Should be a number greater than 1.\n * @param {number\x3d} opt_decayFactor The factor to decay by. Defaults to 2.\n *     Should be a number between greater than one.\n */\ngoog.math.ExponentialBackoff \x3d function(\n    initialValue, maxValue, opt_randomFactor, opt_backoffFactor,\n    opt_decayFactor) {\n  goog.asserts.assert(\n      initialValue \x3e 0, \x27Initial value must be greater than zero.\x27);\n  goog.asserts.assert(\n      maxValue \x3e\x3d initialValue,\n      \x27Max value should be at least as large as initial value.\x27);\n\n  if (goog.isDef(opt_randomFactor)) {\n    goog.asserts.assert(\n        opt_randomFactor \x3e\x3d 0 \x26\x26 opt_randomFactor \x3c\x3d 1,\n        \x27Randomness factor should be between 0 and 1.\x27);\n  }\n\n  if (goog.isDef(opt_backoffFactor)) {\n    goog.asserts.assert(\n        opt_backoffFactor \x3e 1, \x27Backoff factor should be greater than 1\x27);\n  }\n\n  if (goog.isDef(opt_decayFactor)) {\n    goog.asserts.assert(\n        opt_decayFactor \x3e\x3d 1, \x27Decay factor should be greater than 1\x27);\n  }\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.initialValue_ \x3d initialValue;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.maxValue_ \x3d maxValue;\n\n  /**\n   * The current backoff value.\n   * @type {number}\n   * @private\n   */\n  this.currValue_ \x3d initialValue;\n\n  /**\n   * The current backoff value minus the random wait (if there is any).\n   * @type {number}\n   * @private\n   */\n  this.currBaseValue_ \x3d initialValue;\n\n  /**\n   * The random factor to apply to the backoff value to avoid a thundering herd\n   * problem. Should be a number between 0 and 1, where 0 means no randomness\n   * and 1 means a factor of 0x to 2x.\n   * @type {number}\n   * @private\n   */\n  this.randomFactor_ \x3d opt_randomFactor || 0;\n\n  /**\n   * Factor to backoff by.\n   * @type {number}\n   * @private\n   */\n  this.backoffFactor_ \x3d opt_backoffFactor || 2;\n\n  /**\n   * Factor to decay by.\n   * @type {number}\n   * @private\n   */\n  this.decayFactor_ \x3d opt_decayFactor || 2;\n};\n\n\n/**\n * The number of backoffs that have happened.\n * @type {number}\n * @private\n */\ngoog.math.ExponentialBackoff.prototype.currBackoffCount_ \x3d 0;\n\n\n/**\n * The number of decays that have happened.\n * @type {number}\n * @private\n */\ngoog.math.ExponentialBackoff.prototype.currDecayCount_ \x3d 0;\n\n\n/**\n * Resets the backoff value to its initial value.\n */\ngoog.math.ExponentialBackoff.prototype.reset \x3d function() {\n  this.currValue_ \x3d this.initialValue_;\n  this.currBaseValue_ \x3d this.initialValue_;\n  this.currBackoffCount_ \x3d 0;\n  this.currDecayCount_ \x3d 0;\n};\n\n\n/**\n * @return {number} The current backoff value.\n */\ngoog.math.ExponentialBackoff.prototype.getValue \x3d function() {\n  return this.currValue_;\n};\n\n\n/**\n * @return {number} The number of times this class has backed off.\n */\ngoog.math.ExponentialBackoff.prototype.getBackoffCount \x3d function() {\n  return this.currBackoffCount_;\n};\n\n\n/**\n * @return {number} The number of times this class has decayed.\n */\ngoog.math.ExponentialBackoff.prototype.getDecayCount \x3d function() {\n  return this.currDecayCount_;\n};\n\n\n/**\n * Initiates a backoff.\n */\ngoog.math.ExponentialBackoff.prototype.backoff \x3d function() {\n  // If we haven\x27t hit the maximum value yet, keep increasing the base value.\n  this.currBaseValue_ \x3d\n      Math.min(this.maxValue_, this.currBaseValue_ * this.backoffFactor_);\n\n  var randomWait \x3d this.randomFactor_ ?\n      Math.round(\n          this.randomFactor_ * (Math.random() - 0.5) * 2 *\n          this.currBaseValue_) :\n      0;\n  this.currValue_ \x3d Math.min(this.maxValue_, this.currBaseValue_ + randomWait);\n  this.currBackoffCount_++;\n};\n\n\n/**\n * Initiates a decay.\n */\ngoog.math.ExponentialBackoff.prototype.decay \x3d function() {\n  // If we haven\x27t hit the initial value yet, keep decreasing the base value.\n  this.currBaseValue_ \x3d\n      Math.max(this.initialValue_, this.currBaseValue_ / this.decayFactor_);\n\n  var randomWait \x3d this.randomFactor_ ?\n      Math.round(\n          this.randomFactor_ * (Math.random() - 0.5) * 2 *\n          this.currBaseValue_) :\n      0;\n  this.currValue_ \x3d\n      Math.max(this.initialValue_, this.currBaseValue_ + randomWait);\n  this.currDecayCount_++;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/math/exponentialbackoff.js\n");

$googDebugFname=undefined;
var $googDebugFname="wireless/android/play/playlog/proto/jspb_lib.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\n\ngoog.provide(\x27proto.com.google.android.gmscore.proto.GmsCoreBuild\x27);\ngoog.provide(\x27proto.com.google.android.gmscore.proto.GmsCoreBuildVariant\x27);\ngoog.provide(\x27proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreArchitecture\x27);\ngoog.provide(\x27proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreBuildType\x27);\ngoog.provide(\x27proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreScreenDensity\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.AccessibilityState\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.AccessibilityState.OnOff\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.ActiveExperiments\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.AndroidClientInfo\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.AndroidDeviceType\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.AppUsage1pLogEvent\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.BatchedLogRequest\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.BirdsongClientInfo\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.BirdsongClientInfo.ClientType\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.BrowserInfo\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.ClientInfo\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.ClientInfo.ClientType\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.CollectForDebug\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.DesktopClientInfo\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.DeviceRestriction\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.DeviceRestriction.Id\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.DeviceStatus\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.DeviceStatus.AutomaticTime\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.ExperimentIdList\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.ExperimentIds\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.ExternalTimestamp\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.GoogleHomeClientInfo\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.IosClientInfo\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.JsClientInfo\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.JsClientInfo.DeviceType\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.JsClientInfo.OsType\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.JsLogResponseExtension\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.LogEvent\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.LogEvent.InternalEvent\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.LogEventKeyValues\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.LogRequest\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.LogRequest.LogSource\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.LogRequest.SchedulerType\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.LogResponse\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.LogResponseDetails\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.LogResponseDetails.ResponseAction\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.LogSourceBatchingBlacklist\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.MacClientInfo\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.NetworkConnectionInfo\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.NetworkConnectionInfo.MobileSubtype\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.NetworkConnectionInfo.NetworkType\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.PancettaClientInfo\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.PancettaClientInfo.OsType\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.PlayCeClientInfo\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.QosTierConfiguration\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.QosTierConfiguration.QosTier\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.QosTiersOverride\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.VrClientInfo\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.VrClientInfo.VrClientType\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.YetiClientInfo\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.jsExtension\x27);\n\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.ExtensionFieldBinaryInfo\x27);\ngoog.require(\x27jspb.ExtensionFieldInfo\x27);\ngoog.require(\x27jspb.Message\x27);\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuild \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.com.google.android.gmscore.proto.GmsCoreBuild, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.com.google.android.gmscore.proto.GmsCoreBuild.displayName \x3d \x27proto.com.google.android.gmscore.proto.GmsCoreBuild\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuild.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.com.google.android.gmscore.proto.GmsCoreBuild.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.com.google.android.gmscore.proto.GmsCoreBuild} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuild.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    versionCode: jspb.Message.getField(msg, 1),\n    versionName: jspb.Message.getField(msg, 2),\n    variant: (f \x3d msg.getVariant()) \x26\x26 proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.com.google.android.gmscore.proto.GmsCoreBuild}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuild.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.com.google.android.gmscore.proto.GmsCoreBuild;\n  return proto.com.google.android.gmscore.proto.GmsCoreBuild.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.com.google.android.gmscore.proto.GmsCoreBuild} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.com.google.android.gmscore.proto.GmsCoreBuild}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuild.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setVersionCode(value);\n      break;\n    case 2:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setVersionName(value);\n      break;\n    case 3:\n      var value \x3d new proto.com.google.android.gmscore.proto.GmsCoreBuildVariant;\n      reader.readMessage(value,proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.deserializeBinaryFromReader);\n      msg.setVariant(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuild.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.com.google.android.gmscore.proto.GmsCoreBuild.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.com.google.android.gmscore.proto.GmsCoreBuild} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuild.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f \x3d message.getVariant();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional int32 version_code \x3d 1;\n * @return {?number}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuild.prototype.getVersionCode \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?number|undefined} value */\nproto.com.google.android.gmscore.proto.GmsCoreBuild.prototype.setVersionCode \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.com.google.android.gmscore.proto.GmsCoreBuild.prototype.clearVersionCode \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuild.prototype.hasVersionCode \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional string version_name \x3d 2;\n * @return {?string}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuild.prototype.getVersionName \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?string|undefined} value */\nproto.com.google.android.gmscore.proto.GmsCoreBuild.prototype.setVersionName \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.com.google.android.gmscore.proto.GmsCoreBuild.prototype.clearVersionName \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuild.prototype.hasVersionName \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional GmsCoreBuildVariant variant \x3d 3;\n * @return {?proto.com.google.android.gmscore.proto.GmsCoreBuildVariant}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuild.prototype.getVariant \x3d function() {\n  return /** @type{?proto.com.google.android.gmscore.proto.GmsCoreBuildVariant} */ (\n    jspb.Message.getWrapperField(this, proto.com.google.android.gmscore.proto.GmsCoreBuildVariant, 3));\n};\n\n\n/** @param {?proto.com.google.android.gmscore.proto.GmsCoreBuildVariant|undefined} value */\nproto.com.google.android.gmscore.proto.GmsCoreBuild.prototype.setVariant \x3d function(value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\n\nproto.com.google.android.gmscore.proto.GmsCoreBuild.prototype.clearVariant \x3d function() {\n  this.setVariant(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuild.prototype.hasVariant \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.com.google.android.gmscore.proto.GmsCoreBuild}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuild.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.com.google.android.gmscore.proto.GmsCoreBuild, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.com.google.android.gmscore.proto.GmsCoreBuildVariant, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.displayName \x3d \x27proto.com.google.android.gmscore.proto.GmsCoreBuildVariant\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.com.google.android.gmscore.proto.GmsCoreBuildVariant} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    buildType: jspb.Message.getField(msg, 1),\n    architecture: jspb.Message.getField(msg, 2),\n    screenDensity: jspb.Message.getField(msg, 3)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.com.google.android.gmscore.proto.GmsCoreBuildVariant}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.com.google.android.gmscore.proto.GmsCoreBuildVariant;\n  return proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.com.google.android.gmscore.proto.GmsCoreBuildVariant} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.com.google.android.gmscore.proto.GmsCoreBuildVariant}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {!proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreBuildType} */ (reader.readEnum());\n      msg.setBuildType(value);\n      break;\n    case 2:\n      var value \x3d /** @type {!proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreArchitecture} */ (reader.readEnum());\n      msg.setArchitecture(value);\n      break;\n    case 3:\n      var value \x3d /** @type {!proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreScreenDensity} */ (reader.readEnum());\n      msg.setScreenDensity(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.com.google.android.gmscore.proto.GmsCoreBuildVariant} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {!proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreBuildType} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreArchitecture} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreScreenDensity} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreBuildType \x3d {\n  BUILD_TYPE_UNKNOWN: 0,\n  BUILD_TYPE_PROD: 1,\n  BUILD_TYPE_INTERNAL: 2,\n  BUILD_TYPE_PRODLMP: 3,\n  BUILD_TYPE_THINGS: 4,\n  BUILD_TYPE_PRODMNC: 5,\n  BUILD_TYPE_WEARABLE: 6,\n  BUILD_TYPE_AUTO: 7,\n  BUILD_TYPE_SIDEWINDERMNC: 8,\n  BUILD_TYPE_ATV: 9,\n  BUILD_TYPE_PRODPIX: 10,\n  BUILD_TYPE_PRODPI: 11,\n  BUILD_TYPE_PRODGO: 12\n};\n\n/**\n * @enum {number}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreArchitecture \x3d {\n  ARCH_UNKNOWN: 0,\n  ARCH_NON_NATIVE: 1,\n  ARCH_ARMV5: 2,\n  ARCH_ARMV7: 4,\n  ARCH_ARM64: 5,\n  ARCH_MIPS: 6,\n  ARCH_MIPS_64: 7,\n  ARCH_X86: 8,\n  ARCH_X86_64: 9\n};\n\n/**\n * @enum {number}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreScreenDensity \x3d {\n  DENSITY_UNKNOWN: 0,\n  DENSITY_ALLDPI: 1,\n  DENSITY_LDPI: 2,\n  DENSITY_MDPI: 3,\n  DENSITY_TVDPI: 4,\n  DENSITY_HDPI: 5,\n  DENSITY_XHDPI: 7,\n  DENSITY_DPI400: 8,\n  DENSITY_XXHDPI: 9,\n  DENSITY_XXXHDPI: 10\n};\n\n/**\n * optional GmsCoreBuildType build_type \x3d 1;\n * @return {!proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreBuildType}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.prototype.getBuildType \x3d function() {\n  return /** @type {!proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreBuildType} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreBuildType|undefined} value */\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.prototype.setBuildType \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.prototype.clearBuildType \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.prototype.hasBuildType \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional GmsCoreArchitecture architecture \x3d 2;\n * @return {!proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreArchitecture}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.prototype.getArchitecture \x3d function() {\n  return /** @type {!proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreArchitecture} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreArchitecture|undefined} value */\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.prototype.setArchitecture \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.prototype.clearArchitecture \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.prototype.hasArchitecture \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional GmsCoreScreenDensity screen_density \x3d 3;\n * @return {!proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreScreenDensity}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.prototype.getScreenDensity \x3d function() {\n  return /** @type {!proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreScreenDensity} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.GmsCoreScreenDensity|undefined} value */\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.prototype.setScreenDensity \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.prototype.clearScreenDensity \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.prototype.hasScreenDensity \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.com.google.android.gmscore.proto.GmsCoreBuildVariant}\n */\nproto.com.google.android.gmscore.proto.GmsCoreBuildVariant.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.com.google.android.gmscore.proto.GmsCoreBuildVariant, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.AccessibilityState \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.AccessibilityState, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.AccessibilityState.displayName \x3d \x27proto.wireless_android_play_playlog.AccessibilityState\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.AccessibilityState.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.AccessibilityState} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.AccessibilityState.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    talkbackEnabled: jspb.Message.getField(msg, 1),\n    braillebackEnabled: jspb.Message.getField(msg, 2),\n    switchaccessEnabled: jspb.Message.getField(msg, 3),\n    justspeakEnabled: jspb.Message.getField(msg, 4),\n    largeTextEnabled: jspb.Message.getField(msg, 5),\n    magnificationEnabled: jspb.Message.getField(msg, 6),\n    highContrastTextEnabled: jspb.Message.getField(msg, 7)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.AccessibilityState}\n */\nproto.wireless_android_play_playlog.AccessibilityState.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.AccessibilityState;\n  return proto.wireless_android_play_playlog.AccessibilityState.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.AccessibilityState} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.AccessibilityState}\n */\nproto.wireless_android_play_playlog.AccessibilityState.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (reader.readEnum());\n      msg.setTalkbackEnabled(value);\n      break;\n    case 2:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (reader.readEnum());\n      msg.setBraillebackEnabled(value);\n      break;\n    case 3:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (reader.readEnum());\n      msg.setSwitchaccessEnabled(value);\n      break;\n    case 4:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (reader.readEnum());\n      msg.setJustspeakEnabled(value);\n      break;\n    case 5:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (reader.readEnum());\n      msg.setLargeTextEnabled(value);\n      break;\n    case 6:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (reader.readEnum());\n      msg.setMagnificationEnabled(value);\n      break;\n    case 7:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (reader.readEnum());\n      msg.setHighContrastTextEnabled(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.AccessibilityState.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.AccessibilityState} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.AccessibilityState.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      4,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (jspb.Message.getField(message, 5));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      5,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (jspb.Message.getField(message, 6));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      6,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (jspb.Message.getField(message, 7));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      7,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.wireless_android_play_playlog.AccessibilityState.OnOff \x3d {\n  UNKNOWN: 0,\n  ON: 1,\n  OFF: 2\n};\n\n/**\n * optional OnOff talkback_enabled \x3d 1;\n * @return {!proto.wireless_android_play_playlog.AccessibilityState.OnOff}\n */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.getTalkbackEnabled \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.AccessibilityState.OnOff|undefined} value */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.setTalkbackEnabled \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.AccessibilityState.prototype.clearTalkbackEnabled \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.hasTalkbackEnabled \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional OnOff brailleback_enabled \x3d 2;\n * @return {!proto.wireless_android_play_playlog.AccessibilityState.OnOff}\n */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.getBraillebackEnabled \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.AccessibilityState.OnOff|undefined} value */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.setBraillebackEnabled \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.AccessibilityState.prototype.clearBraillebackEnabled \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.hasBraillebackEnabled \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional OnOff switchaccess_enabled \x3d 3;\n * @return {!proto.wireless_android_play_playlog.AccessibilityState.OnOff}\n */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.getSwitchaccessEnabled \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.AccessibilityState.OnOff|undefined} value */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.setSwitchaccessEnabled \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.AccessibilityState.prototype.clearSwitchaccessEnabled \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.hasSwitchaccessEnabled \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional OnOff justspeak_enabled \x3d 4;\n * @return {!proto.wireless_android_play_playlog.AccessibilityState.OnOff}\n */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.getJustspeakEnabled \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.AccessibilityState.OnOff|undefined} value */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.setJustspeakEnabled \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.wireless_android_play_playlog.AccessibilityState.prototype.clearJustspeakEnabled \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.hasJustspeakEnabled \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional OnOff large_text_enabled \x3d 5;\n * @return {!proto.wireless_android_play_playlog.AccessibilityState.OnOff}\n */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.getLargeTextEnabled \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (jspb.Message.getField(this, 5));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.AccessibilityState.OnOff|undefined} value */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.setLargeTextEnabled \x3d function(value) {\n  jspb.Message.setField(this, 5, value);\n};\n\n\nproto.wireless_android_play_playlog.AccessibilityState.prototype.clearLargeTextEnabled \x3d function() {\n  jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.hasLargeTextEnabled \x3d function() {\n  return jspb.Message.getField(this, 5) !\x3d null;\n};\n\n\n/**\n * optional OnOff magnification_enabled \x3d 6;\n * @return {!proto.wireless_android_play_playlog.AccessibilityState.OnOff}\n */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.getMagnificationEnabled \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (jspb.Message.getField(this, 6));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.AccessibilityState.OnOff|undefined} value */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.setMagnificationEnabled \x3d function(value) {\n  jspb.Message.setField(this, 6, value);\n};\n\n\nproto.wireless_android_play_playlog.AccessibilityState.prototype.clearMagnificationEnabled \x3d function() {\n  jspb.Message.setField(this, 6, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.hasMagnificationEnabled \x3d function() {\n  return jspb.Message.getField(this, 6) !\x3d null;\n};\n\n\n/**\n * optional OnOff high_contrast_text_enabled \x3d 7;\n * @return {!proto.wireless_android_play_playlog.AccessibilityState.OnOff}\n */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.getHighContrastTextEnabled \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.AccessibilityState.OnOff} */ (jspb.Message.getField(this, 7));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.AccessibilityState.OnOff|undefined} value */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.setHighContrastTextEnabled \x3d function(value) {\n  jspb.Message.setField(this, 7, value);\n};\n\n\nproto.wireless_android_play_playlog.AccessibilityState.prototype.clearHighContrastTextEnabled \x3d function() {\n  jspb.Message.setField(this, 7, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AccessibilityState.prototype.hasHighContrastTextEnabled \x3d function() {\n  return jspb.Message.getField(this, 7) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.AccessibilityState}\n */\nproto.wireless_android_play_playlog.AccessibilityState.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.AccessibilityState, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.DeviceRestriction \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.DeviceRestriction, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.DeviceRestriction.displayName \x3d \x27proto.wireless_android_play_playlog.DeviceRestriction\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.DeviceRestriction.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.DeviceRestriction.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.DeviceRestriction} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.DeviceRestriction.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.DeviceRestriction}\n */\nproto.wireless_android_play_playlog.DeviceRestriction.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.DeviceRestriction;\n  return proto.wireless_android_play_playlog.DeviceRestriction.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.DeviceRestriction} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.DeviceRestriction}\n */\nproto.wireless_android_play_playlog.DeviceRestriction.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.DeviceRestriction.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.DeviceRestriction.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.DeviceRestriction} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.DeviceRestriction.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n};\n\n\n/**\n * @enum {number}\n */\nproto.wireless_android_play_playlog.DeviceRestriction.Id \x3d {\n  NO_RESTRICTION: 0,\n  SIDEWINDER_DEVICE: 1,\n  LATCHSKY_DEVICE: 2\n};\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.DeviceRestriction}\n */\nproto.wireless_android_play_playlog.DeviceRestriction.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.DeviceRestriction, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.LogEventKeyValues \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.LogEventKeyValues, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.LogEventKeyValues.displayName \x3d \x27proto.wireless_android_play_playlog.LogEventKeyValues\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.LogEventKeyValues.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.LogEventKeyValues.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.LogEventKeyValues} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.LogEventKeyValues.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    key: jspb.Message.getField(msg, 1),\n    value: jspb.Message.getField(msg, 2)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.LogEventKeyValues}\n */\nproto.wireless_android_play_playlog.LogEventKeyValues.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.LogEventKeyValues;\n  return proto.wireless_android_play_playlog.LogEventKeyValues.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.LogEventKeyValues} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.LogEventKeyValues}\n */\nproto.wireless_android_play_playlog.LogEventKeyValues.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setKey(value);\n      break;\n    case 2:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setValue(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.LogEventKeyValues.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.LogEventKeyValues.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.LogEventKeyValues} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.LogEventKeyValues.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string key \x3d 1;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.LogEventKeyValues.prototype.getKey \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.LogEventKeyValues.prototype.setKey \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEventKeyValues.prototype.clearKey \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEventKeyValues.prototype.hasKey \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional string value \x3d 2;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.LogEventKeyValues.prototype.getValue \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.LogEventKeyValues.prototype.setValue \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEventKeyValues.prototype.clearValue \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEventKeyValues.prototype.hasValue \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.LogEventKeyValues}\n */\nproto.wireless_android_play_playlog.LogEventKeyValues.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.LogEventKeyValues, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.ActiveExperiments \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.wireless_android_play_playlog.ActiveExperiments.repeatedFields_, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.ActiveExperiments, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.ActiveExperiments.displayName \x3d \x27proto.wireless_android_play_playlog.ActiveExperiments\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nproto.wireless_android_play_playlog.ActiveExperiments.repeatedFields_ \x3d [1,2,3,4,5];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.ActiveExperiments.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.ActiveExperiments} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.ActiveExperiments.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    clientAlteringExperimentList: jspb.Message.getRepeatedField(msg, 1),\n    otherExperimentList: jspb.Message.getRepeatedField(msg, 2),\n    gwsExperimentList: jspb.Message.getRepeatedField(msg, 3),\n    playExperimentList: jspb.Message.getRepeatedField(msg, 4),\n    unsupportedPlayExperimentList: jspb.Message.getRepeatedField(msg, 5)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.ActiveExperiments}\n */\nproto.wireless_android_play_playlog.ActiveExperiments.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.ActiveExperiments;\n  return proto.wireless_android_play_playlog.ActiveExperiments.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.ActiveExperiments} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.ActiveExperiments}\n */\nproto.wireless_android_play_playlog.ActiveExperiments.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.addClientAlteringExperiment(value);\n      break;\n    case 2:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.addOtherExperiment(value);\n      break;\n    case 3:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.addGwsExperiment(value);\n      break;\n    case 4:\n      var value \x3d /** @type {number} */ (reader.readInt64());\n      msg.addPlayExperiment(value);\n      break;\n    case 5:\n      var value \x3d /** @type {number} */ (reader.readInt64());\n      msg.addUnsupportedPlayExperiment(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.ActiveExperiments.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.ActiveExperiments} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.ActiveExperiments.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d message.getClientAlteringExperimentList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedString(\n      1,\n      f\n    );\n  }\n  f \x3d message.getOtherExperimentList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedString(\n      2,\n      f\n    );\n  }\n  f \x3d message.getGwsExperimentList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedInt32(\n      3,\n      f\n    );\n  }\n  f \x3d message.getPlayExperimentList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedInt64(\n      4,\n      f\n    );\n  }\n  f \x3d message.getUnsupportedPlayExperimentList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedInt64(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated string client_altering_experiment \x3d 1;\n * @return {!Array\x3cstring\x3e}\n */\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.getClientAlteringExperimentList \x3d function() {\n  return /** @type {!Array\x3cstring\x3e} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/** @param {Array\x3cstring\x3e|undefined} value */\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.setClientAlteringExperimentList \x3d function(value) {\n  jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {string} value\n * @param {number\x3d} opt_index\n */\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.addClientAlteringExperiment \x3d function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.clearClientAlteringExperimentList \x3d function() {\n  this.setClientAlteringExperimentList([]);\n};\n\n\n/**\n * repeated string other_experiment \x3d 2;\n * @return {!Array\x3cstring\x3e}\n */\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.getOtherExperimentList \x3d function() {\n  return /** @type {!Array\x3cstring\x3e} */ (jspb.Message.getRepeatedField(this, 2));\n};\n\n\n/** @param {Array\x3cstring\x3e|undefined} value */\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.setOtherExperimentList \x3d function(value) {\n  jspb.Message.setField(this, 2, value || []);\n};\n\n\n/**\n * @param {string} value\n * @param {number\x3d} opt_index\n */\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.addOtherExperiment \x3d function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n\n\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.clearOtherExperimentList \x3d function() {\n  this.setOtherExperimentList([]);\n};\n\n\n/**\n * repeated int32 gws_experiment \x3d 3;\n * @return {!Array\x3cnumber\x3e}\n */\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.getGwsExperimentList \x3d function() {\n  return /** @type {!Array\x3cnumber\x3e} */ (jspb.Message.getRepeatedField(this, 3));\n};\n\n\n/** @param {Array\x3cnumber\x3e|undefined} value */\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.setGwsExperimentList \x3d function(value) {\n  jspb.Message.setField(this, 3, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number\x3d} opt_index\n */\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.addGwsExperiment \x3d function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 3, value, opt_index);\n};\n\n\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.clearGwsExperimentList \x3d function() {\n  this.setGwsExperimentList([]);\n};\n\n\n/**\n * repeated int64 play_experiment \x3d 4;\n * @return {!Array\x3cnumber\x3e}\n */\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.getPlayExperimentList \x3d function() {\n  return /** @type {!Array\x3cnumber\x3e} */ (jspb.Message.getRepeatedField(this, 4));\n};\n\n\n/** @param {Array\x3cnumber\x3e|undefined} value */\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.setPlayExperimentList \x3d function(value) {\n  jspb.Message.setField(this, 4, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number\x3d} opt_index\n */\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.addPlayExperiment \x3d function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 4, value, opt_index);\n};\n\n\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.clearPlayExperimentList \x3d function() {\n  this.setPlayExperimentList([]);\n};\n\n\n/**\n * repeated int64 unsupported_play_experiment \x3d 5;\n * @return {!Array\x3cnumber\x3e}\n */\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.getUnsupportedPlayExperimentList \x3d function() {\n  return /** @type {!Array\x3cnumber\x3e} */ (jspb.Message.getRepeatedField(this, 5));\n};\n\n\n/** @param {Array\x3cnumber\x3e|undefined} value */\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.setUnsupportedPlayExperimentList \x3d function(value) {\n  jspb.Message.setField(this, 5, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number\x3d} opt_index\n */\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.addUnsupportedPlayExperiment \x3d function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 5, value, opt_index);\n};\n\n\nproto.wireless_android_play_playlog.ActiveExperiments.prototype.clearUnsupportedPlayExperimentList \x3d function() {\n  this.setUnsupportedPlayExperimentList([]);\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.ActiveExperiments}\n */\nproto.wireless_android_play_playlog.ActiveExperiments.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.ActiveExperiments, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.LogEvent \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, 27, proto.wireless_android_play_playlog.LogEvent.repeatedFields_, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.LogEvent, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.LogEvent.displayName \x3d \x27proto.wireless_android_play_playlog.LogEvent\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nproto.wireless_android_play_playlog.LogEvent.repeatedFields_ \x3d [3,20];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.LogEvent.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.LogEvent} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.LogEvent.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    eventTimeMs: jspb.Message.getField(msg, 1),\n    eventUptimeMs: jspb.Message.getField(msg, 17),\n    sequencePosition: jspb.Message.getField(msg, 21),\n    tag: jspb.Message.getField(msg, 2),\n    eventCode: jspb.Message.getField(msg, 11),\n    componentId: jspb.Message.getField(msg, 26),\n    eventFlowId: jspb.Message.getField(msg, 12),\n    isUserInitiated: jspb.Message.getField(msg, 10),\n    valueList: jspb.Message.toObjectList(msg.getValueList(),\n    proto.wireless_android_play_playlog.LogEventKeyValues.toObject, includeInstance),\n    store: msg.getStore_asB64(),\n    appUsage1p: (f \x3d msg.getAppUsage1p()) \x26\x26 proto.wireless_android_play_playlog.AppUsage1pLogEvent.toObject(includeInstance, f),\n    sourceExtension: msg.getSourceExtension_asB64(),\n    sourceExtensionJs: jspb.Message.getField(msg, 8),\n    sourceExtensionJson: jspb.Message.getField(msg, 13),\n    exp: (f \x3d msg.getExp()) \x26\x26 proto.wireless_android_play_playlog.ActiveExperiments.toObject(includeInstance, f),\n    testId: jspb.Message.getField(msg, 14),\n    timezoneOffsetSeconds: jspb.Message.getFieldWithDefault(msg, 15, 180000),\n    experimentIds: (f \x3d msg.getExperimentIds()) \x26\x26 proto.wireless_android_play_playlog.ExperimentIds.toObject(includeInstance, f),\n    clientVe: msg.getClientVe_asB64(),\n    clientVeJs: jspb.Message.getField(msg, 24),\n    internalEvent: jspb.Message.getField(msg, 19),\n    testCodeList: jspb.Message.getRepeatedField(msg, 20),\n    bootCount: jspb.Message.getField(msg, 22),\n    networkConnectionInfo: (f \x3d msg.getNetworkConnectionInfo()) \x26\x26 proto.wireless_android_play_playlog.NetworkConnectionInfo.toObject(includeInstance, f),\n    inDirectBootMode: jspb.Message.getField(msg, 25)\n  };\n\n  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,\n      proto.wireless_android_play_playlog.LogEvent.extensions, proto.wireless_android_play_playlog.LogEvent.prototype.getExtension,\n      includeInstance);\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.LogEvent}\n */\nproto.wireless_android_play_playlog.LogEvent.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.LogEvent;\n  return proto.wireless_android_play_playlog.LogEvent.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.LogEvent} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.LogEvent}\n */\nproto.wireless_android_play_playlog.LogEvent.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readInt64String());\n      msg.setEventTimeMs(value);\n      break;\n    case 17:\n      var value \x3d /** @type {string} */ (reader.readInt64String());\n      msg.setEventUptimeMs(value);\n      break;\n    case 21:\n      var value \x3d /** @type {number} */ (reader.readInt64());\n      msg.setSequencePosition(value);\n      break;\n    case 2:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setTag(value);\n      break;\n    case 11:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setEventCode(value);\n      break;\n    case 26:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setComponentId(value);\n      break;\n    case 12:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setEventFlowId(value);\n      break;\n    case 10:\n      var value \x3d /** @type {boolean} */ (reader.readBool());\n      msg.setIsUserInitiated(value);\n      break;\n    case 3:\n      var value \x3d new proto.wireless_android_play_playlog.LogEventKeyValues;\n      reader.readMessage(value,proto.wireless_android_play_playlog.LogEventKeyValues.deserializeBinaryFromReader);\n      msg.addValue(value);\n      break;\n    case 4:\n      var value \x3d /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setStore(value);\n      break;\n    case 9:\n      var value \x3d new proto.wireless_android_play_playlog.AppUsage1pLogEvent;\n      reader.readMessage(value,proto.wireless_android_play_playlog.AppUsage1pLogEvent.deserializeBinaryFromReader);\n      msg.setAppUsage1p(value);\n      break;\n    case 6:\n      var value \x3d /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSourceExtension(value);\n      break;\n    case 8:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setSourceExtensionJs(value);\n      break;\n    case 13:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setSourceExtensionJson(value);\n      break;\n    case 7:\n      var value \x3d new proto.wireless_android_play_playlog.ActiveExperiments;\n      reader.readMessage(value,proto.wireless_android_play_playlog.ActiveExperiments.deserializeBinaryFromReader);\n      msg.setExp(value);\n      break;\n    case 14:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setTestId(value);\n      break;\n    case 15:\n      var value \x3d /** @type {number} */ (reader.readSint64());\n      msg.setTimezoneOffsetSeconds(value);\n      break;\n    case 16:\n      var value \x3d new proto.wireless_android_play_playlog.ExperimentIds;\n      reader.readMessage(value,proto.wireless_android_play_playlog.ExperimentIds.deserializeBinaryFromReader);\n      msg.setExperimentIds(value);\n      break;\n    case 18:\n      var value \x3d /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setClientVe(value);\n      break;\n    case 24:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setClientVeJs(value);\n      break;\n    case 19:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.LogEvent.InternalEvent} */ (reader.readEnum());\n      msg.setInternalEvent(value);\n      break;\n    case 20:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.addTestCode(value);\n      break;\n    case 22:\n      var value \x3d /** @type {number} */ (reader.readInt64());\n      msg.setBootCount(value);\n      break;\n    case 23:\n      var value \x3d new proto.wireless_android_play_playlog.NetworkConnectionInfo;\n      reader.readMessage(value,proto.wireless_android_play_playlog.NetworkConnectionInfo.deserializeBinaryFromReader);\n      msg.setNetworkConnectionInfo(value);\n      break;\n    case 25:\n      var value \x3d /** @type {boolean} */ (reader.readBool());\n      msg.setInDirectBootMode(value);\n      break;\n    default:\n      jspb.Message.readBinaryExtension(msg, reader, proto.wireless_android_play_playlog.LogEvent.extensionsBinary,\n        proto.wireless_android_play_playlog.LogEvent.prototype.getExtension,\n        proto.wireless_android_play_playlog.LogEvent.prototype.setExtension);\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.LogEvent.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.LogEvent} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.LogEvent.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeInt64String(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 17));\n  if (f !\x3d null) {\n    writer.writeInt64String(\n      17,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 21));\n  if (f !\x3d null) {\n    writer.writeInt64(\n      21,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 11));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      11,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 26));\n  if (f !\x3d null) {\n    writer.writeString(\n      26,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 12));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      12,\n      f\n    );\n  }\n  f \x3d /** @type {?boolean} */ (jspb.Message.getField(message, 10));\n  if (f !\x3d null) {\n    writer.writeBool(\n      10,\n      f\n    );\n  }\n  f \x3d message.getValueList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedMessage(\n      3,\n      f,\n      proto.wireless_android_play_playlog.LogEventKeyValues.serializeBinaryToWriter\n    );\n  }\n  f \x3d /** @type {?(string|Uint8Array)} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeBytes(\n      4,\n      f\n    );\n  }\n  f \x3d message.getAppUsage1p();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      9,\n      f,\n      proto.wireless_android_play_playlog.AppUsage1pLogEvent.serializeBinaryToWriter\n    );\n  }\n  f \x3d /** @type {?(string|Uint8Array)} */ (jspb.Message.getField(message, 6));\n  if (f !\x3d null) {\n    writer.writeBytes(\n      6,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 8));\n  if (f !\x3d null) {\n    writer.writeString(\n      8,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 13));\n  if (f !\x3d null) {\n    writer.writeString(\n      13,\n      f\n    );\n  }\n  f \x3d message.getExp();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      7,\n      f,\n      proto.wireless_android_play_playlog.ActiveExperiments.serializeBinaryToWriter\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 14));\n  if (f !\x3d null) {\n    writer.writeString(\n      14,\n      f\n    );\n  }\n  f \x3d /** @type {number} */ (jspb.Message.getField(message, 15));\n  if (f !\x3d null) {\n    writer.writeSint64(\n      15,\n      f\n    );\n  }\n  f \x3d message.getExperimentIds();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      16,\n      f,\n      proto.wireless_android_play_playlog.ExperimentIds.serializeBinaryToWriter\n    );\n  }\n  f \x3d /** @type {?(string|Uint8Array)} */ (jspb.Message.getField(message, 18));\n  if (f !\x3d null) {\n    writer.writeBytes(\n      18,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 24));\n  if (f !\x3d null) {\n    writer.writeString(\n      24,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.LogEvent.InternalEvent} */ (jspb.Message.getField(message, 19));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      19,\n      f\n    );\n  }\n  f \x3d message.getTestCodeList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedInt32(\n      20,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 22));\n  if (f !\x3d null) {\n    writer.writeInt64(\n      22,\n      f\n    );\n  }\n  f \x3d message.getNetworkConnectionInfo();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      23,\n      f,\n      proto.wireless_android_play_playlog.NetworkConnectionInfo.serializeBinaryToWriter\n    );\n  }\n  f \x3d /** @type {?boolean} */ (jspb.Message.getField(message, 25));\n  if (f !\x3d null) {\n    writer.writeBool(\n      25,\n      f\n    );\n  }\n  jspb.Message.serializeBinaryExtensions(message, writer,\n    proto.wireless_android_play_playlog.LogEvent.extensionsBinary, proto.wireless_android_play_playlog.LogEvent.prototype.getExtension);\n};\n\n\n/**\n * @enum {number}\n */\nproto.wireless_android_play_playlog.LogEvent.InternalEvent \x3d {\n  NONE: 0,\n  WALL_CLOCK_SET: 1,\n  DEVICE_BOOT: 2\n};\n\n/**\n * optional int64 event_time_ms \x3d 1;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getEventTimeMs \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setEventTimeMs \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearEventTimeMs \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasEventTimeMs \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional int64 event_uptime_ms \x3d 17;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getEventUptimeMs \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 17));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setEventUptimeMs \x3d function(value) {\n  jspb.Message.setField(this, 17, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearEventUptimeMs \x3d function() {\n  jspb.Message.setField(this, 17, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasEventUptimeMs \x3d function() {\n  return jspb.Message.getField(this, 17) !\x3d null;\n};\n\n\n/**\n * optional int64 sequence_position \x3d 21;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getSequencePosition \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 21));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setSequencePosition \x3d function(value) {\n  jspb.Message.setField(this, 21, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearSequencePosition \x3d function() {\n  jspb.Message.setField(this, 21, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasSequencePosition \x3d function() {\n  return jspb.Message.getField(this, 21) !\x3d null;\n};\n\n\n/**\n * optional string tag \x3d 2;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getTag \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setTag \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearTag \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasTag \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional int32 event_code \x3d 11;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getEventCode \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 11));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setEventCode \x3d function(value) {\n  jspb.Message.setField(this, 11, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearEventCode \x3d function() {\n  jspb.Message.setField(this, 11, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasEventCode \x3d function() {\n  return jspb.Message.getField(this, 11) !\x3d null;\n};\n\n\n/**\n * optional string component_id \x3d 26;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getComponentId \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 26));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setComponentId \x3d function(value) {\n  jspb.Message.setField(this, 26, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearComponentId \x3d function() {\n  jspb.Message.setField(this, 26, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasComponentId \x3d function() {\n  return jspb.Message.getField(this, 26) !\x3d null;\n};\n\n\n/**\n * optional int32 event_flow_id \x3d 12;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getEventFlowId \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 12));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setEventFlowId \x3d function(value) {\n  jspb.Message.setField(this, 12, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearEventFlowId \x3d function() {\n  jspb.Message.setField(this, 12, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasEventFlowId \x3d function() {\n  return jspb.Message.getField(this, 12) !\x3d null;\n};\n\n\n/**\n * optional bool is_user_initiated \x3d 10;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val \x3d\x3d\x3d true/false} in those cases.\n * @return {?boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getIsUserInitiated \x3d function() {\n  return /** @type {?boolean} */ (jspb.Message.getField(this, 10));\n};\n\n\n/** @param {?boolean|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setIsUserInitiated \x3d function(value) {\n  jspb.Message.setField(this, 10, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearIsUserInitiated \x3d function() {\n  jspb.Message.setField(this, 10, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasIsUserInitiated \x3d function() {\n  return jspb.Message.getField(this, 10) !\x3d null;\n};\n\n\n/**\n * repeated LogEventKeyValues value \x3d 3;\n * @return {!Array\x3c!proto.wireless_android_play_playlog.LogEventKeyValues\x3e}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getValueList \x3d function() {\n  return /** @type{!Array\x3c!proto.wireless_android_play_playlog.LogEventKeyValues\x3e} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.wireless_android_play_playlog.LogEventKeyValues, 3));\n};\n\n\n/** @param {Array\x3c!proto.wireless_android_play_playlog.LogEventKeyValues\x3e|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setValueList \x3d function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 3, value);\n};\n\n\n/**\n * @param {!proto.wireless_android_play_playlog.LogEventKeyValues\x3d} opt_value\n * @param {number\x3d} opt_index\n * @return {!proto.wireless_android_play_playlog.LogEventKeyValues}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.addValue \x3d function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.wireless_android_play_playlog.LogEventKeyValues, opt_index);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearValueList \x3d function() {\n  this.setValueList([]);\n};\n\n\n/**\n * optional bytes store \x3d 4;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getStore \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 4));\n};\n\n\n/**\n * optional bytes store \x3d 4;\n * This is a type-conversion wrapper around `getStore()`\n * @return {?string}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getStore_asB64 \x3d function() {\n  return /** @type {?string} */ (jspb.Message.bytesAsB64(\n      this.getStore()));\n};\n\n\n/**\n * optional bytes store \x3d 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getStore()`\n * @return {?Uint8Array}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getStore_asU8 \x3d function() {\n  return /** @type {?Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getStore()));\n};\n\n\n/** @param {?(string|Uint8Array)|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setStore \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearStore \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasStore \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional AppUsage1pLogEvent app_usage_1p \x3d 9;\n * @return {?proto.wireless_android_play_playlog.AppUsage1pLogEvent}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getAppUsage1p \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.AppUsage1pLogEvent} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.AppUsage1pLogEvent, 9));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.AppUsage1pLogEvent|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setAppUsage1p \x3d function(value) {\n  jspb.Message.setWrapperField(this, 9, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearAppUsage1p \x3d function() {\n  this.setAppUsage1p(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasAppUsage1p \x3d function() {\n  return jspb.Message.getField(this, 9) !\x3d null;\n};\n\n\n/**\n * optional bytes source_extension \x3d 6;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getSourceExtension \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 6));\n};\n\n\n/**\n * optional bytes source_extension \x3d 6;\n * This is a type-conversion wrapper around `getSourceExtension()`\n * @return {?string}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getSourceExtension_asB64 \x3d function() {\n  return /** @type {?string} */ (jspb.Message.bytesAsB64(\n      this.getSourceExtension()));\n};\n\n\n/**\n * optional bytes source_extension \x3d 6;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSourceExtension()`\n * @return {?Uint8Array}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getSourceExtension_asU8 \x3d function() {\n  return /** @type {?Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSourceExtension()));\n};\n\n\n/** @param {?(string|Uint8Array)|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setSourceExtension \x3d function(value) {\n  jspb.Message.setField(this, 6, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearSourceExtension \x3d function() {\n  jspb.Message.setField(this, 6, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasSourceExtension \x3d function() {\n  return jspb.Message.getField(this, 6) !\x3d null;\n};\n\n\n/**\n * optional string source_extension_js \x3d 8;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getSourceExtensionJs \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 8));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setSourceExtensionJs \x3d function(value) {\n  jspb.Message.setField(this, 8, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearSourceExtensionJs \x3d function() {\n  jspb.Message.setField(this, 8, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasSourceExtensionJs \x3d function() {\n  return jspb.Message.getField(this, 8) !\x3d null;\n};\n\n\n/**\n * optional string source_extension_json \x3d 13;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getSourceExtensionJson \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 13));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setSourceExtensionJson \x3d function(value) {\n  jspb.Message.setField(this, 13, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearSourceExtensionJson \x3d function() {\n  jspb.Message.setField(this, 13, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasSourceExtensionJson \x3d function() {\n  return jspb.Message.getField(this, 13) !\x3d null;\n};\n\n\n/**\n * optional ActiveExperiments exp \x3d 7;\n * @return {?proto.wireless_android_play_playlog.ActiveExperiments}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getExp \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.ActiveExperiments} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.ActiveExperiments, 7));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.ActiveExperiments|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setExp \x3d function(value) {\n  jspb.Message.setWrapperField(this, 7, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearExp \x3d function() {\n  this.setExp(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasExp \x3d function() {\n  return jspb.Message.getField(this, 7) !\x3d null;\n};\n\n\n/**\n * optional string test_id \x3d 14;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getTestId \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 14));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setTestId \x3d function(value) {\n  jspb.Message.setField(this, 14, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearTestId \x3d function() {\n  jspb.Message.setField(this, 14, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasTestId \x3d function() {\n  return jspb.Message.getField(this, 14) !\x3d null;\n};\n\n\n/**\n * optional sint64 timezone_offset_seconds \x3d 15;\n * @return {number}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getTimezoneOffsetSeconds \x3d function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 180000));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setTimezoneOffsetSeconds \x3d function(value) {\n  jspb.Message.setField(this, 15, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearTimezoneOffsetSeconds \x3d function() {\n  jspb.Message.setField(this, 15, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasTimezoneOffsetSeconds \x3d function() {\n  return jspb.Message.getField(this, 15) !\x3d null;\n};\n\n\n/**\n * optional ExperimentIds experiment_ids \x3d 16;\n * @return {?proto.wireless_android_play_playlog.ExperimentIds}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getExperimentIds \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.ExperimentIds} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.ExperimentIds, 16));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.ExperimentIds|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setExperimentIds \x3d function(value) {\n  jspb.Message.setWrapperField(this, 16, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearExperimentIds \x3d function() {\n  this.setExperimentIds(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasExperimentIds \x3d function() {\n  return jspb.Message.getField(this, 16) !\x3d null;\n};\n\n\n/**\n * optional bytes client_ve \x3d 18;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getClientVe \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 18));\n};\n\n\n/**\n * optional bytes client_ve \x3d 18;\n * This is a type-conversion wrapper around `getClientVe()`\n * @return {?string}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getClientVe_asB64 \x3d function() {\n  return /** @type {?string} */ (jspb.Message.bytesAsB64(\n      this.getClientVe()));\n};\n\n\n/**\n * optional bytes client_ve \x3d 18;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getClientVe()`\n * @return {?Uint8Array}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getClientVe_asU8 \x3d function() {\n  return /** @type {?Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getClientVe()));\n};\n\n\n/** @param {?(string|Uint8Array)|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setClientVe \x3d function(value) {\n  jspb.Message.setField(this, 18, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearClientVe \x3d function() {\n  jspb.Message.setField(this, 18, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasClientVe \x3d function() {\n  return jspb.Message.getField(this, 18) !\x3d null;\n};\n\n\n/**\n * optional string client_ve_js \x3d 24;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getClientVeJs \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 24));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setClientVeJs \x3d function(value) {\n  jspb.Message.setField(this, 24, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearClientVeJs \x3d function() {\n  jspb.Message.setField(this, 24, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasClientVeJs \x3d function() {\n  return jspb.Message.getField(this, 24) !\x3d null;\n};\n\n\n/**\n * optional InternalEvent internal_event \x3d 19;\n * @return {!proto.wireless_android_play_playlog.LogEvent.InternalEvent}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getInternalEvent \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.LogEvent.InternalEvent} */ (jspb.Message.getField(this, 19));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.LogEvent.InternalEvent|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setInternalEvent \x3d function(value) {\n  jspb.Message.setField(this, 19, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearInternalEvent \x3d function() {\n  jspb.Message.setField(this, 19, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasInternalEvent \x3d function() {\n  return jspb.Message.getField(this, 19) !\x3d null;\n};\n\n\n/**\n * repeated int32 test_code \x3d 20;\n * @return {!Array\x3cnumber\x3e}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getTestCodeList \x3d function() {\n  return /** @type {!Array\x3cnumber\x3e} */ (jspb.Message.getRepeatedField(this, 20));\n};\n\n\n/** @param {Array\x3cnumber\x3e|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setTestCodeList \x3d function(value) {\n  jspb.Message.setField(this, 20, value || []);\n};\n\n\n/**\n * @param {number} value\n * @param {number\x3d} opt_index\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.addTestCode \x3d function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 20, value, opt_index);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearTestCodeList \x3d function() {\n  this.setTestCodeList([]);\n};\n\n\n/**\n * optional int64 boot_count \x3d 22;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getBootCount \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 22));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setBootCount \x3d function(value) {\n  jspb.Message.setField(this, 22, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearBootCount \x3d function() {\n  jspb.Message.setField(this, 22, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasBootCount \x3d function() {\n  return jspb.Message.getField(this, 22) !\x3d null;\n};\n\n\n/**\n * optional NetworkConnectionInfo network_connection_info \x3d 23;\n * @return {?proto.wireless_android_play_playlog.NetworkConnectionInfo}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getNetworkConnectionInfo \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.NetworkConnectionInfo} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.NetworkConnectionInfo, 23));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.NetworkConnectionInfo|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setNetworkConnectionInfo \x3d function(value) {\n  jspb.Message.setWrapperField(this, 23, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearNetworkConnectionInfo \x3d function() {\n  this.setNetworkConnectionInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasNetworkConnectionInfo \x3d function() {\n  return jspb.Message.getField(this, 23) !\x3d null;\n};\n\n\n/**\n * optional bool in_direct_boot_mode \x3d 25;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val \x3d\x3d\x3d true/false} in those cases.\n * @return {?boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.getInDirectBootMode \x3d function() {\n  return /** @type {?boolean} */ (jspb.Message.getField(this, 25));\n};\n\n\n/** @param {?boolean|undefined} value */\nproto.wireless_android_play_playlog.LogEvent.prototype.setInDirectBootMode \x3d function(value) {\n  jspb.Message.setField(this, 25, value);\n};\n\n\nproto.wireless_android_play_playlog.LogEvent.prototype.clearInDirectBootMode \x3d function() {\n  jspb.Message.setField(this, 25, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogEvent.prototype.hasInDirectBootMode \x3d function() {\n  return jspb.Message.getField(this, 25) !\x3d null;\n};\n\n\n\n/**\n * The extensions registered with this message class. This is a map of\n * extension field number to fieldInfo object.\n *\n * For example:\n *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n *\n * fieldName contains the JsCompiler renamed field name property so that it\n * works in OPTIMIZED mode.\n *\n * @type {!Object\x3cnumber, jspb.ExtensionFieldInfo\x3e}\n */\nproto.wireless_android_play_playlog.LogEvent.extensions \x3d {};\n\n\n/**\n * The extensions registered with this message class. This is a map of\n * extension field number to fieldInfo object.\n *\n * For example:\n *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n *\n * fieldName contains the JsCompiler renamed field name property so that it\n * works in OPTIMIZED mode.\n *\n * @type {!Object\x3cnumber, jspb.ExtensionFieldBinaryInfo\x3e}\n */\nproto.wireless_android_play_playlog.LogEvent.extensionsBinary \x3d {};\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.LogEvent}\n */\nproto.wireless_android_play_playlog.LogEvent.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.LogEvent, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.NetworkConnectionInfo \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.NetworkConnectionInfo, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.NetworkConnectionInfo.displayName \x3d \x27proto.wireless_android_play_playlog.NetworkConnectionInfo\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.NetworkConnectionInfo.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.NetworkConnectionInfo.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.NetworkConnectionInfo} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.NetworkConnectionInfo.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    networkType: jspb.Message.getFieldWithDefault(msg, 1, -1),\n    mobileSubtype: jspb.Message.getFieldWithDefault(msg, 2, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.NetworkConnectionInfo}\n */\nproto.wireless_android_play_playlog.NetworkConnectionInfo.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.NetworkConnectionInfo;\n  return proto.wireless_android_play_playlog.NetworkConnectionInfo.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.NetworkConnectionInfo} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.NetworkConnectionInfo}\n */\nproto.wireless_android_play_playlog.NetworkConnectionInfo.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.NetworkConnectionInfo.NetworkType} */ (reader.readEnum());\n      msg.setNetworkType(value);\n      break;\n    case 2:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.NetworkConnectionInfo.MobileSubtype} */ (reader.readEnum());\n      msg.setMobileSubtype(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.NetworkConnectionInfo.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.NetworkConnectionInfo.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.NetworkConnectionInfo} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.NetworkConnectionInfo.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {!proto.wireless_android_play_playlog.NetworkConnectionInfo.NetworkType} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.NetworkConnectionInfo.MobileSubtype} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.wireless_android_play_playlog.NetworkConnectionInfo.NetworkType \x3d {\n  NONE: -1,\n  MOBILE: 0,\n  WIFI: 1,\n  MOBILE_MMS: 2,\n  MOBILE_SUPL: 3,\n  MOBILE_DUN: 4,\n  MOBILE_HIPRI: 5,\n  WIMAX: 6,\n  BLUETOOTH: 7,\n  DUMMY: 8,\n  ETHERNET: 9,\n  MOBILE_FOTA: 10,\n  MOBILE_IMS: 11,\n  MOBILE_CBS: 12,\n  WIFI_P2P: 13,\n  MOBILE_IA: 14,\n  MOBILE_EMERGENCY: 15,\n  PROXY: 16,\n  VPN: 17\n};\n\n/**\n * @enum {number}\n */\nproto.wireless_android_play_playlog.NetworkConnectionInfo.MobileSubtype \x3d {\n  UNKNOWN_MOBILE_SUBTYPE: 0,\n  GPRS: 1,\n  EDGE: 2,\n  UMTS: 3,\n  CDMA: 4,\n  EVDO_0: 5,\n  EVDO_A: 6,\n  RTT: 7,\n  HSDPA: 8,\n  HSUPA: 9,\n  HSPA: 10,\n  IDEN: 11,\n  EVDO_B: 12,\n  LTE: 13,\n  EHRPD: 14,\n  HSPAP: 15,\n  GSM: 16,\n  TD_SCDMA: 17,\n  IWLAN: 18,\n  LTE_CA: 19,\n  COMBINED: 100\n};\n\n/**\n * optional NetworkType network_type \x3d 1;\n * @return {!proto.wireless_android_play_playlog.NetworkConnectionInfo.NetworkType}\n */\nproto.wireless_android_play_playlog.NetworkConnectionInfo.prototype.getNetworkType \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.NetworkConnectionInfo.NetworkType} */ (jspb.Message.getFieldWithDefault(this, 1, -1));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.NetworkConnectionInfo.NetworkType|undefined} value */\nproto.wireless_android_play_playlog.NetworkConnectionInfo.prototype.setNetworkType \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.NetworkConnectionInfo.prototype.clearNetworkType \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.NetworkConnectionInfo.prototype.hasNetworkType \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional MobileSubtype mobile_subtype \x3d 2;\n * @return {!proto.wireless_android_play_playlog.NetworkConnectionInfo.MobileSubtype}\n */\nproto.wireless_android_play_playlog.NetworkConnectionInfo.prototype.getMobileSubtype \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.NetworkConnectionInfo.MobileSubtype} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.NetworkConnectionInfo.MobileSubtype|undefined} value */\nproto.wireless_android_play_playlog.NetworkConnectionInfo.prototype.setMobileSubtype \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.NetworkConnectionInfo.prototype.clearMobileSubtype \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.NetworkConnectionInfo.prototype.hasMobileSubtype \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.NetworkConnectionInfo}\n */\nproto.wireless_android_play_playlog.NetworkConnectionInfo.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.NetworkConnectionInfo, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.ExperimentIds \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.wireless_android_play_playlog.ExperimentIds.repeatedFields_, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.ExperimentIds, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.ExperimentIds.displayName \x3d \x27proto.wireless_android_play_playlog.ExperimentIds\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nproto.wireless_android_play_playlog.ExperimentIds.repeatedFields_ \x3d [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.ExperimentIds.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.ExperimentIds.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.ExperimentIds} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.ExperimentIds.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    clearBlob: msg.getClearBlob_asB64(),\n    clearBlobJs: jspb.Message.getField(msg, 4),\n    encryptedBlobList: msg.getEncryptedBlobList_asB64(),\n    usersMatch: jspb.Message.getField(msg, 3)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.ExperimentIds}\n */\nproto.wireless_android_play_playlog.ExperimentIds.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.ExperimentIds;\n  return proto.wireless_android_play_playlog.ExperimentIds.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.ExperimentIds} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.ExperimentIds}\n */\nproto.wireless_android_play_playlog.ExperimentIds.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setClearBlob(value);\n      break;\n    case 4:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setClearBlobJs(value);\n      break;\n    case 2:\n      var value \x3d /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.addEncryptedBlob(value);\n      break;\n    case 3:\n      var value \x3d /** @type {boolean} */ (reader.readBool());\n      msg.setUsersMatch(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.ExperimentIds.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.ExperimentIds.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.ExperimentIds} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.ExperimentIds.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?(string|Uint8Array)} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n  f \x3d message.getEncryptedBlobList_asU8();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedBytes(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?boolean} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeBool(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes clear_blob \x3d 1;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.ExperimentIds.prototype.getClearBlob \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 1));\n};\n\n\n/**\n * optional bytes clear_blob \x3d 1;\n * This is a type-conversion wrapper around `getClearBlob()`\n * @return {?string}\n */\nproto.wireless_android_play_playlog.ExperimentIds.prototype.getClearBlob_asB64 \x3d function() {\n  return /** @type {?string} */ (jspb.Message.bytesAsB64(\n      this.getClearBlob()));\n};\n\n\n/**\n * optional bytes clear_blob \x3d 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getClearBlob()`\n * @return {?Uint8Array}\n */\nproto.wireless_android_play_playlog.ExperimentIds.prototype.getClearBlob_asU8 \x3d function() {\n  return /** @type {?Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getClearBlob()));\n};\n\n\n/** @param {?(string|Uint8Array)|undefined} value */\nproto.wireless_android_play_playlog.ExperimentIds.prototype.setClearBlob \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.ExperimentIds.prototype.clearClearBlob \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ExperimentIds.prototype.hasClearBlob \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional string clear_blob_js \x3d 4;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.ExperimentIds.prototype.getClearBlobJs \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.ExperimentIds.prototype.setClearBlobJs \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.wireless_android_play_playlog.ExperimentIds.prototype.clearClearBlobJs \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ExperimentIds.prototype.hasClearBlobJs \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * repeated bytes encrypted_blob \x3d 2;\n * @return {!Array\x3cstring\x3e}\n */\nproto.wireless_android_play_playlog.ExperimentIds.prototype.getEncryptedBlobList \x3d function() {\n  return /** @type {!Array\x3cstring\x3e} */ (jspb.Message.getRepeatedField(this, 2));\n};\n\n\n/**\n * repeated bytes encrypted_blob \x3d 2;\n * This is a type-conversion wrapper around `getEncryptedBlobList()`\n * @return {!Array\x3cstring\x3e}\n */\nproto.wireless_android_play_playlog.ExperimentIds.prototype.getEncryptedBlobList_asB64 \x3d function() {\n  return /** @type {!Array\x3cstring\x3e} */ (jspb.Message.bytesListAsB64(\n      this.getEncryptedBlobList()));\n};\n\n\n/**\n * repeated bytes encrypted_blob \x3d 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getEncryptedBlobList()`\n * @return {!Array\x3c!Uint8Array\x3e}\n */\nproto.wireless_android_play_playlog.ExperimentIds.prototype.getEncryptedBlobList_asU8 \x3d function() {\n  return /** @type {!Array\x3c!Uint8Array\x3e} */ (jspb.Message.bytesListAsU8(\n      this.getEncryptedBlobList()));\n};\n\n\n/** @param {(Array\x3c!Uint8Array\x3e|Array\x3cstring\x3e)|undefined} value */\nproto.wireless_android_play_playlog.ExperimentIds.prototype.setEncryptedBlobList \x3d function(value) {\n  jspb.Message.setField(this, 2, value || []);\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @param {number\x3d} opt_index\n */\nproto.wireless_android_play_playlog.ExperimentIds.prototype.addEncryptedBlob \x3d function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n\n\nproto.wireless_android_play_playlog.ExperimentIds.prototype.clearEncryptedBlobList \x3d function() {\n  this.setEncryptedBlobList([]);\n};\n\n\n/**\n * optional bool users_match \x3d 3;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val \x3d\x3d\x3d true/false} in those cases.\n * @return {?boolean}\n */\nproto.wireless_android_play_playlog.ExperimentIds.prototype.getUsersMatch \x3d function() {\n  return /** @type {?boolean} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?boolean|undefined} value */\nproto.wireless_android_play_playlog.ExperimentIds.prototype.setUsersMatch \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.ExperimentIds.prototype.clearUsersMatch \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ExperimentIds.prototype.hasUsersMatch \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.ExperimentIds}\n */\nproto.wireless_android_play_playlog.ExperimentIds.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.ExperimentIds, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.AndroidDeviceType \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.AndroidDeviceType, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.AndroidDeviceType.displayName \x3d \x27proto.wireless_android_play_playlog.AndroidDeviceType\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.AndroidDeviceType.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.AndroidDeviceType.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.AndroidDeviceType} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.AndroidDeviceType.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    isWatch: jspb.Message.getField(msg, 1),\n    isAutomotive: jspb.Message.getField(msg, 2)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.AndroidDeviceType}\n */\nproto.wireless_android_play_playlog.AndroidDeviceType.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.AndroidDeviceType;\n  return proto.wireless_android_play_playlog.AndroidDeviceType.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.AndroidDeviceType} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.AndroidDeviceType}\n */\nproto.wireless_android_play_playlog.AndroidDeviceType.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {boolean} */ (reader.readBool());\n      msg.setIsWatch(value);\n      break;\n    case 2:\n      var value \x3d /** @type {boolean} */ (reader.readBool());\n      msg.setIsAutomotive(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.AndroidDeviceType.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.AndroidDeviceType.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.AndroidDeviceType} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.AndroidDeviceType.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?boolean} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?boolean} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeBool(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool is_watch \x3d 1;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val \x3d\x3d\x3d true/false} in those cases.\n * @return {?boolean}\n */\nproto.wireless_android_play_playlog.AndroidDeviceType.prototype.getIsWatch \x3d function() {\n  return /** @type {?boolean} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?boolean|undefined} value */\nproto.wireless_android_play_playlog.AndroidDeviceType.prototype.setIsWatch \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidDeviceType.prototype.clearIsWatch \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidDeviceType.prototype.hasIsWatch \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional bool is_automotive \x3d 2;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val \x3d\x3d\x3d true/false} in those cases.\n * @return {?boolean}\n */\nproto.wireless_android_play_playlog.AndroidDeviceType.prototype.getIsAutomotive \x3d function() {\n  return /** @type {?boolean} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?boolean|undefined} value */\nproto.wireless_android_play_playlog.AndroidDeviceType.prototype.setIsAutomotive \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidDeviceType.prototype.clearIsAutomotive \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidDeviceType.prototype.hasIsAutomotive \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.AndroidDeviceType}\n */\nproto.wireless_android_play_playlog.AndroidDeviceType.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.AndroidDeviceType, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.AndroidClientInfo \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, 33, proto.wireless_android_play_playlog.AndroidClientInfo.repeatedFields_, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.AndroidClientInfo, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.AndroidClientInfo.displayName \x3d \x27proto.wireless_android_play_playlog.AndroidClientInfo\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.repeatedFields_ \x3d [31];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.AndroidClientInfo.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.AndroidClientInfo} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    androidId: jspb.Message.getField(msg, 1),\n    loggingId: jspb.Message.getField(msg, 2),\n    deviceId: jspb.Message.getField(msg, 18),\n    sdkVersion: jspb.Message.getField(msg, 3),\n    model: jspb.Message.getField(msg, 4),\n    product: jspb.Message.getField(msg, 5),\n    hardware: jspb.Message.getField(msg, 8),\n    device: jspb.Message.getField(msg, 9),\n    osBuild: jspb.Message.getField(msg, 6),\n    applicationBuild: jspb.Message.getField(msg, 7),\n    mccMnc: jspb.Message.getField(msg, 10),\n    locale: jspb.Message.getField(msg, 11),\n    country: jspb.Message.getField(msg, 12),\n    manufacturer: jspb.Message.getField(msg, 13),\n    brand: jspb.Message.getField(msg, 14),\n    board: jspb.Message.getField(msg, 15),\n    radioVersion: jspb.Message.getField(msg, 16),\n    fingerprint: jspb.Message.getField(msg, 17),\n    gmsCoreVersionCode: jspb.Message.getField(msg, 19),\n    gmscoreVariant: (f \x3d msg.getGmscoreVariant()) \x26\x26 proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.toObject(includeInstance, f),\n    isSidewinderDevice: jspb.Message.getField(msg, 20),\n    usingLogSourceInt: jspb.Message.getField(msg, 22),\n    deviceRestriction: jspb.Message.getField(msg, 23),\n    androidDeviceType: (f \x3d msg.getAndroidDeviceType()) \x26\x26 proto.wireless_android_play_playlog.AndroidDeviceType.toObject(includeInstance, f),\n    accessibilityState: (f \x3d msg.getAccessibilityState()) \x26\x26 proto.wireless_android_play_playlog.AccessibilityState.toObject(includeInstance, f),\n    type: jspb.Message.getField(msg, 26),\n    roOemKey1: jspb.Message.getField(msg, 27),\n    deviceDataVersionInfo: jspb.Message.getField(msg, 28),\n    nativePlatformList: jspb.Message.getRepeatedField(msg, 31)\n  };\n\n  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,\n      proto.wireless_android_play_playlog.AndroidClientInfo.extensions, proto.wireless_android_play_playlog.AndroidClientInfo.prototype.getExtension,\n      includeInstance);\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.AndroidClientInfo}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.AndroidClientInfo;\n  return proto.wireless_android_play_playlog.AndroidClientInfo.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.AndroidClientInfo} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.AndroidClientInfo}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {number} */ (reader.readInt64());\n      msg.setAndroidId(value);\n      break;\n    case 2:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setLoggingId(value);\n      break;\n    case 18:\n      var value \x3d /** @type {number} */ (reader.readInt64());\n      msg.setDeviceId(value);\n      break;\n    case 3:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setSdkVersion(value);\n      break;\n    case 4:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setModel(value);\n      break;\n    case 5:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setProduct(value);\n      break;\n    case 8:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setHardware(value);\n      break;\n    case 9:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setDevice(value);\n      break;\n    case 6:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setOsBuild(value);\n      break;\n    case 7:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setApplicationBuild(value);\n      break;\n    case 10:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setMccMnc(value);\n      break;\n    case 11:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setLocale(value);\n      break;\n    case 12:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setCountry(value);\n      break;\n    case 13:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setManufacturer(value);\n      break;\n    case 14:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setBrand(value);\n      break;\n    case 15:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setBoard(value);\n      break;\n    case 16:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setRadioVersion(value);\n      break;\n    case 17:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setFingerprint(value);\n      break;\n    case 19:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setGmsCoreVersionCode(value);\n      break;\n    case 32:\n      var value \x3d new proto.com.google.android.gmscore.proto.GmsCoreBuildVariant;\n      reader.readMessage(value,proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.deserializeBinaryFromReader);\n      msg.setGmscoreVariant(value);\n      break;\n    case 20:\n      var value \x3d /** @type {boolean} */ (reader.readBool());\n      msg.setIsSidewinderDevice(value);\n      break;\n    case 22:\n      var value \x3d /** @type {boolean} */ (reader.readBool());\n      msg.setUsingLogSourceInt(value);\n      break;\n    case 23:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.DeviceRestriction.Id} */ (reader.readEnum());\n      msg.setDeviceRestriction(value);\n      break;\n    case 24:\n      var value \x3d new proto.wireless_android_play_playlog.AndroidDeviceType;\n      reader.readMessage(value,proto.wireless_android_play_playlog.AndroidDeviceType.deserializeBinaryFromReader);\n      msg.setAndroidDeviceType(value);\n      break;\n    case 25:\n      var value \x3d new proto.wireless_android_play_playlog.AccessibilityState;\n      reader.readMessage(value,proto.wireless_android_play_playlog.AccessibilityState.deserializeBinaryFromReader);\n      msg.setAccessibilityState(value);\n      break;\n    case 26:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setType(value);\n      break;\n    case 27:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setRoOemKey1(value);\n      break;\n    case 28:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setDeviceDataVersionInfo(value);\n      break;\n    case 31:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.addNativePlatform(value);\n      break;\n    default:\n      jspb.Message.readBinaryExtension(msg, reader, proto.wireless_android_play_playlog.AndroidClientInfo.extensionsBinary,\n        proto.wireless_android_play_playlog.AndroidClientInfo.prototype.getExtension,\n        proto.wireless_android_play_playlog.AndroidClientInfo.prototype.setExtension);\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.AndroidClientInfo.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.AndroidClientInfo} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeInt64(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 18));\n  if (f !\x3d null) {\n    writer.writeInt64(\n      18,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 5));\n  if (f !\x3d null) {\n    writer.writeString(\n      5,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 8));\n  if (f !\x3d null) {\n    writer.writeString(\n      8,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 9));\n  if (f !\x3d null) {\n    writer.writeString(\n      9,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 6));\n  if (f !\x3d null) {\n    writer.writeString(\n      6,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 7));\n  if (f !\x3d null) {\n    writer.writeString(\n      7,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 10));\n  if (f !\x3d null) {\n    writer.writeString(\n      10,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 11));\n  if (f !\x3d null) {\n    writer.writeString(\n      11,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 12));\n  if (f !\x3d null) {\n    writer.writeString(\n      12,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 13));\n  if (f !\x3d null) {\n    writer.writeString(\n      13,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 14));\n  if (f !\x3d null) {\n    writer.writeString(\n      14,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 15));\n  if (f !\x3d null) {\n    writer.writeString(\n      15,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 16));\n  if (f !\x3d null) {\n    writer.writeString(\n      16,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 17));\n  if (f !\x3d null) {\n    writer.writeString(\n      17,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 19));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      19,\n      f\n    );\n  }\n  f \x3d message.getGmscoreVariant();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      32,\n      f,\n      proto.com.google.android.gmscore.proto.GmsCoreBuildVariant.serializeBinaryToWriter\n    );\n  }\n  f \x3d /** @type {?boolean} */ (jspb.Message.getField(message, 20));\n  if (f !\x3d null) {\n    writer.writeBool(\n      20,\n      f\n    );\n  }\n  f \x3d /** @type {?boolean} */ (jspb.Message.getField(message, 22));\n  if (f !\x3d null) {\n    writer.writeBool(\n      22,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.DeviceRestriction.Id} */ (jspb.Message.getField(message, 23));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      23,\n      f\n    );\n  }\n  f \x3d message.getAndroidDeviceType();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      24,\n      f,\n      proto.wireless_android_play_playlog.AndroidDeviceType.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getAccessibilityState();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      25,\n      f,\n      proto.wireless_android_play_playlog.AccessibilityState.serializeBinaryToWriter\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 26));\n  if (f !\x3d null) {\n    writer.writeString(\n      26,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 27));\n  if (f !\x3d null) {\n    writer.writeString(\n      27,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 28));\n  if (f !\x3d null) {\n    writer.writeString(\n      28,\n      f\n    );\n  }\n  f \x3d message.getNativePlatformList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedString(\n      31,\n      f\n    );\n  }\n  jspb.Message.serializeBinaryExtensions(message, writer,\n    proto.wireless_android_play_playlog.AndroidClientInfo.extensionsBinary, proto.wireless_android_play_playlog.AndroidClientInfo.prototype.getExtension);\n};\n\n\n/**\n * optional int64 android_id \x3d 1;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getAndroidId \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setAndroidId \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearAndroidId \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasAndroidId \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional string logging_id \x3d 2;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getLoggingId \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setLoggingId \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearLoggingId \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasLoggingId \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional int64 device_id \x3d 18;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getDeviceId \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 18));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setDeviceId \x3d function(value) {\n  jspb.Message.setField(this, 18, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearDeviceId \x3d function() {\n  jspb.Message.setField(this, 18, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasDeviceId \x3d function() {\n  return jspb.Message.getField(this, 18) !\x3d null;\n};\n\n\n/**\n * optional int32 sdk_version \x3d 3;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getSdkVersion \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setSdkVersion \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearSdkVersion \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasSdkVersion \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional string model \x3d 4;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getModel \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setModel \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearModel \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasModel \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional string product \x3d 5;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getProduct \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 5));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setProduct \x3d function(value) {\n  jspb.Message.setField(this, 5, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearProduct \x3d function() {\n  jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasProduct \x3d function() {\n  return jspb.Message.getField(this, 5) !\x3d null;\n};\n\n\n/**\n * optional string hardware \x3d 8;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getHardware \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 8));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setHardware \x3d function(value) {\n  jspb.Message.setField(this, 8, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearHardware \x3d function() {\n  jspb.Message.setField(this, 8, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasHardware \x3d function() {\n  return jspb.Message.getField(this, 8) !\x3d null;\n};\n\n\n/**\n * optional string device \x3d 9;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getDevice \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 9));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setDevice \x3d function(value) {\n  jspb.Message.setField(this, 9, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearDevice \x3d function() {\n  jspb.Message.setField(this, 9, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasDevice \x3d function() {\n  return jspb.Message.getField(this, 9) !\x3d null;\n};\n\n\n/**\n * optional string os_build \x3d 6;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getOsBuild \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 6));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setOsBuild \x3d function(value) {\n  jspb.Message.setField(this, 6, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearOsBuild \x3d function() {\n  jspb.Message.setField(this, 6, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasOsBuild \x3d function() {\n  return jspb.Message.getField(this, 6) !\x3d null;\n};\n\n\n/**\n * optional string application_build \x3d 7;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getApplicationBuild \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 7));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setApplicationBuild \x3d function(value) {\n  jspb.Message.setField(this, 7, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearApplicationBuild \x3d function() {\n  jspb.Message.setField(this, 7, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasApplicationBuild \x3d function() {\n  return jspb.Message.getField(this, 7) !\x3d null;\n};\n\n\n/**\n * optional string mcc_mnc \x3d 10;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getMccMnc \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 10));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setMccMnc \x3d function(value) {\n  jspb.Message.setField(this, 10, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearMccMnc \x3d function() {\n  jspb.Message.setField(this, 10, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasMccMnc \x3d function() {\n  return jspb.Message.getField(this, 10) !\x3d null;\n};\n\n\n/**\n * optional string locale \x3d 11;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getLocale \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 11));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setLocale \x3d function(value) {\n  jspb.Message.setField(this, 11, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearLocale \x3d function() {\n  jspb.Message.setField(this, 11, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasLocale \x3d function() {\n  return jspb.Message.getField(this, 11) !\x3d null;\n};\n\n\n/**\n * optional string country \x3d 12;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getCountry \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 12));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setCountry \x3d function(value) {\n  jspb.Message.setField(this, 12, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearCountry \x3d function() {\n  jspb.Message.setField(this, 12, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasCountry \x3d function() {\n  return jspb.Message.getField(this, 12) !\x3d null;\n};\n\n\n/**\n * optional string manufacturer \x3d 13;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getManufacturer \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 13));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setManufacturer \x3d function(value) {\n  jspb.Message.setField(this, 13, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearManufacturer \x3d function() {\n  jspb.Message.setField(this, 13, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasManufacturer \x3d function() {\n  return jspb.Message.getField(this, 13) !\x3d null;\n};\n\n\n/**\n * optional string brand \x3d 14;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getBrand \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 14));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setBrand \x3d function(value) {\n  jspb.Message.setField(this, 14, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearBrand \x3d function() {\n  jspb.Message.setField(this, 14, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasBrand \x3d function() {\n  return jspb.Message.getField(this, 14) !\x3d null;\n};\n\n\n/**\n * optional string board \x3d 15;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getBoard \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 15));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setBoard \x3d function(value) {\n  jspb.Message.setField(this, 15, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearBoard \x3d function() {\n  jspb.Message.setField(this, 15, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasBoard \x3d function() {\n  return jspb.Message.getField(this, 15) !\x3d null;\n};\n\n\n/**\n * optional string radio_version \x3d 16;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getRadioVersion \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 16));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setRadioVersion \x3d function(value) {\n  jspb.Message.setField(this, 16, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearRadioVersion \x3d function() {\n  jspb.Message.setField(this, 16, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasRadioVersion \x3d function() {\n  return jspb.Message.getField(this, 16) !\x3d null;\n};\n\n\n/**\n * optional string fingerprint \x3d 17;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getFingerprint \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 17));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setFingerprint \x3d function(value) {\n  jspb.Message.setField(this, 17, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearFingerprint \x3d function() {\n  jspb.Message.setField(this, 17, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasFingerprint \x3d function() {\n  return jspb.Message.getField(this, 17) !\x3d null;\n};\n\n\n/**\n * optional int32 gms_core_version_code \x3d 19;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getGmsCoreVersionCode \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 19));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setGmsCoreVersionCode \x3d function(value) {\n  jspb.Message.setField(this, 19, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearGmsCoreVersionCode \x3d function() {\n  jspb.Message.setField(this, 19, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasGmsCoreVersionCode \x3d function() {\n  return jspb.Message.getField(this, 19) !\x3d null;\n};\n\n\n/**\n * optional com.google.android.gmscore.proto.GmsCoreBuildVariant gmscore_variant \x3d 32;\n * @return {?proto.com.google.android.gmscore.proto.GmsCoreBuildVariant}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getGmscoreVariant \x3d function() {\n  return /** @type{?proto.com.google.android.gmscore.proto.GmsCoreBuildVariant} */ (\n    jspb.Message.getWrapperField(this, proto.com.google.android.gmscore.proto.GmsCoreBuildVariant, 32));\n};\n\n\n/** @param {?proto.com.google.android.gmscore.proto.GmsCoreBuildVariant|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setGmscoreVariant \x3d function(value) {\n  jspb.Message.setWrapperField(this, 32, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearGmscoreVariant \x3d function() {\n  this.setGmscoreVariant(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasGmscoreVariant \x3d function() {\n  return jspb.Message.getField(this, 32) !\x3d null;\n};\n\n\n/**\n * optional bool is_sidewinder_device \x3d 20;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val \x3d\x3d\x3d true/false} in those cases.\n * @return {?boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getIsSidewinderDevice \x3d function() {\n  return /** @type {?boolean} */ (jspb.Message.getField(this, 20));\n};\n\n\n/** @param {?boolean|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setIsSidewinderDevice \x3d function(value) {\n  jspb.Message.setField(this, 20, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearIsSidewinderDevice \x3d function() {\n  jspb.Message.setField(this, 20, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasIsSidewinderDevice \x3d function() {\n  return jspb.Message.getField(this, 20) !\x3d null;\n};\n\n\n/**\n * optional bool using_log_source_int \x3d 22;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val \x3d\x3d\x3d true/false} in those cases.\n * @return {?boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getUsingLogSourceInt \x3d function() {\n  return /** @type {?boolean} */ (jspb.Message.getField(this, 22));\n};\n\n\n/** @param {?boolean|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setUsingLogSourceInt \x3d function(value) {\n  jspb.Message.setField(this, 22, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearUsingLogSourceInt \x3d function() {\n  jspb.Message.setField(this, 22, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasUsingLogSourceInt \x3d function() {\n  return jspb.Message.getField(this, 22) !\x3d null;\n};\n\n\n/**\n * optional DeviceRestriction.Id device_restriction \x3d 23;\n * @return {!proto.wireless_android_play_playlog.DeviceRestriction.Id}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getDeviceRestriction \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.DeviceRestriction.Id} */ (jspb.Message.getField(this, 23));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.DeviceRestriction.Id|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setDeviceRestriction \x3d function(value) {\n  jspb.Message.setField(this, 23, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearDeviceRestriction \x3d function() {\n  jspb.Message.setField(this, 23, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasDeviceRestriction \x3d function() {\n  return jspb.Message.getField(this, 23) !\x3d null;\n};\n\n\n/**\n * optional AndroidDeviceType android_device_type \x3d 24;\n * @return {?proto.wireless_android_play_playlog.AndroidDeviceType}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getAndroidDeviceType \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.AndroidDeviceType} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.AndroidDeviceType, 24));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.AndroidDeviceType|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setAndroidDeviceType \x3d function(value) {\n  jspb.Message.setWrapperField(this, 24, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearAndroidDeviceType \x3d function() {\n  this.setAndroidDeviceType(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasAndroidDeviceType \x3d function() {\n  return jspb.Message.getField(this, 24) !\x3d null;\n};\n\n\n/**\n * optional AccessibilityState accessibility_state \x3d 25;\n * @return {?proto.wireless_android_play_playlog.AccessibilityState}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getAccessibilityState \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.AccessibilityState} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.AccessibilityState, 25));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.AccessibilityState|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setAccessibilityState \x3d function(value) {\n  jspb.Message.setWrapperField(this, 25, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearAccessibilityState \x3d function() {\n  this.setAccessibilityState(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasAccessibilityState \x3d function() {\n  return jspb.Message.getField(this, 25) !\x3d null;\n};\n\n\n/**\n * optional string type \x3d 26;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getType \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 26));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setType \x3d function(value) {\n  jspb.Message.setField(this, 26, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearType \x3d function() {\n  jspb.Message.setField(this, 26, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasType \x3d function() {\n  return jspb.Message.getField(this, 26) !\x3d null;\n};\n\n\n/**\n * optional string ro_oem_key1 \x3d 27;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getRoOemKey1 \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 27));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setRoOemKey1 \x3d function(value) {\n  jspb.Message.setField(this, 27, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearRoOemKey1 \x3d function() {\n  jspb.Message.setField(this, 27, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasRoOemKey1 \x3d function() {\n  return jspb.Message.getField(this, 27) !\x3d null;\n};\n\n\n/**\n * optional string device_data_version_info \x3d 28;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getDeviceDataVersionInfo \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 28));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setDeviceDataVersionInfo \x3d function(value) {\n  jspb.Message.setField(this, 28, value);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearDeviceDataVersionInfo \x3d function() {\n  jspb.Message.setField(this, 28, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.hasDeviceDataVersionInfo \x3d function() {\n  return jspb.Message.getField(this, 28) !\x3d null;\n};\n\n\n/**\n * repeated string native_platform \x3d 31;\n * @return {!Array\x3cstring\x3e}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.getNativePlatformList \x3d function() {\n  return /** @type {!Array\x3cstring\x3e} */ (jspb.Message.getRepeatedField(this, 31));\n};\n\n\n/** @param {Array\x3cstring\x3e|undefined} value */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.setNativePlatformList \x3d function(value) {\n  jspb.Message.setField(this, 31, value || []);\n};\n\n\n/**\n * @param {string} value\n * @param {number\x3d} opt_index\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.addNativePlatform \x3d function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 31, value, opt_index);\n};\n\n\nproto.wireless_android_play_playlog.AndroidClientInfo.prototype.clearNativePlatformList \x3d function() {\n  this.setNativePlatformList([]);\n};\n\n\n\n/**\n * The extensions registered with this message class. This is a map of\n * extension field number to fieldInfo object.\n *\n * For example:\n *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n *\n * fieldName contains the JsCompiler renamed field name property so that it\n * works in OPTIMIZED mode.\n *\n * @type {!Object\x3cnumber, jspb.ExtensionFieldInfo\x3e}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.extensions \x3d {};\n\n\n/**\n * The extensions registered with this message class. This is a map of\n * extension field number to fieldInfo object.\n *\n * For example:\n *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n *\n * fieldName contains the JsCompiler renamed field name property so that it\n * works in OPTIMIZED mode.\n *\n * @type {!Object\x3cnumber, jspb.ExtensionFieldBinaryInfo\x3e}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.extensionsBinary \x3d {};\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.AndroidClientInfo}\n */\nproto.wireless_android_play_playlog.AndroidClientInfo.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.AndroidClientInfo, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.BrowserInfo \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.BrowserInfo, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.BrowserInfo.displayName \x3d \x27proto.wireless_android_play_playlog.BrowserInfo\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.BrowserInfo.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.BrowserInfo.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.BrowserInfo} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.BrowserInfo.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    locale: jspb.Message.getField(msg, 1),\n    browser: jspb.Message.getField(msg, 2),\n    browserVersion: jspb.Message.getField(msg, 3),\n    flashVersion: jspb.Message.getField(msg, 4)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.BrowserInfo}\n */\nproto.wireless_android_play_playlog.BrowserInfo.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.BrowserInfo;\n  return proto.wireless_android_play_playlog.BrowserInfo.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.BrowserInfo} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.BrowserInfo}\n */\nproto.wireless_android_play_playlog.BrowserInfo.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setLocale(value);\n      break;\n    case 2:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setBrowser(value);\n      break;\n    case 3:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setBrowserVersion(value);\n      break;\n    case 4:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setFlashVersion(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.BrowserInfo.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.BrowserInfo.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.BrowserInfo} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.BrowserInfo.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string locale \x3d 1;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.BrowserInfo.prototype.getLocale \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.BrowserInfo.prototype.setLocale \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.BrowserInfo.prototype.clearLocale \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.BrowserInfo.prototype.hasLocale \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional string browser \x3d 2;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.BrowserInfo.prototype.getBrowser \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.BrowserInfo.prototype.setBrowser \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.BrowserInfo.prototype.clearBrowser \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.BrowserInfo.prototype.hasBrowser \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional string browser_version \x3d 3;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.BrowserInfo.prototype.getBrowserVersion \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.BrowserInfo.prototype.setBrowserVersion \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.BrowserInfo.prototype.clearBrowserVersion \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.BrowserInfo.prototype.hasBrowserVersion \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional string flash_version \x3d 4;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.BrowserInfo.prototype.getFlashVersion \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.BrowserInfo.prototype.setFlashVersion \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.wireless_android_play_playlog.BrowserInfo.prototype.clearFlashVersion \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.BrowserInfo.prototype.hasFlashVersion \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.BrowserInfo}\n */\nproto.wireless_android_play_playlog.BrowserInfo.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.BrowserInfo, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.DesktopClientInfo \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.DesktopClientInfo, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.DesktopClientInfo.displayName \x3d \x27proto.wireless_android_play_playlog.DesktopClientInfo\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.DesktopClientInfo.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.DesktopClientInfo} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    clientId: jspb.Message.getField(msg, 1),\n    loggingId: jspb.Message.getField(msg, 2),\n    os: jspb.Message.getField(msg, 3),\n    osMajorVersion: jspb.Message.getField(msg, 4),\n    osFullVersion: jspb.Message.getField(msg, 5),\n    applicationBuild: jspb.Message.getField(msg, 6),\n    country: jspb.Message.getField(msg, 7),\n    applicationBuildCl: jspb.Message.getField(msg, 8),\n    clearcutVersion: jspb.Message.getField(msg, 9)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.DesktopClientInfo}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.DesktopClientInfo;\n  return proto.wireless_android_play_playlog.DesktopClientInfo.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.DesktopClientInfo} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.DesktopClientInfo}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setClientId(value);\n      break;\n    case 2:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setLoggingId(value);\n      break;\n    case 3:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setOs(value);\n      break;\n    case 4:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setOsMajorVersion(value);\n      break;\n    case 5:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setOsFullVersion(value);\n      break;\n    case 6:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setApplicationBuild(value);\n      break;\n    case 7:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setCountry(value);\n      break;\n    case 8:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setApplicationBuildCl(value);\n      break;\n    case 9:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setClearcutVersion(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.DesktopClientInfo.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.DesktopClientInfo} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 5));\n  if (f !\x3d null) {\n    writer.writeString(\n      5,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 6));\n  if (f !\x3d null) {\n    writer.writeString(\n      6,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 7));\n  if (f !\x3d null) {\n    writer.writeString(\n      7,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 8));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      8,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 9));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      9,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string client_id \x3d 1;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.getClientId \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.setClientId \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.clearClientId \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.hasClientId \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional string logging_id \x3d 2;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.getLoggingId \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.setLoggingId \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.clearLoggingId \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.hasLoggingId \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional string os \x3d 3;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.getOs \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.setOs \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.clearOs \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.hasOs \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional string os_major_version \x3d 4;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.getOsMajorVersion \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.setOsMajorVersion \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.clearOsMajorVersion \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.hasOsMajorVersion \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional string os_full_version \x3d 5;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.getOsFullVersion \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 5));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.setOsFullVersion \x3d function(value) {\n  jspb.Message.setField(this, 5, value);\n};\n\n\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.clearOsFullVersion \x3d function() {\n  jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.hasOsFullVersion \x3d function() {\n  return jspb.Message.getField(this, 5) !\x3d null;\n};\n\n\n/**\n * optional string application_build \x3d 6;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.getApplicationBuild \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 6));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.setApplicationBuild \x3d function(value) {\n  jspb.Message.setField(this, 6, value);\n};\n\n\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.clearApplicationBuild \x3d function() {\n  jspb.Message.setField(this, 6, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.hasApplicationBuild \x3d function() {\n  return jspb.Message.getField(this, 6) !\x3d null;\n};\n\n\n/**\n * optional string country \x3d 7;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.getCountry \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 7));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.setCountry \x3d function(value) {\n  jspb.Message.setField(this, 7, value);\n};\n\n\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.clearCountry \x3d function() {\n  jspb.Message.setField(this, 7, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.hasCountry \x3d function() {\n  return jspb.Message.getField(this, 7) !\x3d null;\n};\n\n\n/**\n * optional int32 application_build_cl \x3d 8;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.getApplicationBuildCl \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 8));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.setApplicationBuildCl \x3d function(value) {\n  jspb.Message.setField(this, 8, value);\n};\n\n\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.clearApplicationBuildCl \x3d function() {\n  jspb.Message.setField(this, 8, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.hasApplicationBuildCl \x3d function() {\n  return jspb.Message.getField(this, 8) !\x3d null;\n};\n\n\n/**\n * optional int32 clearcut_version \x3d 9;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.getClearcutVersion \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 9));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.setClearcutVersion \x3d function(value) {\n  jspb.Message.setField(this, 9, value);\n};\n\n\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.clearClearcutVersion \x3d function() {\n  jspb.Message.setField(this, 9, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.prototype.hasClearcutVersion \x3d function() {\n  return jspb.Message.getField(this, 9) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.DesktopClientInfo}\n */\nproto.wireless_android_play_playlog.DesktopClientInfo.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.DesktopClientInfo, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.MacClientInfo \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.MacClientInfo, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.MacClientInfo.displayName \x3d \x27proto.wireless_android_play_playlog.MacClientInfo\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.MacClientInfo.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.MacClientInfo} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.MacClientInfo.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    osMajorVersion: jspb.Message.getField(msg, 1),\n    osFullVersion: jspb.Message.getField(msg, 2),\n    applicationBuild: jspb.Message.getField(msg, 3),\n    country: jspb.Message.getField(msg, 4),\n    applicationBuildCl: jspb.Message.getField(msg, 5),\n    clearcutVersion: jspb.Message.getField(msg, 6),\n    applicationBundleId: jspb.Message.getField(msg, 7)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.MacClientInfo}\n */\nproto.wireless_android_play_playlog.MacClientInfo.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.MacClientInfo;\n  return proto.wireless_android_play_playlog.MacClientInfo.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.MacClientInfo} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.MacClientInfo}\n */\nproto.wireless_android_play_playlog.MacClientInfo.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setOsMajorVersion(value);\n      break;\n    case 2:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setOsFullVersion(value);\n      break;\n    case 3:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setApplicationBuild(value);\n      break;\n    case 4:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setCountry(value);\n      break;\n    case 5:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setApplicationBuildCl(value);\n      break;\n    case 6:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setClearcutVersion(value);\n      break;\n    case 7:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setApplicationBundleId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.MacClientInfo.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.MacClientInfo} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.MacClientInfo.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 5));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      5,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 6));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      6,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 7));\n  if (f !\x3d null) {\n    writer.writeString(\n      7,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string os_major_version \x3d 1;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.getOsMajorVersion \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.setOsMajorVersion \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.MacClientInfo.prototype.clearOsMajorVersion \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.hasOsMajorVersion \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional string os_full_version \x3d 2;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.getOsFullVersion \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.setOsFullVersion \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.MacClientInfo.prototype.clearOsFullVersion \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.hasOsFullVersion \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional string application_build \x3d 3;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.getApplicationBuild \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.setApplicationBuild \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.MacClientInfo.prototype.clearApplicationBuild \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.hasApplicationBuild \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional string country \x3d 4;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.getCountry \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.setCountry \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.wireless_android_play_playlog.MacClientInfo.prototype.clearCountry \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.hasCountry \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional int32 application_build_cl \x3d 5;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.getApplicationBuildCl \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 5));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.setApplicationBuildCl \x3d function(value) {\n  jspb.Message.setField(this, 5, value);\n};\n\n\nproto.wireless_android_play_playlog.MacClientInfo.prototype.clearApplicationBuildCl \x3d function() {\n  jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.hasApplicationBuildCl \x3d function() {\n  return jspb.Message.getField(this, 5) !\x3d null;\n};\n\n\n/**\n * optional int32 clearcut_version \x3d 6;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.getClearcutVersion \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 6));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.setClearcutVersion \x3d function(value) {\n  jspb.Message.setField(this, 6, value);\n};\n\n\nproto.wireless_android_play_playlog.MacClientInfo.prototype.clearClearcutVersion \x3d function() {\n  jspb.Message.setField(this, 6, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.hasClearcutVersion \x3d function() {\n  return jspb.Message.getField(this, 6) !\x3d null;\n};\n\n\n/**\n * optional string application_bundle_id \x3d 7;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.getApplicationBundleId \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 7));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.setApplicationBundleId \x3d function(value) {\n  jspb.Message.setField(this, 7, value);\n};\n\n\nproto.wireless_android_play_playlog.MacClientInfo.prototype.clearApplicationBundleId \x3d function() {\n  jspb.Message.setField(this, 7, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.MacClientInfo.prototype.hasApplicationBundleId \x3d function() {\n  return jspb.Message.getField(this, 7) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.MacClientInfo}\n */\nproto.wireless_android_play_playlog.MacClientInfo.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.MacClientInfo, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.IosClientInfo \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.IosClientInfo, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.IosClientInfo.displayName \x3d \x27proto.wireless_android_play_playlog.IosClientInfo\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.IosClientInfo.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.IosClientInfo} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.IosClientInfo.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    clientId: jspb.Message.getField(msg, 1),\n    loggingId: jspb.Message.getField(msg, 2),\n    osMajorVersion: jspb.Message.getField(msg, 3),\n    osFullVersion: jspb.Message.getField(msg, 4),\n    applicationBuild: jspb.Message.getField(msg, 5),\n    applicationVersion: jspb.Message.getField(msg, 12),\n    country: jspb.Message.getField(msg, 6),\n    model: jspb.Message.getField(msg, 7),\n    languageCode: jspb.Message.getField(msg, 8),\n    applicationBuildCl: jspb.Message.getField(msg, 9),\n    clearcutVersion: jspb.Message.getField(msg, 10),\n    applicationBundleId: jspb.Message.getField(msg, 11)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.IosClientInfo}\n */\nproto.wireless_android_play_playlog.IosClientInfo.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.IosClientInfo;\n  return proto.wireless_android_play_playlog.IosClientInfo.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.IosClientInfo} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.IosClientInfo}\n */\nproto.wireless_android_play_playlog.IosClientInfo.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setClientId(value);\n      break;\n    case 2:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setLoggingId(value);\n      break;\n    case 3:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setOsMajorVersion(value);\n      break;\n    case 4:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setOsFullVersion(value);\n      break;\n    case 5:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setApplicationBuild(value);\n      break;\n    case 12:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setApplicationVersion(value);\n      break;\n    case 6:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setCountry(value);\n      break;\n    case 7:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setModel(value);\n      break;\n    case 8:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setLanguageCode(value);\n      break;\n    case 9:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setApplicationBuildCl(value);\n      break;\n    case 10:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setClearcutVersion(value);\n      break;\n    case 11:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setApplicationBundleId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.IosClientInfo.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.IosClientInfo} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.IosClientInfo.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 5));\n  if (f !\x3d null) {\n    writer.writeString(\n      5,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 12));\n  if (f !\x3d null) {\n    writer.writeString(\n      12,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 6));\n  if (f !\x3d null) {\n    writer.writeString(\n      6,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 7));\n  if (f !\x3d null) {\n    writer.writeString(\n      7,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 8));\n  if (f !\x3d null) {\n    writer.writeString(\n      8,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 9));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      9,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 10));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      10,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 11));\n  if (f !\x3d null) {\n    writer.writeString(\n      11,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string client_id \x3d 1;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.getClientId \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.setClientId \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.IosClientInfo.prototype.clearClientId \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.hasClientId \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional string logging_id \x3d 2;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.getLoggingId \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.setLoggingId \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.IosClientInfo.prototype.clearLoggingId \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.hasLoggingId \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional string os_major_version \x3d 3;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.getOsMajorVersion \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.setOsMajorVersion \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.IosClientInfo.prototype.clearOsMajorVersion \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.hasOsMajorVersion \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional string os_full_version \x3d 4;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.getOsFullVersion \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.setOsFullVersion \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.wireless_android_play_playlog.IosClientInfo.prototype.clearOsFullVersion \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.hasOsFullVersion \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional string application_build \x3d 5;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.getApplicationBuild \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 5));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.setApplicationBuild \x3d function(value) {\n  jspb.Message.setField(this, 5, value);\n};\n\n\nproto.wireless_android_play_playlog.IosClientInfo.prototype.clearApplicationBuild \x3d function() {\n  jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.hasApplicationBuild \x3d function() {\n  return jspb.Message.getField(this, 5) !\x3d null;\n};\n\n\n/**\n * optional string application_version \x3d 12;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.getApplicationVersion \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 12));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.setApplicationVersion \x3d function(value) {\n  jspb.Message.setField(this, 12, value);\n};\n\n\nproto.wireless_android_play_playlog.IosClientInfo.prototype.clearApplicationVersion \x3d function() {\n  jspb.Message.setField(this, 12, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.hasApplicationVersion \x3d function() {\n  return jspb.Message.getField(this, 12) !\x3d null;\n};\n\n\n/**\n * optional string country \x3d 6;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.getCountry \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 6));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.setCountry \x3d function(value) {\n  jspb.Message.setField(this, 6, value);\n};\n\n\nproto.wireless_android_play_playlog.IosClientInfo.prototype.clearCountry \x3d function() {\n  jspb.Message.setField(this, 6, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.hasCountry \x3d function() {\n  return jspb.Message.getField(this, 6) !\x3d null;\n};\n\n\n/**\n * optional string model \x3d 7;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.getModel \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 7));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.setModel \x3d function(value) {\n  jspb.Message.setField(this, 7, value);\n};\n\n\nproto.wireless_android_play_playlog.IosClientInfo.prototype.clearModel \x3d function() {\n  jspb.Message.setField(this, 7, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.hasModel \x3d function() {\n  return jspb.Message.getField(this, 7) !\x3d null;\n};\n\n\n/**\n * optional string language_code \x3d 8;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.getLanguageCode \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 8));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.setLanguageCode \x3d function(value) {\n  jspb.Message.setField(this, 8, value);\n};\n\n\nproto.wireless_android_play_playlog.IosClientInfo.prototype.clearLanguageCode \x3d function() {\n  jspb.Message.setField(this, 8, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.hasLanguageCode \x3d function() {\n  return jspb.Message.getField(this, 8) !\x3d null;\n};\n\n\n/**\n * optional int32 application_build_cl \x3d 9;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.getApplicationBuildCl \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 9));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.setApplicationBuildCl \x3d function(value) {\n  jspb.Message.setField(this, 9, value);\n};\n\n\nproto.wireless_android_play_playlog.IosClientInfo.prototype.clearApplicationBuildCl \x3d function() {\n  jspb.Message.setField(this, 9, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.hasApplicationBuildCl \x3d function() {\n  return jspb.Message.getField(this, 9) !\x3d null;\n};\n\n\n/**\n * optional int32 clearcut_version \x3d 10;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.getClearcutVersion \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 10));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.setClearcutVersion \x3d function(value) {\n  jspb.Message.setField(this, 10, value);\n};\n\n\nproto.wireless_android_play_playlog.IosClientInfo.prototype.clearClearcutVersion \x3d function() {\n  jspb.Message.setField(this, 10, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.hasClearcutVersion \x3d function() {\n  return jspb.Message.getField(this, 10) !\x3d null;\n};\n\n\n/**\n * optional string application_bundle_id \x3d 11;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.getApplicationBundleId \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 11));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.setApplicationBundleId \x3d function(value) {\n  jspb.Message.setField(this, 11, value);\n};\n\n\nproto.wireless_android_play_playlog.IosClientInfo.prototype.clearApplicationBundleId \x3d function() {\n  jspb.Message.setField(this, 11, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.IosClientInfo.prototype.hasApplicationBundleId \x3d function() {\n  return jspb.Message.getField(this, 11) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.IosClientInfo}\n */\nproto.wireless_android_play_playlog.IosClientInfo.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.IosClientInfo, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.PancettaClientInfo \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.PancettaClientInfo, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.PancettaClientInfo.displayName \x3d \x27proto.wireless_android_play_playlog.PancettaClientInfo\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.PancettaClientInfo.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.PancettaClientInfo} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.PancettaClientInfo.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    deviceId: jspb.Message.getField(msg, 1),\n    os: jspb.Message.getField(msg, 2),\n    appId: jspb.Message.getField(msg, 3),\n    appVersion: jspb.Message.getField(msg, 4),\n    mccMnc: jspb.Message.getField(msg, 5)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.PancettaClientInfo}\n */\nproto.wireless_android_play_playlog.PancettaClientInfo.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.PancettaClientInfo;\n  return proto.wireless_android_play_playlog.PancettaClientInfo.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.PancettaClientInfo} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.PancettaClientInfo}\n */\nproto.wireless_android_play_playlog.PancettaClientInfo.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setDeviceId(value);\n      break;\n    case 2:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.PancettaClientInfo.OsType} */ (reader.readEnum());\n      msg.setOs(value);\n      break;\n    case 3:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setAppId(value);\n      break;\n    case 4:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setAppVersion(value);\n      break;\n    case 5:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setMccMnc(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.PancettaClientInfo.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.PancettaClientInfo} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.PancettaClientInfo.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.PancettaClientInfo.OsType} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 5));\n  if (f !\x3d null) {\n    writer.writeString(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.wireless_android_play_playlog.PancettaClientInfo.OsType \x3d {\n  OS_TYPE_UNKNOWN: 0,\n  OS_TYPE_MAC: 1,\n  OS_TYPE_WINDOWS: 2,\n  OS_TYPE_ANDROID: 3,\n  OS_TYPE_CROS: 4,\n  OS_TYPE_LINUX: 5,\n  OS_TYPE_OPENBSD: 6\n};\n\n/**\n * optional string device_id \x3d 1;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.getDeviceId \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.setDeviceId \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.clearDeviceId \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.hasDeviceId \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional OsType os \x3d 2;\n * @return {!proto.wireless_android_play_playlog.PancettaClientInfo.OsType}\n */\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.getOs \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.PancettaClientInfo.OsType} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.PancettaClientInfo.OsType|undefined} value */\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.setOs \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.clearOs \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.hasOs \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional string app_id \x3d 3;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.getAppId \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.setAppId \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.clearAppId \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.hasAppId \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional string app_version \x3d 4;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.getAppVersion \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.setAppVersion \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.clearAppVersion \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.hasAppVersion \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional string mcc_mnc \x3d 5;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.getMccMnc \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 5));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.setMccMnc \x3d function(value) {\n  jspb.Message.setField(this, 5, value);\n};\n\n\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.clearMccMnc \x3d function() {\n  jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.PancettaClientInfo.prototype.hasMccMnc \x3d function() {\n  return jspb.Message.getField(this, 5) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.PancettaClientInfo}\n */\nproto.wireless_android_play_playlog.PancettaClientInfo.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.PancettaClientInfo, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.PlayCeClientInfo, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.PlayCeClientInfo.displayName \x3d \x27proto.wireless_android_play_playlog.PlayCeClientInfo\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.PlayCeClientInfo.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.PlayCeClientInfo} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    clientId: jspb.Message.getField(msg, 1),\n    loggingId: jspb.Message.getField(msg, 7),\n    make: jspb.Message.getField(msg, 3),\n    model: jspb.Message.getField(msg, 4),\n    applicationBuild: jspb.Message.getField(msg, 5),\n    platformVersion: jspb.Message.getField(msg, 6),\n    country: jspb.Message.getField(msg, 8)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.PlayCeClientInfo}\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.PlayCeClientInfo;\n  return proto.wireless_android_play_playlog.PlayCeClientInfo.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.PlayCeClientInfo} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.PlayCeClientInfo}\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setClientId(value);\n      break;\n    case 7:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setLoggingId(value);\n      break;\n    case 3:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setMake(value);\n      break;\n    case 4:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setModel(value);\n      break;\n    case 5:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setApplicationBuild(value);\n      break;\n    case 6:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setPlatformVersion(value);\n      break;\n    case 8:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setCountry(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.PlayCeClientInfo.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.PlayCeClientInfo} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 7));\n  if (f !\x3d null) {\n    writer.writeString(\n      7,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 5));\n  if (f !\x3d null) {\n    writer.writeString(\n      5,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 6));\n  if (f !\x3d null) {\n    writer.writeString(\n      6,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 8));\n  if (f !\x3d null) {\n    writer.writeString(\n      8,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string client_id \x3d 1;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.getClientId \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.setClientId \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.clearClientId \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.hasClientId \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional string logging_id \x3d 7;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.getLoggingId \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 7));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.setLoggingId \x3d function(value) {\n  jspb.Message.setField(this, 7, value);\n};\n\n\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.clearLoggingId \x3d function() {\n  jspb.Message.setField(this, 7, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.hasLoggingId \x3d function() {\n  return jspb.Message.getField(this, 7) !\x3d null;\n};\n\n\n/**\n * optional string make \x3d 3;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.getMake \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.setMake \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.clearMake \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.hasMake \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional string model \x3d 4;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.getModel \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.setModel \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.clearModel \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.hasModel \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional string application_build \x3d 5;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.getApplicationBuild \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 5));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.setApplicationBuild \x3d function(value) {\n  jspb.Message.setField(this, 5, value);\n};\n\n\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.clearApplicationBuild \x3d function() {\n  jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.hasApplicationBuild \x3d function() {\n  return jspb.Message.getField(this, 5) !\x3d null;\n};\n\n\n/**\n * optional string platform_version \x3d 6;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.getPlatformVersion \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 6));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.setPlatformVersion \x3d function(value) {\n  jspb.Message.setField(this, 6, value);\n};\n\n\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.clearPlatformVersion \x3d function() {\n  jspb.Message.setField(this, 6, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.hasPlatformVersion \x3d function() {\n  return jspb.Message.getField(this, 6) !\x3d null;\n};\n\n\n/**\n * optional string country \x3d 8;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.getCountry \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 8));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.setCountry \x3d function(value) {\n  jspb.Message.setField(this, 8, value);\n};\n\n\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.clearCountry \x3d function() {\n  jspb.Message.setField(this, 8, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.prototype.hasCountry \x3d function() {\n  return jspb.Message.getField(this, 8) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.PlayCeClientInfo}\n */\nproto.wireless_android_play_playlog.PlayCeClientInfo.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.PlayCeClientInfo, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.VrClientInfo \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.VrClientInfo, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.VrClientInfo.displayName \x3d \x27proto.wireless_android_play_playlog.VrClientInfo\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.VrClientInfo.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.VrClientInfo} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.VrClientInfo.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    vrClientType: jspb.Message.getField(msg, 1),\n    sdkVersion: jspb.Message.getField(msg, 2),\n    fingerprint: jspb.Message.getField(msg, 3),\n    gvrVersion: jspb.Message.getField(msg, 4),\n    manufacturer: jspb.Message.getField(msg, 5),\n    model: jspb.Message.getField(msg, 6),\n    language: jspb.Message.getField(msg, 7),\n    country: jspb.Message.getField(msg, 8),\n    unityVersion: jspb.Message.getField(msg, 9),\n    unitySdkVersion: jspb.Message.getField(msg, 10)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.VrClientInfo}\n */\nproto.wireless_android_play_playlog.VrClientInfo.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.VrClientInfo;\n  return proto.wireless_android_play_playlog.VrClientInfo.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.VrClientInfo} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.VrClientInfo}\n */\nproto.wireless_android_play_playlog.VrClientInfo.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.VrClientInfo.VrClientType} */ (reader.readEnum());\n      msg.setVrClientType(value);\n      break;\n    case 2:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setSdkVersion(value);\n      break;\n    case 3:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setFingerprint(value);\n      break;\n    case 4:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setGvrVersion(value);\n      break;\n    case 5:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setManufacturer(value);\n      break;\n    case 6:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setModel(value);\n      break;\n    case 7:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setLanguage(value);\n      break;\n    case 8:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setCountry(value);\n      break;\n    case 9:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setUnityVersion(value);\n      break;\n    case 10:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setUnitySdkVersion(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.VrClientInfo.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.VrClientInfo} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.VrClientInfo.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {!proto.wireless_android_play_playlog.VrClientInfo.VrClientType} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 5));\n  if (f !\x3d null) {\n    writer.writeString(\n      5,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 6));\n  if (f !\x3d null) {\n    writer.writeString(\n      6,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 7));\n  if (f !\x3d null) {\n    writer.writeString(\n      7,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 8));\n  if (f !\x3d null) {\n    writer.writeString(\n      8,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 9));\n  if (f !\x3d null) {\n    writer.writeString(\n      9,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 10));\n  if (f !\x3d null) {\n    writer.writeString(\n      10,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.wireless_android_play_playlog.VrClientInfo.VrClientType \x3d {\n  UNKNOWN: 0,\n  ANDROID_CARDBOARD_SDK: 1,\n  IOS_CARDBOARD_SDK: 2,\n  ANDROID_UNITY_SDK: 3,\n  IOS_UNITY_SDK: 4,\n  WINDOWS: 5\n};\n\n/**\n * optional VrClientType vr_client_type \x3d 1;\n * @return {!proto.wireless_android_play_playlog.VrClientInfo.VrClientType}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.getVrClientType \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.VrClientInfo.VrClientType} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.VrClientInfo.VrClientType|undefined} value */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.setVrClientType \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.VrClientInfo.prototype.clearVrClientType \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.hasVrClientType \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional string sdk_version \x3d 2;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.getSdkVersion \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.setSdkVersion \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.VrClientInfo.prototype.clearSdkVersion \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.hasSdkVersion \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional string fingerprint \x3d 3;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.getFingerprint \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.setFingerprint \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.VrClientInfo.prototype.clearFingerprint \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.hasFingerprint \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional string gvr_version \x3d 4;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.getGvrVersion \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.setGvrVersion \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.wireless_android_play_playlog.VrClientInfo.prototype.clearGvrVersion \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.hasGvrVersion \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional string manufacturer \x3d 5;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.getManufacturer \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 5));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.setManufacturer \x3d function(value) {\n  jspb.Message.setField(this, 5, value);\n};\n\n\nproto.wireless_android_play_playlog.VrClientInfo.prototype.clearManufacturer \x3d function() {\n  jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.hasManufacturer \x3d function() {\n  return jspb.Message.getField(this, 5) !\x3d null;\n};\n\n\n/**\n * optional string model \x3d 6;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.getModel \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 6));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.setModel \x3d function(value) {\n  jspb.Message.setField(this, 6, value);\n};\n\n\nproto.wireless_android_play_playlog.VrClientInfo.prototype.clearModel \x3d function() {\n  jspb.Message.setField(this, 6, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.hasModel \x3d function() {\n  return jspb.Message.getField(this, 6) !\x3d null;\n};\n\n\n/**\n * optional string language \x3d 7;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.getLanguage \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 7));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.setLanguage \x3d function(value) {\n  jspb.Message.setField(this, 7, value);\n};\n\n\nproto.wireless_android_play_playlog.VrClientInfo.prototype.clearLanguage \x3d function() {\n  jspb.Message.setField(this, 7, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.hasLanguage \x3d function() {\n  return jspb.Message.getField(this, 7) !\x3d null;\n};\n\n\n/**\n * optional string country \x3d 8;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.getCountry \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 8));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.setCountry \x3d function(value) {\n  jspb.Message.setField(this, 8, value);\n};\n\n\nproto.wireless_android_play_playlog.VrClientInfo.prototype.clearCountry \x3d function() {\n  jspb.Message.setField(this, 8, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.hasCountry \x3d function() {\n  return jspb.Message.getField(this, 8) !\x3d null;\n};\n\n\n/**\n * optional string unity_version \x3d 9;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.getUnityVersion \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 9));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.setUnityVersion \x3d function(value) {\n  jspb.Message.setField(this, 9, value);\n};\n\n\nproto.wireless_android_play_playlog.VrClientInfo.prototype.clearUnityVersion \x3d function() {\n  jspb.Message.setField(this, 9, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.hasUnityVersion \x3d function() {\n  return jspb.Message.getField(this, 9) !\x3d null;\n};\n\n\n/**\n * optional string unity_sdk_version \x3d 10;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.getUnitySdkVersion \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 10));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.setUnitySdkVersion \x3d function(value) {\n  jspb.Message.setField(this, 10, value);\n};\n\n\nproto.wireless_android_play_playlog.VrClientInfo.prototype.clearUnitySdkVersion \x3d function() {\n  jspb.Message.setField(this, 10, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.VrClientInfo.prototype.hasUnitySdkVersion \x3d function() {\n  return jspb.Message.getField(this, 10) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.VrClientInfo}\n */\nproto.wireless_android_play_playlog.VrClientInfo.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.VrClientInfo, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.JsClientInfo \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.JsClientInfo, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.JsClientInfo.displayName \x3d \x27proto.wireless_android_play_playlog.JsClientInfo\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.JsClientInfo.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.JsClientInfo} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.JsClientInfo.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    os: jspb.Message.getField(msg, 1),\n    osVersion: jspb.Message.getField(msg, 2),\n    deviceType: jspb.Message.getField(msg, 3),\n    country: jspb.Message.getField(msg, 4),\n    locale: jspb.Message.getField(msg, 5),\n    osType: jspb.Message.getField(msg, 6),\n    buildLabel: jspb.Message.getField(msg, 7)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.JsClientInfo}\n */\nproto.wireless_android_play_playlog.JsClientInfo.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.JsClientInfo;\n  return proto.wireless_android_play_playlog.JsClientInfo.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.JsClientInfo} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.JsClientInfo}\n */\nproto.wireless_android_play_playlog.JsClientInfo.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setOs(value);\n      break;\n    case 2:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setOsVersion(value);\n      break;\n    case 3:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.JsClientInfo.DeviceType} */ (reader.readEnum());\n      msg.setDeviceType(value);\n      break;\n    case 4:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setCountry(value);\n      break;\n    case 5:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setLocale(value);\n      break;\n    case 6:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.JsClientInfo.OsType} */ (reader.readEnum());\n      msg.setOsType(value);\n      break;\n    case 7:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setBuildLabel(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.JsClientInfo.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.JsClientInfo} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.JsClientInfo.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.JsClientInfo.DeviceType} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 5));\n  if (f !\x3d null) {\n    writer.writeString(\n      5,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.JsClientInfo.OsType} */ (jspb.Message.getField(message, 6));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      6,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 7));\n  if (f !\x3d null) {\n    writer.writeString(\n      7,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.wireless_android_play_playlog.JsClientInfo.OsType \x3d {\n  OS_UNKNOWN: 0,\n  MAC: 1,\n  WINDOWS: 2,\n  ANDROID: 3,\n  LINUX: 4,\n  CHROME_OS: 5,\n  IPAD: 6,\n  IPHONE: 7,\n  IPOD: 8,\n  CHROMECAST: 9\n};\n\n/**\n * @enum {number}\n */\nproto.wireless_android_play_playlog.JsClientInfo.DeviceType \x3d {\n  UNKNOWN: 0,\n  MOBILE: 1,\n  TABLET: 2,\n  DESKTOP: 3,\n  GOOGLE_HOME: 4\n};\n\n/**\n * optional string os \x3d 1;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.getOs \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.setOs \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.JsClientInfo.prototype.clearOs \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.hasOs \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional string os_version \x3d 2;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.getOsVersion \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.setOsVersion \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.JsClientInfo.prototype.clearOsVersion \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.hasOsVersion \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional DeviceType device_type \x3d 3;\n * @return {!proto.wireless_android_play_playlog.JsClientInfo.DeviceType}\n */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.getDeviceType \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.JsClientInfo.DeviceType} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.JsClientInfo.DeviceType|undefined} value */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.setDeviceType \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.JsClientInfo.prototype.clearDeviceType \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.hasDeviceType \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional string country \x3d 4;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.getCountry \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.setCountry \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.wireless_android_play_playlog.JsClientInfo.prototype.clearCountry \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.hasCountry \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional string locale \x3d 5;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.getLocale \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 5));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.setLocale \x3d function(value) {\n  jspb.Message.setField(this, 5, value);\n};\n\n\nproto.wireless_android_play_playlog.JsClientInfo.prototype.clearLocale \x3d function() {\n  jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.hasLocale \x3d function() {\n  return jspb.Message.getField(this, 5) !\x3d null;\n};\n\n\n/**\n * optional OsType os_type \x3d 6;\n * @return {!proto.wireless_android_play_playlog.JsClientInfo.OsType}\n */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.getOsType \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.JsClientInfo.OsType} */ (jspb.Message.getField(this, 6));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.JsClientInfo.OsType|undefined} value */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.setOsType \x3d function(value) {\n  jspb.Message.setField(this, 6, value);\n};\n\n\nproto.wireless_android_play_playlog.JsClientInfo.prototype.clearOsType \x3d function() {\n  jspb.Message.setField(this, 6, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.hasOsType \x3d function() {\n  return jspb.Message.getField(this, 6) !\x3d null;\n};\n\n\n/**\n * optional string build_label \x3d 7;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.getBuildLabel \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 7));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.setBuildLabel \x3d function(value) {\n  jspb.Message.setField(this, 7, value);\n};\n\n\nproto.wireless_android_play_playlog.JsClientInfo.prototype.clearBuildLabel \x3d function() {\n  jspb.Message.setField(this, 7, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.JsClientInfo.prototype.hasBuildLabel \x3d function() {\n  return jspb.Message.getField(this, 7) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.JsClientInfo}\n */\nproto.wireless_android_play_playlog.JsClientInfo.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.JsClientInfo, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.BirdsongClientInfo \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.BirdsongClientInfo, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.BirdsongClientInfo.displayName \x3d \x27proto.wireless_android_play_playlog.BirdsongClientInfo\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.BirdsongClientInfo.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.BirdsongClientInfo.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.BirdsongClientInfo} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.BirdsongClientInfo.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    clientType: jspb.Message.getField(msg, 1),\n    buildLabel: jspb.Message.getField(msg, 2),\n    birdsongBuildLabel: jspb.Message.getField(msg, 3)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.BirdsongClientInfo}\n */\nproto.wireless_android_play_playlog.BirdsongClientInfo.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.BirdsongClientInfo;\n  return proto.wireless_android_play_playlog.BirdsongClientInfo.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.BirdsongClientInfo} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.BirdsongClientInfo}\n */\nproto.wireless_android_play_playlog.BirdsongClientInfo.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.BirdsongClientInfo.ClientType} */ (reader.readEnum());\n      msg.setClientType(value);\n      break;\n    case 2:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setBuildLabel(value);\n      break;\n    case 3:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setBirdsongBuildLabel(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.BirdsongClientInfo.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.BirdsongClientInfo.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.BirdsongClientInfo} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.BirdsongClientInfo.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {!proto.wireless_android_play_playlog.BirdsongClientInfo.ClientType} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.wireless_android_play_playlog.BirdsongClientInfo.ClientType \x3d {\n  CLIENT_UNKNOWN: 0,\n  CHIRP: 1,\n  WAYMO: 2,\n  GV_ANDROID: 3,\n  GV_IOS: 4\n};\n\n/**\n * optional ClientType client_type \x3d 1;\n * @return {!proto.wireless_android_play_playlog.BirdsongClientInfo.ClientType}\n */\nproto.wireless_android_play_playlog.BirdsongClientInfo.prototype.getClientType \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.BirdsongClientInfo.ClientType} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.BirdsongClientInfo.ClientType|undefined} value */\nproto.wireless_android_play_playlog.BirdsongClientInfo.prototype.setClientType \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.BirdsongClientInfo.prototype.clearClientType \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.BirdsongClientInfo.prototype.hasClientType \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional string build_label \x3d 2;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.BirdsongClientInfo.prototype.getBuildLabel \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.BirdsongClientInfo.prototype.setBuildLabel \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.BirdsongClientInfo.prototype.clearBuildLabel \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.BirdsongClientInfo.prototype.hasBuildLabel \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional string birdsong_build_label \x3d 3;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.BirdsongClientInfo.prototype.getBirdsongBuildLabel \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.BirdsongClientInfo.prototype.setBirdsongBuildLabel \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.BirdsongClientInfo.prototype.clearBirdsongBuildLabel \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.BirdsongClientInfo.prototype.hasBirdsongBuildLabel \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.BirdsongClientInfo}\n */\nproto.wireless_android_play_playlog.BirdsongClientInfo.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.BirdsongClientInfo, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.YetiClientInfo \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.YetiClientInfo, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.YetiClientInfo.displayName \x3d \x27proto.wireless_android_play_playlog.YetiClientInfo\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.YetiClientInfo.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.YetiClientInfo} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.YetiClientInfo.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    buildLabel: jspb.Message.getField(msg, 1),\n    deploymentType: jspb.Message.getField(msg, 2),\n    environment: jspb.Message.getField(msg, 3),\n    location: jspb.Message.getField(msg, 4),\n    machine: jspb.Message.getField(msg, 5),\n    gameletId: jspb.Message.getField(msg, 6),\n    machineShape: jspb.Message.getField(msg, 7)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.YetiClientInfo}\n */\nproto.wireless_android_play_playlog.YetiClientInfo.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.YetiClientInfo;\n  return proto.wireless_android_play_playlog.YetiClientInfo.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.YetiClientInfo} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.YetiClientInfo}\n */\nproto.wireless_android_play_playlog.YetiClientInfo.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setBuildLabel(value);\n      break;\n    case 2:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setDeploymentType(value);\n      break;\n    case 3:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setEnvironment(value);\n      break;\n    case 4:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setLocation(value);\n      break;\n    case 5:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setMachine(value);\n      break;\n    case 6:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setGameletId(value);\n      break;\n    case 7:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setMachineShape(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.YetiClientInfo.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.YetiClientInfo} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.YetiClientInfo.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 5));\n  if (f !\x3d null) {\n    writer.writeString(\n      5,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 6));\n  if (f !\x3d null) {\n    writer.writeString(\n      6,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 7));\n  if (f !\x3d null) {\n    writer.writeString(\n      7,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string build_label \x3d 1;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.getBuildLabel \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.setBuildLabel \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.clearBuildLabel \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.hasBuildLabel \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional string deployment_type \x3d 2;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.getDeploymentType \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.setDeploymentType \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.clearDeploymentType \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.hasDeploymentType \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional string environment \x3d 3;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.getEnvironment \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.setEnvironment \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.clearEnvironment \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.hasEnvironment \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional string location \x3d 4;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.getLocation \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.setLocation \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.clearLocation \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.hasLocation \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional string machine \x3d 5;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.getMachine \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 5));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.setMachine \x3d function(value) {\n  jspb.Message.setField(this, 5, value);\n};\n\n\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.clearMachine \x3d function() {\n  jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.hasMachine \x3d function() {\n  return jspb.Message.getField(this, 5) !\x3d null;\n};\n\n\n/**\n * optional string gamelet_id \x3d 6;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.getGameletId \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 6));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.setGameletId \x3d function(value) {\n  jspb.Message.setField(this, 6, value);\n};\n\n\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.clearGameletId \x3d function() {\n  jspb.Message.setField(this, 6, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.hasGameletId \x3d function() {\n  return jspb.Message.getField(this, 6) !\x3d null;\n};\n\n\n/**\n * optional string machine_shape \x3d 7;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.getMachineShape \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 7));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.setMachineShape \x3d function(value) {\n  jspb.Message.setField(this, 7, value);\n};\n\n\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.clearMachineShape \x3d function() {\n  jspb.Message.setField(this, 7, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.YetiClientInfo.prototype.hasMachineShape \x3d function() {\n  return jspb.Message.getField(this, 7) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.YetiClientInfo}\n */\nproto.wireless_android_play_playlog.YetiClientInfo.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.YetiClientInfo, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.GoogleHomeClientInfo \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.GoogleHomeClientInfo, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.GoogleHomeClientInfo.displayName \x3d \x27proto.wireless_android_play_playlog.GoogleHomeClientInfo\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.GoogleHomeClientInfo.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.GoogleHomeClientInfo.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.GoogleHomeClientInfo} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.GoogleHomeClientInfo.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    deviceModel: jspb.Message.getField(msg, 1),\n    appVersion: jspb.Message.getField(msg, 2)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.GoogleHomeClientInfo}\n */\nproto.wireless_android_play_playlog.GoogleHomeClientInfo.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.GoogleHomeClientInfo;\n  return proto.wireless_android_play_playlog.GoogleHomeClientInfo.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.GoogleHomeClientInfo} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.GoogleHomeClientInfo}\n */\nproto.wireless_android_play_playlog.GoogleHomeClientInfo.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setDeviceModel(value);\n      break;\n    case 2:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setAppVersion(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.GoogleHomeClientInfo.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.GoogleHomeClientInfo.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.GoogleHomeClientInfo} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.GoogleHomeClientInfo.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string device_model \x3d 1;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.GoogleHomeClientInfo.prototype.getDeviceModel \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.GoogleHomeClientInfo.prototype.setDeviceModel \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.GoogleHomeClientInfo.prototype.clearDeviceModel \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.GoogleHomeClientInfo.prototype.hasDeviceModel \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional string app_version \x3d 2;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.GoogleHomeClientInfo.prototype.getAppVersion \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.GoogleHomeClientInfo.prototype.setAppVersion \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.GoogleHomeClientInfo.prototype.clearAppVersion \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.GoogleHomeClientInfo.prototype.hasAppVersion \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.GoogleHomeClientInfo}\n */\nproto.wireless_android_play_playlog.GoogleHomeClientInfo.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.GoogleHomeClientInfo, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.ClientInfo \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.ClientInfo, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.ClientInfo.displayName \x3d \x27proto.wireless_android_play_playlog.ClientInfo\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.ClientInfo.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.ClientInfo} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.ClientInfo.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    clientType: jspb.Message.getField(msg, 1),\n    remoteHost: jspb.Message.getField(msg, 6),\n    remoteHost6: jspb.Message.getField(msg, 7),\n    androidClientInfo: (f \x3d msg.getAndroidClientInfo()) \x26\x26 proto.wireless_android_play_playlog.AndroidClientInfo.toObject(includeInstance, f),\n    desktopClientInfo: (f \x3d msg.getDesktopClientInfo()) \x26\x26 proto.wireless_android_play_playlog.DesktopClientInfo.toObject(includeInstance, f),\n    iosClientInfo: (f \x3d msg.getIosClientInfo()) \x26\x26 proto.wireless_android_play_playlog.IosClientInfo.toObject(includeInstance, f),\n    playCeClientInfo: (f \x3d msg.getPlayCeClientInfo()) \x26\x26 proto.wireless_android_play_playlog.PlayCeClientInfo.toObject(includeInstance, f),\n    vrClientInfo: (f \x3d msg.getVrClientInfo()) \x26\x26 proto.wireless_android_play_playlog.VrClientInfo.toObject(includeInstance, f),\n    pancettaClientInfo: (f \x3d msg.getPancettaClientInfo()) \x26\x26 proto.wireless_android_play_playlog.PancettaClientInfo.toObject(includeInstance, f),\n    macClientInfo: (f \x3d msg.getMacClientInfo()) \x26\x26 proto.wireless_android_play_playlog.MacClientInfo.toObject(includeInstance, f),\n    yetiClientInfo: (f \x3d msg.getYetiClientInfo()) \x26\x26 proto.wireless_android_play_playlog.YetiClientInfo.toObject(includeInstance, f),\n    googleHomeClientInfo: (f \x3d msg.getGoogleHomeClientInfo()) \x26\x26 proto.wireless_android_play_playlog.GoogleHomeClientInfo.toObject(includeInstance, f),\n    browserInfo: (f \x3d msg.getBrowserInfo()) \x26\x26 proto.wireless_android_play_playlog.BrowserInfo.toObject(includeInstance, f),\n    jsClientInfo: (f \x3d msg.getJsClientInfo()) \x26\x26 proto.wireless_android_play_playlog.JsClientInfo.toObject(includeInstance, f),\n    birdsongClientInfo: (f \x3d msg.getBirdsongClientInfo()) \x26\x26 proto.wireless_android_play_playlog.BirdsongClientInfo.toObject(includeInstance, f),\n    heterodyneConfigVersion: jspb.Message.getField(msg, 12)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.ClientInfo}\n */\nproto.wireless_android_play_playlog.ClientInfo.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.ClientInfo;\n  return proto.wireless_android_play_playlog.ClientInfo.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.ClientInfo} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.ClientInfo}\n */\nproto.wireless_android_play_playlog.ClientInfo.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.ClientInfo.ClientType} */ (reader.readEnum());\n      msg.setClientType(value);\n      break;\n    case 6:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setRemoteHost(value);\n      break;\n    case 7:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setRemoteHost6(value);\n      break;\n    case 2:\n      var value \x3d new proto.wireless_android_play_playlog.AndroidClientInfo;\n      reader.readMessage(value,proto.wireless_android_play_playlog.AndroidClientInfo.deserializeBinaryFromReader);\n      msg.setAndroidClientInfo(value);\n      break;\n    case 3:\n      var value \x3d new proto.wireless_android_play_playlog.DesktopClientInfo;\n      reader.readMessage(value,proto.wireless_android_play_playlog.DesktopClientInfo.deserializeBinaryFromReader);\n      msg.setDesktopClientInfo(value);\n      break;\n    case 4:\n      var value \x3d new proto.wireless_android_play_playlog.IosClientInfo;\n      reader.readMessage(value,proto.wireless_android_play_playlog.IosClientInfo.deserializeBinaryFromReader);\n      msg.setIosClientInfo(value);\n      break;\n    case 5:\n      var value \x3d new proto.wireless_android_play_playlog.PlayCeClientInfo;\n      reader.readMessage(value,proto.wireless_android_play_playlog.PlayCeClientInfo.deserializeBinaryFromReader);\n      msg.setPlayCeClientInfo(value);\n      break;\n    case 8:\n      var value \x3d new proto.wireless_android_play_playlog.VrClientInfo;\n      reader.readMessage(value,proto.wireless_android_play_playlog.VrClientInfo.deserializeBinaryFromReader);\n      msg.setVrClientInfo(value);\n      break;\n    case 10:\n      var value \x3d new proto.wireless_android_play_playlog.PancettaClientInfo;\n      reader.readMessage(value,proto.wireless_android_play_playlog.PancettaClientInfo.deserializeBinaryFromReader);\n      msg.setPancettaClientInfo(value);\n      break;\n    case 13:\n      var value \x3d new proto.wireless_android_play_playlog.MacClientInfo;\n      reader.readMessage(value,proto.wireless_android_play_playlog.MacClientInfo.deserializeBinaryFromReader);\n      msg.setMacClientInfo(value);\n      break;\n    case 15:\n      var value \x3d new proto.wireless_android_play_playlog.YetiClientInfo;\n      reader.readMessage(value,proto.wireless_android_play_playlog.YetiClientInfo.deserializeBinaryFromReader);\n      msg.setYetiClientInfo(value);\n      break;\n    case 16:\n      var value \x3d new proto.wireless_android_play_playlog.GoogleHomeClientInfo;\n      reader.readMessage(value,proto.wireless_android_play_playlog.GoogleHomeClientInfo.deserializeBinaryFromReader);\n      msg.setGoogleHomeClientInfo(value);\n      break;\n    case 9:\n      var value \x3d new proto.wireless_android_play_playlog.BrowserInfo;\n      reader.readMessage(value,proto.wireless_android_play_playlog.BrowserInfo.deserializeBinaryFromReader);\n      msg.setBrowserInfo(value);\n      break;\n    case 11:\n      var value \x3d new proto.wireless_android_play_playlog.JsClientInfo;\n      reader.readMessage(value,proto.wireless_android_play_playlog.JsClientInfo.deserializeBinaryFromReader);\n      msg.setJsClientInfo(value);\n      break;\n    case 14:\n      var value \x3d new proto.wireless_android_play_playlog.BirdsongClientInfo;\n      reader.readMessage(value,proto.wireless_android_play_playlog.BirdsongClientInfo.deserializeBinaryFromReader);\n      msg.setBirdsongClientInfo(value);\n      break;\n    case 12:\n      var value \x3d /** @type {number} */ (reader.readInt64());\n      msg.setHeterodyneConfigVersion(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.ClientInfo.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.ClientInfo} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.ClientInfo.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {!proto.wireless_android_play_playlog.ClientInfo.ClientType} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 6));\n  if (f !\x3d null) {\n    writer.writeString(\n      6,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 7));\n  if (f !\x3d null) {\n    writer.writeString(\n      7,\n      f\n    );\n  }\n  f \x3d message.getAndroidClientInfo();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.wireless_android_play_playlog.AndroidClientInfo.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getDesktopClientInfo();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.wireless_android_play_playlog.DesktopClientInfo.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getIosClientInfo();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      4,\n      f,\n      proto.wireless_android_play_playlog.IosClientInfo.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getPlayCeClientInfo();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      5,\n      f,\n      proto.wireless_android_play_playlog.PlayCeClientInfo.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getVrClientInfo();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      8,\n      f,\n      proto.wireless_android_play_playlog.VrClientInfo.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getPancettaClientInfo();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      10,\n      f,\n      proto.wireless_android_play_playlog.PancettaClientInfo.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getMacClientInfo();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      13,\n      f,\n      proto.wireless_android_play_playlog.MacClientInfo.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getYetiClientInfo();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      15,\n      f,\n      proto.wireless_android_play_playlog.YetiClientInfo.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getGoogleHomeClientInfo();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      16,\n      f,\n      proto.wireless_android_play_playlog.GoogleHomeClientInfo.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getBrowserInfo();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      9,\n      f,\n      proto.wireless_android_play_playlog.BrowserInfo.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getJsClientInfo();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      11,\n      f,\n      proto.wireless_android_play_playlog.JsClientInfo.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getBirdsongClientInfo();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      14,\n      f,\n      proto.wireless_android_play_playlog.BirdsongClientInfo.serializeBinaryToWriter\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 12));\n  if (f !\x3d null) {\n    writer.writeInt64(\n      12,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.wireless_android_play_playlog.ClientInfo.ClientType \x3d {\n  UNKNOWN: 0,\n  JS: 1,\n  DESKTOP: 2,\n  IOS: 3,\n  IOS_V2: 10,\n  ANDROID: 4,\n  PLAY_CE: 5,\n  PYTHON: 6,\n  VR: 7,\n  PANCETTA: 8,\n  DRIVE_FS: 9,\n  YETI: 11,\n  MAC: 12,\n  GOOGLE_HOME: 13,\n  BIRDSONG: 14,\n  IOS_FIREBASE: 15,\n  GO: 16,\n  FUCHSIA: 17\n};\n\n\n/**\n * A tuple of {field number, class constructor} for the extension\n * field named `messageSetExtension`.\n * @type {!jspb.ExtensionFieldInfo\x3c!proto.wireless_android_play_playlog.ClientInfo\x3e}\n */\nproto.wireless_android_play_playlog.ClientInfo.messageSetExtension \x3d new jspb.ExtensionFieldInfo(\n    66321687,\n    {messageSetExtension: 0},\n    proto.wireless_android_play_playlog.ClientInfo,\n     /** @type {?function((boolean|undefined),!jspb.Message\x3d): !Object} */ (\n         proto.wireless_android_play_playlog.ClientInfo.toObject),\n    0);\n\njspb.Message.messageSetExtensionsBinary[66321687] \x3d new jspb.ExtensionFieldBinaryInfo(\n    proto.wireless_android_play_playlog.ClientInfo.messageSetExtension,\n    jspb.BinaryReader.prototype.readMessage,\n    jspb.BinaryWriter.prototype.writeMessage,\n    proto.wireless_android_play_playlog.ClientInfo.serializeBinaryToWriter,\n    proto.wireless_android_play_playlog.ClientInfo.deserializeBinaryFromReader,\n    false);\n// This registers the extension field with the extended class, so that\n// toObject() will function correctly.\njspb.Message.messageSetExtensions[66321687] \x3d proto.wireless_android_play_playlog.ClientInfo.messageSetExtension;\n\n/**\n * optional ClientType client_type \x3d 1;\n * @return {!proto.wireless_android_play_playlog.ClientInfo.ClientType}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.getClientType \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.ClientInfo.ClientType} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.ClientInfo.ClientType|undefined} value */\nproto.wireless_android_play_playlog.ClientInfo.prototype.setClientType \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.ClientInfo.prototype.clearClientType \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.hasClientType \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional string remote_host \x3d 6;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.getRemoteHost \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 6));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.ClientInfo.prototype.setRemoteHost \x3d function(value) {\n  jspb.Message.setField(this, 6, value);\n};\n\n\nproto.wireless_android_play_playlog.ClientInfo.prototype.clearRemoteHost \x3d function() {\n  jspb.Message.setField(this, 6, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.hasRemoteHost \x3d function() {\n  return jspb.Message.getField(this, 6) !\x3d null;\n};\n\n\n/**\n * optional string remote_host6 \x3d 7;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.getRemoteHost6 \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 7));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.ClientInfo.prototype.setRemoteHost6 \x3d function(value) {\n  jspb.Message.setField(this, 7, value);\n};\n\n\nproto.wireless_android_play_playlog.ClientInfo.prototype.clearRemoteHost6 \x3d function() {\n  jspb.Message.setField(this, 7, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.hasRemoteHost6 \x3d function() {\n  return jspb.Message.getField(this, 7) !\x3d null;\n};\n\n\n/**\n * optional AndroidClientInfo android_client_info \x3d 2;\n * @return {?proto.wireless_android_play_playlog.AndroidClientInfo}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.getAndroidClientInfo \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.AndroidClientInfo} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.AndroidClientInfo, 2));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.AndroidClientInfo|undefined} value */\nproto.wireless_android_play_playlog.ClientInfo.prototype.setAndroidClientInfo \x3d function(value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.ClientInfo.prototype.clearAndroidClientInfo \x3d function() {\n  this.setAndroidClientInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.hasAndroidClientInfo \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional DesktopClientInfo desktop_client_info \x3d 3;\n * @return {?proto.wireless_android_play_playlog.DesktopClientInfo}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.getDesktopClientInfo \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.DesktopClientInfo} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.DesktopClientInfo, 3));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.DesktopClientInfo|undefined} value */\nproto.wireless_android_play_playlog.ClientInfo.prototype.setDesktopClientInfo \x3d function(value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.ClientInfo.prototype.clearDesktopClientInfo \x3d function() {\n  this.setDesktopClientInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.hasDesktopClientInfo \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional IosClientInfo ios_client_info \x3d 4;\n * @return {?proto.wireless_android_play_playlog.IosClientInfo}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.getIosClientInfo \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.IosClientInfo} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.IosClientInfo, 4));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.IosClientInfo|undefined} value */\nproto.wireless_android_play_playlog.ClientInfo.prototype.setIosClientInfo \x3d function(value) {\n  jspb.Message.setWrapperField(this, 4, value);\n};\n\n\nproto.wireless_android_play_playlog.ClientInfo.prototype.clearIosClientInfo \x3d function() {\n  this.setIosClientInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.hasIosClientInfo \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional PlayCeClientInfo play_ce_client_info \x3d 5;\n * @return {?proto.wireless_android_play_playlog.PlayCeClientInfo}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.getPlayCeClientInfo \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.PlayCeClientInfo} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.PlayCeClientInfo, 5));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.PlayCeClientInfo|undefined} value */\nproto.wireless_android_play_playlog.ClientInfo.prototype.setPlayCeClientInfo \x3d function(value) {\n  jspb.Message.setWrapperField(this, 5, value);\n};\n\n\nproto.wireless_android_play_playlog.ClientInfo.prototype.clearPlayCeClientInfo \x3d function() {\n  this.setPlayCeClientInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.hasPlayCeClientInfo \x3d function() {\n  return jspb.Message.getField(this, 5) !\x3d null;\n};\n\n\n/**\n * optional VrClientInfo vr_client_info \x3d 8;\n * @return {?proto.wireless_android_play_playlog.VrClientInfo}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.getVrClientInfo \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.VrClientInfo} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.VrClientInfo, 8));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.VrClientInfo|undefined} value */\nproto.wireless_android_play_playlog.ClientInfo.prototype.setVrClientInfo \x3d function(value) {\n  jspb.Message.setWrapperField(this, 8, value);\n};\n\n\nproto.wireless_android_play_playlog.ClientInfo.prototype.clearVrClientInfo \x3d function() {\n  this.setVrClientInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.hasVrClientInfo \x3d function() {\n  return jspb.Message.getField(this, 8) !\x3d null;\n};\n\n\n/**\n * optional PancettaClientInfo pancetta_client_info \x3d 10;\n * @return {?proto.wireless_android_play_playlog.PancettaClientInfo}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.getPancettaClientInfo \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.PancettaClientInfo} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.PancettaClientInfo, 10));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.PancettaClientInfo|undefined} value */\nproto.wireless_android_play_playlog.ClientInfo.prototype.setPancettaClientInfo \x3d function(value) {\n  jspb.Message.setWrapperField(this, 10, value);\n};\n\n\nproto.wireless_android_play_playlog.ClientInfo.prototype.clearPancettaClientInfo \x3d function() {\n  this.setPancettaClientInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.hasPancettaClientInfo \x3d function() {\n  return jspb.Message.getField(this, 10) !\x3d null;\n};\n\n\n/**\n * optional MacClientInfo mac_client_info \x3d 13;\n * @return {?proto.wireless_android_play_playlog.MacClientInfo}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.getMacClientInfo \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.MacClientInfo} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.MacClientInfo, 13));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.MacClientInfo|undefined} value */\nproto.wireless_android_play_playlog.ClientInfo.prototype.setMacClientInfo \x3d function(value) {\n  jspb.Message.setWrapperField(this, 13, value);\n};\n\n\nproto.wireless_android_play_playlog.ClientInfo.prototype.clearMacClientInfo \x3d function() {\n  this.setMacClientInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.hasMacClientInfo \x3d function() {\n  return jspb.Message.getField(this, 13) !\x3d null;\n};\n\n\n/**\n * optional YetiClientInfo yeti_client_info \x3d 15;\n * @return {?proto.wireless_android_play_playlog.YetiClientInfo}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.getYetiClientInfo \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.YetiClientInfo} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.YetiClientInfo, 15));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.YetiClientInfo|undefined} value */\nproto.wireless_android_play_playlog.ClientInfo.prototype.setYetiClientInfo \x3d function(value) {\n  jspb.Message.setWrapperField(this, 15, value);\n};\n\n\nproto.wireless_android_play_playlog.ClientInfo.prototype.clearYetiClientInfo \x3d function() {\n  this.setYetiClientInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.hasYetiClientInfo \x3d function() {\n  return jspb.Message.getField(this, 15) !\x3d null;\n};\n\n\n/**\n * optional GoogleHomeClientInfo google_home_client_info \x3d 16;\n * @return {?proto.wireless_android_play_playlog.GoogleHomeClientInfo}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.getGoogleHomeClientInfo \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.GoogleHomeClientInfo} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.GoogleHomeClientInfo, 16));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.GoogleHomeClientInfo|undefined} value */\nproto.wireless_android_play_playlog.ClientInfo.prototype.setGoogleHomeClientInfo \x3d function(value) {\n  jspb.Message.setWrapperField(this, 16, value);\n};\n\n\nproto.wireless_android_play_playlog.ClientInfo.prototype.clearGoogleHomeClientInfo \x3d function() {\n  this.setGoogleHomeClientInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.hasGoogleHomeClientInfo \x3d function() {\n  return jspb.Message.getField(this, 16) !\x3d null;\n};\n\n\n/**\n * optional BrowserInfo browser_info \x3d 9;\n * @return {?proto.wireless_android_play_playlog.BrowserInfo}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.getBrowserInfo \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.BrowserInfo} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.BrowserInfo, 9));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.BrowserInfo|undefined} value */\nproto.wireless_android_play_playlog.ClientInfo.prototype.setBrowserInfo \x3d function(value) {\n  jspb.Message.setWrapperField(this, 9, value);\n};\n\n\nproto.wireless_android_play_playlog.ClientInfo.prototype.clearBrowserInfo \x3d function() {\n  this.setBrowserInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.hasBrowserInfo \x3d function() {\n  return jspb.Message.getField(this, 9) !\x3d null;\n};\n\n\n/**\n * optional JsClientInfo js_client_info \x3d 11;\n * @return {?proto.wireless_android_play_playlog.JsClientInfo}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.getJsClientInfo \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.JsClientInfo} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.JsClientInfo, 11));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.JsClientInfo|undefined} value */\nproto.wireless_android_play_playlog.ClientInfo.prototype.setJsClientInfo \x3d function(value) {\n  jspb.Message.setWrapperField(this, 11, value);\n};\n\n\nproto.wireless_android_play_playlog.ClientInfo.prototype.clearJsClientInfo \x3d function() {\n  this.setJsClientInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.hasJsClientInfo \x3d function() {\n  return jspb.Message.getField(this, 11) !\x3d null;\n};\n\n\n/**\n * optional BirdsongClientInfo birdsong_client_info \x3d 14;\n * @return {?proto.wireless_android_play_playlog.BirdsongClientInfo}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.getBirdsongClientInfo \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.BirdsongClientInfo} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.BirdsongClientInfo, 14));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.BirdsongClientInfo|undefined} value */\nproto.wireless_android_play_playlog.ClientInfo.prototype.setBirdsongClientInfo \x3d function(value) {\n  jspb.Message.setWrapperField(this, 14, value);\n};\n\n\nproto.wireless_android_play_playlog.ClientInfo.prototype.clearBirdsongClientInfo \x3d function() {\n  this.setBirdsongClientInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.hasBirdsongClientInfo \x3d function() {\n  return jspb.Message.getField(this, 14) !\x3d null;\n};\n\n\n/**\n * optional int64 heterodyne_config_version \x3d 12;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.getHeterodyneConfigVersion \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 12));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.ClientInfo.prototype.setHeterodyneConfigVersion \x3d function(value) {\n  jspb.Message.setField(this, 12, value);\n};\n\n\nproto.wireless_android_play_playlog.ClientInfo.prototype.clearHeterodyneConfigVersion \x3d function() {\n  jspb.Message.setField(this, 12, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ClientInfo.prototype.hasHeterodyneConfigVersion \x3d function() {\n  return jspb.Message.getField(this, 12) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.ClientInfo}\n */\nproto.wireless_android_play_playlog.ClientInfo.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.ClientInfo, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.ExperimentIdList \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.wireless_android_play_playlog.ExperimentIdList.repeatedFields_, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.ExperimentIdList, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.ExperimentIdList.displayName \x3d \x27proto.wireless_android_play_playlog.ExperimentIdList\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nproto.wireless_android_play_playlog.ExperimentIdList.repeatedFields_ \x3d [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.ExperimentIdList.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.ExperimentIdList.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.ExperimentIdList} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.ExperimentIdList.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    idList: jspb.Message.getRepeatedField(msg, 1)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.ExperimentIdList}\n */\nproto.wireless_android_play_playlog.ExperimentIdList.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.ExperimentIdList;\n  return proto.wireless_android_play_playlog.ExperimentIdList.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.ExperimentIdList} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.ExperimentIdList}\n */\nproto.wireless_android_play_playlog.ExperimentIdList.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.addId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.ExperimentIdList.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.ExperimentIdList.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.ExperimentIdList} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.ExperimentIdList.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d message.getIdList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated string id \x3d 1;\n * @return {!Array\x3cstring\x3e}\n */\nproto.wireless_android_play_playlog.ExperimentIdList.prototype.getIdList \x3d function() {\n  return /** @type {!Array\x3cstring\x3e} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/** @param {Array\x3cstring\x3e|undefined} value */\nproto.wireless_android_play_playlog.ExperimentIdList.prototype.setIdList \x3d function(value) {\n  jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {string} value\n * @param {number\x3d} opt_index\n */\nproto.wireless_android_play_playlog.ExperimentIdList.prototype.addId \x3d function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\nproto.wireless_android_play_playlog.ExperimentIdList.prototype.clearIdList \x3d function() {\n  this.setIdList([]);\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.ExperimentIdList}\n */\nproto.wireless_android_play_playlog.ExperimentIdList.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.ExperimentIdList, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.AppUsage1pLogEvent \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.AppUsage1pLogEvent, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.AppUsage1pLogEvent.displayName \x3d \x27proto.wireless_android_play_playlog.AppUsage1pLogEvent\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.AppUsage1pLogEvent.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.AppUsage1pLogEvent.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.AppUsage1pLogEvent} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.AppUsage1pLogEvent.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    appType: jspb.Message.getField(msg, 1),\n    androidPackageName: jspb.Message.getField(msg, 2),\n    version: jspb.Message.getField(msg, 3)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.AppUsage1pLogEvent}\n */\nproto.wireless_android_play_playlog.AppUsage1pLogEvent.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.AppUsage1pLogEvent;\n  return proto.wireless_android_play_playlog.AppUsage1pLogEvent.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.AppUsage1pLogEvent} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.AppUsage1pLogEvent}\n */\nproto.wireless_android_play_playlog.AppUsage1pLogEvent.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setAppType(value);\n      break;\n    case 2:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setAndroidPackageName(value);\n      break;\n    case 3:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setVersion(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.AppUsage1pLogEvent.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.AppUsage1pLogEvent.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.AppUsage1pLogEvent} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.AppUsage1pLogEvent.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional int32 app_type \x3d 1;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.AppUsage1pLogEvent.prototype.getAppType \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.AppUsage1pLogEvent.prototype.setAppType \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.AppUsage1pLogEvent.prototype.clearAppType \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AppUsage1pLogEvent.prototype.hasAppType \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional string android_package_name \x3d 2;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.AppUsage1pLogEvent.prototype.getAndroidPackageName \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.AppUsage1pLogEvent.prototype.setAndroidPackageName \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.AppUsage1pLogEvent.prototype.clearAndroidPackageName \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AppUsage1pLogEvent.prototype.hasAndroidPackageName \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional string version \x3d 3;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.AppUsage1pLogEvent.prototype.getVersion \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.AppUsage1pLogEvent.prototype.setVersion \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.AppUsage1pLogEvent.prototype.clearVersion \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.AppUsage1pLogEvent.prototype.hasVersion \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.AppUsage1pLogEvent}\n */\nproto.wireless_android_play_playlog.AppUsage1pLogEvent.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.AppUsage1pLogEvent, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.BatchedLogRequest \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.wireless_android_play_playlog.BatchedLogRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.BatchedLogRequest, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.BatchedLogRequest.displayName \x3d \x27proto.wireless_android_play_playlog.BatchedLogRequest\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nproto.wireless_android_play_playlog.BatchedLogRequest.repeatedFields_ \x3d [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.BatchedLogRequest.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.BatchedLogRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.BatchedLogRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.BatchedLogRequest.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    logRequestList: jspb.Message.toObjectList(msg.getLogRequestList(),\n    proto.wireless_android_play_playlog.LogRequest.toObject, includeInstance),\n    enablePerRequestStatus: jspb.Message.getField(msg, 3),\n    inDirectBootMode: jspb.Message.getField(msg, 4),\n    lastZwiebackResetWallTimeMs: jspb.Message.getField(msg, 5)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.BatchedLogRequest}\n */\nproto.wireless_android_play_playlog.BatchedLogRequest.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.BatchedLogRequest;\n  return proto.wireless_android_play_playlog.BatchedLogRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.BatchedLogRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.BatchedLogRequest}\n */\nproto.wireless_android_play_playlog.BatchedLogRequest.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d new proto.wireless_android_play_playlog.LogRequest;\n      reader.readMessage(value,proto.wireless_android_play_playlog.LogRequest.deserializeBinaryFromReader);\n      msg.addLogRequest(value);\n      break;\n    case 3:\n      var value \x3d /** @type {boolean} */ (reader.readBool());\n      msg.setEnablePerRequestStatus(value);\n      break;\n    case 4:\n      var value \x3d /** @type {boolean} */ (reader.readBool());\n      msg.setInDirectBootMode(value);\n      break;\n    case 5:\n      var value \x3d /** @type {number} */ (reader.readInt64());\n      msg.setLastZwiebackResetWallTimeMs(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.BatchedLogRequest.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.BatchedLogRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.BatchedLogRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.BatchedLogRequest.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d message.getLogRequestList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      proto.wireless_android_play_playlog.LogRequest.serializeBinaryToWriter\n    );\n  }\n  f \x3d /** @type {?boolean} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeBool(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?boolean} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeBool(\n      4,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 5));\n  if (f !\x3d null) {\n    writer.writeInt64(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated LogRequest log_request \x3d 1;\n * @return {!Array\x3c!proto.wireless_android_play_playlog.LogRequest\x3e}\n */\nproto.wireless_android_play_playlog.BatchedLogRequest.prototype.getLogRequestList \x3d function() {\n  return /** @type{!Array\x3c!proto.wireless_android_play_playlog.LogRequest\x3e} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.wireless_android_play_playlog.LogRequest, 1));\n};\n\n\n/** @param {Array\x3c!proto.wireless_android_play_playlog.LogRequest\x3e|undefined} value */\nproto.wireless_android_play_playlog.BatchedLogRequest.prototype.setLogRequestList \x3d function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.wireless_android_play_playlog.LogRequest\x3d} opt_value\n * @param {number\x3d} opt_index\n * @return {!proto.wireless_android_play_playlog.LogRequest}\n */\nproto.wireless_android_play_playlog.BatchedLogRequest.prototype.addLogRequest \x3d function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.wireless_android_play_playlog.LogRequest, opt_index);\n};\n\n\nproto.wireless_android_play_playlog.BatchedLogRequest.prototype.clearLogRequestList \x3d function() {\n  this.setLogRequestList([]);\n};\n\n\n/**\n * optional bool enable_per_request_status \x3d 3;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val \x3d\x3d\x3d true/false} in those cases.\n * @return {?boolean}\n */\nproto.wireless_android_play_playlog.BatchedLogRequest.prototype.getEnablePerRequestStatus \x3d function() {\n  return /** @type {?boolean} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?boolean|undefined} value */\nproto.wireless_android_play_playlog.BatchedLogRequest.prototype.setEnablePerRequestStatus \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.BatchedLogRequest.prototype.clearEnablePerRequestStatus \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.BatchedLogRequest.prototype.hasEnablePerRequestStatus \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional bool in_direct_boot_mode \x3d 4;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val \x3d\x3d\x3d true/false} in those cases.\n * @return {?boolean}\n */\nproto.wireless_android_play_playlog.BatchedLogRequest.prototype.getInDirectBootMode \x3d function() {\n  return /** @type {?boolean} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?boolean|undefined} value */\nproto.wireless_android_play_playlog.BatchedLogRequest.prototype.setInDirectBootMode \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.wireless_android_play_playlog.BatchedLogRequest.prototype.clearInDirectBootMode \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.BatchedLogRequest.prototype.hasInDirectBootMode \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional int64 last_zwieback_reset_wall_time_ms \x3d 5;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.BatchedLogRequest.prototype.getLastZwiebackResetWallTimeMs \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 5));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.BatchedLogRequest.prototype.setLastZwiebackResetWallTimeMs \x3d function(value) {\n  jspb.Message.setField(this, 5, value);\n};\n\n\nproto.wireless_android_play_playlog.BatchedLogRequest.prototype.clearLastZwiebackResetWallTimeMs \x3d function() {\n  jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.BatchedLogRequest.prototype.hasLastZwiebackResetWallTimeMs \x3d function() {\n  return jspb.Message.getField(this, 5) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.BatchedLogRequest}\n */\nproto.wireless_android_play_playlog.BatchedLogRequest.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.BatchedLogRequest, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.LogRequest \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, 15, proto.wireless_android_play_playlog.LogRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.LogRequest, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.LogRequest.displayName \x3d \x27proto.wireless_android_play_playlog.LogRequest\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nproto.wireless_android_play_playlog.LogRequest.repeatedFields_ \x3d [3,5];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.LogRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.LogRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.LogRequest.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    requestTimeMs: jspb.Message.getField(msg, 4),\n    requestUptimeMs: jspb.Message.getField(msg, 8),\n    clientInfo: (f \x3d msg.getClientInfo()) \x26\x26 proto.wireless_android_play_playlog.ClientInfo.toObject(includeInstance, f),\n    logSource: jspb.Message.getFieldWithDefault(msg, 2, -1),\n    logSourceName: jspb.Message.getField(msg, 6),\n    zwiebackCookie: jspb.Message.getField(msg, 7),\n    logEventList: jspb.Message.toObjectList(msg.getLogEventList(),\n    proto.wireless_android_play_playlog.LogEvent.toObject, includeInstance),\n    serializedLogEventsList: msg.getSerializedLogEventsList_asB64(),\n    logEventDroppedCount: jspb.Message.getField(msg, 14),\n    qosTier: jspb.Message.getFieldWithDefault(msg, 9, 0),\n    scheduler: jspb.Message.getField(msg, 10),\n    deviceStatus: (f \x3d msg.getDeviceStatus()) \x26\x26 proto.wireless_android_play_playlog.DeviceStatus.toObject(includeInstance, f),\n    externalTimestamp: (f \x3d msg.getExternalTimestamp()) \x26\x26 proto.wireless_android_play_playlog.ExternalTimestamp.toObject(includeInstance, f),\n    collectForDebug: (f \x3d msg.getCollectForDebug()) \x26\x26 proto.wireless_android_play_playlog.CollectForDebug.toObject(includeInstance, f)\n  };\n\n  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,\n      proto.wireless_android_play_playlog.LogRequest.extensions, proto.wireless_android_play_playlog.LogRequest.prototype.getExtension,\n      includeInstance);\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.LogRequest}\n */\nproto.wireless_android_play_playlog.LogRequest.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.LogRequest;\n  return proto.wireless_android_play_playlog.LogRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.LogRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.LogRequest}\n */\nproto.wireless_android_play_playlog.LogRequest.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 4:\n      var value \x3d /** @type {string} */ (reader.readInt64String());\n      msg.setRequestTimeMs(value);\n      break;\n    case 8:\n      var value \x3d /** @type {string} */ (reader.readInt64String());\n      msg.setRequestUptimeMs(value);\n      break;\n    case 1:\n      var value \x3d new proto.wireless_android_play_playlog.ClientInfo;\n      reader.readMessage(value,proto.wireless_android_play_playlog.ClientInfo.deserializeBinaryFromReader);\n      msg.setClientInfo(value);\n      break;\n    case 2:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.LogRequest.LogSource} */ (reader.readEnum());\n      msg.setLogSource(value);\n      break;\n    case 6:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setLogSourceName(value);\n      break;\n    case 7:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setZwiebackCookie(value);\n      break;\n    case 3:\n      var value \x3d new proto.wireless_android_play_playlog.LogEvent;\n      reader.readMessage(value,proto.wireless_android_play_playlog.LogEvent.deserializeBinaryFromReader);\n      msg.addLogEvent(value);\n      break;\n    case 5:\n      var value \x3d /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.addSerializedLogEvents(value);\n      break;\n    case 14:\n      var value \x3d /** @type {number} */ (reader.readInt64());\n      msg.setLogEventDroppedCount(value);\n      break;\n    case 9:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.QosTierConfiguration.QosTier} */ (reader.readEnum());\n      msg.setQosTier(value);\n      break;\n    case 10:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.LogRequest.SchedulerType} */ (reader.readEnum());\n      msg.setScheduler(value);\n      break;\n    case 11:\n      var value \x3d new proto.wireless_android_play_playlog.DeviceStatus;\n      reader.readMessage(value,proto.wireless_android_play_playlog.DeviceStatus.deserializeBinaryFromReader);\n      msg.setDeviceStatus(value);\n      break;\n    case 12:\n      var value \x3d new proto.wireless_android_play_playlog.ExternalTimestamp;\n      reader.readMessage(value,proto.wireless_android_play_playlog.ExternalTimestamp.deserializeBinaryFromReader);\n      msg.setExternalTimestamp(value);\n      break;\n    case 13:\n      var value \x3d new proto.wireless_android_play_playlog.CollectForDebug;\n      reader.readMessage(value,proto.wireless_android_play_playlog.CollectForDebug.deserializeBinaryFromReader);\n      msg.setCollectForDebug(value);\n      break;\n    default:\n      jspb.Message.readBinaryExtension(msg, reader, proto.wireless_android_play_playlog.LogRequest.extensionsBinary,\n        proto.wireless_android_play_playlog.LogRequest.prototype.getExtension,\n        proto.wireless_android_play_playlog.LogRequest.prototype.setExtension);\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.LogRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.LogRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.LogRequest.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeInt64String(\n      4,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 8));\n  if (f !\x3d null) {\n    writer.writeInt64String(\n      8,\n      f\n    );\n  }\n  f \x3d message.getClientInfo();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.wireless_android_play_playlog.ClientInfo.serializeBinaryToWriter\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.LogRequest.LogSource} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 6));\n  if (f !\x3d null) {\n    writer.writeString(\n      6,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 7));\n  if (f !\x3d null) {\n    writer.writeString(\n      7,\n      f\n    );\n  }\n  f \x3d message.getLogEventList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedMessage(\n      3,\n      f,\n      proto.wireless_android_play_playlog.LogEvent.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getSerializedLogEventsList_asU8();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedBytes(\n      5,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 14));\n  if (f !\x3d null) {\n    writer.writeInt64(\n      14,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.QosTierConfiguration.QosTier} */ (jspb.Message.getField(message, 9));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      9,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.LogRequest.SchedulerType} */ (jspb.Message.getField(message, 10));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      10,\n      f\n    );\n  }\n  f \x3d message.getDeviceStatus();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      11,\n      f,\n      proto.wireless_android_play_playlog.DeviceStatus.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getExternalTimestamp();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      12,\n      f,\n      proto.wireless_android_play_playlog.ExternalTimestamp.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getCollectForDebug();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      13,\n      f,\n      proto.wireless_android_play_playlog.CollectForDebug.serializeBinaryToWriter\n    );\n  }\n  jspb.Message.serializeBinaryExtensions(message, writer,\n    proto.wireless_android_play_playlog.LogRequest.extensionsBinary, proto.wireless_android_play_playlog.LogRequest.prototype.getExtension);\n};\n\n\n/**\n * @enum {number}\n */\nproto.wireless_android_play_playlog.LogRequest.LogSource \x3d {\n  UNKNOWN: -1,\n  BATCHED_LOG_REQUEST: 357,\n  STORE: 0,\n  WEB_STORE: 65,\n  WORK_STORE: 132,\n  WORK_STORE_APP: 261,\n  EDU_STORE: 15,\n  MUSIC: 1,\n  BOOKS: 2,\n  VIDEO: 3,\n  MOVIES: 74,\n  MAGAZINES: 4,\n  GAMES: 5,\n  LB_A: 6,\n  ANDROID_IDE: 7,\n  LB_P: 8,\n  LB_S: 9,\n  GMS_CORE: 10,\n  APP_USAGE_1P: 11,\n  ICING: 12,\n  HERREVAD: 13,\n  HERREVAD_COUNTERS: 777,\n  GOOGLE_TV: 14,\n  GMS_CORE_PEOPLE: 16,\n  LE: 17,\n  GOOGLE_ANALYTICS: 18,\n  LB_D: 19,\n  ANDROID_GSA: 20,\n  LB_T: 21,\n  PERSONAL_LOGGER: 22,\n  PERSONAL_BROWSER_LOGGER: 37,\n  GMS_CORE_WALLET_MERCHANT_ERROR: 23,\n  LB_C: 24,\n  LB_IA: 52,\n  LB_CB: 237,\n  LB_DM: 268,\n  CL_C: 493,\n  CL_DM: 494,\n  ANDROID_AUTH: 25,\n  ANDROID_CAMERA: 26,\n  CW: 27,\n  CW_COUNTERS: 243,\n  CW_GCORE: 784,\n  GEL: 28,\n  DNA_PROBER: 29,\n  UDR: 30,\n  GMS_CORE_WALLET: 31,\n  SOCIAL: 32,\n  INSTORE_WALLET: 33,\n  NOVA: 34,\n  LB_CA: 35,\n  LATIN_IME: 36,\n  NEWS_WEATHER: 38,\n  NEWS_WEATHER_ANDROID_PRIMES: 458,\n  NEWS_WEATHER_IOS_PRIMES: 459,\n  HANGOUT: 39,\n  HANGOUT_LOG_REQUEST: 50,\n  COPRESENCE: 40,\n  SOCIAL_AFFINITY: 41,\n  SOCIAL_AFFINITY_PHOTOS: 465,\n  SOCIAL_AFFINITY_GMAIL: 515,\n  SOCIAL_AFFINITY_INBOX: 516,\n  SOCIAL_AFFINITY_APDL: 707,\n  PEOPLE_AUTOCOMPLETE: 574,\n  SENDKIT: 624,\n  PEOPLE_AUTOCOMPLETE_CLIENT: 625,\n  PHOTOS: 42,\n  GCM: 43,\n  GOKART: 44,\n  FINDR: 45,\n  ANDROID_MESSAGING: 46,\n  BUGLE_COUNTERS: 323,\n  SOCIAL_WEB: 47,\n  BACKDROP: 48,\n  TELEMATICS: 49,\n  GVC_HARVESTER: 51,\n  CAR: 53,\n  PIXEL_PERFECT: 54,\n  DRIVE: 55,\n  DOCS: 56,\n  SHEETS: 57,\n  SLIDES: 58,\n  IME: 59,\n  WARP: 60,\n  NFC_PROGRAMMER: 61,\n  NETSTATS: 62,\n  NEWSSTAND: 63,\n  KIDS_COMMUNICATOR: 64,\n  WIFI_ASSISTANT: 66,\n  WIFI_ASSISTANT_PRIMES: 326,\n  WIFI_ASSISTANT_COUNTERS: 709,\n  CAST_SENDER_SDK: 67,\n  CRONET_SOCIAL: 68,\n  PHENOTYPE: 69,\n  PHENOTYPE_COUNTERS: 70,\n  CHROME_INFRA: 71,\n  JUSTSPEAK: 72,\n  PERF_PROFILE: 73,\n  KATNISS: 75,\n  SOCIAL_APPINVITE: 76,\n  GMM_COUNTERS: 77,\n  BOND_ONEGOOGLE: 78,\n  MAPS_API: 79,\n  CRONET_ANDROID_YT: 196,\n  CRONET_ANDROID_GSA: 80,\n  GOOGLE_FIT_WEARABLE: 81,\n  FITNESS_ANDROID: 169,\n  FITNESS_GMS_CORE: 170,\n  GOOGLE_EXPRESS: 82,\n  GOOGLE_EXPRESS_COUNTERS: 671,\n  GOOGLE_EXPRESS_DEV: 215,\n  GOOGLE_EXPRESS_COURIER_ANDROID_PRIMES: 228,\n  GOOGLE_EXPRESS_ANDROID_PRIMES: 229,\n  GOOGLE_EXPRESS_IOS_PRIMES: 374,\n  GOOGLE_EXPRESS_STOREOMS_ANDROID_PRIMES: 240,\n  SENSE: 83,\n  ANDROID_BACKUP: 84,\n  VR: 85,\n  IME_COUNTERS: 86,\n  SETUP_WIZARD: 87,\n  EMERGENCY_ASSIST: 88,\n  TRON: 89,\n  TRON_COUNTERS: 90,\n  BATTERY_STATS: 91,\n  DISK_STATS: 92,\n  GRAPHICS_STATS: 107,\n  PROC_STATS: 93,\n  DROP_BOX: 131,\n  FINGERPRINT_STATS: 181,\n  NOTIFICATION_STATS: 182,\n  SETTINGS_STATS: 390,\n  STORAGED: 539,\n  TAP_AND_PAY_GCORE: 94,\n  A11YLOGGER: 95,\n  GCM_COUNTERS: 96,\n  PLACES_NO_GLS_CONSENT: 97,\n  TACHYON_LOG_REQUEST: 98,\n  TACHYON_COUNTERS: 99,\n  DUO_CRONET: 396,\n  VISION: 100,\n  SOCIAL_USER_LOCATION: 101,\n  LAUNCHPAD_TOYS: 102,\n  METALOG_COUNTERS: 103,\n  MOBILESDK_CLIENT: 104,\n  ANDROID_VERIFY_APPS: 105,\n  ADSHIELD: 106,\n  SHERLOG: 108,\n  LE_ULR_COUNTERS: 109,\n  GMM_UE3: 110,\n  CALENDAR: 111,\n  ENDER: 112,\n  FAMILY_COMPASS: 113,\n  TRANSOM: 114,\n  TRANSOM_COUNTERS: 115,\n  LB_AS: 116,\n  LB_CFG: 117,\n  IOS_GSA: 118,\n  TAP_AND_PAY_APP: 119,\n  TAP_AND_PAY_APP_COUNTERS: 265,\n  FLYDROID: 120,\n  CPANEL_APP: 121,\n  ANDROID_SNET_GCORE: 122,\n  ANDROID_SNET_IDLE: 123,\n  ANDROID_SNET_JAR: 124,\n  CONTEXT_MANAGER: 125,\n  CLASSROOM: 126,\n  TAILORMADE: 127,\n  KEEP: 128,\n  GMM_BRIIM_COUNTERS: 129,\n  CHROMECAST_APP_LOG: 130,\n  ADWORDS_MOBILE: 133,\n  ADWORDS_MOBILE_ANDROID_PRIMES: 224,\n  ADWORDS_MOBILE_IOS_PRIMES: 546,\n  ADWORDS_MOBILE_ACX: 764,\n  LEANBACK_EVENT: 134,\n  ANDROID_GMAIL: 135,\n  SAMPLE_SHM: 136,\n  GPLUS_ANDROID_PRIMES: 140,\n  GPLUS_ANDROID_SYSTEM_HEALTH: 140,\n  GMAIL_ANDROID_PRIMES: 150,\n  GMAIL_ANDROID_SYSTEM_HEALTH: 150,\n  CALENDAR_ANDROID_PRIMES: 151,\n  CALENDAR_ANDROID_SYSTEM_HEALTH: 151,\n  DOCS_ANDROID_PRIMES: 152,\n  DOCS_ANDROID_SYSTEM_HEALTH: 152,\n  YT_MAIN_APP_ANDROID_PRIMES: 154,\n  YT_KIDS_ANDROID_PRIMES: 155,\n  YT_GAMING_ANDROID_PRIMES: 156,\n  YT_MUSIC_ANDROID_PRIMES: 157,\n  YT_LITE_ANDROID_PRIMES: 158,\n  YT_CREATOR_ANDROID_PRIMES: 171,\n  YT_UNPLUGGED_ANDROID_PRIMES: 589,\n  YT_MAIN_APP_ATV_ANDROID_PRIMES: 826,\n  YT_KIDS_ATV_ANDROID_PRIMES: 827,\n  YT_UNPLUGGED_ATV_ANDROID_PRIMES: 828,\n  JAM_ANDROID_PRIMES: 159,\n  JAM_IOS_PRIMES: 769,\n  JAM_KIOSK_ANDROID_PRIMES: 160,\n  JELLY_ANDROID_PRIMES: 767,\n  JELLY_IOS_PRIMES: 768,\n  PHOTOS_ANDROID_PRIMES: 165,\n  DRIVE_ANDROID_PRIMES: 166,\n  SHEETS_ANDROID_PRIMES: 167,\n  SLIDES_ANDROID_PRIMES: 168,\n  SNAPSEED_ANDROID_PRIMES: 178,\n  HANGOUTS_ANDROID_PRIMES: 179,\n  INBOX_ANDROID_PRIMES: 180,\n  INBOX_IOS_PRIMES: 262,\n  SDP_IOS_PRIMES: 287,\n  GMSCORE_ANDROID_PRIMES: 193,\n  PLAY_MUSIC_ANDROID_WEAR_PRIMES: 200,\n  PLAY_MUSIC_ANDROID_WEAR_STANDALONE_PRIMES: 419,\n  GEARHEAD_ANDROID_PRIMES: 201,\n  INSTORE_CONSUMER_PRIMES: 207,\n  SAMPLE_IOS_PRIMES: 202,\n  SWIFT_SAMPLE_IOS_PRIMES: 748,\n  FLUTTER_SAMPLE_IOS_PRIMES: 787,\n  CPANEL_ANDROID_PRIMES: 213,\n  HUDDLE_ANDROID_PRIMES: 214,\n  AWX_ANDROID_PRIMES: 222,\n  GHS_ANDROID_PRIMES: 223,\n  TAP_AND_PAY_ANDROID_PRIMES: 227,\n  WALLET_APP_ANDROID_PRIMES: 232,\n  WALLET_APP_IOS_PRIMES: 233,\n  ANALYTICS_ANDROID_PRIMES: 235,\n  ANALYTICS_IOS_PRIMES: 538,\n  SPACES_ANDROID_PRIMES: 236,\n  SPACES_IOS_PRIMES: 276,\n  SOCIETY_ANDROID_PRIMES: 238,\n  GMM_BRIIM_PRIMES: 239,\n  CW_PRIMES: 242,\n  CW_IOS_PRIMES: 699,\n  FAMILYLINK_ANDROID_PRIMES: 244,\n  FAMILYLINK_IOS_PRIMES: 291,\n  WH_PRIMES: 248,\n  NOVA_ANDROID_PRIMES: 249,\n  PHOTOS_DRAPER_ANDROID_PRIMES: 253,\n  GMM_PRIMES: 254,\n  TRANSLATE_ANDROID_PRIMES: 255,\n  TRANSLATE_IOS_PRIMES: 256,\n  FREIGHTER_ANDROID_PRIMES: 259,\n  FLYDROID_ANDROID_PRIMES: 259,\n  CONSUMERIQ_PRIMES: 260,\n  GMB_ANDROID_PRIMES: 263,\n  CLOUDDPC_PRIMES: 304,\n  CLOUDDPC_ARC_PRIMES: 305,\n  ICORE: 137,\n  PANCETTA_MOBILE_HOST: 138,\n  PANCETTA_MOBILE_HOST_COUNTERS: 139,\n  CROSSDEVICENOTIFICATION: 141,\n  CROSSDEVICENOTIFICATION_DEV: 142,\n  MAPS_API_COUNTERS: 143,\n  GPU: 144,\n  ON_THE_GO: 145,\n  ON_THE_GO_COUNTERS: 146,\n  ON_THE_GO_ANDROID_PRIMES: 330,\n  ON_THE_GO_IOS_PRIMES: 368,\n  GMS_CORE_PEOPLE_AUTOCOMPLETE: 147,\n  FLYDROID_COUNTERS: 148,\n  FIREBALL: 149,\n  FIREBALL_COUNTERS: 257,\n  CRONET_FIREBALL: 303,\n  FIREBALL_PRIMES: 266,\n  FIREBALL_IOS_PRIMES: 313,\n  GOOGLE_HANDWRITING_INPUT_ANDROID_PRIMES: 314,\n  PYROCLASM: 153,\n  ANDROID_GSA_COUNTERS: 161,\n  JAM_IMPRESSIONS: 162,\n  JAM_KIOSK_IMPRESSIONS: 163,\n  PAYMENTS_OCR: 164,\n  UNICORN_FAMILY_MANAGEMENT: 172,\n  AUDITOR: 173,\n  NQLOOKUP: 174,\n  ANDROID_GSA_HIGH_PRIORITY_EVENTS: 175,\n  ANDROID_DIALER: 176,\n  CLEARCUT_DEMO: 177,\n  APPMANAGER: 183,\n  SMARTLOCK_COUNTERS: 184,\n  EXPEDITIONS_GUIDE: 185,\n  FUSE: 186,\n  PIXEL_PERFECT_CLIENT_STATE_LOGGER: 187,\n  PLATFORM_STATS_COUNTERS: 188,\n  DRIVE_VIEWER: 189,\n  PDF_VIEWER: 190,\n  BIGTOP: 191,\n  VOICE: 192,\n  MYFIBER: 194,\n  RECORDED_PAGES: 195,\n  MOB_DOG: 197,\n  WALLET_APP: 198,\n  GBOARD: 199,\n  CRONET_GMM: 203,\n  TRUSTED_FACE: 204,\n  MATCHSTICK: 205,\n  MATCHSTICK_COUNTERS: 372,\n  APP_CATALOG: 206,\n  BLUETOOTH: 208,\n  WIFI: 209,\n  TELECOM: 210,\n  TELEPHONY: 211,\n  IDENTITY_FRONTEND: 212,\n  IDENTITY_FRONTEND_EXTENDED: 558,\n  SESAME: 216,\n  GOOGLE_KEYBOARD_CONTENT: 217,\n  MADDEN: 218,\n  INK: 219,\n  ANDROID_CONTACTS: 220,\n  GOOGLE_KEYBOARD_COUNTERS: 221,\n  CLEARCUT_PROBER: 225,\n  PLAY_CONSOLE_APP: 226,\n  PLAY_CONSOLE_APP_PRIMES: 264,\n  PLAY_CONSOLE_APP_FEATURE_ANALYTICS: 507,\n  SPECTRUM: 230,\n  SPECTRUM_COUNTERS: 231,\n  SPECTRUM_ANDROID_PRIMES: 267,\n  IOS_SPOTLIGHT_SEARCH_LIBRARY: 234,\n  BOQ_WEB: 241,\n  ORCHESTRATION_CLIENT: 245,\n  ORCHESTRATION_CLIENT_DEV: 246,\n  GOOGLE_NOW_LAUNCHER: 247,\n  SCOOBY_SPAM_REPORT_LOG: 250,\n  IOS_GROWTH: 251,\n  APPS_NOTIFY: 252,\n  SMARTKEY_APP: 269,\n  CLINICAL_STUDIES: 270,\n  FITNESS_ANDROID_PRIMES: 271,\n  IMPROV_APPS: 272,\n  FAMILYLINK: 273,\n  FAMILYLINK_COUNTERS: 274,\n  SOCIETY: 275,\n  DIALER_ANDROID_PRIMES: 277,\n  YOUTUBE_DIRECTOR_APP: 278,\n  TACHYON_ANDROID_PRIMES: 279,\n  TACHYON_IOS_PRIMES: 645,\n  DRIVE_FS: 280,\n  YT_MAIN: 281,\n  WING_MARKETPLACE_ANDROID_PRIMES: 282,\n  DYNAMITE: 283,\n  STREAMZ_DYNAMITE: 778,\n  CORP_ANDROID_FOOD: 284,\n  ANDROID_MESSAGING_PRIMES: 285,\n  GPLUS_IOS_PRIMES: 286,\n  CHROMECAST_ANDROID_APP_PRIMES: 288,\n  CAST_IOS_PRIMES: 344,\n  APPSTREAMING: 289,\n  GMB_ANDROID: 290,\n  VOICE_IOS_PRIMES: 292,\n  VOICE_ANDROID_PRIMES: 293,\n  PAISA: 294,\n  NAZDEEK_USER_ANDROID_PRIMES: 315,\n  NAZDEEK_CAB_ANDROID_PRIMES: 316,\n  NAZDEEK_CAFE_ANDROID_PRIMES: 317,\n  GMB_IOS: 295,\n  GMB_IOS_PRIMES: 325,\n  SCOOBY_EVENTS: 296,\n  SNAPSEED_IOS_PRIMES: 297,\n  YOUTUBE_DIRECTOR_IOS_PRIMES: 298,\n  WALLPAPER_PICKER: 299,\n  WALLPAPER_PICKER_ANDROID_PRIMES: 466,\n  CHIME: 300,\n  BEACON_GCORE: 301,\n  ANDROID_STUDIO: 302,\n  DOCS_OFFLINE: 306,\n  FREIGHTER: 307,\n  DOCS_IOS_PRIMES: 308,\n  SLIDES_IOS_PRIMES: 309,\n  SHEETS_IOS_PRIMES: 310,\n  IPCONNECTIVITY: 311,\n  CURATOR: 312,\n  CURATOR_ANDROID_PRIMES: 318,\n  FITNESS_ANDROID_WEAR_PRIMES: 319,\n  ANDROID_MIGRATE: 320,\n  PAISA_USER_ANDROID_PRIMES: 321,\n  PAISA_MERCHANT_ANDROID_PRIMES: 322,\n  CLIENT_LOGGING_PROD: 327,\n  CLIENT_LOGGING_DEMO: 327,\n  LIVE_CHANNELS_ANDROID_PRIMES: 328,\n  PAISA_USER_IOS_PRIMES: 329,\n  VESPA_IOS_PRIMES: 331,\n  PLAY_GAMES_PRIMES: 332,\n  GMSCORE_API_COUNTERS: 333,\n  EARTH: 334,\n  EARTH_COUNTERS: 405,\n  CALENDAR_CLIENT: 335,\n  SV_ANDROID_PRIMES: 336,\n  PHOTOS_IOS_PRIMES: 337,\n  GARAGE_ANDROID_PRIMES: 338,\n  GARAGE_IOS_PRIMES: 339,\n  SOCIAL_GOOD_DONATION_WIDGET: 340,\n  SANDCLOCK: 341,\n  IMAGERY_VIEWER: 342,\n  ADWORDS_EXPRESS_ANDROID_PRIMES: 343,\n  IMPROV_POSTIT: 345,\n  IMPROV_SHARPIE: 346,\n  DRAPER_IOS_PRIMES: 347,\n  SMARTCAM: 348,\n  DASHER_USERHUB: 349,\n  ANDROID_CONTACTS_PRIMES: 350,\n  ZAGAT_BURGUNDY_IOS_PRIMES: 351,\n  ZAGAT_BURGUNDY_ANDROID_PRIMES: 352,\n  CALENDAR_IOS_PRIMES: 353,\n  SV_IOS_PRIMES: 354,\n  SMART_SETUP: 355,\n  BOOND_ANDROID_PRIMES: 356,\n  KONG_ANDROID_PRIMES: 358,\n  CLASSROOM_IOS_PRIMES: 359,\n  WESTINGHOUSE_COUNTERS: 360,\n  WALLET_SDK_GCORE: 361,\n  ANDROID_IME_ANDROID_PRIMES: 362,\n  MEETINGS_ANDROID_PRIMES: 363,\n  MEETINGS_IOS_PRIMES: 364,\n  WEB_CONTACTS: 365,\n  ADS_INTEGRITY_OPS: 366,\n  TOPAZ: 367,\n  CLASSROOM_ANDROID_PRIMES: 369,\n  THUNDERBIRD: 370,\n  PULPFICTION: 371,\n  ONEGOOGLE: 373,\n  TRANSLATE: 375,\n  LIFESCIENCE_FRONTENDS: 376,\n  WALLPAPER_PICKER_COUNTERS: 377,\n  MAGICTETHER_COUNTERS: 378,\n  SOCIETY_COUNTERS: 379,\n  UNICOMM_P: 380,\n  UNICOMM_S: 381,\n  HALLWAY: 382,\n  SPACES: 383,\n  TOOLKIT_QUICKSTART: 384,\n  CHAUFFEUR_ANDROID_PRIMES: 385,\n  CHAUFFEUR_IOS_PRIMES: 386,\n  FIDO: 387,\n  MOBDOG_ANDROID_PRIMES: 388,\n  MOBDOG_IOS_PRIMES: 389,\n  AWX_IOS_PRIMES: 391,\n  GHS_IOS_PRIMES: 392,\n  BOOKS_IOS_PRIMES: 393,\n  LINKS: 394,\n  KATNIP_IOS_PRIMES: 395,\n  BOOKS_ANDROID_PRIMES: 397,\n  DYNAMITE_ANDROID_PRIMES: 398,\n  DYNAMITE_IOS_PRIMES: 399,\n  SIDELOADED_MUSIC: 400,\n  CORP_ANDROID_DORY: 401,\n  CORP_ANDROID_JETSET: 402,\n  VR_SDK_IOS_PRIMES: 403,\n  VR_SDK_ANDROID_PRIMES: 404,\n  PHOTOS_SCANNER: 406,\n  BG_IN_OGB: 407,\n  BLOGGER: 408,\n  CORP_IOS_FOOD: 409,\n  BEACON_GCORE_TEST: 410,\n  LINKS_IOS_PRIMES: 411,\n  CHAUFFEUR: 412,\n  SNAPSEED: 413,\n  EARTH_ANDROID_PRIMES: 414,\n  CORP_ANDROID_AIUTO: 415,\n  GFTV_MOBILE_PRIMES: 416,\n  GMAIL_IOS: 417,\n  TOPAZ_ANDROID_PRIMES: 418,\n  SOCIAL_COUNTERS: 420,\n  CORP_ANDROID_MOMA: 421,\n  MEETINGS_LOG_REQUEST: 422,\n  GDEAL: 423,\n  GOOGLETTS: 424,\n  SEARCHLITE_ANDROID_PRIMES: 425,\n  NEARBY_AUTH: 426,\n  CORP_ANDROID_ASSISTANT: 427,\n  DMAGENT_ANDROID_PRIMES: 428,\n  CORP_ANDROID_GBUS: 429,\n  YOUTUBE_UNPLUGGED_IOS_PRIMES: 430,\n  LEANBACK_LAUNCHER_PRIMES: 431,\n  DROIDGUARD: 432,\n  CORP_IOS_DORY: 433,\n  PLAY_MUSIC_ANDROID_APP_PRIMES: 434,\n  GPOST_ANDROID_PRIMES: 436,\n  GPOST_CLIENT_LOGS: 437,\n  DPANEL: 438,\n  ADSENSE_ANDROID_PRIMES: 439,\n  PDM_COUNTERS: 440,\n  EMERGENCY_ASSIST_PRIMES: 441,\n  APPS_TELEPATH: 442,\n  METALOG: 443,\n  TELECOM_PLATFORM_STATS: 444,\n  WIFI_PLATFORM_STATS: 445,\n  GMA_SDK: 446,\n  GMA_SDK_COUNTERS: 447,\n  ANDROID_CREATIVE_PREVIEW_PRIMES: 448,\n  TELEPHONY_PLATFORM_STATS: 449,\n  TESTDRIVE_PRIMES: 450,\n  CARRIER_SERVICES: 451,\n  CLOUD_CONSOLE_ANDROID_PRIMES: 452,\n  STREET_VIEW: 453,\n  STAX: 454,\n  NEWSSTAND_ANDROID_PRIMES: 455,\n  NEWSSTAND_IOS_PRIMES: 651,\n  PAISA_USER: 456,\n  CARRIER_SERVICES_ANDROID_PRIMES: 457,\n  IPCONNECTIVITY_PLATFORM_STATS: 460,\n  FIREPERF_AUTOPUSH: 461,\n  FIREPERF: 462,\n  ZAGAT_IOS_AUTHENTICATED: 463,\n  ULR: 464,\n  PLAY_MOVIES_ANDROID_PRIMES: 467,\n  SMART_LOCK_IOS: 468,\n  ZAGAT_IOS_PSEUDONYMOUS: 469,\n  TRAVEL_BOOKING: 470,\n  WESTINGHOUSE_ODYSSEY: 471,\n  GMM_WEARABLE_PRIMES: 472,\n  HUDDLE_ANDROID: 473,\n  DL_FONTS: 474,\n  KEEP_ANDROID_PRIMES: 475,\n  CORP_ANDROID_CAMPUS: 476,\n  TANGO_CORE: 477,\n  ROMANESCO_GCORE: 478,\n  APPS_TELEPATH_ANDROID_PRIMES: 479,\n  PIGEON_EXPERIMENTAL: 480,\n  SPEAKEASY_BARKEEP_CLIENT: 481,\n  BASELINE_ANDROID_PRIMES: 482,\n  TANGO_CORE_COUNTERS: 483,\n  PHENOTYPE_DEMO: 484,\n  YETI: 485,\n  YETI_STREAMZ: 642,\n  TVPRESENCE_ANDROID_PRIMES: 486,\n  LINKS_ANDROID_PRIMES: 487,\n  ALBERT: 488,\n  TOPAZ_APP: 489,\n  ICENTRAL_ANDROID_PRIMES: 490,\n  BISTO_ANDROID_PRIMES: 491,\n  GDEAL_QA: 492,\n  ATV_REMOTE_PRIMES: 495,\n  ATV_REMOTE_SERVICE_PRIMES: 496,\n  BRELLA: 497,\n  ANDROID_GROWTH: 498,\n  GHS_CLIENT_LOGS: 499,\n  GOR_ANDROID_PRIMES: 500,\n  NETREC: 501,\n  NETREC_COUNTERS: 502,\n  DASHER_ADMINCONSOLE: 503,\n  SESAME_CAMERA_LAUNCH: 504,\n  GOOGLE_RED_ANDROID_PRIMES: 505,\n  SEARCHLITE: 506,\n  CONTACTS_ASSISTANTS: 508,\n  CONCORD: 509,\n  CALENDAR_IOS_COUNTERS: 510,\n  POCKETWATCH_ANDROID_WEAR_PRIMES: 511,\n  MYALO_ANDROID_PRIMES: 512,\n  ACTIVITY_RECOGNITION: 513,\n  VR_STREAMING_COUNTERS: 514,\n  TOPAZ_IOS_PRIMES: 517,\n  NEWS_EVENT: 518,\n  CHROMOTING: 519,\n  CHROMOTING_COUNTERS: 520,\n  GMM_WEARABLE_COUNTERS: 521,\n  VR_STREAMING_ANDROID_PRIMES: 522,\n  REACHABILITY_GCORE: 523,\n  DMAGENT_IOS: 524,\n  DMAGENT_IOS_PRIMES: 525,\n  SESAME_UNLOCK_PRIMES: 526,\n  SESAME_TRUST_API_PRIMES: 527,\n  GSTORE: 528,\n  OPA_IOS: 529,\n  VRCORE_ANDROID_PRIMES: 530,\n  MOMA: 531,\n  SESAME_UNLOCK_COUNTERS: 532,\n  LB_COUNTERS: 533,\n  DAYDREAM_HOME: 534,\n  INK_ANDROID_PRIMES: 535,\n  INK_IOS_PRIMES: 536,\n  ASSISTANTKIT_IOS: 537,\n  CORP_IOS_LATIOS_PRIMES: 540,\n  MEDIA_STATS: 541,\n  CRONET_ANDROID_PHOTOS: 543,\n  GWS_JS: 544,\n  GWS_JS_AUTH_EXPERIMENT: 619,\n  CALCULATOR_ANDROID_PRIMES: 545,\n  GOOGLE_MEETS: 547,\n  ENTERPRISE_ENROLLMENT_COUNTERS: 548,\n  GNSS: 549,\n  VIMES: 550,\n  CAMERA_ANDROID_PRIMES: 551,\n  ANDROID_WEBVIEW: 552,\n  NEARBY: 553,\n  PREDICT_ON_DEVICE: 554,\n  OAUTH_INTEGRATIONS: 555,\n  IMPROV_ANDROID_PRIMES: 556,\n  GOOGLETTS_ANDROID_PRIMES: 557,\n  GNSS_PLATFORM_STATS: 559,\n  ACTIONS_ON_GOOGLE: 560,\n  GBOARD_ANDROID_PRIMES: 561,\n  NAKSHA_ANDROID_PRIMES: 562,\n  PAISA_COUNTERS: 563,\n  CONSTELLATION: 564,\n  ZANDRIA: 565,\n  CORP_IOS_LATIOS: 566,\n  DAYDREAM_HOME_ANDROID_PRIMES: 567,\n  VISUAL_SEMANTIC_LIFT: 568,\n  TRAVEL_VACATIONS: 569,\n  DAYDREAM_KEYBOARD_ANDROID_PRIMES: 570,\n  SMS_SYNC_COUNTERS: 571,\n  CORP_IOS_FOOD_PRIMES: 572,\n  MOMA_COUNTERS: 573,\n  BASELINE_IOS_PRIMES: 575,\n  CLEARCUT_LOG_LOSS: 576,\n  BIRDSONG: 577,\n  OPA_IOS_PRIMES: 578,\n  PSEUDONYMOUS_ID_COUNTERS: 579,\n  PROXY_COMPANION_ANDROID_PRIMES: 580,\n  IMAGES: 581,\n  GREENTEA: 582,\n  AUTOFILL_WITH_GOOGLE: 583,\n  ZEBEDEE_ANDROID_PRIMES: 584,\n  GBOARD_IOS_PRIMES: 585,\n  KEEP_IOS_PRIMES: 586,\n  ROYALMINT_ANDROID_PRIMES: 587,\n  DRIVE_IOS_PRIMES: 588,\n  REVEAL: 590,\n  TRENDS_CLIENT: 591,\n  FILESGO_ANDROID_PRIMES: 593,\n  PIXEL_HW_INFO: 594,\n  HEALTH_COUNTERS: 595,\n  WEB_SEARCH: 596,\n  LITTLEHUG_PEOPLE: 597,\n  MYGLASS_ANDROID_PRIMES: 598,\n  TURBO: 599,\n  ANDROID_OTA: 600,\n  SENSE_AMBIENTMUSIC: 601,\n  SENSE_DND: 602,\n  LIBASSISTANT: 603,\n  STREAMZ: 604,\n  EUICC: 605,\n  MEDICAL_SCRIBE: 606,\n  CALENDAR_IOS: 607,\n  AUDIT: 608,\n  EASEL_SERVICE_ANDROID_PRIMES: 609,\n  WHISTLEPUNK_ANDROID_PRIMES: 610,\n  WHISTLEPUNK_IOS_PRIMES: 611,\n  EDGE_PCAP: 612,\n  ICING_COUNTERS: 613,\n  BEACON_TOOLS_ANDROID_PRIMES: 614,\n  BEACON_TOOLS_IOS_PRIMES: 615,\n  SCOOBY_EVENT_LOG: 616,\n  EARTH_IOS_PRIMES: 617,\n  YETI_CLIENT: 618,\n  GROWTH_CATALOG_IOS_PRIMES: 621,\n  ANDROID_SPEECH_SERVICES: 622,\n  KIDS_SUPERVISION: 623,\n  ADWORDS_FLUTTER_ANDROID_PRIMES: 626,\n  ADWORDS_FLUTTER_IOS_PRIMES: 627,\n  HIRE_IOS_PRIMES: 628,\n  RUNWAY: 629,\n  VR_SOCIAL: 630,\n  TASKS_ANDROID_PRIMES: 631,\n  WEAR_CHAMELEON: 632,\n  ZEBEDEE_COUNTERS: 633,\n  CARRIER_SETTINGS: 634,\n  ONEGOOGLE_MOBILE: 635,\n  ANDROID_SMART_SHARE: 636,\n  HIRE_ANDROID_PRIMES: 637,\n  VR_COMMS: 638,\n  G_SUITE_COMPANION: 639,\n  GMSCORE_BACKEND_COUNTERS: 640,\n  MUSTARD_ANDROID_PRIMES: 641,\n  TV_LAUNCHER_ANDROID_PRIMES: 643,\n  TV_RECOMMENDATIONS_ANDROID_PRIMES: 644,\n  APPS_ASSISTANT: 646,\n  CHROME_WEB_STORE: 647,\n  SEARCH_CONSOLE: 648,\n  ZEBEDEE: 649,\n  OPA_TV: 650,\n  TASKS: 652,\n  APPS_SEARCH: 653,\n  CLEARCUT_TEST: 654,\n  ASSISTANTLITE: 655,\n  ASSISTANTLITE_ANDROID_PRIMES: 656,\n  MUSK: 657,\n  TV_LAUNCHER: 658,\n  FOOD_ORDERING: 659,\n  TALKBACK: 660,\n  LONGFEI_ANDROID_PRIMES: 661,\n  GMSCORE_NOTIFICATION_COUNTERS: 662,\n  SAVE: 663,\n  MECHAHAMSTER_IOS_PRIMES: 664,\n  GRPC_INTEROP_ANDROID_PRIMES: 665,\n  KLOPFKLOPF: 666,\n  GRPC_INTEROP_IOS_PRIMES: 667,\n  CRONET_WESTINGHOUSE: 668,\n  CHROMESYNC: 669,\n  NETSTATS_GMS_PREV14: 670,\n  CORP_ANDROID_MOMA_CLEARCUT: 672,\n  PIXEL_AMBIENT_SERVICES_PRIMES: 673,\n  SETTINGS_INTELLIGENCE: 674,\n  FIREPERF_INTERNAL_LOW: 675,\n  FIREPERF_INTERNAL_HIGH: 676,\n  EXPEDITIONS_ANDROID_PRIMES: 677,\n  LAUNCHER_STATS: 678,\n  YETI_GUESTORC: 679,\n  MOTION_STILLS: 680,\n  ASSISTANT_CLIENT_COUNTERS: 681,\n  EXPEDITIONS_IOS_PRIMES: 682,\n  GOOGLEASSISTANT_ANDROID_PRIMES: 683,\n  CAMERAKIT: 684,\n  ANDROID_ONBOARD_WEB: 685,\n  GCONNECT_TURNOUT: 686,\n  VR180_ANDROID_PRIMES: 687,\n  VR180_IOS_PRIMES: 688,\n  LONGFEI_COUNTERS: 689,\n  CONNECTIVITY_MONITOR_ANDROID_PRIMES: 690,\n  GPP_UI: 691,\n  PRIMES_INTERNAL_ANDROID_PRIMES: 692,\n  YETI_PTS: 693,\n  FACT_CHECK_EXPLORER: 694,\n  ASSISTANT_HQ_WEB: 695,\n  YETI_TLS_PROXY: 696,\n  GMAIL_DD: 697,\n  KHAZANA_ANDROID_PRIMES: 698,\n  ARCORE: 700,\n  GOOGLE_WIFI_ANDROID_PRIMES: 701,\n  PROXIMITY_AUTH_COUNTERS: 702,\n  WEAR_KEYBOARD_ANDROID_PRIMES: 703,\n  SEARCH_ON_BOQ: 704,\n  SCONE_ANDROID_PRIMES: 705,\n  MOBILE_DATA_PLAN: 706,\n  VENUS: 708,\n  IPA_GCORE: 710,\n  TETHERING_ENTITLEMENT: 711,\n  SEMANTIC_LOCATION_COUNTERS: 712,\n  TURBO_ANDROID_PRIMES: 713,\n  USER_LOCATION_REPORTING: 714,\n  FIREBASE_ML_SDK: 715,\n  GOR_CLEARCUT: 716,\n  WFC_ACTIVATION: 717,\n  TASKS_IOS_PRIMES: 718,\n  WING_OPENSKY_ANDROID_PRIMES: 719,\n  CARRIER_SETUP: 720,\n  ASSISTANT_SHELL: 721,\n  PLAY_METALOG: 722,\n  ZOOMSIGHTS: 723,\n  EASYSIGNIN_GCORE: 724,\n  GFTV_ANDROIDTV: 725,\n  GFTV_ANDROIDTV_PRIMES: 726,\n  WING_MARKETPLACE_IOS_PRIMES: 727,\n  LAGEPLAN_ANDROID_PRIMES: 728,\n  ONEGOOGLE_VE: 729,\n  LAGEPLAN: 730,\n  FIREBASE_INAPPMESSAGING: 731,\n  MEDICAL_RECORDS_GUARDIAN: 732,\n  WESTWORLD: 733,\n  WESTWORLD_METADATA: 734,\n  WESTWORLD_COUNTERS: 735,\n  PAISA_MERCHANT: 736,\n  COPRESENCE_NO_IDS: 737,\n  KIDS_DUMBLEDORE: 738,\n  FITNESS_IOS_FITKIT: 739,\n  SETTINGS_INTELLIGENCE_ANDROID_PRIMES: 740,\n  ANDROID_SUGGEST_ALLAPPS: 741,\n  STREAMZ_EXAMPLE: 742,\n  BETTERBUG_ANDROID_PRIMES: 743,\n  MOVIES_PLAYBACK: 744,\n  KLOPFKLOPF_ANDROID_PRIMES: 745,\n  DESKCLOCK_ANDROID_PRIMES: 746,\n  LOCAL_DEV_PROXY_IOS_PRIMES: 747,\n  HATS: 749,\n  HATS_STAGING: 801,\n  WEAR_DIALER_ANDROID_PRIMES: 750,\n  LONGFEI: 751,\n  SWITCH_ACCESS_ANDROID_PRIMES: 752,\n  PLAY_GAMES_ANDROID_PRIMES: 753,\n  ANDROID_GSA_ANDROID_PRIMES: 754,\n  GUARDIAN_MIMIC3: 755,\n  GUARDIAN_MERCURY: 756,\n  GMB_WEB: 757,\n  AIAI_MATCHMAKER: 758,\n  STREAMZ_GFTV_ANDROIDTV: 759,\n  GMAIL_ANDROID: 760,\n  STREAMZ_PLX: 761,\n  INCIDENT_REPORT: 762,\n  ELDAR: 763,\n  IMPROV_IOS_PRIMES: 765,\n  STREAMZ_ROMANESCO: 766,\n  FACE_LOCK_ANDROID_PRIMES: 770,\n  ANDROID_THINGS_COMPANION_ANDROID_PRIMES: 771,\n  GRPC_COUNTERS: 772,\n  YOUTUBE_LITE: 773,\n  EASY_UNLOCK_COUNTERS: 774,\n  CORP_ANDROID_SHORTCUT: 775,\n  YETI_VULKAN: 776,\n  STREAMZ_ANDROID_GROWTH: 779,\n  CONNECTIVITY_MONITOR: 780,\n  SWITCH_ACCESS: 781,\n  PERFETTO: 782,\n  ORNAMENT_ANDROID_PRIMES: 783,\n  STREAMZ_SHORTCUT: 785,\n  ATV_SETUP_ANDROID_PRIMES: 786,\n  YETI_DATAVM: 788,\n  SEMANTIC_LOCATION_ANDROID_LOG_EVENTS: 789,\n  EXPRESSION: 790,\n  STREAMZ_GCONNECT: 791,\n  GMS_TEXT_CLASSIFIER: 792,\n  GMAIL_WEB: 793,\n  SPEAKR_ANDROID_PRIMES: 794,\n  CONTACT_HR: 795,\n  ANDROID_CONTACTS_COUNTERS: 796,\n  FLUTTER_SAMPLE: 797,\n  AIAI_MATCHMAKER_COUNTERS: 798,\n  BLOG_COMPASS_ANDROID_PRIMES: 799,\n  BETTERBUG_ANDROID: 800,\n  STREAMZ_ANDROID_BUILD: 802,\n  MATERIAL_THEME_KIT_ERROR_REPORT: 803,\n  YOUTUBE_IOS: 804,\n  YOUTUBE_MUSIC_IOS: 805,\n  AIY_PROJECTS_ANDROID_PRIMES: 806,\n  WELLBEING_ANDROID_PRIMES: 807,\n  YETI_DEV: 808,\n  INSTANT_BUY_CLIENT: 809,\n  WELLBEING_ANDROID_COUNTERS: 810,\n  KHAZANA_ANDROID_VE: 811,\n  LIGHTER_ANDROID: 812,\n  LIGHTER_IOS: 813,\n  AMP_ACTIONS_CLIENT: 814,\n  PRESTO_ALP: 815,\n  SUBSCRIBEWITHGOOGLE_CLIENT: 816,\n  STREAMZ_CLUSTER_REVIEW: 817,\n  NEARBY_COUNTERS: 818,\n  EXPRESSION_COUNTERS: 819,\n  SCRIBE_ANDROID_PRIMES: 820,\n  ANDROID_NATIVE_ONBOARDING: 821,\n  DRIVE_DATASERVICE: 822,\n  GMM_NAVGO_COUNTERS: 823,\n  FCM_PROBER_APP: 824,\n  OPA_TV_ANDROID_PRIMES: 825,\n  GOOGLE_WIFI_LOG: 829,\n  POWER_ANOMALY: 830\n};\n\n/**\n * @enum {number}\n */\nproto.wireless_android_play_playlog.LogRequest.SchedulerType \x3d {\n  UNKNOWN_SCHEDULER: 0,\n  ASAP: 1,\n  DEFAULT_PERIODIC: 2,\n  QOS_FAST_ONEOFF: 3,\n  QOS_DEFAULT_PERIODIC: 4,\n  QOS_UNMETERED_PERIODIC: 5\n};\n\n/**\n * optional int64 request_time_ms \x3d 4;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.getRequestTimeMs \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.LogRequest.prototype.setRequestTimeMs \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.wireless_android_play_playlog.LogRequest.prototype.clearRequestTimeMs \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.hasRequestTimeMs \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional int64 request_uptime_ms \x3d 8;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.getRequestUptimeMs \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 8));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.LogRequest.prototype.setRequestUptimeMs \x3d function(value) {\n  jspb.Message.setField(this, 8, value);\n};\n\n\nproto.wireless_android_play_playlog.LogRequest.prototype.clearRequestUptimeMs \x3d function() {\n  jspb.Message.setField(this, 8, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.hasRequestUptimeMs \x3d function() {\n  return jspb.Message.getField(this, 8) !\x3d null;\n};\n\n\n/**\n * optional ClientInfo client_info \x3d 1;\n * @return {?proto.wireless_android_play_playlog.ClientInfo}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.getClientInfo \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.ClientInfo} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.ClientInfo, 1));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.ClientInfo|undefined} value */\nproto.wireless_android_play_playlog.LogRequest.prototype.setClientInfo \x3d function(value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.LogRequest.prototype.clearClientInfo \x3d function() {\n  this.setClientInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.hasClientInfo \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional LogSource log_source \x3d 2;\n * @return {!proto.wireless_android_play_playlog.LogRequest.LogSource}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.getLogSource \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.LogRequest.LogSource} */ (jspb.Message.getFieldWithDefault(this, 2, -1));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.LogRequest.LogSource|undefined} value */\nproto.wireless_android_play_playlog.LogRequest.prototype.setLogSource \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.LogRequest.prototype.clearLogSource \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.hasLogSource \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional string log_source_name \x3d 6;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.getLogSourceName \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 6));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.LogRequest.prototype.setLogSourceName \x3d function(value) {\n  jspb.Message.setField(this, 6, value);\n};\n\n\nproto.wireless_android_play_playlog.LogRequest.prototype.clearLogSourceName \x3d function() {\n  jspb.Message.setField(this, 6, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.hasLogSourceName \x3d function() {\n  return jspb.Message.getField(this, 6) !\x3d null;\n};\n\n\n/**\n * optional string zwieback_cookie \x3d 7;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.getZwiebackCookie \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 7));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.LogRequest.prototype.setZwiebackCookie \x3d function(value) {\n  jspb.Message.setField(this, 7, value);\n};\n\n\nproto.wireless_android_play_playlog.LogRequest.prototype.clearZwiebackCookie \x3d function() {\n  jspb.Message.setField(this, 7, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.hasZwiebackCookie \x3d function() {\n  return jspb.Message.getField(this, 7) !\x3d null;\n};\n\n\n/**\n * repeated LogEvent log_event \x3d 3;\n * @return {!Array\x3c!proto.wireless_android_play_playlog.LogEvent\x3e}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.getLogEventList \x3d function() {\n  return /** @type{!Array\x3c!proto.wireless_android_play_playlog.LogEvent\x3e} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.wireless_android_play_playlog.LogEvent, 3));\n};\n\n\n/** @param {Array\x3c!proto.wireless_android_play_playlog.LogEvent\x3e|undefined} value */\nproto.wireless_android_play_playlog.LogRequest.prototype.setLogEventList \x3d function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 3, value);\n};\n\n\n/**\n * @param {!proto.wireless_android_play_playlog.LogEvent\x3d} opt_value\n * @param {number\x3d} opt_index\n * @return {!proto.wireless_android_play_playlog.LogEvent}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.addLogEvent \x3d function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.wireless_android_play_playlog.LogEvent, opt_index);\n};\n\n\nproto.wireless_android_play_playlog.LogRequest.prototype.clearLogEventList \x3d function() {\n  this.setLogEventList([]);\n};\n\n\n/**\n * repeated bytes serialized_log_events \x3d 5;\n * @return {!Array\x3cstring\x3e}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.getSerializedLogEventsList \x3d function() {\n  return /** @type {!Array\x3cstring\x3e} */ (jspb.Message.getRepeatedField(this, 5));\n};\n\n\n/**\n * repeated bytes serialized_log_events \x3d 5;\n * This is a type-conversion wrapper around `getSerializedLogEventsList()`\n * @return {!Array\x3cstring\x3e}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.getSerializedLogEventsList_asB64 \x3d function() {\n  return /** @type {!Array\x3cstring\x3e} */ (jspb.Message.bytesListAsB64(\n      this.getSerializedLogEventsList()));\n};\n\n\n/**\n * repeated bytes serialized_log_events \x3d 5;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSerializedLogEventsList()`\n * @return {!Array\x3c!Uint8Array\x3e}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.getSerializedLogEventsList_asU8 \x3d function() {\n  return /** @type {!Array\x3c!Uint8Array\x3e} */ (jspb.Message.bytesListAsU8(\n      this.getSerializedLogEventsList()));\n};\n\n\n/** @param {(Array\x3c!Uint8Array\x3e|Array\x3cstring\x3e)|undefined} value */\nproto.wireless_android_play_playlog.LogRequest.prototype.setSerializedLogEventsList \x3d function(value) {\n  jspb.Message.setField(this, 5, value || []);\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @param {number\x3d} opt_index\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.addSerializedLogEvents \x3d function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 5, value, opt_index);\n};\n\n\nproto.wireless_android_play_playlog.LogRequest.prototype.clearSerializedLogEventsList \x3d function() {\n  this.setSerializedLogEventsList([]);\n};\n\n\n/**\n * optional int64 log_event_dropped_count \x3d 14;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.getLogEventDroppedCount \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 14));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.LogRequest.prototype.setLogEventDroppedCount \x3d function(value) {\n  jspb.Message.setField(this, 14, value);\n};\n\n\nproto.wireless_android_play_playlog.LogRequest.prototype.clearLogEventDroppedCount \x3d function() {\n  jspb.Message.setField(this, 14, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.hasLogEventDroppedCount \x3d function() {\n  return jspb.Message.getField(this, 14) !\x3d null;\n};\n\n\n/**\n * optional QosTierConfiguration.QosTier qos_tier \x3d 9;\n * @return {!proto.wireless_android_play_playlog.QosTierConfiguration.QosTier}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.getQosTier \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.QosTierConfiguration.QosTier} */ (jspb.Message.getFieldWithDefault(this, 9, 0));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.QosTierConfiguration.QosTier|undefined} value */\nproto.wireless_android_play_playlog.LogRequest.prototype.setQosTier \x3d function(value) {\n  jspb.Message.setField(this, 9, value);\n};\n\n\nproto.wireless_android_play_playlog.LogRequest.prototype.clearQosTier \x3d function() {\n  jspb.Message.setField(this, 9, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.hasQosTier \x3d function() {\n  return jspb.Message.getField(this, 9) !\x3d null;\n};\n\n\n/**\n * optional SchedulerType scheduler \x3d 10;\n * @return {!proto.wireless_android_play_playlog.LogRequest.SchedulerType}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.getScheduler \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.LogRequest.SchedulerType} */ (jspb.Message.getField(this, 10));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.LogRequest.SchedulerType|undefined} value */\nproto.wireless_android_play_playlog.LogRequest.prototype.setScheduler \x3d function(value) {\n  jspb.Message.setField(this, 10, value);\n};\n\n\nproto.wireless_android_play_playlog.LogRequest.prototype.clearScheduler \x3d function() {\n  jspb.Message.setField(this, 10, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.hasScheduler \x3d function() {\n  return jspb.Message.getField(this, 10) !\x3d null;\n};\n\n\n/**\n * optional DeviceStatus device_status \x3d 11;\n * @return {?proto.wireless_android_play_playlog.DeviceStatus}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.getDeviceStatus \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.DeviceStatus} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.DeviceStatus, 11));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.DeviceStatus|undefined} value */\nproto.wireless_android_play_playlog.LogRequest.prototype.setDeviceStatus \x3d function(value) {\n  jspb.Message.setWrapperField(this, 11, value);\n};\n\n\nproto.wireless_android_play_playlog.LogRequest.prototype.clearDeviceStatus \x3d function() {\n  this.setDeviceStatus(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.hasDeviceStatus \x3d function() {\n  return jspb.Message.getField(this, 11) !\x3d null;\n};\n\n\n/**\n * optional ExternalTimestamp external_timestamp \x3d 12;\n * @return {?proto.wireless_android_play_playlog.ExternalTimestamp}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.getExternalTimestamp \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.ExternalTimestamp} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.ExternalTimestamp, 12));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.ExternalTimestamp|undefined} value */\nproto.wireless_android_play_playlog.LogRequest.prototype.setExternalTimestamp \x3d function(value) {\n  jspb.Message.setWrapperField(this, 12, value);\n};\n\n\nproto.wireless_android_play_playlog.LogRequest.prototype.clearExternalTimestamp \x3d function() {\n  this.setExternalTimestamp(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.hasExternalTimestamp \x3d function() {\n  return jspb.Message.getField(this, 12) !\x3d null;\n};\n\n\n/**\n * optional CollectForDebug collect_for_debug \x3d 13;\n * @return {?proto.wireless_android_play_playlog.CollectForDebug}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.getCollectForDebug \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.CollectForDebug} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.CollectForDebug, 13));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.CollectForDebug|undefined} value */\nproto.wireless_android_play_playlog.LogRequest.prototype.setCollectForDebug \x3d function(value) {\n  jspb.Message.setWrapperField(this, 13, value);\n};\n\n\nproto.wireless_android_play_playlog.LogRequest.prototype.clearCollectForDebug \x3d function() {\n  this.setCollectForDebug(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogRequest.prototype.hasCollectForDebug \x3d function() {\n  return jspb.Message.getField(this, 13) !\x3d null;\n};\n\n\n\n/**\n * The extensions registered with this message class. This is a map of\n * extension field number to fieldInfo object.\n *\n * For example:\n *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n *\n * fieldName contains the JsCompiler renamed field name property so that it\n * works in OPTIMIZED mode.\n *\n * @type {!Object\x3cnumber, jspb.ExtensionFieldInfo\x3e}\n */\nproto.wireless_android_play_playlog.LogRequest.extensions \x3d {};\n\n\n/**\n * The extensions registered with this message class. This is a map of\n * extension field number to fieldInfo object.\n *\n * For example:\n *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n *\n * fieldName contains the JsCompiler renamed field name property so that it\n * works in OPTIMIZED mode.\n *\n * @type {!Object\x3cnumber, jspb.ExtensionFieldBinaryInfo\x3e}\n */\nproto.wireless_android_play_playlog.LogRequest.extensionsBinary \x3d {};\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.LogRequest}\n */\nproto.wireless_android_play_playlog.LogRequest.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.LogRequest, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.DeviceStatus \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.DeviceStatus, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.DeviceStatus.displayName \x3d \x27proto.wireless_android_play_playlog.DeviceStatus\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.DeviceStatus.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.DeviceStatus.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.DeviceStatus} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.DeviceStatus.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    isUnmetered: jspb.Message.getField(msg, 1),\n    isCharging: jspb.Message.getField(msg, 2),\n    autoTimeStatus: jspb.Message.getField(msg, 3),\n    isGooglerDevice: jspb.Message.getField(msg, 4)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.DeviceStatus}\n */\nproto.wireless_android_play_playlog.DeviceStatus.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.DeviceStatus;\n  return proto.wireless_android_play_playlog.DeviceStatus.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.DeviceStatus} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.DeviceStatus}\n */\nproto.wireless_android_play_playlog.DeviceStatus.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {boolean} */ (reader.readBool());\n      msg.setIsUnmetered(value);\n      break;\n    case 2:\n      var value \x3d /** @type {boolean} */ (reader.readBool());\n      msg.setIsCharging(value);\n      break;\n    case 3:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.DeviceStatus.AutomaticTime} */ (reader.readEnum());\n      msg.setAutoTimeStatus(value);\n      break;\n    case 4:\n      var value \x3d /** @type {boolean} */ (reader.readBool());\n      msg.setIsGooglerDevice(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.DeviceStatus.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.DeviceStatus.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.DeviceStatus} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.DeviceStatus.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?boolean} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?boolean} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeBool(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.DeviceStatus.AutomaticTime} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?boolean} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeBool(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.wireless_android_play_playlog.DeviceStatus.AutomaticTime \x3d {\n  UNKNOWN: 0,\n  AUTO_TIME_OFF: 1,\n  AUTO_TIME_ON: 2\n};\n\n/**\n * optional bool is_unmetered \x3d 1;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val \x3d\x3d\x3d true/false} in those cases.\n * @return {?boolean}\n */\nproto.wireless_android_play_playlog.DeviceStatus.prototype.getIsUnmetered \x3d function() {\n  return /** @type {?boolean} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?boolean|undefined} value */\nproto.wireless_android_play_playlog.DeviceStatus.prototype.setIsUnmetered \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.DeviceStatus.prototype.clearIsUnmetered \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.DeviceStatus.prototype.hasIsUnmetered \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional bool is_charging \x3d 2;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val \x3d\x3d\x3d true/false} in those cases.\n * @return {?boolean}\n */\nproto.wireless_android_play_playlog.DeviceStatus.prototype.getIsCharging \x3d function() {\n  return /** @type {?boolean} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?boolean|undefined} value */\nproto.wireless_android_play_playlog.DeviceStatus.prototype.setIsCharging \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.DeviceStatus.prototype.clearIsCharging \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.DeviceStatus.prototype.hasIsCharging \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional AutomaticTime auto_time_status \x3d 3;\n * @return {!proto.wireless_android_play_playlog.DeviceStatus.AutomaticTime}\n */\nproto.wireless_android_play_playlog.DeviceStatus.prototype.getAutoTimeStatus \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.DeviceStatus.AutomaticTime} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.DeviceStatus.AutomaticTime|undefined} value */\nproto.wireless_android_play_playlog.DeviceStatus.prototype.setAutoTimeStatus \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.DeviceStatus.prototype.clearAutoTimeStatus \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.DeviceStatus.prototype.hasAutoTimeStatus \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional bool is_googler_device \x3d 4;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val \x3d\x3d\x3d true/false} in those cases.\n * @return {?boolean}\n */\nproto.wireless_android_play_playlog.DeviceStatus.prototype.getIsGooglerDevice \x3d function() {\n  return /** @type {?boolean} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?boolean|undefined} value */\nproto.wireless_android_play_playlog.DeviceStatus.prototype.setIsGooglerDevice \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.wireless_android_play_playlog.DeviceStatus.prototype.clearIsGooglerDevice \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.DeviceStatus.prototype.hasIsGooglerDevice \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.DeviceStatus}\n */\nproto.wireless_android_play_playlog.DeviceStatus.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.DeviceStatus, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.ExternalTimestamp \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.ExternalTimestamp, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.ExternalTimestamp.displayName \x3d \x27proto.wireless_android_play_playlog.ExternalTimestamp\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.ExternalTimestamp.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.ExternalTimestamp.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.ExternalTimestamp} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.ExternalTimestamp.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    timeMs: jspb.Message.getField(msg, 1),\n    uptimeMs: jspb.Message.getField(msg, 2),\n    source: jspb.Message.getField(msg, 3)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.ExternalTimestamp}\n */\nproto.wireless_android_play_playlog.ExternalTimestamp.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.ExternalTimestamp;\n  return proto.wireless_android_play_playlog.ExternalTimestamp.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.ExternalTimestamp} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.ExternalTimestamp}\n */\nproto.wireless_android_play_playlog.ExternalTimestamp.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {number} */ (reader.readInt64());\n      msg.setTimeMs(value);\n      break;\n    case 2:\n      var value \x3d /** @type {number} */ (reader.readInt64());\n      msg.setUptimeMs(value);\n      break;\n    case 3:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setSource(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.ExternalTimestamp.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.ExternalTimestamp.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.ExternalTimestamp} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.ExternalTimestamp.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeInt64(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional int64 time_ms \x3d 1;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.ExternalTimestamp.prototype.getTimeMs \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.ExternalTimestamp.prototype.setTimeMs \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.ExternalTimestamp.prototype.clearTimeMs \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ExternalTimestamp.prototype.hasTimeMs \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional int64 uptime_ms \x3d 2;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.ExternalTimestamp.prototype.getUptimeMs \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.ExternalTimestamp.prototype.setUptimeMs \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.ExternalTimestamp.prototype.clearUptimeMs \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ExternalTimestamp.prototype.hasUptimeMs \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional string source \x3d 3;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.ExternalTimestamp.prototype.getSource \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.ExternalTimestamp.prototype.setSource \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.ExternalTimestamp.prototype.clearSource \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.ExternalTimestamp.prototype.hasSource \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.ExternalTimestamp}\n */\nproto.wireless_android_play_playlog.ExternalTimestamp.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.ExternalTimestamp, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.CollectForDebug \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.CollectForDebug, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.CollectForDebug.displayName \x3d \x27proto.wireless_android_play_playlog.CollectForDebug\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.CollectForDebug.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.CollectForDebug.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.CollectForDebug} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.CollectForDebug.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    collectStartMs: jspb.Message.getField(msg, 3),\n    collectUntilMs: jspb.Message.getField(msg, 1),\n    skipPersistentLogStorage: jspb.Message.getField(msg, 2)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.CollectForDebug}\n */\nproto.wireless_android_play_playlog.CollectForDebug.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.CollectForDebug;\n  return proto.wireless_android_play_playlog.CollectForDebug.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.CollectForDebug} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.CollectForDebug}\n */\nproto.wireless_android_play_playlog.CollectForDebug.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 3:\n      var value \x3d /** @type {number} */ (reader.readInt64());\n      msg.setCollectStartMs(value);\n      break;\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readInt64String());\n      msg.setCollectUntilMs(value);\n      break;\n    case 2:\n      var value \x3d /** @type {boolean} */ (reader.readBool());\n      msg.setSkipPersistentLogStorage(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.CollectForDebug.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.CollectForDebug.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.CollectForDebug} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.CollectForDebug.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeInt64(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeInt64String(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?boolean} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeBool(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional int64 collect_start_ms \x3d 3;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.CollectForDebug.prototype.getCollectStartMs \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.CollectForDebug.prototype.setCollectStartMs \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.CollectForDebug.prototype.clearCollectStartMs \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.CollectForDebug.prototype.hasCollectStartMs \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional int64 collect_until_ms \x3d 1;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.CollectForDebug.prototype.getCollectUntilMs \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.CollectForDebug.prototype.setCollectUntilMs \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.CollectForDebug.prototype.clearCollectUntilMs \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.CollectForDebug.prototype.hasCollectUntilMs \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional bool skip_persistent_log_storage \x3d 2;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val \x3d\x3d\x3d true/false} in those cases.\n * @return {?boolean}\n */\nproto.wireless_android_play_playlog.CollectForDebug.prototype.getSkipPersistentLogStorage \x3d function() {\n  return /** @type {?boolean} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?boolean|undefined} value */\nproto.wireless_android_play_playlog.CollectForDebug.prototype.setSkipPersistentLogStorage \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.CollectForDebug.prototype.clearSkipPersistentLogStorage \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.CollectForDebug.prototype.hasSkipPersistentLogStorage \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.CollectForDebug}\n */\nproto.wireless_android_play_playlog.CollectForDebug.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.CollectForDebug, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.QosTierConfiguration \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.QosTierConfiguration, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.QosTierConfiguration.displayName \x3d \x27proto.wireless_android_play_playlog.QosTierConfiguration\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.QosTierConfiguration.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.QosTierConfiguration.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.QosTierConfiguration} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.QosTierConfiguration.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    logSourceName: jspb.Message.getField(msg, 1),\n    qosTier: jspb.Message.getField(msg, 2),\n    logSource: jspb.Message.getFieldWithDefault(msg, 3, -1)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.QosTierConfiguration}\n */\nproto.wireless_android_play_playlog.QosTierConfiguration.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.QosTierConfiguration;\n  return proto.wireless_android_play_playlog.QosTierConfiguration.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.QosTierConfiguration} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.QosTierConfiguration}\n */\nproto.wireless_android_play_playlog.QosTierConfiguration.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setLogSourceName(value);\n      break;\n    case 2:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.QosTierConfiguration.QosTier} */ (reader.readEnum());\n      msg.setQosTier(value);\n      break;\n    case 3:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.LogRequest.LogSource} */ (reader.readEnum());\n      msg.setLogSource(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.QosTierConfiguration.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.QosTierConfiguration.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.QosTierConfiguration} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.QosTierConfiguration.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.QosTierConfiguration.QosTier} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.LogRequest.LogSource} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.wireless_android_play_playlog.QosTierConfiguration.QosTier \x3d {\n  DEFAULT: 0,\n  UNMETERED_ONLY: 1,\n  UNMETERED_OR_DAILY: 2,\n  FAST_IF_RADIO_AWAKE: 3,\n  NEVER: 4\n};\n\n/**\n * optional string log_source_name \x3d 1;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.QosTierConfiguration.prototype.getLogSourceName \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.QosTierConfiguration.prototype.setLogSourceName \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.QosTierConfiguration.prototype.clearLogSourceName \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.QosTierConfiguration.prototype.hasLogSourceName \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional QosTier qos_tier \x3d 2;\n * @return {!proto.wireless_android_play_playlog.QosTierConfiguration.QosTier}\n */\nproto.wireless_android_play_playlog.QosTierConfiguration.prototype.getQosTier \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.QosTierConfiguration.QosTier} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.QosTierConfiguration.QosTier|undefined} value */\nproto.wireless_android_play_playlog.QosTierConfiguration.prototype.setQosTier \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.QosTierConfiguration.prototype.clearQosTier \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.QosTierConfiguration.prototype.hasQosTier \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional LogRequest.LogSource log_source \x3d 3;\n * @return {!proto.wireless_android_play_playlog.LogRequest.LogSource}\n */\nproto.wireless_android_play_playlog.QosTierConfiguration.prototype.getLogSource \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.LogRequest.LogSource} */ (jspb.Message.getFieldWithDefault(this, 3, -1));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.LogRequest.LogSource|undefined} value */\nproto.wireless_android_play_playlog.QosTierConfiguration.prototype.setLogSource \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.QosTierConfiguration.prototype.clearLogSource \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.QosTierConfiguration.prototype.hasLogSource \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.QosTierConfiguration}\n */\nproto.wireless_android_play_playlog.QosTierConfiguration.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.QosTierConfiguration, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.QosTiersOverride \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.wireless_android_play_playlog.QosTiersOverride.repeatedFields_, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.QosTiersOverride, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.QosTiersOverride.displayName \x3d \x27proto.wireless_android_play_playlog.QosTiersOverride\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nproto.wireless_android_play_playlog.QosTiersOverride.repeatedFields_ \x3d [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.QosTiersOverride.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.QosTiersOverride.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.QosTiersOverride} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.QosTiersOverride.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    qosTierConfigurationList: jspb.Message.toObjectList(msg.getQosTierConfigurationList(),\n    proto.wireless_android_play_playlog.QosTierConfiguration.toObject, includeInstance),\n    qosTierFingerprint: jspb.Message.getField(msg, 2)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.QosTiersOverride}\n */\nproto.wireless_android_play_playlog.QosTiersOverride.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.QosTiersOverride;\n  return proto.wireless_android_play_playlog.QosTiersOverride.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.QosTiersOverride} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.QosTiersOverride}\n */\nproto.wireless_android_play_playlog.QosTiersOverride.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d new proto.wireless_android_play_playlog.QosTierConfiguration;\n      reader.readMessage(value,proto.wireless_android_play_playlog.QosTierConfiguration.deserializeBinaryFromReader);\n      msg.addQosTierConfiguration(value);\n      break;\n    case 2:\n      var value \x3d /** @type {number} */ (reader.readInt64());\n      msg.setQosTierFingerprint(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.QosTiersOverride.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.QosTiersOverride.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.QosTiersOverride} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.QosTiersOverride.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d message.getQosTierConfigurationList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      proto.wireless_android_play_playlog.QosTierConfiguration.serializeBinaryToWriter\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated QosTierConfiguration qos_tier_configuration \x3d 1;\n * @return {!Array\x3c!proto.wireless_android_play_playlog.QosTierConfiguration\x3e}\n */\nproto.wireless_android_play_playlog.QosTiersOverride.prototype.getQosTierConfigurationList \x3d function() {\n  return /** @type{!Array\x3c!proto.wireless_android_play_playlog.QosTierConfiguration\x3e} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.wireless_android_play_playlog.QosTierConfiguration, 1));\n};\n\n\n/** @param {Array\x3c!proto.wireless_android_play_playlog.QosTierConfiguration\x3e|undefined} value */\nproto.wireless_android_play_playlog.QosTiersOverride.prototype.setQosTierConfigurationList \x3d function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.wireless_android_play_playlog.QosTierConfiguration\x3d} opt_value\n * @param {number\x3d} opt_index\n * @return {!proto.wireless_android_play_playlog.QosTierConfiguration}\n */\nproto.wireless_android_play_playlog.QosTiersOverride.prototype.addQosTierConfiguration \x3d function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.wireless_android_play_playlog.QosTierConfiguration, opt_index);\n};\n\n\nproto.wireless_android_play_playlog.QosTiersOverride.prototype.clearQosTierConfigurationList \x3d function() {\n  this.setQosTierConfigurationList([]);\n};\n\n\n/**\n * optional int64 qos_tier_fingerprint \x3d 2;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.QosTiersOverride.prototype.getQosTierFingerprint \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.QosTiersOverride.prototype.setQosTierFingerprint \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.QosTiersOverride.prototype.clearQosTierFingerprint \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.QosTiersOverride.prototype.hasQosTierFingerprint \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.QosTiersOverride}\n */\nproto.wireless_android_play_playlog.QosTiersOverride.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.QosTiersOverride, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.LogSourceBatchingBlacklist \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.wireless_android_play_playlog.LogSourceBatchingBlacklist.repeatedFields_, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.LogSourceBatchingBlacklist, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.LogSourceBatchingBlacklist.displayName \x3d \x27proto.wireless_android_play_playlog.LogSourceBatchingBlacklist\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nproto.wireless_android_play_playlog.LogSourceBatchingBlacklist.repeatedFields_ \x3d [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.LogSourceBatchingBlacklist.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.LogSourceBatchingBlacklist.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.LogSourceBatchingBlacklist} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.LogSourceBatchingBlacklist.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    logSourceNameList: jspb.Message.getRepeatedField(msg, 1)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.LogSourceBatchingBlacklist}\n */\nproto.wireless_android_play_playlog.LogSourceBatchingBlacklist.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.LogSourceBatchingBlacklist;\n  return proto.wireless_android_play_playlog.LogSourceBatchingBlacklist.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.LogSourceBatchingBlacklist} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.LogSourceBatchingBlacklist}\n */\nproto.wireless_android_play_playlog.LogSourceBatchingBlacklist.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.addLogSourceName(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.LogSourceBatchingBlacklist.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.LogSourceBatchingBlacklist.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.LogSourceBatchingBlacklist} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.LogSourceBatchingBlacklist.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d message.getLogSourceNameList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated string log_source_name \x3d 1;\n * @return {!Array\x3cstring\x3e}\n */\nproto.wireless_android_play_playlog.LogSourceBatchingBlacklist.prototype.getLogSourceNameList \x3d function() {\n  return /** @type {!Array\x3cstring\x3e} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/** @param {Array\x3cstring\x3e|undefined} value */\nproto.wireless_android_play_playlog.LogSourceBatchingBlacklist.prototype.setLogSourceNameList \x3d function(value) {\n  jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {string} value\n * @param {number\x3d} opt_index\n */\nproto.wireless_android_play_playlog.LogSourceBatchingBlacklist.prototype.addLogSourceName \x3d function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\nproto.wireless_android_play_playlog.LogSourceBatchingBlacklist.prototype.clearLogSourceNameList \x3d function() {\n  this.setLogSourceNameList([]);\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.LogSourceBatchingBlacklist}\n */\nproto.wireless_android_play_playlog.LogSourceBatchingBlacklist.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.LogSourceBatchingBlacklist, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.LogResponseDetails \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.LogResponseDetails, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.LogResponseDetails.displayName \x3d \x27proto.wireless_android_play_playlog.LogResponseDetails\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.LogResponseDetails.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.LogResponseDetails.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.LogResponseDetails} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.LogResponseDetails.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    logRequestIndex: jspb.Message.getField(msg, 1),\n    responseAction: jspb.Message.getField(msg, 2)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.LogResponseDetails}\n */\nproto.wireless_android_play_playlog.LogResponseDetails.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.LogResponseDetails;\n  return proto.wireless_android_play_playlog.LogResponseDetails.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.LogResponseDetails} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.LogResponseDetails}\n */\nproto.wireless_android_play_playlog.LogResponseDetails.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setLogRequestIndex(value);\n      break;\n    case 2:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.LogResponseDetails.ResponseAction} */ (reader.readEnum());\n      msg.setResponseAction(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.LogResponseDetails.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.LogResponseDetails.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.LogResponseDetails} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.LogResponseDetails.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.LogResponseDetails.ResponseAction} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.wireless_android_play_playlog.LogResponseDetails.ResponseAction \x3d {\n  RESPONSE_ACTION_UNKNOWN: 0,\n  RETRY_REQUEST_LATER: 1,\n  DELETE_REQUEST: 2\n};\n\n/**\n * optional int32 log_request_index \x3d 1;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.LogResponseDetails.prototype.getLogRequestIndex \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.LogResponseDetails.prototype.setLogRequestIndex \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.LogResponseDetails.prototype.clearLogRequestIndex \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogResponseDetails.prototype.hasLogRequestIndex \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional ResponseAction response_action \x3d 2;\n * @return {!proto.wireless_android_play_playlog.LogResponseDetails.ResponseAction}\n */\nproto.wireless_android_play_playlog.LogResponseDetails.prototype.getResponseAction \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.LogResponseDetails.ResponseAction} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.LogResponseDetails.ResponseAction|undefined} value */\nproto.wireless_android_play_playlog.LogResponseDetails.prototype.setResponseAction \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.LogResponseDetails.prototype.clearResponseAction \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogResponseDetails.prototype.hasResponseAction \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.LogResponseDetails}\n */\nproto.wireless_android_play_playlog.LogResponseDetails.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.LogResponseDetails, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.LogResponse \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, 6, proto.wireless_android_play_playlog.LogResponse.repeatedFields_, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.LogResponse, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.LogResponse.displayName \x3d \x27proto.wireless_android_play_playlog.LogResponse\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nproto.wireless_android_play_playlog.LogResponse.repeatedFields_ \x3d [5];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.LogResponse.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.LogResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.LogResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.LogResponse.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    nextRequestWaitMillis: jspb.Message.getFieldWithDefault(msg, 1, \x22-1\x22),\n    experiments: (f \x3d msg.getExperiments()) \x26\x26 proto.wireless_android_play_playlog.ExperimentIdList.toObject(includeInstance, f),\n    qosTier: (f \x3d msg.getQosTier()) \x26\x26 proto.wireless_android_play_playlog.QosTiersOverride.toObject(includeInstance, f),\n    logSourceBatchingBlacklist: (f \x3d msg.getLogSourceBatchingBlacklist()) \x26\x26 proto.wireless_android_play_playlog.LogSourceBatchingBlacklist.toObject(includeInstance, f),\n    logResponseDetailsList: jspb.Message.toObjectList(msg.getLogResponseDetailsList(),\n    proto.wireless_android_play_playlog.LogResponseDetails.toObject, includeInstance)\n  };\n\n  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,\n      proto.wireless_android_play_playlog.LogResponse.extensions, proto.wireless_android_play_playlog.LogResponse.prototype.getExtension,\n      includeInstance);\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.LogResponse}\n */\nproto.wireless_android_play_playlog.LogResponse.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.LogResponse;\n  return proto.wireless_android_play_playlog.LogResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.LogResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.LogResponse}\n */\nproto.wireless_android_play_playlog.LogResponse.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readInt64String());\n      msg.setNextRequestWaitMillis(value);\n      break;\n    case 2:\n      var value \x3d new proto.wireless_android_play_playlog.ExperimentIdList;\n      reader.readMessage(value,proto.wireless_android_play_playlog.ExperimentIdList.deserializeBinaryFromReader);\n      msg.setExperiments(value);\n      break;\n    case 3:\n      var value \x3d new proto.wireless_android_play_playlog.QosTiersOverride;\n      reader.readMessage(value,proto.wireless_android_play_playlog.QosTiersOverride.deserializeBinaryFromReader);\n      msg.setQosTier(value);\n      break;\n    case 4:\n      var value \x3d new proto.wireless_android_play_playlog.LogSourceBatchingBlacklist;\n      reader.readMessage(value,proto.wireless_android_play_playlog.LogSourceBatchingBlacklist.deserializeBinaryFromReader);\n      msg.setLogSourceBatchingBlacklist(value);\n      break;\n    case 5:\n      var value \x3d new proto.wireless_android_play_playlog.LogResponseDetails;\n      reader.readMessage(value,proto.wireless_android_play_playlog.LogResponseDetails.deserializeBinaryFromReader);\n      msg.addLogResponseDetails(value);\n      break;\n    default:\n      jspb.Message.readBinaryExtension(msg, reader, proto.wireless_android_play_playlog.LogResponse.extensionsBinary,\n        proto.wireless_android_play_playlog.LogResponse.prototype.getExtension,\n        proto.wireless_android_play_playlog.LogResponse.prototype.setExtension);\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.LogResponse.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.LogResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.LogResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.LogResponse.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {string} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeInt64String(\n      1,\n      f\n    );\n  }\n  f \x3d message.getExperiments();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.wireless_android_play_playlog.ExperimentIdList.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getQosTier();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.wireless_android_play_playlog.QosTiersOverride.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getLogSourceBatchingBlacklist();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      4,\n      f,\n      proto.wireless_android_play_playlog.LogSourceBatchingBlacklist.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getLogResponseDetailsList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedMessage(\n      5,\n      f,\n      proto.wireless_android_play_playlog.LogResponseDetails.serializeBinaryToWriter\n    );\n  }\n  jspb.Message.serializeBinaryExtensions(message, writer,\n    proto.wireless_android_play_playlog.LogResponse.extensionsBinary, proto.wireless_android_play_playlog.LogResponse.prototype.getExtension);\n};\n\n\n/**\n * optional int64 next_request_wait_millis \x3d 1;\n * @return {string}\n */\nproto.wireless_android_play_playlog.LogResponse.prototype.getNextRequestWaitMillis \x3d function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \x22-1\x22));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.LogResponse.prototype.setNextRequestWaitMillis \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.LogResponse.prototype.clearNextRequestWaitMillis \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogResponse.prototype.hasNextRequestWaitMillis \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional ExperimentIdList experiments \x3d 2;\n * @return {?proto.wireless_android_play_playlog.ExperimentIdList}\n */\nproto.wireless_android_play_playlog.LogResponse.prototype.getExperiments \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.ExperimentIdList} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.ExperimentIdList, 2));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.ExperimentIdList|undefined} value */\nproto.wireless_android_play_playlog.LogResponse.prototype.setExperiments \x3d function(value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.LogResponse.prototype.clearExperiments \x3d function() {\n  this.setExperiments(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogResponse.prototype.hasExperiments \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional QosTiersOverride qos_tier \x3d 3;\n * @return {?proto.wireless_android_play_playlog.QosTiersOverride}\n */\nproto.wireless_android_play_playlog.LogResponse.prototype.getQosTier \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.QosTiersOverride} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.QosTiersOverride, 3));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.QosTiersOverride|undefined} value */\nproto.wireless_android_play_playlog.LogResponse.prototype.setQosTier \x3d function(value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.LogResponse.prototype.clearQosTier \x3d function() {\n  this.setQosTier(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogResponse.prototype.hasQosTier \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional LogSourceBatchingBlacklist log_source_batching_blacklist \x3d 4;\n * @return {?proto.wireless_android_play_playlog.LogSourceBatchingBlacklist}\n */\nproto.wireless_android_play_playlog.LogResponse.prototype.getLogSourceBatchingBlacklist \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.LogSourceBatchingBlacklist} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.LogSourceBatchingBlacklist, 4));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.LogSourceBatchingBlacklist|undefined} value */\nproto.wireless_android_play_playlog.LogResponse.prototype.setLogSourceBatchingBlacklist \x3d function(value) {\n  jspb.Message.setWrapperField(this, 4, value);\n};\n\n\nproto.wireless_android_play_playlog.LogResponse.prototype.clearLogSourceBatchingBlacklist \x3d function() {\n  this.setLogSourceBatchingBlacklist(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.LogResponse.prototype.hasLogSourceBatchingBlacklist \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * repeated LogResponseDetails log_response_details \x3d 5;\n * @return {!Array\x3c!proto.wireless_android_play_playlog.LogResponseDetails\x3e}\n */\nproto.wireless_android_play_playlog.LogResponse.prototype.getLogResponseDetailsList \x3d function() {\n  return /** @type{!Array\x3c!proto.wireless_android_play_playlog.LogResponseDetails\x3e} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.wireless_android_play_playlog.LogResponseDetails, 5));\n};\n\n\n/** @param {Array\x3c!proto.wireless_android_play_playlog.LogResponseDetails\x3e|undefined} value */\nproto.wireless_android_play_playlog.LogResponse.prototype.setLogResponseDetailsList \x3d function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 5, value);\n};\n\n\n/**\n * @param {!proto.wireless_android_play_playlog.LogResponseDetails\x3d} opt_value\n * @param {number\x3d} opt_index\n * @return {!proto.wireless_android_play_playlog.LogResponseDetails}\n */\nproto.wireless_android_play_playlog.LogResponse.prototype.addLogResponseDetails \x3d function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.wireless_android_play_playlog.LogResponseDetails, opt_index);\n};\n\n\nproto.wireless_android_play_playlog.LogResponse.prototype.clearLogResponseDetailsList \x3d function() {\n  this.setLogResponseDetailsList([]);\n};\n\n\n\n/**\n * The extensions registered with this message class. This is a map of\n * extension field number to fieldInfo object.\n *\n * For example:\n *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n *\n * fieldName contains the JsCompiler renamed field name property so that it\n * works in OPTIMIZED mode.\n *\n * @type {!Object\x3cnumber, jspb.ExtensionFieldInfo\x3e}\n */\nproto.wireless_android_play_playlog.LogResponse.extensions \x3d {};\n\n\n/**\n * The extensions registered with this message class. This is a map of\n * extension field number to fieldInfo object.\n *\n * For example:\n *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }\n *\n * fieldName contains the JsCompiler renamed field name property so that it\n * works in OPTIMIZED mode.\n *\n * @type {!Object\x3cnumber, jspb.ExtensionFieldBinaryInfo\x3e}\n */\nproto.wireless_android_play_playlog.LogResponse.extensionsBinary \x3d {};\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.LogResponse}\n */\nproto.wireless_android_play_playlog.LogResponse.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.LogResponse, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.JsLogResponseExtension \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.JsLogResponseExtension, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.JsLogResponseExtension.displayName \x3d \x27proto.wireless_android_play_playlog.JsLogResponseExtension\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.JsLogResponseExtension.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.JsLogResponseExtension.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.JsLogResponseExtension} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.JsLogResponseExtension.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    suggestedFlushIntervalMillis: jspb.Message.getFieldWithDefault(msg, 1, -1)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.JsLogResponseExtension}\n */\nproto.wireless_android_play_playlog.JsLogResponseExtension.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.JsLogResponseExtension;\n  return proto.wireless_android_play_playlog.JsLogResponseExtension.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.JsLogResponseExtension} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.JsLogResponseExtension}\n */\nproto.wireless_android_play_playlog.JsLogResponseExtension.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setSuggestedFlushIntervalMillis(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.JsLogResponseExtension.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.JsLogResponseExtension.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.JsLogResponseExtension} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.JsLogResponseExtension.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {number} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional int32 suggested_flush_interval_millis \x3d 1;\n * @return {number}\n */\nproto.wireless_android_play_playlog.JsLogResponseExtension.prototype.getSuggestedFlushIntervalMillis \x3d function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, -1));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.JsLogResponseExtension.prototype.setSuggestedFlushIntervalMillis \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.JsLogResponseExtension.prototype.clearSuggestedFlushIntervalMillis \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.JsLogResponseExtension.prototype.hasSuggestedFlushIntervalMillis \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.JsLogResponseExtension}\n */\nproto.wireless_android_play_playlog.JsLogResponseExtension.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.JsLogResponseExtension, data);\n};\n\n\n\n/**\n * A tuple of {field number, class constructor} for the extension\n * field named `jsExtension`.\n * @type {!jspb.ExtensionFieldInfo\x3c!proto.wireless_android_play_playlog.JsLogResponseExtension\x3e}\n */\nproto.wireless_android_play_playlog.jsExtension \x3d new jspb.ExtensionFieldInfo(\n    175237375,\n    {jsExtension: 0},\n    proto.wireless_android_play_playlog.JsLogResponseExtension,\n     /** @type {?function((boolean|undefined),!jspb.Message\x3d): !Object} */ (\n         proto.wireless_android_play_playlog.JsLogResponseExtension.toObject),\n    0);\n\nproto.wireless_android_play_playlog.LogResponse.extensionsBinary[175237375] \x3d new jspb.ExtensionFieldBinaryInfo(\n    proto.wireless_android_play_playlog.jsExtension,\n    jspb.BinaryReader.prototype.readMessage,\n    jspb.BinaryWriter.prototype.writeMessage,\n    proto.wireless_android_play_playlog.JsLogResponseExtension.serializeBinaryToWriter,\n    proto.wireless_android_play_playlog.JsLogResponseExtension.deserializeBinaryFromReader,\n    false);\n// This registers the extension field with the extended class, so that\n// toObject() will function correctly.\nproto.wireless_android_play_playlog.LogResponse.extensions[175237375] \x3d proto.wireless_android_play_playlog.jsExtension;\n\n\n//# sourceURL\x3dhttps://qs/wireless/android/play/playlog/proto/jspb_lib.js\n");

$googDebugFname=undefined;
var $googDebugFname="wireless/android/play/playlog/js/clearcutbase.js";
eval("goog.provide(\x27playlog.clearcut.ClearcutBase\x27);\ngoog.provide(\x27playlog.clearcut.Event\x27);\ngoog.provide(\x27playlog.clearcut.EventType\x27);\n\n\ngoog.require(\x27frameworks.client.analytics.Transport\x27);\ngoog.require(\x27goog.Timer\x27);\ngoog.require(\x27goog.crypt.base64\x27);\ngoog.require(\x27goog.dom\x27);\ngoog.require(\x27goog.events\x27);\ngoog.require(\x27goog.events.Event\x27);\ngoog.require(\x27goog.events.EventTarget\x27);\ngoog.require(\x27goog.functions\x27);\ngoog.require(\x27goog.log\x27);\ngoog.require(\x27goog.math\x27);\ngoog.require(\x27goog.math.ExponentialBackoff\x27);\ngoog.require(\x27goog.net.XhrIo\x27);\ngoog.require(\x27goog.uri.utils\x27);\ngoog.require(\x27goog.userAgent\x27);\ngoog.require(\x27goog.userAgent.product\x27);\ngoog.require(\x27playlog.clearcut.ClientInfoUtilInterface\x27);\ngoog.require(\x27playlog.clearcut.GzipCompressor\x27);\ngoog.require(\x27playlog.clearcut.network\x27);\ngoog.require(\x27proto.experiments.heterodyne.DeviceExperimentIds\x27);\ngoog.require(\x27proto.wireless_android_play_playlog.ClientInfo\x27);\ngoog.require(\x27proto.wireless_android_play_playlog.ExperimentIds\x27);\ngoog.require(\x27proto.wireless_android_play_playlog.JsClientInfo\x27);\ngoog.require(\x27proto.wireless_android_play_playlog.LogEvent\x27);\ngoog.require(\x27proto.wireless_android_play_playlog.LogRequest\x27);\ngoog.require(\x27proto.wireless_android_play_playlog.LogResponse\x27);\n\n\n/**\n * Type definition of a function used by clearcut for making a network request.\n * The function takes three arguments. The first argument is a request\n * parameters which configures the network request and contains data to be used\n * for making the network request. The second argument is a success callback\n * which the function must call when the network request succeeds. The success\n * callback takes an optional parameter which is the response text. The third\n * argument is a failure callback which the function must call when the network\n * request fails. The failure callback takes only one parameter which is the\n * error code with which the network request failed.\n * @typedef {function(!playlog.clearcut.network.RequestParams,\n *     function(?string), function(number))}\n */\nplaylog.clearcut.NetworkIOSend;\n\n\n/**\n * Service to write logs to the Clearcut service.  This class is intended to be\n * general-purpose, usable for any Clearcut LogSource.\n * @param {proto.wireless_android_play_playlog.LogRequest.LogSource} logSource\n *     the log source.\n * @param {function() : ?string} getAuthHeaderValue The handler to get\n *     authorization header value used in First-Party authentication.\n *     See b/17041381.\n * @param {?string} sessionIndex the session index.\n * @param {string\x3d} opt_url the Clearcut api endpoint to post log events.\n *     Defaults to https://play.google.com/log?format\x3djson (prod).\n * @param {boolean\x3d} opt_isServiceWorkerScope if true the logger is being used\n *     in service worker scope.\n * @param {boolean\x3d} opt_disableAutomaticFlush Whether to flush events\n *     periodically. If disabled clients need to call flush manually.\n * @param {boolean\x3d} opt_disableWithCredentials Whether to disable sending\n *     credentials with the request. Default to false.\n *     See {@link goog.net.XhrIo#setWithCredentials}.\n * @param {playlog.clearcut.NetworkIOSend\x3d} opt_networkIOSend An optional method\n *     used for making a network request.\n * @param {string\x3d} opt_pageId the page ID of the delegated user.\n * @struct\n * @constructor\n * @implements {frameworks.client.analytics.Transport}\n * @extends {goog.events.EventTarget}\n *\n * TODO(b/30022501): Take options object instead of many optional parameters\n */\nplaylog.clearcut.ClearcutBase \x3d function(\n    logSource, getAuthHeaderValue, sessionIndex, opt_url,\n    opt_isServiceWorkerScope, opt_disableAutomaticFlush,\n    opt_disableWithCredentials, opt_networkIOSend, opt_pageId) {\n  goog.events.EventTarget.call(this);\n\n  /** @private {!proto.wireless_android_play_playlog.LogRequest.LogSource} */\n  this.logSource_ \x3d logSource;\n\n  this.getAuthHeaderValue_ \x3d getAuthHeaderValue || goog.nullFunction;\n\n  /** @private {!proto.wireless_android_play_playlog.LogRequest} */\n  this.baseLogRequest_ \x3d new proto.wireless_android_play_playlog.LogRequest();\n\n  /** @private {!playlog.clearcut.NetworkIOSend}\n   */\n  this.networkIOSend_ \x3d opt_networkIOSend || playlog.clearcut.network.send;\n\n  /** @private {!Array.\x3c!proto.wireless_android_play_playlog.LogEvent\x3e} */\n  this.pendingEvents_ \x3d [];\n\n  /** @private {string} */\n  this.lastFailedAuth_ \x3d \x27\x27;\n\n  /** @protected {function(): number} */\n  this.uniformRandomFunction \x3d goog.partial(goog.math.uniformRandom, 0.0, 1.0);\n\n  /** @private {?string} */\n  this.clearcutUrl_ \x3d opt_url || null;\n\n  /** @private {?string} */\n  this.sessionIndex_ \x3d sessionIndex || null;\n\n  /** @private {boolean} */\n  this.disableAutomaticFlush_ \x3d opt_disableAutomaticFlush || false;\n\n  /** @private {?string} */\n  this.pageId_ \x3d opt_pageId || null;\n\n  /** @private {boolean} */\n  this.clientSideLogOnlyForDevelopment_ \x3d false;\n\n  /** @private {boolean} */\n  this.useSendBeaconForFinalFlush_ \x3d false;\n\n  /** @private {boolean} */\n  this.useGetRequestForFinalFlush_ \x3d false;\n\n  /** @private {number} */\n  this.startWaitingMs_ \x3d -1;\n\n  /** @private {number} */\n  this.noFlushUntillMs_ \x3d -1;\n\n  /** @private {boolean} */\n  this.clientSpecifiedFlushInterval_ \x3d false;\n\n  /** @private {?proto.wireless_android_play_playlog.ExperimentIds} */\n  this.experimentIds_ \x3d null;\n\n  /** @private @const {goog.log.Logger} */\n  this.logger_ \x3d goog.log.getLogger(\x27playlog.clearcut.ClearcutBase\x27);\n\n  /** @private @const {boolean} */\n  this.withCredentials_ \x3d !opt_disableWithCredentials;\n\n  /** @private {?playlog.clearcut.GzipCompressor} */\n  this.gzipCompressor_ \x3d null;\n\n  /** @private {number} */\n  this.numLogsDroppedSinceLastFlush_ \x3d 0;\n\n  /**\n   * A counter that increments every time a new log event is created.\n   * This value is used to populate the `LogEvent.sequence_position` field\n   * in {@link wireless/android/play/playlog/proto/clientanalytics.proto}\n   * @private {number}\n   */\n  this.sequencePosition_ \x3d 1;\n\n  /** @private {?proto.wireless_android_play_playlog.CollectForDebug} */\n  this.collectForDebug_ \x3d null;\n\n  /** @private {boolean} */\n  this.isServiceWorkerScope_ \x3d opt_isServiceWorkerScope || false;\n\n  // Configure some common properties for every request.\n  // TODO(b/71645801): This information could be derived on the clearcut server,\n  // after which we won\x27t need to explicitly set this information on the client.\n  var cInfo \x3d new proto.wireless_android_play_playlog.ClientInfo();\n  cInfo.setClientType(\n      proto.wireless_android_play_playlog.ClientInfo.ClientType.JS);\n\n  /** @private @const {!proto.wireless_android_play_playlog.ClientInfo} */\n  this.defaultClientInfo_ \x3d cInfo;\n  this.baseLogRequest_.setClientInfo(cInfo);\n  this.baseLogRequest_.setLogSource(this.logSource_);\n\n  /** @private {!goog.math.ExponentialBackoff} */\n  this.flushBackoff_ \x3d new goog.math.ExponentialBackoff(\n      playlog.clearcut.ClearcutBase.DEFAULT_FLUSH_INTERVAL_MS_,\n      playlog.clearcut.ClearcutBase.DEFAULT_FLUSH_MAX_INTERVAL_MS_,\n      playlog.clearcut.ClearcutBase.DEFAULT_FLUSH_BACKOFF_RANDOM_);\n\n  /**\n   * ID of the call once timer that is used to flush logs.\n   * @private {!goog.Timer}\n   */\n  this.flushTimer_ \x3d new goog.Timer(this.flushBackoff_.getValue());\n  this.registerDisposable(this.flushTimer_);\n  goog.events.listen(\n      this.flushTimer_, goog.Timer.TICK, goog.functions.lock(this.flush), false,\n      this);\n\n  /**\n   * Backup timer in case the new call once timer fails.\n   * TODO(cjohn): Remove this backup timer once we\x27re confident it\x27s not needed.\n   * @private {!goog.Timer}\n   */\n  this.backupTimer_ \x3d\n      new goog.Timer(playlog.clearcut.ClearcutBase.BACKUP_FLUSH_INTERVAL_MS_);\n  this.registerDisposable(this.backupTimer_);\n  goog.events.listen(\n      this.backupTimer_, goog.Timer.TICK, goog.functions.lock(this.flush),\n      false, this);\n  if (!this.disableAutomaticFlush_) {\n    this.backupTimer_.start();\n  }\n\n  // If logger is being used in service worker scope do not attempt to\n  // flush on window unload. Window object is not defined in a service worker.\n  if (!this.isServiceWorkerScope_) {\n    // Listen for event to flush the remaining stats before tab is closed.\n    // beforeunload is not supported in Safari iOS, so we need to listen\n    // to either unload or document.pagehide. Note that only one of the three\n    // events will do something. The others, if received, will be noops.\n    goog.events.listen(\n        goog.dom.getWindow(), \x27beforeunload\x27, this.finalFlush, false, this);\n    goog.events.listen(\n        goog.dom.getWindow(), \x27unload\x27, this.finalFlush, false, this);\n    goog.events.listen(document, \x27pagehide\x27, this.finalFlush, false, this);\n  }\n};\ngoog.inherits(playlog.clearcut.ClearcutBase, goog.events.EventTarget);\n\n/**\n * The default flush interval in milliseconds.\n * @private @const {number}\n */\nplaylog.clearcut.ClearcutBase.DEFAULT_FLUSH_INTERVAL_MS_ \x3d 10 * 1000;\n\n/**\n * The default max interval for exponential backoff of the flush in\n * milliseconds.\n * @private @const {number}\n */\nplaylog.clearcut.ClearcutBase.DEFAULT_FLUSH_MAX_INTERVAL_MS_ \x3d 5 * 60 * 1000;\n\n/**\n * The random factor for the exponential backoff. Should be between 0 and 1\n * where 0 means no randomness, 1 means value can be 0X-2X.\n * @private @const {number}\n */\nplaylog.clearcut.ClearcutBase.DEFAULT_FLUSH_BACKOFF_RANDOM_ \x3d .1;\n\n/**\n * The backup flush interval in milliseconds.\n * @private @const {number}\n */\nplaylog.clearcut.ClearcutBase.BACKUP_FLUSH_INTERVAL_MS_ \x3d 10 * 60 * 1000;\n\n/**\n * After receiving this number of log events, the buffered event list\n * starts removing events from the back of the queue to keep the\n * list from growning unbounded.\n * @type {number}\n * @const\n * @private\n */\nplaylog.clearcut.ClearcutBase.BUFFER_SIZE_ \x3d 1000;\n\n\n/**\n * This is the upper bound for the maximum number of events that can be encoded\n * in the URL for a single GET request. This bound should be conservative to\n * ensure that the total length of the URL remains within valid limits.\n * @type {number}\n * @const\n * @private\n */\nplaylog.clearcut.ClearcutBase.MAX_EVENTS_IN_GET_REQUEST_ \x3d 6;\n\n\n/**\n * This is the upper bound for the maximum number of GET requests that can be\n * fired on unload if GET requests are the preferred way to flush final logs.\n * @type {number}\n * @const\n * @private\n */\nplaylog.clearcut.ClearcutBase.MAX_GET_REQUESTS_ \x3d 5;\n\n\n/**\n * This is the upper bound for the maximum number of events that can be sent in\n * a single sendBeacon POST. Chrome enforces a limit of 64kb on sendBeacons for\n * a page. This number is conservative, and we will make multiple sendBeacon\n * requests if more events are still available to be sent.\n * @type {number}\n * @const\n * @private\n */\nplaylog.clearcut.ClearcutBase.MAX_EVENTS_IN_SENDBEACON_REQUEST_ \x3d 32;\n\n\n/**\n * This is the upper bound for the maximum number of sendBeacon requests. We\n * actually expect the browser to start rejecting these long before this limit\n * is hit.\n * @type {number}\n * @const\n * @private\n */\nplaylog.clearcut.ClearcutBase.MAX_SENDBEACON_REQUESTS_ \x3d 10;\n\n\n/**\n * A header to set session index for multi-login (go/first-party-auth-v2).\n * @type {string}\n * @private\n */\nplaylog.clearcut.ClearcutBase.AUTHUSER_HEADER_ \x3d \x27X-Goog-AuthUser\x27;\n\n\n/**\n * A header to set the obfuscated page ID for delegated users.\n * @type {string}\n * @private\n */\nplaylog.clearcut.ClearcutBase.PAGE_ID_HEADER_ \x3d \x27X-Goog-PageId\x27;\n\n/**\n * The fraction of instantiations of this class which will use the new default\n * URL. This is being used to slowly roll out the new default. See also\n * b/69616317\n * @type {number}\n * @private\n */\nplaylog.clearcut.ClearcutBase.NEW_DEFAULT_URL_FRACTION_ \x3d 0.005;\n\n/** @override */\nplaylog.clearcut.ClearcutBase.prototype.disposeInternal \x3d function() {\n  this.finalFlush();\n  playlog.clearcut.ClearcutBase.base(this, \x27disposeInternal\x27);\n};\n\n\n/**\n * Sets the Clearcut api endpoint url where log events are posted.\n * @param {string} url the Clearcut url.\n */\nplaylog.clearcut.ClearcutBase.prototype.setClearcutUrl \x3d function(url) {\n  this.clearcutUrl_ \x3d url;\n};\n\n/**\n * Gets the Clearcut api endpoint url where log events are posted.\n * @return {string} The Clearcut url.\n * @private\n */\nplaylog.clearcut.ClearcutBase.prototype.getClearcutUrl_ \x3d function() {\n  if (!this.clearcutUrl_) {\n    this.clearcutUrl_ \x3d this.defaultUrl_();\n  }\n  return this.clearcutUrl_;\n};\n\n/**\n * Method to be called when a message is ready to be dispatched over the wire.\n * This clearcut implementation will package the message into a `LogEvent`\n * proto and queue up the message for delivery at an appropriate time. Please\n * note that if the supplied message is already a `LogEvent` proto then\n * the message is queued up as is.\n * @param {!jspb.Message} event\n * @override\n */\nplaylog.clearcut.ClearcutBase.prototype.dispatch \x3d function(event) {\n  if (event instanceof proto.wireless_android_play_playlog.LogEvent) {\n    this.log(event);\n  } else {\n    var logEvent \x3d new proto.wireless_android_play_playlog.LogEvent();\n    logEvent.setSourceExtensionJs(event.serialize());\n    this.log(logEvent);\n  }\n};\n\n\n/**\n * Sets the client info to send to Clearcut for every log request.\n * @param {!proto.wireless_android_play_playlog.ClientInfo} cInfo\n *     The client info to send to Clearcut for every log request.\n */\nplaylog.clearcut.ClearcutBase.prototype.setClearcutClientInfo \x3d function(\n    cInfo) {\n  if (!cInfo.getClientType()) {\n    cInfo.setClientType(\n        proto.wireless_android_play_playlog.ClientInfo.ClientType.JS);\n  }\n  this.baseLogRequest_.setClientInfo(cInfo);\n};\n\n\n/**\n * Sets the name of the logsource that should be included in all subsequent\n * event sent to clearcut. This is an alternative to specifying a Logsouce enum.\n * @param {string} logSourceName\n */\nplaylog.clearcut.ClearcutBase.prototype.setLogSourceName \x3d function(\n    logSourceName) {\n  this.baseLogRequest_.setLogSourceName(logSourceName);\n};\n\n\n/**\n * Gets the default client info for every log request sends from JS client.\n * @return {!proto.wireless_android_play_playlog.ClientInfo}\n */\nplaylog.clearcut.ClearcutBase.prototype.getDefaultClearcutClientInfo \x3d\n    function() {\n  return this.defaultClientInfo_;\n};\n\n/**\n * Sets the opaque experiment ids on this logger. All events will include these\n * experiment ids.\n * @param {!Array\x3cstring\x3e} opaqueExperimentIds\n *    Opaque experiment ids, likely from Heterodyne.\n */\nplaylog.clearcut.ClearcutBase.prototype.setOpaqueExperimentIds \x3d function(\n    opaqueExperimentIds) {\n  if (!this.experimentIds_) {\n    this.experimentIds_ \x3d\n        new proto.wireless_android_play_playlog.ExperimentIds();\n  }\n  this.experimentIds_.setEncryptedBlobList(opaqueExperimentIds);\n};\n\n/**\n * Clears the opaque experiment ids on this logger.\n */\nplaylog.clearcut.ClearcutBase.prototype.clearOpaqueExperimentIds \x3d\n    function() {\n  if (this.experimentIds_) {\n    this.experimentIds_.clearEncryptedBlobList();\n  }\n};\n\n/**\n * Sets the clear experiment ids on this logger. All events will include these\n * experiment ids.\n * @param {proto.experiments.heterodyne.DeviceExperimentIds} clearExperimentIds\n *    Experiment ids in the clear, likely from a request based diversion.\n */\nplaylog.clearcut.ClearcutBase.prototype.setClearExperimentIds \x3d function(\n    clearExperimentIds) {\n  if (clearExperimentIds) {\n    if (!this.experimentIds_) {\n      this.experimentIds_ \x3d\n          new proto.wireless_android_play_playlog.ExperimentIds();\n    }\n    this.experimentIds_.setClearBlobJs(clearExperimentIds.serialize());\n  } else {\n    if (this.experimentIds_) {\n      this.experimentIds_.clearClearBlobJs();\n    }\n  }\n};\n\n/**\n * When set to true no actual logging XHR will be emitted. Logging is still\n * observable via a goog.log call.\n * @param {boolean} clientSideLogOnly\n */\nplaylog.clearcut.ClearcutBase.prototype.setClientSideLogOnlyForDevelopment \x3d\n    function(clientSideLogOnly) {\n  this.clientSideLogOnlyForDevelopment_ \x3d clientSideLogOnly;\n};\n\n/**\n * Set the debug collection state for this logger.\n * @param {!proto.wireless_android_play_playlog.CollectForDebug} collectForDebug\n *    Debug collection state.\n */\nplaylog.clearcut.ClearcutBase.prototype.setCollectForDebug \x3d function(\n    collectForDebug) {\n  this.collectForDebug_ \x3d collectForDebug;\n};\n\n/**\n * When a real compressor is provided, POSTs requests will have their body\n * compressed using gzip.\n * @param {!playlog.clearcut.GzipCompressor} gzipCompressor\n */\nplaylog.clearcut.ClearcutBase.prototype.setGzipCompressor \x3d function(\n    gzipCompressor) {\n  this.gzipCompressor_ \x3d gzipCompressor;\n};\n\n\n/**\n * Sets a concrete implementation of the `ClientInfoUtilInterface` which\n * will be used to attach additional data to the client information logged with\n * every event.\n * @param {!playlog.clearcut.ClientInfoUtilInterface} clientInfoUtil\n */\nplaylog.clearcut.ClearcutBase.prototype.setClientInfo \x3d function(\n    clientInfoUtil) {\n  clientInfoUtil.addClientInfo(\n      this.defaultClientInfo_, this.isServiceWorkerScope_);\n  this.baseLogRequest_.setClientInfo(this.defaultClientInfo_);\n};\n\n\n/**\n * When set to true, sendBeacon will be used, if the browser supports it for\n * the final flush. This is used over useGetRequestForFinalFlush, if it is also\n * enabled.\n * @param {boolean} useSendBeaconForFinalFlush\n */\nplaylog.clearcut.ClearcutBase.prototype.setUseSendBeaconForFinalFlush \x3d\n    function(useSendBeaconForFinalFlush) {\n  // Note: sendBeacon requests with attached cookies are supported since FF\x3e\x3d45.\n  this.useSendBeaconForFinalFlush_ \x3d useSendBeaconForFinalFlush \x26\x26\n      !!goog.dom.getWindow().navigator.sendBeacon \x26\x26\n      (goog.userAgent.product.CHROME ||\n       (goog.userAgent.product.FIREFOX \x26\x26\n        goog.userAgent.isVersionOrHigher(45)));\n};\n\n/**\n * Sets the build label on the default clearcut client info which is used for\n * future requests.\n * @param {string} buildLabel\n */\nplaylog.clearcut.ClearcutBase.prototype.setBuildLabel \x3d function(buildLabel) {\n  var clientInfo \x3d this.getDefaultClearcutClientInfo();\n  var jsClientInfo \x3d clientInfo.getJsClientInfo();\n  if (!jsClientInfo) {\n    jsClientInfo \x3d new proto.wireless_android_play_playlog.JsClientInfo();\n  }\n  jsClientInfo.setBuildLabel(buildLabel);\n  clientInfo.setJsClientInfo(jsClientInfo);\n  this.setClearcutClientInfo(clientInfo);\n};\n\n/**\n * When set to true GET requests will be used to flush pending log events during\n * the browser unload event or navigating away from a page. Since this could add\n * latency to your web application, please see the description of the method\n * `flushWithGetRequest_` to understand the trade-offs before setting this\n * flag to true. Ideally this should only be set by clients who really can\x27t\n * afford to lose even small amounts of logged data (experimental launches\n * or prototypes under detailed evaluation). Please note that GET requests will\n * never be used for flushing logs unless this method is explicitly set to true.\n * @param {boolean} useGetRequestForFinalFlush\n */\nplaylog.clearcut.ClearcutBase.prototype.setUseGetRequestForFinalFlush \x3d\n    function(useGetRequestForFinalFlush) {\n  this.useGetRequestForFinalFlush_ \x3d useGetRequestForFinalFlush;\n};\n\n\n/**\n * Sets the interval for flushing events. The default is\n * `DEFAULT_FLUSH_INTERVAL_MS_`. The lowest supported value is 1\n * millisecond. If 0 or a negative value is requested, set the interval to 1 ms\n * (similar behavior to goog.Timer).\n * @param {number} flushIntervalMs The interval between flushes in milliseconds.\n */\nplaylog.clearcut.ClearcutBase.prototype.setFlushIntervalMs \x3d function(\n    flushIntervalMs) {\n  this.clientSpecifiedFlushInterval_ \x3d true;\n  this.doUpdateFlushIntervalMs_(flushIntervalMs);\n};\n\n/**\n * Internal function that sets the interval for flushing events. Note that the\n * requested value is ignored if the clientSpecifiedFlushInterval_ is true.\n * The default is `DEFAULT_FLUSH_INTERVAL_MS_`. The lowest supported value\n * is 1 millisecond. If 0 or a negative value is requested, set the interval to\n * 1 ms (similar behavior to goog.Timer).\n * @param {number} flushIntervalMs The interval between flushes in milliseconds.\n * @private\n */\nplaylog.clearcut.ClearcutBase.prototype.setFlushIntervalInternalMs_ \x3d function(\n    flushIntervalMs) {\n  if (this.clientSpecifiedFlushInterval_) {\n    // If our client has specified the flush interval to use, that trumps other\n    // ways of setting the interval.\n    return;\n  }\n  this.doUpdateFlushIntervalMs_(flushIntervalMs);\n};\n\n/**\n * Does the actual update for the flush interval. Called by both the public and\n * internal functions.\n * @param {number} flushIntervalMs The interval between flushes in milliseconds.\n * @private\n */\nplaylog.clearcut.ClearcutBase.prototype.doUpdateFlushIntervalMs_ \x3d function(\n    flushIntervalMs) {\n  flushIntervalMs \x3d flushIntervalMs \x3c 1 ? 1 : flushIntervalMs;\n  this.flushBackoff_ \x3d new goog.math.ExponentialBackoff(\n      flushIntervalMs,\n      playlog.clearcut.ClearcutBase.DEFAULT_FLUSH_MAX_INTERVAL_MS_,\n      playlog.clearcut.ClearcutBase.DEFAULT_FLUSH_BACKOFF_RANDOM_);\n\n  this.flushTimer_.setInterval(this.flushBackoff_.getValue());\n};\n\n\n/**\n * Returns the interval for flushing events.\n * @return {number} The interval for flushing events, in milliseconds.\n */\nplaylog.clearcut.ClearcutBase.prototype.getFlushIntervalMs \x3d function() {\n  return this.flushTimer_.getInterval();\n};\n\n/**\n * Does a backoff of the flush timer.\n * @private\n */\nplaylog.clearcut.ClearcutBase.prototype.backoffFlushInterval_ \x3d function() {\n  this.flushBackoff_.backoff();\n  this.flushTimer_.setInterval(this.flushBackoff_.getValue());\n};\n\n/**\n * Does a reset of the flush timer.\n * @private\n */\nplaylog.clearcut.ClearcutBase.prototype.resetFlushInterval_ \x3d function() {\n  this.flushBackoff_.reset();\n  this.flushTimer_.setInterval(this.flushBackoff_.getValue());\n};\n\n/**\n * Logs a copy of the event, potentially triggering a flush of queued events.\n * This function also sets the event_time_ms field to goog.now().\n * @param {!proto.wireless_android_play_playlog.LogEvent} evt the event to log.\n */\nplaylog.clearcut.ClearcutBase.prototype.log \x3d function(evt) {\n  evt \x3d evt.cloneMessage();\n  evt.setSequencePosition(this.sequencePosition_++);\n\n  if (!evt.getEventTimeMs()) {\n    evt.setEventTimeMs(goog.now().toString());\n  }\n\n  if (this.experimentIds_) {\n    evt.setExperimentIds(this.experimentIds_.cloneMessage());\n  }\n  this.addEventToPending_(evt);\n};\n\n/**\n * Adds an event to the pending event list and starts the flush timer if needed.\n * @param {!proto.wireless_android_play_playlog.LogEvent} evt the event to log.\n * @private\n */\nplaylog.clearcut.ClearcutBase.prototype.addEventToPending_ \x3d function(evt) {\n  while (this.pendingEvents_.length \x3e\x3d\n         playlog.clearcut.ClearcutBase.BUFFER_SIZE_) {\n    // Throw away events if we\x27ve logged too many since the\n    // last flush.\n    // TODO(jsw): Instead of throwing these away now, just trigger a flush.\n    // Then, we can worry about whether to throw away the events only if we get\n    // encounter a retriable server error.  I would like to understand the\n    // initial motivation for doing it this way, and make sure we are not\n    // worried about the possibility of overloading the server in case of a\n    // spammy logging bug on the client.\n    this.pendingEvents_.shift();\n    ++this.numLogsDroppedSinceLastFlush_;\n  }\n\n  this.pendingEvents_.push(evt);\n  this.dispatchEvent(new playlog.clearcut.Event(evt));\n\n  this.maybeStartFlushTimer_();\n};\n\n/**\n * Start flush timer if we don\x27t currently have one.\n * @private\n */\nplaylog.clearcut.ClearcutBase.prototype.maybeStartFlushTimer_ \x3d function() {\n  if (!this.disableAutomaticFlush_ \x26\x26 !this.flushTimer_.enabled) {\n    this.flushTimer_.start();\n  }\n};\n\n/**\n * Clears the flush timer if we have it and sets the ID back to the invalid ID\n * so that next time we get a log request we restart the timer.\n * @private\n */\nplaylog.clearcut.ClearcutBase.prototype.clearFlushTimer_ \x3d function() {\n  if (this.flushTimer_.enabled) {\n    this.flushTimer_.stop();\n  }\n};\n\n/**\n * Flushes pending events.  This is a no-op if no events are pending.\n *\n * The vast majority of clients should not be calling this method.  Logs are\n * normally flushed once every `DEFAULT_FLUSH_INTERVAL_MS_`, which should\n * generally be sufficient.\n * Careless use of this method (particularly if it is called more frequently\n * than the default values) can DoS the Clearcut service and break logging for\n * other clients.  Contact clearcut-eng@google.com first.\n * @param {function()\x3d} opt_successCallback An optional success callback.\n * @param {function(frameworks.client.analytics.Transport.FlushFailureType,\n *     number\x3d)\x3d} opt_failureCallback An optional failure callback.  There will\n *     always be a FlushFailureType provided.  For some failure types, there may\n *     be additional failure context in the second arg.  See the documentation\n *     on the various failure types for details.\n * @override\n */\nplaylog.clearcut.ClearcutBase.prototype.flush \x3d function(\n    opt_successCallback, opt_failureCallback) {\n  if (this.pendingEvents_.length \x3d\x3d 0) {\n    opt_successCallback \x26\x26 opt_successCallback();\n    return;\n  }\n\n  var now \x3d goog.now();\n  // If we are after the no flush until time or we are before the time we\n  // received the server response (aka user set clock back in time), then allow\n  // the flush, otherwise go into this if and don\x27t flush.\n  if (this.noFlushUntillMs_ \x3e now \x26\x26 this.startWaitingMs_ \x3c now) {\n    goog.log.info(this.logger_, \x27Not flushing because server requested delay.\x27);\n    opt_failureCallback \x26\x26\n        opt_failureCallback(\n            frameworks.client.analytics.Transport.FlushFailureType.THROTTLED);\n    return;\n  }\n\n  var request \x3d this.baseLogRequest_.cloneMessage();\n  request.setRequestTimeMs(goog.now().toString());\n  request.setLogEventList(this.pendingEvents_);\n  request.setLogEventDroppedCount(this.numLogsDroppedSinceLastFlush_);\n\n  if (this.collectForDebug_) {\n    request.setCollectForDebug(this.collectForDebug_);\n  }\n\n  // This auth header is required in order to prevent XSRF attacks.\n  // See b/17041381\n  var extraHeaders \x3d {};\n  var auth \x3d this.getAuthHeaderValue_();\n  if (auth) {\n    extraHeaders[\x27Authorization\x27] \x3d auth;\n  }\n  var uri \x3d this.getClearcutUrl_();\n  if (this.sessionIndex_) {\n    extraHeaders[playlog.clearcut.ClearcutBase.AUTHUSER_HEADER_] \x3d\n        this.sessionIndex_;\n    uri \x3d goog.uri.utils.appendParam(uri, \x27authuser\x27, this.sessionIndex_);\n  }\n  if (this.pageId_) {\n    extraHeaders[playlog.clearcut.ClearcutBase.PAGE_ID_HEADER_] \x3d this.pageId_;\n    uri \x3d goog.uri.utils.appendParam(uri, \x27pageId\x27, this.pageId_);\n  }\n\n  // Do not fire the XHR if the authentication token has been used in a previous\n  // unsuccessful and unauthorized request.\n  if (auth \x26\x26 this.lastFailedAuth_ \x3d\x3d auth) {\n    goog.log.info(this.logger_, \x27XHR with unauthorized request not retried\x27);\n    opt_failureCallback \x26\x26\n        opt_failureCallback(frameworks.client.analytics.Transport\n                                .FlushFailureType.STALE_AUTH_TOKEN);\n    return;\n  }\n\n  goog.log.info(this.logger_, \x27Flushing log to clearcut.\x27);\n  this.clearPendingEvents_();\n\n  // Do not fire the XHR if the client does not prefer it (local development).\n  // Print the actual content of the request to dev console.\n  if (this.clientSideLogOnlyForDevelopment_) {\n    goog.log.info(this.logger_, request.serialize());\n    if (extraHeaders) {\n      goog.log.info(this.logger_, JSON.stringify(extraHeaders));\n    }\n    opt_successCallback \x26\x26 opt_successCallback();\n    return;\n  } else {\n    var body \x3d request.serialize();\n    var bodyType \x3d playlog.clearcut.network.RequestParams.bodyType.STRING;\n\n    if (this.gzipCompressor_ \x26\x26 this.gzipCompressor_.isSupported()) {\n      extraHeaders[\x27Content-Encoding\x27] \x3d \x27gzip\x27;\n      extraHeaders[goog.net.XhrIo.CONTENT_TYPE_HEADER] \x3d \x27application/binary\x27;\n      body \x3d this.gzipCompressor_.compress(body);\n      bodyType \x3d playlog.clearcut.network.RequestParams.bodyType.BYTE_ARRAY;\n    }\n\n    var params \x3d /** @type{!playlog.clearcut.network.RequestParams} */ ({\n      url: uri,\n      body: body,\n      bodyType: bodyType,\n      requestHeaders: extraHeaders,\n      requestType: \x27POST\x27,\n      withCredentials: this.withCredentials_\n    });\n\n    var successFn \x3d goog.bind(function(response) {\n      this.handleSuccess_(response);\n      opt_successCallback \x26\x26 opt_successCallback();\n    }, this);\n    var failureFn \x3d goog.bind(function(errorCode) {\n      this.handleFailure_(request.getLogEventList(), errorCode, auth);\n      opt_failureCallback \x26\x26\n          opt_failureCallback(\n              frameworks.client.analytics.Transport.FlushFailureType\n                  .NET_SEND_FAILED,\n              errorCode);\n    }, this);\n\n    this.networkIOSend_(params, successFn, failureFn);\n  }\n};\n\n/**\n * Clears the pending events and the flush timer.\n * @private\n */\nplaylog.clearcut.ClearcutBase.prototype.clearPendingEvents_ \x3d function() {\n  this.pendingEvents_ \x3d [];\n  // Since we no longer have pending events, no need for a flush timer. It will\n  // get re-created when an event is requested to be logged.\n  this.clearFlushTimer_();\n  this.numLogsDroppedSinceLastFlush_ \x3d 0;\n};\n\n/**\n * Flushes pending events using either a GET or POST request based on the setup\n * flag. This function should be called during the termination lifecycle of the\n * logging library to ensure that any final pending events are flushed.\n */\nplaylog.clearcut.ClearcutBase.prototype.finalFlush \x3d function() {\n  if (!this.clientSideLogOnlyForDevelopment_) {\n    if (this.useSendBeaconForFinalFlush_) {\n      this.flushWithSendBeacon_();\n    }\n\n    if (this.useGetRequestForFinalFlush_) {\n      this.flushWithGetRequest_();\n    }\n\n    this.flush();\n  }\n};\n\n\n/**\n * Flushes pending events using sendBeacon.\n * @private\n */\nplaylog.clearcut.ClearcutBase.prototype.flushWithSendBeacon_ \x3d function() {\n  goog.log.info(this.logger_, \x27Flushing log using sendBeacon.\x27);\n  this.segmentedFlush_(\n      playlog.clearcut.ClearcutBase.MAX_EVENTS_IN_SENDBEACON_REQUEST_,\n      playlog.clearcut.ClearcutBase.MAX_SENDBEACON_REQUESTS_,\n      function(uri, req) {\n        uri \x3d goog.uri.utils.appendParam(uri, \x27format\x27, \x27json\x27);\n        return goog.dom.getWindow().navigator.sendBeacon(uri, req.serialize());\n      });\n};\n\n\n/**\n * Sends a request using an Image.  This function is mocked in tests.\n * @param {string} uri\n * @private\n */\nplaylog.clearcut.ClearcutBase.prototype.sendGetRequest_ \x3d function(uri) {\n  new Image().src \x3d uri;\n};\n\n\n/**\n * Flushes pending events using a GET request instead of a POST request. Using a\n * GET request guarantees that the request will not be canceled by the browser\n * prematurely. However please note that this could mean that the browser will\n * have to wait for a response before navigating away from the page or closing.\n * Additionally, since all the information needed for the request must be\n * encoded in the URL we limit the number of events that can be sent per request\n * to keep the URL length within reasonable limits. This means multiple GET\n * requests will be fired based on the constants MAX_EVENTS_PER_GET_REQUEST_ and\n * the number of pending events. If the MAX_GET_REQUESTS_ limit is\n * reached the remaining events will be flushed optimistically using a POST.\n * @private\n */\nplaylog.clearcut.ClearcutBase.prototype.flushWithGetRequest_ \x3d function() {\n  goog.log.info(this.logger_, \x27Flushing log using Image GET.\x27);\n  this.segmentedFlush_(\n      playlog.clearcut.ClearcutBase.MAX_EVENTS_IN_GET_REQUEST_,\n      playlog.clearcut.ClearcutBase.MAX_GET_REQUESTS_,\n      goog.bind(function(uri, req) {\n        this.sendGetRequest_(goog.uri.utils.appendParams(uri,\n            \x27format\x27, \x27base64json\x27,\n            \x27p\x27, goog.crypt.base64.encodeString(req.serialize(), true)));\n\n        return true;\n      }, this));\n};\n\n\n/**\n * Attempts to flush remaining events using the given function. This is used\n * for flushing events via an Image request, or sendBeacon.\n *\n * @param {number} maxEventsPerRequest Maximum number of events to send in a\n *     single request.\n * @param {number} maxRequests The maximum number of requests to break up into.\n * @param {function(string, !proto.wireless_android_play_playlog.LogRequest)} flushFn\n * @private\n */\nplaylog.clearcut.ClearcutBase.prototype.segmentedFlush_ \x3d\n    function(maxEventsPerRequest, maxRequests, flushFn) {\n  if (this.pendingEvents_.length \x3d\x3d 0) {\n    return;\n  }\n\n  var uri \x3d goog.uri.utils.removeParam(this.getClearcutUrl_(), \x27format\x27);\n  uri \x3d goog.uri.utils.appendParams(uri,\n      \x27auth\x27, this.getAuthHeaderValue_(),\n      \x27authuser\x27, this.sessionIndex_ || \x270\x27);\n\n  for (var i \x3d 0; i \x3c maxRequests \x26\x26\n       this.pendingEvents_.length; ++i) {\n    var events \x3d this.pendingEvents_.slice(0, maxEventsPerRequest);\n\n    var req \x3d this.baseLogRequest_.cloneMessage();\n    req.setRequestTimeMs(goog.now().toString());\n    req.setLogEventList(events);\n\n    // If we failed to send, break out, we\x27ll try other flush techniques.\n    if (!flushFn(uri, req)) {\n      break;\n    }\n\n    // Otherwise, we succeeded!\n    this.pendingEvents_ \x3d this.pendingEvents_.slice(events.length);\n  }\n};\n\n\n/**\n * Checks whether the supplied `errorCode` is a retryable error.\n * The following errors are considered retryable.\n * 1. Status 5XX: All server side errors.\n * 2. Status 401: Auth failure, since they can be retried with new credentials.\n * 3. Status   0: Network failure, since it indicates intermittent connectivity.\n *\n * @param {number} errorCode The error code to check.\n * @return {boolean} Whether the supplied error code is retryable.\n * @private\n */\nplaylog.clearcut.ClearcutBase.prototype.isRetryable_ \x3d function(errorCode) {\n  return (500 \x3c\x3d errorCode \x26\x26 errorCode \x3c 600) || errorCode \x3d\x3d 401 ||\n      errorCode \x3d\x3d 0;\n};\n\n/**\n * Adds list of events to pending events.\n * @param {!Array.\x3c!proto.wireless_android_play_playlog.LogEvent\x3e} eventList\n *     The log events to prepend to the pending events.\n * @private\n */\nplaylog.clearcut.ClearcutBase.prototype.prependEventsToPending_ \x3d function(\n    eventList) {\n  // Prepend this request\x27s events to the pending events so we don\x27t lose\n  // them.\n  this.pendingEvents_ \x3d eventList.concat(this.pendingEvents_);\n  this.maybeStartFlushTimer_();\n};\n\n/**\n * Failed response handler.\n * @param {!Array.\x3c!proto.wireless_android_play_playlog.LogEvent\x3e} eventList\n *     The log events sent in the corresponding request.\n * @param {number} errorCode Response status code when request failed.\n * @param {?string} auth The authorization token used in the request or null if\n *     no authorization was used.\n * @private\n */\nplaylog.clearcut.ClearcutBase.prototype.handleFailure_ \x3d function(\n    eventList, errorCode, auth) {\n  this.backoffFlushInterval_();\n  if (errorCode \x3d\x3d 401 \x26\x26 auth) {\n    this.lastFailedAuth_ \x3d auth;\n  }\n  if (this.isRetryable_(errorCode)) {\n    this.prependEventsToPending_(eventList);\n  }\n\n  goog.log.warning(this.logger_, \x27Flush failed. Status code: \x27 + errorCode);\n};\n\n/**\n * Successful response handler.\n * @param {?string} responseText The response text from the request.\n * @private\n */\nplaylog.clearcut.ClearcutBase.prototype.handleSuccess_ \x3d function(\n    responseText) {\n  this.resetFlushInterval_();\n  if (responseText) {\n    var parsedProto;\n    try {\n      // TODO(cjohn): Is this escaping support needed?\n      var deserializedResponse \x3d\n          /** @type {Array} */ (\n              JSON.parse(responseText.replace(\x27)]}\\\x27\\n\x27, \x27\x27)));\n      parsedProto \x3d new proto.wireless_android_play_playlog.LogResponse(\n          deserializedResponse);\n    } catch (e) {\n      goog.log.warning(this.logger_, \x27Response parse failed: \x27 + e);\n    }\n    if (parsedProto) {\n      var nextWaitMillis \x3d parsedProto.getNextRequestWaitMillis();\n      nextWaitMillis \x3d Number(nextWaitMillis);\n      if (nextWaitMillis \x3e 0) {\n        this.startWaitingMs_ \x3d goog.now();\n        this.noFlushUntillMs_ \x3d this.startWaitingMs_ + nextWaitMillis;\n      }\n      var jsLogExtension \x3d parsedProto.getExtension(\n          proto.wireless_android_play_playlog.jsExtension);\n      if (jsLogExtension) {\n        var suggestedFlush \x3d jsLogExtension.getSuggestedFlushIntervalMillis();\n        if (suggestedFlush !\x3d -1) {\n          this.setFlushIntervalInternalMs_(suggestedFlush);\n        }\n      }\n    }\n  }\n};\n\n/**\n * Computes the default Clearcut URL.\n * @returns {string}\n * @private\n */\nplaylog.clearcut.ClearcutBase.prototype.defaultUrl_ \x3d function() {\n  const useNewDefault \x3d this.uniformRandomFunction() \x3c\n      playlog.clearcut.ClearcutBase.NEW_DEFAULT_URL_FRACTION_;\n  return useNewDefault ? \x27https://www.google.com/log?format\x3djson\x27 :\n                         \x27https://play.google.com/log?format\x3djson\x27;\n};\n\n/**\n * Clearcut event types.\n * @enum {string}\n */\nplaylog.clearcut.EventType \x3d {\n  EVENT_LOGGED: \x27event-logged\x27\n};\n\n\n\n/**\n * @param {proto.wireless_android_play_playlog.LogEvent} evt the event to log.\n * @extends {goog.events.Event}\n * @constructor\n */\nplaylog.clearcut.Event \x3d function(evt) {\n  this.logEvt_ \x3d evt;\n  this.type \x3d playlog.clearcut.EventType.EVENT_LOGGED;\n};\ngoog.inherits(playlog.clearcut.Event, goog.events.Event);\n\n\n/**\n * @return {proto.wireless_android_play_playlog.LogEvent} evt the event to log.\n */\nplaylog.clearcut.Event.prototype.getLogEvent \x3d function() {\n  return this.logEvt_;\n};\n\n//# sourceURL\x3dhttps://qs/wireless/android/play/playlog/js/clearcutbase.js\n");

$googDebugFname=undefined;
var $googDebugFname="frameworks/client/logging/proto/web_error_log_event.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.frameworks.client.logging.WebErrorLogEvent\x27);\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.Message\x27);\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.frameworks.client.logging.WebErrorLogEvent \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.frameworks.client.logging.WebErrorLogEvent, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.frameworks.client.logging.WebErrorLogEvent.displayName \x3d \x27proto.frameworks.client.logging.WebErrorLogEvent\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.frameworks.client.logging.WebErrorLogEvent.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.frameworks.client.logging.WebErrorLogEvent.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.frameworks.client.logging.WebErrorLogEvent} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.frameworks.client.logging.WebErrorLogEvent.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    stackTrace: jspb.Message.getField(msg, 1),\n    lineNumber: jspb.Message.getField(msg, 2),\n    errorMessage: jspb.Message.getField(msg, 3),\n    namespace: jspb.Message.getField(msg, 4)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.frameworks.client.logging.WebErrorLogEvent}\n */\nproto.frameworks.client.logging.WebErrorLogEvent.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.frameworks.client.logging.WebErrorLogEvent;\n  return proto.frameworks.client.logging.WebErrorLogEvent.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.frameworks.client.logging.WebErrorLogEvent} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.frameworks.client.logging.WebErrorLogEvent}\n */\nproto.frameworks.client.logging.WebErrorLogEvent.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setStackTrace(value);\n      break;\n    case 2:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setLineNumber(value);\n      break;\n    case 3:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setErrorMessage(value);\n      break;\n    case 4:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setNamespace(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.frameworks.client.logging.WebErrorLogEvent.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.frameworks.client.logging.WebErrorLogEvent.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.frameworks.client.logging.WebErrorLogEvent} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.frameworks.client.logging.WebErrorLogEvent.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string stack_trace \x3d 1;\n * @return {?string}\n */\nproto.frameworks.client.logging.WebErrorLogEvent.prototype.getStackTrace \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?string|undefined} value */\nproto.frameworks.client.logging.WebErrorLogEvent.prototype.setStackTrace \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.frameworks.client.logging.WebErrorLogEvent.prototype.clearStackTrace \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.frameworks.client.logging.WebErrorLogEvent.prototype.hasStackTrace \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional int32 line_number \x3d 2;\n * @return {?number}\n */\nproto.frameworks.client.logging.WebErrorLogEvent.prototype.getLineNumber \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?number|undefined} value */\nproto.frameworks.client.logging.WebErrorLogEvent.prototype.setLineNumber \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.frameworks.client.logging.WebErrorLogEvent.prototype.clearLineNumber \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.frameworks.client.logging.WebErrorLogEvent.prototype.hasLineNumber \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional string error_message \x3d 3;\n * @return {?string}\n */\nproto.frameworks.client.logging.WebErrorLogEvent.prototype.getErrorMessage \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?string|undefined} value */\nproto.frameworks.client.logging.WebErrorLogEvent.prototype.setErrorMessage \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.frameworks.client.logging.WebErrorLogEvent.prototype.clearErrorMessage \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.frameworks.client.logging.WebErrorLogEvent.prototype.hasErrorMessage \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional int32 namespace \x3d 4;\n * @return {?number}\n */\nproto.frameworks.client.logging.WebErrorLogEvent.prototype.getNamespace \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?number|undefined} value */\nproto.frameworks.client.logging.WebErrorLogEvent.prototype.setNamespace \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.frameworks.client.logging.WebErrorLogEvent.prototype.clearNamespace \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.frameworks.client.logging.WebErrorLogEvent.prototype.hasNamespace \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.frameworks.client.logging.WebErrorLogEvent}\n */\nproto.frameworks.client.logging.WebErrorLogEvent.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.frameworks.client.logging.WebErrorLogEvent, data);\n};\n\n\n\n//# sourceURL\x3dhttps://qs/frameworks/client/logging/proto/web_error_log_event.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="logs/proto/gws/js/cache_overflow_log.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27search.logging.CacheContentMapEntry\x27);\ngoog.provide(\x27search.logging.CacheOverflow\x27);\ngoog.provide(\x27search.logging.CacheOverflow.EvictionPriority\x27);\ngoog.provide(\x27search.logging.CacheOverflow.StorageType\x27);\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.Message\x27);\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nsearch.logging.CacheOverflow \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, search.logging.CacheOverflow.repeatedFields_, null);\n};\ngoog.inherits(search.logging.CacheOverflow, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  search.logging.CacheOverflow.displayName \x3d \x27search.logging.CacheOverflow\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nsearch.logging.CacheOverflow.repeatedFields_ \x3d [5];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nsearch.logging.CacheOverflow.prototype.toObject \x3d function(opt_includeInstance) {\n  return search.logging.CacheOverflow.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!search.logging.CacheOverflow} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nsearch.logging.CacheOverflow.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    storageType: jspb.Message.getField(msg, 1),\n    evictionCausePriority: jspb.Message.getField(msg, 2),\n    evictionCauseNamespace: jspb.Message.getField(msg, 3),\n    evictionCauseWeight: jspb.Message.getField(msg, 4),\n    mapElementList: jspb.Message.toObjectList(msg.getMapElementList(),\n    search.logging.CacheContentMapEntry.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!search.logging.CacheOverflow}\n */\nsearch.logging.CacheOverflow.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new search.logging.CacheOverflow;\n  return search.logging.CacheOverflow.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!search.logging.CacheOverflow} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!search.logging.CacheOverflow}\n */\nsearch.logging.CacheOverflow.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {!search.logging.CacheOverflow.StorageType} */ (reader.readEnum());\n      msg.setStorageType(value);\n      break;\n    case 2:\n      var value \x3d /** @type {!search.logging.CacheOverflow.EvictionPriority} */ (reader.readEnum());\n      msg.setEvictionCausePriority(value);\n      break;\n    case 3:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setEvictionCauseNamespace(value);\n      break;\n    case 4:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setEvictionCauseWeight(value);\n      break;\n    case 5:\n      var value \x3d new search.logging.CacheContentMapEntry;\n      reader.readMessage(value,search.logging.CacheContentMapEntry.deserializeBinaryFromReader);\n      msg.addMapElement(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nsearch.logging.CacheOverflow.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  search.logging.CacheOverflow.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!search.logging.CacheOverflow} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nsearch.logging.CacheOverflow.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {!search.logging.CacheOverflow.StorageType} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {!search.logging.CacheOverflow.EvictionPriority} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      4,\n      f\n    );\n  }\n  f \x3d message.getMapElementList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedMessage(\n      5,\n      f,\n      search.logging.CacheContentMapEntry.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nsearch.logging.CacheOverflow.StorageType \x3d {\n  UNKNOWN_STORAGE: 0,\n  SESSION_STORAGE: 1,\n  LOCAL_STORAGE: 2\n};\n\n/**\n * @enum {number}\n */\nsearch.logging.CacheOverflow.EvictionPriority \x3d {\n  LOW: 0,\n  MEDIUM: 1,\n  HIGH: 2,\n  VERY_HIGH: 3\n};\n\n/**\n * optional StorageType storage_type \x3d 1;\n * @return {!search.logging.CacheOverflow.StorageType}\n */\nsearch.logging.CacheOverflow.prototype.getStorageType \x3d function() {\n  return /** @type {!search.logging.CacheOverflow.StorageType} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?search.logging.CacheOverflow.StorageType|undefined} value */\nsearch.logging.CacheOverflow.prototype.setStorageType \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nsearch.logging.CacheOverflow.prototype.clearStorageType \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nsearch.logging.CacheOverflow.prototype.hasStorageType \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional EvictionPriority eviction_cause_priority \x3d 2;\n * @return {!search.logging.CacheOverflow.EvictionPriority}\n */\nsearch.logging.CacheOverflow.prototype.getEvictionCausePriority \x3d function() {\n  return /** @type {!search.logging.CacheOverflow.EvictionPriority} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?search.logging.CacheOverflow.EvictionPriority|undefined} value */\nsearch.logging.CacheOverflow.prototype.setEvictionCausePriority \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nsearch.logging.CacheOverflow.prototype.clearEvictionCausePriority \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nsearch.logging.CacheOverflow.prototype.hasEvictionCausePriority \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional string eviction_cause_namespace \x3d 3;\n * @return {?string}\n */\nsearch.logging.CacheOverflow.prototype.getEvictionCauseNamespace \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?string|undefined} value */\nsearch.logging.CacheOverflow.prototype.setEvictionCauseNamespace \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nsearch.logging.CacheOverflow.prototype.clearEvictionCauseNamespace \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nsearch.logging.CacheOverflow.prototype.hasEvictionCauseNamespace \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional int32 eviction_cause_weight \x3d 4;\n * @return {?number}\n */\nsearch.logging.CacheOverflow.prototype.getEvictionCauseWeight \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?number|undefined} value */\nsearch.logging.CacheOverflow.prototype.setEvictionCauseWeight \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nsearch.logging.CacheOverflow.prototype.clearEvictionCauseWeight \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nsearch.logging.CacheOverflow.prototype.hasEvictionCauseWeight \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * repeated CacheContentMapEntry map_element \x3d 5;\n * @return {!Array\x3c!search.logging.CacheContentMapEntry\x3e}\n */\nsearch.logging.CacheOverflow.prototype.getMapElementList \x3d function() {\n  return /** @type{!Array\x3c!search.logging.CacheContentMapEntry\x3e} */ (\n    jspb.Message.getRepeatedWrapperField(this, search.logging.CacheContentMapEntry, 5));\n};\n\n\n/** @param {Array\x3c!search.logging.CacheContentMapEntry\x3e|undefined} value */\nsearch.logging.CacheOverflow.prototype.setMapElementList \x3d function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 5, value);\n};\n\n\n/**\n * @param {!search.logging.CacheContentMapEntry\x3d} opt_value\n * @param {number\x3d} opt_index\n * @return {!search.logging.CacheContentMapEntry}\n */\nsearch.logging.CacheOverflow.prototype.addMapElement \x3d function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, search.logging.CacheContentMapEntry, opt_index);\n};\n\n\nsearch.logging.CacheOverflow.prototype.clearMapElementList \x3d function() {\n  this.setMapElementList([]);\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!search.logging.CacheOverflow}\n */\nsearch.logging.CacheOverflow.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(search.logging.CacheOverflow, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nsearch.logging.CacheContentMapEntry \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(search.logging.CacheContentMapEntry, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  search.logging.CacheContentMapEntry.displayName \x3d \x27search.logging.CacheContentMapEntry\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nsearch.logging.CacheContentMapEntry.prototype.toObject \x3d function(opt_includeInstance) {\n  return search.logging.CacheContentMapEntry.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!search.logging.CacheContentMapEntry} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nsearch.logging.CacheContentMapEntry.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    keyNamespace: jspb.Message.getField(msg, 1),\n    totalWeight: jspb.Message.getField(msg, 2)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!search.logging.CacheContentMapEntry}\n */\nsearch.logging.CacheContentMapEntry.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new search.logging.CacheContentMapEntry;\n  return search.logging.CacheContentMapEntry.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!search.logging.CacheContentMapEntry} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!search.logging.CacheContentMapEntry}\n */\nsearch.logging.CacheContentMapEntry.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setKeyNamespace(value);\n      break;\n    case 2:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setTotalWeight(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nsearch.logging.CacheContentMapEntry.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  search.logging.CacheContentMapEntry.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!search.logging.CacheContentMapEntry} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nsearch.logging.CacheContentMapEntry.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string key_namespace \x3d 1;\n * @return {?string}\n */\nsearch.logging.CacheContentMapEntry.prototype.getKeyNamespace \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?string|undefined} value */\nsearch.logging.CacheContentMapEntry.prototype.setKeyNamespace \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nsearch.logging.CacheContentMapEntry.prototype.clearKeyNamespace \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nsearch.logging.CacheContentMapEntry.prototype.hasKeyNamespace \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional int32 total_weight \x3d 2;\n * @return {?number}\n */\nsearch.logging.CacheContentMapEntry.prototype.getTotalWeight \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?number|undefined} value */\nsearch.logging.CacheContentMapEntry.prototype.setTotalWeight \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nsearch.logging.CacheContentMapEntry.prototype.clearTotalWeight \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nsearch.logging.CacheContentMapEntry.prototype.hasTotalWeight \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!search.logging.CacheContentMapEntry}\n */\nsearch.logging.CacheContentMapEntry.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(search.logging.CacheContentMapEntry, data);\n};\n\n\n\n//# sourceURL\x3dhttps://qs/logs/proto/gws/js/cache_overflow_log.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="logs/proto/gws/js/performance_timings.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.logs.proto.gws.js.Measure\x27);\ngoog.provide(\x27proto.logs.proto.gws.js.PerformanceTimings\x27);\ngoog.provide(\x27proto.logs.proto.gws.js.Target\x27);\ngoog.provide(\x27proto.logs.proto.gws.js.Target.Type\x27);\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.Message\x27);\n\ngoog.forwardDeclare(\x27proto.search.logging.PerformanceMeasureId\x27);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.logs.proto.gws.js.Measure \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.logs.proto.gws.js.Measure, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.logs.proto.gws.js.Measure.displayName \x3d \x27proto.logs.proto.gws.js.Measure\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.logs.proto.gws.js.Measure.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.logs.proto.gws.js.Measure.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.logs.proto.gws.js.Measure} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.Measure.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    measureId: jspb.Message.getField(msg, 1),\n    value: jspb.Message.getField(msg, 2)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.logs.proto.gws.js.Measure}\n */\nproto.logs.proto.gws.js.Measure.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.logs.proto.gws.js.Measure;\n  return proto.logs.proto.gws.js.Measure.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.logs.proto.gws.js.Measure} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.logs.proto.gws.js.Measure}\n */\nproto.logs.proto.gws.js.Measure.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {!proto.search.logging.PerformanceMeasureId} */ (reader.readEnum());\n      msg.setMeasureId(value);\n      break;\n    case 2:\n      var value \x3d /** @type {number} */ (reader.readInt64());\n      msg.setValue(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.logs.proto.gws.js.Measure.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.logs.proto.gws.js.Measure.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.logs.proto.gws.js.Measure} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.Measure.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {!proto.search.logging.PerformanceMeasureId} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional search.logging.PerformanceMeasureId measure_id \x3d 1;\n * @return {!proto.search.logging.PerformanceMeasureId}\n */\nproto.logs.proto.gws.js.Measure.prototype.getMeasureId \x3d function() {\n  return /** @type {!proto.search.logging.PerformanceMeasureId} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?proto.search.logging.PerformanceMeasureId|undefined} value */\nproto.logs.proto.gws.js.Measure.prototype.setMeasureId \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.logs.proto.gws.js.Measure.prototype.clearMeasureId \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.Measure.prototype.hasMeasureId \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional int64 value \x3d 2;\n * @return {?number}\n */\nproto.logs.proto.gws.js.Measure.prototype.getValue \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?number|undefined} value */\nproto.logs.proto.gws.js.Measure.prototype.setValue \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.logs.proto.gws.js.Measure.prototype.clearValue \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.Measure.prototype.hasValue \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.logs.proto.gws.js.Measure}\n */\nproto.logs.proto.gws.js.Measure.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.logs.proto.gws.js.Measure, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.logs.proto.gws.js.PerformanceTimings \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.logs.proto.gws.js.PerformanceTimings.repeatedFields_, null);\n};\ngoog.inherits(proto.logs.proto.gws.js.PerformanceTimings, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.logs.proto.gws.js.PerformanceTimings.displayName \x3d \x27proto.logs.proto.gws.js.PerformanceTimings\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nproto.logs.proto.gws.js.PerformanceTimings.repeatedFields_ \x3d [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.logs.proto.gws.js.PerformanceTimings.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.logs.proto.gws.js.PerformanceTimings.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.logs.proto.gws.js.PerformanceTimings} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.PerformanceTimings.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    target: (f \x3d msg.getTarget()) \x26\x26 proto.logs.proto.gws.js.Target.toObject(includeInstance, f),\n    measuresList: jspb.Message.toObjectList(msg.getMeasuresList(),\n    proto.logs.proto.gws.js.Measure.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.logs.proto.gws.js.PerformanceTimings}\n */\nproto.logs.proto.gws.js.PerformanceTimings.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.logs.proto.gws.js.PerformanceTimings;\n  return proto.logs.proto.gws.js.PerformanceTimings.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.logs.proto.gws.js.PerformanceTimings} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.logs.proto.gws.js.PerformanceTimings}\n */\nproto.logs.proto.gws.js.PerformanceTimings.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d new proto.logs.proto.gws.js.Target;\n      reader.readMessage(value,proto.logs.proto.gws.js.Target.deserializeBinaryFromReader);\n      msg.setTarget(value);\n      break;\n    case 2:\n      var value \x3d new proto.logs.proto.gws.js.Measure;\n      reader.readMessage(value,proto.logs.proto.gws.js.Measure.deserializeBinaryFromReader);\n      msg.addMeasures(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.logs.proto.gws.js.PerformanceTimings.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.logs.proto.gws.js.PerformanceTimings.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.logs.proto.gws.js.PerformanceTimings} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.PerformanceTimings.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d message.getTarget();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.logs.proto.gws.js.Target.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getMeasuresList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      proto.logs.proto.gws.js.Measure.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional Target target \x3d 1;\n * @return {?proto.logs.proto.gws.js.Target}\n */\nproto.logs.proto.gws.js.PerformanceTimings.prototype.getTarget \x3d function() {\n  return /** @type{?proto.logs.proto.gws.js.Target} */ (\n    jspb.Message.getWrapperField(this, proto.logs.proto.gws.js.Target, 1));\n};\n\n\n/** @param {?proto.logs.proto.gws.js.Target|undefined} value */\nproto.logs.proto.gws.js.PerformanceTimings.prototype.setTarget \x3d function(value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\n\nproto.logs.proto.gws.js.PerformanceTimings.prototype.clearTarget \x3d function() {\n  this.setTarget(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.PerformanceTimings.prototype.hasTarget \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * repeated Measure measures \x3d 2;\n * @return {!Array\x3c!proto.logs.proto.gws.js.Measure\x3e}\n */\nproto.logs.proto.gws.js.PerformanceTimings.prototype.getMeasuresList \x3d function() {\n  return /** @type{!Array\x3c!proto.logs.proto.gws.js.Measure\x3e} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.logs.proto.gws.js.Measure, 2));\n};\n\n\n/** @param {Array\x3c!proto.logs.proto.gws.js.Measure\x3e|undefined} value */\nproto.logs.proto.gws.js.PerformanceTimings.prototype.setMeasuresList \x3d function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.logs.proto.gws.js.Measure\x3d} opt_value\n * @param {number\x3d} opt_index\n * @return {!proto.logs.proto.gws.js.Measure}\n */\nproto.logs.proto.gws.js.PerformanceTimings.prototype.addMeasures \x3d function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.logs.proto.gws.js.Measure, opt_index);\n};\n\n\nproto.logs.proto.gws.js.PerformanceTimings.prototype.clearMeasuresList \x3d function() {\n  this.setMeasuresList([]);\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.logs.proto.gws.js.PerformanceTimings}\n */\nproto.logs.proto.gws.js.PerformanceTimings.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.logs.proto.gws.js.PerformanceTimings, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.logs.proto.gws.js.Target \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.logs.proto.gws.js.Target, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.logs.proto.gws.js.Target.displayName \x3d \x27proto.logs.proto.gws.js.Target\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.logs.proto.gws.js.Target.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.logs.proto.gws.js.Target.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.logs.proto.gws.js.Target} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.Target.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    type: jspb.Message.getFieldWithDefault(msg, 1, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.logs.proto.gws.js.Target}\n */\nproto.logs.proto.gws.js.Target.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.logs.proto.gws.js.Target;\n  return proto.logs.proto.gws.js.Target.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.logs.proto.gws.js.Target} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.logs.proto.gws.js.Target}\n */\nproto.logs.proto.gws.js.Target.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {!proto.logs.proto.gws.js.Target.Type} */ (reader.readEnum());\n      msg.setType(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.logs.proto.gws.js.Target.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.logs.proto.gws.js.Target.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.logs.proto.gws.js.Target} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.Target.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {!proto.logs.proto.gws.js.Target.Type} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.logs.proto.gws.js.Target.Type \x3d {\n  NONE: 0,\n  RESOURCE: 1,\n  NAVIGATION: 2\n};\n\n/**\n * optional Type type \x3d 1;\n * @return {!proto.logs.proto.gws.js.Target.Type}\n */\nproto.logs.proto.gws.js.Target.prototype.getType \x3d function() {\n  return /** @type {!proto.logs.proto.gws.js.Target.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {?proto.logs.proto.gws.js.Target.Type|undefined} value */\nproto.logs.proto.gws.js.Target.prototype.setType \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.logs.proto.gws.js.Target.prototype.clearType \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.Target.prototype.hasType \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.logs.proto.gws.js.Target}\n */\nproto.logs.proto.gws.js.Target.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.logs.proto.gws.js.Target, data);\n};\n\n\n\n//# sourceURL\x3dhttps://qs/logs/proto/gws/js/performance_timings.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="logs/proto/gws/js/cache_read_record.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.logs.proto.gws.js.CacheReadRecord\x27);\ngoog.provide(\x27proto.logs.proto.gws.js.CacheReadRecord.Result\x27);\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.Message\x27);\n\ngoog.forwardDeclare(\x27proto.logs.proto.gws.js.SrpInjectables\x27);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.logs.proto.gws.js.CacheReadRecord \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.logs.proto.gws.js.CacheReadRecord.repeatedFields_, null);\n};\ngoog.inherits(proto.logs.proto.gws.js.CacheReadRecord, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.logs.proto.gws.js.CacheReadRecord.displayName \x3d \x27proto.logs.proto.gws.js.CacheReadRecord\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nproto.logs.proto.gws.js.CacheReadRecord.repeatedFields_ \x3d [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.logs.proto.gws.js.CacheReadRecord.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.logs.proto.gws.js.CacheReadRecord.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.logs.proto.gws.js.CacheReadRecord} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.CacheReadRecord.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    result: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    injectedItemsList: jspb.Message.getRepeatedField(msg, 2),\n    itemAgeMs: jspb.Message.getField(msg, 3),\n    eventId: jspb.Message.getField(msg, 4)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.logs.proto.gws.js.CacheReadRecord}\n */\nproto.logs.proto.gws.js.CacheReadRecord.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.logs.proto.gws.js.CacheReadRecord;\n  return proto.logs.proto.gws.js.CacheReadRecord.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.logs.proto.gws.js.CacheReadRecord} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.logs.proto.gws.js.CacheReadRecord}\n */\nproto.logs.proto.gws.js.CacheReadRecord.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {!proto.logs.proto.gws.js.CacheReadRecord.Result} */ (reader.readEnum());\n      msg.setResult(value);\n      break;\n    case 2:\n      var value \x3d /** @type {!proto.logs.proto.gws.js.SrpInjectables} */ (reader.readEnum());\n      msg.addInjectedItems(value);\n      break;\n    case 3:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setItemAgeMs(value);\n      break;\n    case 4:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setEventId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.logs.proto.gws.js.CacheReadRecord.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.logs.proto.gws.js.CacheReadRecord.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.logs.proto.gws.js.CacheReadRecord} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.CacheReadRecord.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {!proto.logs.proto.gws.js.CacheReadRecord.Result} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f \x3d message.getInjectedItemsList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedEnum(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.logs.proto.gws.js.CacheReadRecord.Result \x3d {\n  UNKNOWN: 0,\n  SW_CACHE_READ: 1,\n  NO_ITEM_FOUND: 2,\n  SIMPLE_IN_MEMORY_CACHE_READ: 3\n};\n\n/**\n * optional Result result \x3d 1;\n * @return {!proto.logs.proto.gws.js.CacheReadRecord.Result}\n */\nproto.logs.proto.gws.js.CacheReadRecord.prototype.getResult \x3d function() {\n  return /** @type {!proto.logs.proto.gws.js.CacheReadRecord.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {?proto.logs.proto.gws.js.CacheReadRecord.Result|undefined} value */\nproto.logs.proto.gws.js.CacheReadRecord.prototype.setResult \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.logs.proto.gws.js.CacheReadRecord.prototype.clearResult \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.CacheReadRecord.prototype.hasResult \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * repeated SrpInjectables injected_items \x3d 2;\n * @return {!Array\x3c!proto.logs.proto.gws.js.SrpInjectables\x3e}\n */\nproto.logs.proto.gws.js.CacheReadRecord.prototype.getInjectedItemsList \x3d function() {\n  return /** @type {!Array\x3c!proto.logs.proto.gws.js.SrpInjectables\x3e} */ (jspb.Message.getRepeatedField(this, 2));\n};\n\n\n/** @param {Array\x3c!proto.logs.proto.gws.js.SrpInjectables\x3e|undefined} value */\nproto.logs.proto.gws.js.CacheReadRecord.prototype.setInjectedItemsList \x3d function(value) {\n  jspb.Message.setField(this, 2, value || []);\n};\n\n\n/**\n * @param {!proto.logs.proto.gws.js.SrpInjectables} value\n * @param {number\x3d} opt_index\n */\nproto.logs.proto.gws.js.CacheReadRecord.prototype.addInjectedItems \x3d function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n\n\nproto.logs.proto.gws.js.CacheReadRecord.prototype.clearInjectedItemsList \x3d function() {\n  this.setInjectedItemsList([]);\n};\n\n\n/**\n * optional int32 item_age_ms \x3d 3;\n * @return {?number}\n */\nproto.logs.proto.gws.js.CacheReadRecord.prototype.getItemAgeMs \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?number|undefined} value */\nproto.logs.proto.gws.js.CacheReadRecord.prototype.setItemAgeMs \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.logs.proto.gws.js.CacheReadRecord.prototype.clearItemAgeMs \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.CacheReadRecord.prototype.hasItemAgeMs \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional string event_id \x3d 4;\n * @return {?string}\n */\nproto.logs.proto.gws.js.CacheReadRecord.prototype.getEventId \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?string|undefined} value */\nproto.logs.proto.gws.js.CacheReadRecord.prototype.setEventId \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.logs.proto.gws.js.CacheReadRecord.prototype.clearEventId \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.CacheReadRecord.prototype.hasEventId \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.logs.proto.gws.js.CacheReadRecord}\n */\nproto.logs.proto.gws.js.CacheReadRecord.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.logs.proto.gws.js.CacheReadRecord, data);\n};\n\n\n\n//# sourceURL\x3dhttps://qs/logs/proto/gws/js/cache_read_record.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="logs/proto/gws/js/cache_write_record.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.logs.proto.gws.js.CacheWriteRecord\x27);\ngoog.provide(\x27proto.logs.proto.gws.js.CacheWriteRecord.Status\x27);\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.Message\x27);\n\ngoog.forwardDeclare(\x27proto.logs.proto.gws.js.SrpInjectables\x27);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.logs.proto.gws.js.CacheWriteRecord \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.logs.proto.gws.js.CacheWriteRecord.repeatedFields_, null);\n};\ngoog.inherits(proto.logs.proto.gws.js.CacheWriteRecord, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.logs.proto.gws.js.CacheWriteRecord.displayName \x3d \x27proto.logs.proto.gws.js.CacheWriteRecord\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nproto.logs.proto.gws.js.CacheWriteRecord.repeatedFields_ \x3d [3];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.logs.proto.gws.js.CacheWriteRecord.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.logs.proto.gws.js.CacheWriteRecord.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.logs.proto.gws.js.CacheWriteRecord} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.CacheWriteRecord.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    status: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    ttlMs: jspb.Message.getField(msg, 2),\n    injectedItemsList: jspb.Message.getRepeatedField(msg, 3)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.logs.proto.gws.js.CacheWriteRecord}\n */\nproto.logs.proto.gws.js.CacheWriteRecord.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.logs.proto.gws.js.CacheWriteRecord;\n  return proto.logs.proto.gws.js.CacheWriteRecord.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.logs.proto.gws.js.CacheWriteRecord} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.logs.proto.gws.js.CacheWriteRecord}\n */\nproto.logs.proto.gws.js.CacheWriteRecord.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {!proto.logs.proto.gws.js.CacheWriteRecord.Status} */ (reader.readEnum());\n      msg.setStatus(value);\n      break;\n    case 2:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setTtlMs(value);\n      break;\n    case 3:\n      var value \x3d /** @type {!proto.logs.proto.gws.js.SrpInjectables} */ (reader.readEnum());\n      msg.addInjectedItems(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.logs.proto.gws.js.CacheWriteRecord.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.logs.proto.gws.js.CacheWriteRecord.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.logs.proto.gws.js.CacheWriteRecord} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.CacheWriteRecord.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {!proto.logs.proto.gws.js.CacheWriteRecord.Status} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      2,\n      f\n    );\n  }\n  f \x3d message.getInjectedItemsList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedEnum(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.logs.proto.gws.js.CacheWriteRecord.Status \x3d {\n  UNKNOWN: 0,\n  SUCCESS: 1,\n  CLONE_ERROR: 2,\n  PUT_ERROR: 3,\n  MISSING_SERVER_SUCCESS_SIGNAL: 4,\n  NO_CACHE_DUE_TO_ZERO_TTL: 5,\n  NO_CACHE_DUE_TO_REPEATED_EVENT_ID: 6\n};\n\n/**\n * optional Status status \x3d 1;\n * @return {!proto.logs.proto.gws.js.CacheWriteRecord.Status}\n */\nproto.logs.proto.gws.js.CacheWriteRecord.prototype.getStatus \x3d function() {\n  return /** @type {!proto.logs.proto.gws.js.CacheWriteRecord.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {?proto.logs.proto.gws.js.CacheWriteRecord.Status|undefined} value */\nproto.logs.proto.gws.js.CacheWriteRecord.prototype.setStatus \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.logs.proto.gws.js.CacheWriteRecord.prototype.clearStatus \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.CacheWriteRecord.prototype.hasStatus \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional int32 ttl_ms \x3d 2;\n * @return {?number}\n */\nproto.logs.proto.gws.js.CacheWriteRecord.prototype.getTtlMs \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?number|undefined} value */\nproto.logs.proto.gws.js.CacheWriteRecord.prototype.setTtlMs \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.logs.proto.gws.js.CacheWriteRecord.prototype.clearTtlMs \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.CacheWriteRecord.prototype.hasTtlMs \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * repeated SrpInjectables injected_items \x3d 3;\n * @return {!Array\x3c!proto.logs.proto.gws.js.SrpInjectables\x3e}\n */\nproto.logs.proto.gws.js.CacheWriteRecord.prototype.getInjectedItemsList \x3d function() {\n  return /** @type {!Array\x3c!proto.logs.proto.gws.js.SrpInjectables\x3e} */ (jspb.Message.getRepeatedField(this, 3));\n};\n\n\n/** @param {Array\x3c!proto.logs.proto.gws.js.SrpInjectables\x3e|undefined} value */\nproto.logs.proto.gws.js.CacheWriteRecord.prototype.setInjectedItemsList \x3d function(value) {\n  jspb.Message.setField(this, 3, value || []);\n};\n\n\n/**\n * @param {!proto.logs.proto.gws.js.SrpInjectables} value\n * @param {number\x3d} opt_index\n */\nproto.logs.proto.gws.js.CacheWriteRecord.prototype.addInjectedItems \x3d function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 3, value, opt_index);\n};\n\n\nproto.logs.proto.gws.js.CacheWriteRecord.prototype.clearInjectedItemsList \x3d function() {\n  this.setInjectedItemsList([]);\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.logs.proto.gws.js.CacheWriteRecord}\n */\nproto.logs.proto.gws.js.CacheWriteRecord.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.logs.proto.gws.js.CacheWriteRecord, data);\n};\n\n\n\n//# sourceURL\x3dhttps://qs/logs/proto/gws/js/cache_write_record.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="logs/proto/gws/js/fetch_response_record.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.logs.proto.gws.js.FetchResponseRecord\x27);\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.Message\x27);\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.logs.proto.gws.js.FetchResponseRecord \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.logs.proto.gws.js.FetchResponseRecord, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.logs.proto.gws.js.FetchResponseRecord.displayName \x3d \x27proto.logs.proto.gws.js.FetchResponseRecord\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.logs.proto.gws.js.FetchResponseRecord.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.logs.proto.gws.js.FetchResponseRecord.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.logs.proto.gws.js.FetchResponseRecord} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.FetchResponseRecord.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    responseFailedNetworkError: jspb.Message.getField(msg, 1),\n    statusCode: jspb.Message.getField(msg, 2),\n    eventId: jspb.Message.getField(msg, 3),\n    offlineRequestSuffix: jspb.Message.getField(msg, 4)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.logs.proto.gws.js.FetchResponseRecord}\n */\nproto.logs.proto.gws.js.FetchResponseRecord.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.logs.proto.gws.js.FetchResponseRecord;\n  return proto.logs.proto.gws.js.FetchResponseRecord.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.logs.proto.gws.js.FetchResponseRecord} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.logs.proto.gws.js.FetchResponseRecord}\n */\nproto.logs.proto.gws.js.FetchResponseRecord.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {boolean} */ (reader.readBool());\n      msg.setResponseFailedNetworkError(value);\n      break;\n    case 2:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setStatusCode(value);\n      break;\n    case 3:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setEventId(value);\n      break;\n    case 4:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setOfflineRequestSuffix(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.logs.proto.gws.js.FetchResponseRecord.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.logs.proto.gws.js.FetchResponseRecord.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.logs.proto.gws.js.FetchResponseRecord} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.FetchResponseRecord.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?boolean} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool response_failed_network_error \x3d 1;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val \x3d\x3d\x3d true/false} in those cases.\n * @return {?boolean}\n */\nproto.logs.proto.gws.js.FetchResponseRecord.prototype.getResponseFailedNetworkError \x3d function() {\n  return /** @type {?boolean} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?boolean|undefined} value */\nproto.logs.proto.gws.js.FetchResponseRecord.prototype.setResponseFailedNetworkError \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.logs.proto.gws.js.FetchResponseRecord.prototype.clearResponseFailedNetworkError \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.FetchResponseRecord.prototype.hasResponseFailedNetworkError \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional int32 status_code \x3d 2;\n * @return {?number}\n */\nproto.logs.proto.gws.js.FetchResponseRecord.prototype.getStatusCode \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?number|undefined} value */\nproto.logs.proto.gws.js.FetchResponseRecord.prototype.setStatusCode \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.logs.proto.gws.js.FetchResponseRecord.prototype.clearStatusCode \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.FetchResponseRecord.prototype.hasStatusCode \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional string event_id \x3d 3;\n * @return {?string}\n */\nproto.logs.proto.gws.js.FetchResponseRecord.prototype.getEventId \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?string|undefined} value */\nproto.logs.proto.gws.js.FetchResponseRecord.prototype.setEventId \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.logs.proto.gws.js.FetchResponseRecord.prototype.clearEventId \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.FetchResponseRecord.prototype.hasEventId \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional string offline_request_suffix \x3d 4;\n * @return {?string}\n */\nproto.logs.proto.gws.js.FetchResponseRecord.prototype.getOfflineRequestSuffix \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?string|undefined} value */\nproto.logs.proto.gws.js.FetchResponseRecord.prototype.setOfflineRequestSuffix \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.logs.proto.gws.js.FetchResponseRecord.prototype.clearOfflineRequestSuffix \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.FetchResponseRecord.prototype.hasOfflineRequestSuffix \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.logs.proto.gws.js.FetchResponseRecord}\n */\nproto.logs.proto.gws.js.FetchResponseRecord.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.logs.proto.gws.js.FetchResponseRecord, data);\n};\n\n\n\n//# sourceURL\x3dhttps://qs/logs/proto/gws/js/fetch_response_record.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="logs/proto/gws/js/pwa_record.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.logs.proto.gws.js.PwaRecord\x27);\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.Message\x27);\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.logs.proto.gws.js.PwaRecord \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.logs.proto.gws.js.PwaRecord, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.logs.proto.gws.js.PwaRecord.displayName \x3d \x27proto.logs.proto.gws.js.PwaRecord\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.logs.proto.gws.js.PwaRecord.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.logs.proto.gws.js.PwaRecord.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.logs.proto.gws.js.PwaRecord} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.PwaRecord.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    staticHeaderRendered: jspb.Message.getField(msg, 1)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.logs.proto.gws.js.PwaRecord}\n */\nproto.logs.proto.gws.js.PwaRecord.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.logs.proto.gws.js.PwaRecord;\n  return proto.logs.proto.gws.js.PwaRecord.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.logs.proto.gws.js.PwaRecord} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.logs.proto.gws.js.PwaRecord}\n */\nproto.logs.proto.gws.js.PwaRecord.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {boolean} */ (reader.readBool());\n      msg.setStaticHeaderRendered(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.logs.proto.gws.js.PwaRecord.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.logs.proto.gws.js.PwaRecord.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.logs.proto.gws.js.PwaRecord} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.PwaRecord.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?boolean} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bool static_header_rendered \x3d 1;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val \x3d\x3d\x3d true/false} in those cases.\n * @return {?boolean}\n */\nproto.logs.proto.gws.js.PwaRecord.prototype.getStaticHeaderRendered \x3d function() {\n  return /** @type {?boolean} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?boolean|undefined} value */\nproto.logs.proto.gws.js.PwaRecord.prototype.setStaticHeaderRendered \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.logs.proto.gws.js.PwaRecord.prototype.clearStaticHeaderRendered \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.PwaRecord.prototype.hasStaticHeaderRendered \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.logs.proto.gws.js.PwaRecord}\n */\nproto.logs.proto.gws.js.PwaRecord.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.logs.proto.gws.js.PwaRecord, data);\n};\n\n\n\n//# sourceURL\x3dhttps://qs/logs/proto/gws/js/pwa_record.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="logs/proto/gws/js/xjs_record.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.logs.proto.gws.js.XjsRecord\x27);\ngoog.provide(\x27proto.logs.proto.gws.js.XjsRecord.CacheResult\x27);\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.Message\x27);\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.logs.proto.gws.js.XjsRecord \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.logs.proto.gws.js.XjsRecord, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.logs.proto.gws.js.XjsRecord.displayName \x3d \x27proto.logs.proto.gws.js.XjsRecord\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.logs.proto.gws.js.XjsRecord.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.logs.proto.gws.js.XjsRecord.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.logs.proto.gws.js.XjsRecord} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.XjsRecord.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    success: jspb.Message.getField(msg, 1),\n    networkRequestFailed: jspb.Message.getField(msg, 2),\n    cacheReadResult: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    numBytesReadFromCache: jspb.Message.getField(msg, 4),\n    cacheWriteResult: jspb.Message.getFieldWithDefault(msg, 5, 0),\n    numModulesWrittenToCache: jspb.Message.getField(msg, 6)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.logs.proto.gws.js.XjsRecord}\n */\nproto.logs.proto.gws.js.XjsRecord.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.logs.proto.gws.js.XjsRecord;\n  return proto.logs.proto.gws.js.XjsRecord.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.logs.proto.gws.js.XjsRecord} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.logs.proto.gws.js.XjsRecord}\n */\nproto.logs.proto.gws.js.XjsRecord.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {boolean} */ (reader.readBool());\n      msg.setSuccess(value);\n      break;\n    case 2:\n      var value \x3d /** @type {boolean} */ (reader.readBool());\n      msg.setNetworkRequestFailed(value);\n      break;\n    case 3:\n      var value \x3d /** @type {!proto.logs.proto.gws.js.XjsRecord.CacheResult} */ (reader.readEnum());\n      msg.setCacheReadResult(value);\n      break;\n    case 4:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setNumBytesReadFromCache(value);\n      break;\n    case 5:\n      var value \x3d /** @type {!proto.logs.proto.gws.js.XjsRecord.CacheResult} */ (reader.readEnum());\n      msg.setCacheWriteResult(value);\n      break;\n    case 6:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setNumModulesWrittenToCache(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.logs.proto.gws.js.XjsRecord.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.logs.proto.gws.js.XjsRecord.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.logs.proto.gws.js.XjsRecord} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.XjsRecord.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?boolean} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeBool(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?boolean} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeBool(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.logs.proto.gws.js.XjsRecord.CacheResult} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      4,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.logs.proto.gws.js.XjsRecord.CacheResult} */ (jspb.Message.getField(message, 5));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      5,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 6));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      6,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.logs.proto.gws.js.XjsRecord.CacheResult \x3d {\n  NONE: 0,\n  SUCCESS: 1,\n  SYSTEM_FAILURE: 2\n};\n\n/**\n * optional bool success \x3d 1;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val \x3d\x3d\x3d true/false} in those cases.\n * @return {?boolean}\n */\nproto.logs.proto.gws.js.XjsRecord.prototype.getSuccess \x3d function() {\n  return /** @type {?boolean} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?boolean|undefined} value */\nproto.logs.proto.gws.js.XjsRecord.prototype.setSuccess \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.logs.proto.gws.js.XjsRecord.prototype.clearSuccess \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.XjsRecord.prototype.hasSuccess \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional bool network_request_failed \x3d 2;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val \x3d\x3d\x3d true/false} in those cases.\n * @return {?boolean}\n */\nproto.logs.proto.gws.js.XjsRecord.prototype.getNetworkRequestFailed \x3d function() {\n  return /** @type {?boolean} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?boolean|undefined} value */\nproto.logs.proto.gws.js.XjsRecord.prototype.setNetworkRequestFailed \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.logs.proto.gws.js.XjsRecord.prototype.clearNetworkRequestFailed \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.XjsRecord.prototype.hasNetworkRequestFailed \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional CacheResult cache_read_result \x3d 3;\n * @return {!proto.logs.proto.gws.js.XjsRecord.CacheResult}\n */\nproto.logs.proto.gws.js.XjsRecord.prototype.getCacheReadResult \x3d function() {\n  return /** @type {!proto.logs.proto.gws.js.XjsRecord.CacheResult} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/** @param {?proto.logs.proto.gws.js.XjsRecord.CacheResult|undefined} value */\nproto.logs.proto.gws.js.XjsRecord.prototype.setCacheReadResult \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.logs.proto.gws.js.XjsRecord.prototype.clearCacheReadResult \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.XjsRecord.prototype.hasCacheReadResult \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional int32 num_bytes_read_from_cache \x3d 4;\n * @return {?number}\n */\nproto.logs.proto.gws.js.XjsRecord.prototype.getNumBytesReadFromCache \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?number|undefined} value */\nproto.logs.proto.gws.js.XjsRecord.prototype.setNumBytesReadFromCache \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.logs.proto.gws.js.XjsRecord.prototype.clearNumBytesReadFromCache \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.XjsRecord.prototype.hasNumBytesReadFromCache \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional CacheResult cache_write_result \x3d 5;\n * @return {!proto.logs.proto.gws.js.XjsRecord.CacheResult}\n */\nproto.logs.proto.gws.js.XjsRecord.prototype.getCacheWriteResult \x3d function() {\n  return /** @type {!proto.logs.proto.gws.js.XjsRecord.CacheResult} */ (jspb.Message.getFieldWithDefault(this, 5, 0));\n};\n\n\n/** @param {?proto.logs.proto.gws.js.XjsRecord.CacheResult|undefined} value */\nproto.logs.proto.gws.js.XjsRecord.prototype.setCacheWriteResult \x3d function(value) {\n  jspb.Message.setField(this, 5, value);\n};\n\n\nproto.logs.proto.gws.js.XjsRecord.prototype.clearCacheWriteResult \x3d function() {\n  jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.XjsRecord.prototype.hasCacheWriteResult \x3d function() {\n  return jspb.Message.getField(this, 5) !\x3d null;\n};\n\n\n/**\n * optional int32 num_modules_written_to_cache \x3d 6;\n * @return {?number}\n */\nproto.logs.proto.gws.js.XjsRecord.prototype.getNumModulesWrittenToCache \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 6));\n};\n\n\n/** @param {?number|undefined} value */\nproto.logs.proto.gws.js.XjsRecord.prototype.setNumModulesWrittenToCache \x3d function(value) {\n  jspb.Message.setField(this, 6, value);\n};\n\n\nproto.logs.proto.gws.js.XjsRecord.prototype.clearNumModulesWrittenToCache \x3d function() {\n  jspb.Message.setField(this, 6, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.XjsRecord.prototype.hasNumModulesWrittenToCache \x3d function() {\n  return jspb.Message.getField(this, 6) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.logs.proto.gws.js.XjsRecord}\n */\nproto.logs.proto.gws.js.XjsRecord.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.logs.proto.gws.js.XjsRecord, data);\n};\n\n\n\n//# sourceURL\x3dhttps://qs/logs/proto/gws/js/xjs_record.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="logs/proto/gws/js/fetch_event_record.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.logs.proto.gws.js.FetchEventRecord\x27);\ngoog.provide(\x27proto.logs.proto.gws.js.FetchEventRecord.Outcome\x27);\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.Message\x27);\ngoog.require(\x27proto.logs.proto.gws.js.CacheReadRecord\x27);\ngoog.require(\x27proto.logs.proto.gws.js.CacheWriteRecord\x27);\ngoog.require(\x27proto.logs.proto.gws.js.FetchResponseRecord\x27);\ngoog.require(\x27proto.logs.proto.gws.js.PwaRecord\x27);\ngoog.require(\x27proto.logs.proto.gws.js.XjsRecord\x27);\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.logs.proto.gws.js.FetchEventRecord \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.logs.proto.gws.js.FetchEventRecord.repeatedFields_, null);\n};\ngoog.inherits(proto.logs.proto.gws.js.FetchEventRecord, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.logs.proto.gws.js.FetchEventRecord.displayName \x3d \x27proto.logs.proto.gws.js.FetchEventRecord\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nproto.logs.proto.gws.js.FetchEventRecord.repeatedFields_ \x3d [9];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.logs.proto.gws.js.FetchEventRecord.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.logs.proto.gws.js.FetchEventRecord} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.FetchEventRecord.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    startTimestamp: jspb.Message.getFieldWithDefault(msg, 1, -1),\n    outcome: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    fetchResponseRecord: (f \x3d msg.getFetchResponseRecord()) \x26\x26 proto.logs.proto.gws.js.FetchResponseRecord.toObject(includeInstance, f),\n    cacheReadRecord: (f \x3d msg.getCacheReadRecord()) \x26\x26 proto.logs.proto.gws.js.CacheReadRecord.toObject(includeInstance, f),\n    cacheWriteRecord: (f \x3d msg.getCacheWriteRecord()) \x26\x26 proto.logs.proto.gws.js.CacheWriteRecord.toObject(includeInstance, f),\n    pwaRecord: (f \x3d msg.getPwaRecord()) \x26\x26 proto.logs.proto.gws.js.PwaRecord.toObject(includeInstance, f),\n    xjsRecordList: jspb.Message.toObjectList(msg.getXjsRecordList(),\n    proto.logs.proto.gws.js.XjsRecord.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.logs.proto.gws.js.FetchEventRecord}\n */\nproto.logs.proto.gws.js.FetchEventRecord.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.logs.proto.gws.js.FetchEventRecord;\n  return proto.logs.proto.gws.js.FetchEventRecord.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.logs.proto.gws.js.FetchEventRecord} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.logs.proto.gws.js.FetchEventRecord}\n */\nproto.logs.proto.gws.js.FetchEventRecord.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {number} */ (reader.readInt64());\n      msg.setStartTimestamp(value);\n      break;\n    case 2:\n      var value \x3d /** @type {!proto.logs.proto.gws.js.FetchEventRecord.Outcome} */ (reader.readEnum());\n      msg.setOutcome(value);\n      break;\n    case 3:\n      var value \x3d new proto.logs.proto.gws.js.FetchResponseRecord;\n      reader.readMessage(value,proto.logs.proto.gws.js.FetchResponseRecord.deserializeBinaryFromReader);\n      msg.setFetchResponseRecord(value);\n      break;\n    case 4:\n      var value \x3d new proto.logs.proto.gws.js.CacheReadRecord;\n      reader.readMessage(value,proto.logs.proto.gws.js.CacheReadRecord.deserializeBinaryFromReader);\n      msg.setCacheReadRecord(value);\n      break;\n    case 5:\n      var value \x3d new proto.logs.proto.gws.js.CacheWriteRecord;\n      reader.readMessage(value,proto.logs.proto.gws.js.CacheWriteRecord.deserializeBinaryFromReader);\n      msg.setCacheWriteRecord(value);\n      break;\n    case 6:\n      var value \x3d new proto.logs.proto.gws.js.PwaRecord;\n      reader.readMessage(value,proto.logs.proto.gws.js.PwaRecord.deserializeBinaryFromReader);\n      msg.setPwaRecord(value);\n      break;\n    case 9:\n      var value \x3d new proto.logs.proto.gws.js.XjsRecord;\n      reader.readMessage(value,proto.logs.proto.gws.js.XjsRecord.deserializeBinaryFromReader);\n      msg.addXjsRecord(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.logs.proto.gws.js.FetchEventRecord.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.logs.proto.gws.js.FetchEventRecord} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.FetchEventRecord.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {number} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeInt64(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.logs.proto.gws.js.FetchEventRecord.Outcome} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f \x3d message.getFetchResponseRecord();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.logs.proto.gws.js.FetchResponseRecord.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getCacheReadRecord();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      4,\n      f,\n      proto.logs.proto.gws.js.CacheReadRecord.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getCacheWriteRecord();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      5,\n      f,\n      proto.logs.proto.gws.js.CacheWriteRecord.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getPwaRecord();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      6,\n      f,\n      proto.logs.proto.gws.js.PwaRecord.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getXjsRecordList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedMessage(\n      9,\n      f,\n      proto.logs.proto.gws.js.XjsRecord.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.logs.proto.gws.js.FetchEventRecord.Outcome \x3d {\n  UNKNOWN: 0,\n  SUCCESS_NETWORK_FETCH_RENDERED: 1,\n  SUCCESS_CACHE_PAGE_RENDERED: 2,\n  FAILURE_PROMISE_REJECTED: 3\n};\n\n/**\n * optional int64 start_timestamp \x3d 1;\n * @return {number}\n */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.getStartTimestamp \x3d function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, -1));\n};\n\n\n/** @param {?number|undefined} value */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.setStartTimestamp \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.logs.proto.gws.js.FetchEventRecord.prototype.clearStartTimestamp \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.hasStartTimestamp \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional Outcome outcome \x3d 2;\n * @return {!proto.logs.proto.gws.js.FetchEventRecord.Outcome}\n */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.getOutcome \x3d function() {\n  return /** @type {!proto.logs.proto.gws.js.FetchEventRecord.Outcome} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/** @param {?proto.logs.proto.gws.js.FetchEventRecord.Outcome|undefined} value */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.setOutcome \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.logs.proto.gws.js.FetchEventRecord.prototype.clearOutcome \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.hasOutcome \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional FetchResponseRecord fetch_response_record \x3d 3;\n * @return {?proto.logs.proto.gws.js.FetchResponseRecord}\n */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.getFetchResponseRecord \x3d function() {\n  return /** @type{?proto.logs.proto.gws.js.FetchResponseRecord} */ (\n    jspb.Message.getWrapperField(this, proto.logs.proto.gws.js.FetchResponseRecord, 3));\n};\n\n\n/** @param {?proto.logs.proto.gws.js.FetchResponseRecord|undefined} value */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.setFetchResponseRecord \x3d function(value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\n\nproto.logs.proto.gws.js.FetchEventRecord.prototype.clearFetchResponseRecord \x3d function() {\n  this.setFetchResponseRecord(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.hasFetchResponseRecord \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional CacheReadRecord cache_read_record \x3d 4;\n * @return {?proto.logs.proto.gws.js.CacheReadRecord}\n */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.getCacheReadRecord \x3d function() {\n  return /** @type{?proto.logs.proto.gws.js.CacheReadRecord} */ (\n    jspb.Message.getWrapperField(this, proto.logs.proto.gws.js.CacheReadRecord, 4));\n};\n\n\n/** @param {?proto.logs.proto.gws.js.CacheReadRecord|undefined} value */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.setCacheReadRecord \x3d function(value) {\n  jspb.Message.setWrapperField(this, 4, value);\n};\n\n\nproto.logs.proto.gws.js.FetchEventRecord.prototype.clearCacheReadRecord \x3d function() {\n  this.setCacheReadRecord(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.hasCacheReadRecord \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional CacheWriteRecord cache_write_record \x3d 5;\n * @return {?proto.logs.proto.gws.js.CacheWriteRecord}\n */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.getCacheWriteRecord \x3d function() {\n  return /** @type{?proto.logs.proto.gws.js.CacheWriteRecord} */ (\n    jspb.Message.getWrapperField(this, proto.logs.proto.gws.js.CacheWriteRecord, 5));\n};\n\n\n/** @param {?proto.logs.proto.gws.js.CacheWriteRecord|undefined} value */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.setCacheWriteRecord \x3d function(value) {\n  jspb.Message.setWrapperField(this, 5, value);\n};\n\n\nproto.logs.proto.gws.js.FetchEventRecord.prototype.clearCacheWriteRecord \x3d function() {\n  this.setCacheWriteRecord(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.hasCacheWriteRecord \x3d function() {\n  return jspb.Message.getField(this, 5) !\x3d null;\n};\n\n\n/**\n * optional PwaRecord pwa_record \x3d 6;\n * @return {?proto.logs.proto.gws.js.PwaRecord}\n */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.getPwaRecord \x3d function() {\n  return /** @type{?proto.logs.proto.gws.js.PwaRecord} */ (\n    jspb.Message.getWrapperField(this, proto.logs.proto.gws.js.PwaRecord, 6));\n};\n\n\n/** @param {?proto.logs.proto.gws.js.PwaRecord|undefined} value */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.setPwaRecord \x3d function(value) {\n  jspb.Message.setWrapperField(this, 6, value);\n};\n\n\nproto.logs.proto.gws.js.FetchEventRecord.prototype.clearPwaRecord \x3d function() {\n  this.setPwaRecord(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.hasPwaRecord \x3d function() {\n  return jspb.Message.getField(this, 6) !\x3d null;\n};\n\n\n/**\n * repeated XjsRecord xjs_record \x3d 9;\n * @return {!Array\x3c!proto.logs.proto.gws.js.XjsRecord\x3e}\n */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.getXjsRecordList \x3d function() {\n  return /** @type{!Array\x3c!proto.logs.proto.gws.js.XjsRecord\x3e} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.logs.proto.gws.js.XjsRecord, 9));\n};\n\n\n/** @param {Array\x3c!proto.logs.proto.gws.js.XjsRecord\x3e|undefined} value */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.setXjsRecordList \x3d function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 9, value);\n};\n\n\n/**\n * @param {!proto.logs.proto.gws.js.XjsRecord\x3d} opt_value\n * @param {number\x3d} opt_index\n * @return {!proto.logs.proto.gws.js.XjsRecord}\n */\nproto.logs.proto.gws.js.FetchEventRecord.prototype.addXjsRecord \x3d function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.logs.proto.gws.js.XjsRecord, opt_index);\n};\n\n\nproto.logs.proto.gws.js.FetchEventRecord.prototype.clearXjsRecordList \x3d function() {\n  this.setXjsRecordList([]);\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.logs.proto.gws.js.FetchEventRecord}\n */\nproto.logs.proto.gws.js.FetchEventRecord.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.logs.proto.gws.js.FetchEventRecord, data);\n};\n\n\n\n//# sourceURL\x3dhttps://qs/logs/proto/gws/js/fetch_event_record.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="logs/proto/gws/js/install_event.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.logs.proto.gws.js.InstallEvent\x27);\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.Message\x27);\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.logs.proto.gws.js.InstallEvent \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.logs.proto.gws.js.InstallEvent, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.logs.proto.gws.js.InstallEvent.displayName \x3d \x27proto.logs.proto.gws.js.InstallEvent\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.logs.proto.gws.js.InstallEvent.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.logs.proto.gws.js.InstallEvent.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.logs.proto.gws.js.InstallEvent} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.InstallEvent.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    scope: jspb.Message.getField(msg, 1),\n    hasActiveWorker: jspb.Message.getField(msg, 2),\n    success: jspb.Message.getField(msg, 3),\n    workCount: jspb.Message.getField(msg, 4),\n    workFailureCount: jspb.Message.getField(msg, 5)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.logs.proto.gws.js.InstallEvent}\n */\nproto.logs.proto.gws.js.InstallEvent.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.logs.proto.gws.js.InstallEvent;\n  return proto.logs.proto.gws.js.InstallEvent.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.logs.proto.gws.js.InstallEvent} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.logs.proto.gws.js.InstallEvent}\n */\nproto.logs.proto.gws.js.InstallEvent.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setScope(value);\n      break;\n    case 2:\n      var value \x3d /** @type {boolean} */ (reader.readBool());\n      msg.setHasActiveWorker(value);\n      break;\n    case 3:\n      var value \x3d /** @type {boolean} */ (reader.readBool());\n      msg.setSuccess(value);\n      break;\n    case 4:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setWorkCount(value);\n      break;\n    case 5:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setWorkFailureCount(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.logs.proto.gws.js.InstallEvent.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.logs.proto.gws.js.InstallEvent.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.logs.proto.gws.js.InstallEvent} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.InstallEvent.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?boolean} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeBool(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?boolean} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeBool(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      4,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 5));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string scope \x3d 1;\n * @return {?string}\n */\nproto.logs.proto.gws.js.InstallEvent.prototype.getScope \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?string|undefined} value */\nproto.logs.proto.gws.js.InstallEvent.prototype.setScope \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.logs.proto.gws.js.InstallEvent.prototype.clearScope \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.InstallEvent.prototype.hasScope \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional bool has_active_worker \x3d 2;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val \x3d\x3d\x3d true/false} in those cases.\n * @return {?boolean}\n */\nproto.logs.proto.gws.js.InstallEvent.prototype.getHasActiveWorker \x3d function() {\n  return /** @type {?boolean} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?boolean|undefined} value */\nproto.logs.proto.gws.js.InstallEvent.prototype.setHasActiveWorker \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.logs.proto.gws.js.InstallEvent.prototype.clearHasActiveWorker \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.InstallEvent.prototype.hasHasActiveWorker \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional bool success \x3d 3;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val \x3d\x3d\x3d true/false} in those cases.\n * @return {?boolean}\n */\nproto.logs.proto.gws.js.InstallEvent.prototype.getSuccess \x3d function() {\n  return /** @type {?boolean} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?boolean|undefined} value */\nproto.logs.proto.gws.js.InstallEvent.prototype.setSuccess \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.logs.proto.gws.js.InstallEvent.prototype.clearSuccess \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.InstallEvent.prototype.hasSuccess \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional int32 work_count \x3d 4;\n * @return {?number}\n */\nproto.logs.proto.gws.js.InstallEvent.prototype.getWorkCount \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?number|undefined} value */\nproto.logs.proto.gws.js.InstallEvent.prototype.setWorkCount \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.logs.proto.gws.js.InstallEvent.prototype.clearWorkCount \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.InstallEvent.prototype.hasWorkCount \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional int32 work_failure_count \x3d 5;\n * @return {?number}\n */\nproto.logs.proto.gws.js.InstallEvent.prototype.getWorkFailureCount \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 5));\n};\n\n\n/** @param {?number|undefined} value */\nproto.logs.proto.gws.js.InstallEvent.prototype.setWorkFailureCount \x3d function(value) {\n  jspb.Message.setField(this, 5, value);\n};\n\n\nproto.logs.proto.gws.js.InstallEvent.prototype.clearWorkFailureCount \x3d function() {\n  jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.InstallEvent.prototype.hasWorkFailureCount \x3d function() {\n  return jspb.Message.getField(this, 5) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.logs.proto.gws.js.InstallEvent}\n */\nproto.logs.proto.gws.js.InstallEvent.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.logs.proto.gws.js.InstallEvent, data);\n};\n\n\n\n//# sourceURL\x3dhttps://qs/logs/proto/gws/js/install_event.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="logs/proto/gws/js/service_worker_event.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.logs.proto.gws.js.ServiceWorkerEvent\x27);\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.Message\x27);\ngoog.require(\x27proto.logs.proto.gws.js.FetchEventRecord\x27);\ngoog.require(\x27proto.logs.proto.gws.js.InstallEvent\x27);\n\ngoog.forwardDeclare(\x27proto.search.logging.PwaName\x27);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.logs.proto.gws.js.ServiceWorkerEvent.repeatedFields_, null);\n};\ngoog.inherits(proto.logs.proto.gws.js.ServiceWorkerEvent, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.logs.proto.gws.js.ServiceWorkerEvent.displayName \x3d \x27proto.logs.proto.gws.js.ServiceWorkerEvent\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.repeatedFields_ \x3d [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.logs.proto.gws.js.ServiceWorkerEvent.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.logs.proto.gws.js.ServiceWorkerEvent} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    eventType: jspb.Message.getField(msg, 1),\n    startupTimeMs: jspb.Message.getField(msg, 9),\n    clientId: jspb.Message.getField(msg, 8),\n    pwaName: jspb.Message.getField(msg, 11),\n    moduleIdList: jspb.Message.getRepeatedField(msg, 2),\n    versionHash: jspb.Message.getField(msg, 3),\n    pintoMod: jspb.Message.getField(msg, 4),\n    scriptEvalStartTime: jspb.Message.getField(msg, 5),\n    scriptEvalEndTime: jspb.Message.getField(msg, 6),\n    fetchEventRecord: (f \x3d msg.getFetchEventRecord()) \x26\x26 proto.logs.proto.gws.js.FetchEventRecord.toObject(includeInstance, f),\n    installEvent: (f \x3d msg.getInstallEvent()) \x26\x26 proto.logs.proto.gws.js.InstallEvent.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.logs.proto.gws.js.ServiceWorkerEvent}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.logs.proto.gws.js.ServiceWorkerEvent;\n  return proto.logs.proto.gws.js.ServiceWorkerEvent.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.logs.proto.gws.js.ServiceWorkerEvent} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.logs.proto.gws.js.ServiceWorkerEvent}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setEventType(value);\n      break;\n    case 9:\n      var value \x3d /** @type {number} */ (reader.readInt64());\n      msg.setStartupTimeMs(value);\n      break;\n    case 8:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setClientId(value);\n      break;\n    case 11:\n      var value \x3d /** @type {!proto.search.logging.PwaName} */ (reader.readEnum());\n      msg.setPwaName(value);\n      break;\n    case 2:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.addModuleId(value);\n      break;\n    case 3:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setVersionHash(value);\n      break;\n    case 4:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setPintoMod(value);\n      break;\n    case 5:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setScriptEvalStartTime(value);\n      break;\n    case 6:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setScriptEvalEndTime(value);\n      break;\n    case 7:\n      var value \x3d new proto.logs.proto.gws.js.FetchEventRecord;\n      reader.readMessage(value,proto.logs.proto.gws.js.FetchEventRecord.deserializeBinaryFromReader);\n      msg.setFetchEventRecord(value);\n      break;\n    case 10:\n      var value \x3d new proto.logs.proto.gws.js.InstallEvent;\n      reader.readMessage(value,proto.logs.proto.gws.js.InstallEvent.deserializeBinaryFromReader);\n      msg.setInstallEvent(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.logs.proto.gws.js.ServiceWorkerEvent.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.logs.proto.gws.js.ServiceWorkerEvent} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 9));\n  if (f !\x3d null) {\n    writer.writeInt64(\n      9,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 8));\n  if (f !\x3d null) {\n    writer.writeString(\n      8,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.search.logging.PwaName} */ (jspb.Message.getField(message, 11));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      11,\n      f\n    );\n  }\n  f \x3d message.getModuleIdList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedString(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 5));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      5,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 6));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      6,\n      f\n    );\n  }\n  f \x3d message.getFetchEventRecord();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      7,\n      f,\n      proto.logs.proto.gws.js.FetchEventRecord.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getInstallEvent();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      10,\n      f,\n      proto.logs.proto.gws.js.InstallEvent.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional int32 event_type \x3d 1;\n * @return {?number}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.getEventType \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?number|undefined} value */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.setEventType \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.clearEventType \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.hasEventType \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional int64 startup_time_ms \x3d 9;\n * @return {?number}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.getStartupTimeMs \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 9));\n};\n\n\n/** @param {?number|undefined} value */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.setStartupTimeMs \x3d function(value) {\n  jspb.Message.setField(this, 9, value);\n};\n\n\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.clearStartupTimeMs \x3d function() {\n  jspb.Message.setField(this, 9, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.hasStartupTimeMs \x3d function() {\n  return jspb.Message.getField(this, 9) !\x3d null;\n};\n\n\n/**\n * optional string client_id \x3d 8;\n * @return {?string}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.getClientId \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 8));\n};\n\n\n/** @param {?string|undefined} value */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.setClientId \x3d function(value) {\n  jspb.Message.setField(this, 8, value);\n};\n\n\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.clearClientId \x3d function() {\n  jspb.Message.setField(this, 8, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.hasClientId \x3d function() {\n  return jspb.Message.getField(this, 8) !\x3d null;\n};\n\n\n/**\n * optional search.logging.PwaName pwa_name \x3d 11;\n * @return {!proto.search.logging.PwaName}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.getPwaName \x3d function() {\n  return /** @type {!proto.search.logging.PwaName} */ (jspb.Message.getField(this, 11));\n};\n\n\n/** @param {?proto.search.logging.PwaName|undefined} value */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.setPwaName \x3d function(value) {\n  jspb.Message.setField(this, 11, value);\n};\n\n\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.clearPwaName \x3d function() {\n  jspb.Message.setField(this, 11, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.hasPwaName \x3d function() {\n  return jspb.Message.getField(this, 11) !\x3d null;\n};\n\n\n/**\n * repeated string module_id \x3d 2;\n * @return {!Array\x3cstring\x3e}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.getModuleIdList \x3d function() {\n  return /** @type {!Array\x3cstring\x3e} */ (jspb.Message.getRepeatedField(this, 2));\n};\n\n\n/** @param {Array\x3cstring\x3e|undefined} value */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.setModuleIdList \x3d function(value) {\n  jspb.Message.setField(this, 2, value || []);\n};\n\n\n/**\n * @param {string} value\n * @param {number\x3d} opt_index\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.addModuleId \x3d function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n\n\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.clearModuleIdList \x3d function() {\n  this.setModuleIdList([]);\n};\n\n\n/**\n * optional string version_hash \x3d 3;\n * @return {?string}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.getVersionHash \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?string|undefined} value */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.setVersionHash \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.clearVersionHash \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.hasVersionHash \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional string pinto_mod \x3d 4;\n * @return {?string}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.getPintoMod \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?string|undefined} value */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.setPintoMod \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.clearPintoMod \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.hasPintoMod \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional int32 script_eval_start_time \x3d 5;\n * @return {?number}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.getScriptEvalStartTime \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 5));\n};\n\n\n/** @param {?number|undefined} value */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.setScriptEvalStartTime \x3d function(value) {\n  jspb.Message.setField(this, 5, value);\n};\n\n\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.clearScriptEvalStartTime \x3d function() {\n  jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.hasScriptEvalStartTime \x3d function() {\n  return jspb.Message.getField(this, 5) !\x3d null;\n};\n\n\n/**\n * optional int32 script_eval_end_time \x3d 6;\n * @return {?number}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.getScriptEvalEndTime \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 6));\n};\n\n\n/** @param {?number|undefined} value */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.setScriptEvalEndTime \x3d function(value) {\n  jspb.Message.setField(this, 6, value);\n};\n\n\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.clearScriptEvalEndTime \x3d function() {\n  jspb.Message.setField(this, 6, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.hasScriptEvalEndTime \x3d function() {\n  return jspb.Message.getField(this, 6) !\x3d null;\n};\n\n\n/**\n * optional FetchEventRecord fetch_event_record \x3d 7;\n * @return {?proto.logs.proto.gws.js.FetchEventRecord}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.getFetchEventRecord \x3d function() {\n  return /** @type{?proto.logs.proto.gws.js.FetchEventRecord} */ (\n    jspb.Message.getWrapperField(this, proto.logs.proto.gws.js.FetchEventRecord, 7));\n};\n\n\n/** @param {?proto.logs.proto.gws.js.FetchEventRecord|undefined} value */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.setFetchEventRecord \x3d function(value) {\n  jspb.Message.setWrapperField(this, 7, value);\n};\n\n\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.clearFetchEventRecord \x3d function() {\n  this.setFetchEventRecord(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.hasFetchEventRecord \x3d function() {\n  return jspb.Message.getField(this, 7) !\x3d null;\n};\n\n\n/**\n * optional InstallEvent install_event \x3d 10;\n * @return {?proto.logs.proto.gws.js.InstallEvent}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.getInstallEvent \x3d function() {\n  return /** @type{?proto.logs.proto.gws.js.InstallEvent} */ (\n    jspb.Message.getWrapperField(this, proto.logs.proto.gws.js.InstallEvent, 10));\n};\n\n\n/** @param {?proto.logs.proto.gws.js.InstallEvent|undefined} value */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.setInstallEvent \x3d function(value) {\n  jspb.Message.setWrapperField(this, 10, value);\n};\n\n\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.clearInstallEvent \x3d function() {\n  this.setInstallEvent(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.prototype.hasInstallEvent \x3d function() {\n  return jspb.Message.getField(this, 10) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.logs.proto.gws.js.ServiceWorkerEvent}\n */\nproto.logs.proto.gws.js.ServiceWorkerEvent.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.logs.proto.gws.js.ServiceWorkerEvent, data);\n};\n\n\n\n//# sourceURL\x3dhttps://qs/logs/proto/gws/js/service_worker_event.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="logs/proto/gws/js/experimental_event.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.logs.proto.gws.js.ExperimentalEvent\x27);\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.Message\x27);\ngoog.require(\x27proto.logs.proto.gws.js.PerformanceTimings\x27);\ngoog.require(\x27proto.logs.proto.gws.js.ServiceWorkerEvent\x27);\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.logs.proto.gws.js.ExperimentalEvent \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.logs.proto.gws.js.ExperimentalEvent, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.logs.proto.gws.js.ExperimentalEvent.displayName \x3d \x27proto.logs.proto.gws.js.ExperimentalEvent\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.logs.proto.gws.js.ExperimentalEvent.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.logs.proto.gws.js.ExperimentalEvent.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.logs.proto.gws.js.ExperimentalEvent} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.ExperimentalEvent.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    serviceWorkerEvent: (f \x3d msg.getServiceWorkerEvent()) \x26\x26 proto.logs.proto.gws.js.ServiceWorkerEvent.toObject(includeInstance, f),\n    performanceTimings: (f \x3d msg.getPerformanceTimings()) \x26\x26 proto.logs.proto.gws.js.PerformanceTimings.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.logs.proto.gws.js.ExperimentalEvent}\n */\nproto.logs.proto.gws.js.ExperimentalEvent.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.logs.proto.gws.js.ExperimentalEvent;\n  return proto.logs.proto.gws.js.ExperimentalEvent.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.logs.proto.gws.js.ExperimentalEvent} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.logs.proto.gws.js.ExperimentalEvent}\n */\nproto.logs.proto.gws.js.ExperimentalEvent.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d new proto.logs.proto.gws.js.ServiceWorkerEvent;\n      reader.readMessage(value,proto.logs.proto.gws.js.ServiceWorkerEvent.deserializeBinaryFromReader);\n      msg.setServiceWorkerEvent(value);\n      break;\n    case 2:\n      var value \x3d new proto.logs.proto.gws.js.PerformanceTimings;\n      reader.readMessage(value,proto.logs.proto.gws.js.PerformanceTimings.deserializeBinaryFromReader);\n      msg.setPerformanceTimings(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.logs.proto.gws.js.ExperimentalEvent.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.logs.proto.gws.js.ExperimentalEvent.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.logs.proto.gws.js.ExperimentalEvent} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.ExperimentalEvent.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d message.getServiceWorkerEvent();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.logs.proto.gws.js.ServiceWorkerEvent.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getPerformanceTimings();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.logs.proto.gws.js.PerformanceTimings.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional ServiceWorkerEvent service_worker_event \x3d 1;\n * @return {?proto.logs.proto.gws.js.ServiceWorkerEvent}\n */\nproto.logs.proto.gws.js.ExperimentalEvent.prototype.getServiceWorkerEvent \x3d function() {\n  return /** @type{?proto.logs.proto.gws.js.ServiceWorkerEvent} */ (\n    jspb.Message.getWrapperField(this, proto.logs.proto.gws.js.ServiceWorkerEvent, 1));\n};\n\n\n/** @param {?proto.logs.proto.gws.js.ServiceWorkerEvent|undefined} value */\nproto.logs.proto.gws.js.ExperimentalEvent.prototype.setServiceWorkerEvent \x3d function(value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\n\nproto.logs.proto.gws.js.ExperimentalEvent.prototype.clearServiceWorkerEvent \x3d function() {\n  this.setServiceWorkerEvent(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.ExperimentalEvent.prototype.hasServiceWorkerEvent \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional PerformanceTimings performance_timings \x3d 2;\n * @return {?proto.logs.proto.gws.js.PerformanceTimings}\n */\nproto.logs.proto.gws.js.ExperimentalEvent.prototype.getPerformanceTimings \x3d function() {\n  return /** @type{?proto.logs.proto.gws.js.PerformanceTimings} */ (\n    jspb.Message.getWrapperField(this, proto.logs.proto.gws.js.PerformanceTimings, 2));\n};\n\n\n/** @param {?proto.logs.proto.gws.js.PerformanceTimings|undefined} value */\nproto.logs.proto.gws.js.ExperimentalEvent.prototype.setPerformanceTimings \x3d function(value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n\n\nproto.logs.proto.gws.js.ExperimentalEvent.prototype.clearPerformanceTimings \x3d function() {\n  this.setPerformanceTimings(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.ExperimentalEvent.prototype.hasPerformanceTimings \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.logs.proto.gws.js.ExperimentalEvent}\n */\nproto.logs.proto.gws.js.ExperimentalEvent.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.logs.proto.gws.js.ExperimentalEvent, data);\n};\n\n\n\n//# sourceURL\x3dhttps://qs/logs/proto/gws/js/experimental_event.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="logs/proto/gws/js/gws_js_log.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.logs.proto.gws.js.GwsJsLog\x27);\ngoog.provide(\x27proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent\x27);\ngoog.provide(\x27proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.EventType\x27);\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.Message\x27);\ngoog.require(\x27proto.logs.proto.gws.js.ExperimentalEvent\x27);\ngoog.require(\x27search.logging.CacheOverflow\x27);\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.logs.proto.gws.js.GwsJsLog \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.logs.proto.gws.js.GwsJsLog, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.logs.proto.gws.js.GwsJsLog.displayName \x3d \x27proto.logs.proto.gws.js.GwsJsLog\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.logs.proto.gws.js.GwsJsLog.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.logs.proto.gws.js.GwsJsLog.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.logs.proto.gws.js.GwsJsLog} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.GwsJsLog.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    serviceWorkerLifecycleEvent: (f \x3d msg.getServiceWorkerLifecycleEvent()) \x26\x26 proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.toObject(includeInstance, f),\n    eventTimeMs: jspb.Message.getField(msg, 2),\n    eventElapsedTimeUsec: jspb.Message.getField(msg, 3),\n    experimentalEvent: (f \x3d msg.getExperimentalEvent()) \x26\x26 proto.logs.proto.gws.js.ExperimentalEvent.toObject(includeInstance, f),\n    cacheOverflowLog: (f \x3d msg.getCacheOverflowLog()) \x26\x26 search.logging.CacheOverflow.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.logs.proto.gws.js.GwsJsLog}\n */\nproto.logs.proto.gws.js.GwsJsLog.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.logs.proto.gws.js.GwsJsLog;\n  return proto.logs.proto.gws.js.GwsJsLog.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.logs.proto.gws.js.GwsJsLog} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.logs.proto.gws.js.GwsJsLog}\n */\nproto.logs.proto.gws.js.GwsJsLog.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d new proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent;\n      reader.readMessage(value,proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.deserializeBinaryFromReader);\n      msg.setServiceWorkerLifecycleEvent(value);\n      break;\n    case 2:\n      var value \x3d /** @type {number} */ (reader.readUint64());\n      msg.setEventTimeMs(value);\n      break;\n    case 3:\n      var value \x3d /** @type {number} */ (reader.readUint64());\n      msg.setEventElapsedTimeUsec(value);\n      break;\n    case 4:\n      var value \x3d new proto.logs.proto.gws.js.ExperimentalEvent;\n      reader.readMessage(value,proto.logs.proto.gws.js.ExperimentalEvent.deserializeBinaryFromReader);\n      msg.setExperimentalEvent(value);\n      break;\n    case 5:\n      var value \x3d new search.logging.CacheOverflow;\n      reader.readMessage(value,search.logging.CacheOverflow.deserializeBinaryFromReader);\n      msg.setCacheOverflowLog(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.logs.proto.gws.js.GwsJsLog.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.logs.proto.gws.js.GwsJsLog.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.logs.proto.gws.js.GwsJsLog} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.GwsJsLog.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d message.getServiceWorkerLifecycleEvent();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.serializeBinaryToWriter\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeUint64(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeUint64(\n      3,\n      f\n    );\n  }\n  f \x3d message.getExperimentalEvent();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      4,\n      f,\n      proto.logs.proto.gws.js.ExperimentalEvent.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getCacheOverflowLog();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      5,\n      f,\n      search.logging.CacheOverflow.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional ServiceWorkerLifecycleEvent service_worker_lifecycle_event \x3d 1;\n * @return {?proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent}\n */\nproto.logs.proto.gws.js.GwsJsLog.prototype.getServiceWorkerLifecycleEvent \x3d function() {\n  return /** @type{?proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent} */ (\n    jspb.Message.getWrapperField(this, proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent, 1));\n};\n\n\n/** @param {?proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent|undefined} value */\nproto.logs.proto.gws.js.GwsJsLog.prototype.setServiceWorkerLifecycleEvent \x3d function(value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\n\nproto.logs.proto.gws.js.GwsJsLog.prototype.clearServiceWorkerLifecycleEvent \x3d function() {\n  this.setServiceWorkerLifecycleEvent(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.GwsJsLog.prototype.hasServiceWorkerLifecycleEvent \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional uint64 event_time_ms \x3d 2;\n * @return {?number}\n */\nproto.logs.proto.gws.js.GwsJsLog.prototype.getEventTimeMs \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?number|undefined} value */\nproto.logs.proto.gws.js.GwsJsLog.prototype.setEventTimeMs \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.logs.proto.gws.js.GwsJsLog.prototype.clearEventTimeMs \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.GwsJsLog.prototype.hasEventTimeMs \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional uint64 event_elapsed_time_usec \x3d 3;\n * @return {?number}\n */\nproto.logs.proto.gws.js.GwsJsLog.prototype.getEventElapsedTimeUsec \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?number|undefined} value */\nproto.logs.proto.gws.js.GwsJsLog.prototype.setEventElapsedTimeUsec \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.logs.proto.gws.js.GwsJsLog.prototype.clearEventElapsedTimeUsec \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.GwsJsLog.prototype.hasEventElapsedTimeUsec \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional ExperimentalEvent experimental_event \x3d 4;\n * @return {?proto.logs.proto.gws.js.ExperimentalEvent}\n */\nproto.logs.proto.gws.js.GwsJsLog.prototype.getExperimentalEvent \x3d function() {\n  return /** @type{?proto.logs.proto.gws.js.ExperimentalEvent} */ (\n    jspb.Message.getWrapperField(this, proto.logs.proto.gws.js.ExperimentalEvent, 4));\n};\n\n\n/** @param {?proto.logs.proto.gws.js.ExperimentalEvent|undefined} value */\nproto.logs.proto.gws.js.GwsJsLog.prototype.setExperimentalEvent \x3d function(value) {\n  jspb.Message.setWrapperField(this, 4, value);\n};\n\n\nproto.logs.proto.gws.js.GwsJsLog.prototype.clearExperimentalEvent \x3d function() {\n  this.setExperimentalEvent(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.GwsJsLog.prototype.hasExperimentalEvent \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional CacheOverflow cache_overflow_log \x3d 5;\n * @return {?search.logging.CacheOverflow}\n */\nproto.logs.proto.gws.js.GwsJsLog.prototype.getCacheOverflowLog \x3d function() {\n  return /** @type{?search.logging.CacheOverflow} */ (\n    jspb.Message.getWrapperField(this, search.logging.CacheOverflow, 5));\n};\n\n\n/** @param {?search.logging.CacheOverflow|undefined} value */\nproto.logs.proto.gws.js.GwsJsLog.prototype.setCacheOverflowLog \x3d function(value) {\n  jspb.Message.setWrapperField(this, 5, value);\n};\n\n\nproto.logs.proto.gws.js.GwsJsLog.prototype.clearCacheOverflowLog \x3d function() {\n  this.setCacheOverflowLog(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.GwsJsLog.prototype.hasCacheOverflowLog \x3d function() {\n  return jspb.Message.getField(this, 5) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.logs.proto.gws.js.GwsJsLog}\n */\nproto.logs.proto.gws.js.GwsJsLog.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.logs.proto.gws.js.GwsJsLog, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.logs.proto.gws.js.ServiceWorkerLifecycleEvent \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.displayName \x3d \x27proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    eventType: jspb.Message.getField(msg, 1)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent}\n */\nproto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent;\n  return proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent}\n */\nproto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {!proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.EventType} */ (reader.readEnum());\n      msg.setEventType(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {!proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.EventType} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.EventType \x3d {\n  INSTALL_EVENT: 0,\n  ACTIVATE_EVENT: 1,\n  EVICTION_EVENT: 2,\n  REGISTER_SUCCESS_EVENT: 3,\n  REGISTER_FAIL_EVENT: 4\n};\n\n/**\n * optional EventType event_type \x3d 1;\n * @return {!proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.EventType}\n */\nproto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.prototype.getEventType \x3d function() {\n  return /** @type {!proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.EventType} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.EventType|undefined} value */\nproto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.prototype.setEventType \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.prototype.clearEventType \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.prototype.hasEventType \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent}\n */\nproto.logs.proto.gws.js.ServiceWorkerLifecycleEvent.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.logs.proto.gws.js.ServiceWorkerLifecycleEvent, data);\n};\n\n\n\n//# sourceURL\x3dhttps://qs/logs/proto/gws/js/gws_js_log.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="logs/proto/toolbelt/toolbelt_extensions.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.toolbelt.DroppedKeyGroup\x27);\ngoog.provide(\x27proto.toolbelt.DroppedKeyGroup.DROPCODE\x27);\ngoog.provide(\x27proto.toolbelt.ToolData\x27);\ngoog.provide(\x27proto.toolbelt.ToolbeltExtensionsProto\x27);\ngoog.provide(\x27proto.toolbelt.ToolbeltExtensionsProto.OPENED_STATE\x27);\ngoog.provide(\x27proto.toolbelt.ToolbeltTools\x27);\ngoog.provide(\x27proto.toolbelt.ToolbeltTools.TOOLS\x27);\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.Message\x27);\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.toolbelt.DroppedKeyGroup \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.toolbelt.DroppedKeyGroup.repeatedFields_, null);\n};\ngoog.inherits(proto.toolbelt.DroppedKeyGroup, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.toolbelt.DroppedKeyGroup.displayName \x3d \x27proto.toolbelt.DroppedKeyGroup\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nproto.toolbelt.DroppedKeyGroup.repeatedFields_ \x3d [2];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.toolbelt.DroppedKeyGroup.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.toolbelt.DroppedKeyGroup.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.toolbelt.DroppedKeyGroup} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.toolbelt.DroppedKeyGroup.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    dropCode: jspb.Message.getField(msg, 1),\n    droppedKeyList: jspb.Message.getRepeatedField(msg, 2)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.toolbelt.DroppedKeyGroup}\n */\nproto.toolbelt.DroppedKeyGroup.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.toolbelt.DroppedKeyGroup;\n  return proto.toolbelt.DroppedKeyGroup.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.toolbelt.DroppedKeyGroup} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.toolbelt.DroppedKeyGroup}\n */\nproto.toolbelt.DroppedKeyGroup.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setDropCode(value);\n      break;\n    case 2:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.addDroppedKey(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.toolbelt.DroppedKeyGroup.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.toolbelt.DroppedKeyGroup.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.toolbelt.DroppedKeyGroup} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.toolbelt.DroppedKeyGroup.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {number} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      1,\n      f\n    );\n  }\n  f \x3d message.getDroppedKeyList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.toolbelt.DroppedKeyGroup.DROPCODE \x3d {\n  INVALID_KEY: 0,\n  DISABLED_TOOL: 1,\n  INVALID_VALUE: 2,\n  INCOMPATIBLE_TOOL: 3,\n  TRIGGERING_LIMIT: 4,\n  VALUE_OVERRIDDEN: 5,\n  WRONG_PLACE_IN_URL: 6,\n  NOT_ALLOWED_FOR_NON_UNIVERSAL_REQUEST: 7\n};\n\n/**\n * required int32 drop_code \x3d 1;\n * @return {number}\n */\nproto.toolbelt.DroppedKeyGroup.prototype.getDropCode \x3d function() {\n  return /** @type {number} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?number|undefined} value */\nproto.toolbelt.DroppedKeyGroup.prototype.setDropCode \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.toolbelt.DroppedKeyGroup.prototype.clearDropCode \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.toolbelt.DroppedKeyGroup.prototype.hasDropCode \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * repeated string dropped_key \x3d 2;\n * @return {!Array\x3cstring\x3e}\n */\nproto.toolbelt.DroppedKeyGroup.prototype.getDroppedKeyList \x3d function() {\n  return /** @type {!Array\x3cstring\x3e} */ (jspb.Message.getRepeatedField(this, 2));\n};\n\n\n/** @param {Array\x3cstring\x3e|undefined} value */\nproto.toolbelt.DroppedKeyGroup.prototype.setDroppedKeyList \x3d function(value) {\n  jspb.Message.setField(this, 2, value || []);\n};\n\n\n/**\n * @param {string} value\n * @param {number\x3d} opt_index\n */\nproto.toolbelt.DroppedKeyGroup.prototype.addDroppedKey \x3d function(value, opt_index) {\n  jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n\n\nproto.toolbelt.DroppedKeyGroup.prototype.clearDroppedKeyList \x3d function() {\n  this.setDroppedKeyList([]);\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.toolbelt.DroppedKeyGroup}\n */\nproto.toolbelt.DroppedKeyGroup.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.toolbelt.DroppedKeyGroup, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.toolbelt.ToolbeltTools \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.toolbelt.ToolbeltTools, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.toolbelt.ToolbeltTools.displayName \x3d \x27proto.toolbelt.ToolbeltTools\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.toolbelt.ToolbeltTools.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.toolbelt.ToolbeltTools.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.toolbelt.ToolbeltTools} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.toolbelt.ToolbeltTools.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.toolbelt.ToolbeltTools}\n */\nproto.toolbelt.ToolbeltTools.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.toolbelt.ToolbeltTools;\n  return proto.toolbelt.ToolbeltTools.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.toolbelt.ToolbeltTools} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.toolbelt.ToolbeltTools}\n */\nproto.toolbelt.ToolbeltTools.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.toolbelt.ToolbeltTools.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.toolbelt.ToolbeltTools.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.toolbelt.ToolbeltTools} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.toolbelt.ToolbeltTools.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n};\n\n\n/**\n * @enum {number}\n */\nproto.toolbelt.ToolbeltTools.TOOLS \x3d {\n  NO_TOOLS: 0,\n  APPLICATIONS_MODE: 200,\n  APPLICATIONS_MODE_OPERATING_SYSTEM: 222,\n  APPLICATIONS_MODE_PRICE: 208,\n  ARCHIVE_FILTER: 97,\n  ARCHIVE_PRICE_RESTRICT: 195,\n  AUTHORS_NAME_RESTRICT: 167,\n  BLOG_SEARCH_TYPE: 106,\n  BLOGS_MODE: 1,\n  BOOKS_DATE_TYPE: 184,\n  BOOKS_FORMAT_TYPE: 132,\n  BOOKS_INSTITUTION: 180,\n  BOOKS_LEAN_OPTION: 201,\n  BOOKS_MAGAZINE_SERIAL_RESTRICT: 105,\n  BOOKS_MODE: 2,\n  BOOKS_SUBJECTS: 112,\n  BOOKS_VIEWABILITY: 3,\n  BOOKS_VOLUME_ID: 182,\n  BOOKS_VOLUME_SUBTYPE: 189,\n  BOOKS_VOLUME_TYPE: 4,\n  BREAKOUT_EASTER_EGG: 230,\n  CATEGORY_REFINEMENT: 5,\n  CLIR_MODE: 6,\n  CLOSED_CAPTIONED_FILTER: 7,\n  COMMERCIAL_DEMOTION: 8,\n  COMMERCIAL_PROMOTION: 9,\n  COMMERCIAL_PROMOTION_WITH_PRICES: 10,\n  COUNTRY_RESTRICT: 85,\n  CUSTOM_DATE_FILTER: 11,\n  CUSTOM_LOCATION: 12,\n  DATE_FILTER: 13,\n  DATE_TYPE: 80,\n  DICTIONARY: 104,\n  DISCUSSIONS_MODE: 73,\n  DISCUSSION_TYPE_FILTER: 74,\n  DURATION_FILTER: 14,\n  EPISODE_FILTER: 90,\n  EVENTS_MODE: 98,\n  EXIF_CAMERA: 169,\n  EXIF_CAPTURE_MONTH: 170,\n  EXIF_EXPOSURE_VALUE: 171,\n  EXIF_FOCAL_LENGTH: 172,\n  FEATURED_IMAGES: 271,\n  FINANCE_MODE: 206,\n  FORUMS_MODE: 15,\n  FLIGHTS_MODE: 183,\n  FLIPPY_MODE: 186,\n  FRIEND_MODE: 16,\n  FRIEND_RESTRICT: 17,\n  HIGH_QUALITY_FILTER: 18,\n  HORIZON_REFINEMENTS: 270,\n  HOTPOT_FILTER: 139,\n  IMAGE_ASPECT_RATIO: 19,\n  IMAGE_COLLECTIONS_FROM_USER: 220,\n  IMAGE_COLLECTION_VIEW: 221,\n  IMAGE_COLOR: 20,\n  IMAGE_FILETYPE: 21,\n  IMAGE_FRIEND_RESTRICT: 87,\n  IMAGE_RICH_METADATA: 284,\n  IMAGE_SEARCH_CLUSTER: 160,\n  IMAGE_SIZE: 22,\n  IMAGE_TYPE: 23,\n  IMAGES_MODE: 24,\n  IMAGES_FROM_THE_PAGE: 25,\n  IMAGES_OVERLAY: 111,\n  IN_DEPTH_ARTICLES: 236,\n  INITIAL_AUTO_RESTRICT: 263,\n  ITEM_MODE: 162,\n  ITEM_SELECTION: 155,\n  KNOWLEDGE_APPBAR_CONTROLS: 232,\n  KNOWLEDGE_EPHEMERAL_CONTROLS: 287,\n  KNOWLEDGE_MODE: 26,\n  LANGUAGE_RESTRICT: 86,\n  LITERAL: 199,\n  LOCAL_FILTER: 223,\n  LOCAL_MODE: 241,\n  LOCAL_PIVOTS: 249,\n  LOCAL_REFINEMENTS: 269,\n  LOCAL_SORT: 257,\n  LOCATION: 27,\n  LOCATION_GRANULARITY: 28,\n  MAP_MODE: 228,\n  MICROBLOGS_MODE: 29,\n  MOBILE_RESTRICT_MODE: 218,\n  MONKEY_TOOL: 30,\n  MUSIC_ALBUM_RESTRICT: 152,\n  MUSIC_ARTIST_RESTRICT: 153,\n  NEWS_MODE: 31,\n  NEWS_MODE_SHOW_DUPLICATES: 154,\n  NEWS_MODE_SORT: 246,\n  NEWS_PROFANITY: 264,\n  NEWS_READING_LEVEL: 265,\n  NEWS_READING_TIME: 266,\n  NEWS_RESULT_TYPE: 103,\n  NUMBER_OF_POSTS_FILTER: 77,\n  PAGE_PREVIEWS: 32,\n  PATENTS_MODE: 81,\n  PATENT_DATE_TYPE: 161,\n  PATENT_OFFICE: 219,\n  PATENT_STATUS: 82,\n  PATENT_TYPE: 159,\n  PEOPLE_SEARCH: 107,\n  PEOPLE_SEARCH_AUTHORSHIP: 215,\n  PEOPLE_SEARCH_ID: 108,\n  PEOPLE_SEARCH_ID_STICKY: 179,\n  PEOPLE_SEARCH_RELEVANT_FEEDBACK: 181,\n  PEOPLE_SEARCH_RESULT_RESTRICT: 113,\n  PERSONAL_MODE: 282,\n  PHONE_MODE: 267,\n  PLACES_MODE: 120,\n  PLACES_MODE_DISTANCE: 202,\n  PLACES_MODE_PRICE_LEVEL: 203,\n  PLACES_MODE_OPENING_HOURS: 204,\n  PLACES_MODE_STAR_RATING: 205,\n  PRICES_FROM_THE_PAGE: 33,\n  PRODUCT_WEB_REFINEMENT: 165,\n  PRODUCTS_AGE_GROUP_RESTRICT: 217,\n  PRODUCTS_BRAND_RESTRICT: 121,\n  PRODUCTS_CATEGORY_RESTRICT: 122,\n  PRODUCTS_CHECKOUT_RESTRICT: 125,\n  PRODUCTS_COLOR_RESTRICT: 190,\n  PRODUCTS_COLOR_VALUE: 191,\n  PRODUCTS_DEAL_RESTRICT: 207,\n  PRODUCTS_DYNAMIC_TEXT_RESTRICT0: 133,\n  PRODUCTS_DYNAMIC_TEXT_RESTRICT1: 134,\n  PRODUCTS_DYNAMIC_TEXT_RESTRICT2: 135,\n  PRODUCTS_DYNAMIC_TEXT_RESTRICT3: 136,\n  PRODUCTS_DYNAMIC_TEXT_RESTRICT4: 137,\n  PRODUCTS_DYNAMIC_TEXT_RESTRICT5: 210,\n  PRODUCTS_DYNAMIC_TEXT_RESTRICT6: 211,\n  PRODUCTS_DYNAMIC_TEXT_RESTRICT7: 212,\n  PRODUCTS_DYNAMIC_TEXT_RESTRICT8: 213,\n  PRODUCTS_DYNAMIC_TEXT_RESTRICT9: 214,\n  PRODUCTS_FREE_SHIPPING_RESTRICT: 126,\n  PRODUCTS_GENDER_RESTRICT: 198,\n  PRODUCTS_IN_STOCK_RESTRICT: 157,\n  PRODUCTS_LOCAL_AVAILABILITY_RESTRICT: 140,\n  PRODUCTS_LOYALTY_POINTS_RESTRICT: 185,\n  PRODUCTS_MANUALLY_RESTRICTED: 244,\n  PRODUCTS_MODE: 102,\n  PRODUCTS_PRODUCT_USAGE_RESTRICT: 289,\n  PRODUCTS_NEARBY_RESTRICT: 158,\n  PRODUCTS_NEW_ITEMS_RESTRICT: 127,\n  PRODUCTS_DEALS_RESTRICT: 277,\n  PRODUCTS_ORDERING: 116,\n  PRODUCTS_PRICE_RESTRICT: 123,\n  PRODUCTS_SALE_RESTRICT: 250,\n  PRODUCTS_PRODUCT_ASPECT_RESTRICT: 248,\n  PRODUCTS_AVG_RATING_RESTRICT: 253,\n  PRODUCTS_STORE_RESTRICT: 124,\n  PRODUCTS_PROMOTION_RESTRICT: 283,\n  PRODUCTS_PRICE_DROP_RESTRICT: 290,\n  PRODUCTS_SALES_PRICE_RESTRICT: 291,\n  PRODUCTS_SELLER_RESTRICT: 138,\n  PRODUCTS_USED_ITEMS_RESTRICT: 209,\n  PRODUCTS_WORK_ID_RESTRICT: 110,\n  PRODUCTS_TOP_TREATMENT_RESTRICT: 292,\n  PRODUCTS_TRUSTED_MERCHANT_RESTRICT: 285,\n  PRODUCTS_SALES_RESTRICT: 286,\n  PRODUCTS_EVENTS_BROWSEONOMY_RESTRICT: 294,\n  PRODUCTS_FIT_RESTRICT: 293,\n  PROFILE_SEARCH_RESTRICT: 151,\n  READING_LEVEL: 130,\n  READING_LEVEL_SELECTOR: 131,\n  REALTIME_CONVERSATION_FOCUS_URL: 118,\n  REALTIME_CONVERSATION_ID: 119,\n  REALTIME_CONVERSATION_RESTRICT: 117,\n  REALTIME_MODE: 34,\n  RECENT_MODE: 35,\n  RECIPES_MODE: 99,\n  RECIPES_MODE_TOTAL_TIME: 100,\n  RECIPES_MODE_CALORIES: 101,\n  RECIPES_MODE_INGREDIENTS0: 141,\n  RECIPES_MODE_INGREDIENTS1: 142,\n  RECIPES_MODE_INGREDIENTS2: 143,\n  RECIPES_MODE_INGREDIENTS3: 144,\n  RECIPES_MODE_INGREDIENTS4: 145,\n  RECIPES_MODE_INGREDIENTS5: 146,\n  RECIPES_MODE_INGREDIENTS6: 147,\n  RECIPES_MODE_INGREDIENTS7: 148,\n  RECIPES_MODE_INGREDIENTS8: 149,\n  RECIPES_MODE_INGREDIENTS9: 150,\n  RELATED_IMAGES: 243,\n  REVIEWS_MODE: 36,\n  SEARCH_BY_IMAGE: 164,\n  SEARCH_CLUES: 37,\n  SEARCH_USAGE_RIGHTS: 76,\n  SEASON_FILTER: 89,\n  SHOPPING_PRODUCT_DETAILS: 237,\n  SHOPPING_SCENARIO: 268,\n  SIMILAR_IMAGES: 79,\n  SIMILAR_IMAGES_TYPE: 115,\n  SIMILAR_PAGES: 109,\n  SORT_BY_DATE: 38,\n  SORT_BY_DATE_OLDEST: 39,\n  SOURCE_FILTER: 72,\n  STRUCTURED_SNIPPETS: 40,\n  SYMPTOM_SEARCH: 187,\n  TIMELINE: 41,\n  TV_SHOW_FILTER: 88,\n  VIDEO_EMBEDDABLE_FILTER: 216,\n  VIDEO_MODE: 42,\n  VIEW: 43,\n  VISUAL_REFINEMENT_PREV_STATE: 256,\n  WEB_HISTORY_HAVE_NOT_VISITED: 44,\n  WEB_HISTORY_HAVE_VISITED: 45,\n  WONDER_WHEEL: 46,\n  AUTHORS_NAME_RESTRICT_KEY: 168,\n  CATEGORY_REFINEMENT_CATEGORIES: 47,\n  CLIR_MODE_ACTION: 48,\n  CLIR_MODE_SOURCE_LANGUAGE: 49,\n  CLIR_MODE_STYLE: 163,\n  CLIR_MODE_TARGET_LANGUAGES: 50,\n  CLIR_MODE_TRANSLATIONS: 51,\n  CUSTOM_DATE_FILTER_MAX: 52,\n  CUSTOM_DATE_FILTER_MIN: 53,\n  CUSTOM_LOCATION_LOC: 54,\n  EPISODE_COUNT: 92,\n  EXIF_CAPTURE_MONTH_MAX: 173,\n  EXIF_CAPTURE_MONTH_MIN: 174,\n  EXIF_EXPOSURE_VALUE_MAX: 175,\n  EXIF_EXPOSURE_VALUE_MIN: 176,\n  EXIF_FOCAL_LENGTH_MAX: 177,\n  EXIF_FOCAL_LENGTH_MIN: 178,\n  IMAGE_SIZE_HEIGHT: 55,\n  IMAGE_SIZE_WIDTH: 56,\n  IMAGE_SIZES_LARGER_THAN: 57,\n  IMAGE_SPECIFIC_COLOR: 58,\n  ITEM_CATEGORY: 156,\n  KNOWLEDGE_APPBAR_EXPANDED_CONTROL: 233,\n  KNOWLEDGE_APPBAR_SORT_ORDER: 234,\n  KNOWLEDGE_EPHEMERAL_PARTICIPANTS_STATE: 288,\n  LOCAL_FILTER_DISTANCE: 238,\n  LOCAL_FILTER_DISTANCE_ORIGIN: 258,\n  LOCAL_FILTER_DISTANCE_ORIGIN_LAT_LNG: 261,\n  LOCAL_FILTER_HOTEL_AMENITIES: 254,\n  LOCAL_FILTER_HOTEL_AMENITIES_ITEMS: 260,\n  LOCAL_FILTER_HOTEL_CHAINS: 273,\n  LOCAL_FILTER_HOTEL_CHAINS_ITEMS: 274,\n  LOCAL_FILTER_HOTEL_CLASS: 235,\n  LOCAL_FILTER_HOTEL_DATES: 247,\n  LOCAL_FILTER_HOTEL_DEALS: 262,\n  LOCAL_FILTER_HOTEL_MULTI_CLASS: 279,\n  LOCAL_FILTER_HOTEL_OCCUPANCY: 276,\n  LOCAL_FILTER_HOTEL_TRIP_TYPE: 275,\n  LOCAL_FILTER_LOCATION: 278,\n  LOCAL_FILTER_LODGING_TYPE: 281,\n  LOCAL_FILTER_MAXIMUM_HOTEL_PRICE: 239,\n  LOCAL_FILTER_MAXIMUM_HOTEL_PRICE_CURRENCY: 252,\n  LOCAL_FILTER_MAXIMUM_HOTEL_PRICE_ITEMS: 242,\n  LOCAL_FILTER_MINIMUM_HOTEL_PRICE: 240,\n  LOCAL_FILTER_MINIMUM_RATING: 224,\n  LOCAL_FILTER_MINIMUM_STAR_RATING: 231,\n  LOCAL_FILTER_PERSISTENT_QUERY_STATE: 272,\n  LOCAL_FILTER_POI: 255,\n  LOCAL_FILTER_PRICE_LEVELS: 225,\n  LOCAL_FILTER_OPEN_DATE: 259,\n  LOCAL_FILTER_OPEN_DAY: 226,\n  LOCAL_FILTER_OPEN_HOUR: 227,\n  LOCAL_FILTER_TOPICAL_REFINEMENTS: 229,\n  LOCAL_FILTER_UI_STYLE: 251,\n  LOCAL_FILTER_VISIT_HISTORY: 280,\n  LOCAL_FILTER_ZAGAT: 245,\n  MICROBLOGS_HISTOGRAM_END_TIME: 93,\n  MICROBLOGS_HISTOGRAM_START_TIME: 94,\n  MICROBLOGS_RESULT_END_TIME: 95,\n  MICROBLOGS_RESULT_START_TIME: 96,\n  MICROBLOGS_STREAMING_VIEW: 75,\n  MONKEY_KEY0: 59,\n  MONKEY_KEY1: 60,\n  MONKEY_KEY2: 61,\n  MONKEY_KEY3: 62,\n  MONKEY_KEY4: 63,\n  PEOPLE_SEARCH_IMAGE_URL_BASE: 196,\n  PEOPLE_SEARCH_NAME_FOR_SNIPPET: 114,\n  PEOPLE_SEARCH_NAME_FOR_SNIPPET_STICKY: 197,\n  PRICE_RANGE_MAX: 83,\n  PRICE_RANGE_MIN: 84,\n  PRODUCT_WEB_REFINEMENT_DATA: 166,\n  PRODUCTS_PRICE_RANGE_MAX: 128,\n  PRODUCTS_PRICE_RANGE_MIN: 129,\n  SEARCH_CLUES_EXPECTED_QUERY: 64,\n  SEARCH_CLUES_FROM_BOTTOM_REFINEMENTS: 65,\n  SEARCH_CLUES_SUGGESTION_QUERY: 66,\n  SEARCH_CLUES_SUGGESTIONS: 67,\n  SEASON_COUNT: 91,\n  SYMPTOM_SEARCH_KEYWORD_SUGGESTIONS: 193,\n  SYMPTOM_SEARCH_ORIGINAL_QUERY: 188,\n  SYMPTOM_SEARCH_SELECTED_CONDITION: 194,\n  SYMPTOM_SEARCH_SHOW_DEFINITION: 192,\n  TIMELINE_HIGH_DATE: 68,\n  TIMELINE_LOW_DATE: 69,\n  TIMELINE_NUM_RESULTS: 78,\n  TIMELINE_USER_HIGH_DATE: 70,\n  TIMELINE_USER_LOW_DATE: 71\n};\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.toolbelt.ToolbeltTools}\n */\nproto.toolbelt.ToolbeltTools.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.toolbelt.ToolbeltTools, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.toolbelt.ToolData \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.toolbelt.ToolData, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.toolbelt.ToolData.displayName \x3d \x27proto.toolbelt.ToolData\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.toolbelt.ToolData.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.toolbelt.ToolData.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.toolbelt.ToolData} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.toolbelt.ToolData.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    tool: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    wasSelectedByDefault: jspb.Message.getFieldWithDefault(msg, 3, false),\n    stringValue: jspb.Message.getField(msg, 2)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.toolbelt.ToolData}\n */\nproto.toolbelt.ToolData.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.toolbelt.ToolData;\n  return proto.toolbelt.ToolData.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.toolbelt.ToolData} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.toolbelt.ToolData}\n */\nproto.toolbelt.ToolData.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {!proto.toolbelt.ToolbeltTools.TOOLS} */ (reader.readEnum());\n      msg.setTool(value);\n      break;\n    case 3:\n      var value \x3d /** @type {boolean} */ (reader.readBool());\n      msg.setWasSelectedByDefault(value);\n      break;\n    case 2:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setStringValue(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.toolbelt.ToolData.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.toolbelt.ToolData.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.toolbelt.ToolData} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.toolbelt.ToolData.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {!proto.toolbelt.ToolbeltTools.TOOLS} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {boolean} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeBool(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional ToolbeltTools.TOOLS tool \x3d 1;\n * @return {!proto.toolbelt.ToolbeltTools.TOOLS}\n */\nproto.toolbelt.ToolData.prototype.getTool \x3d function() {\n  return /** @type {!proto.toolbelt.ToolbeltTools.TOOLS} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {?proto.toolbelt.ToolbeltTools.TOOLS|undefined} value */\nproto.toolbelt.ToolData.prototype.setTool \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.toolbelt.ToolData.prototype.clearTool \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.toolbelt.ToolData.prototype.hasTool \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional bool was_selected_by_default \x3d 3;\n * Note that Boolean fields may be set to 0/1 when serialized from a Java server.\n * You should avoid comparisons like {@code val \x3d\x3d\x3d true/false} in those cases.\n * @return {boolean}\n */\nproto.toolbelt.ToolData.prototype.getWasSelectedByDefault \x3d function() {\n  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));\n};\n\n\n/** @param {?boolean|undefined} value */\nproto.toolbelt.ToolData.prototype.setWasSelectedByDefault \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.toolbelt.ToolData.prototype.clearWasSelectedByDefault \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.toolbelt.ToolData.prototype.hasWasSelectedByDefault \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional string string_value \x3d 2;\n * @return {?string}\n */\nproto.toolbelt.ToolData.prototype.getStringValue \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?string|undefined} value */\nproto.toolbelt.ToolData.prototype.setStringValue \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.toolbelt.ToolData.prototype.clearStringValue \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.toolbelt.ToolData.prototype.hasStringValue \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.toolbelt.ToolData}\n */\nproto.toolbelt.ToolData.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.toolbelt.ToolData, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.toolbelt.ToolbeltExtensionsProto \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.toolbelt.ToolbeltExtensionsProto.repeatedFields_, null);\n};\ngoog.inherits(proto.toolbelt.ToolbeltExtensionsProto, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.toolbelt.ToolbeltExtensionsProto.displayName \x3d \x27proto.toolbelt.ToolbeltExtensionsProto\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nproto.toolbelt.ToolbeltExtensionsProto.repeatedFields_ \x3d [1,2,3];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.toolbelt.ToolbeltExtensionsProto.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.toolbelt.ToolbeltExtensionsProto.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.toolbelt.ToolbeltExtensionsProto} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.toolbelt.ToolbeltExtensionsProto.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    droppedKeyGroupsList: jspb.Message.toObjectList(msg.getDroppedKeyGroupsList(),\n    proto.toolbelt.DroppedKeyGroup.toObject, includeInstance),\n    selectedToolsList: jspb.Message.toObjectList(msg.getSelectedToolsList(),\n    proto.toolbelt.ToolData.toObject, includeInstance),\n    selectedKeysList: jspb.Message.toObjectList(msg.getSelectedKeysList(),\n    proto.toolbelt.ToolData.toObject, includeInstance),\n    openedState: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.toolbelt.ToolbeltExtensionsProto}\n */\nproto.toolbelt.ToolbeltExtensionsProto.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.toolbelt.ToolbeltExtensionsProto;\n  return proto.toolbelt.ToolbeltExtensionsProto.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.toolbelt.ToolbeltExtensionsProto} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.toolbelt.ToolbeltExtensionsProto}\n */\nproto.toolbelt.ToolbeltExtensionsProto.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d new proto.toolbelt.DroppedKeyGroup;\n      reader.readMessage(value,proto.toolbelt.DroppedKeyGroup.deserializeBinaryFromReader);\n      msg.addDroppedKeyGroups(value);\n      break;\n    case 2:\n      var value \x3d new proto.toolbelt.ToolData;\n      reader.readMessage(value,proto.toolbelt.ToolData.deserializeBinaryFromReader);\n      msg.addSelectedTools(value);\n      break;\n    case 3:\n      var value \x3d new proto.toolbelt.ToolData;\n      reader.readMessage(value,proto.toolbelt.ToolData.deserializeBinaryFromReader);\n      msg.addSelectedKeys(value);\n      break;\n    case 4:\n      var value \x3d /** @type {!proto.toolbelt.ToolbeltExtensionsProto.OPENED_STATE} */ (reader.readEnum());\n      msg.setOpenedState(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.toolbelt.ToolbeltExtensionsProto.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.toolbelt.ToolbeltExtensionsProto.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.toolbelt.ToolbeltExtensionsProto} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.toolbelt.ToolbeltExtensionsProto.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d message.getDroppedKeyGroupsList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      proto.toolbelt.DroppedKeyGroup.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getSelectedToolsList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedMessage(\n      2,\n      f,\n      proto.toolbelt.ToolData.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getSelectedKeysList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedMessage(\n      3,\n      f,\n      proto.toolbelt.ToolData.serializeBinaryToWriter\n    );\n  }\n  f \x3d /** @type {!proto.toolbelt.ToolbeltExtensionsProto.OPENED_STATE} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.toolbelt.ToolbeltExtensionsProto.OPENED_STATE \x3d {\n  CLOSED: 0,\n  OPENED_MANUAL: 1,\n  OPENED_DEFAULT: 2,\n  OPENED_PROMPTED: 3,\n  OPENED_SEMI_PROMPTED: 4,\n  OPENED_EPHEMERAL: 5\n};\n\n/**\n * repeated DroppedKeyGroup dropped_key_groups \x3d 1;\n * @return {!Array\x3c!proto.toolbelt.DroppedKeyGroup\x3e}\n */\nproto.toolbelt.ToolbeltExtensionsProto.prototype.getDroppedKeyGroupsList \x3d function() {\n  return /** @type{!Array\x3c!proto.toolbelt.DroppedKeyGroup\x3e} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.toolbelt.DroppedKeyGroup, 1));\n};\n\n\n/** @param {Array\x3c!proto.toolbelt.DroppedKeyGroup\x3e|undefined} value */\nproto.toolbelt.ToolbeltExtensionsProto.prototype.setDroppedKeyGroupsList \x3d function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.toolbelt.DroppedKeyGroup\x3d} opt_value\n * @param {number\x3d} opt_index\n * @return {!proto.toolbelt.DroppedKeyGroup}\n */\nproto.toolbelt.ToolbeltExtensionsProto.prototype.addDroppedKeyGroups \x3d function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.toolbelt.DroppedKeyGroup, opt_index);\n};\n\n\nproto.toolbelt.ToolbeltExtensionsProto.prototype.clearDroppedKeyGroupsList \x3d function() {\n  this.setDroppedKeyGroupsList([]);\n};\n\n\n/**\n * repeated ToolData selected_tools \x3d 2;\n * @return {!Array\x3c!proto.toolbelt.ToolData\x3e}\n */\nproto.toolbelt.ToolbeltExtensionsProto.prototype.getSelectedToolsList \x3d function() {\n  return /** @type{!Array\x3c!proto.toolbelt.ToolData\x3e} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.toolbelt.ToolData, 2));\n};\n\n\n/** @param {Array\x3c!proto.toolbelt.ToolData\x3e|undefined} value */\nproto.toolbelt.ToolbeltExtensionsProto.prototype.setSelectedToolsList \x3d function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 2, value);\n};\n\n\n/**\n * @param {!proto.toolbelt.ToolData\x3d} opt_value\n * @param {number\x3d} opt_index\n * @return {!proto.toolbelt.ToolData}\n */\nproto.toolbelt.ToolbeltExtensionsProto.prototype.addSelectedTools \x3d function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.toolbelt.ToolData, opt_index);\n};\n\n\nproto.toolbelt.ToolbeltExtensionsProto.prototype.clearSelectedToolsList \x3d function() {\n  this.setSelectedToolsList([]);\n};\n\n\n/**\n * repeated ToolData selected_keys \x3d 3;\n * @return {!Array\x3c!proto.toolbelt.ToolData\x3e}\n */\nproto.toolbelt.ToolbeltExtensionsProto.prototype.getSelectedKeysList \x3d function() {\n  return /** @type{!Array\x3c!proto.toolbelt.ToolData\x3e} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.toolbelt.ToolData, 3));\n};\n\n\n/** @param {Array\x3c!proto.toolbelt.ToolData\x3e|undefined} value */\nproto.toolbelt.ToolbeltExtensionsProto.prototype.setSelectedKeysList \x3d function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 3, value);\n};\n\n\n/**\n * @param {!proto.toolbelt.ToolData\x3d} opt_value\n * @param {number\x3d} opt_index\n * @return {!proto.toolbelt.ToolData}\n */\nproto.toolbelt.ToolbeltExtensionsProto.prototype.addSelectedKeys \x3d function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.toolbelt.ToolData, opt_index);\n};\n\n\nproto.toolbelt.ToolbeltExtensionsProto.prototype.clearSelectedKeysList \x3d function() {\n  this.setSelectedKeysList([]);\n};\n\n\n/**\n * optional OPENED_STATE opened_state \x3d 4;\n * @return {!proto.toolbelt.ToolbeltExtensionsProto.OPENED_STATE}\n */\nproto.toolbelt.ToolbeltExtensionsProto.prototype.getOpenedState \x3d function() {\n  return /** @type {!proto.toolbelt.ToolbeltExtensionsProto.OPENED_STATE} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/** @param {?proto.toolbelt.ToolbeltExtensionsProto.OPENED_STATE|undefined} value */\nproto.toolbelt.ToolbeltExtensionsProto.prototype.setOpenedState \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.toolbelt.ToolbeltExtensionsProto.prototype.clearOpenedState \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.toolbelt.ToolbeltExtensionsProto.prototype.hasOpenedState \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.toolbelt.ToolbeltExtensionsProto}\n */\nproto.toolbelt.ToolbeltExtensionsProto.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.toolbelt.ToolbeltExtensionsProto, data);\n};\n\n\n\n//# sourceURL\x3dhttps://qs/logs/proto/toolbelt/toolbelt_extensions.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="logs/eventid/eventid.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.ClientEventIdMessage\x27);\ngoog.provide(\x27proto.EventIdMessage\x27);\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.ExtensionFieldBinaryInfo\x27);\ngoog.require(\x27jspb.ExtensionFieldInfo\x27);\ngoog.require(\x27jspb.Message\x27);\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.EventIdMessage \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.EventIdMessage, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.EventIdMessage.displayName \x3d \x27proto.EventIdMessage\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.EventIdMessage.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.EventIdMessage.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.EventIdMessage} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.EventIdMessage.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    timeUsec: jspb.Message.getField(msg, 1),\n    serverIp: jspb.Message.getField(msg, 2),\n    processId: jspb.Message.getField(msg, 3)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.EventIdMessage}\n */\nproto.EventIdMessage.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.EventIdMessage;\n  return proto.EventIdMessage.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.EventIdMessage} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.EventIdMessage}\n */\nproto.EventIdMessage.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {number} */ (reader.readInt64());\n      msg.setTimeUsec(value);\n      break;\n    case 2:\n      var value \x3d /** @type {number} */ (reader.readFixed32());\n      msg.setServerIp(value);\n      break;\n    case 3:\n      var value \x3d /** @type {number} */ (reader.readFixed32());\n      msg.setProcessId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.EventIdMessage.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.EventIdMessage.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.EventIdMessage} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.EventIdMessage.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {number} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeInt64(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {number} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeFixed32(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {number} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeFixed32(\n      3,\n      f\n    );\n  }\n};\n\n\n\n/**\n * A tuple of {field number, class constructor} for the extension\n * field named `messageSetExtension`.\n * @type {!jspb.ExtensionFieldInfo\x3c!proto.EventIdMessage\x3e}\n */\nproto.EventIdMessage.messageSetExtension \x3d new jspb.ExtensionFieldInfo(\n    4156379,\n    {messageSetExtension: 0},\n    proto.EventIdMessage,\n     /** @type {?function((boolean|undefined),!jspb.Message\x3d): !Object} */ (\n         proto.EventIdMessage.toObject),\n    0);\n\njspb.Message.messageSetExtensionsBinary[4156379] \x3d new jspb.ExtensionFieldBinaryInfo(\n    proto.EventIdMessage.messageSetExtension,\n    jspb.BinaryReader.prototype.readMessage,\n    jspb.BinaryWriter.prototype.writeMessage,\n    proto.EventIdMessage.serializeBinaryToWriter,\n    proto.EventIdMessage.deserializeBinaryFromReader,\n    false);\n// This registers the extension field with the extended class, so that\n// toObject() will function correctly.\njspb.Message.messageSetExtensions[4156379] \x3d proto.EventIdMessage.messageSetExtension;\n\n/**\n * required int64 time_usec \x3d 1;\n * @return {number}\n */\nproto.EventIdMessage.prototype.getTimeUsec \x3d function() {\n  return /** @type {number} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?number|undefined} value */\nproto.EventIdMessage.prototype.setTimeUsec \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.EventIdMessage.prototype.clearTimeUsec \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.EventIdMessage.prototype.hasTimeUsec \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * required fixed32 server_ip \x3d 2;\n * @return {number}\n */\nproto.EventIdMessage.prototype.getServerIp \x3d function() {\n  return /** @type {number} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?number|undefined} value */\nproto.EventIdMessage.prototype.setServerIp \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.EventIdMessage.prototype.clearServerIp \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.EventIdMessage.prototype.hasServerIp \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * required fixed32 process_id \x3d 3;\n * @return {number}\n */\nproto.EventIdMessage.prototype.getProcessId \x3d function() {\n  return /** @type {number} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?number|undefined} value */\nproto.EventIdMessage.prototype.setProcessId \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.EventIdMessage.prototype.clearProcessId \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.EventIdMessage.prototype.hasProcessId \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.EventIdMessage}\n */\nproto.EventIdMessage.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.EventIdMessage, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.ClientEventIdMessage \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.ClientEventIdMessage, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.ClientEventIdMessage.displayName \x3d \x27proto.ClientEventIdMessage\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.ClientEventIdMessage.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.ClientEventIdMessage.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.ClientEventIdMessage} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.ClientEventIdMessage.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    base: (f \x3d msg.getBase()) \x26\x26 proto.EventIdMessage.toObject(includeInstance, f),\n    clientCounter: jspb.Message.getField(msg, 2)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.ClientEventIdMessage}\n */\nproto.ClientEventIdMessage.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.ClientEventIdMessage;\n  return proto.ClientEventIdMessage.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.ClientEventIdMessage} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.ClientEventIdMessage}\n */\nproto.ClientEventIdMessage.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d new proto.EventIdMessage;\n      reader.readMessage(value,proto.EventIdMessage.deserializeBinaryFromReader);\n      msg.setBase(value);\n      break;\n    case 2:\n      var value \x3d /** @type {number} */ (reader.readInt64());\n      msg.setClientCounter(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.ClientEventIdMessage.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.ClientEventIdMessage.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.ClientEventIdMessage} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.ClientEventIdMessage.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d message.getBase();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.EventIdMessage.serializeBinaryToWriter\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional EventIdMessage base \x3d 1;\n * @return {?proto.EventIdMessage}\n */\nproto.ClientEventIdMessage.prototype.getBase \x3d function() {\n  return /** @type{?proto.EventIdMessage} */ (\n    jspb.Message.getWrapperField(this, proto.EventIdMessage, 1));\n};\n\n\n/** @param {?proto.EventIdMessage|undefined} value */\nproto.ClientEventIdMessage.prototype.setBase \x3d function(value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\n\nproto.ClientEventIdMessage.prototype.clearBase \x3d function() {\n  this.setBase(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.ClientEventIdMessage.prototype.hasBase \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional int64 client_counter \x3d 2;\n * @return {?number}\n */\nproto.ClientEventIdMessage.prototype.getClientCounter \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?number|undefined} value */\nproto.ClientEventIdMessage.prototype.setClientCounter \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.ClientEventIdMessage.prototype.clearClientCounter \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.ClientEventIdMessage.prototype.hasClientCounter \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.ClientEventIdMessage}\n */\nproto.ClientEventIdMessage.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.ClientEventIdMessage, data);\n};\n\n\n\n//# sourceURL\x3dhttps://qs/logs/eventid/eventid.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="logs/proto/wireless/android/play/playlog/csi_info.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.wireless_android_play_playlog.CsiInfo\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.CsiInfo.ClientType\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.CsiInfo.Source\x27);\ngoog.provide(\x27proto.wireless_android_play_playlog.CsiMetric\x27);\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.Message\x27);\ngoog.require(\x27proto.EventIdMessage\x27);\n\ngoog.forwardDeclare(\x27search.logging.CsiMetricKey\x27);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.CsiInfo \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.wireless_android_play_playlog.CsiInfo.repeatedFields_, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.CsiInfo, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.CsiInfo.displayName \x3d \x27proto.wireless_android_play_playlog.CsiInfo\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nproto.wireless_android_play_playlog.CsiInfo.repeatedFields_ \x3d [9];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.CsiInfo.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.CsiInfo} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.CsiInfo.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    timeToFirstByteNanos: jspb.Message.getField(msg, 1),\n    renderStartTimeNanos: jspb.Message.getField(msg, 2),\n    aboveTheFoldTimeNanos: jspb.Message.getField(msg, 3),\n    renderEndTimeNanos: jspb.Message.getField(msg, 4),\n    clientType: jspb.Message.getField(msg, 5),\n    csiSource: jspb.Message.getField(msg, 6),\n    serverEventId: (f \x3d msg.getServerEventId()) \x26\x26 proto.EventIdMessage.toObject(includeInstance, f),\n    querySubmissionTimeNanos: jspb.Message.getField(msg, 8),\n    csiMetricList: jspb.Message.toObjectList(msg.getCsiMetricList(),\n    proto.wireless_android_play_playlog.CsiMetric.toObject, includeInstance),\n    eventId: jspb.Message.getField(msg, 10)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.CsiInfo}\n */\nproto.wireless_android_play_playlog.CsiInfo.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.CsiInfo;\n  return proto.wireless_android_play_playlog.CsiInfo.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.CsiInfo} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.CsiInfo}\n */\nproto.wireless_android_play_playlog.CsiInfo.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {number} */ (reader.readUint64());\n      msg.setTimeToFirstByteNanos(value);\n      break;\n    case 2:\n      var value \x3d /** @type {number} */ (reader.readUint64());\n      msg.setRenderStartTimeNanos(value);\n      break;\n    case 3:\n      var value \x3d /** @type {number} */ (reader.readUint64());\n      msg.setAboveTheFoldTimeNanos(value);\n      break;\n    case 4:\n      var value \x3d /** @type {number} */ (reader.readUint64());\n      msg.setRenderEndTimeNanos(value);\n      break;\n    case 5:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.CsiInfo.ClientType} */ (reader.readEnum());\n      msg.setClientType(value);\n      break;\n    case 6:\n      var value \x3d /** @type {!proto.wireless_android_play_playlog.CsiInfo.Source} */ (reader.readEnum());\n      msg.setCsiSource(value);\n      break;\n    case 7:\n      var value \x3d new proto.EventIdMessage;\n      reader.readMessage(value,proto.EventIdMessage.deserializeBinaryFromReader);\n      msg.setServerEventId(value);\n      break;\n    case 8:\n      var value \x3d /** @type {number} */ (reader.readUint64());\n      msg.setQuerySubmissionTimeNanos(value);\n      break;\n    case 9:\n      var value \x3d new proto.wireless_android_play_playlog.CsiMetric;\n      reader.readMessage(value,proto.wireless_android_play_playlog.CsiMetric.deserializeBinaryFromReader);\n      msg.addCsiMetric(value);\n      break;\n    case 10:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setEventId(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.CsiInfo.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.CsiInfo} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.CsiInfo.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeUint64(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeUint64(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeUint64(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeUint64(\n      4,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.CsiInfo.ClientType} */ (jspb.Message.getField(message, 5));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      5,\n      f\n    );\n  }\n  f \x3d /** @type {!proto.wireless_android_play_playlog.CsiInfo.Source} */ (jspb.Message.getField(message, 6));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      6,\n      f\n    );\n  }\n  f \x3d message.getServerEventId();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      7,\n      f,\n      proto.EventIdMessage.serializeBinaryToWriter\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 8));\n  if (f !\x3d null) {\n    writer.writeUint64(\n      8,\n      f\n    );\n  }\n  f \x3d message.getCsiMetricList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedMessage(\n      9,\n      f,\n      proto.wireless_android_play_playlog.CsiMetric.serializeBinaryToWriter\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 10));\n  if (f !\x3d null) {\n    writer.writeString(\n      10,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.wireless_android_play_playlog.CsiInfo.ClientType \x3d {\n  UNKNOWN_CLIENT_TYPE: 0,\n  ANDROID: 1,\n  IOS: 2,\n  WEB: 3,\n  BOQ_WEB: 4\n};\n\n/**\n * @enum {number}\n */\nproto.wireless_android_play_playlog.CsiInfo.Source \x3d {\n  UNKNOWN_SOURCE: 0,\n  NATIVE: 1,\n  WEATHER: 2,\n  WEBVIEW: 3,\n  SPORTS: 4,\n  DINING: 5\n};\n\n/**\n * optional uint64 time_to_first_byte_nanos \x3d 1;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.getTimeToFirstByteNanos \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.CsiInfo.prototype.setTimeToFirstByteNanos \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.CsiInfo.prototype.clearTimeToFirstByteNanos \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.hasTimeToFirstByteNanos \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional uint64 render_start_time_nanos \x3d 2;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.getRenderStartTimeNanos \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.CsiInfo.prototype.setRenderStartTimeNanos \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.CsiInfo.prototype.clearRenderStartTimeNanos \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.hasRenderStartTimeNanos \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional uint64 above_the_fold_time_nanos \x3d 3;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.getAboveTheFoldTimeNanos \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.CsiInfo.prototype.setAboveTheFoldTimeNanos \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.CsiInfo.prototype.clearAboveTheFoldTimeNanos \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.hasAboveTheFoldTimeNanos \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional uint64 render_end_time_nanos \x3d 4;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.getRenderEndTimeNanos \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 4));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.CsiInfo.prototype.setRenderEndTimeNanos \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.wireless_android_play_playlog.CsiInfo.prototype.clearRenderEndTimeNanos \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.hasRenderEndTimeNanos \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional ClientType client_type \x3d 5;\n * @return {!proto.wireless_android_play_playlog.CsiInfo.ClientType}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.getClientType \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.CsiInfo.ClientType} */ (jspb.Message.getField(this, 5));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.CsiInfo.ClientType|undefined} value */\nproto.wireless_android_play_playlog.CsiInfo.prototype.setClientType \x3d function(value) {\n  jspb.Message.setField(this, 5, value);\n};\n\n\nproto.wireless_android_play_playlog.CsiInfo.prototype.clearClientType \x3d function() {\n  jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.hasClientType \x3d function() {\n  return jspb.Message.getField(this, 5) !\x3d null;\n};\n\n\n/**\n * optional Source csi_source \x3d 6;\n * @return {!proto.wireless_android_play_playlog.CsiInfo.Source}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.getCsiSource \x3d function() {\n  return /** @type {!proto.wireless_android_play_playlog.CsiInfo.Source} */ (jspb.Message.getField(this, 6));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.CsiInfo.Source|undefined} value */\nproto.wireless_android_play_playlog.CsiInfo.prototype.setCsiSource \x3d function(value) {\n  jspb.Message.setField(this, 6, value);\n};\n\n\nproto.wireless_android_play_playlog.CsiInfo.prototype.clearCsiSource \x3d function() {\n  jspb.Message.setField(this, 6, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.hasCsiSource \x3d function() {\n  return jspb.Message.getField(this, 6) !\x3d null;\n};\n\n\n/**\n * optional EventIdMessage server_event_id \x3d 7;\n * @return {?proto.EventIdMessage}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.getServerEventId \x3d function() {\n  return /** @type{?proto.EventIdMessage} */ (\n    jspb.Message.getWrapperField(this, proto.EventIdMessage, 7));\n};\n\n\n/** @param {?proto.EventIdMessage|undefined} value */\nproto.wireless_android_play_playlog.CsiInfo.prototype.setServerEventId \x3d function(value) {\n  jspb.Message.setWrapperField(this, 7, value);\n};\n\n\nproto.wireless_android_play_playlog.CsiInfo.prototype.clearServerEventId \x3d function() {\n  this.setServerEventId(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.hasServerEventId \x3d function() {\n  return jspb.Message.getField(this, 7) !\x3d null;\n};\n\n\n/**\n * optional uint64 query_submission_time_nanos \x3d 8;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.getQuerySubmissionTimeNanos \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 8));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.CsiInfo.prototype.setQuerySubmissionTimeNanos \x3d function(value) {\n  jspb.Message.setField(this, 8, value);\n};\n\n\nproto.wireless_android_play_playlog.CsiInfo.prototype.clearQuerySubmissionTimeNanos \x3d function() {\n  jspb.Message.setField(this, 8, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.hasQuerySubmissionTimeNanos \x3d function() {\n  return jspb.Message.getField(this, 8) !\x3d null;\n};\n\n\n/**\n * repeated CsiMetric csi_metric \x3d 9;\n * @return {!Array\x3c!proto.wireless_android_play_playlog.CsiMetric\x3e}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.getCsiMetricList \x3d function() {\n  return /** @type{!Array\x3c!proto.wireless_android_play_playlog.CsiMetric\x3e} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.wireless_android_play_playlog.CsiMetric, 9));\n};\n\n\n/** @param {Array\x3c!proto.wireless_android_play_playlog.CsiMetric\x3e|undefined} value */\nproto.wireless_android_play_playlog.CsiInfo.prototype.setCsiMetricList \x3d function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 9, value);\n};\n\n\n/**\n * @param {!proto.wireless_android_play_playlog.CsiMetric\x3d} opt_value\n * @param {number\x3d} opt_index\n * @return {!proto.wireless_android_play_playlog.CsiMetric}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.addCsiMetric \x3d function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.wireless_android_play_playlog.CsiMetric, opt_index);\n};\n\n\nproto.wireless_android_play_playlog.CsiInfo.prototype.clearCsiMetricList \x3d function() {\n  this.setCsiMetricList([]);\n};\n\n\n/**\n * optional string event_id \x3d 10;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.getEventId \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 10));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.CsiInfo.prototype.setEventId \x3d function(value) {\n  jspb.Message.setField(this, 10, value);\n};\n\n\nproto.wireless_android_play_playlog.CsiInfo.prototype.clearEventId \x3d function() {\n  jspb.Message.setField(this, 10, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.CsiInfo.prototype.hasEventId \x3d function() {\n  return jspb.Message.getField(this, 10) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.CsiInfo}\n */\nproto.wireless_android_play_playlog.CsiInfo.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.CsiInfo, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.CsiMetric \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.wireless_android_play_playlog.CsiMetric.oneofGroups_);\n};\ngoog.inherits(proto.wireless_android_play_playlog.CsiMetric, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.CsiMetric.displayName \x3d \x27proto.wireless_android_play_playlog.CsiMetric\x27;\n}\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields\x27 value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array\x3c!Array\x3cnumber\x3e\x3e}\n * @const\n */\nproto.wireless_android_play_playlog.CsiMetric.oneofGroups_ \x3d [[2,3]];\n\n/**\n * @enum {number}\n */\nproto.wireless_android_play_playlog.CsiMetric.UnitCase \x3d {\n  UNIT_NOT_SET: 0,\n  DURATION_MILLIS: 2,\n  COUNT: 3\n};\n\n/**\n * @return {proto.wireless_android_play_playlog.CsiMetric.UnitCase}\n */\nproto.wireless_android_play_playlog.CsiMetric.prototype.getUnitCase \x3d function() {\n  return /** @type {proto.wireless_android_play_playlog.CsiMetric.UnitCase} */(jspb.Message.computeOneofCase(this, proto.wireless_android_play_playlog.CsiMetric.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.CsiMetric.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.CsiMetric.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.CsiMetric} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.CsiMetric.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    metric: jspb.Message.getField(msg, 1),\n    durationMillis: jspb.Message.getField(msg, 2),\n    count: jspb.Message.getField(msg, 3)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.CsiMetric}\n */\nproto.wireless_android_play_playlog.CsiMetric.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.CsiMetric;\n  return proto.wireless_android_play_playlog.CsiMetric.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.CsiMetric} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.CsiMetric}\n */\nproto.wireless_android_play_playlog.CsiMetric.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {!search.logging.CsiMetricKey} */ (reader.readEnum());\n      msg.setMetric(value);\n      break;\n    case 2:\n      var value \x3d /** @type {number} */ (reader.readUint64());\n      msg.setDurationMillis(value);\n      break;\n    case 3:\n      var value \x3d /** @type {number} */ (reader.readUint64());\n      msg.setCount(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.CsiMetric.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.CsiMetric.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.CsiMetric} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.CsiMetric.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {!search.logging.CsiMetricKey} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeUint64(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeUint64(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional search.logging.CsiMetricKey metric \x3d 1;\n * @return {!search.logging.CsiMetricKey}\n */\nproto.wireless_android_play_playlog.CsiMetric.prototype.getMetric \x3d function() {\n  return /** @type {!search.logging.CsiMetricKey} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?search.logging.CsiMetricKey|undefined} value */\nproto.wireless_android_play_playlog.CsiMetric.prototype.setMetric \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.CsiMetric.prototype.clearMetric \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.CsiMetric.prototype.hasMetric \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional uint64 duration_millis \x3d 2;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.CsiMetric.prototype.getDurationMillis \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.CsiMetric.prototype.setDurationMillis \x3d function(value) {\n  jspb.Message.setOneofField(this, 2, proto.wireless_android_play_playlog.CsiMetric.oneofGroups_[0], value);\n};\n\n\nproto.wireless_android_play_playlog.CsiMetric.prototype.clearDurationMillis \x3d function() {\n  jspb.Message.setOneofField(this, 2, proto.wireless_android_play_playlog.CsiMetric.oneofGroups_[0], undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.CsiMetric.prototype.hasDurationMillis \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional uint64 count \x3d 3;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.CsiMetric.prototype.getCount \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.CsiMetric.prototype.setCount \x3d function(value) {\n  jspb.Message.setOneofField(this, 3, proto.wireless_android_play_playlog.CsiMetric.oneofGroups_[0], value);\n};\n\n\nproto.wireless_android_play_playlog.CsiMetric.prototype.clearCount \x3d function() {\n  jspb.Message.setOneofField(this, 3, proto.wireless_android_play_playlog.CsiMetric.oneofGroups_[0], undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.CsiMetric.prototype.hasCount \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.CsiMetric}\n */\nproto.wireless_android_play_playlog.CsiMetric.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.CsiMetric, data);\n};\n\n\n\n//# sourceURL\x3dhttps://qs/logs/proto/wireless/android/play/playlog/csi_info.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="logs/proto/wireless/android/play/playlog/interaction_tracking.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.wireless_android_play_playlog.InteractionTracking\x27);\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.Message\x27);\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.wireless_android_play_playlog.InteractionTracking \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.wireless_android_play_playlog.InteractionTracking, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.wireless_android_play_playlog.InteractionTracking.displayName \x3d \x27proto.wireless_android_play_playlog.InteractionTracking\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.wireless_android_play_playlog.InteractionTracking.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.wireless_android_play_playlog.InteractionTracking.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.wireless_android_play_playlog.InteractionTracking} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.InteractionTracking.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    ved: jspb.Message.getField(msg, 1),\n    vet: jspb.Message.getField(msg, 2),\n    eventId: jspb.Message.getField(msg, 3),\n    interactionContext: jspb.Message.getFieldWithDefault(msg, 4, -1),\n    userAction: jspb.Message.getField(msg, 5)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.wireless_android_play_playlog.InteractionTracking}\n */\nproto.wireless_android_play_playlog.InteractionTracking.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.wireless_android_play_playlog.InteractionTracking;\n  return proto.wireless_android_play_playlog.InteractionTracking.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.wireless_android_play_playlog.InteractionTracking} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.wireless_android_play_playlog.InteractionTracking}\n */\nproto.wireless_android_play_playlog.InteractionTracking.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setVed(value);\n      break;\n    case 2:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setVet(value);\n      break;\n    case 3:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setEventId(value);\n      break;\n    case 4:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setInteractionContext(value);\n      break;\n    case 5:\n      var value \x3d /** @type {number} */ (reader.readInt32());\n      msg.setUserAction(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.wireless_android_play_playlog.InteractionTracking.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.wireless_android_play_playlog.InteractionTracking.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.wireless_android_play_playlog.InteractionTracking} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.wireless_android_play_playlog.InteractionTracking.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 3));\n  if (f !\x3d null) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f \x3d /** @type {number} */ (jspb.Message.getField(message, 4));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      4,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 5));\n  if (f !\x3d null) {\n    writer.writeInt32(\n      5,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string ved \x3d 1;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.InteractionTracking.prototype.getVed \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.InteractionTracking.prototype.setVed \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.wireless_android_play_playlog.InteractionTracking.prototype.clearVed \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.InteractionTracking.prototype.hasVed \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional string vet \x3d 2;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.InteractionTracking.prototype.getVet \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.InteractionTracking.prototype.setVet \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.wireless_android_play_playlog.InteractionTracking.prototype.clearVet \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.InteractionTracking.prototype.hasVet \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional string event_id \x3d 3;\n * @return {?string}\n */\nproto.wireless_android_play_playlog.InteractionTracking.prototype.getEventId \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 3));\n};\n\n\n/** @param {?string|undefined} value */\nproto.wireless_android_play_playlog.InteractionTracking.prototype.setEventId \x3d function(value) {\n  jspb.Message.setField(this, 3, value);\n};\n\n\nproto.wireless_android_play_playlog.InteractionTracking.prototype.clearEventId \x3d function() {\n  jspb.Message.setField(this, 3, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.InteractionTracking.prototype.hasEventId \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional int32 interaction_context \x3d 4;\n * @return {number}\n */\nproto.wireless_android_play_playlog.InteractionTracking.prototype.getInteractionContext \x3d function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, -1));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.InteractionTracking.prototype.setInteractionContext \x3d function(value) {\n  jspb.Message.setField(this, 4, value);\n};\n\n\nproto.wireless_android_play_playlog.InteractionTracking.prototype.clearInteractionContext \x3d function() {\n  jspb.Message.setField(this, 4, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.InteractionTracking.prototype.hasInteractionContext \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional int32 user_action \x3d 5;\n * @return {?number}\n */\nproto.wireless_android_play_playlog.InteractionTracking.prototype.getUserAction \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 5));\n};\n\n\n/** @param {?number|undefined} value */\nproto.wireless_android_play_playlog.InteractionTracking.prototype.setUserAction \x3d function(value) {\n  jspb.Message.setField(this, 5, value);\n};\n\n\nproto.wireless_android_play_playlog.InteractionTracking.prototype.clearUserAction \x3d function() {\n  jspb.Message.setField(this, 5, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.wireless_android_play_playlog.InteractionTracking.prototype.hasUserAction \x3d function() {\n  return jspb.Message.getField(this, 5) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.wireless_android_play_playlog.InteractionTracking}\n */\nproto.wireless_android_play_playlog.InteractionTracking.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.wireless_android_play_playlog.InteractionTracking, data);\n};\n\n\n\n//# sourceURL\x3dhttps://qs/logs/proto/wireless/android/play/playlog/interaction_tracking.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="search/logging/search_log.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.search.logging.LogTime\x27);\ngoog.provide(\x27proto.search.logging.SearchLog\x27);\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.Message\x27);\ngoog.require(\x27proto.frameworks.client.logging.WebErrorLogEvent\x27);\ngoog.require(\x27proto.logs.proto.gws.js.GwsJsLog\x27);\ngoog.require(\x27proto.toolbelt.ToolbeltExtensionsProto\x27);\ngoog.require(\x27proto.wireless_android_play_playlog.CsiInfo\x27);\ngoog.require(\x27proto.wireless_android_play_playlog.InteractionTracking\x27);\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.search.logging.SearchLog \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.search.logging.SearchLog, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.search.logging.SearchLog.displayName \x3d \x27proto.search.logging.SearchLog\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.search.logging.SearchLog.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.search.logging.SearchLog.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.search.logging.SearchLog} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.search.logging.SearchLog.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    gwsJsLog: (f \x3d msg.getGwsJsLog()) \x26\x26 proto.logs.proto.gws.js.GwsJsLog.toObject(includeInstance, f),\n    interactionTracking: (f \x3d msg.getInteractionTracking()) \x26\x26 proto.wireless_android_play_playlog.InteractionTracking.toObject(includeInstance, f),\n    csiInfo: (f \x3d msg.getCsiInfo()) \x26\x26 proto.wireless_android_play_playlog.CsiInfo.toObject(includeInstance, f),\n    toolbeltExtensionsProto: (f \x3d msg.getToolbeltExtensionsProto()) \x26\x26 proto.toolbelt.ToolbeltExtensionsProto.toObject(includeInstance, f),\n    eventLogTime: (f \x3d msg.getEventLogTime()) \x26\x26 proto.search.logging.LogTime.toObject(includeInstance, f),\n    webErrorLogEvent: (f \x3d msg.getWebErrorLogEvent()) \x26\x26 proto.frameworks.client.logging.WebErrorLogEvent.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.search.logging.SearchLog}\n */\nproto.search.logging.SearchLog.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.search.logging.SearchLog;\n  return proto.search.logging.SearchLog.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.search.logging.SearchLog} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.search.logging.SearchLog}\n */\nproto.search.logging.SearchLog.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d new proto.logs.proto.gws.js.GwsJsLog;\n      reader.readMessage(value,proto.logs.proto.gws.js.GwsJsLog.deserializeBinaryFromReader);\n      msg.setGwsJsLog(value);\n      break;\n    case 2:\n      var value \x3d new proto.wireless_android_play_playlog.InteractionTracking;\n      reader.readMessage(value,proto.wireless_android_play_playlog.InteractionTracking.deserializeBinaryFromReader);\n      msg.setInteractionTracking(value);\n      break;\n    case 3:\n      var value \x3d new proto.wireless_android_play_playlog.CsiInfo;\n      reader.readMessage(value,proto.wireless_android_play_playlog.CsiInfo.deserializeBinaryFromReader);\n      msg.setCsiInfo(value);\n      break;\n    case 5:\n      var value \x3d new proto.toolbelt.ToolbeltExtensionsProto;\n      reader.readMessage(value,proto.toolbelt.ToolbeltExtensionsProto.deserializeBinaryFromReader);\n      msg.setToolbeltExtensionsProto(value);\n      break;\n    case 4:\n      var value \x3d new proto.search.logging.LogTime;\n      reader.readMessage(value,proto.search.logging.LogTime.deserializeBinaryFromReader);\n      msg.setEventLogTime(value);\n      break;\n    case 6:\n      var value \x3d new proto.frameworks.client.logging.WebErrorLogEvent;\n      reader.readMessage(value,proto.frameworks.client.logging.WebErrorLogEvent.deserializeBinaryFromReader);\n      msg.setWebErrorLogEvent(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.search.logging.SearchLog.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.search.logging.SearchLog.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.search.logging.SearchLog} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.search.logging.SearchLog.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d message.getGwsJsLog();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.logs.proto.gws.js.GwsJsLog.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getInteractionTracking();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.wireless_android_play_playlog.InteractionTracking.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getCsiInfo();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.wireless_android_play_playlog.CsiInfo.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getToolbeltExtensionsProto();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      5,\n      f,\n      proto.toolbelt.ToolbeltExtensionsProto.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getEventLogTime();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      4,\n      f,\n      proto.search.logging.LogTime.serializeBinaryToWriter\n    );\n  }\n  f \x3d message.getWebErrorLogEvent();\n  if (f !\x3d null) {\n    writer.writeMessage(\n      6,\n      f,\n      proto.frameworks.client.logging.WebErrorLogEvent.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional logs.proto.gws.js.GwsJsLog gws_js_log \x3d 1;\n * @return {?proto.logs.proto.gws.js.GwsJsLog}\n */\nproto.search.logging.SearchLog.prototype.getGwsJsLog \x3d function() {\n  return /** @type{?proto.logs.proto.gws.js.GwsJsLog} */ (\n    jspb.Message.getWrapperField(this, proto.logs.proto.gws.js.GwsJsLog, 1));\n};\n\n\n/** @param {?proto.logs.proto.gws.js.GwsJsLog|undefined} value */\nproto.search.logging.SearchLog.prototype.setGwsJsLog \x3d function(value) {\n  jspb.Message.setWrapperField(this, 1, value);\n};\n\n\nproto.search.logging.SearchLog.prototype.clearGwsJsLog \x3d function() {\n  this.setGwsJsLog(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.search.logging.SearchLog.prototype.hasGwsJsLog \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional wireless_android_play_playlog.InteractionTracking interaction_tracking \x3d 2;\n * @return {?proto.wireless_android_play_playlog.InteractionTracking}\n */\nproto.search.logging.SearchLog.prototype.getInteractionTracking \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.InteractionTracking} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.InteractionTracking, 2));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.InteractionTracking|undefined} value */\nproto.search.logging.SearchLog.prototype.setInteractionTracking \x3d function(value) {\n  jspb.Message.setWrapperField(this, 2, value);\n};\n\n\nproto.search.logging.SearchLog.prototype.clearInteractionTracking \x3d function() {\n  this.setInteractionTracking(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.search.logging.SearchLog.prototype.hasInteractionTracking \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * optional wireless_android_play_playlog.CsiInfo csi_info \x3d 3;\n * @return {?proto.wireless_android_play_playlog.CsiInfo}\n */\nproto.search.logging.SearchLog.prototype.getCsiInfo \x3d function() {\n  return /** @type{?proto.wireless_android_play_playlog.CsiInfo} */ (\n    jspb.Message.getWrapperField(this, proto.wireless_android_play_playlog.CsiInfo, 3));\n};\n\n\n/** @param {?proto.wireless_android_play_playlog.CsiInfo|undefined} value */\nproto.search.logging.SearchLog.prototype.setCsiInfo \x3d function(value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\n\nproto.search.logging.SearchLog.prototype.clearCsiInfo \x3d function() {\n  this.setCsiInfo(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.search.logging.SearchLog.prototype.hasCsiInfo \x3d function() {\n  return jspb.Message.getField(this, 3) !\x3d null;\n};\n\n\n/**\n * optional toolbelt.ToolbeltExtensionsProto toolbelt_extensions_proto \x3d 5;\n * @return {?proto.toolbelt.ToolbeltExtensionsProto}\n */\nproto.search.logging.SearchLog.prototype.getToolbeltExtensionsProto \x3d function() {\n  return /** @type{?proto.toolbelt.ToolbeltExtensionsProto} */ (\n    jspb.Message.getWrapperField(this, proto.toolbelt.ToolbeltExtensionsProto, 5));\n};\n\n\n/** @param {?proto.toolbelt.ToolbeltExtensionsProto|undefined} value */\nproto.search.logging.SearchLog.prototype.setToolbeltExtensionsProto \x3d function(value) {\n  jspb.Message.setWrapperField(this, 5, value);\n};\n\n\nproto.search.logging.SearchLog.prototype.clearToolbeltExtensionsProto \x3d function() {\n  this.setToolbeltExtensionsProto(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.search.logging.SearchLog.prototype.hasToolbeltExtensionsProto \x3d function() {\n  return jspb.Message.getField(this, 5) !\x3d null;\n};\n\n\n/**\n * optional LogTime event_log_time \x3d 4;\n * @return {?proto.search.logging.LogTime}\n */\nproto.search.logging.SearchLog.prototype.getEventLogTime \x3d function() {\n  return /** @type{?proto.search.logging.LogTime} */ (\n    jspb.Message.getWrapperField(this, proto.search.logging.LogTime, 4));\n};\n\n\n/** @param {?proto.search.logging.LogTime|undefined} value */\nproto.search.logging.SearchLog.prototype.setEventLogTime \x3d function(value) {\n  jspb.Message.setWrapperField(this, 4, value);\n};\n\n\nproto.search.logging.SearchLog.prototype.clearEventLogTime \x3d function() {\n  this.setEventLogTime(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.search.logging.SearchLog.prototype.hasEventLogTime \x3d function() {\n  return jspb.Message.getField(this, 4) !\x3d null;\n};\n\n\n/**\n * optional frameworks.client.logging.WebErrorLogEvent web_error_log_event \x3d 6;\n * @return {?proto.frameworks.client.logging.WebErrorLogEvent}\n */\nproto.search.logging.SearchLog.prototype.getWebErrorLogEvent \x3d function() {\n  return /** @type{?proto.frameworks.client.logging.WebErrorLogEvent} */ (\n    jspb.Message.getWrapperField(this, proto.frameworks.client.logging.WebErrorLogEvent, 6));\n};\n\n\n/** @param {?proto.frameworks.client.logging.WebErrorLogEvent|undefined} value */\nproto.search.logging.SearchLog.prototype.setWebErrorLogEvent \x3d function(value) {\n  jspb.Message.setWrapperField(this, 6, value);\n};\n\n\nproto.search.logging.SearchLog.prototype.clearWebErrorLogEvent \x3d function() {\n  this.setWebErrorLogEvent(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.search.logging.SearchLog.prototype.hasWebErrorLogEvent \x3d function() {\n  return jspb.Message.getField(this, 6) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.search.logging.SearchLog}\n */\nproto.search.logging.SearchLog.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.search.logging.SearchLog, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.search.logging.LogTime \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.search.logging.LogTime, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.search.logging.LogTime.displayName \x3d \x27proto.search.logging.LogTime\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.search.logging.LogTime.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.search.logging.LogTime.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.search.logging.LogTime} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.search.logging.LogTime.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    eventTimeMs: jspb.Message.getField(msg, 1),\n    eventElapsedTimeUsec: jspb.Message.getField(msg, 2)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.search.logging.LogTime}\n */\nproto.search.logging.LogTime.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.search.logging.LogTime;\n  return proto.search.logging.LogTime.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.search.logging.LogTime} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.search.logging.LogTime}\n */\nproto.search.logging.LogTime.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {number} */ (reader.readUint64());\n      msg.setEventTimeMs(value);\n      break;\n    case 2:\n      var value \x3d /** @type {number} */ (reader.readUint64());\n      msg.setEventElapsedTimeUsec(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.search.logging.LogTime.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.search.logging.LogTime.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.search.logging.LogTime} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.search.logging.LogTime.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeUint64(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?number} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeUint64(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint64 event_time_ms \x3d 1;\n * @return {?number}\n */\nproto.search.logging.LogTime.prototype.getEventTimeMs \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?number|undefined} value */\nproto.search.logging.LogTime.prototype.setEventTimeMs \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.search.logging.LogTime.prototype.clearEventTimeMs \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.search.logging.LogTime.prototype.hasEventTimeMs \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional uint64 event_elapsed_time_usec \x3d 2;\n * @return {?number}\n */\nproto.search.logging.LogTime.prototype.getEventElapsedTimeUsec \x3d function() {\n  return /** @type {?number} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?number|undefined} value */\nproto.search.logging.LogTime.prototype.setEventElapsedTimeUsec \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.search.logging.LogTime.prototype.clearEventElapsedTimeUsec \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.search.logging.LogTime.prototype.hasEventElapsedTimeUsec \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.search.logging.LogTime}\n */\nproto.search.logging.LogTime.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.search.logging.LogTime, data);\n};\n\n\n\n//# sourceURL\x3dhttps://qs/search/logging/search_log.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/transport/send_beacon_sender.js";
goog.loadModule("goog.module(\x27search.log.transport.SendBeaconSender\x27);\n\nconst MapParser \x3d goog.require(\x27urls.MapParser\x27);\nconst Sender \x3d goog.require(\x27search.log.transport.Sender\x27);\nconst asserts \x3d goog.require(\x27goog.asserts\x27);\nconst util \x3d goog.require(\x27search.log.transport.util\x27);\n\n/**\n * Send logs using navigator.sendBeacon() API.\n * @implements {Sender}\n */\nclass SendBeaconSender {\n  /**\n   * Constructs a SendBeaconSender.\n   */\n  constructor() {}\n\n  /**\n   * @override\n   */\n  log(url, data) {\n    const fullUrl \x3d util.getFullUrl(url);\n    if (goog.DEBUG) {\n      // Non-renamed alias for gws.log.VeEventLogger.prototype.logUri\n      const logUri \x3d goog.getObjectByName(\x27google.vel.lu\x27);\n      if (logUri) {\n        logUri(fullUrl);\n      }\n    }\n    asserts.assert(SendBeaconSender.isAvailable());\n    if (SendBeaconSender.isAvailable()) {\n      window.navigator.sendBeacon(\n          fullUrl, data ? new MapParser().serialize(data) : undefined);\n    }\n  }\n\n  /**\n   * @return {boolean} Whether window.navigator.sendBeacon is available.\n   */\n  static isAvailable() {\n    return goog.isFunction(window.navigator.sendBeacon);\n  }\n}\n\nexports \x3d SendBeaconSender;\n\n//# sourceURL\x3dhttps://qs/gws/js/log/transport/send_beacon_sender.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/csi/shared.js";
eval("/**\n * @fileoverview CSI code shared by both inline JavaScript and XJS. Because this\n * file is included from inline JavaScript, it must have no external\n * dependencies on Closure or other XJS code, and its size must be kept minimal.\n * If possible, it should contain only code that can be completed inlined by the\n * compiler (e.g., constants).\n */\n\ngoog.provide(\x27gws.csi.shared.Milestone\x27);\n\ngoog.scope(function() {\n\n\n/**\n * Milestones that can block the submission of a CSI beacon. These are used to\n * delay the load beacon until all load latency metrics have been recorded. The\n * low-level extern CSI API allows milestones to be blocked and unblocked with\n * google.c.b and google.c.u, respectively.\n * @enum {string}\n */\ngws.csi.shared.Milestone \x3d {\n  // Core GWS CSI milestones:\n\n  /** Base page rendering complete or JESR transition rendering complete. */\n  PAGE_RENDER: \x27pr\x27,\n\n  /** Primary or secondary XJS execution complete. */\n  XJS_END: \x27xe\x27,\n\n  /** Icon fonts loaded. **/\n  ICON_FONTS: \x27icon\x27,\n\n  // GSA CSI milestones:\n\n  /** Native content rendering complete (for iOS GSA hybrid SERPs). */\n  NATIVE_CONTENT_RENDER: \x27ncr\x27,\n\n  // Quantum CSI milestones:\n\n  /** Quantum animations complete (for Quantum Full only). */\n  QUANTUM_CARD_SLIDING: \x27qcs\x27,\n\n  /** Quantum image fading complete (for Quantum Light and Quantum Full). */\n  QUANTUM_IMAGE_FADING: \x27qif\x27,\n\n  // Shopping CSI milestones:\n\n  /** Shopping above-the-fold images loaded. */\n  SHOPPING_ABOVE_FOLD_RENDER: \x27safr\x27,\n\n  /** Shopping result popout event handlers have been registered. */\n  SHOPPING_RESULTS_INTERACTIVE: \x27sri\x27\n};\n\n});  // goog.scope\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/csi/shared.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/csi/api.js";
eval("/**\n * @fileoverview Public CSI API for GWS primary and secondary XJS code. This\n * file provides a high-level abstraction for GWS infrastructure and feature\n * code to use CSI without having to use the more limited, terser named CSI\n * externs defined from inline JavaScript. Additionally, it allows us to keep\n * inline JS minimal by offloading most CSI functionality to XJS.\n */\n\ngoog.provide(\x27gws.csi.api\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27gws.csi.shared.Milestone\x27);\n\ngoog.scope(function() {\nconst api \x3d gws.csi.api;\nconst asserts \x3d goog.asserts;\n\n\n/**\n * The zero-based sequence number of the current CSI load timer. Will be\n * incremented whenever CSI is reset due to a JESR transition. This will be zero\n * if and only if we\x27re on the base page.\n * @private {number}\n */\napi.loadTimerNumber_ \x3d 0;\n\n\n/**\n * Returns whether or not CSI is enabled for the current request. To avoid\n * JavaScript errors due to undefined external symbols, XJS code should use this\n * function to check that CSI has been enabled before using the CSI API.\n * @return {boolean}\n */\napi.isEnabled \x3d function() {\n  // External CSI symbols live in the global google.c object, which is\n  // initialized by //gws/output/pages/elements/javascript/csi_header.html. The\n  // CSI header is only included if CSI is enabled via Mendel config.\n  return !!google.c;\n};\n\n\n/**\n * Returns whether or not global CSI data is associated with the base page. This\n * function returns false after CSI data has been reset due to a JESR transition\n * such as a JESR bookmark load, IG search, or JESR query refinement.\n * @return {boolean}\n */\napi.isBasePage \x3d function() {\n  return !api.loadTimerNumber_;\n};\n\n\n/**\n * Blocks sending of the load CSI report until all blocked milestones have been\n * unblocked.\n * @param {gws.csi.shared.Milestone} milestone Milestone to block. If the\n *     milestone is already blocked, an error will be logged and no action\n *     taken.\n */\napi.blockLoadReport \x3d function(milestone) {\n  asserts.assert(api.isEnabled(), \x27CSI API not enabled\x27);\n  google.c.b(milestone);\n};\n\n\n/**\n * Marks a blocking event for the load CSI report as completed.\n * @param {gws.csi.shared.Milestone} milestone Milestone to unblock. If the\n *     milestone is not blocked, an error will be logged and no action taken.\n */\napi.unblockLoadReport \x3d function(milestone) {\n  asserts.assert(api.isEnabled(), \x27CSI API not enabled\x27);\n  google.c.u(milestone);\n};\n\n\n/**\n * Returns a decorator around the provided function that replaces the function\n * with a no-op if CSI is reset for a JESR transition before the function is\n * called. The decorated function may be called any number of times.\n * @param {function()} f\n * @return {function()}\n */\napi.decorateLoadCallback \x3d function(f) {\n  // TODO(b/20491986): This is hacky and causes us to drop potentially valid\n  // beacons. Once CSI timers are de-globalized, simply close over the load\n  // timer for the current request and then call the provided callback with the\n  // *original* load timer so the callback can read and write the correct data.\n  const savedLoadTimerNumber \x3d api.loadTimerNumber_;\n  return function() {\n    if (api.loadTimerNumber_ \x3d\x3d savedLoadTimerNumber) {\n      f();\n    }\n  };\n};\n\n\n/**\n * Resets global CSI data after a JESR transition has started.\n */\napi.resetForTransition \x3d function() {\n  // Keep track of the fact that a JESR transition occurred so that we don\x27t\n  // asynchronously record or send pre-transition CSI data with a\n  // post-transition beacon.\n  ++api.loadTimerNumber_;\n\n  // Unregister load event listeners associated with the previous page that have\n  // not yet fired.\n  google.ull();\n};\n\n\n/**\n * Reinitializes global CSI API state for testing only.\n * @package\n */\napi.setUpInitialLoadForTesting \x3d function() {\n  api.loadTimerNumber_ \x3d 0;\n};\n\n});  // goog.scope\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/csi/api.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/events/eventhandler.js";
eval("// Copyright 2005 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Class to create objects which want to handle multiple events\n * and have their listeners easily cleaned up via a dispose method.\n *\n * Example:\n * \x3cpre\x3e\n * function Something() {\n *   Something.base(this);\n *\n *   ... set up object ...\n *\n *   // Add event listeners\n *   this.listen(this.starEl, goog.events.EventType.CLICK, this.handleStar);\n *   this.listen(this.headerEl, goog.events.EventType.CLICK, this.expand);\n *   this.listen(this.collapseEl, goog.events.EventType.CLICK, this.collapse);\n *   this.listen(this.infoEl, goog.events.EventType.MOUSEOVER, this.showHover);\n *   this.listen(this.infoEl, goog.events.EventType.MOUSEOUT, this.hideHover);\n * }\n * goog.inherits(Something, goog.events.EventHandler);\n *\n * Something.prototype.disposeInternal \x3d function() {\n *   Something.base(this, \x27disposeInternal\x27);\n *   goog.dom.removeNode(this.container);\n * };\n *\n *\n * // Then elsewhere:\n *\n * var activeSomething \x3d null;\n * function openSomething() {\n *   activeSomething \x3d new Something();\n * }\n *\n * function closeSomething() {\n *   if (activeSomething) {\n *     activeSomething.dispose();  // Remove event listeners\n *     activeSomething \x3d null;\n *   }\n * }\n * \x3c/pre\x3e\n *\n * @author pupius@google.com (Daniel Pupius)\n */\n\ngoog.provide(\x27goog.events.EventHandler\x27);\n\ngoog.require(\x27goog.Disposable\x27);\ngoog.require(\x27goog.events\x27);\ngoog.require(\x27goog.object\x27);\n\ngoog.forwardDeclare(\x27goog.events.EventWrapper\x27);\n\n\n\n/**\n * Super class for objects that want to easily manage a number of event\n * listeners.  It allows a short cut to listen and also provides a quick way\n * to remove all events listeners belonging to this object.\n * @param {SCOPE\x3d} opt_scope Object in whose scope to call the listeners.\n * @constructor\n * @extends {goog.Disposable}\n * @template SCOPE\n */\ngoog.events.EventHandler \x3d function(opt_scope) {\n  goog.Disposable.call(this);\n  // TODO(mknichel): Rename this to this.scope_ and fix the classes in google3\n  // that access this private variable. :(\n  this.handler_ \x3d opt_scope;\n\n  /**\n   * Keys for events that are being listened to.\n   * @type {!Object\x3c!goog.events.Key\x3e}\n   * @private\n   */\n  this.keys_ \x3d {};\n};\ngoog.inherits(goog.events.EventHandler, goog.Disposable);\n\n\n/**\n * Utility array used to unify the cases of listening for an array of types\n * and listening for a single event, without using recursion or allocating\n * an array each time.\n * @type {!Array\x3cstring\x3e}\n * @const\n * @private\n */\ngoog.events.EventHandler.typeArray_ \x3d [];\n\n\n/**\n * Listen to an event on a Listenable.  If the function is omitted then the\n * EventHandler\x27s handleEvent method will be used.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array\x3cstring\x3e|\n *     !goog.events.EventId\x3cEVENTOBJ\x3e|!Array\x3c!goog.events.EventId\x3cEVENTOBJ\x3e\x3e}\n *     type Event type to listen for or array of event types.\n * @param {function(this:SCOPE, EVENTOBJ):?|{handleEvent:function(?):?}|null\x3d}\n *     opt_fn Optional callback function to be used as the listener or an object\n *     with handleEvent function.\n * @param {(boolean|!AddEventListenerOptions)\x3d} opt_options\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template EVENTOBJ, THIS\n */\ngoog.events.EventHandler.prototype.listen \x3d function(\n    src, type, opt_fn, opt_options) {\n  var self \x3d /** @type {!goog.events.EventHandler} */ (this);\n  return self.listen_(src, type, opt_fn, opt_options);\n};\n\n\n/**\n * Listen to an event on a Listenable.  If the function is omitted then the\n * EventHandler\x27s handleEvent method will be used.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array\x3cstring\x3e|\n *     !goog.events.EventId\x3cEVENTOBJ\x3e|!Array\x3c!goog.events.EventId\x3cEVENTOBJ\x3e\x3e}\n *     type Event type to listen for or array of event types.\n * @param {function(this:T, EVENTOBJ):?|{handleEvent:function(this:T, ?):?}|\n *     null|undefined} fn Optional callback function to be used as the\n *     listener or an object with handleEvent function.\n * @param {boolean|!AddEventListenerOptions|undefined} options\n * @param {T} scope Object in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template T, EVENTOBJ, THIS\n */\ngoog.events.EventHandler.prototype.listenWithScope \x3d function(\n    src, type, fn, options, scope) {\n  var self \x3d /** @type {!goog.events.EventHandler} */ (this);\n  // TODO(mknichel): Deprecate this function.\n  return self.listen_(src, type, fn, options, scope);\n};\n\n\n/**\n * Listen to an event on a Listenable.  If the function is omitted then the\n * EventHandler\x27s handleEvent method will be used.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array\x3cstring\x3e|\n *     !goog.events.EventId\x3cEVENTOBJ\x3e|!Array\x3c!goog.events.EventId\x3cEVENTOBJ\x3e\x3e}\n *     type Event type to listen for or array of event types.\n * @param {function(EVENTOBJ):?|{handleEvent:function(?):?}|null\x3d} opt_fn\n *     Optional callback function to be used as the listener or an object with\n *     handleEvent function.\n * @param {(boolean|!AddEventListenerOptions)\x3d} opt_options\n * @param {Object\x3d} opt_scope Object in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template EVENTOBJ, THIS\n * @private\n */\ngoog.events.EventHandler.prototype.listen_ \x3d function(\n    src, type, opt_fn, opt_options, opt_scope) {\n  var self \x3d /** @type {!goog.events.EventHandler} */ (this);\n  if (!goog.isArray(type)) {\n    if (type) {\n      goog.events.EventHandler.typeArray_[0] \x3d type.toString();\n    }\n    type \x3d goog.events.EventHandler.typeArray_;\n  }\n  for (var i \x3d 0; i \x3c type.length; i++) {\n    var listenerObj \x3d goog.events.listen(\n        src, type[i], opt_fn || self.handleEvent, opt_options || false,\n        opt_scope || self.handler_ || self);\n\n    if (!listenerObj) {\n      // When goog.events.listen run on OFF_AND_FAIL or OFF_AND_SILENT\n      // (goog.events.CaptureSimulationMode) in IE8-, it will return null\n      // value.\n      return self;\n    }\n\n    var key \x3d listenerObj.key;\n    self.keys_[key] \x3d listenerObj;\n  }\n\n  return self;\n};\n\n\n/**\n * Listen to an event on a Listenable.  If the function is omitted, then the\n * EventHandler\x27s handleEvent method will be used. After the event has fired the\n * event listener is removed from the target. If an array of event types is\n * provided, each event type will be listened to once.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array\x3cstring\x3e|\n *     !goog.events.EventId\x3cEVENTOBJ\x3e|!Array\x3c!goog.events.EventId\x3cEVENTOBJ\x3e\x3e}\n *     type Event type to listen for or array of event types.\n * @param {function(this:SCOPE, EVENTOBJ):?|{handleEvent:function(?):?}|null\x3d}\n * opt_fn\n *    Optional callback function to be used as the listener or an object with\n *    handleEvent function.\n * @param {(boolean|!AddEventListenerOptions)\x3d} opt_options\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template EVENTOBJ, THIS\n */\ngoog.events.EventHandler.prototype.listenOnce \x3d function(\n    src, type, opt_fn, opt_options) {\n  var self \x3d /** @type {!goog.events.EventHandler} */ (this);\n  return self.listenOnce_(src, type, opt_fn, opt_options);\n};\n\n\n/**\n * Listen to an event on a Listenable.  If the function is omitted, then the\n * EventHandler\x27s handleEvent method will be used. After the event has fired the\n * event listener is removed from the target. If an array of event types is\n * provided, each event type will be listened to once.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array\x3cstring\x3e|\n *     !goog.events.EventId\x3cEVENTOBJ\x3e|!Array\x3c!goog.events.EventId\x3cEVENTOBJ\x3e\x3e}\n *     type Event type to listen for or array of event types.\n * @param {function(this:T, EVENTOBJ):?|{handleEvent:function(this:T, ?):?}|\n *     null|undefined} fn Optional callback function to be used as the\n *     listener or an object with handleEvent function.\n * @param {boolean|undefined} capture Optional whether to use capture phase.\n * @param {T} scope Object in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template T, EVENTOBJ, THIS\n */\ngoog.events.EventHandler.prototype.listenOnceWithScope \x3d function(\n    src, type, fn, capture, scope) {\n  var self \x3d /** @type {!goog.events.EventHandler} */ (this);\n  // TODO(mknichel): Deprecate this function.\n  return self.listenOnce_(src, type, fn, capture, scope);\n};\n\n\n/**\n * Listen to an event on a Listenable.  If the function is omitted, then the\n * EventHandler\x27s handleEvent method will be used. After the event has fired\n * the event listener is removed from the target. If an array of event types is\n * provided, each event type will be listened to once.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array\x3cstring\x3e|\n *     !goog.events.EventId\x3cEVENTOBJ\x3e|!Array\x3c!goog.events.EventId\x3cEVENTOBJ\x3e\x3e}\n *     type Event type to listen for or array of event types.\n * @param {function(EVENTOBJ):?|{handleEvent:function(?):?}|null\x3d} opt_fn\n *    Optional callback function to be used as the listener or an object with\n *    handleEvent function.\n * @param {(boolean|!AddEventListenerOptions)\x3d} opt_options\n * @param {Object\x3d} opt_scope Object in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template EVENTOBJ, THIS\n * @private\n */\ngoog.events.EventHandler.prototype.listenOnce_ \x3d function(\n    src, type, opt_fn, opt_options, opt_scope) {\n  var self \x3d /** @type {!goog.events.EventHandler} */ (this);\n  if (goog.isArray(type)) {\n    for (var i \x3d 0; i \x3c type.length; i++) {\n      self.listenOnce_(src, type[i], opt_fn, opt_options, opt_scope);\n    }\n  } else {\n    var listenerObj \x3d goog.events.listenOnce(\n        src, type, opt_fn || self.handleEvent, opt_options,\n        opt_scope || self.handler_ || self);\n    if (!listenerObj) {\n      // When goog.events.listen run on OFF_AND_FAIL or OFF_AND_SILENT\n      // (goog.events.CaptureSimulationMode) in IE8-, it will return null\n      // value.\n      return self;\n    }\n\n    var key \x3d listenerObj.key;\n    self.keys_[key] \x3d listenerObj;\n  }\n\n  return self;\n};\n\n\n/**\n * Adds an event listener with a specific event wrapper on a DOM Node or an\n * object that has implemented {@link goog.events.EventTarget}. A listener can\n * only be added once to an object.\n *\n * @param {EventTarget|goog.events.EventTarget} src The node to listen to\n *     events on.\n * @param {goog.events.EventWrapper} wrapper Event wrapper to use.\n * @param {function(this:SCOPE, ?):?|{handleEvent:function(?):?}|null} listener\n *     Callback method, or an object with a handleEvent function.\n * @param {boolean\x3d} opt_capt Whether to fire in capture phase (defaults to\n *     false).\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template THIS\n */\ngoog.events.EventHandler.prototype.listenWithWrapper \x3d function(\n    src, wrapper, listener, opt_capt) {\n  var self \x3d /** @type {!goog.events.EventHandler} */ (this);\n  // TODO(mknichel): Remove the opt_scope from this function and then\n  // templatize it.\n  return self.listenWithWrapper_(src, wrapper, listener, opt_capt);\n};\n\n\n/**\n * Adds an event listener with a specific event wrapper on a DOM Node or an\n * object that has implemented {@link goog.events.EventTarget}. A listener can\n * only be added once to an object.\n *\n * @param {EventTarget|goog.events.EventTarget} src The node to listen to\n *     events on.\n * @param {goog.events.EventWrapper} wrapper Event wrapper to use.\n * @param {function(this:T, ?):?|{handleEvent:function(this:T, ?):?}|null}\n *     listener Optional callback function to be used as the\n *     listener or an object with handleEvent function.\n * @param {boolean|undefined} capture Optional whether to use capture phase.\n * @param {T} scope Object in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template T, THIS\n */\ngoog.events.EventHandler.prototype.listenWithWrapperAndScope \x3d function(\n    src, wrapper, listener, capture, scope) {\n  var self \x3d /** @type {!goog.events.EventHandler} */ (this);\n  // TODO(mknichel): Deprecate this function.\n  return self.listenWithWrapper_(src, wrapper, listener, capture, scope);\n};\n\n\n/**\n * Adds an event listener with a specific event wrapper on a DOM Node or an\n * object that has implemented {@link goog.events.EventTarget}. A listener can\n * only be added once to an object.\n *\n * @param {EventTarget|goog.events.EventTarget} src The node to listen to\n *     events on.\n * @param {goog.events.EventWrapper} wrapper Event wrapper to use.\n * @param {function(?):?|{handleEvent:function(?):?}|null} listener Callback\n *     method, or an object with a handleEvent function.\n * @param {boolean\x3d} opt_capt Whether to fire in capture phase (defaults to\n *     false).\n * @param {Object\x3d} opt_scope Element in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template THIS\n * @private\n */\ngoog.events.EventHandler.prototype.listenWithWrapper_ \x3d function(\n    src, wrapper, listener, opt_capt, opt_scope) {\n  var self \x3d /** @type {!goog.events.EventHandler} */ (this);\n  wrapper.listen(\n      src, listener, opt_capt, opt_scope || self.handler_ || self, self);\n  return self;\n};\n\n\n/**\n * @return {number} Number of listeners registered by this handler.\n */\ngoog.events.EventHandler.prototype.getListenerCount \x3d function() {\n  var count \x3d 0;\n  for (var key in this.keys_) {\n    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n\n/**\n * Unlistens on an event.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array\x3cstring\x3e|\n *     !goog.events.EventId\x3cEVENTOBJ\x3e|!Array\x3c!goog.events.EventId\x3cEVENTOBJ\x3e\x3e}\n *     type Event type or array of event types to unlisten to.\n * @param {function(this:?, EVENTOBJ):?|{handleEvent:function(?):?}|null\x3d}\n *     opt_fn Optional callback function to be used as the listener or an object\n *     with handleEvent function.\n * @param {(boolean|!EventListenerOptions)\x3d} opt_options\n * @param {Object\x3d} opt_scope Object in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template EVENTOBJ, THIS\n */\ngoog.events.EventHandler.prototype.unlisten \x3d function(\n    src, type, opt_fn, opt_options, opt_scope) {\n  var self \x3d /** @type {!goog.events.EventHandler} */ (this);\n  if (goog.isArray(type)) {\n    for (var i \x3d 0; i \x3c type.length; i++) {\n      self.unlisten(src, type[i], opt_fn, opt_options, opt_scope);\n    }\n  } else {\n    var capture \x3d\n        goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;\n    var listener \x3d goog.events.getListener(\n        src, type, opt_fn || self.handleEvent, capture,\n        opt_scope || self.handler_ || self);\n\n    if (listener) {\n      goog.events.unlistenByKey(listener);\n      delete self.keys_[listener.key];\n    }\n  }\n\n  return self;\n};\n\n\n/**\n * Removes an event listener which was added with listenWithWrapper().\n *\n * @param {EventTarget|goog.events.EventTarget} src The target to stop\n *     listening to events on.\n * @param {goog.events.EventWrapper} wrapper Event wrapper to use.\n * @param {function(?):?|{handleEvent:function(?):?}|null} listener The\n *     listener function to remove.\n * @param {boolean\x3d} opt_capt In DOM-compliant browsers, this determines\n *     whether the listener is fired during the capture or bubble phase of the\n *     event.\n * @param {Object\x3d} opt_scope Element in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template THIS\n */\ngoog.events.EventHandler.prototype.unlistenWithWrapper \x3d function(\n    src, wrapper, listener, opt_capt, opt_scope) {\n  var self \x3d /** @type {!goog.events.EventHandler} */ (this);\n  wrapper.unlisten(\n      src, listener, opt_capt, opt_scope || self.handler_ || self, self);\n  return self;\n};\n\n\n/**\n * Unlistens to all events.\n */\ngoog.events.EventHandler.prototype.removeAll \x3d function() {\n  goog.object.forEach(this.keys_, function(listenerObj, key) {\n    if (this.keys_.hasOwnProperty(key)) {\n      goog.events.unlistenByKey(listenerObj);\n    }\n  }, this);\n\n  this.keys_ \x3d {};\n};\n\n\n/**\n * Disposes of this EventHandler and removes all listeners that it registered.\n * @override\n * @protected\n */\ngoog.events.EventHandler.prototype.disposeInternal \x3d function() {\n  goog.events.EventHandler.superClass_.disposeInternal.call(this);\n  this.removeAll();\n};\n\n\n/**\n * Default event handler\n * @param {goog.events.Event} e Event object.\n */\ngoog.events.EventHandler.prototype.handleEvent \x3d function(e) {\n  throw new Error(\x27EventHandler.handleEvent not implemented\x27);\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/events/eventhandler.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/sendbeacon_sender_default.js";
goog.loadModule("/**\n * @mods {search.log.Logger}\n * @modName {sendBeaconDefaultLogSenderMod}\n */\ngoog.module(\x27search.log.sendBeaconDefaultSender\x27);\n\nconst ImageFetchSender \x3d goog.require(\x27search.log.transport.ImageFetchSender\x27);\nconst Logger \x3d goog.require(\x27search.log.Logger\x27);\nconst SendBeaconSender \x3d goog.require(\x27search.log.transport.SendBeaconSender\x27);\nconst Sender \x3d goog.require(\x27search.log.transport.Sender\x27);\n\n/**\n * @return {!Sender}\n * @suppress {duplicate}\n */\nLogger.mod.getDefaultSender \x3d function() {\n  if (goog.isDefAndNotNull(window.navigator.sendBeacon)) {\n    return new SendBeaconSender();\n  } else {\n    return new ImageFetchSender();\n  }\n};\n\n//# sourceURL\x3dhttps://qs/gws/js/log/sendbeacon_sender_default.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/common/uri.js";
eval("/**\n * @fileoverview This file implements some common utilites for dealing with URIs\n * in gws xjs.  This was written as an alternative to Closure\x27s uri.js to avoid\n * bringining in several kb of dependencies for simple operations.\n * Additionally, it was found that Closure\x27s uri.js did not provide every piece\n * of functionality needed.  So, in lieu of continuing to add logic to it, this\n * file was created.\n *\n * TODO(joeltine): In the future, we should get around to consolidating all\n * JS URI handling logic and this file should go away.\n */\n\ngoog.provide(\x27gws.uri\x27);\n\ngoog.require(\x27goog.string\x27);\n\n\n/**\n * Constructs a map of the CGI parameters of the given URL or fragment.\n * @param {string} url URL or document fragment.\n * @param {boolean\x3d} opt_decode If true, decode parameter values.\n * @return {!Object\x3cstring, string\x3e}\n */\ngws.uri.getKeyValuePairs \x3d function(url, opt_decode) {\n  if (!url) {\n    return {};\n  }\n  var pairs \x3d url.split(\x27\x26\x27);\n  var obj \x3d {};\n  for (var i \x3d 0; i \x3c pairs.length; ++i) {\n    var pair \x3d pairs[i];\n    if (pair) {\n      var pieces \x3d pair.split(\x27\x3d\x27);\n      // Only take the first value.\n      if (!goog.isDef(obj[pieces[0]])) {\n        var value \x3d pieces[1] || \x27\x27;\n        obj[pieces[0]] \x3d opt_decode ? decodeURIComponent(value) : value;\n      }\n    }\n  }\n  return obj;\n};\n\n\n/**\n * Gets the parsed result of the the give intent url fragment\n * {@link https://developer.chrome.com/multidevice/android/intents}.\n *\n * An intent url fragment is of the form\n * Intent;scheme\x3dhttp;package\x3dother.youtube;end\n * The return value is {\x27scheme\x27: \x27http\x27, \x27package\x27: \x27other\x27} or an empty object\n * if the fragment cannot be parsed.\n\n * @param {string} fragment The url fragment string.\n * @return {!Object\x3cstring, string\x3e}\n */\ngws.uri.parseIntentUrlFragment \x3d function(fragment) {\n  var obj \x3d {};\n  // Intent URIs may be terminated by an optional semicolon.\n  var match \x3d fragment.match(/Intent;(.+);end;?$/);\n  if (match) {\n    var pairs \x3d match[1].split(\x27;\x27);\n    for (var i \x3d 0; i \x3c pairs.length; i++) {\n      var pair \x3d pairs[i];\n      if (pair) {\n        var pieces \x3d goog.string.splitLimit(pair, \x27\x3d\x27, 1);\n        if (pieces[0]) {\n          var value \x3d pieces[1] || \x27\x27;\n          obj[pieces[0]] \x3d value;\n        }\n      }\n    }\n  }\n  return obj;\n};\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/common/uri.js\n");

$googDebugFname=undefined;

var $googDebugFname="gws/js/log/transport/anchor_ping_sender.js";
goog.loadModule("goog.module(\x27search.log.transport.AnchorPingSender\x27);\n\nconst AnchorPingConstants \x3d goog.require(\x27search.log.transport.AnchorPingConstants\x27);\nconst Sender \x3d goog.require(\x27search.log.transport.Sender\x27);\nconst dom \x3d goog.require(\x27goog.dom\x27);\nconst userAgent \x3d goog.require(\x27goog.userAgent\x27);\nconst util \x3d goog.require(\x27search.log.transport.util\x27);\n\n/**\n * Send logs using anchor ping attribute. On send, the data url is populated\n * into the \x27ping\x27 attribute of an anchor element. A programmatic click is done\n * on the link. In supported browsers, this click issues a notification hit to\n * the ping url.\n *\n * See: https://www.w3schools.com/tags/att_a_ping.asp\n *\n * @implements {Sender}\n */\nclass AnchorPingSender {\n  /**\n   * Constructs a AnchorPingSender.\n   */\n  constructor() {\n    /** @const {!Element} */\n    this.linkEl \x3d this.getOrCreateAnchorElement_();\n\n\n    /**\n     * The anchor ping sending is enabled if both ping attribute and\n     * programmatic click on the element are supported.\n     * @const {boolean}\n     * TODO(ravia): Check if both WEBKIT and ping checks are required.\n     */\n    this.pingEnabled \x3d\n        !!(userAgent.WEBKIT \x26\x26 (this.linkEl[\x27ping\x27] \x3d\x3d \x27\x27) \x26\x26\n           (this.linkEl[\x27click\x27]));\n\n    this.linkEl.addEventListener(\x27click\x27, e \x3d\x3e this.clickListener_(e));\n  }\n\n  /**\n   * @override\n   */\n  log(url, data) {\n    const fullUrl \x3d util.getFullUrl(url, data);\n    if (goog.DEBUG) {\n      // TODO(ravia): Remove the dependency on \x27google.vel.lu\x27\n      // Non-renamed alias for gws.log.VeEventLogger.prototype.logUri\n      const logUri \x3d goog.getObjectByName(\x27google.vel.lu\x27);\n      if (logUri) {\n        logUri(fullUrl);\n      }\n    }\n    if (this.pingEnabled) {\n      this.linkEl.setAttribute(\x27ping\x27, fullUrl);\n      this.linkEl.click();\n      return;\n    }\n    google.log(\x27\x27, \x27\x27, fullUrl);\n  }\n\n  /**\n   * Returns the anchor element for sending pings. If it does not exist in DOM,\n   * creates it.\n   * @return {!Element} The link element.\n   * @private\n   */\n  getOrCreateAnchorElement_() {\n    var linkEl \x3d document.getElementById(AnchorPingConstants.LINK_ID);\n    if (linkEl) {\n      return linkEl;\n    }\n    var el \x3d dom.createDom(\x27a\x27, {\n      id: AnchorPingConstants.LINK_ID,\n      href: \x27javascript:void(0);\x27,\n      style: \x27display: none;\x27\n    });\n    dom.appendChild(document.body, el);\n    return el;\n  }\n\n  /**\n   * Listener for the ping link element click.\n   * Stops the propagation of the ping.\n   * @private\n   * @param {?Event} e The event object.\n   */\n  clickListener_(e) {\n    if (e \x26\x26 e.stopPropagation) {\n      e.stopPropagation();\n    }\n  };\n}\n\nexports \x3d AnchorPingSender;\n\n//# sourceURL\x3dhttps://qs/gws/js/log/transport/anchor_ping_sender.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/anchor_ping_sender_default.js";
goog.loadModule("/**\n * @mods {search.log.Logger}\n * @modName {anchorPingDefaultLogSenderMod}\n */\ngoog.module(\x27search.log.anchorPingSenderDefault\x27);\n\nconst AnchorPingSender \x3d goog.require(\x27search.log.transport.AnchorPingSender\x27);\nconst Logger \x3d goog.require(\x27search.log.Logger\x27);\nconst Sender \x3d goog.require(\x27search.log.transport.Sender\x27);\n\n/**\n * @type {?Sender}\n */\nlet anchorPingSender \x3d null;\n\n/**\n * @return {!Sender}\n * @suppress {duplicate}\n */\nLogger.mod.getDefaultSender \x3d function() {\n  if (!anchorPingSender) {\n    anchorPingSender \x3d new AnchorPingSender();\n  }\n  return anchorPingSender;\n};\n\n//# sourceURL\x3dhttps://qs/gws/js/log/anchor_ping_sender_default.js\n");

$googDebugFname=undefined;

var $googDebugFname="gws/js/animation/internal/debug_enabled.js";
goog.loadModule("/**\n * @fileoverview Debug utilities for Quantum animations.\n * @modName {animationDebugMod}\n * @mods {search.animation.internal.debug}\n * @suppress {constantProperty}\n */\n\ngoog.module(\x27search.animation.internal.debugEnabled\x27);\ngoog.module.declareLegacyNamespace();\n\nconst GwsUrl \x3d goog.require(\x27search.url.GwsUrl\x27);\nconst NestedParameterListParser \x3d goog.require(\x27urls.NestedParameterListParser\x27);\nconst debug \x3d goog.require(\x27search.animation.internal.debug\x27);\nconst googString \x3d goog.require(\x27goog.string\x27);\n\n/**\n * @enum {string}\n */\nconst Param \x3d {\n  // Deadline for motions can be disabled via \x22\x26quantum\x3dnodeadline:1\x22.\n  NO_DEADLINE: \x27nodeadline\x27,\n  // Slows down animations based on debugging cgi param, examples:\n  // \x22\x26quantum\x3dslow:2\x22 will slow down by a 2x factor\n  // \x22\x26quantum\x3dslow:0.5\x22 will speed up by a 2x factor\n  SLOW: \x27slow\x27\n};\n\n\n/**\n * True if an animation frame is already queued.\n */\nlet animationFrameRequested \x3d false;\n\n/**\n * If true, animations should not be updated.\n */\nlet paused \x3d false;\n\n/**\n * The timestamp of the last update() call.\n */\nlet lastUpdateTime \x3d null;\n\n/**\n * Currently running animations.\n * @type {!Array\x3c!debug.SteppableAnimation\x3e}\n */\nlet runningAnimations \x3d [];\n\n\n/**\n * Unpauses the animation loop and resumes any running animations.\n */\nfunction resume() {\n  paused \x3d false;\n  lastUpdateTime \x3d goog.now();\n  requestAnimationFrame();\n}\n\n\n/**\n * Pauses the animation loop and any running animations.\n */\nfunction pause() {\n  paused \x3d true;\n}\n\n\n/**\n * Pauses and advances animations one frame.\n * @param {number\x3d} opt_elapsed Frame time in milliseconds, omit for a 60fps\n *     frame.\n */\nfunction step(opt_elapsed) {\n  opt_elapsed \x3d opt_elapsed || 1000.0 / 60;\n  pause();\n  lastUpdateTime \x3d goog.now() - opt_elapsed;\n  updateAnimations();\n}\n\n\n/**\n * Updates the animations based on the elapsed time.\n */\nfunction updateAnimations() {\n  var now \x3d goog.now();\n  var elapsed \x3d now - lastUpdateTime;\n  runningAnimations.forEach(animation \x3d\x3e {\n    animation.update(elapsed);\n  });\n  lastUpdateTime \x3d now;\n}\n\n\n/**\n * Starts the animation loop.\n */\nfunction requestAnimationFrame() {\n  if (!animationFrameRequested) {\n    if (!lastUpdateTime) {\n      lastUpdateTime \x3d goog.now();\n    }\n    window.requestAnimationFrame(() \x3d\x3e {\n      animationFrameRequested \x3d false;\n      if (!paused \x26\x26 runningAnimations.length) {\n        updateAnimations();\n        requestAnimationFrame();\n      } else {\n        lastUpdateTime \x3d null;\n      }\n    });\n    animationFrameRequested \x3d true;\n  }\n}\n\n\n/**\n * Add an animation to the global animation list.\n * @param {!debug.SteppableAnimation} animation\n */\nfunction addAnimation(animation) {\n  if (runningAnimations.indexOf(animation) \x3d\x3d -1) {\n    runningAnimations.push(animation);\n  }\n}\n\n\n/**\n * Remove a finished animation from the list of running animations.\n * @param {!debug.SteppableAnimation} animation\n */\nfunction removeAnimation(animation) {\n  const index \x3d runningAnimations.indexOf(animation);\n  if (index !\x3d -1) {\n    runningAnimations.splice(index, 1);\n  }\n}\n\n\n/**\n * @return {number}\n */\nfunction getSlowdownFactor() {\n  return googString.toNumber(getParamValue(Param.SLOW)) || 1;\n}\n\n\n/**\n * @return {boolean} Wheather deadlines are disabled for motions.\n */\nfunction isNoDeadline() {\n  return !!getParamValue(Param.NO_DEADLINE);\n}\n\n\n/**\n * @param {string} name\n * @return {string}\n */\nfunction getParamValue(name) {\n  // TODO(xingjuan): Change to use UrlHistory instead of raw access of\n  // window.location. We temporarily do this to avoid paying the cost of extra\n  // tytes from UrlHistroy for Tire1 traffic.\n  const gwsUrl \x3d new GwsUrl(window.location.href);\n  const quantum \x3d gwsUrl.searchParams.get(\x27quantum\x27);\n  if (!quantum) return \x27\x27;\n  return new NestedParameterListParser().deserialize(quantum).get(name) || \x27\x27;\n}\n\n\n// Make global functions accessible in obfuscated code. To examine closely what\n// happens during an animation, users can use the functions defined on the\n// global DebugAnimation object from the console if enabled the debug animation\n// driver through \x22\x26quantum\x3ddebuganimation\x22.\nwindow[\x27DebugAnimation\x27] \x3d {\n  \x27pause\x27: pause,\n  \x27resume\x27: resume,\n  \x27step\x27: step\n};\n\ndebug.getSlowdownFactor \x3d getSlowdownFactor;\ndebug.isNoDeadline \x3d isNoDeadline;\ndebug.removeAnimation \x3d removeAnimation;\ndebug.addAnimation \x3d addAnimation;\ndebug.requestAnimationFrame \x3d requestAnimationFrame;\n\n//# sourceURL\x3dhttps://qs/gws/js/animation/internal/debug_enabled.js\n");

$googDebugFname=undefined;

var $googDebugFname="gws/js/task/instant_task.js";
goog.loadModule("goog.module(\x27search.task.InstantTask\x27);\n\nconst IDisposable \x3d goog.require(\x27goog.disposable.IDisposable\x27);\nconst Promise \x3d goog.require(\x27goog.Promise\x27);\nconst Task \x3d goog.require(\x27search.task.Task\x27);\n\n/**\n * Note: There is no need to use this directly. Instead use\n * search.task.scheduler\x27s functions scheduleWhenCalled, nextTick, setTimeout\n * and setInterval.\n * @implements {Task}\n */\nclass InstantTask {\n  /**\n   * @param {!Function} func\n   * @param {!IDisposable\x3d} opt_disposableOwner An optional IDisposable \x22owner\x22.\n   *     If this owner is disposed when play() or finish() is called, this skips\n   *     the call to func without throwing an error. Note this argument does not\n   *     bind this when func is called.\n   */\n  constructor(func, opt_disposableOwner) {\n    /** @private {boolean} */\n    this.calledFunc_ \x3d false;\n    /** @const @private */\n    this.func_ \x3d func;\n    /** @const @private */\n    this.disposableOwner_ \x3d opt_disposableOwner || null;\n  }\n\n  /** @override */\n  play() {\n    return new Promise(resolve \x3d\x3e {\n      this.finish();\n      resolve();\n    });\n  }\n\n  /** @override */\n  finish() {\n    if (this.calledFunc_) return;\n    this.calledFunc_ \x3d true;\n    if (this.disposableOwner_ \x26\x26 this.disposableOwner_.isDisposed()) return;\n    this.func_();\n  }\n\n  /** @override */\n  getDeadline() {\n    return 0;\n  }\n}\n\nexports \x3d InstantTask;\n\n//# sourceURL\x3dhttps://qs/gws/js/task/instant_task.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/task/cooperativescheduler.js";
goog.loadModule("/**\n * @fileoverview A scheduler that executes tasks and functions cooperatively.\n * @modName {cooperativeSchedulerMod}\n * @mods {search.task.scheduler}\n */\n\ngoog.module(\x27search.task.cooperativeScheduler\x27);\n\nconst IDisposable \x3d goog.require(\x27goog.disposable.IDisposable\x27);\nconst InstantTask \x3d goog.require(\x27search.task.InstantTask\x27);\nconst Motion \x3d goog.require(\x27search.animation.Motion\x27);\nconst Promise \x3d goog.require(\x27goog.Promise\x27);\nconst Resolver \x3d goog.require(\x27goog.promise.Resolver\x27);\nconst Task \x3d goog.require(\x27search.task.Task\x27);\nconst array \x3d goog.require(\x27goog.array\x27);\nconst gwsError \x3d goog.require(\x27gws.error\x27);\nconst nextTick \x3d goog.require(\x27goog.async.nextTick\x27);\nconst scheduler \x3d goog.require(\x27search.task.scheduler\x27);\n\n/**\n * @type {number} Used as a unique identifier for tasks in runTask since we\n *     don\x27t know if a call to scheduler.schedule() was made with a unique task.\n */\nlet taskIdCounter \x3d 0;\n\n/**\n * @typedef {{\n *   id: number,\n *   task: !Task,\n *   resolver: !Resolver\n * }}\n */\nvar QueueEntry;\n\n/** @type {!Array\x3c!QueueEntry\x3e} */\nlet queue \x3d [];\n\n/**\n * If this is set, then we are running currentEntry. If this is null, then there\n * is no task running and the queue should be empty.\n * @type {?QueueEntry}\n */\nlet currentEntry \x3d null;\n\n/**\n * @type {number}\n */\nlet watchdogTimerId \x3d -1;\n\n\n/**\n * Clear the watchdog timer.\n */\nfunction clearWatchdogTimer() {\n  clearTimeout(watchdogTimerId);\n  watchdogTimerId \x3d -1;\n}\n\n\n/**\n * If this is called, then the watchdog timer for task was triggered. Call\n * finish on that task if it is still running.\n * @param {!QueueEntry} entry\n */\nfunction handleTimeout(entry) {\n  watchdogTimerId \x3d -1;\n  if (currentEntry \x26\x26 entry.id \x3d\x3d currentEntry.id) {\n    finishCurrentTask();\n  }\n}\n\n\n/**\n * Synchronously play the next task if there is one as long as currentEntry is\n * null.\n */\nfunction maybeRunNextTask() {\n  if (currentEntry || !queue.length) {\n    return;\n  }\n  const entry \x3d queue.shift();\n  clearWatchdogTimer();\n  currentEntry \x3d entry;\n  try {\n    const task \x3d entry.task;\n    const promise \x3d task.play();\n    // Either resolve entry to null, or propagate rejection reason. Always clean\n    // up and continue to next task.\n    promise\n        .then(\n            () \x3d\x3e entry.resolver.resolve(null),\n            reason \x3d\x3e entry.resolver.reject(reason))\n        .thenAlways(() \x3d\x3e {\n          if (currentEntry \x26\x26 entry.id !\x3d currentEntry.id) {\n            // The watchdog timer must have triggered before the promise\n            // resolved.\n            return;\n          }\n          currentEntry \x3d null;\n          nextTick(maybeRunNextTask);\n        });\n    // Motion has it\x27s own internal handling of getDeadline.\n    if (!(task instanceof Motion) \x26\x26 !(task.getDeadline() \x3d\x3d Infinity)) {\n      watchdogTimerId \x3d\n          setTimeout(() \x3d\x3e handleTimeout(entry), task.getDeadline());\n    }\n  } catch (e) {\n    gwsError.log(e, {\x27op\x27: \x27scheduler:play\x27});\n    finishCurrentTask();\n  }\n}\n\n/**\n * Call finish on the current task and run the next task on nextTick.\n */\nfunction finishCurrentTask() {\n  clearWatchdogTimer();\n  if (currentEntry) {\n    callFinish(currentEntry);\n    currentEntry \x3d null;\n  }\n  nextTick(maybeRunNextTask);\n}\n\n/**\n * @param {!QueueEntry} entry\n */\nfunction callFinish(entry) {\n  try {\n    entry.task.finish();\n    entry.resolver.resolve(null);\n  } catch (e) {\n    entry.resolver.reject();\n    gwsError.log(e, {\x27op\x27: \x27scheduler:finish\x27});\n  }\n}\n\n\n/**\n * @param {!Task} task\n * @return {!QueueEntry}\n */\nfunction convertToQueueEntry(task) {\n  return /** @type {!QueueEntry} */ (\n      {id: ++taskIdCounter, task: task, resolver: Promise.withResolver()});\n}\n\n\n/**\n * @param {!Task} task\n * @return {!Promise}\n */\nfunction schedule(task) {\n  const entry \x3d convertToQueueEntry(task);\n  if (flushingQueue) {\n    // schedule must have been called by a task that\x27s currently being flushed.\n    // Tasks scheduled during a flush process will be finished in the process.\n    flushingQueue.push(entry);\n  } else {\n    queue.push(entry);\n    nextTick(maybeRunNextTask);\n  }\n  return entry.resolver.promise;\n}\n\n\n/** @type {!Array\x3c!QueueEntry\x3e|undefined} */\nlet flushingQueue \x3d undefined;\n\n\n/**\n * Synchronously complete the current executing task and run the given task\n * (e.g animations) immediately. Tasks in the queue or newly scheduled ones\n * will be pending until the task is finished.\n * @param {!Task} task\n * @return {!Promise}\n */\nfunction playNow(task) {\n  const entry \x3d convertToQueueEntry(task);\n  array.insertAt(queue, entry, 0);\n  if (currentEntry) {\n    clearWatchdogTimer();\n    callFinish(currentEntry);\n    currentEntry \x3d null;\n  }\n  maybeRunNextTask();\n  return entry.resolver.promise;\n}\n\n\n/**\n * Synchronously complete all tasks. This is done synchronously so that if there\n * are multiple tasks queued that cause DOM changes, we don\x27t want the UI to\n * flicker through each task.\n */\nfunction flush() {\n  if (flushingQueue) {\n    return;\n  }\n\n  flushingQueue \x3d queue;\n  queue \x3d [];\n\n  // Finish the current task.\n  if (currentEntry) {\n    clearWatchdogTimer();\n    flushingQueue.unshift(currentEntry);\n    currentEntry \x3d null;\n  }\n  // Finish all queued tasks.\n  while (flushingQueue.length) {\n    callFinish(flushingQueue.shift());\n  }\n\n  flushingQueue \x3d undefined;\n}\n\n\n/**\n * Execute a function that doesn\x27t need to block the scheduler.\n * @param {!Function} func\n * @param {!IDisposable\x3d} opt_disposableOwner An optional IDisposable \x22owner\x22,\n *     in most cases an instance whose class extends Disposable. If this owner\n *     is disposed by the time the deferred func is called, the func is not\n *     called. This skip happens without error, so if you want to do something\n *     special like log when the owner is disposed, don\x27t pass this optional\n *     argument and handle the disposed check yourself in func. This argument\n *     does not bind this in the eventual func call.\n * @return {!Promise}\n */\nfunction scheduleNextTick(func, opt_disposableOwner) {\n  return schedule(new InstantTask(func, opt_disposableOwner));\n}\n\n\n/**\n * If the scheduler is executing a task now, schedules the function to be\n * run asynchronously otherwise runs the function immediately.\n * @param {!Function} func\n * @param {!IDisposable\x3d} opt_disposableOwner An optional IDisposable \x22owner\x22,\n *     in most ases an instance whose class extends Disposable. If this owner is\n *     disposed by the time the deferred func is called, the func is not called.\n *     This skip happens without error, so if you want to do something special\n *     like log when the owner is disposed, don\x27t pass this optional argument\n *     and handle the disposed check yourself in func. This argument does not\n *     bind this in the eventual func call.\n * @return {!Promise}\n */\nfunction now(func, opt_disposableOwner) {\n  if (!currentEntry) {\n    if (goog.isDef(opt_disposableOwner) \x26\x26 opt_disposableOwner.isDisposed()) {\n      return Promise.resolve();\n    }\n    return Promise.resolve(func());\n  } else {\n    return schedule(new InstantTask(func, opt_disposableOwner));\n  }\n}\n\n\n/**\n * @param {!Function} func\n * @return {!Function} A wrapper such that when called, the function will be\n *     queued to run in the scheduler.\n */\nfunction scheduleWhenCalled(func) {\n  // Protect against the case that multiple things are trying to wrap a func.\n  if (func._schedulerWrapped) {\n    return func;\n  }\n  /**\n   * @this {*}\n   * @param {...*} args\n   */\n  const wrapped \x3d function(...args) {\n    // Pass this and arguments from the current call to func.\n    scheduleNextTick(() \x3d\x3e func.apply(this, args));\n  };\n  wrapped._schedulerWrapped \x3d true;\n  return wrapped;\n}\n\n\n/**\n * A special task used for the setTimeout and setInterval wrappers so that we\n * can find the tasks by their timer id in the queue and remove it.\n */\nclass TimerTask extends InstantTask {\n  /**\n   * @param {!Function} func\n   * @param {number} id\n   */\n  constructor(func, id) {\n    super(func);\n    /** @const */\n    this.id \x3d id;\n  }\n}\n\n\n/**\n * An implementation of setTimeout that won\x27t call the callback until the\n * scheduler queue not blocked.\n * @param {!Function} func\n * @param {number} time\n * @param {...*} args\n * @return {number}\n */\nfunction scheduleSetTimeout(func, time, ...args) {\n  const boundFn \x3d () \x3d\x3e func(...args);\n  const id \x3d setTimeout(() \x3d\x3e {\n    schedule(new TimerTask(boundFn, id));\n  }, time);\n  return id;\n}\n\n\n/**\n * @param {number} id The timer id.\n * @return {number} The index in queue of the TimerTask with the given id or -1\n *     if it is not set.\n */\nfunction findTimerTaskIndex(id) {\n  return array.findIndex(queue, entry \x3d\x3e {\n    const task \x3d entry.task;\n    return task instanceof TimerTask \x26\x26\n        (/** @type {!TimerTask} */ (task)).id \x3d\x3d id;\n  });\n}\n\n\n/**\n * @param {?number} id The timer id.\n */\nfunction scheduleClearTimeout(id) {\n  if (goog.isDefAndNotNull(id)) {\n    clearTimeout(id);\n    // Check the queue to see if the task is in the queue.\n    const i \x3d findTimerTaskIndex(id);\n    if (i \x3e -1) array.removeAt(queue, i);\n  }\n}\n\n\n/**\n * An implementation of setInterval that won\x27t call the callback until the\n * scheduler queue not blocked.\n * @param {!Function} func\n * @param {number} time\n * @param {...*} args\n * @return {number}\n */\nfunction scheduleSetInterval(func, time, ...args) {\n  const boundFn \x3d () \x3d\x3e func(...args);\n  // The native setInterval will not call func twice if 2 time lengths pass\n  // while the func is waiting in the JS queue. We mimick this behavior by only\n  // allowing 1 copy in the queue at a time.\n  const intervalFunc \x3d () \x3d\x3e {\n    const inQueue \x3d findTimerTaskIndex(id) \x3e -1;\n    if (!inQueue) {\n      schedule(new TimerTask(boundFn, id));\n    }\n  };\n  const id \x3d setInterval(intervalFunc, time);\n  return id;\n}\n\ngoog.exportSymbol(\x27google.sx.setTimeout\x27, scheduleSetTimeout);\n\nObject.assign(scheduler, {\n  schedule: schedule,\n  playNow: playNow,\n  flush: flush,\n  nextTick: scheduleNextTick,\n  now: now,\n  scheduleWhenCalled: scheduleWhenCalled,\n  setTimeout: scheduleSetTimeout,\n  clearTimeout: scheduleClearTimeout,\n  setInterval: scheduleSetInterval,\n  clearInterval: scheduleClearTimeout\n});\n\n//# sourceURL\x3dhttps://qs/gws/js/task/cooperativescheduler.js\n");

$googDebugFname=undefined;

var $googDebugFname="gws/js/log/error/constants.js";
goog.loadModule("goog.module(\x27search.log.error.constants\x27);\n\n/**\n * Common params that are sent with error logs.\n * @enum {string}\n */\nexports.WebErrorParams \x3d {\n  BINARY_VERSION: \x27bver\x27,\n  ERROR_CONTEXT: \x27ectx\x27,\n  ERROR_MESSAGE: \x27error\x27,\n  EVENT_ID: \x27ei\x27,\n  EXPERIMENT_IDS: \x27jexpid\x27,\n  FEATURE_ID: \x27fi\x27,\n  LINE_NUMBER: \x27line\x27,\n  SAMPLE_RATE: \x27jsr\x27,\n  SCRIPT: \x27script\x27,\n  SHOULD_DEOBFUSCATE_STACK: \x27sd\x27,\n  SOURCE_PAGE: \x27srcpg\x27,\n  STACK_TRACE: \x27trace\x27,\n  TRACE_URL_MAPPING: \x27tum\x27,\n};\n\n//# sourceURL\x3dhttps://qs/gws/js/log/error/constants.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/error/stack_trace_compression.js";
goog.loadModule("/**\n * @fileoverview Helper methods to do stack trace compression to abide by GWS\n * server limits.\n */\ngoog.module(\x27search.log.stackTraceCompressor\x27);\n\nconst jsonHybrid \x3d goog.require(\x27goog.json.hybrid\x27);\nconst {WebErrorParams} \x3d goog.require(\x27search.log.error.constants\x27);\n\n\n/**\n * The limit (in bytes) to compress the error report payload to.\n * NOTE(joeltine): There are also POST body size limits imposed by GWS and GFE.\n * See go/post-in-gws.\n * Bodies beyond those limits will be truncated automatically. Before raising\n * this further, consult GWS SRE and GWS team.\n * @const {number}\n * @private\n */\nconst POST_BODY_LIMIT_ \x3d 4096;\n\n/**\n * Regular expression to match JS source URLs in stack frames.  For example:\n *     \x22at baz.bar (http://host.com/google3/blah.js:1:2)\x22\n * @const {!RegExp}\n * @private\n */\nconst TRACE_URL_REGEX_ \x3d /(https?:\\/\\/.*?\\/.*?):/;\n\n/**\n * Regular expression to match CGI parameters added into urls. For example:\n *      \x22at baz.bar (http://host.com/google3/blah.js?xjs\x3ds1:1:2)\x22\n * see b/77923567 for more information.\n * @const {!RegExp}\n * @private\n */\nconst CGI_PARAM_REGEX_ \x3d /\\?.*?:/;\n\n\n/**\n * Adjusts the error stack trace to fit the post body limit imposed by GWS.  It\n * first attempts to replace all JS URLs with shortened symbols.  Then, if the\n * request is still beyond the limit, it starts truncating entire stack frames\n * until the limit is met.  If both attempts at compression fail, the request is\n * sent as is.\n *\n * @param {!Error} e The native error object to be logged.\n * @param {string} logMessage What will accompany the trace in the POST\n *     request.\n * @return {Object\x3cstring,string\x3e} A key-value mapping of URLs with their\n *     associated text.  Will be null if compression fails.\n */\nfunction compress(e, logMessage) {\n  if (!e.stack) {\n    return null;\n  }\n\n  const urlMapping \x3d encodeTraceUrls(e);\n  let stack \x3d e.stack;\n  const traceLimit \x3d calculateTraceLimit(logMessage, urlMapping);\n\n  if (traceLimit \x3e 0) {\n    const frames \x3d stack.split(\x27\\n\x27);\n    // Deobfuscation service expects at least top two frames in stack.\n    while (encodeURIComponent(stack).length \x3e traceLimit \x26\x26 frames.length \x3e 2) {\n      frames.pop();\n      stack \x3d frames.join(\x27\\n\x27);\n    }\n  }\n\n  e.stack \x3d stack;\n  return urlMapping;\n}\n\n\n/**\n * Replaces URLs with shortened symbols like, \x22{{0}}\x22.  This is necessary to\n * satisfy the GWS\x27 POST body size limit.\n *\n * @param {!Error} e The error object with the stack to encode.\n * @return {!Object\x3cstring,string\x3e} A key-value mapping of URLs with their\n *     associated text replacements.\n * @private\n */\nfunction encodeTraceUrls(e) {\n  if (!e.stack) {\n    return {};\n  }\n\n  const frames \x3d e.stack.split(\x27\\n\x27);\n  const mapping \x3d {};\n  let marker \x3d 0;\n\n  let frame;\n  for (let i \x3d 0; frame \x3d frames[i]; ++i) {\n    frame \x3d frame.replace(CGI_PARAM_REGEX_, \x27:\x27);\n    const urls \x3d frame.match(TRACE_URL_REGEX_);\n\n    if (urls) {\n      const url \x3d urls[1];\n      let symbol;\n\n      if (!mapping[url]) {\n        symbol \x3d \x27{{\x27 + (marker++) + \x27}}\x27;\n        mapping[url] \x3d symbol;\n      } else {\n        symbol \x3d mapping[url];\n      }\n\n      frames[i] \x3d frame.replace(url, symbol);\n    }\n  }\n\n  e.stack \x3d frames.join(\x27\\n\x27);\n  return mapping;\n}\n\n/**\n * Calculates bytes available for stack trace in POST body.\n *\n * @param {string} logMessage What will accompany the trace in the POST\n *     request.\n * @param {!Object\x3cstring,string\x3e} urlMapping A key-value mapping of URLs with\n *     their associated text replacements.\n * @return {number}\n * @private\n */\nfunction calculateTraceLimit(logMessage, urlMapping) {\n  // Duplicates GWS\x27s standard error POST body minus stack trace. See:\n  // http://cs/#piper///depot/google3/googledata/html/templates/gws/head/xjs/error_logger/error_logger_deobfuscate.js\x26rcl\x3d85533449\x26l\x3d37\n  const baseSize \x3d (encodeURIComponent(logMessage) + \x27\x26trace\x3d\x26\x27 +\n                    WebErrorParams.TRACE_URL_MAPPING + \x27\x3d\x27 +\n                    encodeURIComponent(jsonHybrid.stringify(urlMapping)))\n                       .length;\n\n  return POST_BODY_LIMIT_ - baseSize;\n}\n\n/**\n * @package for testing\n */\nconst testing \x3d {\n  calculateTraceLimit: calculateTraceLimit,\n  encodeTraceUrls: encodeTraceUrls,\n};\n\nexports \x3d {\n  compress,\n  testing,\n};\n\n//# sourceURL\x3dhttps://qs/gws/js/log/error/stack_trace_compression.js\n");

$googDebugFname=undefined;

var $googDebugFname="googledata/html/templates/gws/head/xjs/error_logger/error_logger_deobfuscate.js";
eval("/**\n * @fileoverview Modifies gws.error.log.to use ErrorReporter\x27s exception\n * handling.\n * @modName {errorDeobfuscate}\n * @mods {gws.error}\n */\n\ngoog.provide(\x27gws.error.deobfuscate\x27);\n\ngoog.require(\x27goog.debug\x27);\ngoog.require(\x27goog.json.hybrid\x27);\ngoog.require(\x27goog.log\x27);\ngoog.require(\x27goog.net.XmlHttp\x27);\ngoog.require(\x27goog.object\x27);\ngoog.require(\x27goog.uri.utils\x27);\ngoog.require(\x27gws.error\x27);\ngoog.require(\x27gws.moduleInterface\x27);\ngoog.require(\x27gws.uri\x27);\ngoog.require(\x27search.log.error.constants\x27);\ngoog.require(\x27search.log.stackTraceCompressor\x27);\n\n/**\n * Handler for caught exceptions.\n *\n * @param {!Error} exception The exception.\n * @param {!Object\x3cstring, string\x3e} errorData Values to include in the error\n *     report.\n * @param {!Object\x3cstring, string\x3e\x3d} opt_errorContext A map of key/value pairs\n *     to be included in the log message, that fill the error context jcatcher\n *     field.\n * @private\n */\ngws.error.deobfuscate.handleException_ \x3d function(\n    exception, errorData, opt_errorContext) {\n  const error \x3d\n      /** @type {!Error} */ (goog.debug.normalizeErrorObject(exception));\n\n  let requestUrl \x3d goog.uri.utils.appendParams(\n      \x27/gen_204\x27, \x27script\x27, error.fileName, \x27error\x27, error.message, \x27line\x27,\n      error.lineNumber, \x27jsr\x27, errorData[\x27jsr\x27], \x27ei\x27, errorData[\x27ei\x27]);\n\n  if (opt_errorContext) {\n    requestUrl \x3d goog.uri.utils.appendParam(\n        requestUrl, \x27ectx\x27, goog.json.hybrid.stringify(opt_errorContext));\n  }\n\n  const errorDataClone \x3d goog.object.clone(errorData);\n  errorDataClone[\x27trace\x27] \x3d error.stack;\n  const queryData \x3d goog.uri.utils.buildQueryDataFromMap(errorDataClone);\n  gws.error.deobfuscate.sendRequest_(requestUrl, queryData);\n};\n\n\n/**\n * Send request either via navigator.sendBeacon or normal XHR. This is dependent\n * on browser support for sendBeacon.\n * @param {string} uri URI to make request to.\n * @param {string} queryData The encoded query string, in the form \x27a\x3d1\x26b\x3d2\x27.\n * @private\n */\ngws.error.deobfuscate.sendRequest_ \x3d function(uri, queryData) {\n  if (navigator.sendBeacon) {\n    navigator.sendBeacon(uri, queryData);\n  } else {\n    gws.error.deobfuscate.sendXhr_(uri, queryData);\n  }\n};\n\n\n/**\n * Sends data using XHR POST.\n * @param {string} uri URI to make request to.\n * @param {string} queryData The encoded query string, in the form \x27a\x3d1\x26b\x3d2\x27.\n * @private\n */\ngws.error.deobfuscate.sendXhr_ \x3d function(uri, queryData) {\n  const xhr \x3d goog.net.XmlHttp();\n  xhr.open(\x27POST\x27, uri, true);\n  xhr.setRequestHeader(\n      \x27Content-Type\x27, \x27application/x-www-form-urlencoded;charset\x3dutf-8\x27);\n  xhr.send(queryData);\n};\n\n\n/**\n * Flag to be included along with error requests to signal to the server whether\n * or not the trace should be deobfuscated. Required as the current dispatcher,\n * /gen_204, does not support experiment selection.\n * @private {number}\n */\ngws.error.deobfuscate.shouldDeobfuscate_ \x3d 0;\n\n\n/** @private {?goog.log.Logger} */\ngws.error.deobfuscate.logger_ \x3d goog.log.getLogger(\x27gws.error.deobfuscate\x27);\n\n\n/**\n * Initializes errorDeobfuscate pinto mod.\n * @param {!Object} config Mod configuration object.\n * @private\n */\ngws.error.deobfuscate.init_ \x3d function(config) {\n  gws.error.deobfuscate.shouldDeobfuscate_ \x3d config[\x27sd\x27];\n};\n\n\n/**\n * Attempts to log a given error (e) to a backend service.  In order for the\n * error to be logged successfully, the error pre-check (_epc) has to be run.\n * If the error does get logged, the back-end service should de-obfuscate the\n * stack trace before forwarding it onto an ecatcher instance.\n *\n * @param {!Error} exception The error to be logged to GWS. Note that errors\n *     with no message field will be ignored (this function does nothing when\n *     called with \x22new Error()\x22 for this argument).\n * @param {!Object\x3cstring,string\x3e\x3d} opt_errorContext A map of key/value pairs\n *     to be included in the log message, that fill the error context jcatcher\n *     field.\n * @param {boolean\x3d} opt_discardOnError If true, you plan on re-throwing your\n *     error manually.  This will prevent it from being logged a second time in\n *     the window.onerror handler.  For example:\n *     try { ... } catch (e) { gws.error.log(e, true); throw e; }.\n * @private\n */\ngws.error.deobfuscate.log_ \x3d function(\n    exception, opt_errorContext, opt_discardOnError) {\n  // The existence of jsmp implies the user has been sampled into error\n  // reporting.  This is declared in error_reporting_js.js.\n  if (google.jsmp) {\n    // Check if we will actually log the error.  This is based on the\n    // errorSampleRate_, validity of the error (e) and message, and not\n    // exceeding the max number of error log invocations. Special Note: This\n    // method will throw an error if the errorSampleRate_ is -2.\n    if (google._epc(exception, !!opt_discardOnError, opt_errorContext, false)) {\n      return;\n    }\n\n    // Extract high priority log data from JS error and serialize to a log URL.\n    const logMessage \x3d google._gld(exception, \x27atyp\x3di\x27, {}, true);\n    const errorData \x3d gws.uri.getKeyValuePairs(logMessage, true);\n    const stackTraceCompressor \x3d\n        goog.module.get(\x27search.log.stackTraceCompressor\x27);\n    const mapping \x3d stackTraceCompressor.compress(exception, logMessage);\n\n    if (!goog.isNull(mapping) \x26\x26 !goog.object.isEmpty(mapping)) {\n      const WebErrorParams \x3d\n          goog.module.get(\x27search.log.error.constants\x27).WebErrorParams;\n      errorData[WebErrorParams.TRACE_URL_MAPPING] \x3d\n          goog.json.hybrid.stringify(mapping);\n    }\n\n    if (gws.error.deobfuscate.shouldDeobfuscate_) {\n      errorData[\x27sd\x27] \x3d \x271\x27;\n    }\n\n    // Delete error message (emsg) and stack trace (jsst) generated from _gld.\n    // These are added later by the error reporter as \x22error\x22 and \x22trace\x22 in the\n    // URL and POST entity-body. This also frees up space in the entity-body\n    // so it\x27s not truncated @ 4kb causing reporting failures.\n    delete errorData[\x27emsg\x27];\n    delete errorData[\x27jsst\x27];\n\n    try {\n      gws.error.deobfuscate.handleException_(\n          exception, errorData, opt_errorContext);\n    } catch (ex) {\n      // Catch exception to avoid infinite recursion.\n      goog.log.info(\n          gws.error.deobfuscate.logger_,\n          \x27Error occurred in sending an error report.\x27);\n    }\n  }\n};\n\n\n\ngws.error.registerDeobfuscator(gws.error.deobfuscate.log_);\n\ngws.moduleInterface.register(\n    gws.moduleInterface.getModKey(\x27errorDeobfuscate\x27),\n    {[gws.moduleInterface.EventType.INIT]: gws.error.deobfuscate.init_});\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/error_logger/error_logger_deobfuscate.js\n");

$googDebugFname=undefined;

var $googDebugFname="gws/js/log/error/util.js";
goog.loadModule("goog.module(\x27search.log.error.util\x27);\n\n/**\n * Returns true if this is just a noisy error message that we should not log.\n * @param {?Error} error\n * @return {boolean}\n */\nfunction isNoise(error) {\n  // Ignore errors with no data and spurious \x22Error loading script\x22 errors.\n  // These errors are spurious because they occur each time the user navigates\n  // away from a page while any script is still loading.\n  return !error || !error.message || error.message \x3d\x3d \x27Error loading script\x27;\n}\n\n/**\n * Whether to log the error. Checks whether the error is noisy and also if the\n * error should be sampled. Sampling is done on the server. If google.erd is\n * present then we should log.\n * @param {!Error} error\n * @return {boolean} Whether we should log the error.\n */\nfunction shouldLogError(error) {\n  return !isNoise(error) \x26\x26 !!google.erd;\n}\n\nexports \x3d {\n  shouldLogError,\n};\n\n//# sourceURL\x3dhttps://qs/gws/js/log/error/util.js\n");

$googDebugFname=undefined;

var $googDebugFname="gws/js/log/transport/xhr_sender.js";
goog.loadModule("goog.module(\x27search.log.transport.XhrSender\x27);\n\nconst MapParser \x3d goog.require(\x27urls.MapParser\x27);\nconst Sender \x3d goog.require(\x27search.log.transport.Sender\x27);\nconst XhrIo \x3d goog.require(\x27goog.net.XhrIo\x27);\nconst util \x3d goog.require(\x27search.log.transport.util\x27);\n\n/**\n * Send logs using a XHR POST request.\n * @implements {Sender}\n */\nclass XhrSender {\n  /**\n   * @override\n   */\n  log(url, data) {\n    XhrIo.send(\n        util.getFullUrl(url), undefined, \x27POST\x27,\n        data ? new MapParser().serialize(data) : undefined);\n  }\n}\n\nexports \x3d XhrSender;\n\n//# sourceURL\x3dhttps://qs/gws/js/log/transport/xhr_sender.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/transport/error_logging_transport.js";
goog.loadModule("goog.module(\x27search.log.transport.ErrorLoggingTransport\x27);\n\nconst Gws204Path \x3d goog.require(\x27search.log.transport.Gws204Path\x27);\nconst SendBeaconSender \x3d goog.require(\x27search.log.transport.SendBeaconSender\x27);\nconst Sender \x3d goog.require(\x27search.log.transport.Sender\x27);\nconst Transport \x3d goog.require(\x27search.log.transport.Transport\x27);\nconst XhrSender \x3d goog.require(\x27search.log.transport.XhrSender\x27);\nconst googObject \x3d goog.require(\x27goog.object\x27);\nconst stackTraceCompressor \x3d goog.require(\x27search.log.stackTraceCompressor\x27);\nconst {WebErrorParams} \x3d goog.require(\x27search.log.error.constants\x27);\nconst {combineUrlAndMap} \x3d goog.require(\x27search.log.transport.util\x27);\nconst {stringify} \x3d goog.require(\x27goog.json.hybrid\x27);\n\n/**\n * Transport for js error logs.\n *\n * An error logging specific transport. Puts the stack trace and stack trace\n * compression mapping params into the post body, while putting all other params\n * in the url. Tries to use sendbeacon else falls back to xhr.\n *\n * Usage Examples:\n *   transport \x3d new ErrorLoggingTransport();\n *   transport.logData(\n *     new Map([[\x27error\x27, \x27error-msg\x27],\n *              [\x27a\x27, \x271\x27],\n *              [\x27trace\x27, \x27some-trace {0}\x27],\n *             ]);\n *\n * Request URL /gen_204?error\x3derror-msg\x26a\x3d1\n * Post Body -\x3e \x26trace\x3dsome-trace\x26tum\x3dsome-url:%20{0}\n *\n * @implements {Transport}\n */\nclass ErrorLoggingTransport {\n  /**\n   * Constructs an Error Logging Transport.\n   */\n  constructor() {\n    /** @private @const {!Sender} */\n    this.sender_ \x3d ErrorLoggingTransport.testing.getSender();\n\n    /** @private @const {!Gws204Path} */\n    this.path_ \x3d Gws204Path.GEN204;\n  }\n\n  /**\n   * @override\n   */\n  logData(data) {\n    // GWS urls have a 2k limit and the post body has a 4k limit\n    // (see go/post-in-gws). The stack trace, even after compression, could be\n    // really big so sending the stack trace, experiment ids, and its\n    // compressing mapping in the post body and sending all other params in the\n    // url.\n    const postData \x3d new Map();\n    const stackTrace \x3d\n        this.getAndDeleteFromMap_(data, WebErrorParams.STACK_TRACE);\n    const experimentIds \x3d\n        this.getAndDeleteFromMap_(data, WebErrorParams.EXPERIMENT_IDS);\n\n    if (experimentIds) {\n      postData.set(WebErrorParams.EXPERIMENT_IDS, experimentIds);\n    }\n    if (stackTrace) {\n      // Since stack traces can be really big, we will attempt to compress them.\n      // Note stackTraceCompressor.compress() requires an error object and\n      // changes the stack property on the error object so need to create an\n      // empty error object to place the trace. TODO(danishn) if we keep this\n      // long term, think about whether the compressor should instead accept a\n      // stack trace instead of an error obejct.\n      const error \x3d new Error(\x27\x27);\n      error.stack \x3d stackTrace;\n      const mapping \x3d stackTraceCompressor.compress(error, experimentIds || \x27\x27);\n      if (mapping \x26\x26 !googObject.isEmpty(mapping)) {\n        postData.set(WebErrorParams.TRACE_URL_MAPPING, stringify(mapping));\n      }\n      postData.set(WebErrorParams.STACK_TRACE, error.stack);\n    }\n    this.sender_.log(\n        combineUrlAndMap(this.path_, data),\n        postData.size \x3e 0 ? postData : undefined);\n  }\n\n  /**\n   *  @param {!Map\x3cstring, string\x3e} data\n   *  @param {string} key\n   *  @return {string|undefined}\n   *  @private\n   */\n  getAndDeleteFromMap_(data, key) {\n    const val \x3d data.get(key);\n    data.delete(key);\n    return val;\n  }\n}\n\n/**\n * Provides the sender. It is not inlined so that we can stub it in tests.\n */\nErrorLoggingTransport.testing \x3d {\n  /**\n   * @return {!Sender}\n   */\n  getSender() {\n    return (SendBeaconSender.isAvailable()) ? new SendBeaconSender() :\n                                              new XhrSender();\n  }\n};\n\nexports \x3d ErrorLoggingTransport;\n\n//# sourceURL\x3dhttps://qs/gws/js/log/transport/error_logging_transport.js\n");

$googDebugFname=undefined;
var $googDebugFname="gws/js/log/error/logger_gws_log_builder_mod.js";
goog.loadModule("/**\n * @fileoverview Modifies search.log.errorLogger to log errors using logBuilder\n *   by setting search.error.errorLogger.mod.gwsErrorLogger.\n * @mods {search.log.errorLogger}\n * @modName {logErrorsViaLogBuilder}\n */\n\ngoog.module(\x27search.log.errorLoggerGwsLogBuilderMod\x27);\n\nconst ErrorLogger \x3d goog.require(\x27search.log.error.ErrorLogger\x27);\nconst ErrorLoggingTransport \x3d goog.require(\x27search.log.transport.ErrorLoggingTransport\x27);\nconst LogBuilder \x3d goog.require(\x27search.log.LogBuilder\x27);\nconst OneNamespaceType \x3d goog.require(\x27proto.search.onenamespace.OneNamespaceType\x27);\nconst Transport \x3d goog.require(\x27search.log.transport.Transport\x27);\nconst googDebug \x3d goog.require(\x27goog.debug\x27);\nconst googObject \x3d goog.require(\x27goog.object\x27);\nconst {WebErrorParams} \x3d goog.require(\x27search.log.error.constants\x27);\nconst {registry} \x3d goog.require(\x27search.log.errorLogger\x27);\nconst {shouldLogError} \x3d goog.require(\x27search.log.error.util\x27);\nconst {stringify} \x3d goog.require(\x27goog.json.hybrid\x27);\n\n\n/**\n * @implements {ErrorLogger}\n * Logs errors to gws via the LogBuilder.\n */\nclass GwsLogBuilderErrorLogger {\n  constructor() {\n    this.logBuilder \x3d LogBuilder.createDefaultInstance(\n        GwsLogBuilderErrorLogger.testing.getTransport());\n  }\n\n  /**\n   * @param {!Error} error The error to be logged.\n   * @param {!Object\x3cstring, string\x3e} errorContext\n   * @param {!OneNamespaceType} oneNamespaceType\n   * @override\n   */\n  log(error, errorContext, oneNamespaceType) {\n    if (!shouldLogError(error)) {\n      return;\n    }\n    this.addDataToLogBuilder_(\n        /** @type {!Error} */ (googDebug.normalizeErrorObject(error)),\n        errorContext, oneNamespaceType);\n    this.logBuilder.log();\n  }\n\n  /**\n   * Adds appropriate information about the error event to the logbuilder.\n   * @param {!Error} error The error to be logged.\n   * @param {!Object\x3cstring, string\x3e} errorContext A map of key/value pairs\n   *     to be included in the log message.\n   * @param {!OneNamespaceType} oneNamespaceType Used to get sample rate for a\n   *     given feature.\n   * @private\n   */\n  addDataToLogBuilder_(error, errorContext, oneNamespaceType) {\n    const errorReportingData \x3d google.erd;\n    this.logBuilder.addData(\n        WebErrorParams.BINARY_VERSION, String(errorReportingData[\x27bv\x27]));\n    this.logBuilder.addData(\n        WebErrorParams.SOURCE_PAGE, errorReportingData[\x27sp\x27]);\n    this.logBuilder.addData(\n        WebErrorParams.FEATURE_ID, String(oneNamespaceType));\n    this.logBuilder.addData(\n        WebErrorParams.SAMPLE_RATE, errorReportingData[\x27jsr\x27]);\n    this.logBuilder.addData(WebErrorParams.ERROR_MESSAGE, error.message);\n    this.logBuilder.addData(WebErrorParams.STACK_TRACE, error.stack);\n    this.logBuilder.addData(WebErrorParams.SCRIPT, error.fileName);\n    this.logBuilder.addData(\n        WebErrorParams.LINE_NUMBER, String(error.lineNumber));\n\n    if (google.kEXPI) {\n      this.logBuilder.addData(\n          WebErrorParams.EXPERIMENT_IDS, encodeURIComponent(google.kEXPI));\n    }\n\n    if (errorReportingData[\x27sd\x27]) {\n      // The \x27sd\x27 flag tells the server whether to send stack trace to scriptz\n      // for deobfuscation.\n      this.logBuilder.addData(WebErrorParams.SHOULD_DEOBFUSCATE_STACK, \x271\x27);\n    }\n\n    if (!googObject.isEmpty(errorContext)) {\n      // The gen_204 request handlers and jCatcher are aware of the\n      // ERROR_CONTEXT field so for now we stringify all extra k/v pairs into\n      // one field.\n      this.logBuilder.addData(\n          WebErrorParams.ERROR_CONTEXT, stringify(errorContext));\n    }\n  }\n}\n\n/**\n * Provides the transport. It is not inlined so that we can stub it in tests.\n * @package\n */\nGwsLogBuilderErrorLogger.testing \x3d {\n  /**\n   * @return {!Transport}\n   */\n  getTransport() {\n    return new ErrorLoggingTransport();\n  }\n};\n\nregistry.registerInstance(new GwsLogBuilderErrorLogger());\n\nexports \x3d {\n  GwsLogBuilderErrorLogger,\n};\n\n//# sourceURL\x3dhttps://qs/gws/js/log/error/logger_gws_log_builder_mod.js\n");

$googDebugFname=undefined;

var $googDebugFname="googledata/html/templates/gws/head/xjs/modulemanager/multi_moduleset_loader_mod.js";
goog.loadModule("/**\n * @fileoverview A mod that enable loading multi-moduleset.\n * @modName {multiModulesetLoaderMod}\n * @mods {gws.moduleManager}\n */\n\ngoog.module(\x27search.modules.ModuleManagerMultiModulesetMod\x27);\n\nconst EventHandler \x3d goog.require(\x27goog.events.EventHandler\x27);\nconst EventType \x3d goog.require(\x27goog.net.EventType\x27);\nconst ModuleLoader \x3d goog.require(\x27gws.modules.ModuleLoader\x27);\nconst ModulesetScope \x3d goog.require(\x27search.modules.ModulesetScope\x27);\nconst MultiModulesetRegistry \x3d goog.require(\x27search.modules.MultiModulesetRegistry\x27);\nconst ScsJsUrl \x3d goog.require(\x27fava.modules.ScsJsUrl\x27);\nconst XhrIo \x3d goog.require(\x27goog.net.XhrIo\x27);\nconst log \x3d goog.require(\x27goog.log\x27);\nconst moduleManager \x3d goog.require(\x27gws.moduleManager\x27);\nconst {assert} \x3d goog.require(\x27goog.asserts\x27);\n\n/**\n * @return {!ModuleLoader} an initialized instance of\n *     ModuleLoader.\n */\nmoduleManager.mod.createModuleLoader \x3d function() {\n  return new MultiModuleLoader(\n      google.xjsu, MultiModulesetRegistry.AddonModulesetInfoList,\n      google.mmxjsu || {});\n};\n\n/**\n * @record\n */\nclass FeatureAddonModulesetInfo {\n  constructor() {\n    /** @type {string} */\n    this.rowKey;\n    /** @type {string} */\n    this.baseModule;\n  }\n}\n\nclass MultiModuleLoader extends ModuleLoader {\n  /**\n   * @param {string} primaryUri The primary xjs URI.\n   * @param {!Array\x3c!MultiModulesetRegistry.AddonModulesetInfo\x3e} infoList A list\n   *     of addon moduleset infos.\n   * @param {!Object\x3cstring, string\x3e} addonModulesetUris A map from moduleset name\n   *     to an corresponding xjs uri.\n   */\n  constructor(primaryUri, infoList, addonModulesetUris) {\n    super(primaryUri);\n\n    /**\n     * @private @const\n     */\n    this.logger_ \x3d log.getLogger(\x27search.modules.MultiModuleLoader\x27);\n\n    /**\n     * A map from row key to XJS URL.\n     * @private @const {!Map\x3c?string, !ScsJsUrl\x3e}\n     */\n    this.rowKeyToXjsUrlMap_ \x3d new Map();\n\n    const modulesetRowKeyMap \x3d new Map();\n    for (const key in addonModulesetUris) {\n      const uri \x3d ScsJsUrl.parse(addonModulesetUris[key]);\n      modulesetRowKeyMap.set(key, uri.getRowKey());\n      this.rowKeyToXjsUrlMap_.set(uri.getRowKey(), uri);\n    }\n\n    /**\n     * A map from module name to its addon moduleset Info .\n     * @private @const {!Map\x3cstring, !FeatureAddonModulesetInfo\x3e}\n     */\n    this.addonModulesetMap_ \x3d new Map();\n    for (const info of infoList) {\n      assert(\n          !this.addonModulesetMap_.has(info.featureModule),\n          \x27One feature should only exist in one moduleset.\x27);\n      const rowKey \x3d info.modulesetName ?\n          assert(modulesetRowKeyMap.get(info.modulesetName)) :\n          this.getPrimaryRowKey_();\n\n      this.addonModulesetMap_.set(\n          info.featureModule, {rowKey, baseModule: info.baseModule});\n    }\n\n\n    /**\n     * A set of module ids that are have either loaded or in the process of\n     * being loaded.\n     * @private @const {!Map\x3c?string, !Set\x3cstring\x3e\x3e}\n     */\n    this.requestedModulesPerRowKey_ \x3d new Map(\n        [[this.getPrimaryRowKey_(), new Set([...this.requestedModules])]]);\n\n    /**\n     * A map from add-on moduleset row key to its scope.\n     * @private @const {!Map\x3cstring, !ModulesetScope\x3e}\n     */\n    this.addonModulesetScopePerRowKey_ \x3d new Map();\n\n    /**\n     * Event handler for managing handling events.\n     * @private @const {!EventHandler\x3c!MultiModuleLoader\x3e}\n     */\n    this.eventHandler_ \x3d new EventHandler(this);\n\n    // TODO(fishx): add module info in a following CL.\n  }\n\n  /**\n   * @override\n   */\n  loadModulesInternal(ids) {\n    const idMap \x3d this.splitModuleByModuleSet_(ids);\n    const primaryRowKey \x3d this.getPrimaryRowKey_();\n    const baseModuleSetPromise \x3d this.loadFromBaseModuleset(\n        idMap.get(primaryRowKey), this.getRequestedModule_(primaryRowKey));\n    this.updateRequestedModule_(primaryRowKey, idMap.get(primaryRowKey));\n\n    idMap.forEach((idGroup, rowKey) \x3d\x3e {\n      if (rowKey !\x3d primaryRowKey) {\n        const uri \x3d this.formatModuleUrl(\n            idGroup, this.getRequestedModule_(rowKey),\n            this.rowKeyToXjsUrlMap_.get(rowKey));\n        this.loadViaEval_(uri, baseModuleSetPromise, () \x3d\x3e {\n          if (google.almf) {\n            google.almf(idGroup);\n          }\n        });\n        this.updateRequestedModule_(rowKey, idGroup);\n      }\n    });\n  }\n\n  /**\n   * Split ids into multiple arrays. Each array contains modules from the same\n   * module set.\n   * @param {!Array\x3cstring\x3e} ids original id list to split.\n   * @return {!Map\x3c?string, !Array\x3cstring\x3e\x3e}\n   * @private\n   */\n  splitModuleByModuleSet_(ids) {\n    const result \x3d new Map();\n    result.set(this.getPrimaryRowKey_(), []);\n    for (const id of ids) {\n      const rowKey \x3d this.addonModulesetMap_.has(id) ?\n          this.addonModulesetMap_.get(id).rowKey :\n          this.getPrimaryRowKey_();\n      if (!result.has(rowKey)) {\n        result.set(rowKey, []);\n      }\n      const idGroup \x3d result.get(rowKey);\n      if (!this.getRequestedModule_(rowKey).has(id)) {\n        if (this.addonModulesetMap_.has(id)) {\n          // Every module in add-on moduleset will have a corresponding module\n          // in base moduleset. The module in base moduleset will be used to\n          // make sure that we load the deps (e.g. Base API) required by the\n          // module in add-on moduleset.\n          result.get(this.getPrimaryRowKey_())\n              .push(this.addonModulesetMap_.get(id).baseModule);\n        }\n        idGroup.push(id);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @param {?string} rowKey\n   * @param {!Array\x3cstring\x3e} moduleIds\n   * @private\n   */\n  updateRequestedModule_(rowKey, moduleIds) {\n    if (!this.requestedModulesPerRowKey_.has(rowKey)) {\n      this.requestedModulesPerRowKey_.set(rowKey, new Set());\n    }\n    const requestedIds \x3d this.requestedModulesPerRowKey_.get(rowKey);\n    for (const id of moduleIds) {\n      requestedIds.add(id);\n    }\n  }\n\n  /**\n   * @param {?string} rowKey\n   * @return {!Set\x3cstring\x3e}\n   * @private\n   */\n  getRequestedModule_(rowKey) {\n    return this.requestedModulesPerRowKey_.get(rowKey) || new Set();\n  }\n\n  /**\n   * @param {string} uri\n   * @param {!Promise} basePromise\n   * @param {function()} successFn\n   * @private\n   */\n  loadViaEval_(uri, basePromise, successFn) {\n    const xhrIo \x3d new XhrIo();\n    xhrIo.setWithCredentials(false);\n    this.eventHandler_.listen(xhrIo, EventType.COMPLETE, (event) \x3d\x3e {\n      this.handleComplete_(uri, basePromise, successFn, event);\n    });\n    xhrIo.send(uri);\n  }\n\n\n  /**\n   * @param {string} uri The uri.\n   * @param {!Promise} basePromise\n   * @param {function()} successFn\n   * @param {!Event} event The event.\n   * @private\n   */\n  handleComplete_(uri, basePromise, successFn, event) {\n    const xhrIo \x3d /** @type {!XhrIo} */ (event.target);\n    if (xhrIo.isSuccess()) {\n      const text \x3d xhrIo.getResponseText();\n      basePromise.then(() \x3d\x3e {\n        try {\n          const rowKey \x3d assert(ScsJsUrl.parse(uri).getRowKey());\n          if (!this.addonModulesetScopePerRowKey_.has(rowKey)) {\n            this.addonModulesetScopePerRowKey_.set(\n                rowKey, new ModulesetScope());\n          }\n          const scope \x3d this.addonModulesetScopePerRowKey_.get(rowKey);\n          const xjsText \x3d `${text} //# sourceURL\x3d${uri}`;\n          evalAddonXjsWithScope(xjsText, scope);\n        } catch (e) {\n          // TODO(fishx): Consider throwing an exception here.\n          log.error(this.logger_, \x27############ Eval failure \x27 + e);\n        }\n\n        successFn();\n      });\n    } else {\n      log.error(this.logger_, \x27### FAILED to load uri: \x27 + uri);\n    }\n\n    xhrIo.dispose();\n  }\n\n  /**\n   * TODO(gws-javascript-team): move this to the superclass and make\n   * primaryXjsUrl private if we end up launching multi-moduleset.\n   * @return {string} the row key for the primary XJS response.\n   * @private\n   */\n  getPrimaryRowKey_() {\n    return assert(this.primaryXjsUrl.getRowKey());\n  }\n}\n\n/**\n * eval XJS code in add-on moduleset within a given scope.\n * @param {string} xjsText\n * @param {!ModulesetScope} scope\n */\nfunction evalAddonXjsWithScope(xjsText, scope) {\n  /**\n   * @param {string} xjsText\n   * @this {ModulesetScope}\n   * @suppress {unusedLocalVariables} The fields should be used by xjsText.\n   */\n  function evalAddonXjs(xjsText) {\n    // Make sure add-on moduleset cannot access symbols in base moduleset.\n    const goog \x3d this.goog;\n    const gws \x3d this.gws;\n    const jslayout \x3d this.jslayout;\n    const jsaction \x3d this.jsaction;\n    const search \x3d this.search;\n    const fava \x3d this.fava;\n    const proto \x3d this.proto;\n    const jspb \x3d this.jspb;\n    const searchbox \x3d this.searchbox;\n    const wireless \x3d this.wireless;\n    const wiz \x3d this.wiz;\n\n    // In \x27strict mode\x27, eval will create its own local scope instead of using\n    // local scope from evalAddonXjs. In base.js, we have \x22var goog \x3d\n    // goog || {};\x22. Since eval has its own local scope, it will cause hoisting\n    // and \x22var goog \x3d undefined;\x22 will be added in the beginning of eval. So\n    // we need to add this extra \x22var goog \x3d this.goog;\x22 here to make sure in\n    // eval scope, \x22var goog\x22 has been defined properly.\n    eval(\x27var goog \x3d this.goog;\\n\x27 + xjsText);\n  }\n\n  evalAddonXjs.call(scope, xjsText);\n}\n\n\n/**\n * This exports will only be used by multi_moduleset_loader_mod_test.js\n * @package\n */\nexports.MultiModuleLoader \x3d MultiModuleLoader;\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/modulemanager/multi_moduleset_loader_mod.js\n");

$googDebugFname=undefined;

/** @suppress {missingRequire} */ var _ModuleManager_initialize = goog.bind(goog.module.ModuleManager.getInstance().setAllModuleInfoString, goog.module.ModuleManager.getInstance());
/** @suppress {missingRequire} */ _ModuleManager_initialize('quantum/sy1g/sy1h/sy1i:1/sy1j:3/sy1f:2,4/registry_module:5/sb_wiz/cb2/cb:8/sx/sy1m/sy2q/em1c/sy26/sy2o/emp/sy2p/emo/sy1l/sy1o:b/sy1p/sy1q/sy1r:l,m/sy1s:n/sy1t:o/sy1u/sy1v:q/sy1z:l,m/sy1x:m/sy1y:o/sy1w:p,r,s,t,u/sy20/sy21:k,v,w/sy22:w/sy2d/sy29/sy2a/sy2b/sy2c:10,11,12/sy2e:j/sy2f:14/sy2g/sy2h:15,16/sy2l/sy2i:17/sy2j/sy2k:18,19,1a/sy2m:1a/sy2n:18,19/sy24/sy27:e/sy25:1e,1f/sy28:y,1g/sy23:z,13,1b,1c,1d,1h/dvl:d,g,i,x,1i/sy2u:1/sy2s/sy2t:1l/sy2r:3,1k,1m/sy2v/sy2w:t,1m,1o/sy2z:1l/sy30:1n,1p,1q/sy31:1k/sy33/sy34/sy35:1t,1u/sy32:z,1p,1v/sy2y:1r,1s,1w/sy36:1n,1w/sy37:1n/sy2x:1x,1y,1z/sy38:20/sy39/sy3a/sy3b:22,23/sy3c/sy3d:s,21,24,25/sy3e:v,26/sy3g/sy3f:28/mhu:27,29/sy3h:v,z/kax:2b/sy3j/sy3x/sy3y/sy3k:2d/sy3m:w/sy3o/sy3n:2i/sy3r/sy3s:2k/sy3t/sy3q:2l,2m/sy3u/sy3v:2o/sy3w:2n,2p/sy3p:w,z,2j,2q/sy3l/sy3z:2n,2p/sy40/sy41:2k,2u/sy3i:v,26,2e,2f,2g,2h,2r,2s,2t,2v/tabs:2w/sy43/sy44/sy42:z,2d,2e,2y,2z/sy45:v,w,1u,30/sy46/sy47:2j/sy48:32,33/sy49:34/sy4a/sy4b:36/sy4c/sy4d:2e/sy4e:z,37,38,39/sy4f:3a/sy4g:3b/sy4h:1t,3a/sy4i:3d/sy4j:35,3c,3e/sy4k/sy4l:26/actn:31,3f,3g,3h/sy4m/abd:3j/rdf:d,k,26,29/plaea:o,z,24,29/sy4p/sy5v:3n/sy5w/emv/sy5u/emw/sy5t/emx/sy5s/emy/sy4z/sy50/sy51:3x,3y/sy5x:3z/em11:40/sy5y/sy5z/emz/sy63/em10/sy5h/sy5i:2j,47/sy5k/sy60/sy62/em1f/sy61/em1g/sy4o/sy5l/sy4q/sy5f/sy5g:o,26,4i/sy5j/sy4n:1h,2f,2r,3h,48,49,4f,4g,4h,4j,4k/sy4r/sy4s/sy4u/sy4v:3n,4o/sy4t:s,z,1g,4m,4p/sy4w/sy4x/sy4y:z/sy52:3z/sy53/sy54:4r,4s,4t,4u,4v/sy56/sy55:4w,4x/sy58/sy59:4z/sy5a:4u,50/sy5b:1h,4q,4s,4u,4v,4x,50/sy5d:50/sy5c:51,52,53/sy57:4y,54/sy5e/sy5m/sy5o/sy5n:1h,2e,2s,38,3h,48,4f,4j,57,58/sy5p:4v,51,59/sy5q/sy5r/plair:g,i,3q,3s,3u,3w,41,44,46,4c,4e,4l,4n,55,56,5a,5b,5c/sy64/sy68/sy69:32,33/sy6a/sy6b:5h/sy6c/sy6d:2e,5j/sy6e:32,33,5k/sy6f:34,5f,5g,5i,5l/sy66/sy67/sy6n:z,32,33/sy6g:2e,38/sy6h:5j/sy6i:2f,5r/sy6j:5s/sy6k:2y,5o/sy6l:5u/sy6m:37,5l,5p,5q,5t,5v/sy6o:3f/sy65:v,2q,5e,5m,5n,5w,5x/pla:5y/placr:g,i,o,3h,3q,3s,3u,3w,41,44,46,4n,55,56,5c/plar:g,i,o,3h,3q,3s,3u,3w,41,44,46,4n,55,56,5c/sy6p/sy6q/sy6r/sy6t/sy6u:65/sy6w:4o/sy6s:r,s,z,64,66,67/sy6v:68/sy6x:62/sy6y:69,6a/sy71/sy70:2y,6c/sy6z:6d/sy72:6e/sy75/sy74:24,6g/sy76:3n,6g/sy77/sy78/sy7d:25,29/sy79/sy7a/sy7b/sy7c:6o/sy7f/sy7g:1o,6q/sy7e:2y,6l,6m,6n,6p,6r/sy7i/sy7k/sy7l/sy7m:6u,6v/sy7j:m,22,6l,6w/sy7h:o,t,z,23,6s,6t,6x/sy7n:24,6y/sy7o/sy73:1h,2v,6b,6h,6i,6j,6k,6z,70/sy7q/sy7s:5o/sy7t:73/sy7u:w,74/sy7v:73/sy7w:73/sy7z:73/sy80:73/sy85/sy81:73/sy7y:75,78,79,7a,7b/sy82:73/sy83:73/sy7x:z,76,77,7c,7d,7e/sy84:7f/sy7p:13,4m,71,72,7g/sy86/sy87/sy88/sy7r:2r,2t,63,6f,7h,7i,7j,7k/lac:g,i,3h,3q,3s,3u,3w,7l/sy89:4q/sy8a:2s,4s,4v,7n/sy8b/sy8c:2i,7p/sy8d:51,52,53/sy8e:3h/cyg:g,i,o,3q,3s,3u,3w,41,44,46,7o,7q,7r,7s/sy8g/sy8f:21,24,5o,7u/sy8h:24,2d,68,7u/sy8j:68/sy8i:7v,7w,7x/sy8k:7y/cyi:g,i,o,3h,3q,3s,3u,3w,41,44,46,51,56,7o,7z/sy8l:2l,2m,2v/sy8m:2e,4h,81/sy8o/sy8p:2j/sy8q/sy8r:z,37,38,5f,5k,84,85/sy8n:1g,2y,83,86/ddlx:g,i,v,2f,82,87/hw:w,z/sy96/sy8s:21,4x,7w/sy8t:v,69,7y,8b/em12/sy8x/sy90/sy91/sy99/sy97:z,2s,8e,8h/sy9a/sy9f/em1h/sy9e:8f/em1i:8m/sy8u:z,5e/sy8v/sy8w/sy8y:z,8q/sy8z:y,1g,2y,8e,8q/sy94/sy93:z,8f,8q/sy95:w,8t,8u/sy92:1h,2s,39,4v,51,53,8c,8g,8o,8p,8r,8s,8v/sy98:8i/sy9b/emb/sy9c:8i/sy9d/em9/sy9g:8i/sy9h/ema/str:g,i,41,44,46,8d,8l,8n,8w/prom:g,i,v,1h,24,29/icr:v,24,29/kpcb:o,26,29/sy9i:v,z,38,4k/sy9j:7l/kpoe:g,i,3h,3q,3s,3u,3w,9a,9b/kpor:g,i,26,3q,3s,3u,3w,7l,9a/sy9k:j/sy9l:b,v,9e/igmc:d,26,29,9f/igm:d,9f/sy9m:l/sy9n:1h,2g,9i/sy9o:z,9j/em1e:9k/vs:g,i,9l/sy9p:28/sy9r:9n/sy9q:9o/sy9y:3x,4v/sya0/sy9z:9r/sya1:28,9s/sy9s:9p,9q,9t/sy9t:64/sy9u/sy9v/sy9w:9w,9x/sya2:v/sya3:1g,9z/sy9x:9u,9y,a0/sya4:1g,3n/sya6/sya8/sya9/syaa:a4,a5/syab:5r,a6/syac:2j,6k,a7/sya7:z,1g,a8/sya5:26,4m,8c,9v,a1,a3,a9/syae:z,37/syad:27,4q,9j,a2,aa,ab/syaf/syag:j,ad/syai/syaj/syak:ag/syal/syam:ah,ai/syan/syao:ak/syap/syaq:ak,am/syau/syah:9w,ae,af,aj,al,an,ao/syas:9n/syar:aq/syav/syaw:as/syax/syat:26,2d,a1,ap,ar,at,au/syb5/syaz:1g/syb0:3n,4o/syb2/syb3:az/syb6:o,ap,b0/syb7/syb4:4q,9a,9j,a2,aw/syb8/syb9/syba:v,1g/sybb:b6/syb1:3x,4n,4v,56,ar,ax,ay,b1,b2,b3,b4,b5,b7/syay:a1,b8/sybc:4o/sybd:3n,72,ba/sybe/emc/sybf/emd/sybg:b5/eme:bg/lhb:g,i,3q,3s,3u,3w,8d,9l,ac,b9,bd,bf,bh/sybh:ag/sybi:am/sybj/lum:g,i,v,1h,2q,2t,2v,3h,3q,3s,3u,3w,4p,bj,bk,bl/sybk/sybl/sybm/sybo:1a/sybn:j,1c,3n,bo,bp,bq/sybp/sybq/sybr:bt/sybs:4j/sybt:b6/sybu/sybv:5o/sybw:b7/dining:g,i,29,3h,3q,3s,3u,3w,8c,8d,bn,br,bs,bu,bv,bw,bx,by,bz/ddl:8c,8d/sybx/fac:3h,5e,7q,8c,8d,a4,c2/mbsf:z,5e,7c/syby/sybz/syc0/syc1:c5/syc2:ah,al,an,c5,c7/syc9/syc3:c6,c8,c9,ca/syc4/syc7:1h,2v/syc8/syc5:v,2y,cb,cd,ce/syc6/syca:11/mgksp:g,i,z,12,5l,cc,cf,cg,ch/agsa:z,72/gsac:72/gsaf:o,24,29,72/gsast:26/sycb:2j,cd/vrm:g,i,cn/sycc:3n/sycd:4v,51/syce:cd/sycf:4v,51/sych:z/sycl/sycj:z,cu/syck/sycn/sycg:v,4t,5x,a8,ce,cp,cq,cr,ct,cv,cw,cx/syci/sycm:5s/sgro:g,i,3q,3s,3u,3w,41,44,46,4o,cs,cy,cz,d0/syco:7g/sycp:75/lsb:d2,d3/tl:g,i,v,cd/sgl:g,i,24,29,cd/sycr/sycs:3f,d7/sycq/prec:g,i,v,1u,5m,6s,6x,86,cd,d8,d9/sycu:cd,cg/syct:8c,ce,db/sycv/sycw/lsfm:g,i,1i,2y,4t,5b,5s,8d,a8,cr,dc,dd,de/tpa:8c,8d/tts:g,i,1g/sycx/sycy:69,di/sycz/syd0/syd1:a7/syd2:z,37,38,39,84,a8,dl,dm/syd3:dn/syd4:62,di/vt:g,i,v,w,1g,26,2v,6b,6z,dj,dk,do,dp/rem:v,z,7j/syd5/stars_rem:3h,6z,7j,ds/syd6:73/syde:73/sydf:73/sydg:75,76,77,79,7b,dv/sydh:du,dw,dx/emf:dy/sydi:76,7e,du,dw/emg:e0/syd7:75/syd8:du,e2/emn:e3/sydx/sydy/sydz/emh/sye1/emi/sydb:75,78,79,7d/sydc:du,eb/emj:ec/sydd:76,du/emk:ee/syd9/sye0/eml/syda/emm/sydn:dv,e2/sydl:7c/sydj/sydk:7f,a0,du,em,en/sydo:77/sydp:7f,dw/sydq:76/sydr:75,7d/sydm:el,eo,ep,eq,er,es/syds:7c/sydt/sydu/sydv:ew/sydw:z,1t,ev,ex/sb_mob:g,i,dz,e1,e4,e8,ea,ed,ef,ei,ek,et,eu/qif:7s/sye2:38/sye3:o,2e,3h,3n,4m,5e,83,ex,f1/lbm:3q,3s,3u,3w,f2/qtf:o,3h/aa:3o,3q,3s,3u,3w,ay/sye5:1g,56/atn:g,i,13,26,29,4h,4o,f6/pvtlp:4h/bbd/bct:d,x,24,29/sye6:1g,5e/cr:g,i,fb/sye7:y,1e,2e/cdos:fd/c:en/sye9/sye8:r,3j,4o,fg/syea:5b,fh/syeb/hats:24,29,fi,fj/ib:n,29,3h,41,44,46,4u,4v/kpci:29,3h,4j/syec/syed:2g/kpc:3h,fn,fo/syee:1g,8c,9w/akpc:g,i,3h,8d,fq/akptrex:g,i,24,29,3q,3s,3u,3w,9l,b3,bd,bu,bz/shsi/syef:w/syeg:5b/syeh:z,dk,fv/seny:3h,4f,fu,fw/syei:6m,6u/ssgm:6z,fy/trt:6z/nru:o,3h,69,72/syej:o,26,2g/tcc:29,g2/syek/syel:13/syem:26,bx,g5/cben:29,3h,g4,g6/syen/syeo:o,26,bx,g5/syeq:3h,4f,g8/syer:o,3n,5e,82,ex,f1,ga/syep:7c,7n,fh,g6,g9,gb/syes:6o/cbhb:g,i,3q,3s,3u,3w,g4,gc,gd/cbin:g,i,3q,3s,3u,3w,g4,gc,gd/cbki:g,i,3q,3s,3u,3w,gc/cbmw:g,i,3q,3s,3u,3w,g4,gc,gd/cbob:g,i,3q,3s,3u,3w,g4,gc,gd/cbun:29,3h,g4,g9/csies/csi:fh/syet/syeu/syev:gn/dbm:9r,gm,go/syew/syex/d:gq,gr/elog/syez:o,z,2o,82,ex,f1/syf0:26,3n,4o,72,gu/folp:3h,3q,3s,3u,3w,gv/fole:o,3h/gf:g,i,v,1g,1p,1q,by/fp:g,i,26,3q,3s,3u,3w,7n/hsm:g,i,1g/syf1/syf2/syf4:9x/syf5:6t/syf3:6z,ao,h3,h4/syf6:h5/syf7:9x/syf8/syf9:h6,h7,h8/syfa/syfb:26,9x,ha/syfc:6z,81/syfd:6z/syfe:v,6y/dpfh:3h,3n,3q,3s,3u,3w,h1,h2,h9,hb,hc,hd,he/syfm/syfn:6c,hg/syfo:hh/syfg/syfh:6m,6n/syfi:hj,hk/syfj:9n,c9,hj/syfk/syfl:cb,hl,hm,hn/syff:hi,ho/syfp:2y,6k,hi,hl,hm/syfq:hq/syfr:o,26/syfs:8c,hp,hr,hs/syfu/syfv:20,hu/syfw:hv/syft:5,s,2s,82,ex,f1,hw/hsb:3h,3n,3q,3s,3u,3w,72,8d,ba,ht,hx/sdpfh:6z,hb/syfx:26,9y/lhda:6z,i0/syfy:h7,h8/syfz:9x/syg0:z,37,38,39,h7,h8,i3/lhdc:au,i1,i2,i4/syg1/syg3:9w/syg4:26,9y/syg2:1g,3n,69,au,h1,h9,hc,hd,i0,i2,i7,i8/lhdq:g,i,3h,3q,3s,3u,3w,h2,he,i6,i9/lhmm:6z/sdp:i1,i8/syg7/syg9/sygm:id,ie/syg5:if/syg6/syg8:5,1s,id/syga:5,1s,id,ie/sygb:1s/sygc:5,id,ik/sygd:5,1s,id,ie/syge/sygf:3,5u/sygg:1o/sygh:6q,in,io,ip/sygi:5,ik/sygj:1z/sygk:6r,iq,ir,is/sygl:u,20/sygn:if/sygo:5,1s,iv/syh7:3,83/sygv/sygw/sygx:iy,iz/syh6:j0/syh5:w,2i,ca/syh4/syh3:5,1z/syh2/sygt/sygu:j6/sygq:j7/sygr:1w/syh1:1q,j2,j3,j4,j5,j8,j9/sygy:j0/sygs:j1,ja,jb/sygz/syh0:io,is,jc,jd/sygp:5v,iq,je/jsa:g,i,v,1g,21,5i,c8,gr,ig,ih,ii,ij,il,im,it,iu,iw/di:v,24,29/syh8:7s/qaim:ji/irq:3h,8c,8d/iqp:g,i,3n,3q,3s,3u,3w,4c,4e,4l,5s/bpee:29,2g,3h,7q,a4/syh9/syha/syhb:72,jo/syhc:26/kch:g,i,1h,2g,2s,3h,3n,3q,3s,3u,3w,9a,ax,f6,jn,jp,jq/kx:g,i,1h,24,2g,2h,2v,3q,3s,3u,3w,4p,9a,a4/ltgt:o,24,29,63/mai:o,3h/ofmc:g,i,1h,3c,3h,8c,8d/qkix:g,i,2g,3h,3q,3s,3u,3w,41,44,46,4n,4t,54,56,9a/syhd:4p,4v,51,9a/syhe:4x,53,jx/qkx:26,2g,3q,3s,3u,3w,41,44,46,jy/syhf:z,5e/syhg:2e,2l,2o,2u/rqa:26,k0,k1/syhi:c8/syhj/syhk/DFTVkb/syhl:67,if,k5,k6/syhh:ai,de,k3,k4,k7/syhm/shrb:v,2y,3q,3s,3u,3w,gb,k8,k9/mu/odsswr/syhn:v,z,1g,2g/oh:g,i,3h,4f,kd/syho/syhp/ohl:g,i,o,24,29,3q,3s,3u,3w,4q,5e,kf,kg/syhq:1g,kf,kg/moh:g,i,1h,3h,kd,ki/eactn:24,31,5b,9x,j6/syhr:an/gact:o,30,3h,72,kl/syhu:9n/syht:kn/syhv:9n/syi5:aq/syi9:9n/syhs:ko,kp,kq,kr/syi6:9n/syic:ks/syib:9n/syia:ks,kv/syi7:9n/syi4:kq,kt,kx/syij:9n/syhy:ko,kq,kz/syid:kw,ky/syie:9n/syhz:kn/syig:kq,l3/syif:ks,kv,ky,l4/syih:l4/syhw:ku,l0,l1,l2,l5,l6/syi8:kp,ky/syii:kw/syhx:9p,l7,l8,l9/syi1:1t/syi0:z,33,36,38,39,a8,lb/syi2:2y,la/syi3:9s/syik:3a,5v,d7/ractn:2q,31,3f,3g,3h,9t,h7,kl,lc,ld,le,lf/syil/syim/ntact:o,30,3h,j6,lh,li/syin:30,lh/tactn:o,39,3h,j6,lb,li,lk/atctn:o,39,3h,j6,lb,li,lk/tntac:o,30,3h/syio:5,s,33,82,hw/syip/adinfo:3h,8c,8d,lo,lp/aoi:v,24,29,41,44,46,4v,51/dpc:24,29/syiq:s,2y/ctmsd:g,i,o,1g,3h,lt/ctms:o,3h/ctmi:o,3h/syir:1g,gb,lt/ctwsd:g,i,3q,3s,3u,3w,lx/ctws:g,i,3q,3s,3u,3w,lx/add:o,3h,9e/attl:29,3h/syis:z,2s/bbl:o,24,m2/apmf:26,29/apml:o,24,29/syit/dngd:g,i,1h,3h,hx,m6/syiu/dnig:o,2t,3h,m8/syiv:1g,26,bl/dnm:g,i,o,3h,m8,ma/dnpd:29,3h/dnvl:g,i,3h,m6,m8,ma/adso:d9,j6/syiw:4u/syix/syiy/aob:n,29,2y,3h,41,44,46,51,7q,mf,mg,mh/pel:29,3h,4j/plab:3h,5c,6f,8c,8d/plac:29,2r,3h,5c/syiz/plajct:g,i,o,1g,3h,4r,56,kg,mm/plaj:2t,3h,mm/plajl:g,i,o,1g,3h,56/plajn:g,i,o,1g,24,56/syj0/syj1:26,4n,4w,54,56,5y,kg,mm,mr/plaji:g,i,3h,3q,3s,3u,3w,41,44,46,5c,ms/syj2:1g,4r,56,mm,mr/plajit:g,i,29,2e,2y,3h,4j,mu/plajpv:g,i,o,1g,24,29,mm/plalb:g,i,1g,2t,3h,3n,3q,3s,3u,3w,5c,7q,81,8c,8d,a8,cw,dm,mm/syj3:cw/plamm:g,i,41,44,46,4c,4e,4l,4w,51,53,5c,my/cuhc:2t,3h,3q,3s,3u,3w,41,44,46,4w,5c,jx,my/planpr:29,3h,4j,5y,8c,8d/planpl:29,3h,6f,8c,8d/plaoa:29,3h,4j,8c,8d/plapt:29,3h,4j,6f,8c,8d/plap:g,i,1g,3q,3s,3u,3w,5c,gb/plasc:o,3h,5c/plapc:o,29,2o,3h,3n,3q,3s,3u,3w,bl/plasw:g,i,o,1g,24,29,56/plaucllism:29,4j/plaucllm:29,4j,5c,5y/plava:3h,41,44,46,51,53,81/plati:g,i,o,26,2t,3q,3s,3u,3w,41,44,46,4n,4y,54,56,5c,mm/syj4/syj5:1g/syj7/syj6:bq,nf/syj8:1l/sabcc:d,g,i,x,2e,3h,8c,8d,a5,bl,nd,ne,ng,nh/sabt:o,29,3h/sabc:g,i,o,3h,ne,nh/slap:g,i,v,1h,3h/syj9:26,2t/syja:1g,bl,nm/sgcm:g,i,o,3h,nn/sggd:g,i,1h,3h,hx,m6/sgig:o,3h,nm/sgpd:29,3h/sgvl:g,i,3h,m6,nn/atmtc:o,3h/img_carousel:29,4j/vsl:29,4j/syjb:kt,ku,kv,kx/als:3h,8c,8d,9t,lc,ld,le,nw/syjc/syjd/syje/syjf:v,4u,4v,7n,7q,li,ny,nz,o0/syjg/ampfp:g,i,3h,3q,3s,3u,3w,41,44,46,o1,o2/syji:fh/syjh:fb,o4/amp:g,i,v,10,11,12,1h,2t,3h,41,44,46,4g,4u,4v,5h,69,6e,6z,7q,85,a5,hh,lo,ny,o0,o5/ampsa:g,i,1g,3h,6e,o0,o2,o4/syjj/ampbs:g,i,3q,3s,3u,3w,41,44,46,6f,8c,8d,o1,o2,o5/abmn:o,26,bx/syjk:w,z,1g,2j,2s,2t,2v,47/syjl:38,3h/syjm:n,2e,a5,oc/llc:g,i,4c,4e,4l,7q,a0,cw,ob,od/rlci:4j/arlm:g,i,o,26,ob/syjn/syjo/syjp:b6/syjr:4t,4u/syk3:26,b8/syjs/sykc:18,19/sykb:on/syk9:17/syka:op/sykm:16,1l,om/syke:19/sykl:os/syjt:1c,oo,oq,or,ot/syjv:5o/syju:1g,6z,ar,ou,ov/syk4/syk7/syk8:26,81,8c,a1,b8,oj,ox,oy/syk0:7v,a1/syjz:26/syk1/syk5/syk6:14,ox,p3/syjx:51,53,6f,7p,f6,fq,ok,ol,ow,oz,p0,p1,p2,p4/syjq:p5/syjw/syjy:o,9u,ap/syk2:i9,p6,p8/sykg/em13/sykk:op/em14:oq,pc/sykh:on/syki/em15/sykj:pe/em16:oo,ph/sykp:on/em17:oo,pj/sykd/sykf/em18/sykn:1d,os/em19:ot,po/em1a/syko/em1b/lcsdh:g,i,3h,3q,3s,3u,3w,41,44,46,8d,9l,bd,bf,bh,oh,oi,p7,p9,pb,pd,pg,pi,pk,pn,pp,pq,ps/sykq/nsh:g,i,3h,b6,p1,p2,pu/llb:3h,b0/llbu:26,29,az/syks:26/sykr:8c,9v,b8,h1,m2,oj,ok,p0,p1,py/sykt:pz/rltl:g,i,3h,3q,3s,3u,3w,41,44,46,8d,9l,b9,bd,bf,bh,q0/async:8c,8d/bgd:5b,5o,69/syku/cyf:d,k,26,29,q4/cyn:v,24,29,41,44,46,4v,51/asfb:o,3h/blvl:3h,6m,7p,a6/sykv/sykw:q9/colr:o,29,3h,do,qa/csfc:o,29,3h/sykx/drsp:o,38,3h,qa,qd/edq2:o,2f,38,3h,j6/syky:1h,li/eadt:g,i,o,3h,84,qg/ecbx:g,i,o,3h,84,qg/mdia:o,3h,69,qa/geoq:29,3h,qa/imfc:3h,qd/lhis:g,i,o,1h,29,2f,2s,38,39,3h,41,44,46,4v,51,7q,j6,qd/medi:o,3h,qa/mmry:29,39,3h,5t/sykz:6c/mtn:o,3h,47,6k,a6,qp/syl0/mine:o,3h,6k,a6,qr/syl1:a6,cw,q9/rndn:o,3h,qt/syl2:z/snek:g,i,o,39,3h,6k,a6,qg,qr,qv/spnr:o,3h,84,qa,qt/ttt:o,3h/syl3/tsrp:o,29,3h,qz/syl4:2t,38,4j,4k,4p,57,58/tgm:g,i,1h,29,3h,3q,3s,3u,3w,47,6m,84,qa,qt,qv,qz,r1/spro:v,26/syl5:1g,2e,3n,6z,81,hl/tray_c:g,i,3h,3q,3s,3u,3w,r4/syl8:6z/syl7:2y,3n/syl6:5,fy,hl,hw,r6,r7/tray_v2:g,i,v,3h,3q,3s,3u,3w,ba,hp,hr,r4,r8/syl9:z/e2ef:o,24,29,ra/e2es:o,24,29,ra/cqbx:o,3h,a5,cw/dmp/ddlxs:g,i,v,82,87/syla/sylb:6o,bk,rg/sylc:rh/syld/syle:n,1e,26,kg/sylf:ak/sylg:rj,rk,rl/sylh:h7/sylk/sylj:w,2y,4q,8c,kg/syli:bl,rk,rp/syll/em1d/d3adf:g,i,3h,3q,3s,3u,3w,8d,i4,ri,rm,rn,rq/d3af:g,i,3h,3q,3s,3u,3w,4f,8d,ri,rm,rq/d3ag:g,i,3h,3q,3s,3u,3w,8d,ri,rm,rq/d3ac:g,i,3h,3q,3s,3u,3w,8d,ri,rm,rq/sylm:5,n,s,2e,38,hw/d3ais:g,i,3h,3q,3s,3u,3w,8d,ri,rm,rq,rx/d3aps:g,i,3h,3q,3s,3u,3w,8d,ri,rm,rq,rx/d3ai:g,i,3h,3q,3s,3u,3w,8d,ri,rm,rq/d3atp:g,i,3h,3q,3s,3u,3w,8d,ri,rm,rq/syln/d3c:3h,s2/d3l:g,i,29,3q,3s,3u,3w,8d,rp/sylo/sylp:26,kg/sylq/sylr:s7/syls:s7/duf3:g,i,1h,2g,3q,3s,3u,3w,5f,8d,by,gb,ri,rj,rq,s5,s6,s8,s9/d3e:g,i,3h,3q,3s,3u,3w,8d,rq/sylt/sylu:9e,l4,sc/sylw:2y,9t,le/sylx:se/syly:l5/sylz:l8,sg/sym0:l4/sylv:1g,kf,sd,sf,sh,si/sym1:v,rh,rk,sj/d3hi:g,i,3h,3q,3s,3u,3w,8d,rj,rq,s6,sk/d3kpf:g,i,3h,3q,3s,3u,3w,8d,rq/d3apn:g,i,3h,3q,3s,3u,3w,8d,ng,rq/d3pse:3h,rx/d3sbx:g,i,3h,3q,3s,3u,3w,8d,rq,rx,s2/sym2:5,n,s,2e,38,hw/d3s:g,i,3h,3q,3s,3u,3w,8d,rq,sq/d3sb:g,i,3h,3q,3s,3u,3w,8d,rq/sym3:ak/sym4:st/d3t:g,i,3h,3q,3s,3u,3w,8d,rj,rq,s6,su/d3vast:g,i,3h,3q,3s,3u,3w,8d,rj,rq/sym5:2e,5b,sk/d3adr:g,i,3h,sx/sym6/sym7:2e,sk,sz/d3bc:g,i,3h,t0/d3bn:g,i,3h,sk/d3if:g,i,3h,6p,83,9x,bf,bh,sk/sym8:ov,sk/d3mm:g,i,3h,4f,p7,t4/d3ml:g,i,3h,sk/sym9/symb/symc:h8,l3,rn,t8/symd:1h,3h,dn/syme:t9,ta/symf:9x,l3/symj/symh/symg:1t,2y,9x,gn,te/symi/symk:rg,tc/syma:5n,sk,tb,td,tf,tg,th/d3oh:g,i,4f,g8,t7,ti/d3pc:g,i,3h,sk/d3ph:g,i,3h,rx,sk,t7/d3trs:g,i,o,4f,tb/d3url:g,i,3h,sk/d3ws:g,i,3h,sk/syml:69,6o/symm:n,z,2y,51,mf,mg,mh/symn:6p,tp,tq/expc:24,29,41,44,46,tr/symp/symq:z,64,65,6f/symo:tt,tu/symr:tq/syms:51,mf,mg/symt:tx/symu:8c,tu/expd:41,44,46,8d,tr,tv,tw,ty,tz/expp:o,3h,41,44,46,tw/eim/symv:26,2s,4x,51/mba:3h,41,44,46,8d,mg,tv,tz,u3/mbp:3h,41,44,46,u3/mbs:3h,mg/symw/symx:u7/symy/symz:6v/orcl:g,i,o,1h,2e,3h,41,44,46,51,6s,mf,mg,u8,u9,ua/xpan:26,mg/syn1:47/syn2:z,ud/syn0:6k,6m,h7,h8,ue/syn3/syn4:ud/syn5/faci:uf,ug,uh,ui/syn6:2k,ue/syn8/syn7:v,2p,69,6m,gm,h7,h8,ug,uh,uk,ul/facm:um/syn9:6a,dj,dp/syna/fcjm:v,13,29,3h,ds,uh,uo,up/facr:69,6m,ug,ul,up/synb/syne:7g,eq,er/synd:6i/sync:7h,8c,ui,um,us,ut,uu/kpfe:g,i,3h,3q,3s,3u,3w,8d,uv/synf:us,ut/fie:g,i,3q,3s,3u,3w,41,44,46,4t,54,8c,8d,9a,ui,um,uu,ux/fisb:ux/syng:s,h5/synh:4q,4v,51,53/syni/synj:38,4j,57,58,7n,83,8c,bl,v1,v2/synk:3h,v3/synl:v4/synm:4j/fu:g,i,33,3q,3s,3u,3w,41,44,46,4f,72,7g,7r,8d,cw,hd,he,i4,v0,v5,v6/synn:an/syno/synq:1g,2y/synt/syns:vb/synr:va/synp:v,67,9u,ch,v9,vc,vd/synu:p/synv/synw/synx/syny:5i,vi/synz:ew,nf/fs:g,i,26,2s,2t,34,38,3q,3s,3u,3w,41,42,44,46,54,5b,5g,72,7g,7q,82,85,8c,8d,ag,ba,em,eq,ex,go,h6,h8,hc,hd,he,hk,j0,rn,t8,v0,v8,ve,vf,vg,vh,vj,vk/foot:v,2s,8o/genh:o,24,29/genht:o,24,29,72/geni:o,24,72/syo0/genp:o,29,3h,3n,3q,3s,3u,3w,vq/syo1:4q,4u,4v/genn:g,i,o,3h,3q,3s,3u,3w,41,44,46,7n,vq,vs/syo2/syo3:5,26,6b,dj,dp,hw/hrh:g,i,1g,29,2f,3h,4j,83,8c,8d,bl,cw,j6,vu,vv/hrkc:2y,3q,3s,3u,3w,8c,8d,r1/syo4:1g/hldi:g,i,o,3h,vy/hlh:3h,4f,8c,8d/syo5/syo6:3n,4l,8c,vy/syo7/syo8/syo9/syoa:6o,ak,w5/hli:g,i,2t,3q,3s,3u,3w,41,44,46,4c,4e,4p,4u,4v,72,8d,fu,fw,w1,w2,w3,w4,w6/syob/hlmi:g,i,o,1h,3h,3q,3s,3u,3w,67,72,7n,vy,w3,w4,w8/syoc:2y,j6,nf/syod:5,hw,w6/hlr:g,i,29,2s,3q,3s,3u,3w,4c,4e,6p,8d,fw,gb,hk,od,w2,w4,w8,wa,wb/syoe:7g,eb,eq,es/rccm:3h,3n,3q,3s,3u,3w,6f,8c,8d,wd/syof/syog:1g,4o,72,wf/syoh:68,wg/syoi:38,3h/syoj:o,38,3h,82/syok/syon/syol:2y,3n,4f,8c,ba,by,hx,wd,wh,wi,wj,wk,wl/syom:4l,9t,9y,a8,ao,eu,g8,ha,le,nw,rx,v5,vs,wm/tlcm:g,i,29,3q,3s,3u,3w,41,44,46,4c,4e,8d,9l,gb,j6,wn/syoo/boee:g,i,v,1g,24,39,4f,8g,8l,8n,8p,8q,8t,8x,a4,w1,wp/syop/ichp:2s,3h,3n,3q,3s,3u,3w,41,44,46,4u,4v,53,7q,8q,fd,wr/dml:g,i,y,1g,24,29/syoq:2y/ilg:o,24,29,wu/syor:8q/iud:o,24,wu,ww/syot/syou/syov:v,z,1f,2e,2s,2y,3n,42,8g,8h,8q,wy,wz/syos:26,72,8f,8s,ww,x0/iugsan:g,i,3q,3s,3u,3w,4f,8l,8n,x1/iulc:g,i,o,1h,3h/iuci:29,3h,4j,4k/pz:g,i,1g,24,29,2f,3q,3s,3u,3w,41,44,46,4v,51,7q,a6,x0/iqsc:g,i,1h,2y,3h,4k,8c,8d,8g,90,93/riu:o,z,24/syow:8c,gb,x0/ish:g,i,29,3q,3s,3u,3w,8d,x8/syoz/syox:26,4u,4v,8c,8s,a5,ba,ho,x0,xa/syoy:1l/istar:g,i,29,3q,3s,3u,3w,41,44,46,8d,r7,xb,xc/strd:g,i,o,24,8l,8n,8s,8v,ww/strgsan:g,i,3q,3s,3u,3w,4f,8l,8n,x1/syp1:xb/syp2/syp3/syp0:2q,38,4k,4m,4t,51,7i,7q,81,90,a6,by,fb,wp,xg,xh,xi/strrc:g,i,3h,3q,3s,3u,3w,41,44,46,8d,8l,8n,8w,ww,xj/syp4:26,3o,8s,hn,ww,x0/svn:g,i,3q,3s,3u,3w,xh,xl/tic/viv:g,i,29,3q,3s,3u,3w,xh,xl/ivw:3h/syp5:26,51,7q,ev,tt,tu/intent:29,3h,41,44,46,8d,ey,tz,xq/ibsp:g,i,1g,3h,41,44,46,81,8d,tz,xq/ipv6/syp6:v,z/an:3h,xu/syp7/crml:3h,9a,xw/kpvlbx:g,i,o,1g,26/tr:o,2e,37,38,3h/flpcn:o,24,2g/knf:26,2g,xu/syp8:8x,xa/kptm:26,29,y2/tbhm:29,3h,4j,9a/vdwa:g,i,o,1g,3h,fv/vrml:g,i,3h,3q,3s,3u,3w,4j,4q/wqml:3h,9a/sype/syp9:7k,al,an,rl,y8/sypa:iy/sypb:aj/sypc:yb/sypd:ya,yc/sypf/fccm:o,2y,3h,y9,yd,ye/kpef:g,i,3h,3q,3s,3u,3w,8d,uv/kpem:g,i,3h,3q,3s,3u,3w,5e,7l/kplm:g,i,3h,3q,3s,3u,3w,5e,7l/kpne:g,i,3h,3q,3s,3u,3w,9b/sypg:1g/syph:td/ugca:g,i,2e,38,3h,3q,3s,3u,3w,7l,yk,yl/sypi:69,6a,di,yl/sypj:yn/ugcb:o,3h,yo/sypk/ugcr:g,i,3h,3q,3s,3u,3w,4f,71,9a,bl,hs,yk,yo,yq/bpcm:g,i,o,1h,3h/sypl:75/bbam:g,i,1g,3h,7g,8c,8d,y9,yt/ccm:o,1v,24,69,83,j6,ui/esm:o,2e,3h,3n,3q,3s,3u,3w,7g,eb,eq,er,es,yt/sypm:1g,4o/sypn:26/pkp:g,i,3h,4j,yx,yy/eva:g,i,29,3h,6o,8c,8d,9e,9l,k9,v6,yx/erm:w,3h,8c,8d/sypp/sypo:69,ul,z2/sypq:z3/fwci:2p,38,3h,6m,83,8c,8d,h7,h8,z4/fwlm:3h,4j,8c,8d,ba,uo,z3/sypr:64,fg/fwtm:g,i,1g,29,3q,3s,3u,3w,4p,57,8d,f2,tz,ut,v6,z4,z7/syps/sypt/sypv/sypu:2y,te,za,zb/istlm:o,3h,z9,zc/istrcm:3h,zb/istsim:3h,zc/llcm:o,3h/lrm:v,3h/paeq:4j/pubs:o,3h/shoeb:o,3h/sypw/sypx:5,3n,hw,o8,zl/sypy:1x,hu/sypz:hv,zn/syq0:63,8c,au,zm,zo/syq1:5,hw/shtd:g,i,1g,26,29,3q,3s,3u,3w,8d,zp,zq/kpiv:o,3h,4f,6o,fv,j6,td/syq2/syq3:6h,7k,ye,zt/oem:29,9a,zu/syq4:1h,26/wcrg:g,i,o,29,zw/syq5:26/wccm:o,3h,zy/wcrcm:g,i,o,3h,4k,zw/wcrc:xw/syq6:26,2g/syq7/syq8/wdp:29,3h,102,103,104/wepp:g,i,o,1g,3h,bl/wgv:g,i,1g,3h,4o/syq9/whci:4j,108/wifm:o,3h,bx,by/syqa:1l/wlf:o,2y,3h,10b/syqb:69/wmc:g,i,3h,4j,y9,ye,zw,zy,108,10d/wmi:o,3h,69,6a,di/wml:g,i,1h,3h,108/syqc/wpl:o,3h,6b,dj,dp,rx,z2,10h/wpom:zy,10d,10h/wsfem:o,24/wtl:29,3h,hs/syqd:1g/syqe/syqf:o,26,4u,tu/wthi:g,i,2z,3q,3s,3u,3w,41,44,46,4c,4e,5a,7l,8d,hs,r1,tz,z2,z7,10m,10n,10o/lrc:29,2j,2s,3h,4j,8c,8d,zl/syqg:2g,8c/syqh:2w,10r/lrli:8d,10s/syqi:v,z/lrle:24,29,10u/lr:2b,5n,8d,10s,10u/dob:g,i,1g,2y,3q,3s,3u,3w,4j,4p,7g,8c,8d,bl,d3,eb,es,gb/syqj:2e/fy:26,2g,5n,83,a5,d8,ey,10y/shfp:3h,9a/syql/syqp/syqn:112/syqo/syqm/syqk:k9,111,113,114,115/syqq:26/syqr/syqs:1g,4o,6d,116/syqu:117,118/syqv:118/syqw/syqx/syqt:4t,54,69,72,7z,au,j6,119,11a,11b,11c,11d/syqy:26,6a,72,ba,dj,dp,118,11c/syqz:117/syr0:1l/syr1:1l/syr2/syr3:6z,113,117/syr4:6y/syr5:6z/sio:g,i,2w,3h,3q,3s,3u,3w,41,44,46,6f,82,8c,8d,a8,cw,g8,u8,ua,11e,11f,11g,11h,11i,11j,11k,11l,11m/siu:v,72,11l/mlr2:z,24/tormod:g,i,1g,3q,3s,3u,3w,8d,gb,w1,102,103,104,10r,112,11b,11m/cwsc:g,i,z,1h,2e,2k/cwuc/sc:83,dl/syr7:j2/syr6:z,a5,lb,s8,vk,11u/tob:g,i,1h,2g,2y,3h,3n,3q,3s,3u,3w,8c,8d,9a,li,10y,11v/syr9:3d,5p,5v,7i,a5/syr8:s,42,hw,s9,zo,11u,11x/syra:3a/tobs:g,i,1h,3b,3e,3h,3q,3s,3u,3w,41,44,46,5b,8d,9n,ev,li,td,v3,10y,11v,11y,11z/uc2:o,3h,6m,a5/wob:g,i,v,1h,2f,2j,2s,38,3h,41,44,46,4g,51,53,5e,69,72,7q,by,wr/imwe:3o,3q,3s,3u,3w/lbr:4j/syrb:2d/cpn:d,x,24,29,125/ftlm:o,3h/syrc/fppu:g,i,3h,3q,3s,3u,3w,41,44,46,8d,tf,tg,v3,128/syrd/syre:kv,l0,l2,l8/syrf/syrg:v,z,3n,9j,f6,hk,l7,l9,se,wa,12a,12b,12c/syrh:2y,9t,l9/syri:26,2d,7n,v1,12e/hcar:g,i,2t,3h,3q,3s,3u,3w,41,44,46,4g,9a,9l,fn,p1,p2,12d,12f/mpc:g,i,26,9l/mmt:29/mtm:26,29/syrj/syrk/syrl:p3,12l/syrm/msld:g,i,o,1g,3h,st,y9,12a,12k,12m,12n/syrn:t9,tc/ohu:12p/pv:g,i,3h,3q,3s,3u,3w,9l,12d/pupd:g,i,o,1g,3h/rp:2g,3h,8c,8d,9a/syro:se/syrp:nw,12u/syrq:2d/sttu:g,i,1h,2g,3h,3n,3q,3s,3u,3w,41,44,46,4u,4v,7v,b6,12v,12w/uvl:g,i,o,29,3q,3s,3u,3w,41,44,46,12f/syrr/pgm:g,i,1g,2d,3h,3q,3s,3u,3w,4j,4p,12e,12z/syrs:ad/syrt:2d/mt:3h,af,131,132/syru:se/syrv:6j,l1,134/vh:o,4f,9o,133,135/wra:g,i,2g,3h,3q,3s,3u,3w,4q,8c,8d,9a,aw,bd/syrw:la,sg,12b/syrx:s,h4/aapm:g,i,3q,3s,3u,3w,41,44,46,6z,8d,9l,bb,f2,he,p7,qp,sx,t0,t4,ti,v3,128,12p,138,139/luasp:o,3h/lubh_l:v,29,3h/syry:ah/lubh:w,2s,2t,3h,9a,13d/eil:g,i,29,2g,3h,4f,9a,bk,ki,kp,l6,rg,sf,12m/ltm:g,i,24,29,3q,3s,3u,3w,9l,b8,bd,bf,bh/ham:o,3h/syrz:1g,9y/hcbm:g,i,3h,3q,3s,3u,3w,8d,9l,ac,b9,bd,bf,bh,13i/sys0/lhmp:g,i,3h,3q,3s,3u,3w,8d,9l,ac,b9,bd,bf,bh,13i,13k/sys1/sys2:1g,9y,13m/sys3:1h,2s,3h,7q,g8,jq/brth:g,i,27,3q,3s,3u,3w,4j,8d,9l,aa,ab,b9,bd,bf,bh,13n,13o/sys4:1p,b8,va/hscm:g,i,3h,3q,3s,3u,3w,4j,9l,bd,bf,bh,13q/kpbm:g,i,3q,3s,3u,3w,8d,9l,ac,b9,bd,bf,bh,h2/sys5:9e,9w/sys6/sys7/sys8/sys9:ao,fj,ye,13t,13w/sysf:4i/syse:5,4l,8c,a8,hw,13y/sysg:1l/sysb:2r,6m,ac,h7,h8,i7/sysc:a8/sysd:42,142/sysa:h1,12z,13n,13x,13z,140,141,143/khbm:g,i,3q,3s,3u,3w,4c,4e,8d,9l,b9,bd,bf,bh,h2,i6,13k,13u,13v,144/sysh:av/sysi:4m,146/kphpcm:g,i,29,3h,3q,3s,3u,3w,4f,8d,9l,b9,bd,bf,bh,h2,13v,141,147/kprb:g,i,3h,3q,3s,3u,3w,41,44,46,51,53,72,8c,8d,9l,9v,b9,ba,bd,bf,bh/lhpp:g,i,27,29,2s,3h,a9,13k,13u,143/lhprm:3h,4j,g2/msfh:g,i,3h,3q,3s,3u,3w,8d,9l,ac,b9,bd,bf,bh,13x/sysj/tudp:g,i,29,3q,3s,3u,3w,4c,4e,8d,9l,b9,bd,bf,bh,13u,144,147,14d/la:g,i,3h,3q,3s,3u,3w,4q,4x,b4,b6,zu,13m/sysk:b5/lie:g,i,2g,3q,3s,3u,3w,41,44,46,7n,7q,7r,9a,b4,bf,bh,ji,jn,12z,14g/lujbtm:g,i,1h,26,2g/sysl/sysm/sysn/syso/sysp:1g,14m/lulp:g,i,14j,14k,14l,14n/sysq:bo/gldm:3h,14p/sysr:7f/llp:g,i,1h,3h,3q,3s,3u,3w,7g,bl,bn,br,bu,bw,bz,eb,es,14r/lplm:29,3h,bp/lb:g,i,29,3h,3q,3s,3u,3w,41,44,46,4u,9l,b8,bd,bf,bh,ou,pb,pd,pg,pi,pk,pn,pp,pq,ps/udla:26,29,ou,pb,pd,pg,pi,pk,pn,pp,pq,ps/udlg:26,29,ou,pb,pd,pg,pi,pk,pn,pp,pq,ps/igml:o,24,29,jp/vdiv:o,2g,3h/syss/fplum:o,3h,bl,14z/lumpc:3h,4j/syst/nmz:g,i,3h,6z,7g,83,b6,bu,eb,ep,es,hk,pu,152/nmsi:o,3h/sysu:1u,5q,6p,a7,cw,io,ix,11x/sysv/offerings:g,i,29,2g,3h,3q,3s,3u,3w,41,44,46,4j,5b,8c,8d,9a,ba,hg,nw,v1,wa,12n,12u,155,156/pc:g,i,o,1g,29,2d,3h,3q,3s,3u,3w,bb,sf,sh,si/sysw:26/ppld:o,29,3h,159/sysx:l2,134/sysy:k9,12l/pplch:g,i,1g,29,2d,3q,3s,3u,3w,bb,gb,ks,sq,15b,15c/sysz:12v,15b,15c/pplsm:3q,3s,3u,3w,4g,8c,8d,bb,gb,hj,12w,15e/lur:g,i,12,3h,3q,3s,3u,3w,41,44,46,6y,7n,7q,84,8c,8d,ch,h7,v1/syt0/syt1/pqanq:g,i,o,1g,3h,3q,3s,3u,3w,bb,15h,15i/pqaaq:g,i,o,1g,24,29,3q,3s,3u,3w,bb,15h/syt2/syt3/syt4:1g/syt5:26,8c,bu,bz,15m,15n/syt6:nw,12u/syt8/syt9:5,hw/syt7:4p,bb,15h,15i,15l,15o,15p,15q,15r/pqam:g,i,3q,3s,3u,3w,8d,od,15s/pqaep:3h,15m/pqac:g,i,o,1g,3h,15h,15i/pqqfm:g,i,8d,od,15o/pqaqp:g,i,3h,8d,15o/pqat:o,3h,3q,3s,3u,3w,bb,15p/syta/pqawa:g,i,3h,3q,3s,3u,3w,8d,15s,15z/pqawq:g,i,3h,8c,8d,bu,bz,15i,15m,15p,15q,15r,15z/pe:3h,6z,8c,8d,ba,sd,th,12p/sytc:26/sytd/syte:z,85/sytb:o,2e,3h,4f,ak,am,aw,by,le,125,163,164,165/lurs:g,i,1g,2g,3n,3q,3s,3u,3w,8c,8d,9a,bd,nw,sf,sh,si,12u,135,166/sytf/sytg:26,4q,8c,9j,9t,kq,kr,kx,kz/lrr:d,g,i,x,29,2e,2f,3h,3q,3s,3u,3w,41,42,44,46,4f,4v,51,5e,8d,9e,9l,ab,g8,12u,138,168,169/syth:9x/lrrt:g,i,2q,3h,3q,3s,3u,3w,8d,9l,dl,j6,169,16b/rrtp:o,3h,14z/rrtpp:g,i,2f,3h,3q,3s,3u,3w,41,44,46,7q,8d,9l,bl,v1,169/ltps:o,3h,168/lusa:o,3h/syti/sae:g,i,o,3h,3q,3s,3u,3w,41,44,46,83,bb,sf,sh,si,v1,16h/spp:3h,8c,8d,d2,d3/sytj/ssm:7v,16k/ssci:29,bv/ltb:g,i,1g,29,2g,3h,3q,3s,3u,3w,4j,4p,57,7q,9a,bf,bh,j6,jq,12z,14g/ltp:g,i,o,2y,9l,bl,h7,od,16b/sytk/sytl:7c/lta:g,i,o,3h,3q,3s,3u,3w,4q,7g,16p,16q/sytm:1g,16p/ltdb:g,i,3h,16s/ltts:g,i,o,3h,16s/ltl:o,3h,14z/lt:g,i,29,3h,3q,3s,3u,3w,41,44,46,4j,8c,8d,bl,v1,v2,12k,14z,16s/sytn:4o,b6/trex:g,i,26,29,3n,3q,3s,3u,3w,8c,8d,aw,bd,bt,f6,gq,16k,16x/trexh:g,i,6z,83,bw,16x/syto:1g,sf,sh/ub:g,i,o,38,3h,3q,3s,3u,3w,bb,170/ugcum:g,i,3h,9a,bk,sc,170/sytp/lmas:3h,173/zsp:g,i,1h,3h,3n,3q,3s,3u,3w,7g,bn,bu,bw,bz,eb,eq,es,14r,152,16q,173/sytq:6z,7q,84,a1,gb,h7/sytr/sytt:5,s,85,hw/syts:4v,51,f1,lo,od,177,178/ldr:g,i,3q,3s,3u,3w,41,44,46,bb,176,179/fdc:g,i,o,w,1g,2k,3h,5e,83/fdl:o,3h/sbx:2e,3h,8c,8d,c2/lclc:o,2e,3h,6m/sytv/sytu:2y,te,za,17f/istc:o,3h,z9,17g/istrcc:3h,17f/istsic:3h,17g/sunb:o,3h,5b,69,6m,ey/nvm:26,k0,k1/nqsb:d,g,i,x,3h,fb,g8/mad:o,29,3h,a5,fi/sytw:a5,d8/mc:o,29,3h,6m,17o/nlfm:3h,8c,8d/nllm:o,3h/nlm:o,3h/noal:o,3h/nom:o,3h/notc:4j/sytx/pnd:o,24,17w/phid:o,29,3h,17w/popn:o,24,29,2y/px:v,w,z,24,29,17w/fdbk:o,26/pifm:g,i,o,24,3q,3s,3u,3w,4q/pim:3h,8c,8d,bl/qppr:o,26,17w/pri:o,24/psa:g,i,o,3h,3q,3s,3u,3w,4q/sltr:g,i,o,z,1g,24/spl:o,24/pts:o,z,24,29/pdeb:3h/ppm:o,3h/ccss/pswtr:g,i,v,cd/syty:2y,69/upr:18e/mhp:g,i,o,1g,2e,3h,4f,18e/qmp:o,38,3h,4f,12c/agsaf:o,3h,72,bx/asst:g,i,v,1g,2g,3h,41,44,46,4v,4x,51,53,72/gsaim:26,72,9a,zu/syu0/sytz:z,13,2e,2j,2q,2s,5e,7q,81,9z,18l/gsatnc:24,18m/surl:o,2y,3h,hk,j6/sc_suit:o,2y,3h/syu1:cd/sbub:g,i,v,5w,18q/lovc:g,i,v,cd,d0/sonic:g,i,v,cd/syu5/syu3:db,fh,18u/syu6/syu4:v,z,ce,cx,vj,18v,18w/syu8:z,cf,cx,18u/syu7:4p,7q,cp,18v,18y/syu2:2j,4t,67,7c,a5,18x,18z/wvt:g,i,3q,3s,3u,3w,190/syu9/syua/syub:4t,4u,4v,18z/wsrpv:g,i,3q,3s,3u,3w,41,44,46,51,192,193,194/syud:db/syuc:38,4v,51,6m,9z,cc,ct,cu,dc,dd,18q,190,193,196/syue:7g,el,190/asrpv:g,i,3q,3s,3u,3w,41,44,46,53,8d,cn,cq,192,194,197,198/ivv:g,i,41,44,46,4u,4v,81,ce,cv,cx,18v/syuf:cy,18x,194/onv:g,i,3q,3s,3u,3w,41,44,46,d0,19b/osov:g,i,3q,3s,3u,3w,41,44,46,cs,190,19b/popv:d,g,i,x,3q,3s,3u,3w,41,44,46,53,8d,cc,cn,cq,cs,ct,cv,cz,dc,17o,190,194,196/pdov:g,i,3q,3s,3u,3w,41,44,46,d0,19b/opv:g,i,3q,3s,3u,3w,41,44,46,d0,142,19b/rpv:g,i,3q,3s,3u,3w,41,44,46,8d,197/rov:g,i,3q,3s,3u,3w,41,44,46,d0,19b/gxc:g,i,v,2y,cd/ssave:g,i,18y/shsb:g,i,3q,3s,3u,3w,198/pdm:g,i,v,41,44,46,5s,5x,cd,cs/srst:g,i,24,2y,35,3c,3q,3s,3u,3w,5k,9z,cp,j6,18q/skpc:24,uf,uk/strx:yy/syuh/syug:o,q,3h,4v,51,au,19q/strm:g,i,3q,3s,3u,3w,41,44,46,6f,8d,v3,19r/rr:3n,3q,3s,3u,3w,72,8c,8d,i4,lf,ng,vh/tnv:24,18m/syui/syun/syuo/syum:1g,fh,19w,19x/syuk:2y,4k,4q,6u,72,wj/syuj:2s,70,8c,9j,ay,vd,wy,11c,19v,19y,19z/syul:4v,51,53,7n,fq,1a0/syup:4j/syuq:ad,vb/syur/syus/syut:6p,hk,12w,19y,1a3/syuu:4o/syuv:b6,1a0,1a7/syuw/syux:h3,1a1,1a9/syuy:1a0,1a2,1a7/syuz:va,19y/syv1/syv0:37,hw,vc,1ad/trde:g,i,3q,3s,3u,3w,41,44,46,7z,8d,9l,v4,ve,1a4,1a5,1a6,1a8,1aa,1ab,1ac,1ae/dsti:g,i,29,3q,3s,3u,3w,41,44,46,4v,51,53,7n,8d,9a,9l,zu,1a2,1a8/syv3/syv2:26,2g,a4,jy,103,104,1ah/syv4:wr,193,1aa,1ai/fhpc:g,i,2r,3q,3s,3u,3w,41,44,46,47,4g,8d,9l,h9,hd,he,i3,1a2,1a3,1ac,1aj/trc:g,i,29,2o,3q,3s,3u,3w,8c,8d,ay,by,hp,vc,11c,19v,19z,1a6/syv5/trfp:g,i,12,3q,3s,3u,3w,41,44,46,5i,5v,8d,9l,ch,lc,vg,11z,1a1,1a3,1a9,1am/twt:3h,4j/vpa:29,41,44,46,j6,19r/vspo:o,3h,72/vma:o,3h/syv6/syv7:26,fw,1as/syv8:dk/vmd:o,3h,1at,1au/syv9:5n/vmr:g,i,o,1g,3h,6b,6m,dj,dp,19q,1as,1au,1aw/vmp:o,3h,4k,1at,1au/wft/pcl:o,29,3h,69,as,k3/qim:g,i,7v,f6,16k/qm/qsm/r:v,24,25,29/saac:3h,41,44,46,8d,tz,10o/wnhh:g,i,1g,24,29,3n,3q,3s,3u,3w,10n/sscm:29,3h,4j/syva:o,ga/syvb:gb/dgm:3q,3s,3u,3w,1b8,1b9/sdpm:o,29,41,44,46,179/lci:v6/smi:oc/sm:o,od/ptbm:g,i,29,4c,4e,59/syvc:38,3h/pbm:29,1bg/rbbsm:139/rbbm:hd/rsm:g,i,29,ta/rsbm:fy,r6/scw:wi/stcm:g,i,3q,3s,3u,3w,41,44,46,8d,v4/sst:wj/sccm:o,29,jq/scm:g,i,29,13o/fpl:g,i,o,26,29,3q,3s,3u,3w,4q/fpv:g,i,3h,3q,3s,3u,3w,41,44,46,8d,v3/ssc:g,i,4c,4e,4l/tcm:g,i,3q,3s,3u,3w,41,44,46,8d,v5/tbm:g,i,41,44,46,4c,4e,5a/qta:g,i,o,1h,3h/tym:o,3h/xpd:29,3h,3q,3s,3u,3w,41,44,46,1ai/ecm:w1,102,103,104/iebm:o,3h,102,103,1ah/itm:o,29,3h,102,103,1ah/tem:o,29,3h,102,103/fc:3h,3q,3s,3u,3w,4f,r1/syvd:3h,6m,do/slm:o,1c4/ttbcdr:o,y,2s,3h,5o,i4,rn,18l/whct:3o,3q,3s,3u,3w/lli/syve/pvtl:1c9/syvf/atnt:g,i,29,4c,4e,4l,4o,f6,1c9,1cb/syvg:2f,2g,4k,yy/kae:o,3h,1cd/kac:o,29,2e,3h,3q,3s,3u,3w,4p,1cd/acsm:2e,38,3h,sz/bs:3h,gu/cthm:g,i,o,1i,2y,3h/alc:g,i,24,a1/syvh/syvi:9u/syvj:26/flmm:g,i,3q,3s,3u,3w,9l,at,au,b8,bd,bf,bh,p8,v9,176,1c4,1ck,1cl,1cm/syvl:5,s,hw/syvm:51,7z,p2,q0/syvk:bu,bz,p9,14g,1co,1cp/flpm:g,i,3h,3q,3s,3u,3w,41,44,46,82,8d,9l,b9,bd,bf,bh,p7,pb,pd,pg,pi,pk,pn,pp,pq,ps,1ck,1cm,1cq/syvn/lcflst:g,i,3h,3q,3s,3u,3w,41,44,46,8d,9l,b9,bd,bf,bh,pz,1cs/syvo:9w/hglt:g,i,4f,av,13t,1cl,1cu/syvp:146/inf:g,i,3h,3q,3s,3u,3w,41,42,44,46,8d,8o,9l,a3,b9,bd,bf,bh,bs,oh,ow,p4,p7,pb,pd,pg,pi,pk,pn,pp,pq,ps,12b,147,14d,1ck,1cp,1cw/llmrd:3h,oy/llmr:g,i,3q,3s,3u,3w,6z,8d,9l,bd,bf,bh,oz/syvq:4l,51,53,9q,ok/lrl:g,i,1i,3q,3s,3u,3w,41,44,46,4c,4e,8d,9l,at,b9,bd,bf,bh,bn,oh,oi,p7,pb,pd,pg,pi,pk,pn,pp,pq,ps,v9,14p,1ck,1cq,1cs,1d0/lcts:g,i,3h,3q,3s,3u,3w,41,44,46,8d,9l,b9,bd,bf,bh,pz,1cs/syvr:5b,gb/flum:3q,3s,3u,3w,1d3/clc:g,i,3h,14d,1cw/hunm:g,i,3h,8c,8d,a1,ve/rliv:6z,py/skp:g,i,3h,3q,3s,3u,3w,8d,9l,b3,bd,fq/lcm:g,i,3h,3q,3s,3u,3w,41,44,46,8d,9l,bd,bf,bh,oi,p6,p7,pb,pd,pg,pi,pk,pn,pp,pq,ps/llmu:g,i,29,3q,3s,3u,3w,9l,bd,bf,bh,ol,p4/llmj:v,24,29/mlb:g,i,3h,3q,3s,3u,3w,6s,9l,b8,bd,bf,bh/mlm:g,i,3h,3q,3s,3u,3w,41,44,46,8d,9l,bd,bf,bh,p5,p7,pb,pd,pg,pi,pk,pn,pp,pq,ps,1cs/syvs:1g/syvu/syvt:3n,8c,156,1de,1df/fplr:g,i,3c,3h,3q,3s,3u,3w,4j,5e,8d,1dg/syvv/fprl:g,i,o,3h,3q,3s,3u,3w,41,44,46,v1,zt,1df,1di/syvw:26,2s,3c,4n,4q,9j,ab,1dg,1di/lor:g,i,29,3q,3s,3u,3w,6m,83,8d,9l,bb,nw,od,12u,1dk/ttr:o,3h/syvx:1dg/rar:1dl,1dn/uep:o,3h/lorw:1dl,1dn/wrl:1dl/fdm/mI3LFb:j4/mdR7q:ja/Rr5NOe:je/fmCnve:jf/Sly0Pb:5,hv/syvy:5,1s/Y9atKf:1dy/syvz:ig/syw0:1r,1y,hu,in,io,iv,ix,1dy,1e0/q0xTif:1e1/syw6/syw2/syw3:1n,iv,1e4/syw8:yb/syw7:5,de,13d,16h,1e3,1e5,1e6/syw4:5,yc,16h,1e5/syw5:5,c5,c6,yb,1e3,1e5/syw1:5,13d,1e5/sywa:aj,13d/sywb:13d,1e6/sywc/syw9:ae,af,bj,c7,iy,s5,131,1e7,1e8,1e9,1ea,1eb,1ec,1ed/sywf:5v,iq,1e1/sywg:jd,1e8,1ef/sywd:jd,1e7,1ef/sywe:jd,1ea,1ef/sywj/sywi:5v,jd/sywh:jb,1e9,1ef,1ek/YiEBub:1ee,1eg,1eh,1ei,1ej,1el/bwkaIc:1ei,1ej/sywk:zn/sywl:5,j9,1e4,1eo/hc6Ubd:1ep/FEWD7:hw,1ep/xiqEse:ir/sywm:in,vi/sywn:1z,ip,ir,1et/RMhBfe:1eu/sywp:1dy,1eu/sywo:is,1e1,1e5,1ej,1ep,1ew/PrPYRd:1ex/QIhFr:is,1e1,1ew/HXvZFd:io,is,1dy/NTMZac:is,1dy/IZT63:5,1z,j9/T5734d:1eg,1ej/eo7Hvf:1ej,1el/bBm6Kb:1eh,1ej/sywq:5,1e5,1ec/oK2nZe:hw,1ex,1f6/S6hXx:hw,je,1ea,1ex/crgCnf:4j,hw,je,zo,1ee,1ex/Ubbn9c:5,hv/Oj2lid:5,hv/eBRllb:jb,1ef,1ej,1ek,1f6/sywr:is,jc/Wq6lxf:1fd/d76kVb:hw,1fd/syws:5,1h,48,4o,hw/BDv2Ec:g,i,4c,4e,1fg/sywt:1fg/tH1QZ:g,i,4c,4e,1fi/sywu:1fg/FbYl2c:g,i,4c,4e,1fk/OqSEDb:g,i,3y,4c,4e,1fi,1fk/sywv:1l/zXZXD:5,s,4k,zo,1fn/syww:5,ik/wI7Sfc:1fp/sywx/sywy:2e,j5,zo,1fp,1fr/L1AAkb:1fs/sywz:1fs/y8zIvc:1fu/syx0:1l/syx1:82,1fu,1fw/opNw3:1fx/A0wCbb:5,zo,1fw/A52qie:5,zo,1fw/syx2:5,zo/DcCgyf:1g1/syx3:1l/nC7Be:5,k1,zo,1g3/wlJkMc:5,82,hw/ONB3J:5,k8,zo/YaaIkf:5,38,hw/Fpsfpe:5,zo/gZ6HBc:5,zo/syx4:3o,hw,1fx/lgQ1Be:3q,3s,3u,3w,1ga/JsB29c:3q,3s,3u,3w,1ga/K1EXAe:5,2g,hw/i5z2Rc:5,zo,1g3/DzXZpe:41,44,46,ty/p7hBYe:5,26,41,44,46,6p,tp,tq,ty,zo/UrRncd:5,41,44,46,tq,zo,1fn/syx5/syx6:5,zo,1gi/eCRXd:1gj/Crkf5e:5,hw,lp/syx7:1p/KXLOvf:5,zo,1gm/eGmJTc:5,hv/SjQzbf:5,41,44,46,hw,tx/IYTG1e:5,zo/yIfxzd:5,d,g,i,x,fb,zo/xw0DRd:5,41,44,46,4v,hw,tx/vlqzed:5,zo,10y/Q2Ygte:5,84,hw,qt/syx8:yd,1gi/zM4DCc:1g1,1gj,1gv/zqdwYd:5,zo,1gv/r7ulcb:5,zo/rXp4z:5,hw/x166If:5,hw/syx9/syxa:5,1eo,1h1/vWNDde:1h2/iP7ptb/syxc:7i/ZcFDPd:1h5/syxd:1h5/Pm8d9:1h7/syxe:1h4,1h5/syxf:5,is,1h1,1h7,1h9/xpltpb:1ha/syxg:1h9/TjaJoc:1hc/syxh:5,is,qp,1h1,1h7,1hc/yQ43ff:1he/syxi:1l,1h5/Om7Cvd:1hg/syxj:hk/K6TmZe:1hi/syxk:5,is,1h4,1hg,1hi/uz938c:1hk/syxl:5,is,1h7/Fkg7bd:1hm/syxm:2y,1ha,1he,1hm/HcFEGb:1ho/ByqdBd:5,hw,zo,1h9,1hg/syxn:5,hw,1h9,1hg/if1iFc:1hr/syxo:hw,1he,1hg/QfiAub:1ht/syxp:ey,1h5/UrCOme:1hv/syxq:zo,1h9,1hg,1hv/ovQGEe:1hx/syxr:hw,1fx,1he,1hk,1hx/Uox2uf:1hz/dtPt4d/CiVnBc:1h2,1ho,1hr,1ht,1hz,1i1/syxt/wlLQk:5,hw,1h9,1hg,1i3/czrJpf:5,hw,1hi/kopZwe:5,v,ey,hw,zo,1fw,1h9,1hg/xPR7tc:hw,1h2,1ho/QSzDDb:5,hw,zo,1h9,1hg/syxu:hw,1he,1hg/iDPoPb:1i9/syxv:zo,1h9,1hg,1hv/Ctg9oc:1ib/syxw:2e,hw,1he,1ib/tg8oTe:1id/mvYTse:1h2,1ho,1i1,1i9,1id/TJw5qb:5,y,2s,hw,1h9,1hg/TbaHGc:hw,1h2,1ho/syxx/syxy:5,6a,dj,dp,gv,hw,wj,1ii/bdwG2d:3q,3s,3u,3w,1ij/syxz:1l/Pcxjxc:1il/syy0:5,hw,1il/Gh7vYc:1in/syy1:5,1g,1p,is,1il/v7651e:g,i,1ip/syy2:xi,1ij,1in,1ip/hwM96e:g,i,3q,3s,3u,3w,1ir/syy3:v,69,gb,hw,xi,1ip/qG5Qn:g,i,3q,3s,3u,3w,1it/syy4:1l/JLyleb:1iv/YcWrEe:5,hw,wj,1il,1iv/SsNtlc:dj,wj,1in/r8eF7:69,1in/fRzn6d:g,i,v,1in,1ip/syy5:5,69,ai,is/r6fp6e:1j1/ajPQO:6s,6x,85,hw,1j1/W4aHXc:g,i,3q,3s,3u,3w,1ir,1it/syy6:5,hw/CnfBWc:1j5/wVmrrb:1j5/syy8:1f/syy7/TQzRD:5,g,i,y,3q,3s,3u,3w,4p,8d,hw,tz,1il,1j8,1j9/PXpDL:5,y,6f,8c,8d,hw,1il,1j9/sHCyvc:5,hw,wj/syy9:hw/ryf4xf:1jd/syya:5,is,1jd/xGZXJe:1jf/syyb:1jf/eIGCz:1jh/expYzc:3n,3q,3s,3u,3w,1jh/syyc:4p,4t,4z,zo,1j8,1jf/gl5fbe:g,i,3q,3s,3u,3w,1jk/JRdaxc:g,i,3q,3s,3u,3w,iu,1jk/syyd:id/qfNSff:1jn/UgAtXe:iw/syyf/syyg:vi/syye:4,1n,5i,a5,vg,18w,1e0,1et,1jn,1jq/JNoxi:1v,1z,2y,ak,iw,j3,nf,1am,1jr,1js/ZwDk9d:5,1z,iq,1jq/w9hDv:1z,iw,1js/ws9Tlc:1w,1z,1fp/kjKdXe:5,1p,1q,1z,4g,io,j7,1e5/MI6k7c:5,1z/EAoStd:5,z,1z,j8/iTsyac:im/rHhjuc:im,is,k7,1jr/HDvRde:ii/iN16H:ij/syyh:id,ie/VwDzFe:ii,ij,is,1k4/tfTN8c:il/syyi:5,ag,id,ik,1ed/x60fie:1k7/UpgCub:if,ih,il,im,is,1k4,1k7/iJAeU:is,j9,1k7/hk1Xbf/HLo3Ef:5,1s,if/mgk1z:178/syyj/syyk:1ke/syyl:1l,1kf/MmDEie:5,hw,zo,1kg/UfoVT:5,hw,zo/syym:5,1eo,1ke/oc6XAf:1kj/ba47D:6o,8c,8d,hw,iz,u7,y8,ya,zo,1kf,1kj/f3TnUe:5,hw,1kg/syyn:111/Lbanwf:5,hw,1kn/syyo/Zm8HMe:5,hw,1kn,1kp/syyp:111/cjSf2d:5,hw,1kn,1kr/ZQUW6b:5,hw,1kn/PAqbQd:5,hw,1kn,1kp/syyq:1w,j5/EulKjb:5,g,i,1f,hw,115,1kp,1kv/BlFnV:hx/ncVR8d:5,hw,t8,13w/x8cHvb:it/rQSi2:5,v,2s,38,hw/NZI0Db:lo/AYxtvc:5,hw/lTBL7d:5,fi,hw/syyr:4v,51,193/mjohid:5,g,i,2y,3q,3s,3u,3w,41,44,46,4t,54,hw,mu,wj,1l4/CzyNCc:5,g,i,1g,3q,3s,3u,3w,f2,hw,mm/Vy4vj:5,hw,mm/oE01se:5,hw,mm/mDaot:5,hw,mm/vWelz:5,o,hw/syys:5,hw/jLMZle:1lb/pY8Djc:5,hw/QFjqQe:5s,84,qt,1lb/AXg3Re:5,ey,hw/RboPOb:3q,3s,3u,3w,r8/G7CqV:rx/s93Sxd:5,v,hw,1i3/EZcHPb:sq/rdLyZc:vv/sF4ZC:wb/btCefd:5,5b,hw/j7KyE:5,s,4k,hw,y2/speZV:5,s,4k,hw,wz/pfW8md:5,g,i,3q,3s,3u,3w,41,44,46,8d,8l,8n,hw,xj/uMeV6b:5,26,fo,hw/sMwMae:5,6b,dj,dp,hw,wj/BNpTCc/syyu:1l/Bl8Hyb:1lt/syyw/syyv:5,1g,8c,hw,1ls,1lt,1lv/NqePCb:g,i,8d,1lw/syyx:2t,gb,zo,1lw/j7V3Ec:g,i,3q,3s,3u,3w,8d,1ly/BvBCRd:5,hw,1lt/syyy:1l/o5Jxle:5,26,69,hw,su,1m1/syyz:5,26,zo/Wsv3zc:1m3/xsrl0d:hw,1m3/jdm2bc:69,hw,su,1m3/KTkRFe:69,sq,su,1m3/DKhyHf:5,8c,8d,hw/syz1/syz0:1l,1m9/scCV5b:5,g,i,8c,8d,hw,kg,yx,1ma/mvIPqe:5,hw,1ma/cyR8gd:5,g,i,4c,4e,4l,hw,1ma/vYzKAc:5,hw,1ma/AfMePc:5,hw,1m9/dZszne:5,g,i,3q,3s,3u,3w,41,44,46,8d,hw,v5,1ma/bdfScf:3q,3s,3u,3w,zm/s9Xzrc:3q,3s,3u,3w,8d,zp/bBZa9d:zq/HPi3af:5,26,hw/T3ZnHc:10b/i98cSb:5,s,hw,1ii/syz2:11f,11j/d2EJ2:5,g,i,1g,3q,3s,3u,3w,8c,8d,gb,hw,1mn/QBv1f:5,g,i,3q,3s,3u,3w,4p,8c,8d,hw,119,11a/EeFOVd:5,hw,116,11d,11k,11m/mzdK5b:5,au,hw/EKE3Kb:5,72,hw,113/eZpZGd:5,hw,11g/cj6zCc:5,hw,116,117,11d/nmMbvd:5,g,i,3q,3s,3u,3w,41,44,46,hk,hw,11e,11f,11h/OQsSq:5,8c,8d,hw,117,11i,1cd/OPfzvc:5,3q,3s,3u,3w,gb,hw,zo,11i,1mn/EcoOFc:5,3n,3q,3s,3u,3w,hw,zo,11c/mBlSXb:5,g,i,3q,3s,3u,3w,41,44,46,hw,11e/SVQt1:5,hw,116,117,11d/syz3:1l/aNN2Kd:5,g,i,hw,119,1n1/dBHdve:11y/Un4kmd:5,g,i,3q,3s,3u,3w,4q,11y/ICK5Cb:5,26,hw/sxFRNb:5,g,i,3q,3s,3u,3w,9l,b9,bd,bf,bh,hw/OrlZ3b:5,2y,hw/ykNnB:5,2y,3q,3s,3u,3w,hw,1d3/wCorS:13y/A0k3yb:g,i,4c,4e,8d,13z/IdyxJd:5,g,i,1h,2g,2y,hw/ljqMqb:5,n,hw/syz4:5,26,8c,b5,b6,hw/pg0znb:g,i,8d,bf,bh,1nd/l45J7e:5,hw,132,15c,1eb/syz5:v,bb,lo,12w,132,15c/ApBbid:3q,3s,3u,3w,1ng/zd9up:3q,3s,3u,3w,4g,8c,8d,gb,hj,159,15e,1ng/WWKvAd:15l/UAyiv:15r/gT1eyc:5,hw/syz6/p2s6Uc:5,g,i,3q,3s,3u,3w,4p,8d,f6,hw,tt,tz,1j8,1nm/fgjet:5,zo,1nm/qDe6Ib:2,hw/hwyVwf:2,z/N6VQ1:5,2e,8r,hw/nQfNee:1ae/ym26r:5,a8,hw/ACoBLe:5,26,hw,k5/kqd5pd:5,hw,1aw/syz7:5,hw,1aw/CHB2Fe:1nw/ZcFJnb:g,i,4c,4e,4l,1as,1nw/BuhrE:5,3q,3s,3u,3w,hw,r7/VyvHrf:1b8/tnqaT:3q,3s,3u,3w,1b9/XFHqe:5,hw/SvnKM:5,hw/jAdrt:k6/u9y6v:k6/giFmbe:5,6s,6w,hw,u8,u9/GlPpxe:5,2y,hw,10b/HCJMYb:5,hw/T43fef:5,3q,3s,3u,3w,gb,hw/DiYNK:5,2j,hw/WGD6He:5,g,i,v,1g,hw,iu,kf,kg/uIz9yd:5,hw/Kq2OKc:5,26,hw,td,tf/pNJgwb:5,8c,8d,hw/syz8:5,2q,hw/KRvrTd:1of/ORTq8c:1of/pXo8W:5,g,i,1g,69,hw,wi,1cu/syz9:5,3n,69,72,ba,114,1eo,1n1/Z6Tw2c:3q,3s,3u,3w,1oj/Y51b7:3q,3s,3u,3w,h7,h8,hw,1oj/If5Smd:3q,3s,3u,3w,hw,wj,1oj/syza:5,5b,gb,hw,155/zIWeZd:3q,3s,3u,3w,1on/syzb:6z,1oj,1on/vN3bvf:3q,3s,3u,3w,1op/qVn0Xd:3q,3s,3u,3w,1op/lziQaf:3q,3s,3u,3w,hw,wj,1oj/bfoYab:3q,3s,3u,3w,hw,1oj/syzc:26/GCuwGb:5,g,i,4c,4e,4l,hw,1ou/vLdXNb:5,4i,hw/Ukgl9e:5,72,hw/sfqVZ:5,hw/ZWp2x:5,g,i,7g,ba,hk,va,1ae/ZkGVz:5,g,i,1h,26,33,hw/B9Frqe:5,8c,8d,hw/syzd:1l/zurVcc:1p2/GuShUc:5,s,hw,1p2/MC2wOe:5,g,i,3q,3s,3u,3w,41,44,46,hw,ms/pR868c:5,41,44,46,hw,1l4/rR4FIc:5,2y,41,44,46,hw,k5,wj,1l4/tuA5ub:5,hw,mm/ZIOO3e:5,hw/pOpdCd:5,4i,hw/bppUdd:5,g,i,41,44,46,4c,4e,4l,5a,hw/vzk6me:5,8c,8d,hw/syze:5y,8c,hw/DlihHc:8d,1pd/XQdOg:5,8d,1pd/FzmrPc:5,g,i,4c,4e,4l,hw/syzf:1g/b3yw8d:g,i,1ph/rn3sn:5,g,i,3q,3s,3u,3w,gb,hw,1ph/syzg:1g,8c,hw/bMJLVb:g,i,8d,1pk/CW1d1b:5,g,i,8d,1pk/syzh:5,56,1pk/O3rqRd:g,i,8d,1pn/MwnG3e:g,i,3q,3s,3u,3w,41,44,46,4n,55,7s,8d,1pn/syzi:1l/QSXxSb:5,hw,1pq/XpjSB:5,hw,1pq/UCJ2Zc:5,d,x,hw/syzj:5,is,ov/va41ne:1pu/s138l:o,41,44,46,69,nd,nh,179,1pu/eBHNfe:5,8c,8d,hw,1pq/jOmAMe:5,hw/a1Zpqb:5,26,hw/kZ5Gt:5,26,hw,1pq/HDfThc:5,d,g,i,x,41,44,46,4c,4e,5a,7q,bl,hw,1pq/y6Cmjc:5,hw,1pq/usBd7d:5,3o,3q,3s,3u,3w,hw/syzk:5,hw/yrC0Ze:1q4/syzl/syzm:1l,1q6/Aw8H5c:5,hw,1q7/OQj9N:5,3q,3s,3u,3w,gb,hw,1q7/uDntyf:5,2y,3q,3s,3u,3w,gb,hw,1q6/Jk8Jkc:lo,1q7/syzn:5,4i,hw/BuLilf:1qc/syzo:4u,4v,r1,1qc/ceLHub:3q,3s,3u,3w,41,44,46,1qe/syzp:if,k4/syzq:1g,8c,il,11c,1q4,1q7,1qe,1qg/cYRHoc:g,i,3q,3s,3u,3w,41,44,46,8d,1qh/syzr:1l/syzs:1qj/MipM0b:g,i,3q,3s,3u,3w,41,44,46,51,53,7n,8d,1qh,1qk/QkKEDb:5,67,72,hw,1qk/FeOz2d:5,hw,od/syzt:5,hw/p6tYpf:1qo/syzu:1qo/Larr4e:1qq/syzv/syzw:4i,1qj,1qq,1qs/KJGAuf:1qt/hu2Die:g,i,4c,4e,4l,1qk,1qt/LE7U5b:g,i,3q,3s,3u,3w,4q,il,1qg,1qk,1qq/syzx:il,19q,1qg/HP2P4e:1qx/syzy/nhVVJ:au,hw,1qs,1qx,1qz/MHB3R:hw,1qs,1qx,1qz/KqkMDc:g,i,3q,3s,3u,3w,41,44,46,7n,8d,1qh/xGUjxf:5,8c,8d,hw,zo/fF5Sad:5,g,i,3q,3s,3u,3w,41,44,46,8d,hw,v3/nLOZJb:5,g,i,4c,4e,4l,8c,8d,hw/WgDvvc:5,hw/syzz:6p/sy100:1r7/nyDpwd:5,hw,1r8/Gh788e:5,hw,1r7/qxOREc:5,hw,1r8/C5rQbb:5,hw,mg/WK9xxd:5,41,44,46,51,hw,mf,mg/pwazGc:5,41,44,46,4x,51,81,hw,mg/golyfc:5,hw,mg/OZsEHb:5,hw,mg/sy101/yc31df:5,41,44,46,4x,51,hw,mg,1rh/oGC5Zb:5,hw,1rh/sy102:1l,tx/SG9zWd:5,41,44,46,hw,1rk/sy103:4i,19r/wJIZZb:41,44,46,1rm/jiqPqd:5,g,i,41,44,46,4c,4e,4l,hw,mg,1rm/MkIO9c:5,41,44,46,hw,1rk/M9vkYd:5,41,44,46,51,hw/aHOI1:5,hw/sy104:1w/Dn2cj:5,hw,1rs/TXGEQd:5,hw,1fr,1rs/eudpo:5,hw,1fr/xTGbVb:5,1w,is,vf/h8oSmc:5,hw,1fr/sy105/UnEZKb:5,24,6x,is,1ry/vRQLvd:5,g,i,1g,hw/sy106:1ry/sy107:5,1eo,1s1/t9gnvd:1s2/H4S3I:y,2e,2f,3n,3q,3s,3u,3w,hw,1bg,1s2/ZEuF0b:rx,sq,1s2/XWWgIe:5,6z,hw,1s1/cuF7Se:5,26,8c,8d,hw,vu,y9/b0rdie:5,au,hw,w5/Ylvtjb:5,s,hw/wGebCd:5,g,i,4c,4e,4l,hw/hfHlEc:5,g,i,8c,8d,9l,hw/sy108:5,9i,hw,1gm/F7ZVvd:1sc/RWPkLe:g,i,3q,3s,3u,3w,8d,wm,zo,1ad/E1r40:5,g,i,26,hw,wg,wk/lcuxb:5,hw/sy109:5,hw/bp3oWe:1sh/B8gYLd:g,i,2y,8b,9l,by,wh,13o,1sc,1sh/GEDFHb:5,g,i,s,hw,wg/XAZ4df:5,hw/dBiGrc:5,g,i,hw,wg,11c/sy10a:5,1f,62,a8,gb,hw,wf,wj,wl/Jdirof:g,i,3q,3s,3u,3w,1sn/sy10b/jQAX:g,i,1g,3q,3s,3u,3w,6b,dj,dp,1sn,1sp/rrBcye:5,8c,8d,hw,wf,1sp/sy10c:wk/Yrdtcb:g,i,3q,3s,3u,3w,41,44,46,4c,4e,8d,wn,zo,11c,1ss/BmlyBe:5,4o,hw,wf,zo,1ss/sy10d:k9/wvOg9:5,hw,k8,1sv/XhbJpf:5,21,hw,1sv/AJPPN:5,2y,3q,3s,3u,3w,gb,hw,k8,k9/dHkYPc:5,v,3q,3s,3u,3w,gb,hw,k9/JGGdP:5,g,i,3q,3s,3u,3w,41,44,46,8d,9l,hw,j6,v5,wg,13o/OUo2Bd:5,hw/hMs8O:5,hw/JmJ36b:5,g,i,3n,3q,3s,3u,3w,8d,ba,ht,hw,wg/j2iqGe:5,hw/sy10e:1h,51,7q,a8,fb,hw,x8,xg/d0xvhc:g,i,3q,3s,3u,3w,41,44,46,8d,1t5/h29sId:5,g,i,1g,26,2e,41,44,46,4u,4v,8q,a8,hp,hw,xc/oZGeQd:5,3q,3s,3u,3w,hq,hw,r7/R3BxBd:5,hw/Q7Rsec:5,g,i,3q,3s,3u,3w,41,44,46,8d,1t5/yGYxfd:5,hw/sy10f:1l/EyfV7c:1tc/envtD:5,8c,8d,hw,1tc/DOV8Ue:5,hw/jraN4c:5,g,i,41,44,46,4c,4e,5a,hw,zo,1ls,1lt/sy10g:5,1eo/DjzCtf:1th/dk5oie:6s,hw,1th/TfALWb:5,6x,is/zMVhnf:6s,hw,q4,1th/bEPMOc:5,3q,3s,3u,3w,4p,8c,8d,hw/sy10h/YGj08:5,hw,1tn/jFvnYb:5,hw,1tn/sy10i:5,1eo/Qj2T6d:1tq/q0xKk:g,i,3q,3s,3u,3w,41,44,46,8d,hw,v3,1tq/jYZGG:8c,8d,hw,1tq/sy10j:hw,zo,1tq/RFWOO:1tu/BgNvNc:3q,3s,3u,3w,f2,1tu/sy10k:1l/sy10l:5,1eo,1tx/YXOqQd:1ty/LlgUIc:8c,8d,hw,1m1,1ty/sy10m:1m,2e/CMVwrd:2q,hw,1ty,1u1/y6zxGc:5,g,i,1g,hw,1m1/m1qYVe:5,hw/sy10n/fUZHgc:hw,1m1,1ty,1u1,1u5/D43OGb:5,hw,yn,1tx,1u1/sy10o/sy10p:1l,1u8/sy10q:5,1eo,1u9/Oz381d:1ua/sy10r:26,8c,hw,1ua/fUqMxb:8d,1uc/DVbjQe:3q,3s,3u,3w,8d,gb,1uc/Nc3Rkf:g,i,3q,3s,3u,3w,41,44,46,8d,v3,1uc/L968hd:5,26,69,hw,1u9/ms9fmb:5,26,69,hw,1u9/sy10s:gb,hw,v3,1ua/lToJ7:g,i,3q,3s,3u,3w,41,44,46,8d,1ui/J3Ajmb:g,i,3q,3s,3u,3w,41,44,46,8d,1ui/QSxmrb:g,i,3q,3s,3u,3w,41,44,46,8d,1ui/sy10t:5,gb,hw,v3,1u8/CYuKbe:g,i,3q,3s,3u,3w,41,44,46,8d,1um/vUqcAd:g,i,3q,3s,3u,3w,41,44,46,8d,1um/O14W2e:g,i,3q,3s,3u,3w,41,44,46,8d,1u9,1um/K6sNb:5,26,69,hw,1u8/G0NFQ:hw,1ua/ZB8u4:5,26,69,hw,1u8/w3JMGf:3q,3s,3u,3w,8c,8d,f2,hw,1ua/sy10u:5,yn,yq,1eo/S7NRWc:1uu/sy10v:hw,1uu/l5PeWb:1uw/sy10w:1uw/yq8Kt:1uy/sy10x:7n,8c,1uy/gC2Wsb:g,i,3q,3s,3u,3w,8d,1v0/kqu41:3q,3s,3u,3w,8c,8d,gb,1uw/hSxffe:hw,1uu/XN337e:hw,1uu/VLHaOe:3q,3s,3u,3w,8c,8d,f2,hw,1uu/n6dUze:g,i,3q,3s,3u,3w,8d,10m,1u5,1v0/vdxTOc:g,i,3q,3s,3u,3w,8d,hs,1u5,1v0/SnVKgc:hw,wj,1uu/Qm5xXe:hw,1uu/b7a23b:5,3q,3s,3u,3w,f2,hw,r1,1m1/llRSjc:5,8c,8d,hw/sy10y:5,yl,1eo/qXjy0d:1vc/ZUtozc:hw,1vc/EtgvCf:2q,hw,1u1,1vc/bOnXrf:5,3q,3s,3u,3w,8c,8d,gb,hw/sy110/sy10z:5,1eo,1vh/FIT1Cf:1vi/LnoNZ:hw,od,1vi/xqv63c:5,3q,3s,3u,3w,4k,f2,hw,zo/sy111:5,hw,1vh/tMllDb:1vm/VuNnEf:1vm/LYVJpd:5,hw/AfaGM:5,83,ey,hw/H51xxd:5,4i,hw/VkpdZe:5,g,i,v,4c,4e,4l,hw/sy112/P4jgO:41,44,46,69,179,1vt/MdvScf:5,3q,3s,3u,3w,gb,hw/gRltwc:41,44,46,6a,dj,dp,rx,179,1vt/sy113:1l/sy114/sy115:5,c8,hw,v3,1vx,1vy/h6Afuf:g,i,3q,3s,3u,3w,41,44,46,8d,1vz/sy116:7g,d3,eb,es,yt/sy117:hw,1vy,1w1/CmbLIf:1w2/sy118:5,1eo,1vy/uBfBGc:1w4/sy119:hw,1w4/XHp6Cd:1w6/RdGu6:6z,1w2,1w6/sy11a:5,hw,1vy,1w1/I8n2Qe:1w9/sy11b:5,1eo,1vy/dx4IXd:1wb/zrIjec:g,i,3q,3s,3u,3w,41,44,46,8d,if,ih,il,1vz,1w2,1w9,1wb/K0JLic:5,g,i,3q,3s,3u,3w,41,44,46,8d,hw,v3,1vx/iaukje:5,1w2/sy11c:7v/gKyG8d:1wg/sy11d:1wg/gWLQX:1wi/sy11e:1wg/yuzXFb:1wk/g85jIe/Zolilf/sy11h:hw,1wn/VY8t1b:1wo/sy11i/CcVN1c:5,1fr,1wo,1wq/sy11j:1l/MwoIdb:1ws/nXAsLd:5,hw,1ws/sy11k:1o,2j,1wn/pyOfRe:1wv/sy11l/vDBIQe:g,i,3q,3s,3u,3w,41,44,46,4c,4e,5a,8d,zp,zq,1wv,1wx/sy11m:5,is/gOKUWe:1wz/peJcQe/sy11o:5,1eo,1lv,1wi,1wk,1wn,1wx,1x1/zh1Cyf:1x2/sy11p:gb,zo,1wo,1wq,1ws,1wz,1x2/m7XNRb:3q,3s,3u,3w,1x4/sy11q:5,1g,is,1wn/wjpSMd:g,i,1x6/mDo2uf:5,hw,1ws/sy11r:1wm,1x2/tMa3wd:1x9/sy11s:1w,1fr,1wn,1wq/C8q80d:5,1wo,1xb/bBUKGb:5,1wo,1xb/sy11t:1wm,1x2/BUYmH:1xe/sy11u:8c,hw,1ws,1wz,1x2/fiAvEd:8d,1xg/sy11v:9j,1x9,1xe,1xg/iV8JEf:g,i,8d,9l,1xi/sy11w/fpRckf:g,i,3q,3s,3u,3w,41,44,46,4c,4e,5a,8d,9l,r1,1ly,1wv,1x4,1x6,1xi,1xk/kJrtWc:5,hw,1wn,1ws/efJqqe:8d,1xg,1xk/sy11x/ZwaaWb:5,hw,1xo/Gs99mf:5,69,hw,od/ouPM6:5,hw/FE1snb/hGtkCd:g,i,3q,3s,3u,3w,8d,1ly,1xs/YDIEcd:5,hw,zo/vuiyx:5,26,6b,dj,dp,hw/hkZHUe:5,hw/Fs4bVd:5,hw/NPrU2b:5,hw,1xo/PDhHxc:5,3q,3s,3u,3w,gb,hw/NRObBc:5,g,i,1h,hw/sy11z:4u,4v,53/wRyI8c:41,44,46,1y1/sy120:4u,4v,53/PlEpNc:41,44,46,1y3/sy121:1w,4u,4v/vNg7R:41,44,46,1y5/sy122:1w,4v,51,53,wr/vm5JXd:41,44,46,1y7/sy123:1w,4v,51/UeQqS:41,44,46,1y9/sy124:1w,4v,51,53,wr/md26C:41,44,46,1yb/sy125:1w,4v,51/evmFPc:41,44,46,1yd/sy126/o2oEk:5,41,44,46,hw,1y3,1yf/sy127:1kr/bZkvHe:5,41,44,46,hw,1y1,1y7,1yh/sy12a/sy128:1l/sy129:1l,1yf,1yh/y7EQ8c:5,41,44,46,hw,1y1,1yb,1yj,1yk,1yl/yB8uUb:5,n,3n,3q,3s,3u,3w,69,hw,1yk,1yl/M5DtBf:5,41,44,46,6z,hw,1y1,1y5,1y9,1yd,1yj,1yl/gLLujc:5,hw/RBjLrb:5,41,44,46,6z,hw,1cd,1ou,1y1,1yj,1yl/uM3f6e:5,hw,1i3/sy12b:5,1g,is/MshkFb:g,i,1ys/sy12d/sy12c:8c,hw,zo,1ys,1yu/Sop6q:g,i,8d,1yv/F6ibQd:5,4j,8c,8d,hw,zo,1yu/sy12e:hw,zo,1d0,1ys/CoCtWd:g,i,41,44,46,4c,4e,1yy/sy12f:4g,7g,b6,eq,hw,zo,1ys,1yu/aH4Jze:g,i,1z0/IW56mf:g,i,41,44,46,4c,4e,8d,1yv,1yy,1z0/w71Os:g,i,41,44,46,4c,4e,12z,1yy,1z0/FwRXgf:5,hw/l1EeOc:1co/q25xId:5,3n,3q,3s,3u,3w,hw/E8gXq:5,26,b1,hw/nO0bbe:5,hw/EQbib:5,hw/Zq1GGb:5,g,i,3q,3s,3u,3w,41,44,46,8d,9l,b9,bd,bf,bh,hw,p6,pb,pd,pg,pi,pk,pn,pp,pq,ps/s55Zh:5,b1,hw/sy12g:z,81/jGN5Cb:5,hw,143,1zc/sy12h:5,hw/SDjZVd:1ze/HPkDad:p1,p2,1ze/sy12i:1l/h6eNEd:1zh/sy12j:5,hw,1kv,1zh/arfjKf:1zj/bDAKYc:1zj/OBTVMe:5,g,i,3q,3s,3u,3w,8d,9l,ac,b9,bd,bf,bh,hw,12z/q6pEn:5,g,i,3q,3s,3u,3w,8d,9l,ac,av,b9,bd,bf,bh,hw/iDYhi:5,hw/NlIwxf:5,hw,140,1zc/qpyWye:5,g,i,3q,3s,3u,3w,8d,9l,ac,av,b9,bd,bf,bh,hw,140/IUeJCc:5,g,i,3q,3s,3u,3w,9l,bd,bf,bh,hw,13q/eGbo8c:5,hw/oL9Pmd:5,4j,hw/fULFzf:5,s,16,18,bx,hw,om/YmOPAf:5,hw,or/si2dEc:5,g,i,4c,4e,4l,hw/Bxzg4:5,4i,hw/tyt1f:5,g,i,2g,hw,13o/sy12k:1l/L6jEvd:1zz/sy12l:1l/cvyctc:201/sy12m:kg/yKizwd:203/sy12n:1l/sy12o:5,4i,hw,15l,205/oSZ80b:206/sy12p:v,1g,iu,kf,203,206/JBkPeb:g,i,208/EHgu5b:g,i,26,208/sy12q:206/n2ywGd:20b/pZSW2c:20b/sy12r:5,8c,hw,205/npJSVb:8d,20e/zjnSJc:206/PqNXEf:206/ALtYob:206/uuCChc:5,g,i,s,1g,hw,kf,203/iyCtHd:g,i,rg,sj,208/TC4W7e:20b/OFYE5:g,i,26,170,208/YsPL1d:8d,15l,20e/T2YtSb:20b/cwmKte:g,i,15n,201,206/f7JYcb:g,i,1de,1di,206/HYAT0d:5,g,i,2y,b6,hw/I1kQhe:5,8c,8d,hw/aHbfPc:v,206/iNuvQb:5,6p,bf,bh,hw,15l,1zz/Xq3Gk:5,g,i,4c,4e,4l,hw/axzuae:5,hw,205/rrF9vc:5,hw/MXT5Ue:5,s,2g,3n,3q,3s,3u,3w,hw/JCAum:5,3n,3q,3s,3u,3w,72,hw,11c/QIpzIb:5,3q,3s,3u,3w,5b,gb,hw,155/yRGlWc:5,hw/Jdjbmd:5,g,i,4c,4e,4l,8c,8d,hw,14j/sy12s:1l/mdDAKb:213/sWqRX:5,hw,14m,213/uOk8ic:5,4j,hw,14l/JwL8u:5,hw,14m,213/ZkQLCf:5,hw,od/vpzVPc:5,g,i,4j,8c,8d,hw,v2,14j,14k,14l,14n,177,213/OeMaue:5,hw,213/sqooke:5,g,i,3q,3s,3u,3w,f2,hw,14j,14n,1ou/f4I0M:5,hw/CHiEBc:5,hw,zo,213/oWECDc:5,g,i,hw,12z,14j,14n/Ot9cnb:5,hw,zo,213/OncyA:5,hw/VBuowe:5,8c,8d,hw,14j,213/XTTu8c:5,g,i,3q,3s,3u,3w,5b,gb,hw,14n,155,1ou/vIqfhf:5,hw/fxPKje:5,5e,hw,wa/ejufld:5,g,i,hw,li,14n,213/KSvRF:5,hw,zo,213/p1DePb:5,4j,8c,8d,hw/Fao4hd:g,i,3q,3s,3u,3w,8d,9l,bf,bh,gb,1dk,1nd/w3FSO:178/ypOy3c:5,s,hw,164,165/bEqb6c:5,aw,bd,hw,163,164/JkXlg:5,bd,hw,166/D6PUo:5,8c,8d,hw/TyUAjf:5,hw/RxNe1c:5,hw/eYvc4b:5,hw/sy12t:5,4i,hw/R0JH7c:21x/bpd7Ac:g,i,4c,4e,4l,21x/aG7yUc:5,hw/h5s8H:g,i,4c,4e,4l,21x/ln7ICd:5,4o,72,hw/CDlvV:5,by,hw/A2j0M:5,4o,hw/qM3K7e:5,hw/LKlUne:5,2j,hw/uD3Snf:5,26,3y,hw/sy12u:hw,19y/yT6kFe:g,i,228/oYqv8d:5,g,i,3q,3s,3u,3w,41,44,46,8d,9l,1a1,1ab,228/Wtz2ob:5,g,i,3q,3s,3u,3w,41,44,46,8d,9l,hw,1a1/ZRgq1:5,hw/HSEYN:5,g,i,s,1g,4o,9e,hn,hw,v8/L2tou:5,g,i,3q,3s,3u,3w,41,44,46,8d,9l,hw,1a1/qJblCe:5,g,i,3q,3s,3u,3w,41,44,46,8d,9l,1a1,228/TD6FEc:5,g,i,3q,3s,3u,3w,41,44,46,8d,9l,1a1,1a5,228/sy12v/V36nGd:5,4i,hw,22h/WyxH1b:5,g,i,3q,3s,3u,3w,41,44,46,8d,9l,1a1,228/ry8O7c:5,hw/CQ2Zsf:5,g,i,3q,3s,3u,3w,41,44,46,8d,9l,1a1,1ab,228/QJaWsd:5,g,i,3q,3s,3u,3w,41,44,46,8d,9l,hw,1a1/U5IZ5c:5,72,hw,11c/m9hrPe:5,g,i,3q,3s,3u,3w,41,44,46,8d,9l,hw,1a1/dgYx5b:5,g,i,3q,3s,3u,3w,41,44,46,8d,9l,1a1,228/G71C:5,g,i,3q,3s,3u,3w,41,44,46,8d,9l,hw,1a1/VXTvsf:5,g,i,3q,3s,3u,3w,41,44,46,8d,9l,hw,1a1/GMa0F:5,g,i,3q,3s,3u,3w,41,44,46,8d,9l,1a1,228/aUtDVb:5,g,i,3q,3s,3u,3w,hw,wi,19x,19z/iLBw6c:5,g,i,3q,3s,3u,3w,41,44,46,8d,9l,1a1,1ab,228/DNmQdf:5,g,i,3q,3s,3u,3w,41,44,46,8d,9l,hw,1aj/ydrM7c:5,g,i,3q,3s,3u,3w,41,44,46,8d,9l,hw,1a1/Fs59Td:5,o,26,hw/JW1iGe:5,g,i,3q,3s,3u,3w,41,44,46,8d,9l,hw,1a1,1a9/xB75Hf:5,g,i,3q,3s,3u,3w,hw,19w,19z/sQpbGc:5,g,i,ba,hw,va/yvXaPd:5,g,i,9l,hw/i4EVBe:5,g,i,26,8c,8d,hw,va,1a3,1a4/jd8rE:5,g,i,4c,4e,4l,hw,22h/JsRABf:5,g,i,3q,3s,3u,3w,41,44,46,8d,9l,hw,1a1',[]);
}catch(e){_DumpException(e)}
/* _GlobalSuffix_ */
// Google Inc.
