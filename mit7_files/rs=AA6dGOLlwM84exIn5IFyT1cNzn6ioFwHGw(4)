/* _GlobalPrefix_ */
/* _Module_:ampfp */
try{
/** @suppress {missingRequire} */ goog.module.ModuleManager.getInstance().beforeLoadModuleCode('ampfp');
var $googDebugFname="java/com/google/gws/plugins/amp/jslayout/full_page_viewer_html_pinto.model_dom.jslayout.js";
eval("/**\n * @fileoverview Generated code, do not modify.\n * Generated from java/com/google/gws/plugins/amp/jslayout/full_page_viewer.html.\n * Generated by template/prototemplate/jslayout/codegeneration/gen_model_dom_js.tpl.\n *\n * @suppress {extraRequire}\n */\n\ngoog.provide(\x27gws.amp.FullPageAmpViewerImplDom\x27);\ngoog.provide(\x27gws.amp.FullPageAmpViewerImplModel\x27);\n\n\ngoog.require(\x27proto.mendel.AmpViewer\x27);\n\n\ngoog.require(\x27jslayout.reactive.TemplateParams\x27);\n\ngoog.require(\x27jslayout.reactive.JsnameDomBase\x27);\ngoog.forwardDeclare(\x27goog.Promise\x27);\n\ngoog.forwardDeclare(\x27gws.amp.ViewerController\x27);\ngoog.forwardDeclare(\x27gws.suit.fullPageView.FullPageView\x27);\n\n\n// Controller Model, Dom class code generated by:\n// template/prototemplate/jslayout/javascript/controller_model_dom_js.tpl\n\n\n\n/**\n * for-controller {gws.amp.FullPageViewerController}\n * @param {!jslayout.reactive.TemplateParams} templateParams Template\n *     parameters.\n * @constructor\n */\ngws.amp.FullPageAmpViewerImplModel \x3d\n    function(templateParams) {\n  this.params_ \x3d templateParams;\n};\n\n\n/**\n * model-proto {amp_viewer_feature.animate_in_duration, int}\n * model-proto {amp_viewer_feature.animate_out_duration, int}\n * model-proto {amp_viewer_feature.replace_history_state_enabled, bool}\n * @return {proto.mendel.AmpViewer} Model data corresponding to\n *     template parameter named \x27amp_viewer_feature\x27.\n */\ngws.amp.FullPageAmpViewerImplModel.prototype.\n    getAmpViewerFeature \x3d function() {\n  return this.params_.getAsProto(proto.mendel.AmpViewer, \x27amp_viewer_feature\x27);\n};\n\n\n/**\n * @param {!Object} controller\n * @constructor\n * @extends {jslayout.reactive.JsnameDomBase}\n */\ngws.amp.FullPageAmpViewerImplDom \x3d\n    function(controller) {\n  gws.amp.FullPageAmpViewerImplDom.base(this, \x27constructor\x27, controller);\n};\ngoog.inherits(gws.amp.FullPageAmpViewerImplDom, jslayout.reactive.JsnameDomBase);\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22full_page_view\x22.\n */\ngws.amp.FullPageAmpViewerImplDom.prototype.getFullPageView \x3d function() {\n  return this.queryForMember(\x27uRkuRgX-E_Y\x27);\n};\n\n\n/**\n * @return {!goog.Promise.\x3c!gws.suit.fullPageView.FullPageView\x3e} Resolves to the controller\n *     associated with the template element with jsname\x3d\x22full_page_view\x22.\n *     Rejects if the controller constructor fails.\n */\ngws.amp.FullPageAmpViewerImplDom.prototype.getFullPageViewController \x3d function() {\n  return /** @type {!goog.Promise.\x3c!gws.suit.fullPageView.FullPageView\x3e} */ (\n      this.queryForMemberController(\x27uRkuRgX-E_Y\x27));\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22amp_viewer\x22.\n */\ngws.amp.FullPageAmpViewerImplDom.prototype.getAmpViewer \x3d function() {\n  return this.queryForMember(\x27YTDEgLIna-A\x27);\n};\n\n\n/**\n * @return {!goog.Promise.\x3c!gws.amp.ViewerController\x3e} Resolves to the controller\n *     associated with the template element with jsname\x3d\x22amp_viewer\x22.\n *     Rejects if the controller constructor fails.\n */\ngws.amp.FullPageAmpViewerImplDom.prototype.getAmpViewerController \x3d function() {\n  return /** @type {!goog.Promise.\x3c!gws.amp.ViewerController\x3e} */ (\n      this.queryForMemberController(\x27YTDEgLIna-A\x27));\n};\n\n\n//# sourceURL\x3dhttps://qs/java/com/google/gws/plugins/amp/jslayout/full_page_viewer_html_pinto.model_dom.jslayout.js\n");

$googDebugFname=undefined;
var $googDebugFname="jar:file:java/com/google/gws/plugins/amp/jslayout/full_page_viewer_html_pinto.jslayout.js.zip!/gws.amp.FullPageAmpViewerImplTemplate.jslayout.js";
eval("// -*- mode: js -*-\n/**\n * @fileoverview Generated code, do not modify.\n * Generated from java/com/google/gws/plugins/amp/jslayout/full_page_viewer.html.\n * Generated by template/prototemplate/jslayout/codegeneration/api_js.tpl.\n *\n * @suppress {uselessCode|transitionalSuspiciousCodeWarnings|extraRequire|missingRequire}\n */\n\n// Below are flags and original source file used to generate this\n// file. Used by ModuleSetsServer to provide edit/refresh for\n// jslayout_js() rules. Omitted in codegeneration/example; cf.\n// example_update.sh.\n/* [[BUILD_ARGS]]\nsource_file: \x22java/com/google/gws/plugins/amp/jslayout/full_page_viewer.html\x22\nbuilder_arg: \x22java/com/google/gws/plugins/amp/jslayout/full_page_viewer.html\x22\nbuilder_arg: \x22--artifacts\x22\nbuilder_arg: \x22w,desc_pool,xmb\x22\nbuilder_arg: \x22--gendir\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles\x22\nbuilder_arg: \x22--template_root\x22\nbuilder_arg: \x22,blaze-out/k8-opt/bin\x22\nbuilder_arg: \x22--output_directory\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles\x22\nbuilder_arg: \x22--xtb_basedir\x22\nbuilder_arg: \x22googledata/transconsole/xtb\x22\nbuilder_arg: \x22--mode\x22\nbuilder_arg: \x22single\x22\nbuilder_arg: \x22--stderrthreshold\x3d1\x22\nbuilder_arg: \x22--xmb_output_file_suffix\x22\nbuilder_arg: \x22.gws\x22\nbuilder_arg: \x22--strict_mode\x22\nbuilder_arg: \x22--use_attribute_whitelist\x22\nbuilder_arg: \x22--jscontroller_type\x3dreactive\x22\nbuilder_arg: \x22--parser_config\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles/googledata/gws/jslayout/parser_config_safe_sanitized\x22\nbuilder_arg: \x22--tc_project\x3dgws\x22\nbuilder_arg: \x22--source_base_dirs\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles\x22\nrenderer_arg: \x22blaze-out/host/bin/template/prototemplate/jslayout/renderer\x22\nrenderer_arg: \x22--input_root\x3dblaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles\x22\nrenderer_arg: \x22--input\x3dblaze-out/k8-opt/genfiles/java/com/google/gws/plugins/amp/jslayout/full_page_viewer.html.w\x22\nrenderer_arg: \x22--js_output\x3dblaze-out/k8-opt/bin/java/com/google/gws/plugins/amp/jslayout/full_page_viewer_html_pinto.jslayout.js.zip\x22\nrenderer_arg: \x22--js_wrapper\x22\nrenderer_arg: \x22--entrypoint\x3dtrue\x22\nrenderer_arg: \x22--generate_only_browserside_template\x22\nrenderer_arg: \x22--generate_controller_only\x22\nrenderer_arg: \x22--generate_separate_files_per_template\x22\nrenderer_arg: \x22--use_apps_jspb\x22\nrenderer_arg: \x22--use_reactive\x22\n[[/BUILD_ARGS]] */\n\ngoog.provide(\x27gws.amp.FullPageAmpViewerImplTemplate\x27);\n\n\n\n\n// Reactive and IDL jscontroller classes,\n// IDL classes with static method invocations, enum types,\n// imports used by certain expression language features,\n// reactive and IDL jscontroller JSPB protos,\n// Soy templates used via soyTemplate() built-in.\ngoog.require(\x27gws.amp.FullPageAmpViewerImplDom\x27);\ngoog.require(\x27gws.amp.FullPageAmpViewerImplModel\x27);\ngoog.require(\x27gws.amp.FullPageViewerController\x27);\ngoog.require(\x27jslayout.reactive.framework\x27);\n\n\n\n\n// Controller registration code generated by:\n// template/prototemplate/jslayout/javascript/controller_registration_js.tpl\n\n\n/**\n * @param {!jslayout.reactive.ControllerPool} pool\n */\ngws.amp.FullPageAmpViewerImplTemplate.registerController \x3d function(pool) {\n  pool.registerController(\n      \x27t-uRVHCu9mNb4\x27, gws.amp.FullPageViewerController, gws.amp.FullPageAmpViewerImplModel,\n      gws.amp.FullPageAmpViewerImplDom,\n      function(tempObj, model, dom) {\n        gws.amp.FullPageViewerController.call(\n            /** @type {gws.amp.FullPageViewerController} */(tempObj), /** @type {!gws.amp.FullPageAmpViewerImplModel} */ (model), /** @type {!gws.amp.FullPageAmpViewerImplDom} */ (dom));\n      },\n      \x27gws.amp.FullPageViewerController\x27);\n};\n\n\n// Auto controller/template registration for reactive templates generated by:\n// template/prototemplate/jslayout/javascript/controller_registration_js.tpl\njslayout.reactive.framework.registerController(\n    gws.amp.FullPageAmpViewerImplTemplate.registerController);\n\n\n//# sourceURL\x3dhttps://qs/jar:file:java/com/google/gws/plugins/amp/jslayout/full_page_viewer_html_pinto.jslayout.js.zip!/gws.amp.FullPageAmpViewerImplTemplate.jslayout.js\n");

$googDebugFname=undefined;


/** @suppress {missingRequire} */ /** @suppress {missingRequire} */
goog.module.ModuleManager.getInstance().setLoaded('ampfp');
/** @suppress {missingRequire} */
goog.module.ModuleManager.getInstance().afterLoadModuleCode('ampfp');

}catch(e){_DumpException(e)}
/* _Module_:fpv */
try{
/** @suppress {missingRequire} */ goog.module.ModuleManager.getInstance().beforeLoadModuleCode('fpv');
var $googDebugFname="gws/suit/full_page_view/full_page_view_html_pinto.model_dom.jslayout.js";
eval("/**\n * @fileoverview Generated code, do not modify.\n * Generated from gws/suit/full_page_view/full_page_view.html.\n * Generated by template/prototemplate/jslayout/codegeneration/gen_model_dom_js.tpl.\n *\n * @suppress {extraRequire}\n */\n\ngoog.provide(\x27gws.suit.full_page_view.GFullPageViewDom\x27);\ngoog.provide(\x27gws.suit.full_page_view.GFullPageViewModel\x27);\n\n\ngoog.require(\x27proto.gws.suit.full_page_view.FullPageViewProto\x27);\n\n\ngoog.require(\x27jslayout.reactive.TemplateParams\x27);\n\ngoog.require(\x27jslayout.reactive.JsnameDomBase\x27);\ngoog.forwardDeclare(\x27goog.Promise\x27);\n\n\n\n// Controller Model, Dom class code generated by:\n// template/prototemplate/jslayout/javascript/controller_model_dom_js.tpl\n\n\n\n/**\n * for-controller {gws.suit.fullPageView.FullPageView}\n * @param {!jslayout.reactive.TemplateParams} templateParams Template\n *     parameters.\n * @constructor\n */\ngws.suit.full_page_view.GFullPageViewModel \x3d\n    function(templateParams) {\n  this.params_ \x3d templateParams;\n};\n\n\n/**\n * model-proto {config, gws.suit.full_page_view.FullPageViewProto, gws/suit/full_page_view/full_page_view.proto}\n * @return {proto.gws.suit.full_page_view.FullPageViewProto} Model data corresponding to\n *     template parameter named \x27config\x27.\n */\ngws.suit.full_page_view.GFullPageViewModel.prototype.\n    getConfig \x3d function() {\n  return this.params_.getAsProto(proto.gws.suit.full_page_view.FullPageViewProto, \x27config\x27);\n};\n\n\n/**\n * @param {!Object} controller\n * @constructor\n * @extends {jslayout.reactive.JsnameDomBase}\n */\ngws.suit.full_page_view.GFullPageViewDom \x3d\n    function(controller) {\n  gws.suit.full_page_view.GFullPageViewDom.base(this, \x27constructor\x27, controller);\n};\ngoog.inherits(gws.suit.full_page_view.GFullPageViewDom, jslayout.reactive.JsnameDomBase);\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22full_page_element_container\x22.\n */\ngws.suit.full_page_view.GFullPageViewDom.prototype.getFullPageElementContainer \x3d function() {\n  return this.queryForMember(\x27kwB250EgHHo\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22full_page_content\x22.\n */\ngws.suit.full_page_view.GFullPageViewDom.prototype.getFullPageContent \x3d function() {\n  return this.queryForMember(\x27ewy-7xJJxkM\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22async_div\x22.\n */\ngws.suit.full_page_view.GFullPageViewDom.prototype.getAsyncDiv \x3d function() {\n  return this.queryForMember(\x27NJ8bCF1z0yw\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22loading_screen\x22.\n */\ngws.suit.full_page_view.GFullPageViewDom.prototype.getLoadingScreen \x3d function() {\n  return this.queryForMember(\x27Ckg4CHcXjmg\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22loading_error\x22.\n */\ngws.suit.full_page_view.GFullPageViewDom.prototype.getLoadingError \x3d function() {\n  return this.queryForMember(\x27b9R9PYGq2jQ\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22static_div\x22.\n */\ngws.suit.full_page_view.GFullPageViewDom.prototype.getStaticDiv \x3d function() {\n  return this.queryForMember(\x27CzRsGqAgqxU\x27);\n};\n\n\n//# sourceURL\x3dhttps://qs/gws/suit/full_page_view/full_page_view_html_pinto.model_dom.jslayout.js\n");

$googDebugFname=undefined;
var $googDebugFname="jar:file:gws/suit/full_page_view/full_page_view_html_pinto.jslayout.js.zip!/gws.suit.full_page_view.GFullPageViewTemplate.jslayout.js";
eval("// -*- mode: js -*-\n/**\n * @fileoverview Generated code, do not modify.\n * Generated from gws/suit/full_page_view/full_page_view.html.\n * Generated by template/prototemplate/jslayout/codegeneration/api_js.tpl.\n *\n * @suppress {uselessCode|transitionalSuspiciousCodeWarnings|extraRequire|missingRequire}\n */\n\n// Below are flags and original source file used to generate this\n// file. Used by ModuleSetsServer to provide edit/refresh for\n// jslayout_js() rules. Omitted in codegeneration/example; cf.\n// example_update.sh.\n/* [[BUILD_ARGS]]\nsource_file: \x22gws/suit/full_page_view/full_page_view.html\x22\nbuilder_arg: \x22gws/suit/full_page_view/full_page_view.html\x22\nbuilder_arg: \x22--artifacts\x22\nbuilder_arg: \x22w,desc_pool,xmb\x22\nbuilder_arg: \x22--gendir\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles\x22\nbuilder_arg: \x22--template_root\x22\nbuilder_arg: \x22,blaze-out/k8-opt/bin\x22\nbuilder_arg: \x22--output_directory\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles\x22\nbuilder_arg: \x22--xtb_basedir\x22\nbuilder_arg: \x22googledata/transconsole/xtb\x22\nbuilder_arg: \x22--mode\x22\nbuilder_arg: \x22single\x22\nbuilder_arg: \x22--stderrthreshold\x3d1\x22\nbuilder_arg: \x22--xmb_output_file_suffix\x22\nbuilder_arg: \x22.gws\x22\nbuilder_arg: \x22--strict_mode\x22\nbuilder_arg: \x22--use_attribute_whitelist\x22\nbuilder_arg: \x22--jscontroller_type\x3dreactive\x22\nbuilder_arg: \x22--parser_config\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles/googledata/gws/jslayout/parser_config_safe_sanitized\x22\nbuilder_arg: \x22--tc_project\x3dgws\x22\nbuilder_arg: \x22--expflags_files\x3dblaze-out/k8-opt/genfiles/googledata/gws/experiments/mendel/gws/features/quantum_colors_mendel_jslayout_interface.expflags\x22\nbuilder_arg: \x22--source_base_dirs\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles\x22\nrenderer_arg: \x22blaze-out/host/bin/template/prototemplate/jslayout/renderer\x22\nrenderer_arg: \x22--input_root\x3dblaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles\x22\nrenderer_arg: \x22--input\x3dblaze-out/k8-opt/genfiles/gws/suit/full_page_view/full_page_view.html.w\x22\nrenderer_arg: \x22--js_output\x3dblaze-out/k8-opt/bin/gws/suit/full_page_view/full_page_view_html_pinto.jslayout.js.zip\x22\nrenderer_arg: \x22--js_wrapper\x22\nrenderer_arg: \x22--entrypoint\x3dtrue\x22\nrenderer_arg: \x22--generate_only_browserside_template\x22\nrenderer_arg: \x22--generate_controller_only\x22\nrenderer_arg: \x22--generate_separate_files_per_template\x22\nrenderer_arg: \x22--use_apps_jspb\x22\nrenderer_arg: \x22--use_reactive\x22\n[[/BUILD_ARGS]] */\n\ngoog.provide(\x27gws.suit.full_page_view.GFullPageViewTemplate\x27);\n\n\n\n\n// Reactive and IDL jscontroller classes,\n// IDL classes with static method invocations, enum types,\n// imports used by certain expression language features,\n// reactive and IDL jscontroller JSPB protos,\n// Soy templates used via soyTemplate() built-in.\ngoog.require(\x27gws.suit.fullPageView.FullPageView\x27);\ngoog.require(\x27gws.suit.full_page_view.GFullPageViewDom\x27);\ngoog.require(\x27gws.suit.full_page_view.GFullPageViewModel\x27);\ngoog.require(\x27jsaction.ActionFlow\x27);\ngoog.require(\x27jslayout.reactive.framework\x27);\n\n\n\n\n// Controller registration code generated by:\n// template/prototemplate/jslayout/javascript/controller_registration_js.tpl\n\n\n/**\n * @param {!jslayout.reactive.ControllerPool} pool\n */\ngws.suit.full_page_view.GFullPageViewTemplate.registerController \x3d function(pool) {\n  pool.registerController(\n      \x27t-BrHYZUe0yo8\x27, gws.suit.fullPageView.FullPageView, gws.suit.full_page_view.GFullPageViewModel,\n      gws.suit.full_page_view.GFullPageViewDom,\n      function(tempObj, model, dom) {\n        gws.suit.fullPageView.FullPageView.call(\n            /** @type {gws.suit.fullPageView.FullPageView} */(tempObj), /** @type {!gws.suit.full_page_view.GFullPageViewModel} */ (model), /** @type {!gws.suit.full_page_view.GFullPageViewDom} */ (dom));\n      },\n      \x27gws.suit.fullPageView.FullPageView\x27);\n  pool.registerAction(\n      \x27mYi0ssJU_50\x27,\n      /**\n       * @param {!gws.suit.fullPageView.FullPageView} controller\n       * @param {!jsaction.ActionFlow} actionFlow\n       * @param {!jslayout.EvalContext} evalContext\n       */\n      function(controller, actionFlow, evalContext) {\n        controller.close(\n            actionFlow);\n      });\n  pool.registerAction(\n      \x27A5748wwHYNc\x27,\n      /**\n       * @param {!gws.suit.fullPageView.FullPageView} controller\n       * @param {!jsaction.ActionFlow} actionFlow\n       * @param {!jslayout.EvalContext} evalContext\n       */\n      function(controller, actionFlow, evalContext) {\n        controller.back(\n            actionFlow);\n      });\n  pool.registerAction(\n      \x27oRkIr2Zgmjs\x27,\n      /**\n       * @param {!gws.suit.fullPageView.FullPageView} controller\n       * @param {!jsaction.ActionFlow} actionFlow\n       * @param {!jslayout.EvalContext} evalContext\n       */\n      function(controller, actionFlow, evalContext) {\n        controller.handleItemRegistration(\n            actionFlow);\n      });\n  pool.registerAction(\n      \x27ROZAPDbD4A8\x27,\n      /**\n       * @param {!gws.suit.fullPageView.FullPageView} controller\n       * @param {!jsaction.ActionFlow} actionFlow\n       * @param {!jslayout.EvalContext} evalContext\n       */\n      function(controller, actionFlow, evalContext) {\n        controller.handleItemChanged(\n            actionFlow);\n      });\n};\n\n\n// Auto controller/template registration for reactive templates generated by:\n// template/prototemplate/jslayout/javascript/controller_registration_js.tpl\njslayout.reactive.framework.registerController(\n    gws.suit.full_page_view.GFullPageViewTemplate.registerController);\n\n\n//# sourceURL\x3dhttps://qs/jar:file:gws/suit/full_page_view/full_page_view_html_pinto.jslayout.js.zip!/gws.suit.full_page_view.GFullPageViewTemplate.jslayout.js\n");

$googDebugFname=undefined;


/** @suppress {missingRequire} */ /** @suppress {missingRequire} */
goog.module.ModuleManager.getInstance().setLoaded('fpv');
/** @suppress {missingRequire} */
goog.module.ModuleManager.getInstance().afterLoadModuleCode('fpv');

}catch(e){_DumpException(e)}
/* _Module_:syfm */
try{
/** @suppress {missingRequire} */ goog.module.ModuleManager.getInstance().beforeLoadModuleCode('syfm');
var $googDebugFname="javascript/closure/math/long.js";
eval("// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Defines a Long class for representing a 64-bit two\x27s-complement\n * integer value, which faithfully simulates the behavior of a Java \x22long\x22. This\n * implementation is derived from LongLib in GWT.\n *\n * @author kevinz@google.com (Kevin Zatloukal)\n */\n\ngoog.provide(\x27goog.math.Long\x27);\n\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.reflect\x27);\n\n\n\n/**\n * Constructs a 64-bit two\x27s-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Longs.\n *\n * The internal representation of a long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript\x27s floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE \x3d\x3d MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @param {number} low  The low (signed) 32 bits of the long.\n * @param {number} high  The high (signed) 32 bits of the long.\n * @struct\n * @constructor\n * @final\n */\ngoog.math.Long \x3d function(low, high) {\n  /**\n   * @type {number}\n   * @private\n   */\n  this.low_ \x3d low | 0;  // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.high_ \x3d high | 0;  // force into 32 signed bits.\n};\n\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object\x3cnumber, !goog.math.Long\x3e}\n * @private\n */\ngoog.math.Long.IntCache_ \x3d {};\n\n\n/**\n * A cache of the Long representations of common values.\n * @type {!Object\x3cgoog.math.Long.ValueCacheId_, !goog.math.Long\x3e}\n * @private\n */\ngoog.math.Long.valueCache_ \x3d {};\n\n/**\n * Returns a cached long number representing the given (32-bit) integer value.\n * @param {number} value The 32-bit integer in question.\n * @return {!goog.math.Long} The corresponding Long value.\n * @private\n */\ngoog.math.Long.getCachedIntValue_ \x3d function(value) {\n  return goog.reflect.cache(goog.math.Long.IntCache_, value, function(val) {\n    return new goog.math.Long(val, val \x3c 0 ? -1 : 0);\n  });\n};\n\n/**\n * The array of maximum values of a Long in string representation for a given\n * radix between 2 and 36, inclusive.\n * @private @const {!Array\x3cstring\x3e}\n */\ngoog.math.Long.MAX_VALUE_FOR_RADIX_ \x3d [\n  \x27\x27, \x27\x27,  // unused\n  \x27111111111111111111111111111111111111111111111111111111111111111\x27,\n  // base 2\n  \x272021110011022210012102010021220101220221\x27,  // base 3\n  \x2713333333333333333333333333333333\x27,          // base 4\n  \x271104332401304422434310311212\x27,              // base 5\n  \x271540241003031030222122211\x27,                 // base 6\n  \x2722341010611245052052300\x27,                   // base 7\n  \x27777777777777777777777\x27,                     // base 8\n  \x2767404283172107811827\x27,                      // base 9\n  \x279223372036854775807\x27,                       // base 10\n  \x271728002635214590697\x27,                       // base 11\n  \x2741a792678515120367\x27,                        // base 12\n  \x2710b269549075433c37\x27,                        // base 13\n  \x274340724c6c71dc7a7\x27,                         // base 14\n  \x27160e2ad3246366807\x27,                         // base 15\n  \x277fffffffffffffff\x27,                          // base 16\n  \x2733d3d8307b214008\x27,                          // base 17\n  \x2716agh595df825fa7\x27,                          // base 18\n  \x27ba643dci0ffeehh\x27,                           // base 19\n  \x275cbfjia3fh26ja7\x27,                           // base 20\n  \x272heiciiie82dh97\x27,                           // base 21\n  \x271adaibb21dckfa7\x27,                           // base 22\n  \x27i6k448cf4192c2\x27,                            // base 23\n  \x27acd772jnc9l0l7\x27,                            // base 24\n  \x2764ie1focnn5g77\x27,                            // base 25\n  \x273igoecjbmca687\x27,                            // base 26\n  \x2727c48l5b37oaop\x27,                            // base 27\n  \x271bk39f3ah3dmq7\x27,                            // base 28\n  \x27q1se8f0m04isb\x27,                             // base 29\n  \x27hajppbc1fc207\x27,                             // base 30\n  \x27bm03i95hia437\x27,                             // base 31\n  \x277vvvvvvvvvvvv\x27,                             // base 32\n  \x275hg4ck9jd4u37\x27,                             // base 33\n  \x273tdtk1v8j6tpp\x27,                             // base 34\n  \x272pijmikexrxp7\x27,                             // base 35\n  \x271y2p0ij32e8e7\x27                              // base 36\n];\n\n\n/**\n * The array of minimum values of a Long in string representation for a given\n * radix between 2 and 36, inclusive.\n * @private @const {!Array\x3cstring\x3e}\n */\ngoog.math.Long.MIN_VALUE_FOR_RADIX_ \x3d [\n  \x27\x27, \x27\x27,  // unused\n  \x27-1000000000000000000000000000000000000000000000000000000000000000\x27,\n  // base 2\n  \x27-2021110011022210012102010021220101220222\x27,  // base 3\n  \x27-20000000000000000000000000000000\x27,          // base 4\n  \x27-1104332401304422434310311213\x27,              // base 5\n  \x27-1540241003031030222122212\x27,                 // base 6\n  \x27-22341010611245052052301\x27,                   // base 7\n  \x27-1000000000000000000000\x27,                    // base 8\n  \x27-67404283172107811828\x27,                      // base 9\n  \x27-9223372036854775808\x27,                       // base 10\n  \x27-1728002635214590698\x27,                       // base 11\n  \x27-41a792678515120368\x27,                        // base 12\n  \x27-10b269549075433c38\x27,                        // base 13\n  \x27-4340724c6c71dc7a8\x27,                         // base 14\n  \x27-160e2ad3246366808\x27,                         // base 15\n  \x27-8000000000000000\x27,                          // base 16\n  \x27-33d3d8307b214009\x27,                          // base 17\n  \x27-16agh595df825fa8\x27,                          // base 18\n  \x27-ba643dci0ffeehi\x27,                           // base 19\n  \x27-5cbfjia3fh26ja8\x27,                           // base 20\n  \x27-2heiciiie82dh98\x27,                           // base 21\n  \x27-1adaibb21dckfa8\x27,                           // base 22\n  \x27-i6k448cf4192c3\x27,                            // base 23\n  \x27-acd772jnc9l0l8\x27,                            // base 24\n  \x27-64ie1focnn5g78\x27,                            // base 25\n  \x27-3igoecjbmca688\x27,                            // base 26\n  \x27-27c48l5b37oaoq\x27,                            // base 27\n  \x27-1bk39f3ah3dmq8\x27,                            // base 28\n  \x27-q1se8f0m04isc\x27,                             // base 29\n  \x27-hajppbc1fc208\x27,                             // base 30\n  \x27-bm03i95hia438\x27,                             // base 31\n  \x27-8000000000000\x27,                             // base 32\n  \x27-5hg4ck9jd4u38\x27,                             // base 33\n  \x27-3tdtk1v8j6tpq\x27,                             // base 34\n  \x27-2pijmikexrxp8\x27,                             // base 35\n  \x27-1y2p0ij32e8e8\x27                              // base 36\n];\n\n\n/**\n * Returns a Long representing the given (32-bit) integer value.\n * @param {number} value The 32-bit integer in question.\n * @return {!goog.math.Long} The corresponding Long value.\n */\ngoog.math.Long.fromInt \x3d function(value) {\n  var intValue \x3d value | 0;\n  goog.asserts.assert(value \x3d\x3d\x3d intValue, \x27value should be a 32-bit integer\x27);\n\n  if (-128 \x3c\x3d intValue \x26\x26 intValue \x3c 128) {\n    return goog.math.Long.getCachedIntValue_(intValue);\n  } else {\n    return new goog.math.Long(intValue, intValue \x3c 0 ? -1 : 0);\n  }\n};\n\n\n/**\n * Returns a Long representing the given value.\n * NaN will be returned as zero. Infinity is converted to max value and\n * -Infinity to min value.\n * @param {number} value The number in question.\n * @return {!goog.math.Long} The corresponding Long value.\n */\ngoog.math.Long.fromNumber \x3d function(value) {\n  if (isNaN(value)) {\n    return goog.math.Long.getZero();\n  } else if (value \x3c\x3d -goog.math.Long.TWO_PWR_63_DBL_) {\n    return goog.math.Long.getMinValue();\n  } else if (value + 1 \x3e\x3d goog.math.Long.TWO_PWR_63_DBL_) {\n    return goog.math.Long.getMaxValue();\n  } else if (value \x3c 0) {\n    return goog.math.Long.fromNumber(-value).negate();\n  } else {\n    return new goog.math.Long(\n        (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,\n        (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);\n  }\n};\n\n\n/**\n * Returns a Long representing the 64-bit integer that comes by concatenating\n * the given high and low bits.  Each is assumed to use 32 bits.\n * @param {number} lowBits The low 32-bits.\n * @param {number} highBits The high 32-bits.\n * @return {!goog.math.Long} The corresponding Long value.\n */\ngoog.math.Long.fromBits \x3d function(lowBits, highBits) {\n  return new goog.math.Long(lowBits, highBits);\n};\n\n\n/**\n * Returns a Long representation of the given string, written using the given\n * radix.\n * @param {string} str The textual representation of the Long.\n * @param {number\x3d} opt_radix The radix in which the text is written.\n * @return {!goog.math.Long} The corresponding Long value.\n */\ngoog.math.Long.fromString \x3d function(str, opt_radix) {\n  if (str.length \x3d\x3d 0) {\n    throw new Error(\x27number format error: empty string\x27);\n  }\n\n  var radix \x3d opt_radix || 10;\n  if (radix \x3c 2 || 36 \x3c radix) {\n    throw new Error(\x27radix out of range: \x27 + radix);\n  }\n\n  if (str.charAt(0) \x3d\x3d \x27-\x27) {\n    return goog.math.Long.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf(\x27-\x27) \x3e\x3d 0) {\n    throw new Error(\x27number format error: interior \x22-\x22 character: \x27 + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower \x3d goog.math.Long.fromNumber(Math.pow(radix, 8));\n\n  var result \x3d goog.math.Long.getZero();\n  for (var i \x3d 0; i \x3c str.length; i +\x3d 8) {\n    var size \x3d Math.min(8, str.length - i);\n    var value \x3d parseInt(str.substring(i, i + size), radix);\n    if (size \x3c 8) {\n      var power \x3d goog.math.Long.fromNumber(Math.pow(radix, size));\n      result \x3d result.multiply(power).add(goog.math.Long.fromNumber(value));\n    } else {\n      result \x3d result.multiply(radixToPower);\n      result \x3d result.add(goog.math.Long.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n/**\n * Returns the boolean value of whether the input string is within a Long\x27s\n * range. Assumes an input string containing only numeric characters with an\n * optional preceding \x27-\x27.\n * @param {string} str The textual representation of the Long.\n * @param {number\x3d} opt_radix The radix in which the text is written.\n * @return {boolean} Whether the string is within the range of a Long.\n */\ngoog.math.Long.isStringInRange \x3d function(str, opt_radix) {\n  var radix \x3d opt_radix || 10;\n  if (radix \x3c 2 || 36 \x3c radix) {\n    throw new Error(\x27radix out of range: \x27 + radix);\n  }\n\n  var extremeValue \x3d (str.charAt(0) \x3d\x3d \x27-\x27) ?\n      goog.math.Long.MIN_VALUE_FOR_RADIX_[radix] :\n      goog.math.Long.MAX_VALUE_FOR_RADIX_[radix];\n\n  if (str.length \x3c extremeValue.length) {\n    return true;\n  } else if (str.length \x3d\x3d extremeValue.length \x26\x26 str \x3c\x3d extremeValue) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_16_DBL_ \x3d 1 \x3c\x3c 16;\n\n\n/**\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_32_DBL_ \x3d\n    goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_64_DBL_ \x3d\n    goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_63_DBL_ \x3d goog.math.Long.TWO_PWR_64_DBL_ / 2;\n\n\n/**\n * @return {!goog.math.Long}\n * @public\n */\ngoog.math.Long.getZero \x3d function() {\n  return goog.math.Long.getCachedIntValue_(0);\n};\n\n\n/**\n * @return {!goog.math.Long}\n * @public\n */\ngoog.math.Long.getOne \x3d function() {\n  return goog.math.Long.getCachedIntValue_(1);\n};\n\n\n/**\n * @return {!goog.math.Long}\n * @public\n */\ngoog.math.Long.getNegOne \x3d function() {\n  return goog.math.Long.getCachedIntValue_(-1);\n};\n\n\n/**\n * @return {!goog.math.Long}\n * @public\n */\ngoog.math.Long.getMaxValue \x3d function() {\n  return goog.reflect.cache(\n      goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.MAX_VALUE,\n      function() {\n        return goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);\n      });\n};\n\n\n/**\n * @return {!goog.math.Long}\n * @public\n */\ngoog.math.Long.getMinValue \x3d function() {\n  return goog.reflect.cache(\n      goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.MIN_VALUE,\n      function() { return goog.math.Long.fromBits(0, 0x80000000 | 0); });\n};\n\n\n/**\n * @return {!goog.math.Long}\n * @public\n */\ngoog.math.Long.getTwoPwr24 \x3d function() {\n  return goog.reflect.cache(\n      goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.TWO_PWR_24,\n      function() { return goog.math.Long.fromInt(1 \x3c\x3c 24); });\n};\n\n\n/** @return {number} The value, assuming it is a 32-bit integer. */\ngoog.math.Long.prototype.toInt \x3d function() {\n  return this.low_;\n};\n\n\n/** @return {number} The closest floating-point representation to this value. */\ngoog.math.Long.prototype.toNumber \x3d function() {\n  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +\n      this.getLowBitsUnsigned();\n};\n\n\n/**\n * @param {number\x3d} opt_radix The radix in which the text should be written.\n * @return {string} The textual representation of this value.\n * @override\n */\ngoog.math.Long.prototype.toString \x3d function(opt_radix) {\n  var radix \x3d opt_radix || 10;\n  if (radix \x3c 2 || 36 \x3c radix) {\n    throw new Error(\x27radix out of range: \x27 + radix);\n  }\n\n  if (this.isZero()) {\n    return \x270\x27;\n  }\n\n  if (this.isNegative()) {\n    if (this.equals(goog.math.Long.getMinValue())) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong \x3d goog.math.Long.fromNumber(radix);\n      var div \x3d this.div(radixLong);\n      var rem \x3d div.multiply(radixLong).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return \x27-\x27 + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower \x3d goog.math.Long.fromNumber(Math.pow(radix, 6));\n\n  var rem \x3d this;\n  var result \x3d \x27\x27;\n  while (true) {\n    var remDiv \x3d rem.div(radixToPower);\n    // The right shifting fixes negative values in the case when\n    // intval \x3e\x3d 2^31; for more details see\n    // https://github.com/google/closure-library/pull/498\n    var intval \x3d rem.subtract(remDiv.multiply(radixToPower)).toInt() \x3e\x3e\x3e 0;\n    var digits \x3d intval.toString(radix);\n\n    rem \x3d remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length \x3c 6) {\n        digits \x3d \x270\x27 + digits;\n      }\n      result \x3d \x27\x27 + digits + result;\n    }\n  }\n};\n\n\n/** @return {number} The high 32-bits as a signed value. */\ngoog.math.Long.prototype.getHighBits \x3d function() {\n  return this.high_;\n};\n\n\n/** @return {number} The low 32-bits as a signed value. */\ngoog.math.Long.prototype.getLowBits \x3d function() {\n  return this.low_;\n};\n\n\n/** @return {number} The low 32-bits as an unsigned value. */\ngoog.math.Long.prototype.getLowBitsUnsigned \x3d function() {\n  return (this.low_ \x3e\x3d 0) ? this.low_ :\n                            goog.math.Long.TWO_PWR_32_DBL_ + this.low_;\n};\n\n\n/**\n * @return {number} Returns the number of bits needed to represent the absolute\n *     value of this Long.\n */\ngoog.math.Long.prototype.getNumBitsAbs \x3d function() {\n  if (this.isNegative()) {\n    if (this.equals(goog.math.Long.getMinValue())) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val \x3d this.high_ !\x3d 0 ? this.high_ : this.low_;\n    for (var bit \x3d 31; bit \x3e 0; bit--) {\n      if ((val \x26 (1 \x3c\x3c bit)) !\x3d 0) {\n        break;\n      }\n    }\n    return this.high_ !\x3d 0 ? bit + 33 : bit + 1;\n  }\n};\n\n\n/** @return {boolean} Whether this value is zero. */\ngoog.math.Long.prototype.isZero \x3d function() {\n  return this.high_ \x3d\x3d 0 \x26\x26 this.low_ \x3d\x3d 0;\n};\n\n\n/** @return {boolean} Whether this value is negative. */\ngoog.math.Long.prototype.isNegative \x3d function() {\n  return this.high_ \x3c 0;\n};\n\n\n/** @return {boolean} Whether this value is odd. */\ngoog.math.Long.prototype.isOdd \x3d function() {\n  return (this.low_ \x26 1) \x3d\x3d 1;\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long equals the other.\n */\ngoog.math.Long.prototype.equals \x3d function(other) {\n  return (this.high_ \x3d\x3d other.high_) \x26\x26 (this.low_ \x3d\x3d other.low_);\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long does not equal the other.\n */\ngoog.math.Long.prototype.notEquals \x3d function(other) {\n  return (this.high_ !\x3d other.high_) || (this.low_ !\x3d other.low_);\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than the other.\n */\ngoog.math.Long.prototype.lessThan \x3d function(other) {\n  return this.compare(other) \x3c 0;\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than or equal to the other.\n */\ngoog.math.Long.prototype.lessThanOrEqual \x3d function(other) {\n  return this.compare(other) \x3c\x3d 0;\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than the other.\n */\ngoog.math.Long.prototype.greaterThan \x3d function(other) {\n  return this.compare(other) \x3e 0;\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than or equal to the other.\n */\ngoog.math.Long.prototype.greaterThanOrEqual \x3d function(other) {\n  return this.compare(other) \x3e\x3d 0;\n};\n\n\n/**\n * Compares this Long with the given one.\n * @param {goog.math.Long} other Long to compare against.\n * @return {number} 0 if they are the same, 1 if the this is greater, and -1\n *     if the given one is greater.\n */\ngoog.math.Long.prototype.compare \x3d function(other) {\n  if (this.equals(other)) {\n    return 0;\n  }\n\n  var thisNeg \x3d this.isNegative();\n  var otherNeg \x3d other.isNegative();\n  if (thisNeg \x26\x26 !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg \x26\x26 otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n\n/** @return {!goog.math.Long} The negation of this value. */\ngoog.math.Long.prototype.negate \x3d function() {\n  if (this.equals(goog.math.Long.getMinValue())) {\n    return goog.math.Long.getMinValue();\n  } else {\n    return this.not().add(goog.math.Long.getOne());\n  }\n};\n\n\n/**\n * Returns the sum of this and the given Long.\n * @param {goog.math.Long} other Long to add to this one.\n * @return {!goog.math.Long} The sum of this and the given Long.\n */\ngoog.math.Long.prototype.add \x3d function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 \x3d this.high_ \x3e\x3e\x3e 16;\n  var a32 \x3d this.high_ \x26 0xFFFF;\n  var a16 \x3d this.low_ \x3e\x3e\x3e 16;\n  var a00 \x3d this.low_ \x26 0xFFFF;\n\n  var b48 \x3d other.high_ \x3e\x3e\x3e 16;\n  var b32 \x3d other.high_ \x26 0xFFFF;\n  var b16 \x3d other.low_ \x3e\x3e\x3e 16;\n  var b00 \x3d other.low_ \x26 0xFFFF;\n\n  var c48 \x3d 0, c32 \x3d 0, c16 \x3d 0, c00 \x3d 0;\n  c00 +\x3d a00 + b00;\n  c16 +\x3d c00 \x3e\x3e\x3e 16;\n  c00 \x26\x3d 0xFFFF;\n  c16 +\x3d a16 + b16;\n  c32 +\x3d c16 \x3e\x3e\x3e 16;\n  c16 \x26\x3d 0xFFFF;\n  c32 +\x3d a32 + b32;\n  c48 +\x3d c32 \x3e\x3e\x3e 16;\n  c32 \x26\x3d 0xFFFF;\n  c48 +\x3d a48 + b48;\n  c48 \x26\x3d 0xFFFF;\n  return goog.math.Long.fromBits((c16 \x3c\x3c 16) | c00, (c48 \x3c\x3c 16) | c32);\n};\n\n\n/**\n * Returns the difference of this and the given Long.\n * @param {goog.math.Long} other Long to subtract from this.\n * @return {!goog.math.Long} The difference of this and the given Long.\n */\ngoog.math.Long.prototype.subtract \x3d function(other) {\n  return this.add(other.negate());\n};\n\n\n/**\n * Returns the product of this and the given long.\n * @param {goog.math.Long} other Long to multiply with this.\n * @return {!goog.math.Long} The product of this and the other.\n */\ngoog.math.Long.prototype.multiply \x3d function(other) {\n  if (this.isZero()) {\n    return goog.math.Long.getZero();\n  } else if (other.isZero()) {\n    return goog.math.Long.getZero();\n  }\n\n  if (this.equals(goog.math.Long.getMinValue())) {\n    return other.isOdd() ? goog.math.Long.getMinValue() :\n                           goog.math.Long.getZero();\n  } else if (other.equals(goog.math.Long.getMinValue())) {\n    return this.isOdd() ? goog.math.Long.getMinValue() :\n                          goog.math.Long.getZero();\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate().multiply(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both longs are small, use float multiplication\n  if (this.lessThan(goog.math.Long.getTwoPwr24()) \x26\x26\n      other.lessThan(goog.math.Long.getTwoPwr24())) {\n    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 \x3d this.high_ \x3e\x3e\x3e 16;\n  var a32 \x3d this.high_ \x26 0xFFFF;\n  var a16 \x3d this.low_ \x3e\x3e\x3e 16;\n  var a00 \x3d this.low_ \x26 0xFFFF;\n\n  var b48 \x3d other.high_ \x3e\x3e\x3e 16;\n  var b32 \x3d other.high_ \x26 0xFFFF;\n  var b16 \x3d other.low_ \x3e\x3e\x3e 16;\n  var b00 \x3d other.low_ \x26 0xFFFF;\n\n  var c48 \x3d 0, c32 \x3d 0, c16 \x3d 0, c00 \x3d 0;\n  c00 +\x3d a00 * b00;\n  c16 +\x3d c00 \x3e\x3e\x3e 16;\n  c00 \x26\x3d 0xFFFF;\n  c16 +\x3d a16 * b00;\n  c32 +\x3d c16 \x3e\x3e\x3e 16;\n  c16 \x26\x3d 0xFFFF;\n  c16 +\x3d a00 * b16;\n  c32 +\x3d c16 \x3e\x3e\x3e 16;\n  c16 \x26\x3d 0xFFFF;\n  c32 +\x3d a32 * b00;\n  c48 +\x3d c32 \x3e\x3e\x3e 16;\n  c32 \x26\x3d 0xFFFF;\n  c32 +\x3d a16 * b16;\n  c48 +\x3d c32 \x3e\x3e\x3e 16;\n  c32 \x26\x3d 0xFFFF;\n  c32 +\x3d a00 * b32;\n  c48 +\x3d c32 \x3e\x3e\x3e 16;\n  c32 \x26\x3d 0xFFFF;\n  c48 +\x3d a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 \x26\x3d 0xFFFF;\n  return goog.math.Long.fromBits((c16 \x3c\x3c 16) | c00, (c48 \x3c\x3c 16) | c32);\n};\n\n\n/**\n * Returns this Long divided by the given one.\n * @param {goog.math.Long} other Long by which to divide.\n * @return {!goog.math.Long} This Long divided by the given one.\n */\ngoog.math.Long.prototype.div \x3d function(other) {\n  if (other.isZero()) {\n    throw new Error(\x27division by zero\x27);\n  } else if (this.isZero()) {\n    return goog.math.Long.getZero();\n  }\n\n  if (this.equals(goog.math.Long.getMinValue())) {\n    if (other.equals(goog.math.Long.getOne()) ||\n        other.equals(goog.math.Long.getNegOne())) {\n      return goog.math.Long.getMinValue();  // recall -MIN_VALUE \x3d\x3d MIN_VALUE\n    } else if (other.equals(goog.math.Long.getMinValue())) {\n      return goog.math.Long.getOne();\n    } else {\n      // At this point, we have |other| \x3e\x3d 2, so |this/other| \x3c |MIN_VALUE|.\n      var halfThis \x3d this.shiftRight(1);\n      var approx \x3d halfThis.div(other).shiftLeft(1);\n      if (approx.equals(goog.math.Long.getZero())) {\n        return other.isNegative() ? goog.math.Long.getOne() :\n                                    goog.math.Long.getNegOne();\n      } else {\n        var rem \x3d this.subtract(other.multiply(approx));\n        var result \x3d approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equals(goog.math.Long.getMinValue())) {\n    return goog.math.Long.getZero();\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate().div(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res \x3d goog.math.Long.getZero();\n  var rem \x3d this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    var approx \x3d Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 \x3d Math.ceil(Math.log(approx) / Math.LN2);\n    var delta \x3d (log2 \x3c\x3d 48) ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes \x3d goog.math.Long.fromNumber(approx);\n    var approxRem \x3d approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -\x3d delta;\n      approxRes \x3d goog.math.Long.fromNumber(approx);\n      approxRem \x3d approxRes.multiply(other);\n    }\n\n    // We know the answer can\x27t be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes \x3d goog.math.Long.getOne();\n    }\n\n    res \x3d res.add(approxRes);\n    rem \x3d rem.subtract(approxRem);\n  }\n  return res;\n};\n\n\n/**\n * Returns this Long modulo the given one.\n * @param {goog.math.Long} other Long by which to mod.\n * @return {!goog.math.Long} This Long modulo the given one.\n */\ngoog.math.Long.prototype.modulo \x3d function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n\n/** @return {!goog.math.Long} The bitwise-NOT of this value. */\ngoog.math.Long.prototype.not \x3d function() {\n  return goog.math.Long.fromBits(~this.low_, ~this.high_);\n};\n\n\n/**\n * Returns the bitwise-AND of this Long and the given one.\n * @param {goog.math.Long} other The Long with which to AND.\n * @return {!goog.math.Long} The bitwise-AND of this and the other.\n */\ngoog.math.Long.prototype.and \x3d function(other) {\n  return goog.math.Long.fromBits(\n      this.low_ \x26 other.low_, this.high_ \x26 other.high_);\n};\n\n\n/**\n * Returns the bitwise-OR of this Long and the given one.\n * @param {goog.math.Long} other The Long with which to OR.\n * @return {!goog.math.Long} The bitwise-OR of this and the other.\n */\ngoog.math.Long.prototype.or \x3d function(other) {\n  return goog.math.Long.fromBits(\n      this.low_ | other.low_, this.high_ | other.high_);\n};\n\n\n/**\n * Returns the bitwise-XOR of this Long and the given one.\n * @param {goog.math.Long} other The Long with which to XOR.\n * @return {!goog.math.Long} The bitwise-XOR of this and the other.\n */\ngoog.math.Long.prototype.xor \x3d function(other) {\n  return goog.math.Long.fromBits(\n      this.low_ ^ other.low_, this.high_ ^ other.high_);\n};\n\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Long} This shifted to the left by the given amount.\n */\ngoog.math.Long.prototype.shiftLeft \x3d function(numBits) {\n  numBits \x26\x3d 63;\n  if (numBits \x3d\x3d 0) {\n    return this;\n  } else {\n    var low \x3d this.low_;\n    if (numBits \x3c 32) {\n      var high \x3d this.high_;\n      return goog.math.Long.fromBits(\n          low \x3c\x3c numBits, (high \x3c\x3c numBits) | (low \x3e\x3e\x3e (32 - numBits)));\n    } else {\n      return goog.math.Long.fromBits(0, low \x3c\x3c (numBits - 32));\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount.\n * The new leading bits match the current sign bit.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Long} This shifted to the right by the given amount.\n */\ngoog.math.Long.prototype.shiftRight \x3d function(numBits) {\n  numBits \x26\x3d 63;\n  if (numBits \x3d\x3d 0) {\n    return this;\n  } else {\n    var high \x3d this.high_;\n    if (numBits \x3c 32) {\n      var low \x3d this.low_;\n      return goog.math.Long.fromBits(\n          (low \x3e\x3e\x3e numBits) | (high \x3c\x3c (32 - numBits)), high \x3e\x3e numBits);\n    } else {\n      return goog.math.Long.fromBits(\n          high \x3e\x3e (numBits - 32), high \x3e\x3d 0 ? 0 : -1);\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount, with\n * zeros placed into the new leading bits.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Long} This shifted to the right by the given amount, with\n *     zeros placed into the new leading bits.\n */\ngoog.math.Long.prototype.shiftRightUnsigned \x3d function(numBits) {\n  numBits \x26\x3d 63;\n  if (numBits \x3d\x3d 0) {\n    return this;\n  } else {\n    var high \x3d this.high_;\n    if (numBits \x3c 32) {\n      var low \x3d this.low_;\n      return goog.math.Long.fromBits(\n          (low \x3e\x3e\x3e numBits) | (high \x3c\x3c (32 - numBits)), high \x3e\x3e\x3e numBits);\n    } else if (numBits \x3d\x3d 32) {\n      return goog.math.Long.fromBits(high, 0);\n    } else {\n      return goog.math.Long.fromBits(high \x3e\x3e\x3e (numBits - 32), 0);\n    }\n  }\n};\n\n\n/**\n * @enum {number} Ids of commonly requested Long instances.\n * @private\n */\ngoog.math.Long.ValueCacheId_ \x3d {\n  MAX_VALUE: 1,\n  MIN_VALUE: 2,\n  TWO_PWR_24: 6\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/math/long.js\n");

$googDebugFname=undefined;

/** @suppress {missingRequire} */ /** @suppress {missingRequire} */
goog.module.ModuleManager.getInstance().setLoaded('syfm');
/** @suppress {missingRequire} */
goog.module.ModuleManager.getInstance().afterLoadModuleCode('syfm');

}catch(e){_DumpException(e)}
/* _Module_:syfn */
try{
/** @suppress {missingRequire} */ goog.module.ModuleManager.getInstance().beforeLoadModuleCode('syfn');
var $googDebugFname="javascript/closure/crypt/sha2_64bit.js";
eval("// Copyright 2014 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Base class for the 64-bit SHA-2 cryptographic hashes.\n *\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * This code borrows heavily from the 32-bit SHA2 implementation written by\n * Yue Zhang (zysxqn@).\n *\n * @author fy@google.com (Frank Yellin)\n */\n\ngoog.provide(\x27goog.crypt.Sha2_64bit\x27);\n\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.crypt.Hash\x27);\ngoog.require(\x27goog.math.Long\x27);\n\n\n\n/**\n * Constructs a SHA-2 64-bit cryptographic hash.\n * This class should not be used. Rather, one should use one of its\n * subclasses.\n * @constructor\n * @param {number} numHashBlocks The size of the output in 16-byte blocks\n * @param {!Array\x3cnumber\x3e} initHashBlocks The hash-specific initialization\n *     vector, as a sequence of sixteen 32-bit numbers.\n * @extends {goog.crypt.Hash}\n * @struct\n */\ngoog.crypt.Sha2_64bit \x3d function(numHashBlocks, initHashBlocks) {\n  goog.crypt.Sha2_64bit.base(this, \x27constructor\x27);\n\n  /**\n   * The number of bytes that are digested in each pass of this hasher.\n   * @const {number}\n   */\n  this.blockSize \x3d goog.crypt.Sha2_64bit.BLOCK_SIZE_;\n\n  /**\n   * A chunk holding the currently processed message bytes. Once the chunk has\n   * `this.blocksize` bytes, we feed it into [@code computeChunk_}.\n   * @private {!Uint8Array|!Array\x3cnumber\x3e}\n   */\n  this.chunk_ \x3d goog.global[\x27Uint8Array\x27] ? new Uint8Array(this.blockSize) :\n                                            new Array(this.blockSize);\n\n  /**\n   * Current number of bytes in `this.chunk_`.\n   * @private {number}\n   */\n  this.chunkBytes_ \x3d 0;\n\n  /**\n   * Total number of bytes in currently processed message.\n   * @private {number}\n   */\n  this.total_ \x3d 0;\n\n  /**\n   * Holds the previous values of accumulated hash a-h in the\n   * `computeChunk_` function.\n   * @private {!Array\x3c!goog.math.Long\x3e}\n   */\n  this.hash_ \x3d [];\n\n  /**\n   * The number of blocks of output produced by this hash function, where each\n   * block is eight bytes long.\n   * @private {number}\n   */\n  this.numHashBlocks_ \x3d numHashBlocks;\n\n  /**\n   * Temporary array used in chunk computation.  Allocate here as a\n   * member rather than as a local within computeChunk_() as a\n   * performance optimization to reduce the number of allocations and\n   * reduce garbage collection.\n   * @type {!Array\x3c!goog.math.Long\x3e}\n   * @private\n   */\n  this.w_ \x3d [];\n\n  /**\n   * The value to which `this.hash_` should be reset when this\n   * Hasher is reset.\n   * @private @const {!Array\x3c!goog.math.Long\x3e}\n   */\n  this.initHashBlocks_ \x3d goog.crypt.Sha2_64bit.toLongArray_(initHashBlocks);\n\n  /**\n   * If true, we have taken the digest from this hasher, but we have not\n   * yet reset it.\n   *\n   * @private {boolean}\n   */\n  this.needsReset_ \x3d false;\n\n  this.reset();\n};\ngoog.inherits(goog.crypt.Sha2_64bit, goog.crypt.Hash);\n\n\n/**\n * The number of bytes that are digested in each pass of this hasher.\n * @private @const {number}\n */\ngoog.crypt.Sha2_64bit.BLOCK_SIZE_ \x3d 1024 / 8;\n\n\n/**\n * Contains data needed to pad messages less than `blocksize` bytes.\n * @private {!Array\x3cnumber\x3e}\n */\ngoog.crypt.Sha2_64bit.PADDING_ \x3d goog.array.concat(\n    [0x80], goog.array.repeat(0, goog.crypt.Sha2_64bit.BLOCK_SIZE_ - 1));\n\n\n/**\n * Resets this hash function.\n * @override\n */\ngoog.crypt.Sha2_64bit.prototype.reset \x3d function() {\n  this.chunkBytes_ \x3d 0;\n  this.total_ \x3d 0;\n  this.hash_ \x3d goog.array.clone(this.initHashBlocks_);\n  this.needsReset_ \x3d false;\n};\n\n\n/** @override */\ngoog.crypt.Sha2_64bit.prototype.update \x3d function(message, opt_length) {\n  var length \x3d goog.isDef(opt_length) ? opt_length : message.length;\n\n  // Make sure this hasher is usable.\n  if (this.needsReset_) {\n    throw new Error(\x27this hasher needs to be reset\x27);\n  }\n  // Process the message from left to right up to |length| bytes.\n  // When we get a 512-bit chunk, compute the hash of it and reset\n  // this.chunk_. The message might not be multiple of 512 bits so we\n  // might end up with a chunk that is less than 512 bits. We store\n  // such partial chunk in chunk_ and it will be filled up later\n  // in digest().\n  var chunkBytes \x3d this.chunkBytes_;\n\n  // The input message could be either byte array or string.\n  if (goog.isString(message)) {\n    for (var i \x3d 0; i \x3c length; i++) {\n      var b \x3d message.charCodeAt(i);\n      if (b \x3e 255) {\n        throw new Error(\x27Characters must be in range [0,255]\x27);\n      }\n      this.chunk_[chunkBytes++] \x3d b;\n      if (chunkBytes \x3d\x3d this.blockSize) {\n        this.computeChunk_();\n        chunkBytes \x3d 0;\n      }\n    }\n  } else if (goog.isArrayLike(message)) {\n    for (var i \x3d 0; i \x3c length; i++) {\n      var b \x3d message[i];\n      // Hack:  b|0 coerces b to an integer, so the last part confirms that\n      // b has no fractional part.\n      if (!goog.isNumber(b) || b \x3c 0 || b \x3e 255 || b !\x3d (b | 0)) {\n        throw new Error(\x27message must be a byte array\x27);\n      }\n      this.chunk_[chunkBytes++] \x3d b;\n      if (chunkBytes \x3d\x3d this.blockSize) {\n        this.computeChunk_();\n        chunkBytes \x3d 0;\n      }\n    }\n  } else {\n    throw new Error(\x27message must be string or array\x27);\n  }\n\n  // Record the current bytes in chunk to support partial update.\n  this.chunkBytes_ \x3d chunkBytes;\n\n  // Record total message bytes we have processed so far.\n  this.total_ +\x3d length;\n};\n\n\n/** @override */\ngoog.crypt.Sha2_64bit.prototype.digest \x3d function() {\n  if (this.needsReset_) {\n    throw new Error(\x27this hasher needs to be reset\x27);\n  }\n  var totalBits \x3d this.total_ * 8;\n\n  // Append pad 0x80 0x00* until this.chunkBytes_ \x3d\x3d 112\n  if (this.chunkBytes_ \x3c 112) {\n    this.update(goog.crypt.Sha2_64bit.PADDING_, 112 - this.chunkBytes_);\n  } else {\n    // the rest of this block, plus 112 bytes of next block\n    this.update(\n        goog.crypt.Sha2_64bit.PADDING_,\n        this.blockSize - this.chunkBytes_ + 112);\n  }\n\n  // Append # bits in the 64-bit big-endian format.\n  for (var i \x3d 127; i \x3e\x3d 112; i--) {\n    this.chunk_[i] \x3d totalBits \x26 255;\n    totalBits /\x3d 256;  // Don\x27t use bit-shifting here!\n  }\n  this.computeChunk_();\n\n  // Finally, output the result digest.\n  var n \x3d 0;\n  var digest \x3d new Array(8 * this.numHashBlocks_);\n  for (var i \x3d 0; i \x3c this.numHashBlocks_; i++) {\n    var block \x3d this.hash_[i];\n    var high \x3d block.getHighBits();\n    var low \x3d block.getLowBits();\n    for (var j \x3d 24; j \x3e\x3d 0; j -\x3d 8) {\n      digest[n++] \x3d ((high \x3e\x3e j) \x26 255);\n    }\n    for (var j \x3d 24; j \x3e\x3d 0; j -\x3d 8) {\n      digest[n++] \x3d ((low \x3e\x3e j) \x26 255);\n    }\n  }\n\n  // The next call to this hasher must be a reset\n  this.needsReset_ \x3d true;\n  return digest;\n};\n\n\n/**\n * Updates this hash by processing the 1024-bit message chunk in this.chunk_.\n * @private\n */\ngoog.crypt.Sha2_64bit.prototype.computeChunk_ \x3d function() {\n  var chunk \x3d this.chunk_;\n  var K_ \x3d goog.crypt.Sha2_64bit.K_;\n\n  // Divide the chunk into 16 64-bit-words.\n  var w \x3d this.w_;\n  for (var i \x3d 0; i \x3c 16; i++) {\n    var offset \x3d i * 8;\n    w[i] \x3d new goog.math.Long(\n        (chunk[offset + 4] \x3c\x3c 24) | (chunk[offset + 5] \x3c\x3c 16) |\n            (chunk[offset + 6] \x3c\x3c 8) | (chunk[offset + 7]),\n        (chunk[offset] \x3c\x3c 24) | (chunk[offset + 1] \x3c\x3c 16) |\n            (chunk[offset + 2] \x3c\x3c 8) | (chunk[offset + 3]));\n  }\n\n  // Extend the w[] array to be the number of rounds.\n  for (var i \x3d 16; i \x3c 80; i++) {\n    var s0 \x3d this.sigma0_(w[i - 15]);\n    var s1 \x3d this.sigma1_(w[i - 2]);\n    w[i] \x3d this.sum_(w[i - 16], w[i - 7], s0, s1);\n  }\n\n  var a \x3d this.hash_[0];\n  var b \x3d this.hash_[1];\n  var c \x3d this.hash_[2];\n  var d \x3d this.hash_[3];\n  var e \x3d this.hash_[4];\n  var f \x3d this.hash_[5];\n  var g \x3d this.hash_[6];\n  var h \x3d this.hash_[7];\n  for (var i \x3d 0; i \x3c 80; i++) {\n    var S0 \x3d this.Sigma0_(a);\n    var maj \x3d this.majority_(a, b, c);\n    var t2 \x3d S0.add(maj);\n    var S1 \x3d this.Sigma1_(e);\n    var ch \x3d this.choose_(e, f, g);\n    var t1 \x3d this.sum_(h, S1, ch, K_[i], w[i]);\n    h \x3d g;\n    g \x3d f;\n    f \x3d e;\n    e \x3d d.add(t1);\n    d \x3d c;\n    c \x3d b;\n    b \x3d a;\n    a \x3d t1.add(t2);\n  }\n\n  this.hash_[0] \x3d this.hash_[0].add(a);\n  this.hash_[1] \x3d this.hash_[1].add(b);\n  this.hash_[2] \x3d this.hash_[2].add(c);\n  this.hash_[3] \x3d this.hash_[3].add(d);\n  this.hash_[4] \x3d this.hash_[4].add(e);\n  this.hash_[5] \x3d this.hash_[5].add(f);\n  this.hash_[6] \x3d this.hash_[6].add(g);\n  this.hash_[7] \x3d this.hash_[7].add(h);\n};\n\n\n/**\n * Calculates the SHA2 64-bit sigma0 function.\n * rotateRight(value, 1) ^ rotateRight(value, 8) ^ (value \x3e\x3e\x3e 7)\n *\n * @private\n * @param {!goog.math.Long} value\n * @return {!goog.math.Long}\n */\ngoog.crypt.Sha2_64bit.prototype.sigma0_ \x3d function(value) {\n  var valueLow \x3d value.getLowBits();\n  var valueHigh \x3d value.getHighBits();\n  // Implementation note: We purposely do not use the shift operations defined\n  // in goog.math.Long.  Inlining the code for specific values of shifting and\n  // not generating the intermediate results doubles the speed of this code.\n  var low \x3d (valueLow \x3e\x3e\x3e 1) ^ (valueHigh \x3c\x3c 31) ^ (valueLow \x3e\x3e\x3e 8) ^\n      (valueHigh \x3c\x3c 24) ^ (valueLow \x3e\x3e\x3e 7) ^ (valueHigh \x3c\x3c 25);\n  var high \x3d (valueHigh \x3e\x3e\x3e 1) ^ (valueLow \x3c\x3c 31) ^ (valueHigh \x3e\x3e\x3e 8) ^\n      (valueLow \x3c\x3c 24) ^ (valueHigh \x3e\x3e\x3e 7);\n  return new goog.math.Long(low, high);\n};\n\n\n/**\n * Calculates the SHA2 64-bit sigma1 function.\n * rotateRight(value, 19) ^ rotateRight(value, 61) ^ (value \x3e\x3e\x3e 6)\n *\n * @private\n * @param {!goog.math.Long} value\n * @return {!goog.math.Long}\n */\ngoog.crypt.Sha2_64bit.prototype.sigma1_ \x3d function(value) {\n  var valueLow \x3d value.getLowBits();\n  var valueHigh \x3d value.getHighBits();\n  // Implementation note:  See _sigma0() above\n  var low \x3d (valueLow \x3e\x3e\x3e 19) ^ (valueHigh \x3c\x3c 13) ^ (valueHigh \x3e\x3e\x3e 29) ^\n      (valueLow \x3c\x3c 3) ^ (valueLow \x3e\x3e\x3e 6) ^ (valueHigh \x3c\x3c 26);\n  var high \x3d (valueHigh \x3e\x3e\x3e 19) ^ (valueLow \x3c\x3c 13) ^ (valueLow \x3e\x3e\x3e 29) ^\n      (valueHigh \x3c\x3c 3) ^ (valueHigh \x3e\x3e\x3e 6);\n  return new goog.math.Long(low, high);\n};\n\n\n/**\n * Calculates the SHA2 64-bit Sigma0 function.\n * rotateRight(value, 28) ^ rotateRight(value, 34) ^ rotateRight(value, 39)\n *\n * @private\n * @param {!goog.math.Long} value\n * @return {!goog.math.Long}\n */\ngoog.crypt.Sha2_64bit.prototype.Sigma0_ \x3d function(value) {\n  var valueLow \x3d value.getLowBits();\n  var valueHigh \x3d value.getHighBits();\n  // Implementation note:  See _sigma0() above\n  var low \x3d (valueLow \x3e\x3e\x3e 28) ^ (valueHigh \x3c\x3c 4) ^ (valueHigh \x3e\x3e\x3e 2) ^\n      (valueLow \x3c\x3c 30) ^ (valueHigh \x3e\x3e\x3e 7) ^ (valueLow \x3c\x3c 25);\n  var high \x3d (valueHigh \x3e\x3e\x3e 28) ^ (valueLow \x3c\x3c 4) ^ (valueLow \x3e\x3e\x3e 2) ^\n      (valueHigh \x3c\x3c 30) ^ (valueLow \x3e\x3e\x3e 7) ^ (valueHigh \x3c\x3c 25);\n  return new goog.math.Long(low, high);\n};\n\n\n/**\n * Calculates the SHA2 64-bit Sigma1 function.\n * rotateRight(value, 14) ^ rotateRight(value, 18) ^ rotateRight(value, 41)\n *\n * @private\n * @param {!goog.math.Long} value\n * @return {!goog.math.Long}\n */\ngoog.crypt.Sha2_64bit.prototype.Sigma1_ \x3d function(value) {\n  var valueLow \x3d value.getLowBits();\n  var valueHigh \x3d value.getHighBits();\n  // Implementation note:  See _sigma0() above\n  var low \x3d (valueLow \x3e\x3e\x3e 14) ^ (valueHigh \x3c\x3c 18) ^ (valueLow \x3e\x3e\x3e 18) ^\n      (valueHigh \x3c\x3c 14) ^ (valueHigh \x3e\x3e\x3e 9) ^ (valueLow \x3c\x3c 23);\n  var high \x3d (valueHigh \x3e\x3e\x3e 14) ^ (valueLow \x3c\x3c 18) ^ (valueHigh \x3e\x3e\x3e 18) ^\n      (valueLow \x3c\x3c 14) ^ (valueLow \x3e\x3e\x3e 9) ^ (valueHigh \x3c\x3c 23);\n  return new goog.math.Long(low, high);\n};\n\n\n/**\n * Calculates the SHA-2 64-bit choose function.\n *\n * This function uses `value` as a mask to choose bits from either\n * `one` if the bit is set or `two` if the bit is not set.\n *\n * @private\n * @param {!goog.math.Long} value\n * @param {!goog.math.Long} one\n * @param {!goog.math.Long} two\n * @return {!goog.math.Long}\n */\ngoog.crypt.Sha2_64bit.prototype.choose_ \x3d function(value, one, two) {\n  var valueLow \x3d value.getLowBits();\n  var valueHigh \x3d value.getHighBits();\n  return new goog.math.Long(\n      (valueLow \x26 one.getLowBits()) | (~valueLow \x26 two.getLowBits()),\n      (valueHigh \x26 one.getHighBits()) | (~valueHigh \x26 two.getHighBits()));\n};\n\n\n/**\n * Calculates the SHA-2 64-bit majority function.\n * This function returns, for each bit position, the bit held by the majority\n * of its three arguments.\n *\n * @private\n * @param {!goog.math.Long} one\n * @param {!goog.math.Long} two\n * @param {!goog.math.Long} three\n * @return {!goog.math.Long}\n */\ngoog.crypt.Sha2_64bit.prototype.majority_ \x3d function(one, two, three) {\n  return new goog.math.Long(\n      (one.getLowBits() \x26 two.getLowBits()) |\n          (two.getLowBits() \x26 three.getLowBits()) |\n          (one.getLowBits() \x26 three.getLowBits()),\n      (one.getHighBits() \x26 two.getHighBits()) |\n          (two.getHighBits() \x26 three.getHighBits()) |\n          (one.getHighBits() \x26 three.getHighBits()));\n};\n\n\n/**\n * Adds two or more goog.math.Long values.\n *\n * @private\n * @param {!goog.math.Long} one first summand\n * @param {!goog.math.Long} two second summand\n * @param {...goog.math.Long} var_args more arguments to sum\n * @return {!goog.math.Long} The resulting sum.\n */\ngoog.crypt.Sha2_64bit.prototype.sum_ \x3d function(one, two, var_args) {\n  // The low bits may be signed, but they represent a 32-bit unsigned quantity.\n  // We must be careful to normalize them.\n  // This doesn\x27t matter for the high bits.\n  // Implementation note:  Performance testing shows that this method runs\n  // fastest when the first two arguments are pulled out of the loop.\n  var low \x3d (one.getLowBits() ^ 0x80000000) + (two.getLowBits() ^ 0x80000000);\n  var high \x3d one.getHighBits() + two.getHighBits();\n  for (var i \x3d arguments.length - 1; i \x3e\x3d 2; --i) {\n    low +\x3d arguments[i].getLowBits() ^ 0x80000000;\n    high +\x3d arguments[i].getHighBits();\n  }\n  // Because of the ^0x80000000, each value we added is 0x80000000 too small.\n  // Add arguments.length * 0x80000000 to the current sum.  We can do this\n  // quickly by adding 0x80000000 to low when the number of arguments is\n  // odd, and adding (number of arguments) \x3e\x3e 1 to high.\n  if (arguments.length \x26 1) {\n    low +\x3d 0x80000000;\n  }\n  high +\x3d arguments.length \x3e\x3e 1;\n\n  // If low is outside the range [0, 0xFFFFFFFF], its overflow or underflow\n  // should be added to high.  We don\x27t actually need to modify low or\n  // normalize high because the goog.math.Long constructor already does that.\n  high +\x3d Math.floor(low / 0x100000000);\n  return new goog.math.Long(low, high);\n};\n\n\n/**\n * Converts an array of 32-bit integers into an array of goog.math.Long\n * elements.\n *\n * @private\n * @param {!Array\x3cnumber\x3e} values An array of 32-bit numbers.  Its length\n *     must be even.  Each pair of numbers represents a 64-bit integer\n *     in big-endian order\n * @return {!Array\x3c!goog.math.Long\x3e}\n */\ngoog.crypt.Sha2_64bit.toLongArray_ \x3d function(values) {\n  goog.asserts.assert(values.length % 2 \x3d\x3d 0);\n  var result \x3d [];\n  for (var i \x3d 0; i \x3c values.length; i +\x3d 2) {\n    result.push(new goog.math.Long(values[i + 1], values[i]));\n  }\n  return result;\n};\n\n\n/**\n * Fixed constants used in SHA-512 variants.\n *\n * These values are from Section 4.2.3 of\n * http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\n * @const\n * @private {!Array\x3c!goog.math.Long\x3e}\n */\ngoog.crypt.Sha2_64bit.K_ \x3d goog.crypt.Sha2_64bit.toLongArray_([\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f,\n  0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242,\n  0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235,\n  0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275,\n  0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f,\n  0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc,\n  0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6,\n  0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218,\n  0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99,\n  0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc,\n  0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915,\n  0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba,\n  0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc,\n  0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n]);\n\n//# sourceURL\x3dhttps://qs/javascript/closure/crypt/sha2_64bit.js\n");

$googDebugFname=undefined;

/** @suppress {missingRequire} */ /** @suppress {missingRequire} */
goog.module.ModuleManager.getInstance().setLoaded('syfn');
/** @suppress {missingRequire} */
goog.module.ModuleManager.getInstance().afterLoadModuleCode('syfn');

}catch(e){_DumpException(e)}
/* _Module_:amp */
try{
/** @suppress {missingRequire} */ goog.module.ModuleManager.getInstance().beforeLoadModuleCode('amp');
var $googDebugFname="javascript/amp/messaging/origin_verifier.js";
goog.loadModule("goog.module(\x27amp.messaging.OriginVerifier\x27);\ngoog.module.declareLegacyNamespace();\n\n/**\n * Verifies that an origin is allowed to send messages to the AMP viewer.\n * @interface\n */\nclass OriginVerifier {\n  /**\n   * Returns `true` if the given origin is allowed.\n   * @param {string} origin\n   * @return {boolean}\n   */\n  verify(origin) {}\n}\n\nexports \x3d OriginVerifier;\n\n//# sourceURL\x3dhttps://qs/javascript/amp/messaging/origin_verifier.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/amp/messaging/messaging.js";
eval("/**\n * @fileoverview This file provides classes for RPC-style interframe\n * communication between the AMP Viewer and AMP Documents. It is intended to\n * be used on both sides of the communication.\n *\n * Every request consists of a name and a payload. A request is sent on a\n * particular Channel. A Channel establishes a two way communication link\n * between frames. A FrameChannel provides a basic one-to-one frame\n * communication while GlobalChannel provides many-to-one communication. Request\n * handlers are registered with channels. Channels are managed by\n * ChannelManager.\n *\n * Requests return a promise that will resolve to the response or will be\n * rejected on error.\n */\ngoog.provide(\x27amp.messaging\x27);\ngoog.provide(\x27amp.messaging.Channel\x27);\ngoog.provide(\x27amp.messaging.ChannelManager\x27);\ngoog.provide(\x27amp.messaging.ErrorLogger\x27);\ngoog.provide(\x27amp.messaging.FrameChannel\x27);\ngoog.provide(\x27amp.messaging.GlobalChannel\x27);\ngoog.provide(\x27amp.messaging.Message\x27);\ngoog.provide(\x27amp.messaging.Payload\x27);\ngoog.provide(\x27amp.messaging.QueuedRequest\x27);\ngoog.provide(\x27amp.messaging.Receiver\x27);\ngoog.provide(\x27amp.messaging.RequestHandler\x27);\n\ngoog.require(\x27amp.messaging.OriginVerifier\x27);\n// TODO(b/24290663): Don\x27t require goog.Promise\ngoog.require(\x27goog.Promise\x27);\ngoog.require(\x27goog.Timer\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.debug\x27);\ngoog.require(\x27goog.log\x27);\ngoog.require(\x27goog.object\x27);\n\n\ngoog.scope(function() {\nvar messaging \x3d amp.messaging;\n\n\n/**\n * A Payload is the request or response data sent in a Message.\n * @typedef {*}\n */\nmessaging.Payload;\n\n\n/**\n * A Request that has been queued to send later. The complete Message object\n * will be generated when the request is sent.\n * @typedef {{\n *   name: (string),\n *   payload: (?messaging.Payload),\n *   resolvers: !Array\x3cfunction(*)\x3e\n * }}\n */\nmessaging.QueuedRequest;\n\n\n/**\n * A type that implements postMessage().\n * @typedef {!Window|!UserMessageHandler}\n */\nmessaging.MessagePoster;\n\n\n/**\n * A small wrapper around a message object to associate it with a channel.\n * @typedef {{\n *   channel: (messaging.FrameChannel),\n *   message: (messaging.Message)\n * }}\n */\nmessaging.MessageEnvelope;\n\n\n/**\n * A Message is the complete Object that is sent and received via postMessage.\n * It includes all metadata to direct the message to the correct destination.\n *\n * Fields:\n *   app: A constant identifier to distinguish AMP messages from any others.\n *   error: Error response details. Should never be set in a Request.\n *   requestid: A per channel unique ID. A response uses the same id as the\n *       request it is responding to.\n *   rsvp: Whether a response is required.\n *   name: The request name used to dispatch to the appropriate handler.\n *   data: The payload of the message.\n *   type: Whether this is a Request or Response.\n *\n * @typedef {{\n *   app: (string),\n *   error: (*),\n *   requestid: (number),\n *   rsvp: (boolean),\n *   name: (string),\n *   data: (messaging.Payload),\n *   type: (messaging.MessageType_)\n * }}\n */\nmessaging.Message;\n\n\n/**\n * @typedef {function(string, messaging.Payload, boolean):\n *     (!IThenable\x3c*\x3e|undefined)}\n */\nmessaging.RequestHandler;\n\n\n\n/**\n * Interface for logging messaging errors. An interface is defined so that\n * environment specific logging may be added on each side.\n * @interface\n */\nmessaging.ErrorLogger \x3d goog.defineClass(null, {\n  /**\n   * Logs an error.\n   * @param {string} msg Error message.\n   * @param {!Object\x3d} opt_data A map of key/value pairs to be included in the\n   *     log message.\n   */\n  logError: goog.abstractMethod\n});\n\n\n/**\n * Field names that may appear in a message.\n * @enum {string}\n * @private\n */\nmessaging.MessageKey_ \x3d {\n  APP: \x27app\x27,\n  ERROR: \x27error\x27,\n  REQUEST_ID: \x27requestid\x27,\n  RSVP: \x27rsvp\x27,\n  MESSAGE_NAME: \x27name\x27,\n  PAYLOAD: \x27data\x27,\n  TYPE: \x27type\x27\n};\n\n\n/**\n * @enum {string}\n * @private\n */\nmessaging.MessageType_ \x3d {\n  REQUEST: \x27q\x27,\n  RESPONSE: \x27s\x27\n};\n\n\n/**\n * A sentinel value representing special serialization of an origin.\n * @enum {string}\n */\nmessaging.OriginSentinel \x3d {\n  /**\n   * The special serialization of a null origin (a.k.a. a unique or opaque\n   * origin).\n   */\n  NULL: \x27null\x27,\n};\n\n\n/**\n * An identifier added to all AMP messages in the app field.\n * @private {string}\n */\nmessaging.APP_SENTINEL_ \x3d \x27__AMPHTML__\x27;\n\n\n/**\n * Error reason when no handler can be found for a request.\n * @private {string}\n */\nmessaging.NO_HANDLER_ERROR_ \x3d \x27no handler found\x27;\n\n\n/**\n * Error reason when no response promise from handler.\n * @private {string}\n */\nmessaging.INVALID_RESPONSE_ERROR_ \x3d \x27invalid response from handler\x27;\n\n/**\n * Message sent to document to poll for open channel handshake.\n * @private {!Object}\n */\nmessaging.HANDSHAKE_POLL_MESSAGE_ \x3d {\n  app: \x27__AMPHTML__\x27,\n  name: \x27handshake-poll\x27,\n};\n\n/**\n * Error message when AMP document does not respond to handshake poll.\n * @private {string}\n */\nmessaging.HANDSHAKE_POLL_ERROR_ \x3d\n    \x27Timed out waiting for response to handshake poll with AMP document.\x27;\n\n/**\n * The time to wait between handshake polls when setting up a communication\n * channel.\n * @private {number}\n */\nmessaging.HANDSHAKE_POLL_TIMEOUT_MS_ \x3d 1000;\n\n/**\n * The time to wait before giving up on the handshake poll and logging an error.\n * @private {number}\n */\nmessaging.MAX_HANDSHAKE_POLL_TIME_MS_ \x3d 20000;\n\n/**\n * @param {!messaging.Message} msg A message object.\n * @return {boolean} True if message is a request, false if it is a response.\n * @private\n */\nmessaging.isRequest_ \x3d function(msg) {\n  return msg.type \x3d\x3d messaging.MessageType_.REQUEST;\n};\n\n\n/**\n * A debug logger for AMP messaging. This logger is not included in production.\n * @private {?goog.log.Logger}\n */\nmessaging.logger_ \x3d goog.log.getLogger(\x27amp.messaging\x27);\n\n\n/**\n * A production error logger.\n * @private {?messaging.ErrorLogger}\n */\nmessaging.errorLogger_ \x3d null;\n\n\n/**\n * Sets the error logger to use for reporting production errors.\n * @param {!messaging.ErrorLogger} errorLogger\n */\nmessaging.setErrorLogger \x3d function(errorLogger) {\n  messaging.errorLogger_ \x3d errorLogger;\n};\n\n\n/**\n * Logs an error if there is a logger available.\n * @param {string} msg Error message.\n * @param {!Object\x3d} opt_data A map of key/value pairs to be included in the\n *     log message.\n * @private\n */\nmessaging.logError_ \x3d function(msg, opt_data) {\n  if (messaging.errorLogger_) {\n    messaging.errorLogger_.logError(msg, opt_data);\n  }\n};\n\n\n/**\n * A Receiver listens for messages on a single window and performs basic\n * message verifcation before passing the message to a single handler.\n */\nmessaging.Receiver \x3d goog.defineClass(null, {\n\n  /**\n   * @param {!Window} listenerWindow The listening window that will receive\n   *     messages.\n   * @param {!amp.messaging.OriginVerifier} originVerifier Verifier that is used\n   *     to check the origin of each message.\n   * @param {!function(!messaging.Message, messaging.MessagePoster)}\n   *   messageHandler The handler for all verified messages.\n   * @constructor\n   */\n  constructor: function(listenerWindow, originVerifier, messageHandler) {\n    /** @private {!Window} */\n    this.listenerWindow_ \x3d listenerWindow;\n\n    /** @private {!amp.messaging.OriginVerifier} */\n    this.originVerifier_ \x3d originVerifier;\n\n    /** @private {!function(!messaging.Message, messaging.MessagePoster)} */\n    this.messageHandler_ \x3d messageHandler;\n\n    /** @private {!function(!MessageEvent)} */\n    // Don\x27t use goog.bind to avoid depending on all of Closure.\n    this.boundMessageListener_ \x3d this.messageListener_.bind(this);\n    this.listenerWindow_.addEventListener(\n        \x27message\x27,\n        /** @type {function(!Event)} */ (this.boundMessageListener_), false);\n  },\n\n  /**\n   * Listens for message events sent to this window.\n   * @param {!MessageEvent} evt The message event object.\n   * @private\n   */\n  messageListener_: function(evt) {\n    if (!this.verifyMessageEvent_(evt)) {\n      return;\n    }\n    this.messageHandler_(evt.data, goog.asserts.assert(evt.source));\n  },\n\n\n  /**\n   * Verifies that the event is from an allowed origin and that the data is\n   * structured as expected.\n   * @param {!MessageEvent} evt\n   * @return {boolean}\n   * @private\n   */\n  verifyMessageEvent_: function(evt) {\n    // Check that this is a message from an AMP Viewer or Document. The sentinel\n    // is not expected to appear in messages from other sources. This does not\n    // ensure the safety of the message, but just quickly filters out bad\n    // messages.\n    if (!evt.data ||\n        evt.data[messaging.MessageKey_.APP] !\x3d messaging.APP_SENTINEL_) {\n      // Incorrect Message Format\n      messaging.logError_(\x27ampImf\x27, evt.data);\n      return false;\n    }\n    if (!evt.source) {\n      messaging.logError_(\x27ampIs\x27);\n      return false;\n    }\n\n    var verified \x3d evt.origin \x26\x26 this.originVerifier_.verify(evt.origin);\n    if (!verified) {\n      // Invalid Origin\n      messaging.logError_(\x27ampIo\x27, {\x27origin\x27: evt.origin});\n    }\n    return !!verified;\n  },\n\n\n  /**\n   * Dispose of resources.\n   */\n  dispose: function() {\n    this.listenerWindow_.removeEventListener(\n        \x27message\x27,\n        /** @type {function(!Event)} */ (this.boundMessageListener_));\n  }\n});  // goog.defineClass\n\n\n/**\n * This class manages access to multiple channels. It assigns channel IDs to\n * ensure every channel is uniquely identified. It dispatches incoming messages\n * to the appropriate Channel.\n */\nmessaging.ChannelManager \x3d goog.defineClass(null, {\n\n  statics: {\n    /** @private {?messaging.ChannelManager} */\n    instance_: null,\n\n    /**\n     * Gets the single shared instance of ChannelManager.\n     * @return {!messaging.ChannelManager}\n     */\n    getInstance: function() {\n      if (!messaging.ChannelManager.instance_) {\n        messaging.ChannelManager.instance_ \x3d new messaging.ChannelManager();\n      }\n      return messaging.ChannelManager.instance_;\n    },\n  },\n\n  /**\n   * @constructor\n   */\n  constructor: function() {\n    /**\n     * Array of all extant FrameChannels.\n     * @private {!Array\x3c!messaging.FrameChannel\x3e}\n     */\n    this.channels_ \x3d [];\n\n    /**\n     * The single global channel.\n     * @private {!messaging.GlobalChannel}\n     */\n    this.globalChannel_ \x3d new messaging.GlobalChannel(this);\n  },\n\n  /**\n   * Constructs a new FrameChannel\n   * @param {!Window} targetWindow The target when messages will be sent.\n   * @param {!string} targetOrigin The origin where messages may be sent.\n   * @return {!messaging.FrameChannel} The new FrameChannel.\n   */\n  newFrameChannel: function(targetWindow, targetOrigin) {\n    var channel \x3d new messaging.FrameChannel(targetWindow, targetOrigin);\n    this.channels_.push(channel);\n    return channel;\n  },\n\n\n  /**\n   * Unregisters FrameChannel so that it will no longer receive requests or\n   * responses. A channel should be discarded after it is unregistered.\n   * @param {!messaging.FrameChannel} channel The channel to unregister.\n   */\n  unregisterFrameChannel: function(channel) {\n    var index \x3d this.channels_.indexOf(channel);\n    if (index \x3e -1) {\n      this.channels_.splice(index, 1);\n    }\n  },\n\n  /**\n   * @return {!messaging.GlobalChannel} The single GlobalChannel.\n   */\n  getGlobalChannel: function() {\n    return this.globalChannel_;\n  },\n\n  /**\n   * Retrieves the channel associated with a window.\n   * @param {messaging.MessagePoster} poster The target associated with the\n   *     channel.\n   * @return {?messaging.FrameChannel} The channel.\n   * @private\n   */\n  getChannelForMessagePoster_: function(poster) {\n    return this.channels_.find(channel \x3d\x3e channel.target_ \x3d\x3d\x3d poster)\n      || null;\n  },\n\n  /**\n   * Handles received messages. It dispatches to the appropriate Channel,\n   * falling back to the GlobalChannel if no FrameChannel is registered to\n   * handle the message.\n   * @param {!messaging.Message} msg The message object.\n   * @param {messaging.MessagePoster} source The source of the message.\n   * @private\n   */\n  messageHandler_: function(msg, source) {\n    var channel \x3d this.getChannelForMessagePoster_(source);\n    if (!channel) {\n      // Channel missing from manager\n      messaging.logError_(\x27ampCm\x27, msg);\n      return;\n    }\n\n    var name \x3d msg[messaging.MessageKey_.MESSAGE_NAME];\n    var payload \x3d msg[messaging.MessageKey_.PAYLOAD];\n    // TODO(bdiamond): Add a sensible logging identifier.\n    goog.log.info(\n        messaging.logger_,\n        \x27Received message: \x27 + name);\n    goog.log.fine(\n        messaging.logger_, \x27Message content: \x27 + goog.debug.expose(payload));\n    var envelope \x3d {message: msg, channel: channel};\n    if (messaging.isRequest_(msg)) {\n      if (channel.handleRequest(envelope)) {\n        return;\n      }\n      if (this.globalChannel_.handleRequest(envelope)) {\n        return;\n      }\n      channel.sendResponseErrorIfDesired(envelope, messaging.NO_HANDLER_ERROR_);\n    } else {\n      channel.handleResponse(envelope);\n      // Don\x27t bother asking the GlobalChannel to handle the response. All\n      // Responses are handled by the individual FrameChannels.\n    }\n  },\n\n  /**\n   * Broadcasts a request to every open channel. The payload will be sent to\n   * every open channel.\n   * When opt_awaitResponse is true, incorrect targetOrigin exception causes\n   * the Promise to be rejected. When opt_awaitResponse is false, the excpetion\n   * is rethrown.\n   * @param {string} messageName The name of the message.\n   * @param {messaging.Payload} payload The data to send.\n   * @param {boolean\x3d} opt_awaitResponse Whether to wait for a response message.\n   * @param {messaging.FrameChannel\x3d} opt_exceptChannel A channel to exclude\n   *     from the broadcast.\n   * @return {!goog.Promise\x3c?\x3e|undefined} A promise that resolves to an\n   *     array containing all of the responses, if opt_awaitResponse is true.\n   *     Otherwise undefined.\n   */\n  broadcastRequest: function(\n      messageName, payload, opt_awaitResponse, opt_exceptChannel) {\n    var promises \x3d opt_awaitResponse ? [] : undefined;\n    goog.object.forEach(this.channels_, function(channel) {\n      if (channel \x3d\x3d\x3d opt_exceptChannel) {\n        // Skip the excluded channel ID.\n        return;\n      }\n      var promise \x3d\n          channel.sendRequest(messageName, payload, opt_awaitResponse);\n      if (promises \x26\x26 promise) {\n        promises.push(promise);\n      }\n    });\n    if (promises) {\n      return goog.Promise.all(promises);\n    } else {\n      return promises;\n    }\n  },\n\n  /**\n   * @return {!function(!messaging.Message, messaging.MessagePoster)} A bound\n   *     message handler function.\n   */\n  getMessageHandler: function() {\n    return this.messageHandler_.bind(this);\n  },\n\n  /**\n   * Sends a message over the appropiate channel.\n   * @param {!messaging.MessageEnvelope} envelope A message envelope.\n   * @protected\n   */\n  sendMessage: function(envelope) {\n    if (!envelope.channel) {\n      // Channel missing from envelope\n      messaging.logError_(\x27ampNc\x27, envelope.message);\n      return;\n    }\n\n    envelope.channel.sendMessage(envelope);\n  }\n});\n\n\n/**\n * An abstract base class that defines two way communication. It can handle both\n * the request and response side of the communication. It allows functions to\n * register to handle a particular message name. It also allows a default\n * handler to handle all message names that are not registered.\n */\nmessaging.Channel \x3d goog.defineClass(null, {\n\n  /**\n   * @constructor\n   */\n  constructor: function() {\n\n    /**\n     * A map from message names to request handlers.\n     * @private {!Object\x3cstring, !messaging.RequestHandler\x3e}\n     */\n    this.messageHandlers_ \x3d {};\n\n    /** @private {?messaging.RequestHandler} */\n    this.defaultHandler_ \x3d null;\n  },\n\n  /**\n   * Registers a function that will handle requests sent to the specified\n   * message name.\n   * @param {string} messageName The name of the message to handle.\n   * @param {!messaging.RequestHandler} handler The request handler function.\n   */\n  registerHandler: function(messageName, handler) {\n    this.messageHandlers_[messageName] \x3d handler;\n  },\n\n  /**\n   * Unregisters the handler for the specified message name.\n   * @param {string} messageName The name of the message to unregister.\n   */\n  unregisterHandler: function(messageName) {\n    delete this.messageHandlers_[messageName];\n  },\n\n  /**\n   * @param {?messaging.RequestHandler} handler The default handler function.\n   */\n  setDefaultHandler: function(handler) {\n    this.defaultHandler_ \x3d handler;\n  },\n\n  /**\n   * Looks up the appropriate handler and calls it if available.\n   * @param {!messaging.MessageEnvelope} envelope Message plus metadata.\n   * @return {boolean} True if the message is handled.\n   * @protected\n   */\n  handleRequest: function(envelope) {\n    var msg \x3d envelope.message;\n    var name \x3d msg[messaging.MessageKey_.MESSAGE_NAME];\n    var handler \x3d this.messageHandlers_[name];\n    if (!handler) {\n      handler \x3d this.defaultHandler_;\n    }\n    if (!handler) {\n      return false;\n    }\n    var payload \x3d msg[messaging.MessageKey_.PAYLOAD];\n    var awaitResponse \x3d !!msg[messaging.MessageKey_.RSVP];\n    var promise \x3d handler(name, payload, awaitResponse);\n    if (awaitResponse) {\n      if (promise) {\n        promise.then(\n            this.sendResponse_.bind(this, envelope),\n            this.sendResponseError.bind(this, envelope));\n      } else {\n        this.sendResponseError(envelope, messaging.INVALID_RESPONSE_ERROR_);\n      }\n    }\n    return true;\n  },\n\n  /**\n   * Generates a response message and sends it back to the requester.\n   * @param {!messaging.MessageEnvelope} req The request that elicited the\n   *     response.\n   * @param {messaging.Payload} respPayload The payload to send back in the\n   *     response.\n   * @private\n   */\n  sendResponse_: function(req, respPayload) {\n    var resp \x3d this.newResponseMessage_(req, respPayload);\n    this.sendMessage(resp);\n  },\n\n  /**\n   * Generates an error response and sends it back to the requester if the\n   * request wants responses, otherwise it does nothing.\n   * @param {!messaging.MessageEnvelope} req The request that elicited the\n   *     response.\n   * @param {*} reason The error reason.\n   * @protected\n   */\n  sendResponseErrorIfDesired: function(req, reason) {\n    if (req.message[messaging.MessageKey_.RSVP]) {\n      this.sendResponseError(req, reason);\n    }\n  },\n\n  /**\n   * Generates an error response and sends it back to the requester.\n   * @param {!messaging.MessageEnvelope} req The request that elicited the\n   *     response.\n   * @param {*} reason The error reason.\n   * @protected\n   */\n  sendResponseError: function(req, reason) {\n    var resp \x3d this.newResponseMessage_(req, null);\n    resp.message[messaging.MessageKey_.ERROR] \x3d reason;\n    this.sendMessage(resp);\n  },\n\n  /**\n   * Generates a response message based on the request.\n   * @param {!messaging.MessageEnvelope} req The request that elicited the\n   *     response.\n   * @param {messaging.Payload} respPayload The payload to send back in the\n   *     response.\n   * @return {!messaging.MessageEnvelope}\n   * @private\n   */\n  newResponseMessage_: function(req, respPayload) {\n    var resp \x3d {};\n    resp[messaging.MessageKey_.APP] \x3d messaging.APP_SENTINEL_;\n    resp[messaging.MessageKey_.TYPE] \x3d messaging.MessageType_.RESPONSE;\n    resp[messaging.MessageKey_.PAYLOAD] \x3d respPayload;\n    var copyFields \x3d [\n      messaging.MessageKey_.REQUEST_ID, messaging.MessageKey_.MESSAGE_NAME\n    ];\n    for (var i \x3d 0; i \x3c copyFields.length; i++) {\n      var key \x3d copyFields[i];\n      resp[key] \x3d req.message[key];\n    }\n    var envelope \x3d {message: resp, channel: req.channel};\n    return /** @type {!messaging.MessageEnvelope} */ (envelope);\n  },\n\n  /**\n   * Handles a received response message.\n   * @param {!messaging.MessageEnvelope} resp The response message envelope.\n   * @return {boolean} True if the message was handled and false if it could\n   *     not be handled.\n   * @protected\n   */\n  handleResponse: goog.abstractMethod,\n\n  /**\n   * Sends a message to it\x27s designated recipient.\n   * @param {!messaging.MessageEnvelope} envelope\n   * @protected\n   */\n  sendMessage: goog.abstractMethod,\n\n  /**\n   * Sends a request to the named handler. When called before sending is\n   * enabled, the requests will be added to a queue with only one message per\n   * message name, but all promises will resolve when that one response is\n   * received.\n   * @param {string} messageName The name of the message.\n   * @param {messaging.Payload} payload The data to send.\n   * @param {boolean\x3d} opt_awaitResponse Whether to wait for a response message.\n   * @return {!goog.Promise\x3c*\x3e|undefined} A promise that resolves to the\n   *     response data, if opt_awaitResponse is true. Otherwise undefined.\n   */\n  sendRequest: goog.abstractMethod\n});\n\n\n/**\n * A one-to-one communicaton channel that can send messages to a particular\n * target.\n */\nmessaging.FrameChannel \x3d goog.defineClass(messaging.Channel, {\n\n  /**\n   * @param {!messaging.MessagePoster} target The target where messages will be\n   * sent.\n   * @param {!string} targetOrigin The origin where messages may be sent.\n   * @param {boolean\x3d} opt_sendEnabled If true, requests are sent immediately.\n   *     Otherwise requests are queued until sending is enabled. This does not\n   *     affect request handling and sending responses.\n   * @constructor\n   * @extends {messaging.Channel}\n   */\n  constructor: function(target, targetOrigin, opt_sendEnabled) {\n    messaging.FrameChannel.base(this, \x27constructor\x27);\n\n    /** @private {!messaging.MessagePoster} */\n    this.target_ \x3d target;\n\n    /**\n     * Note that this can be updated later on via setTargetOrigin.\n     * @private {string}\n     */\n    this.targetOrigin_ \x3d targetOrigin;\n\n    /** @private {number} */\n    this.requestId_ \x3d 0;\n\n    /** @private {boolean} */\n    this.sendEnabled_ \x3d !!opt_sendEnabled;\n\n    /**\n     * A function that cancels handshake timers.\n     * @private {?Function}\n     */\n    this.cancelHandshakeTimers_ \x3d null;\n\n    /**\n     * Map from message ID to response promise callback functions.\n     * @private {!Object\x3cnumber, {resolve: function(*), reject: function(*)}\x3e}\n     */\n    this.waitingForResponse_ \x3d {};\n\n    /**\n     * An array of requests to send. Stores at most one request per messageName\n     * to be sent when sending is enabled.\n     * @private {!Array\x3c!messaging.QueuedRequest\x3e}\n     */\n    this.sendQueue_ \x3d [];\n  },\n\n  /**\n   * Attempts to handle this message.\n   * @param {!messaging.Message} msg The received message.\n   * @param {messaging.MessagePoster} poster The source of the message.\n   * @private\n   */\n  messageHandler_: function(msg, poster) {\n    var envelope \x3d {message: msg, channel: this};\n    if (messaging.isRequest_(msg)) {\n      if (!this.handleRequest(envelope)) {\n        this.sendResponseErrorIfDesired(envelope, messaging.NO_HANDLER_ERROR_);\n      }\n    } else {\n      this.handleResponse(envelope);\n    }\n  },\n\n  /**\n   * Enqueues a request for later sending. Stores one message per messageName.\n   * @param {string} messageName The name of the message.\n   * @param {messaging.Payload} payload The data to send.\n   * @param {?function(*)\x3d} opt_resolver\n   * @private\n   */\n  enqueueRequest_: function(messageName, payload, opt_resolver) {\n    for (var i \x3d 0; i \x3c this.sendQueue_.length; i++) {\n      var queued \x3d this.sendQueue_[i];\n      if (queued.name \x3d\x3d messageName) {\n        queued.payload \x3d payload;\n        if (opt_resolver) {\n          queued.resolvers.push(opt_resolver);\n        }\n        return;\n      }\n    }\n    this.sendQueue_.push({\n      name: messageName,\n      payload: payload,\n      resolvers: opt_resolver ? [opt_resolver] : []\n    });\n  },\n\n  /**\n   * Repeatedly sends a handshake poll message to the AMP document until the\n   * communication channel is established.\n   */\n  pollForHandshake: function() {\n    // It is safe to use \x27*\x27 as the targetOrigin of this message as it is\n    // merely a handshake request and does not contain any secure information.\n    let sendHandshakePoll \x3d () \x3d\x3e\n        this.target_.postMessage(messaging.HANDSHAKE_POLL_MESSAGE_, \x27*\x27);\n    sendHandshakePoll();\n    let handshakePollTimer \x3d\n        new goog.Timer(messaging.HANDSHAKE_POLL_TIMEOUT_MS_);\n    handshakePollTimer.listen(goog.Timer.TICK, sendHandshakePoll);\n    handshakePollTimer.start();\n    let handshakePollTimeoutTimer \x3d\n        new goog.Timer(messaging.MAX_HANDSHAKE_POLL_TIME_MS_);\n    this.cancelHandshakeTimers_ \x3d () \x3d\x3e {\n      handshakePollTimer.stop();\n      handshakePollTimeoutTimer.stop();\n    };\n    handshakePollTimeoutTimer.listenOnce(goog.Timer.TICK, () \x3d\x3e {\n      this.cancelHandshakeTimers_();\n      try {\n        messaging.logError_(messaging.HANDSHAKE_POLL_ERROR_);\n      } catch (exc) {\n        // Just log an error. Don\x27t throw it.\n      }\n    });\n    handshakePollTimeoutTimer.start();\n  },\n\n  /**\n   * Stops the handshake poll if in progress. Currently, frame_manager.js\n   * listens for the openChannel message and calls this method when received.\n   * TODO(gbick): Move openChannel listening logic into messaging.js and make\n   * this method private.\n   */\n  clearHandshakePoll() {\n    if (this.cancelHandshakeTimers_) {\n      this.cancelHandshakeTimers_();\n    }\n  },\n\n  /**\n   * Handles a response by looking up the pending Promise.\n   * @override\n   * @protected\n   */\n  handleResponse: function(resp) {\n    var msg \x3d resp.message;\n    var requestId \x3d msg[messaging.MessageKey_.REQUEST_ID];\n    var pending \x3d this.waitingForResponse_[requestId];\n    if (!pending) {\n      return false;\n    }\n    delete this.waitingForResponse_[requestId];\n    if (msg.hasOwnProperty(messaging.MessageKey_.ERROR)) {\n      var msgName \x3d msg[messaging.MessageKey_.MESSAGE_NAME];\n      var error \x3d msg[messaging.MessageKey_.ERROR];\n      pending.reject(new Error(`Request \x22${msgName}\x22 failed: ${error}`));\n    } else {\n      pending.resolve(msg[messaging.MessageKey_.PAYLOAD]);\n    }\n    return true;\n  },\n\n  /**\n   * Sends the message to the target.\n   * @override\n   * @protected\n   */\n  sendMessage: function(envelope) {\n    var msg \x3d envelope.message;\n    var name \x3d msg[messaging.MessageKey_.MESSAGE_NAME];\n    var payload \x3d msg[messaging.MessageKey_.PAYLOAD];\n    // TODO(bdiamond): Add a sensible logging identifier.\n    goog.log.info(\n        messaging.logger_,\n        \x27Sending message: \x27 + name);\n    goog.log.fine(\n        messaging.logger_, \x27Message content: \x27 + goog.debug.expose(payload));\n    // If the target\x27s associated document has a null origin (a.k.a. unique\n    // origin, opaque origin), the wildcard `*` must be passed to\n    // `targetOrigin`. Passing the string \x22null\x22 currently throws an error.\n    // See https://github.com/whatwg/html/issues/3105 for more details.\n    this.target_.postMessage(\n        msg,\n        this.targetOrigin_ \x3d\x3d\x3d messaging.OriginSentinel.NULL ?\n            \x27*\x27 :\n            this.targetOrigin_);\n  },\n\n  /**\n   * Sends a request to the target, keeping track of the pending response.\n   * @override\n   */\n  sendRequest: function(messageName, payload, opt_awaitResponse) {\n    if (!this.sendEnabled_) {\n      if (opt_awaitResponse) {\n        return new goog.Promise(resolve \x3d\x3e {\n          this.enqueueRequest_(messageName, payload, resolve);\n        });\n      } else {\n        this.enqueueRequest_(messageName, payload);\n        return goog.Promise.resolve();\n      }\n    }\n\n    var requestId \x3d this.requestId_++;\n    var msg \x3d /** @type {messaging.Message} */ ({});\n    msg[messaging.MessageKey_.TYPE] \x3d messaging.MessageType_.REQUEST;\n    msg[messaging.MessageKey_.PAYLOAD] \x3d payload;\n    msg[messaging.MessageKey_.APP] \x3d messaging.APP_SENTINEL_;\n    msg[messaging.MessageKey_.REQUEST_ID] \x3d requestId;\n    msg[messaging.MessageKey_.MESSAGE_NAME] \x3d messageName;\n    var promise;\n    if (opt_awaitResponse) {\n      msg[messaging.MessageKey_.RSVP] \x3d true;\n      promise \x3d new goog.Promise(function(resolve, reject) {\n        this.waitingForResponse_[requestId] \x3d {\n          resolve: resolve,\n          reject: reject\n        };\n      }.bind(this));\n    }\n    try {\n      this.sendMessage({message: msg, channel: this});\n    } catch (e) {\n      if (promise) {\n        this.waitingForResponse_[requestId].reject(e);\n        delete this.waitingForResponse_[requestId];\n      } else {\n        throw e;\n      }\n    }\n    return promise;\n  },\n\n  /**\n   * Sets the sendEnabled state. If set to true, queued messages are sent.\n   */\n  setSendEnabled: function(sendEnabled) {\n    this.sendEnabled_ \x3d sendEnabled;\n    if (sendEnabled) {\n      // Drain the queue. Send all messages without waiting for responses.\n      for (var i \x3d 0; i \x3c this.sendQueue_.length; i++) {\n        var queued \x3d this.sendQueue_[i];\n        let promise \x3d this.sendRequest(\n            queued.name, queued.payload, !!queued.resolvers.length);\n        for (var j \x3d 0; j \x3c queued.resolvers.length; j++) {\n          queued.resolvers[j](promise);\n        }\n      }\n      this.sendQueue_ \x3d [];\n    }\n  },\n\n  /**\n   * @param {string} origin The origin to be used as new target if not empty.\n   */\n  setTargetOrigin: function(origin) {\n    if (origin) {\n      this.targetOrigin_ \x3d origin;\n    }\n  },\n\n  /**\n   * @return {!function(!messaging.Message, messaging.MessagePoster)} A bound\n   *     message handler function.\n   */\n  getMessageHandler: function() {\n    return this.messageHandler_.bind(this);\n  }\n});  // goog.defineClass\n\n\n/**\n * A many-to-one communication channel.\n */\nmessaging.GlobalChannel \x3d goog.defineClass(messaging.Channel, {\n\n  /**\n   * @param {!messaging.ChannelManager} manager The ChannelManager\n   *     that owns this channel.\n   * @constructor\n   */\n  constructor: function(manager) {\n    messaging.GlobalChannel.base(this, \x27constructor\x27);\n\n    /** @private {!messaging.ChannelManager} */\n    this.manager_ \x3d manager;\n  },\n\n  /**\n   * passes the message on to the manager to be routed to the appropriate\n   *     channel.\n   * @override\n   * @protected\n   */\n  sendMessage: function(envelope) {\n    this.manager_.sendMessage(envelope);\n  },\n\n  /**\n   * Broadcasts the request.\n   * @override\n   */\n  sendRequest: function(messageName, payload, opt_awaitResponse) {\n    return this.manager_.broadcastRequest(\n        messageName, payload, opt_awaitResponse);\n  },\n\n  /**\n   * Does nothing for responses. Any responses to broadcasts should be handled\n   * by the individual FrameChannels.\n   * @override\n   * @protected\n   */\n  handleResponse: function(resp) {\n    return false;\n  }\n\n});  // goog.defineClass\n\nmessaging.ChannelManager.testOnly \x3d {\n  /**\n   * Resets the singleton instance.\n   */\n  reset: () \x3d\x3e {\n    messaging.ChannelManager.instance_ \x3d null;\n  }\n};\n});  // goog.scope\n\n//# sourceURL\x3dhttps://qs/javascript/amp/messaging/messaging.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/csi/handlers.js";
goog.loadModule("/**\n * @fileoverview Provides handlers for CSI requests.\n *\n * Call register() to register the handler on a FrameChannel.\n */\ngoog.module(\x27gws.amp.csi.handlers\x27);\n\nconst FrameChannel \x3d goog.require(\x27amp.messaging.FrameChannel\x27);\nconst Promise \x3d goog.require(\x27goog.Promise\x27);\nconst constants \x3d goog.require(\x27amp.constants\x27);\n\n/**\n * Handles tick for timing measurement.\n * @param {!gws.amp.csi.Reporter} reporter\n * @param {!Object} payload Contains the tick data.\n * @return {!Promise\x3c?\x3e}\n */\nfunction tickHandler(reporter, payload) {\n  const label \x3d payload[constants.PAYLOAD_PARAMETERS.LABEL];\n  const from \x3d payload[constants.PAYLOAD_PARAMETERS.FROM];\n  const value \x3d payload[constants.PAYLOAD_PARAMETERS.VALUE];\n  const delta \x3d payload[constants.PAYLOAD_PARAMETERS.DELTA];\n  reporter.tick(label, from, value, delta);\n  return Promise.resolve();\n}\n\n/**\n * Uses the queued FCP tick along with the iframe creation time and user click\n * time to give a better representation of page load time as perceived by the\n * user.\n * @param {!gws.amp.csi.Reporter} reporter\n * @param {!ViewerTimings} csiTimes Contains the times needed for recording a prerender\n *     sensitive FCP metric.\n * @return {number}\n */\nfunction calculatePrerenderedFcp(reporter, csiTimes) {\n  const clickTime \x3d csiTimes.click;\n  const iframeTime \x3d csiTimes.iframe;\n  const fcpTimeValue \x3d reporter.getTickTime(constants.CsiLabels.FCP);\n  if (!fcpTimeValue) {\n    return 0;\n  }\n  if (!clickTime || !iframeTime) {\n    return fcpTimeValue;\n  }\n  // We subtract iframe creation time from click time as the FCP time is clocked\n  // based on the creation of the AMP document, not the SERP. Then, we take the\n  // difference between FCP time and click time with the same time origin as the\n  // perceived page load time.\n  return Math.max(0, fcpTimeValue - Math.max(0, clickTime - iframeTime));\n}\n\n/**\n * Checks to see if all necessary prerequisites are present to log a\n * pre-render sensitive FCP metric. This includes the presence of the fcp\n * tick, click time, and iframe creation time.\n * @param {!gws.amp.csi.Reporter} reporter\n * @param {!ViewerTimings} csiTimes Contains the times needed for recording a prerender\n *     sensitive FCP metric.\n * @return {boolean}\n */\nfunction shouldLogAdjustedFcp(reporter, csiTimes) {\n  const clickTime \x3d csiTimes.click;\n  const iframeTime \x3d csiTimes.iframe;\n  return reporter.getTickTime(constants.CsiLabels.FCP) !\x3d null \x26\x26 !!clickTime \x26\x26\n      !!iframeTime \x26\x26 reporter.getAction() \x3d\x3d \x27Prerender\x27;\n}\n\n/**\n * Handles a sendReport request causing the accumulated CSI metrics to be\n * logged.\n * @param {!gws.amp.csi.Reporter} reporter\n * @param {*} payload The optional extra params to report.\n * @param {!ViewerTimings} csiTimes Contains the times needed for recording a prerender\n *     sensitive FCP metric.\n * @return {!Promise\x3c?\x3e}\n */\nfunction sendReportHandler(reporter, payload, csiTimes) {\n  if (shouldLogAdjustedFcp(reporter, csiTimes)) {\n    // Add a tick with adjusted FCP metric for prerendered pages.\n    const adjustedFcp \x3d calculatePrerenderedFcp(reporter, csiTimes);\n    reporter.tick(\n        constants.CsiLabels.PFCP, undefined /* opt_from */,\n        undefined /* opt_value */, adjustedFcp);\n  }\n  const params \x3d payload \x26\x26 goog.isObject(payload) ? payload : undefined;\n  reporter.sendReport(/** @type {!Object|undefined} */ (params));\n  return Promise.resolve();\n}\n\n/**\n * Object containing times relevant for prerender FCP logging.\n * Fields:\n *   click: Time at which the link is clicked.\n *   iframe: Time at which the AMP viewer iframe is created.\n * @typedef {{\n *   click: (?number),\n *   iframe: (?number)\n * }}\n */\nlet ViewerTimings;\n\n/**\n * Registers CSI message handlers on a FrameChannel.\n * @param {!FrameChannel} frameChannel The frame channel to register a handler\n *     on.\n * @param {!gws.amp.csi.Reporter} reporter The CSI reporter that collects and\n *     logs CSI metrics.\n * @param {!ViewerTimings} csiTimes Contains the times needed for recording a prerender\n *     sensitive FCP metric.\n */\nexports.register \x3d (frameChannel, reporter, csiTimes) \x3d\x3e {\n  frameChannel.registerHandler(\n      constants.REQUEST_NAMES.TICK, (type, payload, awaitResponse) \x3d\x3e {\n        return tickHandler(reporter, /** @type {!Object} */ (payload));\n      });\n  frameChannel.registerHandler(\n      constants.REQUEST_NAMES.SEND_CSI, (type, payload, awaitResponse) \x3d\x3e {\n        return sendReportHandler(reporter, payload, csiTimes);\n      });\n};\n\nexports.ViewerTimings \x3d ViewerTimings;\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/csi/handlers.js\n");

$googDebugFname=undefined;
var $googDebugFname="java/com/google/gws/plugins/amp/jslayout/viewer_html.jslayout.css.js";
eval("/**\n * @fileoverview Generated code, do not modify.\n * Generated from java/com/google/gws/plugins/amp/jslayout/viewer.html.\n * Generated by template/prototemplate/jslayout/codegeneration/gen_cssnames_js.tpl.\n */\n\ngoog.provide(\x27gws.amp.AmpViewerCss\x27);\n\n\n/**\n * JavaScript constants for the CSS classes used in this controller.\n * @enum {string}\n */\ngws.amp.AmpViewerCss.Class \x3d {\n  AMP_CONTAINER: goog.getCssName(\x27u2quVpIWVr0__amp-container\x27),\n  AMP_DOC: goog.getCssName(\x27u2quVpIWVr0__amp-doc\x27),\n  CONTAINER: goog.getCssName(\x27u2quVpIWVr0__container\x27),\n  HIDDEN: goog.getCssName(\x27u2quVpIWVr0__hidden\x27),\n  ITEM: goog.getCssName(\x27u2quVpIWVr0__item\x27),\n  ITEM_FRAME: goog.getCssName(\x27u2quVpIWVr0__item-frame\x27),\n  TEMPORARY_OVERLAY: goog.getCssName(\x27u2quVpIWVr0__temporary-overlay\x27)\n};\n\n\n\n\n//# sourceURL\x3dhttps://qs/java/com/google/gws/plugins/amp/jslayout/viewer_html.jslayout.css.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/slider.js";
eval("goog.provide(\x27gws.amp.DivSlider\x27);\ngoog.provide(\x27gws.amp.DivSliderEventHandler\x27);\ngoog.provide(\x27gws.amp.DynamicDomSlider\x27);\ngoog.provide(\x27gws.amp.SingletonSlider\x27);\ngoog.provide(\x27gws.amp.Slider\x27);\n\ngoog.require(\x27goog.Disposable\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.dom\x27);\ngoog.require(\x27goog.dom.TagName\x27);\ngoog.require(\x27goog.dom.classlist\x27);\ngoog.require(\x27goog.dom.dataset\x27);\ngoog.require(\x27goog.log\x27);\ngoog.require(\x27gws.amp.AmpViewerCss\x27);\ngoog.require(\x27gws.amp.model.ItemSet\x27);\ngoog.require(\x27search.log.errorLogger\x27);\ngoog.require(\x27wireless.events\x27);\ngoog.require(\x27wireless.fx.DivSlider\x27);\n\n\n\n/**\n * An abstract base class for sliders.\n */\ngws.amp.Slider \x3d goog.defineClass(goog.Disposable, {\n  statics: {\n    /**\n     * The e.extraArg of the SLIDE_MOVE event.\n     * @typedef {{\n     *   deltaX: number\n     * }}\n     */\n    SlideMoveEvent: {},\n\n    /**\n     * The e.extraArg of the ITEM_CHANGED and SNAPPING_FINISHED events.\n     * @typedef {{\n     *   oldItemIndex: number,\n     *   newItemIndex: number\n     * }}\n     */\n    SnappingProgressEvent: {},\n\n    /**\n     * Events fired by the Slider, fired on the container.\n     * @enum {wireless.events.EventType}\n     */\n    EventType: {\n      // Fired when the user starts a slide action.\n      START_SLIDE:\n          wireless.events.EventType.create(\x27gws_amp_slider:start_slide\x27),\n\n      // Fired during sliding, each time the items move at all.\n      // It is no longer called once the user stops sliding the items\n      // (even though the items may continue animating to their resting\n      // positions).\n      // e.extraArg is gws.amp.Slider.SlideMoveEvent.\n      SLIDE_MOVE: wireless.events.EventType.create(\x27gws_amp_slider:slide_move\x27),\n\n      // Fired when the current item changes. Can be a result of a user action\n      // (slide) or of a call to setIndex. Fires before snapping finishes.\n      // e.extraArg is gws.amp.Slider.SnappingProgressEvent.\n      ITEM_CHANGED:\n          wireless.events.EventType.create(\x27gws_amp_slider:item_changed\x27),\n\n      // Fired when the snapping of a slide finishes.\n      // e.extraArg is gws.amp.Slider.SnappingProgressEvent.\n      SNAPPING_FINISHED:\n          wireless.events.EventType.create(\x27gws_amp_slider:snapping_finished\x27)\n    }\n  },\n\n  /**\n   * @param {!Element} container The container/root element for the Slider. It\n   * is also the target element that receive touch events for swiping.\n   * @extends {goog.Disposable}\n   * @constructor\n   */\n  constructor: function(container) {\n    gws.amp.Slider.base(this, \x27constructor\x27);\n\n    /**\n     * The container/root, which is also the touch target for the Slider.\n     * @private @const {!Element}\n     */\n    this.container_ \x3d container;\n\n\n    /**\n     * Slider logger instance.\n     * @protected @const {?goog.log.Logger}\n     */\n    this.logger \x3d goog.log.getLogger(\x27Slider\x27);\n  },\n\n\n  /**\n   * @return {!Element}\n   */\n  getContainer: function() {\n    return this.container_;\n  },\n\n\n  /**\n   * Called when the Slider DOM is ready (i.e. found in the Viewer DOM tree).\n   */\n  domReady: goog.abstractMethod,\n\n\n  /**\n   * Gets the currently selected index.\n   * @return {number}\n   */\n  getIndex: goog.abstractMethod,\n\n\n  /**\n   * Sets the selected index. This will update the item that is in view.\n   * @param {number} index\n   */\n  setIndex: goog.abstractMethod,\n\n  /**\n   * Cancels any in progress gesture and snaps to the currently selected\n   * item.\n   */\n  cancelSwipe: goog.nullFunction,\n\n  /**\n   * Fires a slide start event.\n   * @protected\n   */\n  fireSlideStartEvent: function() {\n    goog.log.fine(this.logger, \x27Firing SLIDE_START event\x27);\n\n    wireless.events.fire(\n        this.container_, gws.amp.Slider.EventType.START_SLIDE, this);\n  },\n\n\n  /**\n   * Fires a slide move event.\n   * @param {number} deltaX How far horizontally we have slid, in pixels.\n   * @protected\n   */\n  fireSlideMoveEvent: function(deltaX) {\n    goog.log.fine(\n        this.logger, \x27Firing SLIDE_MOVE event with deltaX: \x27 + deltaX);\n\n    const slideMoveEvent \x3d\n        /** @type {!gws.amp.Slider.SlideMoveEvent} */ ({deltaX: deltaX});\n    wireless.events.fire(\n        this.container_, gws.amp.Slider.EventType.SLIDE_MOVE, this,\n        slideMoveEvent);\n  },\n\n\n  /**\n   * Fires an item changed event.\n   * @param {number} oldItemIndex\n   * @param {number} newItemIndex\n   * @protected\n   */\n  fireItemChangedEvent: function(oldItemIndex, newItemIndex) {\n    goog.log.fine(\n        this.logger, \x27Firing ITEM_CHANGED event with oldItemIndex: \x27 +\n            oldItemIndex + \x27, and newItemIndex: \x27 + newItemIndex);\n\n    const itemChangedEvent \x3d\n        /** @type {!gws.amp.Slider.SnappingProgressEvent} */ (\n            {oldItemIndex: oldItemIndex, newItemIndex: newItemIndex});\n    wireless.events.fire(\n        this.container_, gws.amp.Slider.EventType.ITEM_CHANGED, this,\n        itemChangedEvent);\n  },\n\n\n  /**\n   * Fires a snapping finished event.\n   * @param {number} oldItemIndex\n   * @param {number} newItemIndex\n   * @protected\n   */\n  fireSnappingFinishedEvent: function(oldItemIndex, newItemIndex) {\n    goog.log.fine(\n        this.logger, \x27Firing SNAPPING_FINISHED event with \x27 +\n            \x27oldItemIndex: \x27 + oldItemIndex + \x27, and newItemIndex: \x27 +\n            newItemIndex);\n\n    const snappingFinishedEvent \x3d\n        /** @type {!gws.amp.Slider.SnappingProgressEvent} */ (\n            {oldItemIndex: oldItemIndex, newItemIndex: newItemIndex});\n    wireless.events.fire(\n        this.container_, gws.amp.Slider.EventType.SNAPPING_FINISHED, this,\n        snappingFinishedEvent);\n  }\n});\n\n\n/**\n * A \x27slider\x27 containing a single preexisting item\n * @extends {gws.amp.Slider}\n */\ngws.amp.SingletonSlider \x3d goog.defineClass(gws.amp.Slider, {\n\n  /**\n   * @param {!Element} container The root element for the SingletonSlider.\n   * @constructor\n   */\n  constructor: function(container) {\n    gws.amp.SingletonSlider.base(this, \x27constructor\x27, container);\n  },\n\n  /** @override */\n  domReady: function() {},  // Do nothing\n\n  /** @override */\n  getIndex: function() {\n    return 0;\n  },\n\n  /** @override */\n  setIndex: function(index) {}  // Do nothing\n\n});  // class\n\n\n/**\n * An abstract base class for Sliders which have their DOM created\n * dynamically at run-time.\n * @extends {gws.amp.Slider}\n */\ngws.amp.DynamicDomSlider \x3d goog.defineClass(gws.amp.Slider, {\n  /**\n   * @param {!gws.amp.model.ItemSet} itemSet The items in the Slider.\n   * @constructor\n   */\n  constructor: function(itemSet) {\n    gws.amp.DynamicDomSlider.base(\n        this, \x27constructor\x27,\n        goog.dom.createDom(\n            goog.dom.TagName.DIV, gws.amp.AmpViewerCss.Class.CONTAINER));\n\n    /**\n     * @protected @const {!Array\x3c!Element\x3e} items These are expected to be\n     * individual viewable items within the Slider. Populated by this.createDom.\n     */\n    this.items \x3d [];\n\n    /**\n     * @private @const {!Element} The root element of the slider that contains\n     * all slider items.\n     */\n    this.itemFrame_ \x3d this.createDom_(itemSet);\n  },\n\n\n  /**\n   * Returns the item container for the item at position index.\n   * @param {number} index Which item to grab the DOM for.\n   * @return {!Element} The DOM Element for the item.\n   */\n  getItemContainer: function(index) {\n    return goog.asserts.assertElement(goog.dom.getElementByClass(\n        gws.amp.AmpViewerCss.Class.AMP_CONTAINER, this.items[index]));\n  },\n\n\n  /**\n   * Private class method which creates the DOM with space for itemCount number\n   * of AMP items.\n   * @param {!gws.amp.model.ItemSet} itemSet The set of items in the slider.\n   * @return {!Element} The root element that contains the individual slider\n   *     elements.\n   * @private\n   */\n  createDom_: function(itemSet) {\n    const itemFrame \x3d goog.dom.createElement(goog.dom.TagName.OL);\n    goog.dom.classlist.add(itemFrame, gws.amp.AmpViewerCss.Class.ITEM_FRAME);\n    const itemCount \x3d itemSet.getNumItems();\n    for (let i \x3d 0; i \x3c itemCount; i++) {\n      this.addItemToElement_(itemFrame, itemSet.getItems()[i]);\n    }\n    itemSet.getLogData().then(goog.bind(function(logData) {\n      goog.dom.dataset.set(this.getContainer(), \x27ved\x27, logData.getVed());\n      this.getContainer().setAttribute(\x27eid\x27, logData.getEi());\n    }, this));\n    goog.dom.appendChild(this.getContainer(), itemFrame);\n    return itemFrame;\n  },\n\n\n  /**\n   * Adds an item to the slider. Adds logging based on the model, if available.\n   * @param {!Element} parentFrame The parent element to insert the new item\n   *     into.\n   * @param {gws.amp.model.Item\x3d} opt_modelItem An optional model item to use\n   *     for VED logging.\n   * @private\n   */\n  addItemToElement_: function(parentFrame, opt_modelItem) {\n    const itemContainer \x3d goog.dom.createDom(\n        goog.dom.TagName.DIV, gws.amp.AmpViewerCss.Class.AMP_CONTAINER);\n    const itemElement \x3d goog.dom.createDom(\n        goog.dom.TagName.LI, gws.amp.AmpViewerCss.Class.ITEM, itemContainer);\n    goog.dom.appendChild(parentFrame, itemElement);\n    this.items.push(itemElement);\n    if (opt_modelItem) {\n      // We don\x27t initially have access to the ved. It is created via async\n      // call when the viewer item set is loaded. So we wait on a promise here.\n      opt_modelItem.getVed().then(goog.bind(function(ved) {\n        goog.dom.dataset.set(itemContainer, \x27ved\x27, ved);\n      }, this));\n    }\n  },\n\n\n  /**\n   * Adds an item to the slider. Adds logging based on the model, if available.\n   * @param {gws.amp.model.Item\x3d} opt_modelItem An optional model item to use\n   *     for VED logging.\n   */\n  addItem: function(opt_modelItem) {\n    this.addItemToElement_(this.itemFrame_, opt_modelItem);\n  },\n\n\n  /**\n   * @return {number} The slider length is the number of items it contains.\n   */\n  getLength: function() {\n    return this.items.length;\n  }\n});\n\n\n/**\n * A Slider based on wireless.fx.DivSlider.\n * @extends {gws.amp.DynamicDomSlider}\n */\ngws.amp.DivSlider \x3d goog.defineClass(gws.amp.DynamicDomSlider, {\n  statics: {\n    /**\n     * The transition time for the slider, in milliseconds.\n     * @const {number}\n     * @private\n     */\n    TRANSITION_TIME_MS_: 200\n  },\n\n  /**\n   * @param {!gws.amp.model.ItemSet} itemSet The items in the Slider.\n   * @constructor\n   */\n  constructor: function(itemSet) {\n    gws.amp.DivSlider.base(this, \x27constructor\x27, itemSet);\n\n    /** @private @const {number} */\n    this.initialItemCount_ \x3d itemSet.getNumItems();\n\n    /**\n     * Provided in this.domReady().\n     * @private {?wireless.fx.DivSlider}\n     */\n    this.slider_ \x3d null;\n  },\n\n  /**\n   * Finishes initializing the slider implementation and event handler. Must be\n   * called after this.getContainer() has been inserted into the DOM.\n   * @override\n   */\n  domReady: function() {\n    // The DivSlider must be initialized after its container is added to the DOM\n    // so that it can inherit the parent element\x27s text direction.\n    this.slider_ \x3d this.initializeSlider_(this.initialItemCount_);\n\n    const rtlAdjuster \x3d this.slider_.getRtlAdjuster();\n    this.registerDisposable(\n        new gws.amp.DivSliderEventHandler(this, rtlAdjuster));\n  },\n\n  /** @override */\n  getIndex: function() {\n    if (this.checkInitialized_()) {\n      return this.slider_.getCurrentCardIndex();\n    }\n    return -1;\n  },\n\n  /** @override */\n  setIndex: function(index) {\n    if (this.checkInitialized_()) {\n      this.slider_.setCurrentCardIndex(index);\n    }\n  },\n\n  /**\n   * Cancels any in progress gesture and snaps to the currently selected\n   * item. There is no animation.\n   * @override\n   */\n  cancelSwipe() {\n    if (this.checkInitialized_()) {\n      this.slider_.reset();\n    }\n  },\n\n  /** @override */\n  addItem: function() {\n    if (this.checkInitialized_()) {\n      gws.amp.DivSlider.base(this, \x27addItem\x27);\n\n      const range \x3d this.items.length;\n      this.slider_.setVisibleRange(range, range);\n      if (range \x3d\x3d 2) {\n        // Change from not-swipeable to swipeable.\n        this.slider_.setIsDraggingEnabled(true);\n        this.slider_.initialize();\n      }\n    }\n  },\n\n  /**\n   * Initializes a Slider using the DOM already created by\n   * gws.amp.DynamicDomSlider.\n   * @param {number} itemCount The initial number of items in the Slider.\n   * @return {!wireless.fx.DivSlider} The Slider.\n   * @private\n   */\n  initializeSlider_: function(itemCount) {\n    const slider \x3d new wireless.fx.DivSlider(\n        this.getContainer(), this.items, 0 /* startIndex */);\n    slider.setMaxTransitionTime(gws.amp.DivSlider.TRANSITION_TIME_MS_);\n    const range \x3d this.items.length;\n    slider.setVisibleRange(range, range);\n    slider.setIsDraggingEnabled(itemCount \x3e 1);\n    slider.initialize();\n    return slider;\n  },\n\n  /**\n   * Checks whether the slider was fully initialized. If false, logs an error.\n   * @return {boolean} Whether the slider was fully initialized.\n   * @private\n   */\n  checkInitialized_: function() {\n    if (!this.slider_) {\n      search.log.errorLogger.log(\n          new Error(\x27DivSlider was used before calling domReady().\x27), {});\n      return false;\n    } else {\n      return true;\n    }\n  },\n});\n\n\n/**\n * Event handler for capturing DivSlider events and firing their corresponding\n * gws.amp.Slider events.\n * TODO(b/29895138): Unit test this.\n * @extends {goog.Disposable}\n */\ngws.amp.DivSliderEventHandler \x3d goog.defineClass(goog.Disposable, {\n  /**\n   * @param {!gws.amp.Slider} slider The slider to capture\n   *     DivSlider events from and fire gws.amp.Slider events on.\n   * @param {number} rtlAdjuster The RTL adjuster for the slider. 1 for LTR,\n   * or -1 for RTL.\n   * @constructor\n   */\n  constructor: function(slider, rtlAdjuster) {\n    gws.amp.DivSliderEventHandler.base(this, \x27constructor\x27);\n\n    /**\n     * @private @const {!gws.amp.Slider}\n     */\n    this.slider_ \x3d slider;\n\n    /**\n     * @private @const {number}\n     */\n    this.rtlAdjuster_ \x3d rtlAdjuster;\n\n    /**\n     * @private @const {!Element} eventTarget_ The element to capture\n     *     DivSlider events from.\n     */\n    this.eventTarget_ \x3d this.slider_.getContainer();\n\n    // START_SLIDE\n    /** @private {function()} */\n    this.boundStartSlideListener_ \x3d goog.bind(this.startSlideHandler_, this);\n    wireless.events.observe(\n        this.eventTarget_, wireless.fx.DivSlider.EventType.START_SLIDE,\n        this.boundStartSlideListener_);\n\n    // SLIDE_MOVE\n    /** @private {function(!Event)} */\n    this.boundSlideMoveListener_ \x3d goog.bind(this.slideMoveHandler_, this);\n    wireless.events.observe(\n        this.eventTarget_, wireless.fx.DivSlider.EventType.SLIDE_MOVE,\n        this.boundSlideMoveListener_);\n\n    // CARD_CHANGED\n    /** @private {function(!Event)} */\n    this.boundCardChangedListener_ \x3d goog.bind(this.cardChangedHandler_, this);\n    wireless.events.observe(\n        this.eventTarget_, wireless.fx.DivSlider.EventType.CARD_CHANGED,\n        this.boundCardChangedListener_);\n\n    // MOMENTUM_FINISHED\n    /** @private {function(!Event)} */\n    this.boundMomentumFinishedListener_ \x3d\n        goog.bind(this.momentumFinishedHandler_, this);\n    wireless.events.observe(\n        this.eventTarget_, wireless.fx.DivSlider.EventType.MOMENTUM_FINISHED,\n        this.boundMomentumFinishedListener_);\n  },\n\n\n  /**\n   * Handles the beginning of a slide from the wireless.fx.DivSlider.\n   * @private\n   */\n  startSlideHandler_: function() {\n    // Fire the gws.amp.Slider equivalent event.\n    this.slider_.fireSlideStartEvent();\n  },\n\n\n  /**\n   * Handles a slide movement (not necessarily the beginning) from the\n   * wireless.fx.DivSlider.\n   * @param {!Event} e The slide move event.\n   * @private\n   */\n  slideMoveHandler_: function(e) {\n    // Gather the data for this event.\n    const eventData \x3d\n        /** {!wireless.fx.DivSlider.SlideMoveEvent} */ (e.extraArg);\n    // wireless.fx.DivSlider gives raw device deltaX, but we want to return an\n    // deltaX adjusted for the language direction.\n    const deltaX \x3d eventData.deltaX * this.rtlAdjuster_;\n\n    // Fire the gws.amp.Slider equivalent event.\n    this.slider_.fireSlideMoveEvent(deltaX);\n  },\n\n\n  /**\n   * Handles the card change event from the wireless.fx.DivSlider which\n   * triggers on touchend when the next card index is determined,\n   * but before it animates to its final location.\n   * @param {!Event} e The card changed event.\n   * @private\n   */\n  cardChangedHandler_: function(e) {\n    // Gather the data for this event.\n    const eventData \x3d\n        /** {!wireless.fx.DivSlider.CardChangedEvent} */ (e.extraArg);\n    const newIndex \x3d eventData.newCardIndex;\n    const oldIndex \x3d eventData.oldCardIndex;\n\n    // Fire the gws.amp.Slider equivalent event.\n    this.slider_.fireItemChangedEvent(oldIndex, newIndex);\n  },\n\n\n  /**\n   * Handles the momentum finished event from the wireless.fx.DivSlider\n   * which triggers at the very end of card swipes or when the Viewer opens.\n   * @param {!Event} e The momentum finished event.\n   * @private\n   */\n  momentumFinishedHandler_: function(e) {\n    // Gather the data for this event.\n    const eventData \x3d\n        /** {!wireless.fx.DivSlider.MomentumFinishedEvent} */ (e.extraArg);\n    const cardChangedEventData \x3d /** {!wireless.fx.DivSlider.CardChangedEvent}\n                                  */\n        eventData.cardChangedEvent;\n    const newIndex \x3d cardChangedEventData.newCardIndex;\n    const oldIndex \x3d cardChangedEventData.oldCardIndex;\n\n    // Fire the gws.amp.Slider equivalent event.\n    this.slider_.fireSnappingFinishedEvent(oldIndex, newIndex);\n  },\n\n\n  /** @override */\n  disposeInternal: function() {\n    // Remove DivSlider event listeners\n    // START_SLIDE\n    wireless.events.unobserve(\n        this.eventTarget_, wireless.fx.DivSlider.EventType.START_SLIDE,\n        this.boundStartSlideListener_);\n    // SLIDE_MOVE\n    wireless.events.unobserve(\n        this.eventTarget_, wireless.fx.DivSlider.EventType.SLIDE_MOVE,\n        this.boundSlideMoveListener_);\n    // CARD_CHANGED\n    wireless.events.unobserve(\n        this.eventTarget_, wireless.fx.DivSlider.EventType.CARD_CHANGED,\n        this.boundCardChangedListener_);\n    // MOMENTUM_FINISHED\n    wireless.events.unobserve(\n        this.eventTarget_, wireless.fx.DivSlider.EventType.MOMENTUM_FINISHED,\n        this.boundMomentumFinishedListener_);\n\n    gws.amp.DivSliderEventHandler.base(this, \x27disposeInternal\x27);\n  }\n});\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/slider.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/slider_provider_delegate.js";
goog.loadModule("goog.module(\x27gws.amp.SliderProviderDelegate\x27);\n\nconst ItemSet \x3d goog.require(\x27gws.amp.model.ItemSet\x27);\nconst Slider \x3d goog.require(\x27gws.amp.Slider\x27);\n\n/**\n * Delegate interface for SliderProvider.\n * Register an implementation of this class. Exactly one implementation is\n * required for SliderProvider to work.\n * @interface\n */\nclass SliderProviderDelegate {\n  /**\n   * Creates and returns a new Slider with the ItemSet provided.\n   * @param {!ItemSet} itemSet The items in the Slider.\n   * @return {!Slider} The new Slider.\n   */\n  createSlider(itemSet) {}\n}\n\nexports \x3d SliderProviderDelegate;\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/slider_provider_delegate.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/slider_provider.js";
goog.loadModule("goog.module(\x27gws.amp.SliderProvider\x27);\ngoog.module.declareLegacyNamespace();\n\nconst DelegateRegistry \x3d goog.require(\x27goog.delegate.DelegateRegistry\x27);\nconst ItemSet \x3d goog.require(\x27gws.amp.model.ItemSet\x27);\nconst Slider \x3d goog.require(\x27gws.amp.Slider\x27);\nconst SliderProviderDelegate \x3d goog.require(\x27gws.amp.SliderProviderDelegate\x27);\nconst delegates \x3d goog.require(\x27goog.delegate.delegates\x27);\n\n/** @type {!DelegateRegistry\x3c!SliderProviderDelegate\x3e} */\nconst registry \x3d new DelegateRegistry();\n\n/** @type {!SliderProvider} */\nlet instance;\n\n/**\n * This class manages the creation of Sliders.\n */\nclass SliderProvider {\n  /**\n   * @return {!DelegateRegistry\x3c!SliderProviderDelegate\x3e}\n   */\n  static registry() {\n    return registry;\n  }\n\n\n  /**\n   * Gets the single shared instance of SliderProvider.\n   * @return {!gws.amp.SliderProvider}\n   */\n  static getInstance() {\n    if (!instance) {\n      instance \x3d new SliderProvider();\n    }\n    return instance;\n  }\n\n  constructor() {\n    /** @private {!Array\x3c!SliderProviderDelegate\x3e} */\n    this.delegates_ \x3d registry.delegates();\n  }\n\n  /**\n   * Creates and returns a new Slider with the ItemSet provided.\n   * @param {!ItemSet} itemSet The items in the Slider.\n   * @return {!Slider} The new Slider.\n   */\n  createSlider(itemSet) {\n    return delegates.callFirst(this.delegates_, (d) \x3d\x3e d.createSlider(itemSet));\n  }\n}\n\nexports \x3d SliderProvider;\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/slider_provider.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/document_state_storage.js";
goog.loadModule("goog.module(\x27gws.amp.DocumentStateStorage\x27);\ngoog.module.declareLegacyNamespace();\n\nconst Namespace \x3d goog.require(\x27search.cache.Namespace\x27);\nconst PersistentStorageType \x3d goog.require(\x27storagecache.PersistentStorageType\x27);\nconst factory \x3d goog.require(\x27search.cache.factory\x27);\n\n\n/**\n * Class for managing the session storage for the AMP Viewer.\n */\nclass DocumentStateStorage {\n  constructor() {\n    /**\n     * The session storage interface.\n     * @private {!storagecache.Cache}\n     */\n    this.sessionStorage_ \x3d\n        factory.get(PersistentStorageType.SESSION, Namespace.AMP);\n\n    /**\n     * The local storage key.\n     * @private {string}\n     */\n    this.viewerKey_ \x3d \x27ss_id\x27;\n  }\n\n  /**\n   * Stores the document scroll position and the document URL.\n   * @param {number} scrollTop\n   * @param {string} url\n   */\n  storePayload(scrollTop, url) {\n    const payload \x3d {scrollTop: scrollTop, url: url};\n    this.sessionStorage_.set(this.viewerKey_, payload);\n  }\n\n  /**\n   * Retrieves the stored payload from sessionStorage.\n   * @param {string} url\n   * @return {?number}\n   */\n  readPayload(url) {\n    const val \x3d this.sessionStorage_.get(this.viewerKey_);\n    return (val \x26\x26 url \x3d\x3d val.url) ? val.scrollTop : null;\n  }\n}\n\nexports \x3d DocumentStateStorage;\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/document_state_storage.js\n");

$googDebugFname=undefined;
var $googDebugFname="java/com/google/gws/common/api/amp/header.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.gws.common.api.amp.HeaderStyle\x27);\n\n/**\n * @enum {number}\n */\nproto.gws.common.api.amp.HeaderStyle \x3d {\n  NONE: 1,\n  PROGRESS_BAR: 2,\n  FULL: 3\n};\n\n\n//# sourceURL\x3dhttps://qs/java/com/google/gws/common/api/amp/header.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/header_config.js";
eval("goog.provide(\x27gws.amp.HeaderConfig\x27);\n\ngoog.require(\x27gws.amp.config\x27);\ngoog.require(\x27proto.gws.common.api.amp.HeaderStyle\x27);\n\ngoog.scope(function() {\n\nconst FULL \x3d proto.gws.common.api.amp.HeaderStyle.FULL;\nconst PROGRESS_BAR \x3d proto.gws.common.api.amp.HeaderStyle.PROGRESS_BAR;\nconst NONE \x3d proto.gws.common.api.amp.HeaderStyle.NONE;\nconst config \x3d gws.amp.config;\n\n/**\n * A class instantiated with an amp ItemSet, used by the viewer to make\n * header rendering decisions.\n */\ngws.amp.HeaderConfig \x3d goog.defineClass(null, {\n  /**\n   * @param {number} numItems The number of items in the viewer.\n   * @constructor\n   */\n  constructor: function(numItems) {\n    /**\n     * The number of items in the viewer.\n     * @private {number}\n     */\n    this.numItems_ \x3d numItems;\n\n    /**\n     * Server provided configuration.\n     * @private {!proto.gws.plugins.amp.config.HeaderConfig}\n     */\n    this.configProto_ \x3d config.getHeaderConfig();\n  },\n\n\n  /**\n   * Returns the number of items in this header style.\n   * @returns {number}\n   */\n  getNumBubbles: function() {\n    return this.shouldShowBubbles() ? this.numItems_ : 0;\n  },\n\n\n  /**\n   * Returns whether or not a header should be shown.\n   * @returns {boolean}\n   */\n  shouldShowHeader: function() {\n    const headerStyle \x3d this.configProto_.getHeaderStyle();\n    if (headerStyle \x3d\x3d NONE) {\n      return false;\n    } else if (this.numItems_ \x3e 1) {\n      return true;\n    } else {\n      return headerStyle \x3d\x3d FULL;\n    }\n  },\n\n  /**\n   * Returns the height of the header in px.\n   * @returns {number}\n   */\n  getHeaderHeight: function() {\n    if (!this.shouldShowHeader()) {\n      return 0;\n    }\n    switch (this.configProto_.getHeaderStyle()) {\n      case PROGRESS_BAR:\n        return 16;\n      case FULL:\n        return this.configProto_.getMinifiedHeaderEnabled() ? 36 : 54;\n      default:\n        return 0;\n    }\n  },\n\n\n  /**\n   * Returns whether or not a title should be shown. This is only relevant\n   * when a call to shouldShowHeader returns true.\n   * @returns {boolean}\n   */\n  shouldShowTitle: function() {\n    const headerStyle \x3d this.configProto_.getHeaderStyle();\n    return headerStyle \x3d\x3d FULL;\n  },\n\n\n  /**\n   * Returns whether or not bubbles should be shown.\n   * @returns {boolean}\n   */\n  shouldShowBubbles: function() {\n    const headerStyle \x3d this.configProto_.getHeaderStyle();\n    return this.numItems_ \x3e 1 \x26\x26 headerStyle !\x3d NONE;\n  }\n});\n});  // goog.scope\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/header_config.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/history/fragment_key.js";
goog.loadModule("goog.module(\x27gws.amp.history.FragmentKey\x27);\ngoog.module.declareLegacyNamespace();\n\n/**\n * @enum {string}\n */\nconst FragmentKey \x3d {\n  FRAGMENT: \x27ampf\x27,\n  INDEX: \x27amph\x27,\n  SHARE: \x27ampshare\x27,\n};\n\nexports \x3d FragmentKey;\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/history/fragment_key.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/history/types.js";
goog.loadModule("goog.module(\x27gws.amp.history.types\x27);\n\n/**\n * @typedef {{\n *   groupId: (string|undefined),\n *   forwardCapState: (boolean|undefined),\n *   pushId: (number|undefined)\n * }}\n */\nlet State;\n\n/**\n * @typedef {{\n *   url: string,\n *   state: !State,\n *   id: (number|undefined)\n * }}\n */\nlet Entry;\n\n/**\n * Arguments:\n * 1. Current entry\n * 2. Previous entry\n * @typedef {function(!Entry, !Entry)}\n */\nlet Listener;\n\nexports \x3d {\n  State,\n  Entry,\n  Listener,\n};\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/history/types.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/history/manager.js";
goog.loadModule("/**\n * @fileoverview History state management for the AMP viewer. This module\n * facilitates history management across item set boundaries. This class\n * delegates to historyWrapper to do soft transitions for both document\n * updates (hash changes, lightbox for instance) and viewer updates\n * (AMP exploration).\n *\n * Thorough documentation of AMP viewer history is available here:\n * go/amp-viewer-history-documentation\n *\n * TODO(b/33202540): refactor history management in the viewer.\n * TODO(bdiamond): Properly document this class.\n */\n\ngoog.module(\x27gws.amp.history.manager\x27);\ngoog.module.declareLegacyNamespace();\n\nconst AmpUrl \x3d goog.require(\x27amp.service.AmpUrl\x27);\nconst AmpUrlUtil \x3d goog.require(\x27amp.service.AmpUrlUtil\x27);\nconst FragmentKey \x3d goog.require(\x27gws.amp.history.FragmentKey\x27);\nconst GoogPromise \x3d goog.require(\x27goog.Promise\x27);\nconst UrlState \x3d goog.require(\x27search.url.UrlState\x27);\nconst historyStack \x3d goog.require(\x27search.url.historyStack\x27);\nconst historyWrapper \x3d goog.require(\x27search.url.historyWrapper\x27);\nconst urlUtil \x3d goog.require(\x27search.url.util\x27);\nconst {Entry, Listener, State} \x3d goog.require(\x27gws.amp.history.types\x27);\nconst {Entry: HistoryEntry, Listener: HistoryListener, UpdateContent} \x3d goog.require(\x27search.url.historyWrapperTypes\x27);\nconst {assert, assertBoolean} \x3d goog.require(\x27goog.asserts\x27);\n\n/**\n * State stored in history state.\n *\n * @typedef {{\n *   amp: boolean,\n *   state: !State\n * }}\n */\nlet InternalState;\n\n/** @type {!Set\x3c!Listener\x3e} */\nconst listeners \x3d new Set();\n\n/**\n * @type {!Entry}\n */\nlet savedEntry;\n\n/**\n * Exported function.\n * Compares the current URL to an AMP URL to determine if there is a match.\n * @param {!AmpUrl} ampUrl The AMP url corresponding to the\n *     frame.\n * @return {boolean} Whether the current URL corresponds to the AMP URL.\n */\nfunction isAmpUrlActive(ampUrl) {\n  const currentUrl \x3d AmpUrlUtil.getCurrentUrl();\n  return ampUrl.getStandaloneUrlPostfix() \x3d\x3d currentUrl.getPath();\n}\n\n/**\n * Exported function\n * @return {!Entry}\n */\nfunction getCurrent() {\n  return getEntry(historyWrapper.getCurrent());\n}\n\n/**\n * Helper function to convert a history entry to an amp entry.\n * @param {!HistoryEntry} historyEntry\n * @return {!Entry}\n */\nfunction getEntry(historyEntry) {\n  const {state, url, metadata} \x3d historyEntry;\n  const internalState \x3d getInternalState(state);\n  const entry \x3d {\n    url,\n    state: internalState.state,\n  };\n  if (metadata) {\n    entry.id \x3d metadata.entryId;\n  }\n  return entry;\n}\n\n/**\n * Returns a defaulted and deep copied version of rawState.\n * @param {*\x3d} rawState\n * @return {!InternalState}\n */\nfunction getInternalState(rawState \x3d historyWrapper.getCurrent().state) {\n  rawState \x3d goog.isObject(rawState) ? rawState : {};\n  let {amp \x3d false, state} \x3d /** @type {?} */ (rawState);\n  const internalState \x3d {amp, state: {}};\n  if (goog.isObject(state)) {\n    if (goog.isDef(state.groupId)) {\n      internalState.state.groupId \x3d state.groupId;\n    }\n    if (goog.isDef(state.forwardCapState)) {\n      internalState.state.forwardCapState \x3d state.forwardCapState;\n    }\n    if (goog.isDef(state.pushId)) {\n      internalState.state.pushId \x3d state.pushId;\n    }\n  }\n  return internalState;\n}\n\n/**\n * A callback to update counters just before an update.\n * @param {!State} state\n * @param {!AmpUrl} ampUrl\n * @param {!Map\x3c!FragmentKey, string\x3e} fragments\n * @param {boolean} replace\n * @return {!UpdateContent}\n */\nfunction getUpdateContent(state, ampUrl, fragments, replace) {\n  let url \x3d ampUrl.getStandaloneUrlPostfix();\n  let currentInternalState \x3d getInternalState();\n  if (!goog.isDef(state.groupId)) {\n    if (goog.isDef(currentInternalState.state.groupId)) {\n      state.groupId \x3d currentInternalState.state.groupId;\n    } else if (goog.isDef(savedEntry.state.groupId)) {\n      state.groupId \x3d savedEntry.state.groupId;\n    }\n  }\n  // Failing these checks indicates that the Viewer has not been set up yet and\n  // so a replace is not a valid operation.\n  assert(state.groupId);\n\n  const urlState \x3d new UrlState.Mutable(url);\n  urlUtil.propagateStableInitialParams(urlState, true);\n  for (const [key, value] of fragments) {\n    urlState.set(key, value);\n  }\n  url \x3d urlState.toString(true /** relative */);\n  savedEntry \x3d {url, state};\n  return {\n    state: {\n      state,\n      amp: true,\n    },\n    url,\n    replace,\n  };\n}\n/**\n * Exported function.\n * Commits history state, preserving info that is required to backtrack\n * through viewer states.\n * @param {!State} state\n * @param {!AmpUrl} ampUrl\n * @param {!Map\x3c!FragmentKey, string\x3e\x3d} fragments\n * @param {boolean\x3d} replace\n * @return {!GoogPromise\x3c!Entry\x3e} Returns a goog.Promise that resolves to an\n *     entryId, which is a unique identifier for a history update.\n */\nfunction update(state, ampUrl, fragments \x3d new Map(), replace \x3d false) {\n  return historyWrapper\n      .update(\n          () \x3d\x3e getUpdateContent(\n              state, ampUrl, assert(fragments), assertBoolean(replace)),\n          {preempt: false, excludedListeners: EXCLUDED_LISTENERS})\n      .then(getEntry);\n}\n\n/**\n * Exported function.\n * Delegates to historyWrapper gotoEntry.\n * @param {number} entryId\n * @return {!GoogPromise\x3c!Entry\x3e}\n */\nfunction goToEntry(entryId) {\n  return historyStack\n      .goToEntry(\n          entryId, {preempt: false, excludedListeners: EXCLUDED_LISTENERS})\n      .then(getEntry);\n}\n\n/**\n * Exported function.\n * Go back one in the history stack.\n * @return {!GoogPromise\x3c!Entry\x3e}\n */\nfunction back() {\n  return historyWrapper\n      .back({preempt: false, excludedListeners: EXCLUDED_LISTENERS})\n      .then(getEntry);\n}\n\n/**\n * Exported function.\n * Add a listener. The listener is only notified for browser initiated\n * updates.\n * @param {!Listener} listener\n */\nfunction addListener(listener) {\n  listeners.add(listener);\n}\n\n/**\n * Exported function.\n * Remove a listener.\n * @param {!Listener} listener\n */\nfunction removeListener(listener) {\n  listeners.delete(listener);\n}\n\n/**\n * A listener that gets updated when the URL changes.\n * @param {!HistoryEntry} currentHistoryEntry\n * @param {!HistoryEntry} previousHistoryEntry\n */\nfunction historyWrapperListener(currentHistoryEntry, previousHistoryEntry) {\n  const entry \x3d getEntry(currentHistoryEntry);\n  if (currentHistoryEntry.state \x26\x26 currentHistoryEntry.state.amp) {\n    // If the current history entry is amp, save it for later.\n    savedEntry \x3d entry;\n  }\n  for (const listener of listeners) {\n    listener(getEntry(currentHistoryEntry), getEntry(previousHistoryEntry));\n  }\n}\n\n/** @type {!Set\x3c!HistoryListener\x3e} */\nconst EXCLUDED_LISTENERS \x3d new Set([historyWrapperListener]);\n\n/**\n * Initializes the lower level listeners.\n */\nfunction init() {\n  savedEntry \x3d getCurrent();\n  historyWrapper.addListener(\n      historyWrapperListener, true /* notifyAllChanges */);\n}\n\n/**\n * Exported function.\n * Disposes any lower level listeners.\n */\nfunction dispose() {\n  historyWrapper.removeListener(historyWrapperListener);\n}\n\ninit();\n\n/** @package */\nconst testing \x3d {\n  setUp() {\n    dispose();\n    init();\n  },\n};\n\nexports \x3d {\n  update,\n  back,\n  isAmpUrlActive,\n  goToEntry,\n  getCurrent,\n  addListener,\n  removeListener,\n  dispose,\n  testing,\n};\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/history/manager.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/history/frame_history.js";
goog.loadModule("/**\n * @fileoverview History state management for AMP documents within the viewer.\n * Each AMP Frame has its own history stack. The position in this stack is\n * tracked with the stackIndex which is incremented with a push and decremented\n * with a pop.\n *\n * The history state of at most one AMP Frame is connected to the browser\n * history state via HistoryManager.\n *\n * Thorough documentation of AMP document history is available here:\n * go/amp-viewer-history-documentation\n *\n * TODO(b/33202540): refactor history management in the viewer.\n */\ngoog.module(\x27gws.amp.history.FrameHistory\x27);\ngoog.module.declareLegacyNamespace();\n\nconst AmpUrl \x3d goog.require(\x27amp.service.AmpUrl\x27);\nconst FragmentKey \x3d goog.require(\x27gws.amp.history.FragmentKey\x27);\nconst GoogPromise \x3d goog.require(\x27goog.Promise\x27);\nconst UpdateUrlMode \x3d goog.require(\x27gws.amp.history.UpdateUrlMode\x27);\nconst UrlState \x3d goog.require(\x27search.url.UrlState\x27);\nconst errorLogger \x3d goog.require(\x27search.log.errorLogger\x27);\nconst manager \x3d goog.require(\x27gws.amp.history.manager\x27);\nconst {Entry} \x3d goog.require(\x27gws.amp.history.types\x27);\nconst {assert} \x3d goog.require(\x27goog.asserts\x27);\n\n/**\n * @typedef {{\n *   pushId: (number|undefined),\n *   fragments: (!Map\x3c!FragmentKey, string\x3e|undefined)\n * }}\n */\nlet StackNode;\n\n/**\n * The FrameHistory corresponding to the currently displayed AMP frame.\n * It is null when the viewer is closed.\n * @type {?FrameHistory}\n */\nlet primaryFrame \x3d null;\n\n/**\n * The FrameHistory corresponding to the previously displayed AMP frame.\n * @type {?FrameHistory}\n */\nlet previousFrame \x3d null;\n\n/**\n * @param {string} url\n * @return {!Map\x3c!FragmentKey, string\x3e}\n */\nfunction getFragmentsFromUrl(url) {\n  const fragments \x3d new Map();\n  const urlState \x3d new UrlState(url);\n  for (const key of Object.values(FragmentKey)) {\n    const value \x3d urlState.get(key);\n    if (value) {\n      fragments.set(key, value);\n    }\n  }\n  return fragments;\n}\n\n/**\n * Handles all state update events received from the history state for the AMP\n * key. This will be called for browser initiated events.\n * @param {!Entry} currentEntry\n * @param {!Entry} previousEntry\n */\nfunction historyListener(currentEntry, previousEntry) {\n  if (currentEntry.state.forwardCapState) {\n    // We hit the artificial end of the stack. Go back.\n    manager.back();\n    return;\n  }\n\n  if (primaryFrame) {\n    primaryFrame.historyUpdated_(\n        currentEntry.state.pushId, getFragmentsFromUrl(currentEntry.url));\n  }\n}\n\n/**\n * Sets the primary frame that will handle history events. Also updates the\n * previous frame.\n * @param {?FrameHistory} frame\n */\nfunction setPrimaryFrame(frame) {\n  // If frame was null (i.e., after history was cleared), avoid overwriting\n  // previous frame. This effectively \x22skips\x22 past nulls.\n  if (primaryFrame) {\n    previousFrame \x3d primaryFrame;\n  }\n  primaryFrame \x3d frame;\n}\n\n/**\n * The history state for a single framed AMP document.\n */\nclass FrameHistory {\n  /**\n   * @param {!AmpUrl} ampUrl\n   * @param {string} groupId\n   */\n  constructor(ampUrl, groupId) {\n    /**\n     * @private {?function((number|undefined), !Map\x3c!FragmentKey, string\x3e)}\n     */\n    this.historyUpdatedHandler_ \x3d null;\n\n    /**\n     * @private {!Array\x3cStackNode\x3e}\n     */\n    this.stack_ \x3d [{pushId: 0}];\n\n    /**\n     * The current stack index for this frame.\n     * @private {number}\n     */\n    this.stackIndex_ \x3d 0;\n\n    /**\n     * The AMP URL that corresponds to this frame.\n     * @private @const\n     */\n    this.ampUrl_ \x3d ampUrl;\n\n    /**\n     * The group id for the viewer item set.\n     * @private {string}\n     */\n    this.groupId_ \x3d groupId;\n\n    /**\n     * Extra forward nodes that aren\x27t include in the stack. This is used\n     * exclusively for forwardCapState.\n     * @private {number}\n     */\n    this.extraNodes_ \x3d 0;\n  }\n\n  /**\n   * Retrieves the current AMP fragment.\n   * @return {!StackNode} Gets the current stack node.\n   */\n  getCurrent() {\n    return this.getStackNode_();\n  }\n\n  /**\n   * @param {number\x3d} index\n   * @return {!StackNode}\n   * @private\n   */\n  getStackNode_(index \x3d this.stackIndex_) {\n    assert(index \x3e\x3d 0 || index \x3c this.stack_.length);\n    return this.stack_[index];\n  }\n\n  /**\n   * @param {!Map\x3c!FragmentKey, string\x3e\x3d} updateFragments\n   * @return {!Map\x3c!FragmentKey, string\x3e}\n   * @private\n   */\n  getNewFragments_(updateFragments \x3d new Map()) {\n    let fragments \x3d this.getStackNode_().fragments || new Map();\n    return new Map([...fragments, ...updateFragments]);\n  }\n\n  /**\n   * Replaces the fragment value.\n   * @param {!Map\x3c!FragmentKey, string\x3e} updateFragments AMP fragments to\n   *     update.\n   * @return {!GoogPromise\x3cundefined\x3e} A promise that resolves when the replace\n   *     is complete.\n   */\n  replace(updateFragments) {\n    return this.update_(\n        this.getStackNode_().pushId, updateFragments, true /* replace */);\n  }\n\n  /**\n   * Pushes the new stack index.\n   * @param {number} pushId The new push id\n   * @param {!Map\x3c!FragmentKey, string\x3e\x3d} updateFragments Updated AMP\n   *     fragments.\n   * @return {!GoogPromise\x3cundefined\x3e} A promise that resolves when the push is\n   *     complete.\n   */\n  push(pushId, updateFragments \x3d undefined) {\n    return this.update_(pushId, updateFragments);\n  }\n\n  /**\n   * @param {number|undefined} pushId\n   * @param {!Map\x3c!FragmentKey, string\x3e|undefined} updateFragments\n   * @param {boolean\x3d} replace\n   * @return {!GoogPromise\x3cundefined\x3e}\n   * @private\n   */\n  update_(pushId, updateFragments, replace \x3d false) {\n    const stackNode \x3d {};\n    const state \x3d {};\n    if (goog.isDef(pushId)) {\n      stackNode.pushId \x3d pushId;\n      state.pushId \x3d pushId;\n    }\n    stackNode.fragments \x3d this.getNewFragments_(updateFragments);\n    assert(this.stackIndex_ \x3e\x3d 0 \x26\x26 this.stackIndex_ \x3c this.stack_.length);\n    if (replace) {\n      this.stack_[this.stackIndex_] \x3d stackNode;\n    } else {\n      this.stackIndex_++;\n      this.stack_.splice(this.stackIndex_, this.stack_.length, stackNode);\n      // This push operation will clear whatever extra nodes we\x27ve had.\n      this.extraNodes_ \x3d 0;\n    }\n    if (!this.isPrimary_()) {\n      return GoogPromise.resolve();\n    }\n    return /** @type {!GoogPromise\x3cundefined\x3e} */ (\n        manager.update(state, this.ampUrl_, stackNode.fragments, replace));\n  }\n\n  /**\n   * Pops the pushId\n   * @param {number} pushId The pushId to pop until we find.\n   * @return {!GoogPromise\x3cundefined\x3e} A promise that resolves when the pop is\n   *     complete.\n   */\n  pop(pushId) {\n    if (!this.isPrimary_()) {\n      // Note that popping history will also pop any fragment parameters that\n      // were added from the frame\x27s AMP URL. It is assumed that all fragment\n      // parameters will have been set before the user can begin interacting\n      // with the frame. If this changes, a \x22refresh\x22 will be needed after every\n      // pop. The request is not primary.\n      // TODO(b/37330338): Remove logging when bug is better understood.\n      const data \x3d {\n        \x27req\x27: this.ampUrl_.getOriginalUrl(),\n        \x27pri\x27: primaryFrame ? primaryFrame.ampUrl_.getOriginalUrl() : undefined\n      };\n      errorLogger.log(new Error(\x27ampHns\x27), {errorContext: {data}});\n      return GoogPromise.reject(\x27not primary\x27);\n    }\n    for (let i \x3d this.stackIndex_; i \x3e\x3d 0; i--) {\n      const stackNode \x3d this.getStackNode_(i);\n      if (stackNode.pushId \x3d\x3d\x3d pushId) {\n        // We shouldnt be popping the first entry.\n        assert(i);\n        return this.popToPushId_(this.getStackNode_(i - 1).pushId);\n      }\n    }\n    return GoogPromise.reject(\x27invalid pushId\x27);\n  }\n\n  /**\n   * Navigates back through history to pop target id. May fail if the user\n   * has changed the page.\n   * @param {number|undefined} pushId The target push id.\n   * @return {!GoogPromise\x3cundefined\x3e} A promise that resolves when the\n   *     backwards navigation is complete.\n   * @private\n   */\n  popToPushId_(pushId) {\n    const currentPushId \x3d manager.getCurrent().state.pushId;\n    if (!manager.isAmpUrlActive(this.ampUrl_)) {\n      // Don\x27t navigate back any farther if our amp url is no longer active.\n      return GoogPromise.resolve();\n    } else if (currentPushId \x3d\x3d\x3d pushId) {\n      return GoogPromise.resolve();\n    } else {\n      // There is still state to pop so go back a step, wait for navigation\n      // to complete, and then check again.\n      return manager.back().then(() \x3d\x3e this.popToPushId_(pushId));\n    }\n  }\n\n  /**\n   * @return {boolean}\n   * @private\n   */\n  isPrimary_() {\n    return this \x3d\x3d primaryFrame;\n  }\n\n  /**\n   * Handles updates to the browser history state when this frame is primary.\n   * @param {number|undefined} pushId The pushId from the popped history state.\n   * @param {!Map\x3c!FragmentKey, string\x3e} fragments The fragments from\n   *     the popped history state.\n   * @private\n   */\n  historyUpdated_(pushId, fragments) {\n    if (pushId !\x3d\x3d this.getStackNode_().pushId) {\n      for (let i \x3d 0; i \x3c this.stack_.length; i++) {\n        const stackNode \x3d this.getStackNode_(i);\n        if (stackNode.pushId \x3d\x3d pushId) {\n          this.stackIndex_ \x3d i;\n          stackNode.fragments \x3d fragments;\n          if (this.historyUpdatedHandler_) {\n            this.historyUpdatedHandler_(pushId, fragments);\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {boolean} maybeNeedsCapstate\n   * @return {!GoogPromise\x3cundefined\x3e}\n   * @private\n   */\n  restoreStack_(maybeNeedsCapstate) {\n    let previousStackLength \x3d previousFrame ?\n        previousFrame.stack_.length + previousFrame.extraNodes_ :\n        0;\n\n    // Take the primary frame position and update the browser history state to\n    // reflect this frame\x27s history state.\n    setPrimaryFrame(this);\n\n    const updatePromises \x3d [];\n    for (let i \x3d 1; i \x3c\x3d this.stackIndex_; i++) {\n      const stackNode \x3d this.getStackNode_(i);\n      const state \x3d {};\n      if (goog.isDef(stackNode.pushId)) {\n        state.pushId \x3d stackNode.pushId;\n      }\n      updatePromises.push(\n          manager.update(state, this.ampUrl_, stackNode.fragments, i \x3d\x3d 0));\n    }\n\n    // If we had no states to push and the previous frame had states in\n    // history then there are going to be residual forward history entries\n    // that don\x27t make sense for the new frame. Push a placeholder state entry\n    // to \x22cap\x22 the forward history.\n    if (maybeNeedsCapstate \x26\x26 !this.stackIndex_ \x26\x26 previousStackLength \x3e 1) {\n      updatePromises.push(\n          manager.update({forwardCapState: true}, this.ampUrl_));\n      updatePromises.push(manager.back());\n      this.extraNodes_ \x3d 1;\n    } else {\n      this.extraNodes_ \x3d 0;\n    }\n\n    return /** @type {!GoogPromise\x3cundefined\x3e} */ (\n        GoogPromise.all(updatePromises));\n  }\n\n  /**\n   * Takes the primary frame position and restores the stack.\n   * @param {!UpdateUrlMode\x3d} updateUrlMode\n   * @return {!GoogPromise\x3cundefined\x3e}\n   */\n  prepareForShow(updateUrlMode \x3d UpdateUrlMode.REPLACE) {\n    // If we already have an active AMP Url that matches, we won\x27t\n    // perform the push or replace.\n    if (manager.isAmpUrlActive(this.ampUrl_)) {\n      // The URL is set before primary is claimed, wiping out all URL\n      // parameters. In the standalone case, however, the URL isn\x27t set. Thus,\n      // the inbound fragment can still be captured.\n      const inboundFragments \x3d getFragmentsFromUrl(manager.getCurrent().url);\n      if (inboundFragments.size) {\n        this.getStackNode_(0).fragments \x3d inboundFragments;\n      }\n      const pushId \x3d manager.getCurrent().state.pushId;\n      if (goog.isDef(pushId)) {\n        this.getStackNode_(0).pushId \x3d pushId;\n        // We won\x27t need a capstate if the URL is already active. The assumption\n        // is that we\x27re transitioning to a previously valid state (reopening\n        // the viewer) or some higher logic has taken care of this.\n        return this.restoreStack_(false /** maybeNeedsCapstate */);\n      } else {\n        // If we don\x27t have a pushId on preparing for show, we fall through\n        // below and do a replace operation to add it. In order for back\n        // to work properly we need to know the difference between pushId\n        // undefined (user tampered state) and pushId 0 (start state).\n        // This won\x27t cause any noticeable URL change, but it will update\n        // the history.state.\n        updateUrlMode \x3d UpdateUrlMode.REPLACE;\n      }\n    }\n    assert(this.stack_.length);\n    const replace \x3d updateUrlMode \x3d\x3d UpdateUrlMode.REPLACE;\n    return manager\n        .update(\n            {pushId: this.getStackNode_(0).pushId, groupId: this.groupId_},\n            this.ampUrl_, this.getStackNode_(0).fragments, replace)\n        .then(() \x3d\x3e this.restoreStack_(replace));\n  }\n\n  /**\n   * Clears the history state associated with this frame if it\x27s the primary\n   * and set the primary to null.\n   * @return {!GoogPromise\x3cundefined\x3e} A promise that resolves when the history\n   *     state has been popped back to the initial state.\n   */\n  prepareForHide() {\n    // Only clear history if there is a primary frame. If there isn\x27t a primary\n    // frame, there shouldn\x27t be anything to clean up!\n    if (!primaryFrame) {\n      return GoogPromise.resolve();\n    }\n    setPrimaryFrame(null);\n    assert(this.stack_.length);\n    return this.popToPushId_(this.getStackNode_(0).pushId);\n  }\n\n  /**\n   * @param {?function((number|undefined), !Map\x3c!FragmentKey, string\x3e)}\n   *     historyUpdatedHandler The function to\n   *     call when the stack index changes as a result of browser navigation.\n   */\n  setHistoryUpdatedHandler(historyUpdatedHandler) {\n    this.historyUpdatedHandler_ \x3d historyUpdatedHandler;\n  }\n}\n\n/**\n * Initializes the frame history global state.\n */\nfunction init() {\n  // Register a handler to manage all history events.\n  manager.addListener(historyListener);\n}\n\ninit();\n\n/**\n * @package\n */\nFrameHistory.testing \x3d {\n  setUp() {\n    init();\n    primaryFrame \x3d null;\n    previousFrame \x3d null;\n  },\n\n  /**\n   * Synthetically call the state change handler.\n   */\n  triggerUrlChange() {\n    historyListener({url: \x27\x27, state: {}}, {url: \x27\x27, state: {}});\n  },\n\n  tearDown() {\n    manager.removeListener(historyListener);\n  },\n};\n\nFrameHistory.StackNode \x3d StackNode;\nexports \x3d FrameHistory;\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/history/frame_history.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/history/handlers.js";
goog.loadModule("/**\n * @fileoverview Message event handlers for history events. This connects\n * FrameHistory to a FrameChannel.\n *\n * Call register() to add handlers to a FrameChannel and FrameHistory.\n * Call unregister() to remove handlers.\n * Call getInitParameters() to get parameters that need to be passed to the AMP\n * iframe to inform it that history handlers are available.\n */\ngoog.module(\x27gws.amp.history.handlers\x27);\n\nconst FragmentKey \x3d goog.require(\x27gws.amp.history.FragmentKey\x27);\nconst FrameChannel \x3d goog.require(\x27amp.messaging.FrameChannel\x27);\nconst FrameHistory \x3d goog.require(\x27gws.amp.history.FrameHistory\x27);\nconst Promise \x3d goog.require(\x27goog.Promise\x27);\nconst asserts \x3d goog.require(\x27goog.asserts\x27);\nconst constants \x3d goog.require(\x27amp.constants\x27);\n\n/**\n * Handles history push requests from the AMP Frame.\n * @param {!FrameHistory} frameHistory History state manager for the\n *     single frame.\n * @param {!Object} payload Contains the new push state data.\n * @return {!Promise\x3c?\x3e} A promise that resolves when the push is complete.\n */\nfunction pushHistoryHandler(frameHistory, payload) {\n  const index \x3d payload[constants.PAYLOAD_PARAMETERS.STACK_INDEX];\n  const fragment \x3d payload[constants.PAYLOAD_PARAMETERS.FRAGMENT];\n  const fragments \x3d new Map();\n  if (goog.isDef(fragment)) {\n    fragments.set(FragmentKey.FRAGMENT, fragment);\n  }\n  return frameHistory.push(index, fragments);\n}\n\n/**\n * Handles history pop requests from the AMP Frame.\n * @param {!FrameHistory} frameHistory History state manager for the\n *     single frame.\n * @param {!Object} payload Contains the stack index of the bottom-most frame to\n *     be popped off.\n * @return {!Promise\x3c?\x3e} A promise that resolves when the pop is complete.\n */\nfunction popHistoryHandler(frameHistory, payload) {\n  const index \x3d payload[constants.PAYLOAD_PARAMETERS.STACK_INDEX];\n  return frameHistory.pop(index);\n}\n\n/**\n * Handles history replace requests from the AMP Frame.\n * @param {!FrameHistory} frameHistory History state manager for the\n *     single frame.\n * @param {!Object} payload Contains the new fragment data.\n * @return {!Promise\x3c?\x3e} A promise that resolves when the replace is complete.\n */\nfunction replaceHistoryHandler(frameHistory, payload) {\n  const fragment \x3d payload[constants.PAYLOAD_PARAMETERS.FRAGMENT];\n  return frameHistory.replace(new Map([[FragmentKey.FRAGMENT, fragment]]));\n}\n\n\n/**\n * Retrieves the current history fragment for the AMP Frame.\n * @param {!FrameHistory} frameHistory History state manager for the\n *     single frame.\n * @return {!Promise\x3c?\x3e} A promise that resolves to the fragment or the empty\n *     string if there is no fragment.\n */\nfunction getFragmentHandler(frameHistory) {\n  const fragments \x3d frameHistory.getCurrent().fragments;\n  return Promise.resolve(fragments.get(FragmentKey.FRAGMENT) || \x27\x27);\n}\n\n/**\n * Handles history state changes from the VIEWER window. This is in response\n * to browser navigation. Pass the update to the AMP Frame.\n * @param {!FrameChannel} frameChannel Where the state change event will be\n *     sent.\n * @param {number|undefined} index The new history stack index.\n * @param {!Map\x3c!FragmentKey, string\x3e} fragments The new history\n *     fragments.\n */\nfunction historyUpdatedHandler(frameChannel, index, fragments) {\n  if (goog.isDef(index)) {\n    const payload \x3d {};\n    payload[constants.PAYLOAD_PARAMETERS.NEW_STACK_INDEX] \x3d index;\n    payload[constants.PAYLOAD_PARAMETERS.FRAGMENT] \x3d\n        fragments.get(FragmentKey.FRAGMENT) || \x27\x27;\n    frameChannel.sendRequest(constants.REQUEST_NAMES.HISTORY_POPPED, payload);\n  }\n}\n\n/**\n * Registers handlers that listen for history messages from the FrameChannel and\n * history update events from the FrameHistory.\n * @param {!FrameChannel} frameChannel Channel that receives history messages.\n * @param {!FrameHistory} frameHistory History state manager for the\n *     single frame.\n */\nfunction register(frameChannel, frameHistory) {\n  // Register handlers that listen for requests from the FrameChannel.\n  frameChannel.registerHandler(\n      constants.REQUEST_NAMES.PUSH_HISTORY,\n      (type, payload, awaitResponse) \x3d\x3e\n          pushHistoryHandler(frameHistory, asserts.assertObject(payload)));\n  frameChannel.registerHandler(\n      constants.REQUEST_NAMES.POP_HISTORY,\n      (type, payload, awaitResponse) \x3d\x3e\n          popHistoryHandler(frameHistory, asserts.assertObject(payload)));\n  frameChannel.registerHandler(\n      constants.REQUEST_NAMES.REPLACE_HISTORY,\n      (type, payload, awaitResponse) \x3d\x3e\n          replaceHistoryHandler(frameHistory, asserts.assertObject(payload)));\n  frameChannel.registerHandler(\n      constants.REQUEST_NAMES.GET_FRAGMENT,\n      (type, payload, awaitResponse) \x3d\x3e getFragmentHandler(frameHistory));\n\n  // Register a handler to receive history update events from the FrameHistory.\n  frameHistory.setHistoryUpdatedHandler(\n      (index, fragments) \x3d\x3e\n          historyUpdatedHandler(frameChannel, index, fragments));\n}\n\n/**\n * Unregisters history handlers.\n * @param {!FrameChannel} frameChannel Channel that receives history messages.\n * @param {!FrameHistory} frameHistory History state manager for the\n *     single frame.\n */\nfunction unregister(frameChannel, frameHistory) {\n  frameChannel.unregisterHandler(constants.REQUEST_NAMES.PUSH_HISTORY);\n  frameChannel.unregisterHandler(constants.REQUEST_NAMES.POP_HISTORY);\n  frameChannel.unregisterHandler(constants.REQUEST_NAMES.REPLACE_HISTORY);\n  frameChannel.unregisterHandler(constants.REQUEST_NAMES.GET_FRAGMENT);\n\n  frameHistory.setHistoryUpdatedHandler(null);\n}\n\n/**\n * @return {!Object\x3c!constants.INIT_PARAMETERS, string\x3e} Parameters to pass to\n * the AMP document for initialization.\n */\nfunction getInitParameters() {\n  const parameters \x3d {};\n  parameters[constants.INIT_PARAMETERS.HISTORY] \x3d \x271\x27;\n  return parameters;\n}\n\n/**\n * @return {!Array\x3c!constants.INIT_PARAMETERS\x3e} The list of capabilities to set\n * when the history is supported.\n */\nfunction getCapabilities() {\n  // TODO(b/67856908) Check config to determine capabilities. This requires a\n  // dependency on config.js.\n}\n\nexports \x3d {\n  getCapabilities,\n  getInitParameters,\n  register,\n  unregister\n};\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/history/handlers.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/item_content_manager.js";
eval("goog.provide(\x27gws.amp.ItemContentManager\x27);\n\ngoog.require(\x27goog.Promise\x27);\ngoog.require(\x27goog.disposable.IDisposable\x27);\ngoog.require(\x27gws.amp.history.FragmentKey\x27);\ngoog.require(\x27gws.amp.history.UpdateUrlMode\x27);\n\n\n/**\n * An interface of a manager that is responsible for the content of a single\n * ViewerItem. Implement to customize the content such as for FrameManager.\n * @extends {goog.disposable.IDisposable}\n * @interface\n */\ngws.amp.ItemContentManager \x3d goog.defineClass(null, {\n  /**\n   * Registers a CSI reporter to fire a tick against once the content has\n   * finished loading and is shown. If there is already a CSI reporter, this\n   * method should ignore the given one.\n   * @param {!gws.amp.csi.Reporter} csi\n   */\n  setCsiReporter: goog.abstractMethod,\n\n\n  /**\n   * Makes sure the item has been prefetched and partially prerendered, so that\n   * something is already visible when it will enter the viewport. Calling this\n   * on an already prerendered or visible item should be a no-op (e.g., we\n   * always call \x22prerender\x22 for next and previous during an item change whether\n   * or not they have already be rendered). However, avoid calling \x22prerender\x22\n   * immediately before \x22show\x22 and just rely on \x22show\x22 when an item is visible\n   * from the start as it can impact document rendering performance b/33708917.\n   */\n  prerender: goog.abstractMethod,\n\n\n  /**\n   * Pauses the content after a short delay.\n   */\n  pause: goog.abstractMethod,\n\n\n  /**\n   * Notifies the content that it is visible. This is expected to arrive after\n   * pausing.\n   */\n  visible: goog.abstractMethod,\n\n  /**\n   * Prepares the content manager to show the content.\n   * @param {!gws.amp.history.UpdateUrlMode} updateUrlMode\n   * @param {boolean\x3d} forceHeader Whether the header should be adjusted.\n   * @return {!goog.Promise\x3cundefined\x3e}\n   */\n  prepareForShow: goog.abstractMethod,\n\n  /**\n   * Shows the content. This is called when the content becomes user visible.\n   * @param {boolean\x3d} opt_clickLogged Whether a click for this item has already\n   * been logged.\n   */\n  show: goog.abstractMethod,\n\n  /**\n   * Prepares the content manager to hide the content.\n   * @return {!goog.Promise\x3cundefined\x3e}\n   */\n  prepareForHide: goog.abstractMethod,\n\n  /**\n   * The document is not user visible anymore, so this updates the\n   * VISIBILITY_STATE and PRERENDER_SIZE in the document.\n   */\n  hide: goog.abstractMethod,\n\n  /**\n   * Update the fragments in the URL.\n   * @param {!Map\x3c!gws.amp.history.FragmentKey, string\x3e} fragments\n   * @return {!goog.Promise\x3cundefined\x3e}\n   */\n  updateFragments: goog.abstractMethod,\n\n\n  /**\n   * Notifies the content that it will probably be unloaded soon.  We expect a\n   * call to actually remove the iframe several milliseconds after this function\n   * was called (but it isn\x27t guaranteed).\n   */\n  sendWillLikelyUnload: goog.abstractMethod,\n\n\n  /**\n   * Sets the content dimensions based on the viewer dimensions.\n   * @param {number} width The viewer width.\n   * @param {number} height The viewer height.\n   */\n  setDimensions: goog.abstractMethod,\n\n\n  /**\n   * @return {boolean} Whether the content should have a header.\n   */\n  hasHeader: goog.abstractMethod,\n\n  /**\n   * @return {boolean} Whether the content thinks the header is visible.\n   */\n  isHeaderShown: goog.abstractMethod,\n\n  /**\n   * @return {string} The title to use for this document in the viewer. This is\n   *     based on the domain of the publisher.\n   */\n  getDomainTitle: goog.abstractMethod,\n\n  /**\n   * @return {?string} The canonical URL of this document. This may fall back to\n   *     AMP url if the canonical cannot be retrieved.\n   */\n  getCanonicalUrl: goog.abstractMethod,\n\n\n  /**\n   * @return {string} The AMP document title to be displayed in the browser\n   *     title bar. This may be the title directly from the AMP document and\n   *     therefore may be anything and should not be trusted for anything other\n   *     than the document.title.\n   */\n  getPageTitle: goog.abstractMethod,\n\n\n  /**\n   * @return {!amp.service.AmpUrl} The AmpUrl of this item.\n   */\n  getAmpUrl: goog.abstractMethod,\n\n\n  /**\n   * Reloads the current content without logging a visibility change.\n   */\n  reloadFrame: goog.abstractMethod,\n\n\n  /**\n   * Removes the content.\n   */\n  removeIframe: goog.abstractMethod,\n\n\n  /**\n   * Enables or disabled scrolling of the content.\n   * @param {boolean} locked Whether scrolling should be locked.\n   */\n  setScrollLock: goog.abstractMethod,\n\n\n  /**\n   * Shows the loading icon if the content is still loading.\n   */\n  showIconIfLoading: goog.abstractMethod,\n\n\n  /**\n   * Hides the loading-icon if it is displayed in this item.\n   */\n  hideLoadingIcon: goog.abstractMethod,\n\n\n  /**\n   * Sets a handler that is called when the content has loaded.\n   * @param {!Function} handler The handler to call on document load.\n   */\n  setDocumentLoadedViewerHandler: goog.abstractMethod,\n\n\n  /**\n   * Focuses the content.\n   */\n  focus: goog.abstractMethod,\n\n\n  /**\n   * Computes a full shareable URL for this item.\n   * @return {string} The full standalone URL.\n   */\n  getStandaloneUrl: goog.abstractMethod,\n\n\n  /**\n   * Returns the container element for this item.  Used for logging.\n   * @return {!Element} This item\x27s container element.\n   */\n  getItemContainer: goog.abstractMethod,\n\n\n  /**\n   * @return {!gws.amp.model.Item} The model for this Item.\n   */\n  getModel: goog.abstractMethod,\n\n\n  /**\n   * @return {boolean} True if the swipe interaction should be logged as part of\n   *     the visibility change when this item becomes visible. False will\n   *     prevent a trigger VED from being included in the visibility log event\n   *     when this item becomes visible.\n   */\n  shouldLogSwipeTrigger: goog.abstractMethod,\n\n\n  /**\n   * Communicates a new scroll top value to the content of a single Viewer Item.\n   * @param {number} The scroll top value.\n   */\n  sendScrollTop: goog.abstractMethod,\n\n  /**\n   * Saves the scroll top position of the document to sessionstorage.  This is\n   * to ensure that the viewer correctly restores the scroll position after\n   * redirecting to an outside page then navigating back to the AMP doc.\n   * see: b/33692335\n   */\n  saveLastScrollTop: goog.abstractMethod,\n\n  /**\n   * Retrieves the saves scroll top position from sessionstorage.\n   */\n  restoreLastScrollTop: goog.abstractMethod\n\n});\n\n\n/**\n * @typedef {function(!gws.amp.ViewerContext, !Element):\n * (!gws.amp.ItemContentManager)}\n */\ngws.amp.ItemContentManager.Provider;\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/item_content_manager.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/prerender_queue.js";
goog.loadModule("/**\n * @fileoverview Description of this file.\n */\ngoog.module(\x27gws.amp.prerenderQueue\x27);\ngoog.module.declareLegacyNamespace();\n\nconst Promise \x3d goog.require(\x27goog.Promise\x27);\nconst Resolver \x3d goog.require(\x27goog.promise.Resolver\x27);\nconst config \x3d goog.require(\x27gws.amp.config\x27);\nconst googArray \x3d goog.require(\x27goog.array\x27);\nconst scheduler \x3d goog.require(\x27search.task.scheduler\x27);\n\n/**\n * @type {?PrerenderQueue} The singleton instance of PrerenderQueue\n */\nlet instance \x3d null;\n\n/**\n * A queue for prerendering amp documents.\n */\nclass PrerenderQueue {\n  constructor() {\n    /**\n     * A list of PrerenderTasks to run.\n     * @private {!Array\x3cfunction() : !Promise\x3e}\n     */\n    this.queue_ \x3d [];\n\n    let viewerConfig \x3d config.getInstance();\n\n    /**\n     * The time before automatically progressing to the next task in the queue.\n     * @private {number}\n     */\n    this.timeout_ \x3d viewerConfig.getPrerenderQueueTimeout();\n\n    /**\n     * A map from currently running tasks to timeout resolvers.\n     * @private {!Map\x3cfunction() : !Promise, !Resolver\x3e}\n     */\n    this.runningTaskMap_ \x3d new Map();\n  }\n\n  /**\n   * Enqueues a prerender task at the end of the queue if it is not yet present.\n   * @param {function() : !Promise} task The task to enqueue\n   */\n  enqueueTask(task) {\n    if (googArray.contains(this.queue_, task) ||\n        this.runningTaskMap_.has(task)) {\n      return;\n    }\n\n    this.queue_.push(task);\n    this.runQueue_();\n  }\n\n  /**\n   * Runs a high priority task ahead of any pending tasks.\n   * @param {function() : !Promise} task The task to enqueue\n   */\n  enqueuePrioritizedTask(task) {\n    if (this.runningTaskMap_.has(task)) {\n      return;\n    }\n    this.runTask_(task);\n  }\n\n  /**\n   * Removes a prerender task from the queue if it is present.\n   * @param {function() : !Promise} task The task to remove.\n   */\n  removeTask(task) {\n    googArray.remove(this.queue_, task);\n    if (this.runningTaskMap_.has(task)) {\n      this.runningTaskMap_.get(task).resolve();\n    }\n  }\n\n  /**\n   * Removes the first PrerenderTask from the queue and runs it. When that task\n   * completes, recurses on the next item from the queue. Repeats this process\n   * until the queue is empty.\n   * @private\n   */\n  runQueue_() {\n    if (this.runningTaskMap_.size \x3e 0 || googArray.isEmpty(this.queue_)) {\n      return;\n    }\n    this.runTask_(this.queue_.shift());\n  }\n\n  /**\n   * Runs a task. When the task completes or times out, runs the queue again.\n   * @param {function() : !Promise} task The task to run.\n   * @private\n   */\n  runTask_(task) {\n    let taskResolver \x3d Promise.withResolver();\n    let timeoutResolver \x3d Promise.withResolver();\n    let progressQueuePromise \x3d\n        Promise.race([taskResolver.promise, timeoutResolver.promise]);\n    this.runningTaskMap_.set(task, timeoutResolver);\n    // TODO(gbick): Consider moving running non-prioritized tasks on next tick.\n    task().then(taskResolver.resolve);\n    scheduler.setTimeout(timeoutResolver.resolve, this.timeout_);\n\n    progressQueuePromise.then(() \x3d\x3e {\n      this.runningTaskMap_.delete(task);\n      this.runQueue_();\n    });\n  }\n}\n\nexports \x3d {\n  /**\n   * @return {!PrerenderQueue} The singleton PrerenderQueue instance.\n   */\n  getInstance() {\n    if (!instance) {\n      instance \x3d new PrerenderQueue();\n    }\n    return instance;\n  },\n\n\n  // Exports for tests\n  testing: {\n    /**\n     * Creates a new PrerenderQueue.\n     * @return {!PrerenderQueue} The new PrerenderQueue.\n     */\n    newQueue() {\n      return new PrerenderQueue();\n    }\n  }\n};\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/prerender_queue.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/safe_url/url_checker.js";
goog.loadModule("goog.module(\x27gws.amp.safeUrl\x27);\ngoog.module.declareLegacyNamespace();\n\nconst Delegate \x3d goog.require(\x27fava.delegate.Delegate\x27);\nconst Delegator \x3d goog.require(\x27fava.delegate.Delegator\x27);\nconst Promise \x3d goog.require(\x27goog.Promise\x27);\n\n/**\n * A singleton delegator for checking if a URL is considered safe to display in\n * the viewer.\n */\nclass SafeUrlDelegator {\n  constructor() {\n    Delegator.makeDelegator(this);\n  }\n\n  /**\n   * Checks if a URL is considered safe to show in the viewer and redirects to\n   * an interstitial if it is not safe.\n   * @param {string} url The url to check.\n   * @param {!Promise} visiblePromise A promise that resolves when the\n   *     ViewerItem associated with the URL becomes visible.\n   */\n  checkUrl(url, visiblePromise) {\n    this.delegate_.checkUrl(url, visiblePromise);\n  }\n}\ngoog.addSingletonGetter(SafeUrlDelegator);\n\n/**\n * The base delegate class.\n * Uses goog.defineClass to play nicely with Delegate construction.\n */\nconst SafeUrlDelegate \x3d goog.defineClass(Delegate, {\n  constructor: function(delegator) {\n    SafeUrlDelegate.base(this, \x27constructor\x27, delegator);\n  },\n\n  /**\n   * Checks if a URL is considered safe to show in the viewer and redirects to\n   * an interstitial if it is not safe.\n   * @param {string} url The url to check.\n   * @param {!Promise} visiblePromise A promise that resolves when the\n   *     ViewerItem associated with the URL becomes visible.\n   */\n  checkUrl: Delegate.callFirst()\n});\nDelegate.setBase(SafeUrlDelegate, SafeUrlDelegator);\n\n/**\n * Checks if a URL is considered safe to show in the viewer and redirects to an\n * interstitial if it is not safe.\n * @param {string} url The url to check.\n * @param {!Promise} visiblePromise A promise that resolves when the\n *     ViewerItem associated with the URL becomes visible. The check will wait\n *     for this to resolve before redirecting to so that other items may be\n *     viewed without interuption.\n */\nfunction checkUrl(url, visiblePromise) {\n  SafeUrlDelegator.getInstance().checkUrl(url, visiblePromise);\n}\n\nexports.checkUrl \x3d checkUrl;\nexports.SafeUrlDelegate \x3d SafeUrlDelegate;\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/safe_url/url_checker.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/visibility_state_manager.js";
goog.loadModule("goog.module(\x27gws.amp.VisibilityStateManager\x27);\ngoog.module.declareLegacyNamespace();\n\nconst array \x3d goog.require(\x27goog.array\x27);\nconst constants \x3d goog.require(\x27amp.constants\x27);\n\n/**\n * A manager that keeps track of the visibility state of a single AMP Document.\n * State diagram:\n * https://docs.google.com/document/d/1cNID0xC-JDkWsRl9d_wbzLv5FPs3ASqI20YeawOJwBM/edit#heading\x3dh.gn83ilr7ifyr\n * The expected transitions are not enforced by this class.\n */\nclass VisibilityStateManager {\n  /**\n   * @param {constants.VISIBILITY_STATES} initialState\n   */\n  constructor(initialState) {\n    /**\n     * The current visibility state.\n     * @private {!constants.VISIBILITY_STATES}\n     */\n    this.state_ \x3d initialState;\n\n    /**\n     * Whether the visibility state is or has ever been visible.\n     * @private {boolean}\n     */\n    this.hasShown_ \x3d false;\n\n    /**\n     * The list of handlers to notify when the state changes.\n     * @private {!Array\x3cfunction(!constants.VISIBILITY_STATES)\x3e}\n     */\n    this.handlers_ \x3d [];\n  }\n\n\n  /**\n   * Registers a handler that will be called every time the state changes.\n   * @param {function(!constants.VISIBILITY_STATES)} handler\n   */\n  registerStateChangeHandler(handler) {\n    this.handlers_.push(handler);\n  }\n\n\n  /**\n   * Unegisters a handler.\n   * @param {function(!constants.VISIBILITY_STATES)} handler\n   */\n  unregisterStateChangeHandler(handler) {\n    array.remove(this.handlers_, handler);\n  }\n\n\n  /**\n   * Sets the state held by the manager and notifies all handlers if the value\n   * changed.\n   * @param {!constants.VISIBILITY_STATES} state\n   */\n  setState(state) {\n    const prevState \x3d this.state_;\n    this.state_ \x3d state;\n    this.hasShown_ \x3d this.hasShown_ || this.isShown();\n\n    if (prevState !\x3d this.state_) {\n      // Clone the handlers list in case it changes during execution.\n      let handlers \x3d array.clone(this.handlers_);\n      for (let i \x3d 0; i \x3c handlers.length; i++) {\n        handlers[i](this.state_);\n      }\n    }\n  }\n\n\n  /**\n   * @return {!constants.VISIBILITY_STATES} The current state.\n   */\n  getState() {\n    return this.state_;\n  }\n\n  /**\n   * Returns whether or not the iframe is shown (e.g. is the state visible).\n   * @returns {boolean}\n   */\n  isShown() {\n    return this.state_ \x3d\x3d constants.VISIBILITY_STATES.VISIBLE;\n  }\n\n  /**\n   * Returns whether or not the iframe has ever been shown (e.g. the state is or\n   * has been visible).\n   * @returns {boolean}\n   */\n  hasShown() {\n    return this.hasShown_;\n  }\n}\n\nexports \x3d VisibilityStateManager;\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/visibility_state_manager.js\n");

$googDebugFname=undefined;
var $googDebugFname="jar:file:java/com/google/gws/plugins/amp/jslayout/errors_html_pinto.jslayout.js.zip!/gws.amp.errors.GenericErrorPageStyleTemplate.jslayout.js";
eval("// -*- mode: js -*-\n/**\n * @fileoverview Generated code, do not modify.\n * Generated from java/com/google/gws/plugins/amp/jslayout/errors.html.\n * Generated by template/prototemplate/jslayout/codegeneration/api_js.tpl.\n *\n * @suppress {uselessCode|transitionalSuspiciousCodeWarnings|extraRequire|missingRequire}\n */\n\n// Below are flags and original source file used to generate this\n// file. Used by ModuleSetsServer to provide edit/refresh for\n// jslayout_js() rules. Omitted in codegeneration/example; cf.\n// example_update.sh.\n/* [[BUILD_ARGS]]\nsource_file: \x22java/com/google/gws/plugins/amp/jslayout/errors.html\x22\nbuilder_arg: \x22java/com/google/gws/plugins/amp/jslayout/errors.html\x22\nbuilder_arg: \x22--artifacts\x22\nbuilder_arg: \x22w,desc_pool,xmb\x22\nbuilder_arg: \x22--gendir\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles\x22\nbuilder_arg: \x22--template_root\x22\nbuilder_arg: \x22,blaze-out/k8-opt/bin\x22\nbuilder_arg: \x22--output_directory\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles\x22\nbuilder_arg: \x22--xtb_basedir\x22\nbuilder_arg: \x22googledata/transconsole/xtb\x22\nbuilder_arg: \x22--mode\x22\nbuilder_arg: \x22single\x22\nbuilder_arg: \x22--stderrthreshold\x3d1\x22\nbuilder_arg: \x22--xmb_output_file_suffix\x22\nbuilder_arg: \x22.gws\x22\nbuilder_arg: \x22--strict_mode\x22\nbuilder_arg: \x22--use_attribute_whitelist\x22\nbuilder_arg: \x22--fill_browserside_param_to_reactive\x22\nbuilder_arg: \x22--jscontroller_type\x3dwiz\x22\nbuilder_arg: \x22--parser_config\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles/googledata/gws/jslayout/parser_config_safe_sanitized\x22\nbuilder_arg: \x22--tc_project\x3dgws\x22\nbuilder_arg: \x22--source_base_dirs\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles\x22\nrenderer_arg: \x22blaze-out/host/bin/template/prototemplate/jslayout/renderer\x22\nrenderer_arg: \x22--input_root\x3dblaze-out/k8-opt/genfiles\x22\nrenderer_arg: \x22--input\x3dblaze-out/k8-opt/genfiles/java/com/google/gws/plugins/amp/jslayout/errors.html.w\x22\nrenderer_arg: \x22--js_output\x3dblaze-out/k8-opt/bin/java/com/google/gws/plugins/amp/jslayout/errors_html_pinto.jslayout.js.zip\x22\nrenderer_arg: \x22--js_wrapper\x22\nrenderer_arg: \x22--entrypoint\x3dtrue\x22\nrenderer_arg: \x22--generate_only_browserside_template\x22\nrenderer_arg: \x22--generate_separate_files_per_template\x22\nrenderer_arg: \x22--use_apps_jspb\x22\nrenderer_arg: \x22--use_reactive\x22\n[[/BUILD_ARGS]] */\n\ngoog.provide(\x27gws.amp.errors.EmptyTemplate\x27);\ngoog.provide(\x27gws.amp.errors.GenericErrorPageJsif0Template\x27);\ngoog.provide(\x27gws.amp.errors.GenericErrorPageStyleTemplate\x27);\ngoog.provide(\x27gws.amp.errors.GenericErrorPageTemplate\x27);\ngoog.provide(\x27gws.amp.errors.IframeUnloadedJsbindMessageGen0Template\x27);\ngoog.provide(\x27gws.amp.errors.IframeUnloadedTemplate\x27);\n\n\n// Forward declaration for JSPB and IDL classes/interfaces.\ngoog.forwardDeclare(\x27jslayout.TemplatePool\x27);\n\n// Reactive and IDL jscontroller classes,\n// IDL classes with static method invocations, enum types,\n// imports used by certain expression language features,\n// reactive and IDL jscontroller JSPB protos,\n// Soy templates used via soyTemplate() built-in.\ngoog.require(\x27jslayout.EvalContext\x27);\ngoog.require(\x27jslayout.InstantiableStrictModeTemplate\x27);\ngoog.require(\x27jslayout.Tag\x27);\ngoog.require(\x27jslayout.builtin\x27);\ngoog.require(\x27jslayout.reactive.templateRegistration\x27);\ngoog.require(\x27jslayout.string\x27);\n\n\n\n\n\n\n\n\n/**\n * A class that wraps a jslayout template and allows rendering the wrapped\n * template. The class can be included in compiled javascript.\n *\n * @param {!jslayout.TemplatePool} templatePool The template pool used to manage\n *    the template.\n * @constructor\n * @extends {jslayout.InstantiableStrictModeTemplate}\n */\ngws.amp.errors.GenericErrorPageStyleTemplate \x3d function(templatePool) {\n  gws.amp.errors.GenericErrorPageStyleTemplate.base(this, \x27constructor\x27, templatePool,\n      gws.amp.errors.GenericErrorPageStyleTemplate.templateKey_);\n\n  // Register this template and the templates transcluded from\n  // here in the template pool. This is needed for both attach()\n  // and instantiate() because even in an attach()ed template\n  // there might be unresolved transclusions that need to be\n  // resolved now.\n  gws.amp.errors.GenericErrorPageStyleTemplate.registerTemplate(templatePool);\n};\ngoog.inherits(gws.amp.errors.GenericErrorPageStyleTemplate, jslayout.InstantiableStrictModeTemplate);\n\n/**\n * Sets the given template parameters into the eval context. The parameters are\n * in the same order that they appear in the template html.\n *\n * This method exists for the purpose of type checked provision of the\n * values, and for proper translation to the internally expected data\n * data format, i.e. for the conversion between the external JsProto\n * or service_js() wrapper type and the internal JSON or JSPB representation.\n *\n * TODO(mesch): Only supports JsProto wrapper API. Other wrapper APIs can\n * be supported easily, as long as they have a way to obtain the JSPB (Array) or\n * JSON (Object) backing data.\n *\n *\n */\ngws.amp.errors.GenericErrorPageStyleTemplate.prototype.fill \x3d function(\n    ) {\n  \n};\n\n\n/**\n * Registers this template in the given template pool. Also registers\n * transcluded templates in the template pool, recursively.\n * @param {!jslayout.TemplatePool} pool\n */\ngws.amp.errors.GenericErrorPageStyleTemplate.registerTemplate \x3d function(pool) {\n   // If we have transcludes, we call registerTemplate() on\n   // transcluded templates. In principle, the transclude\n   // graph may be cyclic, so we need to avoid infinite loops.\n   if (pool.hasTemplate(gws.amp.errors.GenericErrorPageStyleTemplate.templateKey_)) {\n     return;\n   }\n\n   var args \x3d {\n     };\n\n   pool.insertData(\n       jslayout.JsRenderingMode.TRADITIONAL,\n       gws.amp.errors.GenericErrorPageStyleTemplate.templateKey_,\n       args,\n       gws.amp.errors.GenericErrorPageStyleTemplate.templateElements_(),\n       gws.amp.errors.GenericErrorPageStyleTemplate.templateCssRules_(),\n       gws.amp.errors.GenericErrorPageStyleTemplate.templateCommands_(),\n       gws.amp.errors.GenericErrorPageStyleTemplate.templateCommandPositions_);\n   \n\n   \n\n   var argNames \x3d {\n     };\n   pool.setArgNames(gws.amp.errors.GenericErrorPageStyleTemplate.templateKey_, argNames);\n   \n   \n   \n   \n   \n   \n\n   if (goog.DEBUG) {\n     pool.mapClearName(\n         gws.amp.errors.GenericErrorPageStyleTemplate.templateKey_,\n         \x22gws.amp.errors.GenericErrorPageStyleTemplate\x22);\n   }\n};\n\n\n\n\n/**\n * The key used to register the template into the template context.\n * @type {string}\n * @private\n */\ngws.amp.errors.GenericErrorPageStyleTemplate.templateKey_ \x3d \x27t-OjJcAjcTwYI\x27;\n\n\n\n\n\n\n/**\n * A class that wraps a jslayout template and allows rendering the wrapped\n * template. The class can be included in compiled javascript.\n *\n * @param {!jslayout.TemplatePool} templatePool The template pool used to manage\n *    the template.\n * @constructor\n * @extends {jslayout.InstantiableStrictModeTemplate}\n */\ngws.amp.errors.EmptyTemplate \x3d function(templatePool) {\n  gws.amp.errors.EmptyTemplate.base(this, \x27constructor\x27, templatePool,\n      gws.amp.errors.EmptyTemplate.templateKey_);\n\n  // Register this template and the templates transcluded from\n  // here in the template pool. This is needed for both attach()\n  // and instantiate() because even in an attach()ed template\n  // there might be unresolved transclusions that need to be\n  // resolved now.\n  gws.amp.errors.EmptyTemplate.registerTemplate(templatePool);\n};\ngoog.inherits(gws.amp.errors.EmptyTemplate, jslayout.InstantiableStrictModeTemplate);\n\n/**\n * Sets the given template parameters into the eval context. The parameters are\n * in the same order that they appear in the template html.\n *\n * This method exists for the purpose of type checked provision of the\n * values, and for proper translation to the internally expected data\n * data format, i.e. for the conversion between the external JsProto\n * or service_js() wrapper type and the internal JSON or JSPB representation.\n *\n * TODO(mesch): Only supports JsProto wrapper API. Other wrapper APIs can\n * be supported easily, as long as they have a way to obtain the JSPB (Array) or\n * JSON (Object) backing data.\n *\n *\n */\ngws.amp.errors.EmptyTemplate.prototype.fill \x3d function(\n    ) {\n  \n};\n\n\n/**\n * Registers this template in the given template pool. Also registers\n * transcluded templates in the template pool, recursively.\n * @param {!jslayout.TemplatePool} pool\n */\ngws.amp.errors.EmptyTemplate.registerTemplate \x3d function(pool) {\n   // If we have transcludes, we call registerTemplate() on\n   // transcluded templates. In principle, the transclude\n   // graph may be cyclic, so we need to avoid infinite loops.\n   if (pool.hasTemplate(gws.amp.errors.EmptyTemplate.templateKey_)) {\n     return;\n   }\n\n   var args \x3d {\n     };\n\n   pool.insertData(\n       jslayout.JsRenderingMode.TRADITIONAL,\n       gws.amp.errors.EmptyTemplate.templateKey_,\n       args,\n       gws.amp.errors.EmptyTemplate.templateElements_(),\n       gws.amp.errors.EmptyTemplate.templateCssRules_(),\n       gws.amp.errors.EmptyTemplate.templateCommands_(),\n       gws.amp.errors.EmptyTemplate.templateCommandPositions_);\n   \n\n   \n\n   var argNames \x3d {\n     };\n   pool.setArgNames(gws.amp.errors.EmptyTemplate.templateKey_, argNames);\n   \n   \n   \n   \n   \n   \n\n   if (goog.DEBUG) {\n     pool.mapClearName(\n         gws.amp.errors.EmptyTemplate.templateKey_,\n         \x22gws.amp.errors.EmptyTemplate\x22);\n   }\n};\n\n\n\n\n/**\n * The key used to register the template into the template context.\n * @type {string}\n * @private\n */\ngws.amp.errors.EmptyTemplate.templateKey_ \x3d \x27t-OLE2agVFmIw\x27;\n\n\n\n\n\n\n/**\n * A class that wraps a jslayout template and allows rendering the wrapped\n * template. The class can be included in compiled javascript.\n *\n * @param {!jslayout.TemplatePool} templatePool The template pool used to manage\n *    the template.\n * @constructor\n * @extends {jslayout.InstantiableStrictModeTemplate}\n */\ngws.amp.errors.GenericErrorPageTemplate \x3d function(templatePool) {\n  gws.amp.errors.GenericErrorPageTemplate.base(this, \x27constructor\x27, templatePool,\n      gws.amp.errors.GenericErrorPageTemplate.templateKey_);\n\n  // Register this template and the templates transcluded from\n  // here in the template pool. This is needed for both attach()\n  // and instantiate() because even in an attach()ed template\n  // there might be unresolved transclusions that need to be\n  // resolved now.\n  gws.amp.errors.GenericErrorPageTemplate.registerTemplate(templatePool);\n};\ngoog.inherits(gws.amp.errors.GenericErrorPageTemplate, jslayout.InstantiableStrictModeTemplate);\n\n/**\n * Sets the given template parameters into the eval context. The parameters are\n * in the same order that they appear in the template html.\n *\n * This method exists for the purpose of type checked provision of the\n * values, and for proper translation to the internally expected data\n * data format, i.e. for the conversion between the external JsProto\n * or service_js() wrapper type and the internal JSON or JSPB representation.\n *\n * TODO(mesch): Only supports JsProto wrapper API. Other wrapper APIs can\n * be supported easily, as long as they have a way to obtain the JSPB (Array) or\n * JSON (Object) backing data.\n *\n * @param {jslayout.EntryPointData} message\n * @param {jslayout.EntryPointData} message_footer\n * @param {boolean} has_footer\n *\n */\ngws.amp.errors.GenericErrorPageTemplate.prototype.fill \x3d function(\n    message, message_footer, has_footer) {\n  this.fillParam(0, message);\n  this.fillParam(1, message_footer);\n  this.fillParam(2, has_footer);\n  \n};\n\n\n/**\n * Registers this template in the given template pool. Also registers\n * transcluded templates in the template pool, recursively.\n * @param {!jslayout.TemplatePool} pool\n */\ngws.amp.errors.GenericErrorPageTemplate.registerTemplate \x3d function(pool) {\n   // If we have transcludes, we call registerTemplate() on\n   // transcluded templates. In principle, the transclude\n   // graph may be cyclic, so we need to avoid infinite loops.\n   if (pool.hasTemplate(gws.amp.errors.GenericErrorPageTemplate.templateKey_)) {\n     return;\n   }\n\n   var args \x3d {\n     message:0,\n     message_footer:1,\n     has_footer:2};\n\n   pool.insertData(\n       jslayout.JsRenderingMode.TRADITIONAL,\n       gws.amp.errors.GenericErrorPageTemplate.templateKey_,\n       args,\n       gws.amp.errors.GenericErrorPageTemplate.templateElements_(),\n       gws.amp.errors.GenericErrorPageTemplate.templateCssRules_(),\n       gws.amp.errors.GenericErrorPageTemplate.templateCommands_(),\n       gws.amp.errors.GenericErrorPageTemplate.templateCommandPositions_);\n   \n\n   \n\n   var argNames \x3d {\n     message:\x27message\x27,\n     message_footer:\x27message_footer\x27,\n     has_footer:\x27has_footer\x27};\n   pool.setArgNames(gws.amp.errors.GenericErrorPageTemplate.templateKey_, argNames);\n   \n   \n   \n   gws.amp.errors.EmptyTemplate.registerTemplate(pool);\n   gws.amp.errors.GenericErrorPageJsif0Template.registerTemplate(pool);\n   gws.amp.errors.GenericErrorPageStyleTemplate.registerTemplate(pool);\n   \n   \n   \n\n   if (goog.DEBUG) {\n     pool.mapClearName(\n         gws.amp.errors.GenericErrorPageTemplate.templateKey_,\n         \x22gws.amp.errors.GenericErrorPageTemplate\x22);\n   }\n};\n\n\n\n\n/**\n * The key used to register the template into the template context.\n * @type {string}\n * @private\n */\ngws.amp.errors.GenericErrorPageTemplate.templateKey_ \x3d \x27t-Q89p4bQDOf8\x27;\n\n\n\n\n\n\n/**\n * A class that wraps a jslayout template and allows rendering the wrapped\n * template. The class can be included in compiled javascript.\n *\n * @param {!jslayout.TemplatePool} templatePool The template pool used to manage\n *    the template.\n * @constructor\n * @extends {jslayout.InstantiableStrictModeTemplate}\n */\ngws.amp.errors.IframeUnloadedTemplate \x3d function(templatePool) {\n  gws.amp.errors.IframeUnloadedTemplate.base(this, \x27constructor\x27, templatePool,\n      gws.amp.errors.IframeUnloadedTemplate.templateKey_);\n\n  // Register this template and the templates transcluded from\n  // here in the template pool. This is needed for both attach()\n  // and instantiate() because even in an attach()ed template\n  // there might be unresolved transclusions that need to be\n  // resolved now.\n  gws.amp.errors.IframeUnloadedTemplate.registerTemplate(templatePool);\n};\ngoog.inherits(gws.amp.errors.IframeUnloadedTemplate, jslayout.InstantiableStrictModeTemplate);\n\n/**\n * Sets the given template parameters into the eval context. The parameters are\n * in the same order that they appear in the template html.\n *\n * This method exists for the purpose of type checked provision of the\n * values, and for proper translation to the internally expected data\n * data format, i.e. for the conversion between the external JsProto\n * or service_js() wrapper type and the internal JSON or JSPB representation.\n *\n * TODO(mesch): Only supports JsProto wrapper API. Other wrapper APIs can\n * be supported easily, as long as they have a way to obtain the JSPB (Array) or\n * JSON (Object) backing data.\n *\n *\n */\ngws.amp.errors.IframeUnloadedTemplate.prototype.fill \x3d function(\n    ) {\n  \n};\n\n\n/**\n * Registers this template in the given template pool. Also registers\n * transcluded templates in the template pool, recursively.\n * @param {!jslayout.TemplatePool} pool\n */\ngws.amp.errors.IframeUnloadedTemplate.registerTemplate \x3d function(pool) {\n   // If we have transcludes, we call registerTemplate() on\n   // transcluded templates. In principle, the transclude\n   // graph may be cyclic, so we need to avoid infinite loops.\n   if (pool.hasTemplate(gws.amp.errors.IframeUnloadedTemplate.templateKey_)) {\n     return;\n   }\n\n   var args \x3d {\n     };\n\n   pool.insertData(\n       jslayout.JsRenderingMode.TRADITIONAL,\n       gws.amp.errors.IframeUnloadedTemplate.templateKey_,\n       args,\n       gws.amp.errors.IframeUnloadedTemplate.templateElements_(),\n       gws.amp.errors.IframeUnloadedTemplate.templateCssRules_(),\n       gws.amp.errors.IframeUnloadedTemplate.templateCommands_(),\n       gws.amp.errors.IframeUnloadedTemplate.templateCommandPositions_);\n   \n\n   \n\n   var argNames \x3d {\n     };\n   pool.setArgNames(gws.amp.errors.IframeUnloadedTemplate.templateKey_, argNames);\n   \n   \n   \n   gws.amp.errors.GenericErrorPageTemplate.registerTemplate(pool);\n   gws.amp.errors.IframeUnloadedJsbindMessageGen0Template.registerTemplate(pool);\n   \n   \n   \n\n   if (goog.DEBUG) {\n     pool.mapClearName(\n         gws.amp.errors.IframeUnloadedTemplate.templateKey_,\n         \x22gws.amp.errors.IframeUnloadedTemplate\x22);\n   }\n};\n\n\n\n\n/**\n * The key used to register the template into the template context.\n * @type {string}\n * @private\n */\ngws.amp.errors.IframeUnloadedTemplate.templateKey_ \x3d \x27t-ifmEY12mbxQ\x27;\n\n\n\n\n/**\n * A class that wraps a private jslayout template and allows rendering\n * the wrapped template when transcluded from other templates in the\n * same source file. The class only holds static information for use\n * by the transcluding template and is never instantiated.\n *\n * @private\n * @constructor\n */\ngws.amp.errors.IframeUnloadedJsbindMessageGen0Template \x3d function() {};\n\n\n\n\n/**\n * Registers this template in the given template pool. Also registers\n * transcluded templates in the template pool, recursively.\n * @param {!jslayout.TemplatePool} pool\n */\ngws.amp.errors.IframeUnloadedJsbindMessageGen0Template.registerTemplate \x3d function(pool) {\n   // If we have transcludes, we call registerTemplate() on\n   // transcluded templates. In principle, the transclude\n   // graph may be cyclic, so we need to avoid infinite loops.\n   if (pool.hasTemplate(gws.amp.errors.IframeUnloadedJsbindMessageGen0Template.templateKey_)) {\n     return;\n   }\n\n   var args \x3d {\n     };\n\n   pool.insertData(\n       jslayout.JsRenderingMode.TRADITIONAL,\n       gws.amp.errors.IframeUnloadedJsbindMessageGen0Template.templateKey_,\n       args,\n       gws.amp.errors.IframeUnloadedJsbindMessageGen0Template.templateElements_(),\n       gws.amp.errors.IframeUnloadedJsbindMessageGen0Template.templateCssRules_(),\n       gws.amp.errors.IframeUnloadedJsbindMessageGen0Template.templateCommands_(),\n       gws.amp.errors.IframeUnloadedJsbindMessageGen0Template.templateCommandPositions_);\n   \n\n   \n\n   var argNames \x3d {\n     };\n   pool.setArgNames(gws.amp.errors.IframeUnloadedJsbindMessageGen0Template.templateKey_, argNames);\n   \n   \n   \n   \n   \n   \n\n   if (goog.DEBUG) {\n     pool.mapClearName(\n         gws.amp.errors.IframeUnloadedJsbindMessageGen0Template.templateKey_,\n         \x22gws.amp.errors.IframeUnloadedJsbindMessageGen0Template\x22);\n   }\n};\n\n\n\n\n/**\n * The key used to register the template into the template context.\n * @type {string}\n * @private\n */\ngws.amp.errors.IframeUnloadedJsbindMessageGen0Template.templateKey_ \x3d \x27t-CYix2fG9wGU\x27;\n\n\n\n\n\n\n/**\n * A class that wraps a jslayout template and allows rendering the wrapped\n * template. The class can be included in compiled javascript.\n *\n * @param {!jslayout.TemplatePool} templatePool The template pool used to manage\n *    the template.\n * @constructor\n * @extends {jslayout.InstantiableStrictModeTemplate}\n */\ngws.amp.errors.GenericErrorPageJsif0Template \x3d function(templatePool) {\n  gws.amp.errors.GenericErrorPageJsif0Template.base(this, \x27constructor\x27, templatePool,\n      gws.amp.errors.GenericErrorPageJsif0Template.templateKey_);\n\n  // Register this template and the templates transcluded from\n  // here in the template pool. This is needed for both attach()\n  // and instantiate() because even in an attach()ed template\n  // there might be unresolved transclusions that need to be\n  // resolved now.\n  gws.amp.errors.GenericErrorPageJsif0Template.registerTemplate(templatePool);\n};\ngoog.inherits(gws.amp.errors.GenericErrorPageJsif0Template, jslayout.InstantiableStrictModeTemplate);\n\n/**\n * Sets the given template parameters into the eval context. The parameters are\n * in the same order that they appear in the template html.\n *\n * This method exists for the purpose of type checked provision of the\n * values, and for proper translation to the internally expected data\n * data format, i.e. for the conversion between the external JsProto\n * or service_js() wrapper type and the internal JSON or JSPB representation.\n *\n * TODO(mesch): Only supports JsProto wrapper API. Other wrapper APIs can\n * be supported easily, as long as they have a way to obtain the JSPB (Array) or\n * JSON (Object) backing data.\n *\n * @param {jslayout.EntryPointData} message_footer__1\n *\n */\ngws.amp.errors.GenericErrorPageJsif0Template.prototype.fill \x3d function(\n    message_footer__1) {\n  this.fillParam(0, message_footer__1);\n  \n};\n\n\n/**\n * Registers this template in the given template pool. Also registers\n * transcluded templates in the template pool, recursively.\n * @param {!jslayout.TemplatePool} pool\n */\ngws.amp.errors.GenericErrorPageJsif0Template.registerTemplate \x3d function(pool) {\n   // If we have transcludes, we call registerTemplate() on\n   // transcluded templates. In principle, the transclude\n   // graph may be cyclic, so we need to avoid infinite loops.\n   if (pool.hasTemplate(gws.amp.errors.GenericErrorPageJsif0Template.templateKey_)) {\n     return;\n   }\n\n   var args \x3d {\n     message_footer__1:0};\n\n   pool.insertData(\n       jslayout.JsRenderingMode.TRADITIONAL,\n       gws.amp.errors.GenericErrorPageJsif0Template.templateKey_,\n       args,\n       gws.amp.errors.GenericErrorPageJsif0Template.templateElements_(),\n       gws.amp.errors.GenericErrorPageJsif0Template.templateCssRules_(),\n       gws.amp.errors.GenericErrorPageJsif0Template.templateCommands_(),\n       gws.amp.errors.GenericErrorPageJsif0Template.templateCommandPositions_);\n   \n\n   \n\n   var argNames \x3d {\n     message_footer__1:\x27message_footer__1\x27};\n   pool.setArgNames(gws.amp.errors.GenericErrorPageJsif0Template.templateKey_, argNames);\n   \n   \n   \n   \n   \n   \n\n   if (goog.DEBUG) {\n     pool.mapClearName(\n         gws.amp.errors.GenericErrorPageJsif0Template.templateKey_,\n         \x22gws.amp.errors.GenericErrorPageJsif0Template\x22);\n   }\n};\n\n\n\n\n/**\n * The key used to register the template into the template context.\n * @type {string}\n * @private\n */\ngws.amp.errors.GenericErrorPageJsif0Template.templateKey_ \x3d \x27t-preskGaHH7Q\x27;\n\n\n\n\n\n/**\n * The language map expression for the whole file. It\x27s on the first\n * template class in the file so that we have it in a local namespace\n * with an easy to compute name. This expression is meant to be inlined\n * as a number constant by jscompiler.\n * @const {number}\n */\ngws.amp.errors.GenericErrorPageStyleTemplate.LANGUAGE_INDEX \x3d \n  goog.LOCALE \x3d\x3d \x27en\x27 ? -1 :\n  goog.LOCALE \x3d\x3d \x27es\x27 ? 0 :\n  goog.LOCALE \x3d\x3d \x27fr\x27 ? 1 :\n  goog.LOCALE \x3d\x3d \x27de\x27 ? 2 :\n  goog.LOCALE \x3d\x3d \x27ja\x27 ? 3 :\n  goog.LOCALE \x3d\x3d \x27pt-BR\x27 ? 4 :\n  goog.LOCALE \x3d\x3d \x27it\x27 ? 5 :\n  goog.LOCALE \x3d\x3d \x27ru\x27 ? 6 :\n  goog.LOCALE \x3d\x3d \x27es-419\x27 ? 7 :\n  goog.LOCALE \x3d\x3d \x27tr\x27 ? 8 :\n  goog.LOCALE \x3d\x3d \x27pl\x27 ? 9 :\n  goog.LOCALE \x3d\x3d \x27nl\x27 ? 10 :\n  goog.LOCALE \x3d\x3d \x27ar\x27 ? 11 :\n  goog.LOCALE \x3d\x3d \x27zh-CN\x27 ? 12 :\n  goog.LOCALE \x3d\x3d \x27th\x27 ? 13 :\n  goog.LOCALE \x3d\x3d \x27vi\x27 ? 14 :\n  goog.LOCALE \x3d\x3d \x27pt\x27 ? 15 :\n  goog.LOCALE \x3d\x3d \x27zh-TW\x27 ? 16 :\n  goog.LOCALE \x3d\x3d \x27pt-PT\x27 ? 17 :\n  goog.LOCALE \x3d\x3d \x27sv\x27 ? 18 :\n  goog.LOCALE \x3d\x3d \x27id\x27 ? 19 :\n  goog.LOCALE \x3d\x3d \x27in\x27 ? 19 :\n  goog.LOCALE \x3d\x3d \x27ro\x27 ? 20 :\n  goog.LOCALE \x3d\x3d \x27ko\x27 ? 21 :\n  goog.LOCALE \x3d\x3d \x27el\x27 ? 22 :\n  goog.LOCALE \x3d\x3d \x27hu\x27 ? 23 :\n  goog.LOCALE \x3d\x3d \x27da\x27 ? 24 :\n  goog.LOCALE \x3d\x3d \x27fi\x27 ? 25 :\n  goog.LOCALE \x3d\x3d \x27cs\x27 ? 26 :\n  goog.LOCALE \x3d\x3d \x27bg\x27 ? 27 :\n  goog.LOCALE \x3d\x3d \x27iw\x27 ? 28 :\n  goog.LOCALE \x3d\x3d \x27no\x27 ? 29 :\n  goog.LOCALE \x3d\x3d \x27fil\x27 ? 30 :\n  goog.LOCALE \x3d\x3d \x27aa\x27 ? 31 :\n  goog.LOCALE \x3d\x3d \x27ab\x27 ? 32 :\n  goog.LOCALE \x3d\x3d \x27ach\x27 ? 33 :\n  goog.LOCALE \x3d\x3d \x27af\x27 ? 34 :\n  goog.LOCALE \x3d\x3d \x27ak\x27 ? 35 :\n  goog.LOCALE \x3d\x3d \x27am\x27 ? 36 :\n  goog.LOCALE \x3d\x3d \x27ar-EG\x27 ? 37 :\n  goog.LOCALE \x3d\x3d \x27ar-SA\x27 ? 38 :\n  goog.LOCALE \x3d\x3d \x27ar-XB\x27 ? 39 :\n  goog.LOCALE \x3d\x3d \x27as\x27 ? 40 :\n  goog.LOCALE \x3d\x3d \x27ay\x27 ? 41 :\n  goog.LOCALE \x3d\x3d \x27az\x27 ? 42 :\n  goog.LOCALE \x3d\x3d \x27ba\x27 ? 43 :\n  goog.LOCALE \x3d\x3d \x27ban\x27 ? 44 :\n  goog.LOCALE \x3d\x3d \x27be\x27 ? 45 :\n  goog.LOCALE \x3d\x3d \x27bem\x27 ? 46 :\n  goog.LOCALE \x3d\x3d \x27bho\x27 ? 47 :\n  goog.LOCALE \x3d\x3d \x27bi\x27 ? 48 :\n  goog.LOCALE \x3d\x3d \x27bm\x27 ? 49 :\n  goog.LOCALE \x3d\x3d \x27bn\x27 ? 50 :\n  goog.LOCALE \x3d\x3d \x27bo\x27 ? 51 :\n  goog.LOCALE \x3d\x3d \x27br\x27 ? 52 :\n  goog.LOCALE \x3d\x3d \x27bs\x27 ? 53 :\n  goog.LOCALE \x3d\x3d \x27ca\x27 ? 54 :\n  goog.LOCALE \x3d\x3d \x27ceb\x27 ? 55 :\n  goog.LOCALE \x3d\x3d \x27chr\x27 ? 56 :\n  goog.LOCALE \x3d\x3d \x27ckb\x27 ? 57 :\n  goog.LOCALE \x3d\x3d \x27co\x27 ? 58 :\n  goog.LOCALE \x3d\x3d \x27crs\x27 ? 59 :\n  goog.LOCALE \x3d\x3d \x27cy\x27 ? 60 :\n  goog.LOCALE \x3d\x3d \x27de-AT\x27 ? 61 :\n  goog.LOCALE \x3d\x3d \x27de-CH\x27 ? 62 :\n  goog.LOCALE \x3d\x3d \x27dz\x27 ? 63 :\n  goog.LOCALE \x3d\x3d \x27ee\x27 ? 64 :\n  goog.LOCALE \x3d\x3d \x27en-AU\x27 ? 65 :\n  goog.LOCALE \x3d\x3d \x27en-CA\x27 ? 66 :\n  goog.LOCALE \x3d\x3d \x27en-GB\x27 ? 67 :\n  goog.LOCALE \x3d\x3d \x27en-IE\x27 ? 68 :\n  goog.LOCALE \x3d\x3d \x27en-IN\x27 ? 69 :\n  goog.LOCALE \x3d\x3d \x27en-SG\x27 ? 70 :\n  goog.LOCALE \x3d\x3d \x27en-XA\x27 ? 71 :\n  goog.LOCALE \x3d\x3d \x27en-XC\x27 ? 72 :\n  goog.LOCALE \x3d\x3d \x27en-ZA\x27 ? 73 :\n  goog.LOCALE \x3d\x3d \x27eo\x27 ? 74 :\n  goog.LOCALE \x3d\x3d \x27es-AR\x27 ? 75 :\n  goog.LOCALE \x3d\x3d \x27es-BO\x27 ? 76 :\n  goog.LOCALE \x3d\x3d \x27es-CL\x27 ? 77 :\n  goog.LOCALE \x3d\x3d \x27es-CO\x27 ? 78 :\n  goog.LOCALE \x3d\x3d \x27es-CR\x27 ? 79 :\n  goog.LOCALE \x3d\x3d \x27es-DO\x27 ? 80 :\n  goog.LOCALE \x3d\x3d \x27es-EC\x27 ? 81 :\n  goog.LOCALE \x3d\x3d \x27es-GT\x27 ? 82 :\n  goog.LOCALE \x3d\x3d \x27es-HN\x27 ? 83 :\n  goog.LOCALE \x3d\x3d \x27es-MX\x27 ? 84 :\n  goog.LOCALE \x3d\x3d \x27es-NI\x27 ? 85 :\n  goog.LOCALE \x3d\x3d \x27es-PA\x27 ? 86 :\n  goog.LOCALE \x3d\x3d \x27es-PE\x27 ? 87 :\n  goog.LOCALE \x3d\x3d \x27es-PR\x27 ? 88 :\n  goog.LOCALE \x3d\x3d \x27es-PY\x27 ? 89 :\n  goog.LOCALE \x3d\x3d \x27es-SV\x27 ? 90 :\n  goog.LOCALE \x3d\x3d \x27es-US\x27 ? 91 :\n  goog.LOCALE \x3d\x3d \x27es-UY\x27 ? 92 :\n  goog.LOCALE \x3d\x3d \x27es-VE\x27 ? 93 :\n  goog.LOCALE \x3d\x3d \x27et\x27 ? 94 :\n  goog.LOCALE \x3d\x3d \x27eu\x27 ? 95 :\n  goog.LOCALE \x3d\x3d \x27fa\x27 ? 96 :\n  goog.LOCALE \x3d\x3d \x27ff\x27 ? 97 :\n  goog.LOCALE \x3d\x3d \x27fj\x27 ? 98 :\n  goog.LOCALE \x3d\x3d \x27fo\x27 ? 99 :\n  goog.LOCALE \x3d\x3d \x27fr-CA\x27 ? 100 :\n  goog.LOCALE \x3d\x3d \x27fr-CH\x27 ? 101 :\n  goog.LOCALE \x3d\x3d \x27fy\x27 ? 102 :\n  goog.LOCALE \x3d\x3d \x27ga\x27 ? 103 :\n  goog.LOCALE \x3d\x3d \x27gaa\x27 ? 104 :\n  goog.LOCALE \x3d\x3d \x27gd\x27 ? 105 :\n  goog.LOCALE \x3d\x3d \x27gl\x27 ? 106 :\n  goog.LOCALE \x3d\x3d \x27gn\x27 ? 107 :\n  goog.LOCALE \x3d\x3d \x27gsw\x27 ? 108 :\n  goog.LOCALE \x3d\x3d \x27gu\x27 ? 109 :\n  goog.LOCALE \x3d\x3d \x27ha\x27 ? 110 :\n  goog.LOCALE \x3d\x3d \x27haw\x27 ? 111 :\n  goog.LOCALE \x3d\x3d \x27hi\x27 ? 112 :\n  goog.LOCALE \x3d\x3d \x27hr\x27 ? 113 :\n  goog.LOCALE \x3d\x3d \x27ht\x27 ? 114 :\n  goog.LOCALE \x3d\x3d \x27hy\x27 ? 115 :\n  goog.LOCALE \x3d\x3d \x27hz\x27 ? 116 :\n  goog.LOCALE \x3d\x3d \x27ia\x27 ? 117 :\n  goog.LOCALE \x3d\x3d \x27ie\x27 ? 118 :\n  goog.LOCALE \x3d\x3d \x27ig\x27 ? 119 :\n  goog.LOCALE \x3d\x3d \x27ik\x27 ? 120 :\n  goog.LOCALE \x3d\x3d \x27is\x27 ? 121 :\n  goog.LOCALE \x3d\x3d \x27iu\x27 ? 122 :\n  goog.LOCALE \x3d\x3d \x27jv\x27 ? 123 :\n  goog.LOCALE \x3d\x3d \x27ka\x27 ? 124 :\n  goog.LOCALE \x3d\x3d \x27kea\x27 ? 125 :\n  goog.LOCALE \x3d\x3d \x27kg\x27 ? 126 :\n  goog.LOCALE \x3d\x3d \x27ki\x27 ? 127 :\n  goog.LOCALE \x3d\x3d \x27kk\x27 ? 128 :\n  goog.LOCALE \x3d\x3d \x27kl\x27 ? 129 :\n  goog.LOCALE \x3d\x3d \x27km\x27 ? 130 :\n  goog.LOCALE \x3d\x3d \x27kn\x27 ? 131 :\n  goog.LOCALE \x3d\x3d \x27kri\x27 ? 132 :\n  goog.LOCALE \x3d\x3d \x27ks\x27 ? 133 :\n  goog.LOCALE \x3d\x3d \x27ku\x27 ? 134 :\n  goog.LOCALE \x3d\x3d \x27ky\x27 ? 135 :\n  goog.LOCALE \x3d\x3d \x27la\x27 ? 136 :\n  goog.LOCALE \x3d\x3d \x27lb\x27 ? 137 :\n  goog.LOCALE \x3d\x3d \x27lg\x27 ? 138 :\n  goog.LOCALE \x3d\x3d \x27ln\x27 ? 139 :\n  goog.LOCALE \x3d\x3d \x27lo\x27 ? 140 :\n  goog.LOCALE \x3d\x3d \x27loz\x27 ? 141 :\n  goog.LOCALE \x3d\x3d \x27lt\x27 ? 142 :\n  goog.LOCALE \x3d\x3d \x27lua\x27 ? 143 :\n  goog.LOCALE \x3d\x3d \x27lv\x27 ? 144 :\n  goog.LOCALE \x3d\x3d \x27mfe\x27 ? 145 :\n  goog.LOCALE \x3d\x3d \x27mg\x27 ? 146 :\n  goog.LOCALE \x3d\x3d \x27mi\x27 ? 147 :\n  goog.LOCALE \x3d\x3d \x27mk\x27 ? 148 :\n  goog.LOCALE \x3d\x3d \x27ml\x27 ? 149 :\n  goog.LOCALE \x3d\x3d \x27mn\x27 ? 150 :\n  goog.LOCALE \x3d\x3d \x27mr\x27 ? 151 :\n  goog.LOCALE \x3d\x3d \x27ms\x27 ? 152 :\n  goog.LOCALE \x3d\x3d \x27mt\x27 ? 153 :\n  goog.LOCALE \x3d\x3d \x27my\x27 ? 154 :\n  goog.LOCALE \x3d\x3d \x27na\x27 ? 155 :\n  goog.LOCALE \x3d\x3d \x27nd\x27 ? 156 :\n  goog.LOCALE \x3d\x3d \x27ne\x27 ? 157 :\n  goog.LOCALE \x3d\x3d \x27ng\x27 ? 158 :\n  goog.LOCALE \x3d\x3d \x27nn\x27 ? 159 :\n  goog.LOCALE \x3d\x3d \x27nr\x27 ? 160 :\n  goog.LOCALE \x3d\x3d \x27nso\x27 ? 161 :\n  goog.LOCALE \x3d\x3d \x27nv\x27 ? 162 :\n  goog.LOCALE \x3d\x3d \x27ny\x27 ? 163 :\n  goog.LOCALE \x3d\x3d \x27nyn\x27 ? 164 :\n  goog.LOCALE \x3d\x3d \x27oc\x27 ? 165 :\n  goog.LOCALE \x3d\x3d \x27om\x27 ? 166 :\n  goog.LOCALE \x3d\x3d \x27or\x27 ? 167 :\n  goog.LOCALE \x3d\x3d \x27pa\x27 ? 168 :\n  goog.LOCALE \x3d\x3d \x27pcm\x27 ? 169 :\n  goog.LOCALE \x3d\x3d \x27ps\x27 ? 170 :\n  goog.LOCALE \x3d\x3d \x27qu\x27 ? 171 :\n  goog.LOCALE \x3d\x3d \x27rm\x27 ? 172 :\n  goog.LOCALE \x3d\x3d \x27rn\x27 ? 173 :\n  goog.LOCALE \x3d\x3d \x27ro-MD\x27 ? 174 :\n  goog.LOCALE \x3d\x3d \x27rw\x27 ? 175 :\n  goog.LOCALE \x3d\x3d \x27sa\x27 ? 176 :\n  goog.LOCALE \x3d\x3d \x27sc\x27 ? 177 :\n  goog.LOCALE \x3d\x3d \x27sd\x27 ? 178 :\n  goog.LOCALE \x3d\x3d \x27sg\x27 ? 179 :\n  goog.LOCALE \x3d\x3d \x27si\x27 ? 180 :\n  goog.LOCALE \x3d\x3d \x27sk\x27 ? 181 :\n  goog.LOCALE \x3d\x3d \x27sl\x27 ? 182 :\n  goog.LOCALE \x3d\x3d \x27sm\x27 ? 183 :\n  goog.LOCALE \x3d\x3d \x27sn\x27 ? 184 :\n  goog.LOCALE \x3d\x3d \x27so\x27 ? 185 :\n  goog.LOCALE \x3d\x3d \x27sq\x27 ? 186 :\n  goog.LOCALE \x3d\x3d \x27sr\x27 ? 187 :\n  goog.LOCALE \x3d\x3d \x27sr-Latn\x27 ? 188 :\n  goog.LOCALE \x3d\x3d \x27sr-ME\x27 ? 189 :\n  goog.LOCALE \x3d\x3d \x27ss\x27 ? 190 :\n  goog.LOCALE \x3d\x3d \x27st\x27 ? 191 :\n  goog.LOCALE \x3d\x3d \x27su\x27 ? 192 :\n  goog.LOCALE \x3d\x3d \x27sw\x27 ? 193 :\n  goog.LOCALE \x3d\x3d \x27ta\x27 ? 194 :\n  goog.LOCALE \x3d\x3d \x27te\x27 ? 195 :\n  goog.LOCALE \x3d\x3d \x27tg\x27 ? 196 :\n  goog.LOCALE \x3d\x3d \x27ti\x27 ? 197 :\n  goog.LOCALE \x3d\x3d \x27tk\x27 ? 198 :\n  goog.LOCALE \x3d\x3d \x27tlh\x27 ? 199 :\n  goog.LOCALE \x3d\x3d \x27tn\x27 ? 200 :\n  goog.LOCALE \x3d\x3d \x27to\x27 ? 201 :\n  goog.LOCALE \x3d\x3d \x27ts\x27 ? 202 :\n  goog.LOCALE \x3d\x3d \x27tt\x27 ? 203 :\n  goog.LOCALE \x3d\x3d \x27tum\x27 ? 204 :\n  goog.LOCALE \x3d\x3d \x27ug\x27 ? 205 :\n  goog.LOCALE \x3d\x3d \x27uk\x27 ? 206 :\n  goog.LOCALE \x3d\x3d \x27ur\x27 ? 207 :\n  goog.LOCALE \x3d\x3d \x27uz\x27 ? 208 :\n  goog.LOCALE \x3d\x3d \x27vo\x27 ? 209 :\n  goog.LOCALE \x3d\x3d \x27wo\x27 ? 210 :\n  goog.LOCALE \x3d\x3d \x27x-bork\x27 ? 211 :\n  goog.LOCALE \x3d\x3d \x27x-elmer\x27 ? 212 :\n  goog.LOCALE \x3d\x3d \x27x-hacker\x27 ? 213 :\n  goog.LOCALE \x3d\x3d \x27x-piglatin\x27 ? 214 :\n  goog.LOCALE \x3d\x3d \x27x-pirate\x27 ? 215 :\n  goog.LOCALE \x3d\x3d \x27xh\x27 ? 216 :\n  goog.LOCALE \x3d\x3d \x27yi\x27 ? 217 :\n  goog.LOCALE \x3d\x3d \x27ji\x27 ? 217 :\n  goog.LOCALE \x3d\x3d \x27yo\x27 ? 218 :\n  goog.LOCALE \x3d\x3d \x27za\x27 ? 219 :\n  goog.LOCALE \x3d\x3d \x27zh\x27 ? 220 :\n  goog.LOCALE \x3d\x3d \x27zh-HK\x27 ? 221 :\n  goog.LOCALE \x3d\x3d \x27zu\x27 ? 222 :\n  -1;\n\n/**\n * The is_rtl map expression for the whole file, analog to\n * LANGUAGE_INDEX above.\n * @const {boolean}\n */\ngws.amp.errors.GenericErrorPageStyleTemplate.IS_RTL \x3d  \n  goog.LOCALE \x3d\x3d \x27en\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27fr\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27de\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ja\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27pt-BR\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27it\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ru\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es-419\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27tr\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27pl\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27nl\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ar\x27 ? true :\n  goog.LOCALE \x3d\x3d \x27zh-CN\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27th\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27vi\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27pt\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27zh-TW\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27pt-PT\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27sv\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27id\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27in\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ro\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ko\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27el\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27hu\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27da\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27fi\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27cs\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27bg\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27iw\x27 ? true :\n  goog.LOCALE \x3d\x3d \x27no\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27fil\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27aa\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ab\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ach\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27af\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ak\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27am\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ar-EG\x27 ? true :\n  goog.LOCALE \x3d\x3d \x27ar-SA\x27 ? true :\n  goog.LOCALE \x3d\x3d \x27ar-XB\x27 ? true :\n  goog.LOCALE \x3d\x3d \x27as\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ay\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27az\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ba\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ban\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27be\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27bem\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27bho\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27bi\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27bm\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27bn\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27bo\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27br\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27bs\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ca\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ceb\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27chr\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ckb\x27 ? true :\n  goog.LOCALE \x3d\x3d \x27co\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27crs\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27cy\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27de-AT\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27de-CH\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27dz\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ee\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27en-AU\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27en-CA\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27en-GB\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27en-IE\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27en-IN\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27en-SG\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27en-XA\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27en-XC\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27en-ZA\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27eo\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es-AR\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es-BO\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es-CL\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es-CO\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es-CR\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es-DO\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es-EC\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es-GT\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es-HN\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es-MX\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es-NI\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es-PA\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es-PE\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es-PR\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es-PY\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es-SV\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es-US\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es-UY\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27es-VE\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27et\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27eu\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27fa\x27 ? true :\n  goog.LOCALE \x3d\x3d \x27ff\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27fj\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27fo\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27fr-CA\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27fr-CH\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27fy\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ga\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27gaa\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27gd\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27gl\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27gn\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27gsw\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27gu\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ha\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27haw\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27hi\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27hr\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ht\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27hy\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27hz\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ia\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ie\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ig\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ik\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27is\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27iu\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27jv\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ka\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27kea\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27kg\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ki\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27kk\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27kl\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27km\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27kn\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27kri\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ks\x27 ? true :\n  goog.LOCALE \x3d\x3d \x27ku\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ky\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27la\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27lb\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27lg\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ln\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27lo\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27loz\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27lt\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27lua\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27lv\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27mfe\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27mg\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27mi\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27mk\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ml\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27mn\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27mr\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ms\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27mt\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27my\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27na\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27nd\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ne\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ng\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27nn\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27nr\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27nso\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27nv\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ny\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27nyn\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27oc\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27om\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27or\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27pa\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27pcm\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ps\x27 ? true :\n  goog.LOCALE \x3d\x3d \x27qu\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27rm\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27rn\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ro-MD\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27rw\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27sa\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27sc\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27sd\x27 ? true :\n  goog.LOCALE \x3d\x3d \x27sg\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27si\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27sk\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27sl\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27sm\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27sn\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27so\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27sq\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27sr\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27sr-Latn\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27sr-ME\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ss\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27st\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27su\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27sw\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ta\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27te\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27tg\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ti\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27tk\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27tlh\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27tn\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27to\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ts\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27tt\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27tum\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ug\x27 ? true :\n  goog.LOCALE \x3d\x3d \x27uk\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27ur\x27 ? true :\n  goog.LOCALE \x3d\x3d \x27uz\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27vo\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27wo\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27x-bork\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27x-elmer\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27x-hacker\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27x-piglatin\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27x-pirate\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27xh\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27yi\x27 ? true :\n  goog.LOCALE \x3d\x3d \x27ji\x27 ? true :\n  goog.LOCALE \x3d\x3d \x27yo\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27za\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27zh\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27zh-HK\x27 ? false :\n  goog.LOCALE \x3d\x3d \x27zu\x27 ? false :\n  false;\n\n\n\n/**\n * Shape index constant for message 51217.\n * @const {number}\n */\ngws.amp.errors.IframeUnloadedJsbindMessageGen0Template.TRANSLATION_INDEX_1 \x3d [-1,\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, -1, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, 0, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0, -1, 0, -1, -1, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0][gws.amp.errors.GenericErrorPageStyleTemplate.LANGUAGE_INDEX+1];\n\n/**\n * Fragment index constant for message 51217.\n * @const {number}\n */\ngws.amp.errors.IframeUnloadedJsbindMessageGen0Template.FRAGMENT_INDEX_1 \x3d [-1,\n0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, -1, -1, -1, 31, -1, 32, 33, 34, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, 37, 38, -1, -1, -1, -1, 39, -1, 40, 41, -1, -1, 42, 43, 44, 45, 46, 47, 48, 49, 50, -1, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, -1, -1, -1, 1, 73, -1, -1, -1, -1, 74, -1, 75, 76, -1, -1, 77, 78, -1, -1, -1, -1, -1, -1, -1, 79, -1, -1, 80, -1, -1, -1, -1, -1, 81, 82, -1, -1, -1, 83, -1, -1, -1, 84, 85, -1, 86, -1, 87, -1, 88, -1, 89, 90, 91, 92, 93, -1, 94, -1, -1, 95, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, 96, -1, -1, -1, -1, -1, 97, -1, -1, -1, -1, -1, 98, 99, 100, -1, -1, 101, 102, 103, 104, 37, -1, 105, -1, 106, 107, 108, -1, -1, -1, -1, 109, -1, -1, -1, -1, -1, 110, 111, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 112, 113, 114][gws.amp.errors.GenericErrorPageStyleTemplate.LANGUAGE_INDEX+1];\n\n/**\n * Shape index constant for message 593.\n * @const {number}\n */\ngws.amp.errors.IframeUnloadedJsbindMessageGen0Template.TRANSLATION_INDEX_2 \x3d [-1,\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, -1, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, -1, -1, 0, -1, -1, -1, 0, -1, -1, 0, -1, 0, -1, -1, -1, 0, 0, 0, -1, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, 0, -1, -1, 0, -1, 0, -1, 0, -1, 0, 0, -1, -1, 0, 0, 0, 0, -1, -1, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, -1, -1, -1, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, -1, -1, -1, 0, 0, 0][gws.amp.errors.GenericErrorPageStyleTemplate.LANGUAGE_INDEX+1];\n\n/**\n * Fragment index constant for message 593.\n * @const {number}\n */\ngws.amp.errors.IframeUnloadedJsbindMessageGen0Template.FRAGMENT_INDEX_2 \x3d [-1,\n0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, -1, -1, -1, 31, 32, 33, 34, 35, 36, 37, -1, 38, -1, 39, 40, 41, -1, -1, -1, 42, -1, 43, 44, 45, 46, 47, 48, -1, 49, 50, 51, 52, -1, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, -1, 87, 88, 89, 90, 91, 92, 93, 94, -1, 95, 96, -1, 97, 98, 99, 100, -1, -1, 101, -1, -1, -1, 102, -1, -1, 103, -1, 104, -1, -1, -1, 105, 106, 107, -1, 108, -1, -1, -1, 109, 110, 111, 112, 113, 114, 115, 116, 117, -1, 118, 119, 120, 121, 122, -1, 123, -1, -1, 124, -1, 29, -1, 125, -1, 126, 127, -1, -1, 128, 129, 130, 131, -1, -1, 132, 133, 134, -1, 135, 136, -1, 137, 138, 139, -1, 140, 141, 142, 143, 144, 145, -1, 146, -1, 147, 148, 149, -1, -1, -1, -1, 150, -1, -1, 151, 152, 153, 154, 155, 156, -1, 157, -1, 158, 159, -1, 160, 161, -1, -1, -1, 162, 163, 164][gws.amp.errors.GenericErrorPageStyleTemplate.LANGUAGE_INDEX+1];\n\n\n\n\n/**\n * Some object that has all parameters of the templates in\n * this file as properties. Even the unused ones may still be\n * referenced by getters in some unused\n * extern expressions, so we need to convince jscompiler that\n * they can be set.\n * @private\n */\ngws.amp.errors.GenericErrorPageStyleTemplate.args_ \x3d {\n     message: 0,\n     message_footer: 0,\n     has_footer: 0,\n     message_footer__1: 0};\n\n\n// The variables below are expressions from the extern command lists below.\n// The expressions are shared across entry points and referenced at load time,\n// thus the extern command list expressions of ALL entry points MUST appear\n// BEFORE the extern command lists of ALL entry points.\n\n\n/**\n * @param {?} _s\n * @return {?}\n * @this {Element}\n * @suppress {missingProperties} See: b/71631550\n */\ngws.amp.errors.GenericErrorPageStyleTemplate.expr0 \x3d function(_s) {return _s.message_footer__1};\n\n\n/**\n * The extern command lists of this template, if any.\n * @return {!Array.\x3c!Array\x3e}\n * @suppress {missingProperties} See: b/71631550\n */\ngws.amp.errors.GenericErrorPageStyleTemplate.templateCommands_ \x3d function() {\n  return [\n    /* 0 */ [\x27$t\x27,\x27t-OjJcAjcTwYI\x27]];\n};\n\nif (goog.DEBUG) {\n  /**\n   * The extern command list source positions of this template, if any.\n   * @private {!Array.\x3c?string\x3e}\n   */\n  gws.amp.errors.GenericErrorPageStyleTemplate.templateCommandPositions_ \x3d [\n    /* 0 */ \x270:0\x27];\n}\n/**\n * The extern command lists of this template, if any.\n * @return {!Array.\x3c!Array\x3e}\n * @suppress {missingProperties} See: b/71631550\n */\ngws.amp.errors.EmptyTemplate.templateCommands_ \x3d function() {\n  return [\n    /* 0 */ [\x27$t\x27,\x27t-OLE2agVFmIw\x27]];\n};\n\nif (goog.DEBUG) {\n  /**\n   * The extern command list source positions of this template, if any.\n   * @private {!Array.\x3c?string\x3e}\n   */\n  gws.amp.errors.EmptyTemplate.templateCommandPositions_ \x3d [\n    /* 0 */ \x270:0\x27];\n}\n/**\n * The extern command lists of this template, if any.\n * @return {!Array.\x3c!Array\x3e}\n * @suppress {missingProperties} See: b/71631550\n */\ngws.amp.errors.GenericErrorPageTemplate.templateCommands_ \x3d function() {\n  return [\n    /* 0 */ [\x27$t\x27,\x27t-Q89p4bQDOf8\x27,\x27var\x27,function(_s) {return _s.message_footer__1 \x3d _s.message_footer\x3d\x3dnull?jslayout.builtin.bind(\x27t-OLE2agVFmIw\x27):_s.message_footer},\x27$a\x27,[7,,,,,\x27gaymbi160LL__error-page\x27]], \n    /* 1 */ [\x27$up\x27,[\x27t-OjJcAjcTwYI\x27,{}]], \n    /* 2 */ [\x27$a\x27,[7,,,,,\x27gaymbi160LL__message\x27],\x27$ue\x27,function(_s) {return _s.message}], \n    /* 3 */ [\x27$if\x27,function(_s) {return _s.has_footer},\x27$up\x27,[\x27t-preskGaHH7Q\x27,{message_footer__1:gws.amp.errors.GenericErrorPageStyleTemplate.expr0}]], \n    /* 4 */ [\x27$a\x27,[7,,,,,\x27gaymbi160LL__amp-logo\x27,,1],\x27$a\x27,[8,,,,\x27/images/amp/error_page_amp_logo.png\x27,\x27src\x27,,1],\x27$a\x27,[0,,,,\x27Accelerated Mobile Pages\x27,\x27alt\x27,,1]]];\n};\n\nif (goog.DEBUG) {\n  /**\n   * The extern command list source positions of this template, if any.\n   * @private {!Array.\x3c?string\x3e}\n   */\n  gws.amp.errors.GenericErrorPageTemplate.templateCommandPositions_ \x3d [\n    /* 0 */ \x2750:63\x27, \n    /* 1 */ \x2753:40\x27, \n    /* 2 */ \x2755:31\x27, \n    /* 3 */ \x2756:14\x27, \n    /* 4 */ \x2754:3\x27];\n}\n/**\n * The extern command lists of this template, if any.\n * @return {!Array.\x3c!Array\x3e}\n * @suppress {missingProperties} See: b/71631550\n */\ngws.amp.errors.IframeUnloadedTemplate.templateCommands_ \x3d function() {\n  return [\n    /* 0 */ [\x27$t\x27,\x27t-ifmEY12mbxQ\x27,\x27$up\x27,[\x27t-Q89p4bQDOf8\x27,{has_footer:function(_s) {return false},message:function(_s) {return jslayout.builtin.bind(\x27t-CYix2fG9wGU\x27,{})},message_footer:function(_s) {return null}}]]];\n};\n\nif (goog.DEBUG) {\n  /**\n   * The extern command list source positions of this template, if any.\n   * @private {!Array.\x3c?string\x3e}\n   */\n  gws.amp.errors.IframeUnloadedTemplate.templateCommandPositions_ \x3d [\n    /* 0 */ \x2762:71\x27];\n}\n/**\n * The extern command lists of this template, if any.\n * @return {!Array.\x3c!Array\x3e}\n * @suppress {missingProperties} See: b/71631550\n */\ngws.amp.errors.IframeUnloadedJsbindMessageGen0Template.templateCommands_ \x3d function() {\n  return [\n    /* 0 */ [\x27$t\x27,\x27t-CYix2fG9wGU\x27], \n    /* 1 */ [\x27$a\x27,[7,,,,,\x27gaymbi160LL__no-open\x27,,1]], \n    /* 2 */ [\x27$a\x27,[7,,,,,\x27gaymbi160LL__back\x27,,1]], \n    /* 3 */ [\x27$a\x27,[8,,,,\x27#\x27,\x27href\x27,,1],\x27$a\x27,[7,,,,,\x27amp-bck\x27,,1]]];\n};\n\nif (goog.DEBUG) {\n  /**\n   * The extern command list source positions of this template, if any.\n   * @private {!Array.\x3c?string\x3e}\n   */\n  gws.amp.errors.IframeUnloadedJsbindMessageGen0Template.templateCommandPositions_ \x3d [\n    /* 0 */ \x270:0\x27, \n    /* 1 */ \x270:0\x27, \n    /* 2 */ \x270:0\x27, \n    /* 3 */ \x2781:9\x27];\n}\n/**\n * The extern command lists of this template, if any.\n * @return {!Array.\x3c!Array\x3e}\n * @suppress {missingProperties} See: b/71631550\n */\ngws.amp.errors.GenericErrorPageJsif0Template.templateCommands_ \x3d function() {\n  return [\n    /* 0 */ [\x27$t\x27,\x27t-preskGaHH7Q\x27], \n    /* 1 */ [\x27$a\x27,[7,,,,,\x27gaymbi160LL__footer\x27],\x27$ue\x27,gws.amp.errors.GenericErrorPageStyleTemplate.expr0], \n    /* 2 */ [\x27$a\x27,[7,,,,,\x27gaymbi160LL__separator\x27,,1]]];\n};\n\nif (goog.DEBUG) {\n  /**\n   * The extern command list source positions of this template, if any.\n   * @private {!Array.\x3c?string\x3e}\n   */\n  gws.amp.errors.GenericErrorPageJsif0Template.templateCommandPositions_ \x3d [\n    /* 0 */ \x270:0\x27, \n    /* 1 */ \x270:0\x27, \n    /* 2 */ \x270:0\x27];\n}\n\n\n\n/**\n * The style rules of this template, used for instantiation.\n * @return {!Array}\n */\ngws.amp.errors.GenericErrorPageStyleTemplate.templateCssRules_ \x3d function() {\n  return [\n    [\x27var\x27,function(_s) {return _s.main_text_color \x3d \x27#646464\x27},\x27css\x27,\x27.\x27+\x27gaymbi160LL__error-page\x27+\x27{background-color:white;color:#646464;height:100%;overflow:auto;width:100%;padding-top:54px}\x27,\x27css\x27,\x27.\x27+\x27gaymbi160LL__error-page-content\x27+\x27{padding:90px 20px 0 20px}\x27,\x27css\x27,\x27.\x27+\x27gaymbi160LL__amp-logo\x27+(gws.amp.errors.GenericErrorPageStyleTemplate.IS_RTL?\x27{height:51px;width:195px;margin:80px 24px 40px 0px}\x27:\x27{height:51px;width:195px;margin:80px 0px 40px 24px}\x27),\x27css\x27,\x27.\x27+\x27gaymbi160LL__separator\x27+(gws.amp.errors.GenericErrorPageStyleTemplate.IS_RTL?\x27{border:0;border-top:1px solid #bdbdbd;margin-right:24px;margin-bottom:16px;height:1px}\x27:\x27{border:0;border-top:1px solid #bdbdbd;margin-left:24px;margin-bottom:16px;height:1px}\x27),\x27css\x27,\x27.\x27+\x27gaymbi160LL__footer\x27+\x27{margin:0px 24px 0px 24px;line-height:20px;font-size:13px}\x27,\x27css\x27,\x27.\x27+\x27gaymbi160LL__message\x27+\x27{margin:0px 24px 38px 24px;line-height:20px;font-size:15px}\x27]];\n};\n\n/**\n * The elements of this template, used for instantiation.\n * @return {!Array}\n */\ngws.amp.errors.GenericErrorPageStyleTemplate.templateElements_ \x3d function() {\n  return [\x27style\x27,,1,0];\n};\n\n/**\n * The style rules of this template, used for instantiation.\n * @return {!Array}\n */\ngws.amp.errors.EmptyTemplate.templateCssRules_ \x3d function() {\n  return [];\n};\n\n/**\n * The elements of this template, used for instantiation.\n * @return {!Array}\n */\ngws.amp.errors.EmptyTemplate.templateElements_ \x3d function() {\n  return [\x27jsl\x27,,1,0];\n};\n\n/**\n * The style rules of this template, used for instantiation.\n * @return {!Array}\n */\ngws.amp.errors.GenericErrorPageTemplate.templateCssRules_ \x3d function() {\n  return [];\n};\n\n/**\n * The elements of this template, used for instantiation.\n * @return {!Array}\n */\ngws.amp.errors.GenericErrorPageTemplate.templateElements_ \x3d function() {\n  return [\x27div\x27,,1,0,[[\x27style\x27,,1,1],[\x27img\x27,8,,4],[\x27div\x27,576,1,2],[\x27div\x27,704,1,3]]];\n};\n\n/**\n * The style rules of this template, used for instantiation.\n * @return {!Array}\n */\ngws.amp.errors.IframeUnloadedTemplate.templateCssRules_ \x3d function() {\n  return [\n    [\x27css\x27,\x27.\x27+\x27gaymbi160LL__no-open\x27+\x27{font-weight:bold;margin-bottom:15px}\x27,\x27css\x27,\x27.\x27+\x27gaymbi160LL__back\x27+\x27{text-transform:uppercase}\x27]];\n};\n\n/**\n * The elements of this template, used for instantiation.\n * @return {!Array}\n */\ngws.amp.errors.IframeUnloadedTemplate.templateElements_ \x3d function() {\n  return [\x27div\x27,,1,0,[\x27[moved to #IframeUnloaded__jsbind_message_gen_0]\x27]];\n};\n\n/**\n * The style rules of this template, used for instantiation.\n * @return {!Array}\n */\ngws.amp.errors.IframeUnloadedJsbindMessageGen0Template.templateCssRules_ \x3d function() {\n  return [];\n};\n\n/**\n * The elements of this template, used for instantiation.\n * @return {!Array}\n */\ngws.amp.errors.IframeUnloadedJsbindMessageGen0Template.templateElements_ \x3d function() {\n  return [\x27jsl\x27,,1,0,[[\x27div\x27,,,1,[\x27Can\\\x27t open page\x27,[[\x27\x27,\x27No se puede abrir la p\xe1gina\x27,\x27Impossible d\\\x27ouvrir cette page\x27,\x27Seite kann nicht ge\xf6ffnet werden\x27,\x27\u30da\u30fc\u30b8\u304c\u958b\u304d\u307e\u305b\u3093\x27,\x27N\xe3o \xe9 poss\xedvel abrir a p\xe1gina\x27,\x27Impossibile aprire la pagina\x27,\x27\u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443.\x27,\x27No se puede abrir la p\xe1gina\x27,\x27Sayfa a\xe7\u0131lam\u0131yor\x27,\x27Nie mo\u017cna otworzy\u0107 strony\x27,\x27Kan pagina niet openen\x27,\x27\u064a\u062a\u0639\u0630\u0631 \u0641\u062a\u062d \u0627\u0644\u0635\u0641\u062d\u0629\x27,\x27\u65e0\u6cd5\u6253\u5f00\u9875\u9762\x27,\x27\u0e40\u0e1b\u0e34\u0e14\u0e2b\u0e19\u0e49\u0e32\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\x27,\x27Kh\xf4ng th\u1ec3 m\u1edf trang\x27,\x27N\xe3o \xe9 poss\xedvel abrir a p\xe1gina\x27,\x27\u7121\u6cd5\u958b\u555f\u9801\u9762\x27,\x27N\xe3o \xe9 poss\xedvel abrir a p\xe1gina\x27,\x27Det gick inte att \xf6ppna sidan\x27,\x27Tidak dapat membuka halaman\x27,\x27Nu se poate deschide pagina\x27,\x27\ud398\uc774\uc9c0\ub97c \uc5f4 \uc218 \uc5c6\uc74c\x27,\x27\u0394\u03b5\u03bd \u03b5\u03af\u03bd\u03b1\u03b9 \u03b4\u03c5\u03bd\u03b1\u03c4\u03cc \u03c4\u03bf \u03ac\u03bd\u03bf\u03b9\u03b3\u03bc\u03b1 \u03c4\u03b7\u03c2 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2\x27,\x27Az oldal nem nyithat\xf3 meg\x27,\x27Siden kan ikke \xe5bnes\x27,\x27Sivun avaaminen ep\xe4onnistui.\x27,\x27Str\xe1nku nelze otev\u0159\xedt\x27,\x27\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u0442\u0430 \u043d\u0435 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0441\u0435 \u043e\u0442\u0432\u043e\u0440\u0438\x27,\x27\u05dc\u05d0 \u05e0\u05d9\u05ea\u05df \u05dc\u05e4\u05ea\u05d5\u05d7 \u05d0\u05ea \u05d4\u05d3\u05e3\x27,\x27Kan ikke \xe5pne siden\x27,\x27Hindi mabuksan ang page\x27,\x27Kan nie bladsy oopmaak nie\x27,\x27\u1308\u133d\u1295 \u1218\u12ad\u1348\u1275 \u12a0\u120d\u1270\u127b\u1208\u121d\x27,\x27\u064a\u062a\u0639\u0630\u0631 \u0641\u062a\u062d \u0627\u0644\u0635\u0641\u062d\u0629\x27,\x27\u064a\u062a\u0639\u0630\u0631 \u0641\u062a\u062d \u0627\u0644\u0635\u0641\u062d\u0629\x27,\x27\u200f\u202eCan\u202c\u200f\\\x27\u200f\u202et\u202c\u200f \u200f\u202eopen\u202c\u200f \u200f\u202epage\u202c\u200f\x27,\x27\u09aa\u09c3\u09b7\u09cd\u09a0\u09be \u0996\u09cb\u09b2\u09be \u09af\u09be\u099a\u09cd\u099b\u09c7 \u09a8\u09be\x27,\x27Nije mogu\u0107e otvoriti stranicu\x27,\x27No es pot obrir la p\xe0gina\x27,\x27Pa kapab ouver sa paz\x27,\x27Seite kann nicht ge\xf6ffnet werden\x27,\x27Seite kann nicht ge\xf6ffnet werden\x27,\x27Can\\\x27t open page\x27,\x27Can\\\x27t open page\x27,\x27Can\\\x27t open page\x27,\x27Can\\\x27t open page\x27,\x27Can\\\x27t open page\x27,\x27Can\\\x27t open page\x27,\x27[\xc7\xe5\xf1\\\x27\u0163 \xf6\xfe\xe9\xf1 \xfe\xe5\u011d\xe9 one two]\x27,\x27\u200e\u200f\u200e\u200e\u200e\u200e\u200e\u200f\u200e\u200f\u200f\u200f\u200e\u200e\u200e\u200e\u200e\u200e\u200f\u200e\u200e\u200e\u200e\u200f\u200f\u200e\u200e\u200f\u200e\u200e\u200e\u200e\u200f\u200f\u200e\u200e\u200f\u200e\u200e\u200e\u200e\u200e\u200e\u200f\u200e\u200e\u200e\u200f\u200eCan\\\x27t open page\u200e\u200f\u200e\u200e\u200f\u200e\x27,\x27Can\\\x27t open page\x27,\x27No se puede abrir la p\xe1gina\x27,\x27No se puede abrir la p\xe1gina\x27,\x27No se puede abrir la p\xe1gina\x27,\x27No se puede abrir la p\xe1gina\x27,\x27No se puede abrir la p\xe1gina\x27,\x27No se puede abrir la p\xe1gina\x27,\x27No se puede abrir la p\xe1gina\x27,\x27No se puede abrir la p\xe1gina\x27,\x27No se puede abrir la p\xe1gina\x27,\x27No se puede abrir la p\xe1gina\x27,\x27No se puede abrir la p\xe1gina\x27,\x27No se puede abrir la p\xe1gina\x27,\x27No se puede abrir la p\xe1gina\x27,\x27No se puede abrir la p\xe1gina\x27,\x27No se puede abrir la p\xe1gina\x27,\x27No se puede abrir la p\xe1gina\x27,\x27No se puede abrir la p\xe1gina\x27,\x27No se puede abrir la p\xe1gina\x27,\x27No se puede abrir la p\xe1gina\x27,\x27Lehte ei saa avada\x27,\x27Ezin da ireki orria\x27,\x27\u0635\u0641\u062d\u0647 \u0628\u0627\u0632 \u0646\u0634\u062f\x27,\x27Impossible d\\\x27ouvrir cette page\x27,\x27Non se pode abrir a p\xe1xina\x27,\x27Seite kann nicht ge\xf6ffnet werden\x27,\x27\u0aaa\u0ac3\u0ab7\u0acd\u0aa0 \u0a96\u0acb\u0ab2\u0ac0 \u0ab6\u0a95\u0aa4\u0abe\u0a82 \u0aa8\u0aa5\u0ac0\x27,\x27\u092a\u0947\u091c \u0916\u094b\u0932\u093e \u0928\u0939\u0940\u0902 \u091c\u093e \u0938\u0915\u0924\u093e\x27,\x27Stranica se ne mo\u017ee otvoriti\x27,\x27Getur ekki opna\xf0 s\xed\xf0una\x27,\x27\u10d2\u10d5\u10d4\u10e0\u10d3\u10d8\u10e1 \u10d2\u10d0\u10ee\u10e1\u10dc\u10d0 \u10d5\u10d4\u10e0 \u10ee\u10d4\u10e0\u10ee\u10d3\u10d4\u10d1\u10d0\x27,\x27\u1798\u17b7\u1793\u17a2\u17b6\u1785\u1794\u17be\u1780\u1791\u17c6\u1796\u17d0\u179a\u1794\u17b6\u1793\u1791\u17c1\x27,\x27\u0caa\u0cc1\u0c9f\u0cb5\u0ca8\u0ccd\u0ca8\u0cc1 \u0ca4\u0cc6\u0cb0\u0cc6\u0caf\u0cb2\u0cc1 \u0cb8\u0cbe\u0ca7\u0ccd\u0caf\u0cb5\u0cbe\u0c97\u0cbf\u0cb2\u0ccd\u0cb2\x27,\x27\u0411\u0430\u0440\u0430\u043a \u0430\u0447\u044b\u043b\u0431\u0430\u0439 \u0436\u0430\u0442\u0430\u0442\x27,\x27Impossible d\\\x27ouvrir cette page\x27,\x27\u0e9a\u0ecd\u0ec8\u0eaa\u0eb2\u0ea1\u0eb2\u0e94\u0ec0\u0e9b\u0eb5\u0e94\u0edc\u0ec9\u0eb2\u0ec4\u0e94\u0ec9\x27,\x27Nepavyksta atidaryti puslapio\x27,\x27Nevar atv\u0113rt lapu.\x27,\x27Tsy afa-manokatra pejy\x27,\x27\u041d\u0435 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0441\u0435 \u043e\u0442\u0432\u043e\u0440\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u0442\u0430\x27,\x27\u0d2a\u0d47\u0d1c\u0d4d \u0d24\u0d41\u0d31\u0d15\u0d4d\u0d15\u0d3e\u0d7b \u0d15\u0d34\u0d3f\u0d2f\u0d3f\u0d32\u0d4d\u0d32\x27,\x27\u0445\u0443\u0443\u0434\u0441\u044b\u0433 \u043d\u044d\u044d\u0436 \u0447\u0430\u0434\u0441\u0430\u043d\u0433\u04af\u0439\x27,\x27\u092a\u0943\u0937\u094d\u0920 \u0909\u0918\u0921\u0942 \u0936\u0915\u0924 \u0928\u093e\u0939\u0940\x27,\x27Tidak dapat membuka halaman\x27,\x27\u1005\u102c\u1019\u103b\u1000\u103a\u1014\u103e\u102c\u1000\u102d\u102f \u1016\u103d\u1004\u1037\u103a\u104d\u1019\u101b\u1015\u102b\x27,\x27\u092a\u0943\u0937\u094d\u0920 \u0916\u094b\u0932\u094d\u0928 \u0938\u0915\u093f\u0928\u094d\u0928\x27,\x27\u0a2a\u0a70\u0a28\u0a3e \u0a16\u0a4b\u0a32\u0a4d\u0a39\u0a3f\u0a06 \u0a28\u0a39\u0a40\u0a02 \u0a1c\u0a3e \u0a38\u0a15\u0a26\u0a3e\x27,\x27Nu se poate deschide pagina\x27,\x27\u0db4\u0dd2\u0da7\u0dd4\u0dc0 \u0dc0\u0dd2\u0dc0\u0dd8\u0dad \u0d9a\u0dc5 \u0db1\u0ddc\u0dc4\u0dd0\u0d9a\x27,\x27Str\xe1nku nie je mo\u017en\xe9 otvori\u0165\x27,\x27Strani ni mogo\u010de odpreti\x27,\x27Ma furi karo bogga\x27,\x27Faqja nuk mund t\xeb hapet\x27,\x27\u041e\u0442\u0432\u0430\u0440\u0430\u045a\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043d\u0438\u0458\u0435 \u0443\u0441\u043f\u0435\u043b\u043e\x27,\x27Otvaranje stranice nije uspelo\x27,\x27E hloleha ho bula leqephe\x27,\x27Haiwezi kufungua ukurasa\x27,\x27\u0baa\u0b95\u0bcd\u0b95\u0ba4\u0bcd\u0ba4\u0bc8\u0ba4\u0bcd \u0ba4\u0bbf\u0bb1\u0b95\u0bcd\u0b95 \u0bae\u0bc1\u0b9f\u0bbf\u0baf\u0bb5\u0bbf\u0bb2\u0bcd\u0bb2\u0bc8\x27,\x27\u0c2a\u0c47\u0c1c\u0c40\u0c28\u0c3f \u0c24\u0c46\u0c30\u0c35\u0c21\u0c02 \u0c38\u0c3e\u0c27\u0c4d\u0c2f\u0c2a\u0c21\u0c26\u0c41\x27,\x27Ga re kgone go bula tsebe\x27,\x27\u041d\u0435 \u0432\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u0432\u0456\u0434\u043a\u0440\u0438\u0442\u0438 \u0441\u0442\u043e\u0440\u0456\u043d\u043a\u0443\x27,\x27\u0635\u0641\u062d\u06c1 \u0646\u06c1\u06cc\u06ba \u06a9\u06be\u0648\u0644 \u0633\u06a9\u062a\u0627\x27,\x27\u65e0\u6cd5\u6253\u5f00\u9875\u9762\x27,\x27\u7121\u6cd5\u958b\u555f\u9801\u9762\x27,\x27Ayikwazi ukuvula ikhasi\x27][gws.amp.errors.IframeUnloadedJsbindMessageGen0Template.FRAGMENT_INDEX_1+1]]][gws.amp.errors.IframeUnloadedJsbindMessageGen0Template.TRANSLATION_INDEX_1+1]],[\x27span\x27,,,2,[\x27[ \x27,[\x27a\x27,,,3,[[\x27span\x27,,,,[\x27Back\x27,[[\x27\x27,\x27Atr\xe1s\x27,\x27Retour\x27,\x27Zur\xfcck\x27,\x27\u623b\u308b\x27,\x27Voltar\x27,\x27Indietro\x27,\x27\u041d\u0430\u0437\u0430\u0434\x27,\x27Atr\xe1s\x27,\x27Geri\x27,\x27Wstecz\x27,\x27Terug\x27,\x27\u0631\u062c\u0648\u0639\x27,\x27\u8fd4\u56de\x27,\x27\u0e01\u0e25\u0e31\u0e1a\x27,\x27Quay l\u1ea1i\x27,\x27Voltar\x27,\x27\u8fd4\u56de\x27,\x27Anterior\x27,\x27Tillbaka\x27,\x27Kembali\x27,\x27\xab\x27,\x27\ub4a4\ub85c\x27,\x27\u03a0\u03af\u03c3\u03c9\x27,\x27Vissza\x27,\x27Tilbage\x27,\x27Tak.\x27,\x27Zp\u011bt\x27,\x27\u041d\u0430\u0437\u0430\u0434\x27,\x27\u05d4\u05e7\u05d5\u05d3\u05dd\x27,\x27Tilbake\x27,\x27Bumalik\x27,\x27Terug\x27,\x27Ekyiri\x27,\x27\u1270\u1218\u1208\u1235\x27,\x27\u0631\u062c\u0648\u0639\x27,\x27\u0631\u062c\u0648\u0639\x27,\x27\u200f\u202eBack\u202c\u200f\x27,\x27\u0989\u09ad\u09a4\u09bf \u09af\u09be\u0993\u0995\x27,\x27Geriy\u0259\x27,\x27Mawali\x27,\x27\u041d\u0430\u0437\u0430\u0434\x27,\x27Kunuma\x27,\x27\u09ab\u09bf\u09b0\u09c1\u09a8\x27,\x27Distro\x27,\x27Nazad\x27,\x27Enrere\x27,\x27Balik\x27,\x27\u13a0\u13e8\u13d2\u13a2\x27,\x27\u06af\u0647\u200c\u0695\u0627\u0646\u0647\u200c\u0648\u0647\u200c\x27,\x27Retournen\x27,\x27N\xf4l\x27,\x27Zur\xfcck\x27,\x27Zur\xfcck\x27,\x27Megbe\x27,\x27Back\x27,\x27Back\x27,\x27Back\x27,\x27Back\x27,\x27Back\x27,\x27Back\x27,\x27[\u0411\xe5\xe7\u0137 one]\x27,\x27\u200e\u200f\u200e\u200e\u200e\u200e\u200e\u200f\u200e\u200f\u200f\u200f\u200e\u200e\u200e\u200e\u200e\u200e\u200f\u200e\u200e\u200e\u200e\u200f\u200f\u200e\u200e\u200e\u200f\u200e\u200f\u200e\u200f\u200e\u200e\u200f\u200e\u200f\u200e\u200e\u200e\u200f\u200eBack\u200e\u200f\u200e\u200e\u200f\u200e\x27,\x27Back\x27,\x27Reen\x27,\x27Atr\xe1s\x27,\x27Atr\xe1s\x27,\x27Atr\xe1s\x27,\x27Atr\xe1s\x27,\x27Atr\xe1s\x27,\x27Atr\xe1s\x27,\x27Atr\xe1s\x27,\x27Atr\xe1s\x27,\x27Atr\xe1s\x27,\x27Atr\xe1s\x27,\x27Atr\xe1s\x27,\x27Atr\xe1s\x27,\x27Atr\xe1s\x27,\x27Atr\xe1s\x27,\x27Atr\xe1s\x27,\x27Atr\xe1s\x27,\x27Atr\xe1s\x27,\x27Atr\xe1s\x27,\x27Atr\xe1s\x27,\x27Tagasi\x27,\x27Atzera\x27,\x27\u0628\u0627\u0632\u06af\u0634\u062a\x27,\x27Caggal\x27,\x27Aftur\x27,\x27Revenir\x27,\x27Retour\x27,\x27Foarige\x27,\x27Siar\x27,\x27S\u025b\u025b\x27,\x27Air ais\x27,\x27Atr\xe1s\x27,\x27Zur\xfcck\x27,\x27\u0aaa\u0abe\u0a9b\u0ab3\x27,\x27I Hope\x27,\x27\u0935\u093e\u092a\u0938 \u091c\u093e\u090f\u0902\x27,\x27Nazad\x27,\x27Annavan\x27,\x27Retro\x27,\x27Til baka\x27,\x27\u10e3\u10d9\u10d0\u10dc\x27,\x27Vutuka na ma nima\x27,\x27\u178f\u17d2\u179a\u17a1\u1794\u17cb\x27,\x27\u0cb9\u0cbf\u0c82\u0ca6\u0cc6\x27,\x27Bak\x27,\x27\u06af\u0647\u200c\u0695\u0627\u0646\u0647\u200c\u0648\u0647\u200c\x27,\x27Dayo\x27,\x27Retour\x27,\x27\u0e81\u0eb1\u0e9a\u0e84\u0eb7\u0e99\x27,\x27kuta\x27,\x27Atgal\x27,\x27Kupingana\x27,\x27Atpaka\u013c\x27,\x27Retour\x27,\x27Hiverina\x27,\x27\u041d\u0430\u0437\u0430\u0434\x27,\x27\u0d2e\u0d1f\u0d19\u0d4d\u0d19\u0d41\u0d15\x27,\x27\u0411\u0443\u0446\u0430\u0445\x27,\x27\u092e\u093e\u0917\u0947 \u091c\u093e\x27,\x27Kembali\x27,\x27\u1014\u1031\u102c\u1000\u103a\u101e\u102d\u102f\u1037\x27,\x27\u092a\u091b\u093e\u0921\u093f\x27,\x27Morago\x27,\x27Bwererani\x27,\x27Enyima\x27,\x27\u0b2a\u0b1b\u0b15\u0b41\x27,\x27\u0a2a\u0a3f\u0a71\u0a1b\u0a47\x27,\x27Back\x27,\x27\u0634\u0627\u062a\u0647\x27,\x27Inyuma\x27,\x27\xab\x27,\x27Inyuma\x27,\x27Torra\x27,\x27\u067e\u0648\u0626\u062a\u064a\x27,\x27\u0d86\u0db4\u0dc3\u0dd4\x27,\x27Sp\xe4\u0165\x27,\x27Nazaj\x27,\x27Dzoka\x27,\x27Noqo\x27,\x27Mbrapa\x27,\x27\u041d\u0430\u0437\u0430\u0434\x27,\x27Nazad\x27,\x27Nazad\x27,\x27Khutla\x27,\x27Nyuma\x27,\x27\u0bae\u0bc1\u0ba8\u0bcd\u0ba4\u0bc8\u0baf\u0ba4\u0bc1\x27,\x27\u0c35\u0c46\u0c28\u0c41\u0c15\u0c15\u0c41\x27,\x27Boela fa morago\x27,\x27\u0410\u0440\u0442\u043a\u0430\x27,\x27Kumasinda\x27,\x27\u0642\u0627\u064a\u062a\x27,\x27\u041d\u0430\u0437\u0430\u0434\x27,\x27\u067e\u06cc\u0686\u06be\u06d2\x27,\x27Orqaga\x27,\x27Dellu\x27,\x27Back\x27,\x2784cK\x27,\x27Aft\x27,\x27Emva\x27,\x27\u8fd4\u56de\x27,\x27\u4e0a\u4e00\u9801\x27,\x27Emuva\x27][gws.amp.errors.IframeUnloadedJsbindMessageGen0Template.FRAGMENT_INDEX_2+1]]][gws.amp.errors.IframeUnloadedJsbindMessageGen0Template.TRANSLATION_INDEX_2+1]]]],\x27 ]\x27]]]];\n};\n\n/**\n * The style rules of this template, used for instantiation.\n * @return {!Array}\n */\ngws.amp.errors.GenericErrorPageJsif0Template.templateCssRules_ \x3d function() {\n  return [];\n};\n\n/**\n * The elements of this template, used for instantiation.\n * @return {!Array}\n */\ngws.amp.errors.GenericErrorPageJsif0Template.templateElements_ \x3d function() {\n  return [\x27\x27,,1,0,[[\x27hr\x27,8,,2],[\x27div\x27,576,1,1]]];\n};\n\n\n\n\n\n// Controller registration code generated by:\n// template/prototemplate/jslayout/javascript/controller_registration_js.tpl\n\n\n// Auto controller/template registration for reactive templates generated by:\n// template/prototemplate/jslayout/javascript/controller_registration_js.tpl\njslayout.reactive.templateRegistration.registerTemplate(\n    gws.amp.errors.GenericErrorPageStyleTemplate.registerTemplate);\njslayout.reactive.templateRegistration.registerTemplate(\n    gws.amp.errors.EmptyTemplate.registerTemplate);\njslayout.reactive.templateRegistration.registerTemplate(\n    gws.amp.errors.GenericErrorPageTemplate.registerTemplate);\njslayout.reactive.templateRegistration.registerTemplate(\n    gws.amp.errors.IframeUnloadedTemplate.registerTemplate);\njslayout.reactive.templateRegistration.registerTemplate(\n    gws.amp.errors.IframeUnloadedJsbindMessageGen0Template.registerTemplate);\njslayout.reactive.templateRegistration.registerTemplate(\n    gws.amp.errors.GenericErrorPageJsif0Template.registerTemplate);\n\n\n//# sourceURL\x3dhttps://qs/jar:file:java/com/google/gws/plugins/amp/jslayout/errors_html_pinto.jslayout.js.zip!/gws.amp.errors.GenericErrorPageStyleTemplate.jslayout.js\n");

$googDebugFname=undefined;
var $googDebugFname="java/com/google/gws/common/api/amp/click_fallback.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.gws.common.api.amp.ClickFallbackType\x27);\n\n/**\n * @enum {number}\n */\nproto.gws.common.api.amp.ClickFallbackType \x3d {\n  UNSPECIFIED: 0,\n  INLINE: 1,\n  OTHER_INLINE: 2,\n  CACHE_ERROR: 3\n};\n\n\n//# sourceURL\x3dhttps://qs/java/com/google/gws/common/api/amp/click_fallback.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/amp/handlers/broadcast.js";
goog.loadModule("goog.module(\x27amp.handlers.broadcast\x27);\n\nconst ChannelManager \x3d goog.require(\x27amp.messaging.ChannelManager\x27);\nconst constants \x3d goog.require(\x27amp.constants\x27);\n\n/**\n * Registers a broadcast handler on the FrameChannel. Any received message is\n * broadcast to all frames other than the sender.\n * @param {!amp.messaging.FrameChannel} frameChannel The frame channel to\n *     register a handler on.\n */\nexports.register \x3d (frameChannel) \x3d\x3e {\n  frameChannel.registerHandler(\n      constants.REQUEST_NAMES.BROADCAST, (type, payload, awaitResponse) \x3d\x3e {\n        // Broadcast payload to all other channels, but not back to the sender.\n        // Wait for a response from all receivers if original sender specified\n        // awaitResponse.\n        return ChannelManager.getInstance().broadcastRequest(\n            constants.REQUEST_NAMES.BROADCAST, payload, awaitResponse,\n            frameChannel);\n      });\n};\n\n//# sourceURL\x3dhttps://qs/javascript/amp/handlers/broadcast.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/amp/handlers/client_id.js";
goog.loadModule("/**\n * @fileoverview Provides handlers for client ID requests. This includes client\n * ID querying as well as opting out from the client ID system.\n *\n * Call register() to register the handler on a FrameChannel.\n * Call getCapabilities() to get the capabilities to provide in the init\n *     parameters to the AMP document so that it knows the handler is available.\n * Call getInitParameters() to get the init parameters to be provided to the AMP\n *     document.\n */\ngoog.module(\x27amp.handlers.clientId\x27);\n\nconst AmpUrl \x3d goog.require(\x27amp.service.AmpUrl\x27);\nconst Promise \x3d goog.require(\x27goog.Promise\x27);\nconst constants \x3d goog.require(\x27amp.constants\x27);\n\n/**\n * @typedef {function(string, !Object)}\n */\nlet ClientIdErrorHandler;\n\n/**\n * Retrieves a scoped client ID to be shared with the AMP runtime. Uses the\n * Harmony service, if available.\n * @param {*} payload The client ID request payload.\n * @param {!amp.service.ClientId} clientId The client ID interface.\n * @param {!Promise\x3c!AmpUrl\x3e} finalAmpUrl A promise that resolves to the final\n *     AMP URL for the document.\n * @param {!function():boolean} hasShownFn A function that returns true if the\n *     sending AMP document has been shown.\n * @param {!ClientIdErrorHandler\x3d} errorFn An optional error handler.\n * @return {!Promise\x3c?\x3e|undefined}\n */\nfunction clientIdHandler(\n    payload, clientId, finalAmpUrl, hasShownFn, errorFn \x3d undefined) {\n  if (!hasShownFn()) {\n    if (errorFn) {\n      errorFn(\x27ampDocVisibility\x27, {});\n    }\n    return Promise.reject(\x27document is not visible\x27);\n  }\n  const scope \x3d payload[constants.PAYLOAD_PARAMETERS.SCOPE];\n  const canonicalOrigin \x3d\n      payload[constants.PAYLOAD_PARAMETERS.CANONICAL_ORIGIN];\n  let useClientIdApi \x3d payload[constants.PAYLOAD_PARAMETERS.CLIENT_ID_API];\n\n  return finalAmpUrl.then((ampUrl) \x3d\x3e {\n    const origin \x3d ampUrl.getOriginalOrigin();\n    if (!origin) {\n      return Promise.reject(\x27origin could not be identified\x27);\n    }\n    if (!scope) {\n      return Promise.reject(\x27scope must not be empty\x27);\n    }\n    return clientId.get(origin, canonicalOrigin, scope, useClientIdApi)\n        .then(result \x3d\x3e result.clientId || undefined);\n  });\n}\n\n/**\n * Sets the opt-out flag, disabling client IDs for the current domain.\n * @param {*} payload The client ID request payload.\n * @param {!amp.service.ClientId} clientId The client ID interface.\n * @param {!Promise\x3c!AmpUrl\x3e} finalAmpUrl A promise that resolves to the final\n *     AMP URL for the document.\n * @return {!Promise\x3c?\x3e|undefined}\n * @private\n */\nfunction clientIdOptOutHandler(payload, clientId, finalAmpUrl) {\n  const canonicalOrigin \x3d\n      payload[constants.PAYLOAD_PARAMETERS.CANONICAL_ORIGIN];\n\n  return finalAmpUrl.then((ampUrl) \x3d\x3e {\n    const origin \x3d ampUrl.getOriginalOrigin();\n    if (!origin) {\n      return Promise.reject(\x27origin could not be identified\x27);\n    }\n    return clientId.setOptOut(origin, canonicalOrigin);\n  });\n}\n\n/**\n * Registers handlers for Client ID messages.\n * @param {!amp.messaging.FrameChannel} frameChannel\n * @param {!amp.service.ClientId} clientId The client ID interface.\n * @param {!Promise\x3c!AmpUrl\x3e} finalAmpUrl A promise that resolves to the final\n *     AMP URL for the document.\n * @param {!function():boolean} hasShownFn A function that returns true if the\n *     sending AMP document has been shown.\n * @param {!ClientIdErrorHandler\x3d} errorFn An optional error handler.\n */\nfunction register(\n    frameChannel, clientId, finalAmpUrl, hasShownFn, errorFn \x3d undefined) {\n  frameChannel.registerHandler(\n      constants.REQUEST_NAMES.CLIENT_ID,\n      (type, payload, awaitResponse) \x3d\x3e\n          clientIdHandler(payload, clientId, finalAmpUrl, hasShownFn, errorFn));\n  frameChannel.registerHandler(\n      constants.REQUEST_NAMES.CLIENT_ID_OPT_OUT,\n      (type, payload, awaitResponse) \x3d\x3e\n          clientIdOptOutHandler(payload, clientId, finalAmpUrl));\n}\n\n/**\n * Returns the list of capabilities to set for Client ID support.\n * @return {!Array\x3c!constants.INIT_CAPABILITIES\x3e}\n */\nfunction getCapabilities() {\n  return [constants.INIT_CAPABILITIES.CLIENT_ID_SERVICE];\n}\n\n/**\n * Returns the list of parameters to set for Client ID support.\n * @return {!Object\x3c!constants.INIT_PARAMETERS, string\x3e} Parameters to pass to\n * the AMP document for initialization.\n */\nfunction getInitParameters() {\n  const parameters \x3d {};\n  parameters[constants.INIT_PARAMETERS.CLIENT_ID] \x3d \x271\x27;\n  return parameters;\n}\n\nexports \x3d {\n  getCapabilities,\n  getInitParameters,\n  register\n};\n\n//# sourceURL\x3dhttps://qs/javascript/amp/handlers/client_id.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/amp/handlers/local_storage.js";
goog.loadModule("/**\n * @fileoverview Provides handlers for local storage requests.\n *\n * Call register() to register the handler on a FrameChannel.\n * Call getCapabilities() to get the capabilities to provide in the init\n *     parameters to the AMP doc so that it knows the handler is available.\n */\ngoog.module(\x27amp.handlers.localStorage\x27);\n\nconst Promise \x3d goog.require(\x27goog.Promise\x27);\nconst constants \x3d goog.require(\x27amp.constants\x27);\n\n/**\n * Verifies that the requested origin matches the expected origin. Rejects if\n * verification fails. Resolves if it passes.\n * @param {string} origin the received origin.\n * @param {!Promise\x3c!amp.service.AmpUrl\x3e} ampUrlPromise the AMP URL with the\n *     expetected origin.\n * @return {!Promise} A Promise that resolves when verification is successful.\n */\nfunction verifyOrigin(origin, ampUrlPromise) {\n  return ampUrlPromise.then((ampUrl) \x3d\x3e {\n    if (ampUrl.getOriginalOrigin() !\x3d origin) {\n      return Promise.reject(\x27incorrect origin\x27);\n    }\n  });\n}\n\n/**\n * Handles a loadStore request. Checks if the origin matches the document\x27s\n * expected origin.\n * @param {!amp.service.LocalStorage} localStorage\n * @param {!Promise\x3c!amp.service.AmpUrl\x3e} ampUrl\n * @param {*} payload Contains the origin to load.\n * @return {!Promise\x3c?\x3e} A promise that resolves with the blob\n *     for the origin or rejects if there is an origin mismatch or storage\n *     isn\x27t available.\n */\nfunction loadStoreHandler(localStorage, ampUrl, payload) {\n  const origin \x3d payload[constants.PAYLOAD_PARAMETERS.ORIGIN];\n  return verifyOrigin(origin, ampUrl).then(() \x3d\x3e {\n    return localStorage.get(origin).then((blob) \x3d\x3e {\n      const response \x3d {};\n      response[constants.PAYLOAD_PARAMETERS.BLOB] \x3d blob;\n      return response;\n    });\n  });\n}\n\n/**\n * Handles a saveStore request. Checks if the origin matches the documents\n * expected origin then stores the blob to local storage.\n * @param {!amp.service.LocalStorage} localStorage\n * @param {!Promise\x3c!amp.service.AmpUrl\x3e} ampUrl\n * @param {*} payload Contains the origin and blob to save.\n * @return {!Promise\x3c?\x3e} A promise that resolves once the blob\n *     is saved.\n */\nfunction saveStoreHandler(localStorage, ampUrl, payload) {\n  const origin \x3d payload[constants.PAYLOAD_PARAMETERS.ORIGIN];\n  return verifyOrigin(origin, ampUrl).then(() \x3d\x3e {\n    return localStorage.set(origin, payload[constants.PAYLOAD_PARAMETERS.BLOB]);\n  });\n}\n\n/**\n * Registers storage handlers on the FrameChannel.\n * @param {!amp.messaging.FrameChannel} frameChannel The frame channel to\n *     register a handler on.\n * @param {!amp.service.LocalStorage} localStorage The LocalStorage instance.\n * @param {!Promise\x3c!amp.service.AmpUrl\x3e} ampUrl The AMP Url to verify before\n *     accessing storage.\n */\nfunction register(frameChannel, localStorage, ampUrl) {\n  frameChannel.registerHandler(\n      constants.REQUEST_NAMES.LOAD_STORE, (type, payload, awaitResponse) \x3d\x3e {\n        return loadStoreHandler(localStorage, ampUrl, payload);\n      });\n  frameChannel.registerHandler(\n      constants.REQUEST_NAMES.SAVE_STORE, (type, payload, awaitResponse) \x3d\x3e {\n        return saveStoreHandler(localStorage, ampUrl, payload);\n      });\n}\n\n/**\n * @return {!Object\x3c!constants.INIT_PARAMETERS, string\x3e} Parameters to pass to\n * the AMP document for initialization.\n */\nfunction getInitParameters() {\n  const parameters \x3d {};\n  parameters[constants.INIT_PARAMETERS.STORAGE] \x3d \x271\x27;\n  return parameters;\n}\n\nexports \x3d {\n  getInitParameters,\n  register\n};\n\n//# sourceURL\x3dhttps://qs/javascript/amp/handlers/local_storage.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/amp/handlers/navigate.js";
goog.loadModule("/**\n * @fileoverview Provides a handler for navigateTo requests. This request causes\n * the top frame to navigate to the specified URL. Deep links are supported.\n *\n * Call register() to register the handler on a FrameChannel.\n * Call getCapabilities() to get the capabilities to provide in the init\n *     parameters to the AMP doc so that it knows the handler is available.\n */\ngoog.module(\x27amp.handlers.navigate\x27);\n\nconst Promise \x3d goog.require(\x27goog.Promise\x27);\nconst constants \x3d goog.require(\x27amp.constants\x27);\nconst dom \x3d goog.require(\x27goog.dom\x27);\n\nconst NAVIGATE_TO_SCHEME_BLACKLIST \x3d\n    new Set([\x27javascript\x27, \x27vbscript\x27, \x27data\x27]);\n\n/**\n * Handles navigation requests from the AMP Frame. If successful, this call may\n * not return as the browser will have been redirected to a new URL.\n * @param {*} payload Contains the destination URL.\n * @param {!function():boolean} isShownFn A function that returns true if the\n *     sending AMP document is currently shown.\n * @param {!function(string)} navFn The function that performs navigation to a\n *     specified URL.\n * @return {!Promise\x3c?\x3e}\n */\nfunction navigateToHandler(payload, isShownFn, navFn) {\n  const url \x3d payload[constants.PAYLOAD_PARAMETERS.URL];\n\n  // Use an anchor tag rather than our own URI parser as the browser tends to\n  // be very lenient when parsing the scheme.\n  const scheme \x3d parseSchemeUsingAnchor(url);\n\n  // Validate that URL doesn\x27t use forbidden schemes.\n  if (NAVIGATE_TO_SCHEME_BLACKLIST.has(scheme)) {\n    return Promise.reject(\x27url scheme is invalid\x27);\n  }\n  if (isShownFn()) {\n    navFn(url);\n    return Promise.resolve();\n  }\n  return Promise.reject(\x27hidden frame cannot redirect\x27);\n}\n\n/**\n * Parses scheme from URL using the browser. This is more comprehensive as\n * browser parsing can be very lenient.\n * @param {string} url The raw URL.\n * @return {string} The extracted scheme, if any.\n */\nfunction parseSchemeUsingAnchor(url) {\n  const anchor \x3d dom.createElement(dom.TagName.A);\n  // This intentionally does not use goog.dom.safe.setAnchorHref because we\n  // explicitly want to allow custom protocols for deep linking to apps.\n  anchor.href \x3d url;\n  if (!anchor.protocol) {\n    // IE11 doesn\x27t provide full URL components when parsing relative URLs.\n    // Assigning to itself again does the trick.\n    anchor.href \x3d anchor.href;\n  }\n  const scheme \x3d (anchor.protocol || \x27\x27).toLowerCase();\n  return scheme.endsWith(\x27:\x27) ? scheme.slice(0, -1) : scheme;\n}\n\n/**\n * Registers a handler for navigation.\n * @param {!amp.messaging.FrameChannel} frameChannel\n * @param {!function():boolean} isShownFn A function that returns true if the\n *     sending AMP document is currently shown.\n * @param {!function(string)} navFn The function that performs navigation to a\n *     specified URL.\n */\nfunction register(frameChannel, isShownFn, navFn) {\n  frameChannel.registerHandler(\n      constants.REQUEST_NAMES.NAVIGATE_TO, (type, payload, awaitResponse) \x3d\x3e {\n        return navigateToHandler(payload, isShownFn, navFn);\n      });\n}\n\n/**\n * Returns the list of capabilities to set when the navigate to handler is\n * supported.\n * @return {!Array\x3c!constants.INIT_CAPABILITIES\x3e}\n */\nfunction getCapabilities() {\n  return [constants.INIT_CAPABILITIES.NAVIGATE_TO];\n}\n\nexports \x3d {\n  getCapabilities,\n  register\n};\n\n//# sourceURL\x3dhttps://qs/javascript/amp/handlers/navigate.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/frame_manager.js";
eval("goog.provide(\x27gws.amp.FrameManager\x27);\n\ngoog.require(\x27amp.constants\x27);\ngoog.require(\x27amp.handlers.broadcast\x27);\ngoog.require(\x27amp.handlers.clientId\x27);\ngoog.require(\x27amp.handlers.localStorage\x27);\ngoog.require(\x27amp.handlers.navigate\x27);\ngoog.require(\x27amp.messaging.ChannelManager\x27);\ngoog.require(\x27amp.service.AmpUrlUtil\x27);\ngoog.require(\x27goog.Disposable\x27);\ngoog.require(\x27goog.Promise\x27);\ngoog.require(\x27goog.Uri\x27);\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.async.Delay\x27);\ngoog.require(\x27goog.dom\x27);\ngoog.require(\x27goog.dom.TagName\x27);\ngoog.require(\x27goog.dom.animationFrame\x27);\ngoog.require(\x27goog.dom.classlist\x27);\ngoog.require(\x27goog.dom.safe\x27);\ngoog.require(\x27goog.events\x27);\ngoog.require(\x27goog.math\x27);\ngoog.require(\x27goog.object\x27);\ngoog.require(\x27goog.style\x27);\ngoog.require(\x27goog.uri.utils\x27);\ngoog.require(\x27gws.amp.AmpViewerCss\x27);\ngoog.require(\x27gws.amp.HeaderConfig\x27);\ngoog.require(\x27gws.amp.ItemContentManager\x27);\ngoog.require(\x27gws.amp.ItemFactory\x27);\ngoog.require(\x27gws.amp.VisibilityStateManager\x27);\ngoog.require(\x27gws.amp.config\x27);\ngoog.require(\x27gws.amp.csi.handlers\x27);\ngoog.require(\x27gws.amp.csi.reporters\x27);\ngoog.require(\x27gws.amp.errors.IframeUnloadedTemplate\x27);\ngoog.require(\x27gws.amp.history.FrameHistory\x27);\ngoog.require(\x27gws.amp.history.handlers\x27);\ngoog.require(\x27gws.amp.prerenderQueue\x27);\ngoog.require(\x27gws.amp.safeUrl\x27);\ngoog.require(\x27gws.nav\x27);\ngoog.require(\x27jsaction\x27);\ngoog.require(\x27proto.gws.common.api.amp.ClickFallbackType\x27);\ngoog.require(\x27proto.gws.plugins.amp.jslayout.ViewerType\x27);\ngoog.require(\x27search.log.LogBuilder\x27);\ngoog.require(\x27search.log.errorLogger\x27);\ngoog.require(\x27search.log.ve.util\x27);\ngoog.require(\x27search.task.scheduler\x27);\n\ngoog.scope(function() {\nconst ChannelManager \x3d amp.messaging.ChannelManager;\nconst LogBuilder \x3d goog.module.get(\x27search.log.LogBuilder\x27);\nconst Reporter \x3d goog.module.get(\x27gws.amp.csi.Reporter\x27);\nconst SerpTickType \x3d goog.module.get(\x27gws.amp.csi.metrics\x27).SerpTickType;\nconst ViewerTimings \x3d goog.module.get(\x27gws.amp.csi.handlers\x27).ViewerTimings;\nconst ViewerType \x3d proto.gws.plugins.amp.jslayout.ViewerType;\nconst broadcast \x3d goog.module.get(\x27amp.handlers.broadcast\x27);\nconst clientIdHandlers \x3d goog.module.get(\x27amp.handlers.clientId\x27);\nconst config \x3d gws.amp.config;\nconst constants \x3d amp.constants;\nconst csiHandlers \x3d goog.module.get(\x27gws.amp.csi.handlers\x27);\nconst historyHandlers \x3d goog.module.get(\x27gws.amp.history.handlers\x27);\nconst localStorageHandler \x3d goog.module.get(\x27amp.handlers.localStorage\x27);\nconst navigate \x3d goog.module.get(\x27amp.handlers.navigate\x27);\nconst prerenderQueue \x3d gws.amp.prerenderQueue;\nconst scheduler \x3d goog.module.get(\x27search.task.scheduler\x27);\nconst veUtil \x3d goog.module.get(\x27search.log.ve.util\x27);\n\n/**\n * The possible engagement states, used to ensure that engagement logging takes\n * place at the appropriate times (and not more than once).\n * @enum {number}\n */\nconst EngagementState \x3d {\n  INACTIVE: 0,\n  ACTIVE: 1,\n  DONE: 2\n};\n\n/**\n * Manager for an AMP iframe. It is responsible for creating, destroying, and\n * communicating with the iframe.\n * @implements {gws.amp.ItemContentManager}\n */\ngws.amp.FrameManager \x3d goog.defineClass(goog.Disposable, {\n  statics: {\n    /**\n     * The time to wait for the channel to open after the document has loaded\n     * before logging an error.\n     * @private {number}\n     */\n    CHANNEL_OPEN_TIMER_MS_: 20000,\n\n    /**\n     * The time to wait before assuming we have lost connection to the document\n     * and redirecting. This is only used for ads.\n     * @private {number}\n     */\n    NETWORK_ERROR_REDIRECT_TIMER_MS_: 5000,\n\n    /**\n     * The time to wait before updating the visibility state to PAUSED in a\n     * delayed pause.\n     *\n     * Must be a positive number.\n     *\n     * @private {number}\n     */\n    PAUSED_VISIBILITY_STATE_DELAY_MS_: 800,\n\n    /**\n     * For simplicity, we always set the same PRERENDER_SIZE for all items.\n     * TODO(flaviop): This is highly simplified, not all items should be\n     * treated the same way. In particular, we should add parameters to\n     * configure how many items should have PRERENDER_SIZE of 1 VS 0.\n     * @private {number}\n     */\n    DEFAULT_PRERENDER_SIZE_:\n        constants.COMMON_PRERENDER_SIZE_VALUES.FIRST_SCREEN_ONLY,\n\n    /**\n     * Blacklisted URL schemes for navigateTo message.\n     * @private {!Set\x3cstring\x3e}\n     */\n    NAVIGATE_TO_SCHEME_BLACKLIST_: new Set([\x27javascript\x27, \x27vbscript\x27, \x27data\x27]),\n\n    /**\n     * Log content value for an Item Shown log event.\n     * @private {string}\n     */\n    LOG_ITEM_SHOWN_: \x27ampis\x27,\n\n    /**\n     * Log content value for an Item Prefetch log event.\n     * @private {string}\n     */\n    LOG_ITEM_PREFETCH_: \x27ampipf\x27,\n\n    /**\n     * Log content value for an Item Engagement log event.\n     * @private {string}\n     */\n    LOG_ITEM_ENGAGEMENT_: \x27ampiel\x27,\n\n    /**\n     * Jsaction event indicating an item became visible.\n     * @private {string}\n     */\n    JSACTION_ITEM_VISIBLE_: \x27ampvis\x27,\n\n    /**\n     * Jsaction event indicating an item was viewed for significant time.\n     * It is counted as a result \x22click\x22 by logs processing.\n     * @private {string}\n     */\n    JSACTION_ITEM_VIEWED_: \x27ampview\x27,\n\n    /**\n     * How many screens above the bottom of the document the header should be\n     * shown again. If set to 1, the header will be shown exactly when the\n     * document is scrolled to the bottom. It set to a value less than 1, the\n     * header will never be shown at the bottom of the document.\n     * @private {number}\n     */\n    BOTTOM_HEADER_THRESHOLD_FACTOR_: 1.5,\n\n    // Global CSS classes\n    /** @private{string} */\n    ERROR_BACK_BUTTON_: \x27amp-bck\x27,\n\n    /**\n     * Permissions for the iframe containing the AMP document, to be set in the\n     * allow attribute.\n     *\n     * This string is also present in the viewer template:\n     * http://google3/java/com/google/gws/plugins/amp/jslayout/viewer.html\n     * This is because jslayout does not recognize allow as a non-custom\n     * attribute, and so we need to set its value as a string constant there.\n     * Any change to this string should change that string as well.\n     * See b/67465325.\n     * @private{string}\n     */\n    IFRAME_PERMISSIONS_: \x27geolocation\x27\n  },\n\n\n  /**\n   * @param {!gws.amp.model.Item} model The model for this item.\n   * @param {!gws.amp.ViewerContext} context ViewerContext for accessing\n   *     Viewer services.\n   * @param {!Element} parentElement The parent for any created elements.\n   * @param {?Element} tempOverlay Temporary overlay to enable scrolling or\n   *     null if the overlay should be added.\n   * @param {!gws.amp.HeaderConfig} headerConfig The header config.\n   * @param {string} groupId\n   * @param {!Element\x3d} opt_iframe Optional iframe to attach to the FrameManager\n   * @constructor\n   */\n  constructor: function(\n      model, context, parentElement, tempOverlay, headerConfig, groupId,\n      opt_iframe) {\n    /** @private {!gws.amp.model.Item} */\n    this.model_ \x3d model;\n\n    /**\n     * The viewer containing this item. This is needed to check if the viewer is\n     * open.\n     * @private @const {!gws.amp.ViewerContext}\n     */\n    this.context_ \x3d context;\n\n    /** @private @const {!Element} */\n    this.parentElement_ \x3d parentElement;\n\n    // TODO(alexfischer): This should be rendered browser-side.\n    /** @private {!Element} */\n    this.temporaryOverlay_ \x3d tempOverlay || this.addTempOverlay_();\n\n    /** @private {?Element} */\n    this.iframe_ \x3d opt_iframe ? opt_iframe : null;\n\n    /** @private {boolean} */\n    this.isPrefetched_ \x3d false;\n\n    /** @private {?Element} */\n    this.srpLink_ \x3d this.model_.getSrpLink();\n\n    /** @private @const {!gws.amp.HeaderConfig} */\n    this.headerConfig_ \x3d headerConfig;\n\n    /**\n     * Whether the channel opened message has been received from the document.\n     * Used for logging.\n     * @private {boolean}\n     */\n    this.channelOpened_ \x3d false;\n\n    /**\n     * Whether the document loaded message has been received from the document.\n     * Used for logging.\n     * @private {boolean}\n     */\n    this.documentLoaded_ \x3d false;\n\n    /**\n     * An external handler to call when the document has loaded.  This is used\n     * to allow the viewer to know when the document\x27s title has been populated.\n     * @private {?Function}\n     */\n    this.documentLoadedViewerHandler_ \x3d null;\n\n    /**\n     * A promise that is resolved once the document is loaded.\n     * @private {!goog.promise.Resolver}\n     */\n    this.documentLoadedResolver_ \x3d goog.Promise.withResolver();\n\n    /**\n     * A promise that resolves to the canonical URL provided by the document.\n     * @private {!goog.promise.Resolver}\n     */\n    this.canonicalUrlResolver_ \x3d goog.Promise.withResolver();\n\n    /**\n     * A promise that resolves when the canonical link is present.\n     * @private {?goog.promise.Resolver}\n     */\n    this.canonicalLinkResolver_ \x3d null;\n\n    /**\n     * Whether the prerender complete message has been received from the\n     * document.\n     * Used for logging.\n     * @private {boolean}\n     */\n    this.prerenderComplete_ \x3d false;\n\n    /**\n     * A promise that is resolved once the document is fully presentable.\n     * This event isn\x27t sent until all resources within the first viewport are\n     * loaded.\n     * @private {!goog.promise.Resolver}\n     */\n    this.prerenderCompleteResolver_ \x3d goog.Promise.withResolver();\n\n    /**\n     * A function that can be run to prerender this frame. It should return a\n     * promise that resolves when prerendering completes.\n     * @private {?function() : !goog.Promise}\n     */\n    this.prerenderTask_ \x3d null;\n\n    /**\n     * A holder for a timer that waits for the channel to open after a document\n     * has loaded.\n     * @private {?number}\n     */\n    this.channelOpenedTimer_ \x3d null;\n\n    /**\n     * Whether the iframe loaded event has fired. Used for logging.\n     * @private {boolean}\n     */\n    this.iframeLoaded_ \x3d false;\n\n    /**\n     * The last scroll position at which the header was shown or hidden.\n     * TODO(rjsumi): Move this and the other scroll tracking logic into a class\n     * to make it reusable with the bookend.\n     * @private {number}\n     */\n    this.baseScrollTop_ \x3d 0;\n\n    /**\n     * The last scroll position sent by the runtime.\n     * TODO(rjsumi): Move this and the other scroll tracking logic into a class\n     * to make it reusable with the bookend.\n     * @private {number}\n     */\n    this.lastScrollTop_ \x3d 0;\n\n    /**\n     * The maximum scroll position sent by the runtime. Used for logging.\n     * @private {number}\n     */\n    this.maxScrollTop_ \x3d 0;\n\n    /**\n     * The maximum document height sent by the runtime. Used for logging.\n     * @private {number}\n     */\n    this.maxDocumentHeight_ \x3d 0;\n\n    /**\n     * Timestamp when the frame became visible, or 0 if not visible.\n     * @private {number}\n     */\n    this.timestampShown_ \x3d 0;\n\n    /**\n     * The current engagement logging state.\n     * @private {!EngagementState}\n     */\n    this.engagementState_ \x3d EngagementState.INACTIVE;\n\n    /**\n     * A handler invoked when the page unloads to log document engagement.\n     * @private {?function()}\n     */\n    this.boundFinishLogging_ \x3d null;\n\n    /**\n     * Whether the frame is taller than it is wide (i.e., is portrait).\n     * @private {boolean}\n     */\n    this.isPortrait_ \x3d true;\n\n    /**\n     * Whether the header should animate in and out when the user scrolls.  This\n     * is false for STAMPs because they have no header.\n     * @private {boolean}\n     */\n    this.animateHeader_ \x3d !this.model_.getIsStamp() \x26\x26\n        !!config.getHeaderConfig().getAnimateHeader();\n\n    /**\n     * Whether the header is currently shown.  This is false by default for all\n     * STAMPs because they never have a header, and true by default otherwise.\n     * The frame manager holds this state as opposed to the header manager\n     * because it can keep track of whether the underlying document thinks the\n     * header is shown.\n     * @private {boolean}\n     */\n    this.headerShown_ \x3d !this.model_.getIsStamp();\n\n    /**\n     * Prevents the header from animating until a specified scrollTop value is\n     * reached. This is a workaround to prevent the header from hiding under\n     * instances where the scroll position of the document is being restored\n     * from a previous visit to the document (see b/33692335).\n     * @private {number}\n     */\n    this.suspendHeaderAnimation_ \x3d -1;\n\n    /**\n     * The current task for animating the header.  This will be reset to null\n     * when the animation is started.\n     * @private {?Function}\n     */\n    this.animationTask_ \x3d null;\n\n    /**\n     * The communication channel for sending and receiving messages from the\n     * iframe window. The contentWindow defines where messages will be set.\n     * The targetOrigin is a security measure that ensures that the recipient\n     * has the expected origin.\n     * @private {?amp.messaging.FrameChannel}\n     */\n    this.frameChannel_ \x3d null;\n\n    /**\n     * The history state for this frame.\n     * @private {!gws.amp.history.FrameHistory}\n     */\n    this.frameHistory_ \x3d\n        new gws.amp.history.FrameHistory(this.model_.getAmpUrl(), groupId);\n\n    /**\n     * @private {?function(!Event)}\n     */\n    this.boundIframeLoadHandler_ \x3d null;\n\n    /**\n     * The CSI timer for runtime reporting.\n     * @private {?gws.amp.csi.Reporter}\n     */\n    this.ampCsi_ \x3d null;\n\n    /**\n     * Times used for the pre-render sensitive FCP metric, such as iframe\n     * creation time as well as user click time.\n     * @private {!ViewerTimings}\n     * @const\n     */\n    this.csiTimes_ \x3d {click: null, iframe: null};\n\n    /**\n     * The height of the viewer.  Used for restoring viewer after animations.\n     * @private {number}\n     */\n    this.viewerHeight_ \x3d 0;\n\n    /**\n     * The height of the document. Provided by the document once it is loaded.\n     * @private {number}\n     */\n    this.documentHeight_ \x3d -1;\n\n    /**\n     * The threshold after which the header will be scrolled into view at the\n     * bottom of the document. Set to\n     * BOTTOM_HEADER_THRESHOLD_FACTOR_ * viewerHeight once the viewer height is\n     * available.\n     * @private {number}\n     */\n    this.bottomHeaderThreshold_ \x3d -1;\n\n    /**\n     * If the viewerType is SHARED, the loaded iframe is a single document\n     * viewer and the result of a direct response to user action (where it has\n     * not been previously prerendered). Therefore we want the visibility state\n     * to be VISIBLE. In all other cases, we set the current visibility state to\n     * PRERENDER.\n     * @private {!gws.amp.VisibilityStateManager}\n     */\n    this.visibilityStateManager_ \x3d new gws.amp.VisibilityStateManager(\n        (config.getInstance().getViewerType() \x3d\x3d ViewerType.SHARED) ?\n            constants.VISIBILITY_STATES.VISIBLE :\n            constants.VISIBILITY_STATES.PRERENDER);\n\n\n    /**\n     * @private {function(!constants.VISIBILITY_STATES):undefined}\n     */\n    let boundSendVisibilityStateChange \x3d\n        this.sendVisibilityStateChange_.bind(this);\n    this.visibilityStateManager_.registerStateChangeHandler(\n        boundSendVisibilityStateChange);\n    this.addOnDisposeCallback(() \x3d\x3e {\n      this.visibilityStateManager_.unregisterStateChangeHandler(\n          boundSendVisibilityStateChange);\n    });\n\n    /**\n     * Used to delay updating the visibility state to PAUSED.\n     * @private @const {!goog.Delay}\n     */\n    this.pausedVisibilityStateDelay_ \x3d new goog.async.Delay(\n        this.pauseImmediately_,\n        gws.amp.FrameManager.PAUSED_VISIBILITY_STATE_DELAY_MS_, this);\n\n    /**\n     * A CSI reporter to send a tick to once the document is loaded and shown\n     * to the user.\n     * @private {?gws.amp.csi.Reporter}\n     */\n    this.csiReporter_ \x3d null;\n\n    /**\n     * A potential error page shown to the user for this item.\n     * @private {?Element}\n     */\n    this.errorPage_ \x3d null;\n\n    if (this.iframe_) {\n      this.initializeServerRenderedFrame_();\n    }\n  },\n\n\n  /**\n   * Adds the temporary overlay div to the item container. This serves as a\n   * touch event receiver until the iframe is loaded.\n   * @return {!Element} The newly created Temporary Overlay element.\n   * @private\n   */\n  addTempOverlay_: function() {\n    const tempOverlay \x3d goog.dom.createDom(\n        goog.dom.TagName.DIV, gws.amp.AmpViewerCss.Class.TEMPORARY_OVERLAY);\n    this.parentElement_.appendChild(tempOverlay);\n    return tempOverlay;\n  },\n\n\n  /**\n   * Registers message handlers with the FrameChannel.\n   * This should only be called when this.frameChannel_ exists.\n   * @private\n   */\n  addMessageListeners_: function() {\n    const frameChannel \x3d goog.asserts.assert(this.frameChannel_);\n    broadcast.register(frameChannel);\n    historyHandlers.register(frameChannel, this.frameHistory_);\n    navigate.register(\n        frameChannel, () \x3d\x3e this.visibilityStateManager_.isShown(), gws.nav.go);\n    localStorageHandler.register(\n        frameChannel, this.context_.getLocalStorage(),\n        this.model_.getFinalAmpUrl());\n    clientIdHandlers.register(\n        frameChannel, this.context_.getClientId(), this.model_.getFinalAmpUrl(),\n        () \x3d\x3e this.visibilityStateManager_.hasShown(),\n        (n, d) \x3d\x3e this.logClientIdVisibilityError_(n, d));\n    if (this.ampCsi_) {\n      csiHandlers.register(frameChannel, this.ampCsi_, this.csiTimes_);\n    }\n\n    this.frameChannel_.registerHandler(\n        constants.REQUEST_NAMES.DOCUMENT_LOADED,\n        goog.bind(this.documentLoadedHandler_, this));\n    this.frameChannel_.registerHandler(\n        constants.REQUEST_NAMES.LOAD_FAILED,\n        goog.bind(this.loadFailedHandler_, this));\n    this.frameChannel_.registerHandler(\n        constants.REQUEST_NAMES.CHANNEL_OPEN,\n        goog.bind(this.openChannelHandler_, this));\n    if (config.getInstance().getReplaceUrlMessageEnabled()) {\n      this.frameChannel_.registerHandler(\n          constants.REQUEST_NAMES.GET_REPLACE_URL,\n          goog.bind(this.getReplaceUrlHandler_, this));\n    }\n    this.frameChannel_.registerHandler(\n        constants.REQUEST_NAMES.PRERENDER_COMPLETE,\n        goog.bind(this.prerenderCompleteHandler_, this));\n    this.frameChannel_.registerHandler(\n        constants.REQUEST_NAMES.UNLOADED,\n        goog.bind(this.unloadedHandler_, this));\n    if (this.animateHeader_) {\n      this.frameChannel_.registerHandler(\n          constants.REQUEST_NAMES.DOCUMENT_HEIGHT,\n          goog.bind(this.documentHeightHandler_, this));\n      this.frameChannel_.registerHandler(\n          constants.REQUEST_NAMES.SCROLL, goog.bind(this.scrollHandler_, this));\n    }\n  },\n\n\n  /** @override */\n  setCsiReporter: function(csi) {\n    if (this.csiReporter_) {\n      // If there is already a CSI reporter waiting for a tick, we will not\n      // override it.\n      return;\n    }\n\n    // Set user click time in order to log pre-rendered FCP correctly.\n    if (this.ampCsi_) {\n      this.csiTimes_.click \x3d csi.getStartTime();\n    }\n\n    let tickCount \x3d 0;\n    let tickAndQueue \x3d (type) \x3d\x3e {\n      csi.tick(type);\n      const ved \x3d veUtil.getVedFromElement(this.srpLink_);\n      csi.sendReportIfAllExpectedTicksOccurredOrQueue(\n          1500, ved ? {\x27ampve\x27: ved} : undefined);\n      if (++tickCount \x3d\x3d\x3d 2) {\n        this.csiReporter_ \x3d null;\n      }\n    };\n\n    // Reset our accounting of whether certain ticks have been recorded\n    this.csiReporter_ \x3d csi;\n\n    // Wait for the frame to be visible, then wait for each timing event.\n    this.waitForVisible_().then(() \x3d\x3e {\n      this.documentLoadedResolver_.promise.then(\n          goog.partial(tickAndQueue, SerpTickType.CLICK_TO_DOCUMENT_LOAD));\n      this.prerenderCompleteResolver_.promise.then(\n          goog.partial(tickAndQueue, SerpTickType.CLICK_TO_PRERENDER_COMPLETE));\n    });\n    this.requestFinalLogging_();\n  },\n\n  /**\n   * @return {!goog.Promise} A promise that resolves once the item becomes\n   *     visible.\n   */\n  waitForVisible_: function() {\n    let visibleResolver \x3d goog.Promise.withResolver();\n    if (this.visibilityStateManager_.isShown()) {\n      visibleResolver.resolve();\n    } else {\n      let stateChangeHandler \x3d (state) \x3d\x3e {\n        if (state \x3d\x3d constants.VISIBILITY_STATES.VISIBLE) {\n          this.visibilityStateManager_.unregisterStateChangeHandler(\n              stateChangeHandler);\n          visibleResolver.resolve();\n        }\n      };\n      this.visibilityStateManager_.registerStateChangeHandler(\n          stateChangeHandler);\n      // Also unregister on dispose in case it never resolves.\n      this.addOnDisposeCallback(() \x3d\x3e {\n        this.visibilityStateManager_.unregisterStateChangeHandler(\n            stateChangeHandler);\n      });\n    }\n    return visibleResolver.promise;\n  },\n\n  /** @override */\n  prerender: function() {\n    if (config.getInstance().getUsePrefetch()) {\n      if (!this.isPrefetched_) {\n        const prefetchLink \x3d goog.dom.createDom(\n            goog.dom.TagName.LINK,\n            {\x27rel\x27: \x27prefetch\x27, \x27href\x27: this.getAmpUrl().getViewerProxyUrl()});\n        this.parentElement_.appendChild(prefetchLink);\n        this.isPrefetched_ \x3d true;\n      }\n    } else {\n      // The iframe is loaded if it is not loaded already.\n      this.queueLoadFrame_(false);\n    }\n  },\n\n\n  /**\n   * Updates the VISIBILITY_STATE in the document to PAUSED.\n   * @private\n   */\n  pauseImmediately_: function() {\n    this.setVisibilityState_(constants.VISIBILITY_STATES.PAUSED);\n  },\n\n\n  /** @override */\n  pause: function() {\n    // Calls pauseImmediately_ after a predefined short period of time.\n    // This is useful, for example, to avoid pausing on an accidental swipe\n    // (see b/27362967).\n    this.pausedVisibilityStateDelay_.start();\n  },\n\n\n  /**\n   * Cancels the Delay which would call pauseImmediately_ after a short period\n   * of time.\n   * @private\n   */\n  cancelPausedVisibilityStateDelay_: function() {\n    this.pausedVisibilityStateDelay_.stop();\n  },\n\n\n  /**\n   * Helper method used to set the VISIBILITY_STATE of the document\n   * along with perform additional, related actions.\n   *\n   * Important note: use this instead of setting state using the\n   * visibility state manager directly in order to preserve performing\n   * the aforementioned related actions.\n   *\n   * @param {!amp.constants.VISIBILITY_STATES} state\n   * @private\n   */\n  setVisibilityState_: function(state) {\n    // We cancel the delay here rather than relying on visibility state changes\n    // because, for example, beginning to swipe between ViewerItems but not\n    // fully completing the swipe would not trigger any visibility state change\n    // in the initially VISIBLE item (because its state is already VISIBLE).\n    this.cancelPausedVisibilityStateDelay_();\n\n    this.visibilityStateManager_.setState(state);\n  },\n\n\n  /** @override */\n  visible: function() {\n    this.setVisibilityState_(constants.VISIBILITY_STATES.VISIBLE);\n  },\n\n\n  /** @override */\n  prepareForShow: function(updateUrlMode, adjustHeader \x3d false) {\n    // Adjust the header to be in the correct initial position if forcing.\n    if (adjustHeader) {\n      if (this.headerShown_) {\n        this.showHeader_(/* animate */ false);\n      } else {\n        this.hideHeader_(/* animate */ false);\n      }\n    }\n    return this.frameHistory_.prepareForShow(updateUrlMode);\n  },\n\n\n  /** @override */\n  show: function(opt_clickLogged) {\n    this.visible();\n    if (this.srpLink_) {\n      jsaction.fireCustomEvent(\n          this.srpLink_, gws.amp.FrameManager.JSACTION_ITEM_VISIBLE_);\n    }\n    if (!opt_clickLogged) {\n      this.logUserView_();\n    }\n    // Note that we intentially log every time that show is called. The purpose\n    // of this logging is to capture the state of the world at the time that\n    // \x22show\x22 was invoked.\n    if (this.iframe_) {\n      this.logShown_();\n    } else {\n      // The item hasn\x27t been requested yet, so set the iFrame src\n      // initializing the page as VISIBLE from the start. This is unlikely to\n      // happen in practice because the amp_viewer_controller tries to always\n      // prerender in advance via this.prerender as soon as an item is opened\n      // or on card change.\n      this.queueLoadFrame_(true);\n    }\n    this.acquireRootScroller_();\n    this.logEngagementStart_();\n\n    // We don\x27t need to add the canonical link to the shared viewer because it\x27s\n    // already there.\n    if (config.getInstance().getViewerType() !\x3d ViewerType.SHARED) {\n      this.addLinkRelCanonical_();\n    }\n  },\n\n  /**\n   * Adds the canonical link to the document head. May also update the link\n   * after the AMP document has loaded.\n   * @private\n   */\n  addLinkRelCanonical_: function() {\n    // Remove the previous canonical link if it is still present.\n    this.removeCanonicalLink_();\n    this.canonicalLinkResolver_ \x3d goog.Promise.withResolver();\n    const canonicalUrl \x3d this.getCanonicalUrl();\n    let link \x3d goog.dom.createElement(goog.dom.TagName.LINK);\n    // Save the current resolver so we can resolve the right one later.\n    let resolver \x3d this.canonicalLinkResolver_;\n    const setLinkUrl \x3d (url) \x3d\x3e {\n      goog.dom.safe.setLinkHrefAndRel(link, url, \x27canonical\x27);\n      // Check to make sure that we have not yet resolved the promise. If we\n      // have, the resolver will be set to null. This prevents adding the\n      // canonical URL after it was supposed to be removed.\n      if (resolver) {\n        goog.dom.appendChild(document.head, link);\n        resolver.resolve(link);\n        resolver \x3d null;\n      }\n    };\n    if (canonicalUrl) {\n      setLinkUrl(canonicalUrl);\n    }\n    this.canonicalUrlResolver_.promise.then((url) \x3d\x3e {\n      if (url) {\n        setLinkUrl(url);\n      }\n    });\n  },\n\n  /**\n   * Removes the canonical link if it is present.\n   * @private\n   */\n  removeCanonicalLink_: function() {\n    if (this.canonicalLinkResolver_) {\n      this.canonicalLinkResolver_.promise.then((linkElem) \x3d\x3e {\n        if (goog.dom.contains(document.head, linkElem)) {\n          goog.dom.removeNode(linkElem);\n        }\n      });\n    }\n  },\n\n  /**\n   * Waits userViewCutoffMs and then logs a user view.\n   * For most logs processing, a user view counts as a result click.\n   *\n   * @private\n   */\n  logUserView_: function() {\n    scheduler.setTimeout(goog.bind(function() {\n      if (this.visibilityStateManager_.isShown() \x26\x26 this.srpLink_) {\n        jsaction.fireCustomEvent(\n            this.srpLink_, gws.amp.FrameManager.JSACTION_ITEM_VIEWED_);\n      }\n    }, this), config.getInstance().getViewTimeForClickMs());\n  },\n\n  /**\n   * @return {!Object\x3cstring, string\x3e}\n   * @private\n   */\n  newLogData_() {\n    return {\n      \x27ampss\x27: this.iframe_ ? 1 : 0,\n      \x27ampil\x27: this.iframeLoaded_ ? 1 : 0,\n      \x27ampco\x27: this.channelOpened_ ? 1 : 0,\n      \x27ampdl\x27: this.documentLoaded_ ? 1 : 0,\n      \x27amppc\x27: this.prerenderComplete_ ? 1 : 0\n    };\n  },\n\n  /**\n   * Logs visibility errors detected by the common client ID handlers.\n   * @param {string} name The error\x27s identifier.\n   * @param {!Object} data Arbitrary data to be logged.\n   * @private\n   */\n  logClientIdVisibilityError_(name, data) {\n    if (name !\x3d \x27ampDocVisibility\x27) {\n      return;\n    }\n    const e \x3d new Error(name);\n    const errorContext \x3d Object.assign(this.newLogData_(), data);\n    errorContext[\x27amp\x27] \x3d this.getAmpUrl().getOriginalUrl();\n    search.log.errorLogger.log(e, {errorContext});\n  },\n\n  /**\n   * Logs that the item has been shown. Includes the current known state of the\n   * AMP document.\n   * @private\n   */\n  logShown_: function() {\n    const data \x3d this.newLogData_();\n    this.log_(gws.amp.FrameManager.LOG_ITEM_SHOWN_, data);\n  },\n\n  /**\n   * Initializes all engagement logging fields when item is first shown.\n   * @private\n   */\n  logEngagementStart_: function() {\n    if (!config.getInstance().getEngagementLoggingEnabled() ||\n        this.model_.getIsAd()) {\n      return;\n    }\n    this.maxScrollTop_ \x3d 0;\n    this.maxDocumentHeight_ \x3d 0;\n    this.engagementState_ \x3d EngagementState.ACTIVE;\n    this.timestampShown_ \x3d goog.now();\n\n    this.requestFinalLogging_();\n  },\n\n  /**\n   * Initializes all engagement logging fields when item is first shown.\n   * @private\n   */\n  logEngagementFinish_: function() {\n    if (!config.getInstance().getEngagementLoggingEnabled() ||\n        this.model_.getIsAd()) {\n      return;\n    }\n    if (this.engagementState_ !\x3d EngagementState.ACTIVE) {\n      return;\n    }\n    this.engagementState_ \x3d EngagementState.DONE;\n    if (!this.hasValidEngagement_()) {\n      return;\n    }\n\n    const elapsed \x3d goog.now() - this.timestampShown_;\n    // We round the viewport height up to the 10th place to anonymize our data.\n    const viewerHeightCeiling \x3d Math.ceil(this.viewerHeight_ / 10) * 10;\n    const data \x3d {\n      \x27ampcu\x27: this.model_.getCanonicalUrl(),\n      \x27ampst\x27: this.maxScrollTop_,\n      \x27ampdh\x27: this.maxDocumentHeight_,\n      \x27ampvh\x27: viewerHeightCeiling,\n      \x27ampet\x27: elapsed\n    };\n    const encodedParams \x3d goog.uri.utils.buildQueryDataFromMap(data);\n    google.log(gws.amp.FrameManager.LOG_ITEM_ENGAGEMENT_, \x27\x26\x27 + encodedParams);\n  },\n\n  /**\n   * Requests that finishLogging_ be executed on page unload.\n   * @private\n   */\n  requestFinalLogging_() {\n    if (!this.boundFinishLogging_) {\n      this.boundFinishLogging_ \x3d () \x3d\x3e this.finishLogging_();\n      goog.dom.getWindow().addEventListener(\n          goog.events.EventType.BEFOREUNLOAD, this.boundFinishLogging_);\n    }\n  },\n\n  /**\n   * Executes any pending logging events.\n   * @private\n   */\n  finishLogging_() {\n    if (this.boundFinishLogging_) {\n      goog.dom.getWindow().removeEventListener(\n          goog.events.EventType.BEFOREUNLOAD, this.boundFinishLogging_);\n    }\n\n    this.logEngagementFinish_();\n    if (this.csiReporter_) {\n      // This will be a noop if there are no pending ticks.\n      this.csiReporter_.sendReport();\n      this.csiReporter_ \x3d null;\n    }\n  },\n\n  /**\n   * Returns whether there is valid engagement data to log.\n   * @return {boolean} Whether the captured data is valid.\n   * @private\n   */\n  hasValidEngagement_: function() {\n    // The device must be in portrait mode. Further, we must have received a\n    // valid document height and have captured an initial timestamp and viewer\n    // height.\n    return this.isPortrait_ \x26\x26 this.timestampShown_ \x3e 0 \x26\x26\n        this.maxDocumentHeight_ \x3e 0 \x26\x26 this.viewerHeight_ \x3e 0;\n  },\n\n  /**\n   * Logs an event for the Item VE.\n   * @param {string} ct The content of the log entry.\n   * @param {!Object\x3d} opt_data Optional extra parameter data to log.\n   * @private\n   */\n  log_: function(ct, opt_data) {\n    if (!this.model_.getIsAd() \x26\x26 !config.getInstance().getLogPrefetching()) {\n      // Do not log anything unless this is sampled or is an ad (in which case\n      // we skip sampling).\n      return;\n    }\n    const data \x3d {\x27ampve\x27: veUtil.getVedFromElement(this.parentElement_)};\n    if (opt_data) {\n      goog.object.forEach(opt_data, function(value, key) {\n        data[key] \x3d value;\n      });\n    }\n    const encodedParams \x3d goog.uri.utils.buildQueryDataFromMap(data);\n    // Log AMP Item Shown.\n    google.log(ct, \x27\x26\x27 + encodedParams);\n  },\n\n  /** @override */\n  prepareForHide: function() {\n    return this.frameHistory_.prepareForHide();\n  },\n\n  /** @override */\n  hide: function() {\n    if (this.animateHeader_) {\n      this.headerShown_ \x3d true;\n      this.sendPaddingTop_(\n          this.headerConfig_.getHeaderHeight(), /* animate */ false,\n          /* isTransient */ false);\n    }\n\n    this.setVisibilityState_(constants.VISIBILITY_STATES.INACTIVE);\n\n    // Don\x27t display the spinner when item is not visible since it can\n    // negatively impact swipe animation FPS.\n    this.hideLoadingIcon();\n\n    this.releaseRootScroller_();\n    this.finishLogging_();\n\n    this.removeCanonicalLink_();\n  },\n\n\n  /**\n   * Takes over the root scroller of the page. Browser will use the iframe\x27s\n   * scrolling to show/hide address bar and for other related features.\n   *\n   * Root scroller is an experimental Chrome feature described in detail in\n   * https://github.com/bokand/NonDocumentRootScroller/blob/master/explainer.md\n   * To test, it requires\n   * chrome://flags/#enable-experimental-web-platform-features\n   * to be enabled.\n   *\n   * TODO(dvoytenko): This will likely eventually migrate to full-page API.\n   * @private\n   */\n  acquireRootScroller_: function() {\n    if (!config.getInstance().getRootScrollerEnabled()) {\n      return;\n    }\n    const doc \x3d goog.global.document;\n    doc[\x27rootScroller\x27] \x3d this.iframe_;\n    // TODO(dvoytenko, b/23524916): ensure that this value is not later\n    // overwritten by resize logic.\n    goog.style.setHeight(this.iframe_, \x27100%\x27);\n  },\n\n\n  /**\n   * Releases the root scroller of the page previously acquired via\n   * `acquireRootScroller_` method.\n   * @private\n   */\n  releaseRootScroller_: function() {\n    if (!config.getInstance().getRootScrollerEnabled()) {\n      return;\n    }\n    const doc \x3d goog.global.document;\n    if (doc[\x27rootScroller\x27] \x3d\x3d this.iframe_) {\n      doc[\x27rootScroller\x27] \x3d null;\n    }\n  },\n\n\n  /** @override */\n  sendWillLikelyUnload: function() {\n    if (!this.frameChannel_) {\n      return;\n    }\n\n    this.frameChannel_.sendRequest(\n        constants.REQUEST_NAMES.WILL_LIKELY_UNLOAD, {});\n  },\n\n\n  /** @override */\n  setDimensions: function(width, height) {\n    this.viewerHeight_ \x3d height;\n    this.bottomHeaderThreshold_ \x3d\n        height * gws.amp.FrameManager.BOTTOM_HEADER_THRESHOLD_FACTOR_;\n    if (this.iframe_) {\n      goog.style.setHeight(this.iframe_, height);\n    }\n    // Store orientation for logging purposes. TODO: is this reasonable?\n    this.isPortrait_ \x3d height \x3e width;\n  },\n\n\n  /** @override */\n  hasHeader: function() {\n    return true;\n  },\n\n\n  /** @override */\n  isHeaderShown: function() {\n    return this.headerShown_;\n  },\n\n\n  /** @override */\n  getDomainTitle: function() {\n    return this.model_.getDomainTitle();\n  },\n\n  /** @override */\n  getCanonicalUrl: function() {\n    return this.model_.getCanonicalUrl();\n  },\n\n\n  /** @override */\n  getPageTitle: function() {\n    return this.model_.getPageTitle();\n  },\n\n\n  /** @override */\n  getAmpUrl: function() {\n    return this.model_.getAmpUrl();\n  },\n\n  /** @override */\n  sendScrollTop: function(newScrollTop) {\n    const payload \x3d {};\n    payload[constants.PAYLOAD_PARAMETERS.SCROLL_TOP] \x3d newScrollTop;\n    this.frameChannel_.sendRequest(constants.REQUEST_NAMES.SCROLL, payload);\n  },\n\n\n  /**\n   * Send a new paddingTop value to the document with an animation.\n   * @param {number} paddingTop The new padding top value.\n   * @param {boolean} animate Whether the change should be animated.  Changes to\n   * non-visible documents should not be animated.\n   * @param {boolean} isTransient Whether the change is transient.  This allows\n   * for an optimization on the runtime side.\n   * @private\n   */\n  sendPaddingTop_: function(paddingTop, animate, isTransient) {\n    const headerConfigProto \x3d config.getHeaderConfig();\n    const curve \x3d headerConfigProto.getHeaderAnimationCurve();\n    const duration \x3d headerConfigProto.getHeaderAnimationDurationMs();\n    if (this.frameChannel_) {\n      const payload \x3d {};\n      payload[constants.PAYLOAD_PARAMETERS.PADDING_TOP] \x3d paddingTop;\n      payload[constants.PAYLOAD_PARAMETERS.TRANSIENT] \x3d isTransient;\n      if (animate) {\n        payload[constants.PAYLOAD_PARAMETERS.CURVE] \x3d curve;\n        payload[constants.PAYLOAD_PARAMETERS.DURATION] \x3d duration;\n      }\n      this.frameChannel_.sendRequest(constants.REQUEST_NAMES.VIEWPORT, payload);\n    }\n  },\n\n\n  /**\n   * Gets the origin of iframe url. This is the scheme, domain, and port of the\n   *     url.\n   * @return {string} The origin string.\n   * @private\n   */\n  getTargetOrigin_: function() {\n    return this.getAmpUrl().getProxyOrigin();\n  },\n\n\n  /**\n   * Sets initialization parameters and the ampUrl in the iframe src to\n   * load the content if the load request hasn\x27t been sent yet, and otherwise\n   * simply do nothing. Either way, the src of the iframe will always be set and\n   * the page requested at the end of this method call, but the document is\n   * guaranteed to be loaded only when the documentLoaded message is received.\n   * @param {boolean\x3d} highPriority If true, and prerender queue is enabled,\n   * enqueue prerender with high priority.\n   * @param {boolean\x3d} opt_suppressLog If true, prevent logging loadFrame.\n   * @private\n   */\n  queueLoadFrame_: function(highPriority, opt_suppressLog) {\n    goog.style.setElementShown(this.parentElement_, true);\n    if (!this.iframe_) {\n      gws.amp.safeUrl.checkUrl(\n          this.getAmpUrl().getOriginalUrl(), this.waitForVisible_());\n      if (!opt_suppressLog) {\n        if (this.visibilityStateManager_.getState() \x3d\x3d\n            constants.VISIBILITY_STATES.VISIBLE) {\n          this.logShown_();\n        } else {\n          this.log_(gws.amp.FrameManager.LOG_ITEM_PREFETCH_);\n        }\n      }\n\n      if (this.prerenderTask_) {\n        prerenderQueue.getInstance().removeTask(this.prerenderTask_);\n      }\n      this.prerenderTask_ \x3d () \x3d\x3e {\n        this.instantiateFrame_();\n        return this.prerenderCompleteResolver_.promise;\n      };\n      if (highPriority) {\n        prerenderQueue.getInstance().enqueuePrioritizedTask(\n            this.prerenderTask_);\n      } else {\n        prerenderQueue.getInstance().enqueueTask(this.prerenderTask_);\n      }\n    }\n  },\n\n  /**\n   * Instantiates the iframe and sets its src to start loading content.\n   * @private\n   */\n  instantiateFrame_: function() {\n    this.iframe_ \x3d goog.dom.createElement(goog.dom.TagName.IFRAME);\n    goog.dom.classlist.add(this.iframe_, gws.amp.AmpViewerCss.Class.AMP_DOC);\n\n    this.iframe_.setAttribute(\x27allowpaymentrequest\x27, \x27true\x27);\n    this.iframe_.setAttribute(\x27allowfullscreen\x27, \x27true\x27);\n    if (config.getInstance().getDisableIframeScrollingProperty()) {\n      this.iframe_.setAttribute(\x27scrolling\x27, \x27no\x27);\n    }\n    this.iframe_.setAttribute(\n        \x27allow\x27, gws.amp.FrameManager.IFRAME_PERMISSIONS_);\n\n    // TODO(b/30627939): Do not set an explicit height on the iframe.\n    goog.style.setHeight(this.iframe_, this.viewerHeight_);\n\n\n    const hashStr \x3d this.buildInitParams_();\n    this.boundIframeLoadHandler_ \x3d goog.bind(this.iframeLoadHandler_, this);\n    this.iframe_.addEventListener(\x27load\x27, this.boundIframeLoadHandler_, false);\n\n    this.maybeSetCsiReporter_();\n    let src \x3d this.getAmpUrl().getViewerProxyUrl() + \x27#\x27 + hashStr;\n    this.iframe_.src \x3d src;\n    goog.dom.appendChild(this.parentElement_, this.iframe_);\n    if (this.ampCsi_) {\n      this.csiTimes_.iframe \x3d Reporter.now();\n    }\n    this.removeErrorPage_();\n    this.initializeFrameChannel_();\n  },\n\n  /**\n   * Performs frame manager initialization when iframe has already been\n   * instantiated.\n   * @private\n   */\n  initializeServerRenderedFrame_: function() {\n    this.maybeSetCsiReporter_();\n    this.removeErrorPage_();\n    this.initializeFrameChannel_();\n    // When the iframe is set serverside, the amp document waits for a handshake\n    // message from the viewer before sending a channel open message. So we poll\n    // the AMP document until we receive it.\n    this.frameChannel_.pollForHandshake();\n  },\n\n  /**\n   * If getAmpCsiReportingEnabled is set, instantiates and sets a new csi\n   * reporter.\n   * @private\n   */\n  maybeSetCsiReporter_: function() {\n    const ampCsiEnabled \x3d config.getInstance().getAmpCsiReportingEnabled();\n    const forceFcpLog \x3d config.getInstance().getForceLogFcp();\n    if (ampCsiEnabled || forceFcpLog) {\n      const extraFcpParams \x3d {};\n      if (!!config.getInstance().getFcpUrlReportingEnabled()) {\n        const originalUrl \x3d this.getAmpUrl().getOriginalUrl();\n        const canonicalUrl \x3d this.getCanonicalUrl();\n        if (originalUrl) {\n          extraFcpParams[\x27amp\x27] \x3d originalUrl;\n        }\n        if (canonicalUrl) {\n          extraFcpParams[\x27ampcu\x27] \x3d canonicalUrl;\n        }\n      }\n      const ved \x3d veUtil.getVedFromElement(this.srpLink_);\n      if (ved) {\n        extraFcpParams[\x27ampve\x27] \x3d ved;\n      }\n      const extraData \x3d new Map();\n      extraData.set(constants.CsiLabels.FCP, extraFcpParams);\n      const fcpOnly \x3d !!forceFcpLog \x26\x26 !ampCsiEnabled;\n      this.ampCsi_ \x3d gws.amp.csi.reporters.newRuntimeReporter(\n          this.visibilityStateManager_.isShown(), fcpOnly, extraData);\n    }\n  },\n\n\n  /**\n   * Instantiates the frame channel and adds message listeners.\n   * @private\n   */\n  initializeFrameChannel_: function() {\n    let manager \x3d ChannelManager.getInstance();\n    this.frameChannel_ \x3d manager.newFrameChannel(\n        /** @type {!Window} */ (this.iframe_.contentWindow),\n        this.getTargetOrigin_());\n    this.addMessageListeners_();\n  },\n\n\n  /** @override */\n  reloadFrame: function() {\n    this.queueLoadFrame_(true, true);\n  },\n\n\n  /** @override */\n  removeIframe: function() {\n    if (this.prerenderTask_) {\n      prerenderQueue.getInstance().removeTask(this.prerenderTask_);\n      this.prerenderTask_ \x3d null;\n    }\n\n    if (this.frameChannel_) {\n      historyHandlers.unregister(this.frameChannel_, this.frameHistory_);\n      const manager \x3d ChannelManager.getInstance();\n      manager.unregisterFrameChannel(this.frameChannel_);\n      this.frameChannel_ \x3d null;\n      this.channelOpened_ \x3d false;\n    }\n    if (this.iframe_) {\n      goog.dom.removeNode(this.iframe_);\n      this.iframe_ \x3d null;\n      this.iframeLoaded_ \x3d false;\n      this.documentLoaded_ \x3d false;\n      this.prerenderComplete_ \x3d false;\n\n      this.documentLoadedResolver_ \x3d goog.Promise.withResolver();\n      this.prerenderCompleteResolver_ \x3d goog.Promise.withResolver();\n      this.canonicalUrlResolver_ \x3d goog.Promise.withResolver();\n    }\n    this.cancelChannelOpenTimer_();\n    goog.style.setElementShown(this.temporaryOverlay_, true);\n  },\n\n  /**\n   * @return {string} The initialization params as a query parameter string.\n   * @private\n   */\n  buildInitParams_: function() {\n    const initParams \x3d {};\n    initParams[constants.INIT_PARAMETERS.ORIGIN] \x3d\n        amp.service.AmpUrlUtil.getLocationOrigin();\n    const a4aIdentifier \x3d\n        config.getInstance().getAdsForAmpExperimentIdentifier();\n    const daIdentifier \x3d\n        config.getInstance().getAdsForAmpDoubleclickExperimentIdentifier();\n    const aaIdentifier \x3d\n        config.getInstance().getAdsForAmpAdsenseExperimentIdentifier();\n    const expIdentifier \x3d [];\n    if (a4aIdentifier) {\n      expIdentifier.push(\x27a4a:\x27 + a4aIdentifier);\n    }\n    if (daIdentifier) {\n      expIdentifier.push(\x27da:\x27 + daIdentifier);\n    }\n    if (aaIdentifier) {\n      expIdentifier.push(\x27aa:\x27 + aaIdentifier);\n    }\n    if (expIdentifier.length \x3e 0) {\n      initParams[constants.INIT_PARAMETERS.EXP] \x3d expIdentifier.join(\x27,\x27);\n    }\n    initParams[constants.INIT_PARAMETERS.PRERENDER_SIZE] \x3d\n        gws.amp.FrameManager.DEFAULT_PRERENDER_SIZE_;\n    initParams[constants.INIT_PARAMETERS.VISIBILITY_STATE] \x3d\n        this.visibilityStateManager_.getState();\n    initParams[constants.INIT_PARAMETERS.PADDING_TOP] \x3d\n        this.headerShown_ ? this.headerConfig_.getHeaderHeight() : 0;\n    initParams[constants.INIT_PARAMETERS.PULL_TO_REFRESH] \x3d 0;\n    initParams[constants.INIT_PARAMETERS.HORIZONTAL_SCROLLING] \x3d\n        config.getInstance().getHorizontalScrollingInsideAmpEnabled() ? 1 : 0;\n    // Also check if FCP URL reporting is enabled, in which case we always want\n    // CSI reports from the runtime.\n    initParams[constants.INIT_PARAMETERS.CSI_ENABLED] \x3d\n        (config.getInstance().getAmpCsiReportingEnabled() ||\n         config.getInstance().getForceLogFcp()) ?\n        1 :\n        0;\n\n    if (this.context_.getPartialTimestamp()) {\n      initParams[constants.INIT_PARAMETERS.ANCESTOR_ORIGIN_HASH] \x3d\n          this.context_.getPartialTimestamp();\n    }\n    const forwardReferrer \x3d this.getForwardReferrer_();\n    if (forwardReferrer !\x3d\x3d null) {\n      initParams[constants.INIT_PARAMETERS.REFERRER] \x3d forwardReferrer;\n    }\n    const extraRuntimeParam \x3d config.getInstance().getAmpRuntimeParameters();\n    if (extraRuntimeParam) {\n      goog.uri.utils.parseQueryData(\n          extraRuntimeParam, (extraParamName, extraParamValue) \x3d\x3e {\n            if (extraParamName) {\n              initParams[extraParamName] \x3d extraParamValue;\n            }\n          });\n    }\n    initParams[constants.INIT_PARAMETERS.VIEWER_URL] \x3d\n        this.getAmpUrl().getStandaloneUrl();\n    if (config.getInstance().getEnableAmpDebug()) {\n      initParams[constants.INIT_PARAMETERS.DEVELOPMENT] \x3d 1;\n      initParams[constants.INIT_PARAMETERS.LOG] \x3d 1;\n    }\n    // TODO(b/67707850): This parameter, if set, indicates that there is a\n    // replace URL to query. The runtime will need to use the \x22getReplaceUrl\x22\n    // message to obtained the final, updated version.\n    if (config.getInstance().getReplaceUrlEnabled()) {\n      const replaceAmpUrl \x3d this.model_.getReplaceAmpUrl();\n      if (replaceAmpUrl) {\n        initParams[constants.INIT_PARAMETERS.REPLACE_URL] \x3d\n            replaceAmpUrl.getViewerProxyUrl();\n      }\n    }\n    // Build up the capabilities string.\n    const caps \x3d [constants.INIT_CAPABILITIES.SWIPE];\n    goog.array.extend(\n        caps, navigate.getCapabilities(), clientIdHandlers.getCapabilities());\n    if (config.getInstance().getFragmentHistoryEnabled()) {\n      caps.push(constants.INIT_CAPABILITIES.FRAGMENT);\n    }\n    if (config.getInstance().getReplaceUrlMessageEnabled()) {\n      caps.push(constants.INIT_CAPABILITIES.REPLACE_URL);\n    }\n    Object.assign(\n        initParams, historyHandlers.getInitParameters(),\n        localStorageHandler.getInitParameters(),\n        clientIdHandlers.getInitParameters());\n    initParams[constants.INIT_PARAMETERS.CAPABILITIES] \x3d caps.join(\x27,\x27);\n    return goog.uri.utils.buildQueryDataFromMap(initParams);\n  },\n\n\n  /**\n   * Determines if and which referrer to forward to the AMP document based on\n   * flag setting, referrer, and viewer origin.\n   * @return {?string} The referrer to set or null if the referrer shouldn\x27t be\n   *     explicitly passed down.\n   * @private\n   */\n  getForwardReferrer_: function() {\n    // For more background on the logic here, please refer to b/26909087.\n    if (config.getInstance().getViewerType() !\x3d ViewerType.SHARED) {\n      // If this is not a shared viewer, the HTTP referrer will be\n      // www.google.com because of the \x3cmeta name\x3d\x22referrer\x22 content\x3d\x22origin\x22 /\x3e\n      // tag in the header. Therefore, we don\x27t need to explicitly set it.\n      return null;\n    }\n\n    const referrer \x3d this.getDocumentReferrer_();\n    const origin \x3d amp.service.AmpUrlUtil.getLocationOrigin();\n    const referrerOrigin \x3d goog.uri.utils.getOrigin(referrer);\n\n    if (origin \x3d\x3d referrerOrigin) {\n      // If the referrer origin is equal to the viewer\x27s origin, we need to\n      // sanitize the referrer we forward to avoid unintentionally exposing a\n      // referrer that was only sent because of origin-when-crossorigin.\n      return origin;\n    }\n    return referrer;\n  },\n\n\n  /**\n   * @return {string} The document referrer.\n   * @private\n   */\n  getDocumentReferrer_: function() {\n    return goog.global.document.referrer;\n  },\n\n\n  /**\n   * Tries to redirect to the replaceUrl. If no replace url exists, falls back\n   * to the publisher\x27s AMP URL.  This is used to handle errors from the cache.\n   * @return {!goog.Promise\x3c?\x3e|undefined}\n   * @private\n   */\n  navigateToFallback_: function() {\n    const redirectUrl \x3d this.model_.getReplaceAmpUrl() ?\n        goog.asserts.assertString(\n            this.model_.getReplaceAmpUrl().getOriginalUrl()) :\n        this.getAmpUrl().getOriginalUrl();\n    const adPromise \x3d google.f[xid(\x27ads.AmpAdClickTrackingPromise\x27)];\n    if (!adPromise) {\n      gws.nav.go(redirectUrl);\n      return;\n    }\n\n    // Make sure we wait for the click tracking request to complete before\n    // navigating away from the page.\n    return adPromise.then(() \x3d\x3e {\n      gws.nav.go(redirectUrl);\n    });\n  },\n\n  /**\n   * Sets a timer that waits for the communication channel to open and either\n   * logs an error or redirects if it is not opened before the timeout.\n   * @private\n   */\n  waitForChannelOpen_: function() {\n    this.cancelChannelOpenTimer_();\n    let channelOpenHandler \x3d () \x3d\x3e {\n      // Ensure there really is a pending timer. See b/27260879\n      if (!this.channelOpenedTimer_) {\n        return;\n      }\n      this.cancelChannelOpenTimer_();\n      this.waitForVisible_().then(() \x3d\x3e {\n        if (this.model_.getIsAd()) {\n          // AMP Ad Channel Open Timeout\n          let e \x3d new Error(\x27ampAdCot\x27);\n          let data \x3d {\x27amp\x27: this.getAmpUrl().getOriginalUrl()};\n          search.log.errorLogger.log(e, {errorContext: data});\n          this.navigateToFallback_();\n        } else {\n          // AMP Channel Open Timeout\n          let e \x3d new Error(\x27ampCot\x27);\n          let data \x3d this.newLogData_();\n          data[\x27amp\x27] \x3d this.getAmpUrl().getOriginalUrl();\n          search.log.errorLogger.log(e, {errorContext: data});\n        }\n      });\n    };\n    let channelOpenTimeout \x3d this.model_.getIsAd() ?\n        gws.amp.FrameManager.NETWORK_ERROR_REDIRECT_TIMER_MS_ :\n        gws.amp.FrameManager.CHANNEL_OPEN_TIMER_MS_;\n    this.channelOpenedTimer_ \x3d\n        scheduler.setTimeout(channelOpenHandler, channelOpenTimeout);\n  },\n\n\n  /**\n   * Cancels the channelOpened timer.\n   * @private\n   */\n  cancelChannelOpenTimer_: function() {\n    if (this.channelOpenedTimer_) {\n      scheduler.clearTimeout(this.channelOpenedTimer_);\n      this.channelOpenedTimer_ \x3d null;\n    }\n  },\n\n\n  /**\n   * Sends a visibilityStateChange request to the doc.\n   * @param {!constants.VISIBILITY_STATES} state The new visibility state.\n   * @private\n   */\n  sendVisibilityStateChange_: function(state) {\n    if (!this.frameChannel_) {\n      return;\n    }\n\n    const payload \x3d {};\n    payload[constants.PAYLOAD_PARAMETERS.PRERENDER_SIZE] \x3d\n        gws.amp.FrameManager.DEFAULT_PRERENDER_SIZE_;\n    payload[constants.PAYLOAD_PARAMETERS.VISIBILITY_STATE] \x3d state;\n    this.frameChannel_.sendRequest(\n        constants.REQUEST_NAMES.VISIBILITY_CHANGE, payload);\n  },\n\n\n  /** @override */\n  setScrollLock: function(locked) {\n    if (this.frameChannel_) {\n      this.frameChannel_.sendRequest(\n          constants.REQUEST_NAMES.SCROLL_LOCK, locked);\n    }\n  },\n\n\n  /**\n   * Handles the iframe load event fired by the browser once the iframe content\n   * has loaded. This is fired regardless of the response code.\n   * @param {!Event} event The iframe loaded event.\n   * @private\n   */\n  iframeLoadHandler_: function(event) {\n    this.iframeLoaded_ \x3d true;\n    this.hideLoadingIcon();\n    // Stop listening for load events.\n    if (this.boundIframeLoadHandler_) {\n      this.iframe_.removeEventListener(\x27load\x27, this.boundIframeLoadHandler_);\n      this.boundIframeLoadHandler_ \x3d null;\n    }\n\n    // If the channel isn\x27t already open start waiting for it.\n    if (!this.channelOpened_) {\n      this.waitForChannelOpen_();\n    }\n  },\n\n\n  /** @override */\n  showIconIfLoading: function() {\n    if (this.iframeLoaded_ || this.channelOpened_) {\n      return;\n    }\n\n    this.temporaryOverlay_.appendChild(this.context_.getLoadingIcon());\n  },\n\n\n  /** @override */\n  hideLoadingIcon: function() {\n    const loadingIcon \x3d this.context_.getLoadingIcon();\n    // The loadingIcon may be parented to a different item. Remove it only if\n    // the current item is displaying.\n    if (loadingIcon.parentElement \x3d\x3d this.temporaryOverlay_) {\n      this.temporaryOverlay_.removeChild(loadingIcon);\n    }\n  },\n\n\n  /**\n   * Shows the header.\n   * @param {boolean\x3d} animate Whether to animate the transition.\n   * @private\n   */\n  showHeader_: function(animate \x3d true) {\n    const header \x3d this.context_.getHeaderManager();\n    if (!header) {\n      return;\n    }\n    header.show(animate);\n    this.sendPaddingTop_(\n        this.headerConfig_.getHeaderHeight(), animate, false /* isTransient */);\n    this.headerShown_ \x3d true;\n  },\n\n\n  /**\n   * Hides the header.\n   * @param {boolean\x3d} animate Whether to animate the transition.\n   * @private\n   */\n  hideHeader_: function(animate \x3d true) {\n    const header \x3d this.context_.getHeaderManager();\n    if (!header) {\n      return;\n    }\n    header.hide(animate);\n    this.sendPaddingTop_(0 /* headerHeight */, animate, true /* isTransient */);\n    this.headerShown_ \x3d false;\n  },\n\n\n  /**\n   * Handles hiding and showing the header depending on scroll message from the\n   * document.\n   * @param {number} scrollTop The scroll top contained in the scroll message\n   * payload.\n   * @private\n   */\n  // TODO(b/37744882): Move the scrolling logic into its own class.\n  scrollHeader_: function(scrollTop) {\n    const header \x3d this.context_.getHeaderManager();\n    const headerConfigProto \x3d config.getHeaderConfig();\n\n    if (!header || !this.animateHeader_) {\n      return;\n    }\n\n    this.lastScrollTop_ \x3d scrollTop;\n    if (!this.animationTask_ \x26\x26 this.suspendHeaderAnimation_ \x3c 0) {\n      this.animationTask_ \x3d goog.dom.animationFrame.createTask({\n        mutate: goog.bind(\n            function() {\n              this.animationTask_ \x3d null;\n              const delta \x3d this.lastScrollTop_ - this.baseScrollTop_;\n\n              // If we are scrolling in the direction that doesn\x27t change our\n              // header status, update the base scroll position.\n              if (!this.headerShown_ \x26\x26 delta \x3e 0 ||\n                  this.headerShown_ \x26\x26 delta \x3c 0) {\n                this.baseScrollTop_ \x3d this.lastScrollTop_;\n              }\n\n              if (!this.headerShown_ \x26\x26\n                  this.lastScrollTop_ \x3c\x3d this.headerConfig_.getHeaderHeight()) {\n                // If we reached the top, then we need to immediately animate\n                // the header back in irrespective of our current animation\n                // state.\n                this.showHeader_();\n                this.baseScrollTop_ \x3d this.lastScrollTop_;\n              } else if (header.isAnimating()) {\n                // During animations we adjust the base on every animation\n                // frame, since it is moving around.\n                this.baseScrollTop_ \x3d this.lastScrollTop_;\n              } else if (\n                  !this.headerShown_ \x26\x26\n                  delta \x3c -headerConfigProto.getHeaderReturnThresholdPx()) {\n                // If we scrolled up enough up to show the header again, do so.\n                this.showHeader_();\n                this.baseScrollTop_ \x3d this.lastScrollTop_;\n              } else if (\n                  this.headerShown_ \x26\x26\n                  delta \x3e headerConfigProto.getHeaderAnimationThresholdPx() \x26\x26\n                  !this.shouldShowHeaderAtBottom_()) {\n                // If we scrolled down enough to animate the header out, do so.\n                this.hideHeader_();\n                this.baseScrollTop_ \x3d this.lastScrollTop_;\n              } else if (\n                  !this.headerShown_ \x26\x26 this.shouldShowHeaderAtBottom_()) {\n                // If we scrolled close enough to the bottom of the page,\n                // animate the header back in.\n                this.showHeader_();\n                this.baseScrollTop_ \x3d this.lastScrollTop_;\n              }\n            },\n            this)\n      });\n      this.animationTask_();\n    }\n  },\n\n  /**\n   * Returns true if the header should be shown at the bottom of the page and\n   * false otherwise.\n   * @return {boolean}\n   * @private\n   */\n  shouldShowHeaderAtBottom_: function() {\n    if (!config.getInstance().getShowHeaderAtBottomOfDocument() ||\n        this.documentHeight_ \x3c\x3d 0) {\n      return false;\n    }\n    return this.documentHeight_ - this.lastScrollTop_ \x3c\n        this.bottomHeaderThreshold_;\n  },\n\n  /**\n   * Handle a scroll message from the document.\n   * @param {string} type Unused.\n   * @param {*} payload Contains the scroll information so that we can determine\n   * direction.\n   * @param {boolean} awaitResponse Unused.\n   * @private\n   */\n  scrollHandler_: function(type, payload, awaitResponse) {\n    const newScrollTop \x3d payload[constants.PAYLOAD_PARAMETERS.SCROLL_TOP];\n    if (!newScrollTop) {\n      return;\n    }\n    this.scrollHeader_(newScrollTop);\n    if (this.suspendHeaderAnimation_ \x3e 0 \x26\x26\n        goog.math.nearlyEquals(\n            newScrollTop, this.suspendHeaderAnimation_, 50)) {\n      this.suspendHeaderAnimation_ \x3d -1;\n    }\n    this.maxScrollTop_ \x3d Math.max(this.maxScrollTop_, newScrollTop);\n  },\n\n\n  /**\n   * Parses the height of the AMP Document from the documentHeight request, sets\n   * this.documentHeight_.\n   * @param {string} type Unused.\n   * @param {*} payload The document height message.\n   * @private\n   */\n  documentHeightHandler_: function(type, payload) {\n    let height \x3d payload[constants.PAYLOAD_PARAMETERS.HEIGHT];\n    if (height \x26\x26 height \x3e 0) {\n      this.documentHeight_ \x3d height;\n      this.maxDocumentHeight_ \x3d Math.max(this.maxDocumentHeight_, height);\n    }\n  },\n\n\n  /**\n   * Handles the documentLoaded request from the AMP document. Receipt of this\n   * request indicates that the AMP document has successfully loaded.\n   * @param {string} name The event type.\n   * @param {*} payload The document loaded message.\n   * @param {boolean} awaitResponse Whether the requester is waiting for a\n   *     response.\n   * @return {!goog.Promise\x3c?\x3e|undefined}\n   * @private\n   */\n  documentLoadedHandler_: function(name, payload, awaitResponse) {\n    this.documentLoaded_ \x3d true;\n    this.documentLoadedResolver_.resolve();\n    // Turn on sending once the document is loaded. It should be safe to assume\n    // frameChannel exists here as we only call this handler in response to\n    // receiveing a documentLoaded message on that channel.\n\n    const title \x3d payload[constants.PAYLOAD_PARAMETERS.TITLE];\n    const finalSourceUrl \x3d payload[constants.PAYLOAD_PARAMETERS.SOURCE_URL];\n    const canonicalUrl \x3d payload[constants.PAYLOAD_PARAMETERS.LINK_RELS] ?\n        payload[constants.PAYLOAD_PARAMETERS\n                    .LINK_RELS][constants.LINK_REL_VALUES.CANONICAL] :\n        \x27\x27;\n    let themeColorCss \x3d payload[constants.PAYLOAD_PARAMETERS.META_TAGS] ?\n        payload[constants.PAYLOAD_PARAMETERS\n                    .META_TAGS][constants.META_TAG_VALUES.THEME_COLOR] :\n        \x27\x27;\n    if (config.getHeaderConfig().getRandomThemeColor()) {\n      themeColorCss \x3d \x27#\x27 + Math.floor(Math.random() * 16777215).toString(16);\n    }\n    if (themeColorCss) {\n      this.model_.setAmpDocThemeColor(themeColorCss);\n      // TODO(b/78112652): Theme color loads late. Need to refresh the header.\n    }\n\n    this.updateItemSource_(title, finalSourceUrl, canonicalUrl);\n    if (canonicalUrl) {\n      this.canonicalUrlResolver_.resolve(canonicalUrl);\n    }\n\n    // Capture the final URL since the document may have followed a redirect,\n    // causing the original URL to be out of sync, stripping fragments.\n    if (finalSourceUrl) {\n      const sourceUrl \x3d goog.uri.utils.removeFragment(finalSourceUrl);\n      this.model_.setFinalAmpUrl(sourceUrl);\n    }\n\n    this.frameChannel_.setSendEnabled(true);\n    // Hide the overlay because the AMP page in the iframe can now better handle\n    // scroll, clicks, touches, and swipes. In practice, the overlay will not\n    // be used anymore.\n    goog.style.setStyle(this.temporaryOverlay_, {\x27display\x27: \x27none\x27});\n\n    // Tell the viewer that the document has loaded.\n    if (this.documentLoadedViewerHandler_) {\n      this.documentLoadedViewerHandler_();\n    }\n    // If the requester is waiting for a response, send back an empty object\n    // as a simple indicator that the request is complete.\n    return awaitResponse ? goog.Promise.resolve({}) : undefined;\n  },\n\n  /**\n   * Handles the load failed message from the cache by redirecting to the\n   * replaceUrl, or the publisher\x27s AMP URL.  If the document is not\n   * visible when the error is received, then it enqueues the redirect to take\n   * place when the document is shown.\n   * @param {string} name The event type.\n   * @param {*} payload The document loaded message.\n   * @param {boolean} awaitResponse Whether the requester is waiting for a\n   *     response.\n   * @return {!goog.Promise\x3c?\x3e|undefined}\n   * @private\n   */\n  loadFailedHandler_: function(name, payload, awaitResponse) {\n    // Stop waiting for the channel to open on an error page.\n    this.cancelChannelOpenTimer_();\n\n    // If the document is an ad, we always want to try to redirect.  For regular\n    // documents, this behaviour is controlled by a flag.\n    if (!this.model_.getIsAd() \x26\x26\n        !config.getInstance().getRedirectOnCacheErrorEnabled()) {\n      return goog.Promise.resolve();\n    }\n\n    // Wait for the Item to become visible before redirecting.\n    return this.waitForVisible_().then(() \x3d\x3e {\n      const logBuilder \x3d LogBuilder.createDefaultInstance();\n      // Log that there was a redirect due to an error. This log format\n      // matches the format used in inline_fallback.js.\n      if (this.srpLink_) {\n        logBuilder.addData(\x27ampve\x27, veUtil.getVedFromElement(this.srpLink_));\n      }\n      // If present, the payload should be the ingestion status, represented\n      // as a string.\n      if (goog.isString(payload)) {\n        logBuilder.addData(\x27ampin\x27, payload);\n      }\n      logBuilder\n          .addData(\n              \x27ampcf\x27,\n              proto.gws.common.api.amp.ClickFallbackType.CACHE_ERROR.toString())\n          .addData(\x27amp\x27, this.model_.getAmpUrl().getOriginalUrl())\n          .log();\n      this.navigateToFallback_();\n    });\n  },\n\n  /**\n   * Updates the publisher\x27s title for this item.\n   * @param {string} pageTitle The new page title.\n   * @param {string} newUrl The new url to set on the item.\n   * @param {string} canonicalUrl The new canonical url to set on the item.\n   * @private\n   */\n  updateItemSource_: function(pageTitle, newUrl, canonicalUrl) {\n    if (pageTitle) {\n      gws.amp.ItemFactory.get().updateItemPageTitle(this.model_, pageTitle);\n    }\n    const newDomain \x3d newUrl \x26\x26 goog.uri.utils.getDomain(newUrl);\n    if (newDomain \x26\x26\n        goog.uri.utils.getDomain(this.model_.getAmpUrl().getOriginalUrl()) !\x3d\n            newDomain) {\n      gws.amp.ItemFactory.get().updateItemDomainTitle(this.model_, newDomain);\n    }\n    if (canonicalUrl \x26\x26 !this.model_.getCanonicalUrl()) {\n      gws.amp.ItemFactory.get().updateItemCanonicalUrl(\n          this.model_, canonicalUrl);\n    }\n  },\n\n\n  /**\n   * @param {string} name The event type.\n   * @param {*} payload The channel open message. Receiving anything indicates\n   *     the channel is ready.\n   * @param {boolean} awaitResponse Whether the requester is waiting for a\n   *     response.\n   * @return {!goog.Promise\x3c?\x3e|undefined}\n   * @private\n   */\n  openChannelHandler_: function(name, payload, awaitResponse) {\n    this.channelOpened_ \x3d true;\n    this.frameChannel_.clearHandshakePoll();\n    this.hideLoadingIcon();\n    this.cancelChannelOpenTimer_();\n    // Update the target origin in case the final amp destination is different\n    // from the original one because of redirects, which can have impact on the\n    // CDN origin used as target if go/amp-curls is enabled b/34466538.\n    // TODO(34663788): Some of this handling logic should move to messaging.js\n    let targetOrigin \x3d payload[constants.PAYLOAD_PARAMETERS.TARGET_ORIGIN];\n    const docUrl \x3d payload[constants.PAYLOAD_PARAMETERS.URL];\n    if (targetOrigin) {\n      this.frameChannel_.setTargetOrigin(targetOrigin);\n    } else if (docUrl) {\n      // Handle open source message format. b/36505396\n      targetOrigin \x3d goog.uri.utils.getOrigin(docUrl);\n      this.frameChannel_.setTargetOrigin(targetOrigin);\n    }\n    let sourceUrl \x3d payload[constants.PAYLOAD_PARAMETERS.SOURCE_URL];\n    if (sourceUrl) {\n      // We must remove the fragment (which may contain init parameters).\n      sourceUrl \x3d goog.uri.utils.removeFragment(sourceUrl);\n      this.model_.setFinalAmpUrl(sourceUrl);\n    }\n    // Simply return a promise that always resolves to true to acknowledge the\n    // channel is open and working. Calling this with awaitResponse\x3dfalse is\n    // pointless.\n    return goog.Promise.resolve(true);\n  },\n\n\n  /**\n   * Retrieves the finalized replace URL for the AMP Frame.\n   * @param {string} name The event type.\n   * @param {*} payload\n   * @param {boolean} awaitResponse Whether the requester is waiting for a\n   *     response.\n   * @return {!goog.Promise\x3c?\x3e|undefined}\n   * @private\n   */\n  getReplaceUrlHandler_: function(name, payload, awaitResponse) {\n    return this.model_.getFinalAmpUrl().then((ampUrl) \x3d\x3e {\n      const newOrigin \x3d ampUrl.getOriginalOrigin();\n      const oldOrigin \x3d this.model_.getAmpUrl().getOriginalOrigin();\n      const replaceAmpUrl \x3d this.model_.getReplaceAmpUrl();\n      if (!replaceAmpUrl) {\n        return {\x27replaceUrl\x27: undefined};\n      }\n      // The origin must match either the initial origin or the final origin\n      // after any redirects.\n      const replaceOrigin \x3d replaceAmpUrl.getOriginalOrigin();\n      if (replaceOrigin !\x3d newOrigin \x26\x26 replaceOrigin !\x3d oldOrigin) {\n        return goog.Promise.reject(\x27invalid replace url origin\x27);\n      }\n      // Make the replace URL relative (ignoring the origin since we validated\n      // above), then resolve using the final AMP URL as the base. Finally,\n      // return the proxy version.\n      const replaceUrl \x3d goog.Uri\n                             .resolve(\n                                 ampUrl.getOriginalUrl(),\n                                 goog.Uri.parse(replaceAmpUrl.getOriginalUrl())\n                                     .setDomain(\x27\x27)\n                                     .setScheme(\x27\x27))\n                             .toString();\n      const result \x3d gws.amp.ItemFactory.get()\n                         .getAmpUrlFactory()\n                         .createAmpUrl(\n                             replaceUrl, /* opt_sharedUrl */ undefined,\n                             /* opt_debugUrlOverride */ undefined,\n                             this.model_.getIsAd(), this.model_.getIsStamp())\n                         .getViewerProxyUrl();\n      return {\x27replaceUrl\x27: result};\n    });\n  },\n\n\n  /**\n   * Handles the prerenderComplete request from the AMP document. Receipt of\n   * this request indicates that the AMP document has successfully rendered,\n   * including external resources and assets (like images).\n   * @param {string} name The event type.\n   * @param {*} payload The document loaded message.\n   * @param {boolean} awaitResponse unused.\n   * @return {!goog.Promise\x3c?\x3e|undefined}\n   * @private\n   */\n  prerenderCompleteHandler_: function(name, payload, awaitResponse) {\n    this.prerenderComplete_ \x3d true;\n    this.prerenderCompleteResolver_.resolve();\n    return goog.Promise.resolve();\n  },\n\n  /**\n   * @override\n   */\n  updateFragments: function(fragments) {\n    return this.frameHistory_.replace(fragments);\n  },\n\n  /** @override */\n  setDocumentLoadedViewerHandler: function(handler) {\n    this.documentLoadedViewerHandler_ \x3d handler;\n  },\n\n  /**\n   * Handles an AMP doc unload notification.\n   * @param {string} type Unused.\n   * @param {*} payload Unused.\n   * @param {boolean} awaitResponse Unused.\n   * @return {!goog.Promise\x3c?\x3e|undefined} A resolved promise.\n   * @private\n   */\n  unloadedHandler_: function(type, payload, awaitResponse) {\n    // The iframe is never expected to be unloaded. If it is unloaded, something\n    // has gone wrong so kill it.\n    // Note that the navigation has propably pushed a new history state onto the\n    // stack. Removing the iframe will mean there is no longer a meaningful\n    // history state to pop back to. As a result, history is likely to end up\n    // in a broken state after this.\n    // Given that this is a rare error condition, it\x27s better to accept this\n    // problem than to allow the unwanted page to display in the viewer.\n    this.removeIframe();\n\n    this.removeErrorPage_();\n    this.showErrorPage_(new gws.amp.errors.IframeUnloadedTemplate(\n        this.context_.getTemplatePool()));\n\n    return goog.Promise.resolve();\n  },\n\n  /**\n   * Renders and displays the given error page.\n   * @param {!jslayout.Template} tpl The template to render as error message.\n   * @private\n   */\n  showErrorPage_: function(tpl) {\n    tpl.instantiate();\n    const errorPageElement \x3d tpl.render();\n    this.errorPage_ \x3d errorPageElement;\n    const backButton \x3d goog.dom.getElementByClass(\n        gws.amp.FrameManager.ERROR_BACK_BUTTON_, this.errorPage_);\n    backButton.addEventListener(\x27click\x27, goog.bind(this.reloadFrame, this));\n    goog.dom.appendChild(this.parentElement_, this.errorPage_);\n    goog.style.setElementShown(this.temporaryOverlay_, false);\n  },\n\n\n  /**\n   * Unloads the error message displayed for this item.\n   * @private\n   */\n  removeErrorPage_: function() {\n    goog.style.setElementShown(this.temporaryOverlay_, true);\n    if (this.errorPage_) {\n      goog.dom.removeNode(this.errorPage_);\n    }\n    this.errorPage_ \x3d null;\n  },\n\n  /** @override */\n  focus: function() {\n    // Focuses the iframe. This is intended to be used to potentially mitigate\n    // b/24512452. Scrolling ocassionally locks and this may tickle the browser\n    // enough to prevent the freezing. Add this after animations.\n    // TODO(b/24512452): Reevaluate whether this is necessary.\n    if (this.iframe_) {\n      this.iframe_.focus();\n    }\n  },\n\n\n  /** @override */\n  saveLastScrollTop: function() {\n    this.context_.getDocStateStorage().storePayload(\n        this.lastScrollTop_, this.getAmpUrl().getOriginalUrl());\n  },\n\n\n  /** @override */\n  restoreLastScrollTop: function() {\n    const url \x3d this.getAmpUrl().getOriginalUrl();\n    const scrollTop \x3d this.context_.getDocStateStorage().readPayload(url);\n    if (scrollTop) {\n      this.sendScrollTop(scrollTop);\n      this.suspendHeaderAnimation_ \x3d scrollTop;\n      // Reset the suspendHeaderAnimation_ flag after 2 seconds.  This is a\n      // safety in case the scroll value isn\x27t restored within a few seconds.\n      scheduler.setTimeout(goog.bind(() \x3d\x3e {\n        this.suspendHeaderAnimation_ \x3d -1;\n      }, this), 2000);\n    }\n  },\n\n\n  /** @override */\n  getStandaloneUrl: function() {\n    return this.getAmpUrl().getStandaloneUrl();\n  },\n\n\n  /** @override */\n  getItemContainer: function() {\n    return this.parentElement_;\n  },\n\n\n  /** @override */\n  getModel: function() {\n    return this.model_;\n  },\n\n\n  /** @override */\n  shouldLogSwipeTrigger: function() {\n    return true;\n  },\n\n\n  /** @override */\n  disposeInternal: function() {\n    if (this.boundIframeLoadHandler_) {\n      this.iframe_.removeEventListener(\x27load\x27, this.boundIframeLoadHandler_);\n      this.boundIframeLoadHandler_ \x3d null;\n    }\n    this.removeIframe();\n  }\n});\n});  // goog.scope\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/frame_manager.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/amp/service/genericscheduler.js";
eval("goog.provide(\x27amp.service.GenericScheduler\x27);\n\n\n\n/**\n * A generic JavaScript execution scheduler.\n * @public\n * @interface\n * @template T\n */\namp.service.GenericScheduler \x3d function() {};\n\n\n/**\n * Schedules a function to be run after a certain amount of time.\n * @param {function(): (T|!IThenable\x3cT\x3e)} fn\n * @param {number} timeout\n * @return {?T} A handle to the timer ID.\n */\namp.service.GenericScheduler.prototype.setTimeout;\n\n\n/**\n * Schedules a function to be run asynchronously.\n * @param {function(): (T|!IThenable\x3cT\x3e)} fn\n * @template T\n */\namp.service.GenericScheduler.prototype.nextTick;\n\n\n/**\n * Removes a scheduled `setTimeout` function.\n * @param {?T} timerId A timer ID.\n */\namp.service.GenericScheduler.prototype.clearTimeout;\n\n//# sourceURL\x3dhttps://qs/javascript/amp/service/genericscheduler.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/gwsscheduler.js";
eval("goog.provide(\x27gws.amp.GwsScheduler\x27);\n\ngoog.require(\x27amp.service.GenericScheduler\x27);\ngoog.require(\x27search.task.scheduler\x27);\n\ngoog.scope(() \x3d\x3e {\nconst scheduler \x3d goog.module.get(\x27search.task.scheduler\x27);\n\n/**\n * This scheduler uses the search.task.scheduler to executes tasks and\n * functions.\n * @implements {amp.service.GenericScheduler\x3cnumber\x3e}\n */\ngws.amp.GwsScheduler \x3d goog.defineClass(null, {\n  /** @constructor */\n  constructor: function() {},\n\n\n  /**\n   * @override\n   * @return {?number}\n   */\n  setTimeout: function(fn, timeout) {\n    return scheduler.setTimeout(fn, timeout);\n  },\n\n\n  /** @override */\n  nextTick: function(fn) {\n    scheduler.nextTick(fn);\n  },\n\n\n  /**\n   * @override\n   * @param {?number} holder Record holding state for a scheduled function to\n   *     be removed.\n   */\n  clearTimeout: function(holder) {\n    scheduler.clearTimeout(holder);\n  }\n});\n\n});  // goog.scope\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/gwsscheduler.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/header/constants.js";
goog.loadModule("/**\n * @fileoverview This module provides common constants for the AMP Viewer\n * header.\n */\n\ngoog.module(\x27gws.amp.header.constants\x27);\n\nexports \x3d {\n  /**\n   * Number of bubbles required to apply the \x27collapsed\x27 styling.\n   * @const {number}\n   */\n  COLLAPSED_BUBBLE_THRESHOLD: 15,\n\n  /**\n   * The duration in ms of the bubble animation.\n   * @const {number}\n   */\n  BUBBLE_DURATION: 1250,\n\n  // Global CSS classes\n  /** @const {string} */\n  HEADER_ID: \x27amp-hdr\x27,\n  /** @const {string} */\n  BUBBLE: \x27amp-bbl\x27,\n  /** @const {string} */\n  BUBBLE_TEXT: \x27amp-bbltxt\x27,\n  /** @const {string} */\n  BUBBLE_CONTAINER: \x27amp-bblctr\x27,\n  /** @const {string} */\n  COLLAPSED: \x27amp-clps\x27,\n  /** @const {string} */\n  SELECTED: \x27amp-slct\x27,\n  /** @const {string} */\n  WITH_BUBBLES: \x27amp-wibbl\x27,\n  /** @const {string} */\n  TITLE_TEXT: \x27amp-ttltxt\x27,\n  /** @const {string} */\n  TITLE_CONTAINER: \x27amp-ttlctr\x27,\n  /** @const {string} */\n  BUBBLE_COMPONENT: \x27amp-bbl-cmp\x27,\n  /** @const {string} */\n  POPUP_COMPONENT: \x27amp-pop-cmp\x27,\n  /** @const {string} */\n  CANONICAL_URL: \x27amp-canurl\x27,\n  /** @const {string} */\n  CANONICAL_LINK_TEXT: \x27amp-cantxt\x27,\n  /** @const {string} */\n  SHOW_LINK_BUTTON: \x27amp-slb\x27,\n  /** @const {string} */\n  THEME_LIGHT: \x27amp-thm-lght\x27,\n  /** @const {string} */\n  THEME_DARK: \x27amp-thm-drk\x27,\n};\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/header/constants.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/header/events.js";
goog.loadModule("/**\n * @fileoverview This module provides type definitions for header carousel event\n * arguments.\n */\n\ngoog.module(\x27gws.amp.header.events\x27);\n\n/**\n * A struct for encapsulating ViewerItem/Item data in header carousel events.\n * Contains its index in the parent ViewerItemSet carousel, the item\x27s header\n * color as a CSS color if it exists, and the publisher domain (e.g.,\n * \x22google.com\x22).\n * @typedef {{\n *   index: number,\n *   headerColor: ?string,\n *   publisherDomain: string,\n * }}\n */\nlet ItemData;\n\n/**\n * A struct for encapsulating header carousel itemChanged event data. Contains\n * the data of the newly selected item.\n * @typedef {{\n *   itemData: !ItemData,\n * }}\n */\nlet ItemChangedEvent;\n\nexports \x3d {\n  ItemChangedEvent,\n  ItemData,\n};\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/header/events.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/header/header_animator_delegate.js";
goog.loadModule("goog.module(\x27gws.amp.header.HeaderAnimatorDelegate\x27);\n\nconst {ItemChangedEvent} \x3d goog.require(\x27gws.amp.header.events\x27);\n\n/**\n * An interface for animating header contents on carousel slide events.\n * @interface\n */\nclass HeaderAnimatorDelegate {\n  /**\n   * Handles a slide gesture as it ends.\n   * @param {!ItemChangedEvent} e\n   */\n  itemChanged(e) {}\n}\n\nexports \x3d HeaderAnimatorDelegate;\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/header/header_animator_delegate.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/header/header_animator.js";
goog.loadModule("goog.module(\x27gws.amp.header.HeaderAnimator\x27);\n\nconst DelegateRegistry \x3d goog.require(\x27goog.delegate.DelegateRegistry\x27);\nconst HeaderAnimatorDelegate \x3d goog.require(\x27gws.amp.header.HeaderAnimatorDelegate\x27);\nconst {ItemChangedEvent} \x3d goog.require(\x27gws.amp.header.events\x27);\nconst {assert} \x3d goog.require(\x27goog.asserts\x27);\n\n/** @type {!DelegateRegistry\x3c!HeaderAnimatorDelegate\x3e} */\nconst registry \x3d new DelegateRegistry().expectAtMostOneDelegate();\n\n/**\n * A class that manages animating the contents of the header on carousel slide\n * events. This class must be instantiated, and the proper delegate will be\n * automatically provided.\n */\nclass HeaderAnimator {\n  /** @return {!DelegateRegistry\x3c!HeaderAnimatorDelegate\x3e} */\n  static registry() {\n    return registry;\n  }\n\n  constructor() {\n    /** @private @const {!HeaderAnimatorDelegate} */\n    this.delegate_ \x3d assert(registry.delegate());\n  }\n\n  /**\n   * Handles a slide gesture as it ends.\n   * @param {!ItemChangedEvent} e\n   */\n  itemChanged(e) {\n    this.delegate_.itemChanged(e);\n  }\n}\n\nexports \x3d HeaderAnimator;\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/header/header_animator.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/header_manager.js";
eval("goog.provide(\x27gws.amp.HeaderManager\x27);\n\ngoog.require(\x27goog.Disposable\x27);\ngoog.require(\x27goog.Promise\x27);\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.dom\x27);\ngoog.require(\x27goog.dom.classlist\x27);\ngoog.require(\x27goog.style\x27);\ngoog.require(\x27goog.style.transform\x27);\ngoog.require(\x27gws.amp.HeaderConfig\x27);\ngoog.require(\x27gws.amp.config\x27);\ngoog.require(\x27gws.amp.header.HeaderAnimator\x27);\ngoog.require(\x27gws.amp.header.constants\x27);\ngoog.require(\x27gws.amp.logUtil\x27);\ngoog.require(\x27gws.jsaction\x27);\ngoog.require(\x27search.animation.Animation\x27);\ngoog.require(\x27search.log.ve.GraftType\x27);\ngoog.require(\x27search.log.ve.interaction\x27);\ngoog.require(\x27search.log.ve.util\x27);\ngoog.require(\x27search.suit.popup.PopupController\x27);\ngoog.require(\x27search.wiz.manager\x27);\n\ngoog.scope(function() {\nconst HeaderAnimator \x3d goog.module.get(\x27gws.amp.header.HeaderAnimator\x27);\nconst Graft \x3d goog.module.get(\x27search.log.ve.interaction\x27).Graft;\nconst GraftType \x3d goog.module.get(\x27search.log.ve.GraftType\x27);\nconst constants \x3d goog.module.get(\x27gws.amp.header.constants\x27);\nconst veUtil \x3d goog.module.get(\x27search.log.ve.util\x27);\n\n\n/**\n * A class for updating amp header title and bubbles for different amp item\n * sets.\n */\ngws.amp.HeaderManager \x3d goog.defineClass(goog.Disposable, {\n  /**\n   * @param{!gws.amp.AmpViewerDom} viewerDom The dom for the amp viewer.\n   * controller\n   * @extends {goog.Disposable}\n   * @constructor\n   */\n  // TODO(b/77810783): Replace viewerDom with rootElm or headerDom.\n  constructor: function(viewerDom) {\n    /**\n     * The header element.\n     * @private @const {!Element}\n     */\n    // TODO(b/77810783): Obtain using rootElm or share a reference w/ rootElm.\n    this.headerDom_ \x3d goog.dom.getRequiredElement(constants.HEADER_ID);\n\n    /**\n     * The root element that contains the entire header.\n     * @private {?Element}\n     */\n    this.rootElm_ \x3d viewerDom.getHeader();\n\n    /**\n     * Whether the header is currently shown or not.\n     * @private {boolean}\n     */\n    this.shown_ \x3d true;\n\n    /**\n     * The current configuration of the header.\n     * @private {?gws.amp.HeaderConfig}\n     */\n    this.headerConfig_ \x3d null;\n\n    /**\n     * The current animation.\n     * @private {?search.animation.Animation}\n     */\n    this.animation_ \x3d null;\n\n    /**\n     * The current animation frame.\n     * @private {?number}\n     */\n    this.animationFrame_ \x3d null;\n\n    /**\n     * The div containing header bubbles.\n     * @private @const {!Element}\n     */\n    this.bubblesDiv_ \x3d goog.dom.getRequiredElementByClass(\n        constants.BUBBLE_CONTAINER, this.headerDom_);\n\n    /**\n     * The dom element containing the canonical url.\n     * @private @const {?Element}\n     */\n    this.canonicalUrlDom_ \x3d\n        goog.dom.getElementByClass(constants.CANONICAL_URL, this.headerDom_);\n\n    /**\n     * The dom element containing the text of the canonical url.\n     * @private {?Element}\n     */\n    this.canonicalLinkTextDom_ \x3d goog.dom.getElementByClass(\n        constants.CANONICAL_LINK_TEXT, this.headerDom_);\n    /**\n     * The div containing the canonical link button popup.\n     * @private @const {?Element}\n     */\n    this.showLinkButtonRoot_ \x3d\n        goog.dom.getElementByClass(constants.SHOW_LINK_BUTTON, this.headerDom_);\n\n    if (this.showLinkButtonRoot_) {\n      let boundShowHandler \x3d this.handleShowLinkPopup_.bind(this);\n      gws.jsaction.registerGlobalHandler(\n          search.suit.popup.PopupController.LegacyEventType.SHOW,\n          boundShowHandler);\n      this.addOnDisposeCallback(() \x3d\x3e {\n        gws.jsaction.unregisterGlobalHandler(\n            search.suit.popup.PopupController.LegacyEventType.SHOW,\n            boundShowHandler);\n      });\n    }\n\n    /**\n     * Server provided configuration.\n     * @private {!proto.gws.plugins.amp.config.HeaderConfig}\n     */\n    this.configProto_ \x3d gws.amp.config.getHeaderConfig();\n\n    const popupElements \x3d\n        goog.dom.getElementsByClass(constants.POPUP_COMPONENT, this.headerDom_);\n\n    /**\n     * An array of popup controller promises within the header.\n     * @private {!Array\x3c!goog.Thenable\x3c!search.suit.popup.PopupController\x3e\x3e}\n     */\n    this.popupControllers_ \x3d\n        goog.array.map(popupElements, (element) \x3d\x3e {\n          const thenable \x3d search.wiz.manager.getController(element);\n          return /** @type {!goog.Thenable\x3c!search.suit.popup.PopupController\x3e} */ (\n          thenable);\n        });\n\n    /** @private @const {!HeaderAnimator} */\n    // TODO(b/77810783): Pass in headerDom.\n    this.animator_ \x3d new HeaderAnimator();\n  },\n\n  /**\n   * @return {!HeaderAnimator} The header\x27s animator.\n   */\n  // TODO(ryanmcgrail): Don\x27t expose this object, expose API through\n  // HeaderManager and keep this encapsulated.\n  getAnimator: function() {\n    return this.animator_;\n  },\n\n  /**\n   * Gets the configuration for the currently displayed header.\n   * @return {?gws.amp.HeaderConfig} the header configuration.\n   */\n  getCurrentConfig: function() {\n    return this.headerConfig_;\n  },\n\n  /**\n   * Updates the viewer header based on a header config.\n   * @param {!gws.amp.HeaderConfig} headerConfig The header config.\n   */\n  updateHeader: function(headerConfig) {\n    goog.style.setElementShown(\n        this.headerDom_, headerConfig.shouldShowHeader());\n    this.updateBubbles_(headerConfig.getNumBubbles());\n    this.headerConfig_ \x3d headerConfig;\n  },\n\n  /**\n   * Updates the canonical URL text and href in the three dots menu.\n   * @param {string} url The url being set in the href e.g., the publisher url.\n   * @param {?string} canonicalUrl The canonical url.\n   */\n  updateCanonicalUrl: function(url, canonicalUrl) {\n    if (this.canonicalUrlDom_) {\n      let linkUrl \x3d canonicalUrl || url;\n      // The templates will soon only want to replace the textContent of the\n      // link text element, but due to skew we must support both cases here.\n      let textDom \x3d this.canonicalLinkTextDom_ || this.canonicalUrlDom_;\n      textDom.textContent \x3d linkUrl;\n      // Fill the anchor with a /url redirect url.\n      goog.module.get(\x27gws.amp.logUtil\x27)\n          .fillRedirectHref(\n              this.canonicalUrlDom_, linkUrl,\n              gws.amp.config.getInstance().getPsig());\n      // Click tracking is actually done via ping. This may not work on all\n      // browsers, but we want to provide a clean destination URL when copied\n      // so we are willing to accept lost logging on some browsers.\n      // Move the redirect url from href to ping then put the destination url\n      // in the href.\n      this.canonicalUrlDom_.setAttribute(\x27ping\x27, this.canonicalUrlDom_.href);\n      this.canonicalUrlDom_.href \x3d linkUrl;\n    }\n  },\n\n  /**\n   * Helper to snap headers to positions.\n   * @param {number} target The target translation to snap to.\n   * @return {!goog.Promise}\n   * @private\n   */\n  animateHeaderToTranslation_: function(target) {\n    const timing \x3d {\n      duration: this.configProto_.getHeaderAnimationDurationMs(),\n      easing: this.configProto_.getHeaderAnimationCurve(),\n      delay: 0\n    };\n\n    const initial \x3d goog.style.transform.getTranslation(this.headerDom_).y;\n\n    const animation \x3d new search.animation.Animation(this.headerDom_, timing);\n    let animationPromise \x3d animation.translate(0, initial, 0, 0, target, 0)\n                               .play()\n                               .then(goog.bind(function() {\n                                 // The animation may have been overridden so we\n                                 // need to check that it\x27s the same one.\n                                 if (this.animation_ \x3d\x3d animation) {\n                                   this.animation_ \x3d null;\n                                 }\n                               }, this));\n    this.animation_ \x3d animation;\n    return animationPromise;\n  },\n\n  /**\n   * Helper to force headers to positions.  This does not animate and should not\n   * be used when the header is visible.\n   * @param {number} target The target translation to snap to.\n   * @return {!goog.Promise}\n   * @private\n   */\n  forceHeaderToTranslation_: function(target) {\n    if (this.animationFrame_ !\x3d null) {\n      window.cancelAnimationFrame(this.animationFrame_);\n    }\n    if (this.animation_ !\x3d null) {\n      this.animation_.finish();\n    }\n    goog.style.transform.setTranslation(this.headerDom_, 0, target);\n    return goog.Promise.resolve();\n  },\n\n  /**\n   * Returns whether the header is currently animating.\n   * @return {boolean} Whether the header is currently animating.\n   */\n  isAnimating: function() {\n    return this.animation_ !\x3d null;\n  },\n\n\n  /**\n   * Hide the header.\n   * @param {boolean\x3d} animate Whether to animate the transition.\n   * @return {!goog.Promise}\n   */\n  hide: function(animate \x3d true) {\n    if (!this.headerConfig_) {\n      return goog.Promise.resolve();\n    }\n    let target \x3d -this.headerConfig_.getHeaderHeight();\n    // If we are not animating (forcing) the transition, we want to run even if\n    // the header already thinks it\x27s \x22hidden\x22, because it may be in the middle\n    // of a translation animation that we want to shortcut.\n    if (!animate) {\n      this.shown_ \x3d false;\n      return this.forceHeaderToTranslation_(target);\n    }\n    if (!this.shown_) {\n      return goog.Promise.resolve();\n    }\n    this.shown_ \x3d false;\n    // On a hide, we may want to wait for a few frames to minimize gap.\n    return this.delayByFrames_(() \x3d\x3e {\n      // Hide any popups.\n      return goog.Promise.all([\n        this.closePopups(),\n        // Animate the header away.\n        this.animateHeaderToTranslation_(target)\n      ]);\n    }, this.configProto_.getHeaderAnimationDelayFrames());\n  },\n\n\n  /**\n   * Adds a specified number of animation frame delays before taking the\n   * provided action.\n   * @param {function(): !goog.Promise} action The action to take after the delay.\n   * @param {number} frames The number of animation frames to wait before\n   *     performing the action.\n   * @return {!goog.Promise}\n   * @private\n   */\n  delayByFrames_: function(action, frames) {\n    let resolver \x3d goog.Promise.withResolver();\n    if (frames \x3e 0) {\n      this.animationFrame_ \x3d window.requestAnimationFrame(() \x3d\x3e {\n        resolver.resolve(this.delayByFrames_(action, frames - 1));\n      });\n    } else {\n      this.animationFrame_ \x3d null;\n      resolver.resolve(action());\n    }\n    return resolver.promise;\n  },\n\n\n  /**\n   * Show the header.\n   * @param {boolean\x3d} animate Whether to animate the transition.\n   */\n  show: function(animate \x3d true) {\n    // If we are not animating (forcing) the transition, we want to run even if\n    // the header already thinks it\x27s \x22shown\x22, because it may be in the middle\n    // of a translation animation that we want to shortcut.\n    if (!animate) {\n      this.shown_ \x3d true;\n      this.forceHeaderToTranslation_(0 /* target */);\n    }\n    if (this.shown_) {\n      return;\n    }\n    this.shown_ \x3d true;\n    this.animateHeaderToTranslation_(0 /* target */);\n  },\n\n  /**\n   * Close all open popups within header\n   * @return {!goog.Promise}\n   */\n  closePopups: function() {\n    let allControllersPromise \x3d [];\n    for (let i \x3d 0; i \x3c this.popupControllers_.length; i++) {\n      allControllersPromise.push(\n          this.popupControllers_[i].then((controller) \x3d\x3e {\n            controller.setVisible(false);\n          }));\n    }\n    return goog.Promise.all(allControllersPromise);\n  },\n\n  /**\n   * Updates the number of bubbles in the header and applies proper styling to\n   * them.\n   * @param {number} newBubbleCount the number of bubbles to display.\n   */\n  updateBubbles_: function(newBubbleCount) {\n    if (this.bubblesDiv_) {\n      goog.dom.removeChildren(this.bubblesDiv_);\n\n      for (let i \x3d 0; i \x3c newBubbleCount; i++) {\n        const newBubble \x3d goog.dom.createElement(\x27span\x27);\n        goog.dom.classlist.add(newBubble, constants.BUBBLE);\n        goog.dom.appendChild(this.bubblesDiv_, newBubble);\n      }\n\n      const enableCollapsedBubbles \x3d\n          newBubbleCount \x3e constants.COLLAPSED_BUBBLE_THRESHOLD;\n      goog.dom.classlist.enable(\n          this.bubblesDiv_, constants.COLLAPSED, enableCollapsedBubbles);\n\n      const showBubbles \x3d newBubbleCount \x3e 0;\n      goog.style.setElementShown(this.bubblesDiv_, showBubbles);\n      const titleContainer \x3d goog.dom.getElementByClass(\n          constants.TITLE_CONTAINER, this.headerDom_);\n      if (titleContainer) {\n        goog.dom.classlist.enable(\n            titleContainer, constants.WITH_BUBBLES, showBubbles);\n      }\n    }\n  },\n\n  /**\n   * Handles a SHOW event from the canonical link popup.\n   * @param {!Event} event The jsaction event.\n   * @private\n   */\n  handleShowLinkPopup_: function(event) {\n    // The handler is registered globally so check that it is from the desired\n    // element.\n    if (event.target \x26\x26 event.target.parentNode \x26\x26 this.canonicalUrlDom_ \x26\x26\n        this.showLinkButtonRoot_ \x26\x26\n        goog.dom.contains(\n            this.showLinkButtonRoot_,\n            /** @type {!Node} */ (event.target))) {\n      search.log.ve.interaction.logGrafts(\n          [new Graft(this.canonicalUrlDom_, GraftType.SHOW)],\n          {triggerElement: this.showLinkButtonRoot_});\n    }\n  },\n\n  /**\n   * Displays or undisplays. Unlike show() and hide(), the change is immediate\n   * without animation. Displaying may not actually cause the header to become\n   * visible if it was hidden at the time it was undisplayed. Displaying has no\n   * impact if the header is not displayed by the config.\n   * @param {boolean} display\n   */\n  displayImmediate: function(display) {\n    if (this.rootElm_) {\n      goog.style.setElementShown(this.rootElm_, display);\n    }\n  }\n});  // goog.defineClass\n});\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/header_manager.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/messaging_error_logger.js";
eval("goog.provide(\x27gws.amp.MessagingErrorLogger\x27);\n\ngoog.require(\x27amp.constants\x27);\ngoog.require(\x27amp.messaging\x27);\ngoog.require(\x27amp.messaging.ErrorLogger\x27);\ngoog.require(\x27gws.error\x27);\n\n\n/**\n * GWS Specific implementation of ErrorLogger.\n * @implements {amp.messaging.ErrorLogger}\n */\ngws.amp.MessagingErrorLogger \x3d goog.defineClass(null, {\n  statics: {\n    /**\n     * Installs a MessagingErrorLogger as the logger to use for messaging.\n     */\n    install: function() {\n      const logger \x3d new gws.amp.MessagingErrorLogger();\n      amp.messaging.setErrorLogger(logger);\n    }\n  },\n\n\n  /**\n   * @constructor\n   */\n  constructor: function() {},\n\n\n  /** @override */\n  logError: function(msg, opt_data) {\n    // Ignore errors due to the unloaded request since it is likely to be sent\n    // to a dead channel. This is peeking rather deep into the implementation\n    // details of messaging.\n    if (opt_data \x26\x26 goog.isObject(opt_data) \x26\x26\n        opt_data[\x27name\x27] \x3d\x3d amp.constants.REQUEST_NAMES.UNLOADED) {\n      return;\n    }\n    const e \x3d new Error(msg);\n    gws.error.log(e, opt_data);\n  }\n});\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/messaging_error_logger.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/touch/handlers.js";
goog.loadModule("/**\n * @fileoverview Handlers for touch events that are proxied from an iframe to\n * the Viewer.\n *\n * Also handles the related full overlay requests which impact how touches are\n * handled.\n *\n * Call register() to register handlers on a Channel.\n */\ngoog.module(\x27gws.amp.touch.handlers\x27);\n\nconst Channel \x3d goog.require(\x27amp.messaging.Channel\x27);\nconst ListenerCoalescer \x3d goog.require(\x27wireless.events.ListenerCoalescer\x27);\nconst Promise \x3d goog.require(\x27goog.Promise\x27);\nconst asserts \x3d goog.require(\x27goog.asserts\x27);\nconst constants \x3d goog.require(\x27amp.constants\x27);\nconst dom \x3d goog.require(\x27goog.dom\x27);\n\n// TODO(b/67856908): goog.require(\x27gws.amp.HeaderManager\x27) once it is moved to a\n// library that does not introduce a circular dependency. Then remove this\n// typedef.\n/**\n * A private interface for HeaderManager to avoid a circular dependency.\n * @typedef {{\n *   closePopups: function(),\n *   displayImmediate: function(boolean)\n * }}\n */\nlet HeaderManager;\n\n/**\n * Updates all touches to add a target and to use the screen position instead\n * of client position. The client coordinates are relative to the iframe.\n * @param {?EventTarget} elm The target element to set on each touch.\n * @param {?IArrayLike\x3c!Object\x3e} touches A list of Touch like\n *     objects to update.\n */\nfunction updateTouches(elm, touches) {\n  // If the touch array exists, update the position of each touch.\n  if (touches) {\n    for (let i \x3d 0; i \x3c touches.length; i++) {\n      const touch \x3d touches[i];\n      touch.target \x3d elm;\n      touch.clientX \x3d touch.screenX;\n      touch.clientY \x3d touch.screenY;\n    }\n  }\n}\n\n/**\n * A class that implements handlers for touch and overlay message events. The\n * events are propagated to the target element. Header state is also updated.\n * Touches may be manipulated or dropped based on the state of the handler.\n */\nclass RequestHandler {\n  /**\n   * @param {?gws.amp.touch.Interceptor} touchInterceptor The interceptor\n   *     that can mutate touch events or null if not needed.\n   * @param {!HeaderManager} headerManager That is manipulated in\n   *     response to events.\n   * @param {function():!Element} touchTargetProvider A function that provides\n   *     the element that is the receiver of touch events.\n   * @param {function()} cancelSwipe A function to reset the currently active\n   *     slider to currently selected item before a swipe started.\n   */\n  constructor(\n      touchInterceptor, headerManager, touchTargetProvider, cancelSwipe) {\n    /**\n     * @private {?gws.amp.touch.Interceptor}\n     * @const\n     */\n    this.touchInterceptor_ \x3d touchInterceptor;\n\n    /**\n     * @private {function():!Element}\n     * @const\n     */\n    this.touchTargetProvider_ \x3d touchTargetProvider;\n\n    /**\n     * @private {!HeaderManager}\n     * @const\n     */\n    this.headerManager_ \x3d headerManager;\n\n    /**\n     * @private {function()}\n     * @const\n     */\n    this.cancelSwipe_ \x3d cancelSwipe;\n\n    /**\n     * True if the viewer is in full overlay mode with the header hidden.\n     * @private {boolean}\n     */\n    this.inFullOverlay_ \x3d false;\n  }\n\n  /**\n   * @param {string} type The event type.\n   * @param {*} payload The fake touch event object.\n   * @return {!Promise\x3c?\x3e}\n   * @private\n   */\n  touchEventProxy_(type, payload) {\n    if (!this.inFullOverlay_) {\n      let touchEvent \x3d /** @type {!TouchEvent} */ (payload);\n\n      // Attempt to detect back navigation swipes on iOS Safari. A browser\n      // navigation swipe should not swipe the AMP items or cause a close\n      // transition. If it is navigation swipe, then do not propagate the touch\n      // event any further to prevent the slider from swiping too.\n      // See b/24734442 and b/74391409.\n      if (this.touchInterceptor_ \x26\x26\n          this.touchInterceptor_.shouldSuppressTouch(touchEvent)) {\n        if (type \x3d\x3d \x27touchend\x27) {\n          // If this is the end of a swipe, then browser is about to navigate\n          // back through history so reset the slider to its state before\n          // the swipe started without animating.\n          this.cancelSwipe_();\n        }\n        return Promise.resolve({});\n      }\n\n      // Set the iframe as the target since the actual target element is not\n      // accessible.\n      const win \x3d dom.getWindow();\n      touchEvent.target \x3d win;\n      updateTouches(win, touchEvent.touches);\n      updateTouches(win, touchEvent.changedTouches);\n      touchEvent.preventDefault \x3d goog.nullFunction;\n      const container \x3d this.touchTargetProvider_();\n      const listenerCoalescer \x3d ListenerCoalescer.getListenerCoalescer(\n          asserts.assertElement(container));\n      listenerCoalescer.fire(touchEvent);\n\n      this.headerManager_.closePopups();\n      // If the requester is waiting for a response, send back an empty object\n      // as a simple indicator that the request is complete.\n    }\n    return Promise.resolve({});\n  }\n\n  /**\n   * Updates the full overlay state of the viewer. Hides/shows the header.\n   * @param {string} type The event type.\n   * @return {!Promise\x3c?\x3e}\n   * @private\n   */\n  updateFullOverlayHandler_(type) {\n    const shown \x3d type \x3d\x3d constants.REQUEST_NAMES.CANCEL_FULL_OVERLAY;\n    this.inFullOverlay_ \x3d !shown;\n\n    this.headerManager_.displayImmediate(shown);\n    return Promise.resolve();\n  }\n}\n\n/**\n * @param {!Channel} channel\n * @param {?gws.amp.touch.Interceptor} touchInterceptor\n * @param {!HeaderManager} headerManager\n * @param {function():!Element} touchTargetProvider\n * @param {function()} cancelSwipe A function to reset the currently active\n *     slider to its currently selected item before a swipe started.\n */\nexports.register \x3d\n    (channel, touchInterceptor, headerManager, touchTargetProvider,\n     cancelSwipe) \x3d\x3e {\n      const requestHandler \x3d new RequestHandler(\n          touchInterceptor, headerManager, touchTargetProvider, cancelSwipe);\n\n      // Listen for touch events from all iframes.\n      const boundTouchProxy \x3d (type, payload, awaitResponse) \x3d\x3e {\n        return requestHandler.touchEventProxy_(type, payload);\n      };\n      channel.registerHandler(\n          constants.REQUEST_NAMES.TOUCHSTART, boundTouchProxy);\n      channel.registerHandler(\n          constants.REQUEST_NAMES.TOUCHMOVE, boundTouchProxy);\n      channel.registerHandler(\n          constants.REQUEST_NAMES.TOUCHEND, boundTouchProxy);\n\n      // Listen for fullOverlay events.\n      const boundUpdateFullOverlayHandler \x3d (type, payload, awaitResponse) \x3d\x3e {\n        return requestHandler.updateFullOverlayHandler_(type);\n      };\n      channel.registerHandler(\n          constants.REQUEST_NAMES.REQUEST_FULL_OVERLAY,\n          boundUpdateFullOverlayHandler);\n      channel.registerHandler(\n          constants.REQUEST_NAMES.CANCEL_FULL_OVERLAY,\n          boundUpdateFullOverlayHandler);\n    };\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/touch/handlers.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/touch/interceptor.js";
goog.loadModule("goog.module(\x27gws.amp.touch.Interceptor\x27);\ngoog.module.declareLegacyNamespace();\n\n/**\n * Enum for the possible types of transitions for opening or closing the viewer.\n * @enum {string}\n */\nconst Type \x3d {\n  ANIMATED: \x27anim\x27,\n  NONE: \x27none\x27\n};\n\n/** @type {!Type} */\nconst DEFAULT_CLOSE_TYPE \x3d Type.ANIMATED;\n\n/**\n * A manager that determines what type of transitions to use when opening or\n * closing the viewer. This attempts to detect browser history navigation swipes\n * on iOS.\n * See b/24734442\n */\nclass Interceptor {\n  /**\n   * Constructs a new Interceptor with the default next close Type.\n   */\n  constructor() {\n    /**\n     * The type of transition to use for the next close animation.\n     * @private {!Type}\n     */\n    this.nextCloseType_ \x3d DEFAULT_CLOSE_TYPE;\n  }\n\n  /**\n   * @param {!Object} touchEvent A touch event or fake touch event object.\n   * @return {boolean} True if the handling of the touch event should be\n   *     suppressed.\n   */\n  shouldSuppressTouch(touchEvent) {\n    // Attempt to detect back navigation swipes on iOS Safari. A browser\n    // navigation swipe should not swipe the AMP items or cause a close\n    // transition. See b/24734442\n    if (this.isBackNavigationSwipe_(touchEvent)) {\n      // Suppress the close animation\n      this.setNextCloseType_(Type.NONE);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Reads the next close type and resets it to the default.\n   * @return {boolean}\n   */\n  nextCloseIsAnimated() {\n    const nextClose \x3d this.nextCloseType_;\n    this.setNextCloseType_(DEFAULT_CLOSE_TYPE);\n    return nextClose \x3d\x3d Type.ANIMATED;\n  }\n\n  /**\n   * @param {!Object} touchEvent A touch event or fake touch event object.\n   * @return {boolean} True if this is a back browser navigation touch.\n   * @private\n   */\n  isBackNavigationSwipe_(touchEvent) {\n    for (let i \x3d 0; i \x3c touchEvent.changedTouches.length; i++) {\n      const touch \x3d touchEvent.changedTouches[i];\n      if (touch.screenX \x3c 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Sets the type for the next viewer close transition.\n   * @param {!Type} type The type to set.\n   * @private\n   */\n  setNextCloseType_(type) {\n    this.nextCloseType_ \x3d type;\n  }\n}\n\nexports \x3d Interceptor;\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/touch/interceptor.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/window_manipulator.js";
eval("goog.provide(\x27gws.amp.WindowManipulator\x27);\ngoog.provide(\x27gws.amp.WindowManipulatorDelegate\x27);\n\ngoog.require(\x27fava.delegate.Delegate\x27);\ngoog.require(\x27fava.delegate.Delegator\x27);\ngoog.require(\x27goog.Disposable\x27);\ngoog.require(\x27goog.Promise\x27);\ngoog.require(\x27goog.dom\x27);\ngoog.require(\x27gws.amp.ItemContentManager\x27);\n\n/**\n * A class that manages access to browser and window related APIs.\n */\ngws.amp.WindowManipulator \x3d goog.defineClass(goog.Disposable, {\n  /**\n   * @extends {goog.Disposable}\n   * @constructor\n   */\n  constructor: function() {\n    fava.delegate.Delegator.makeDelegator(this);\n  },\n\n  /**\n   * Refreshes the current URL to reflect any new fragment parameters in the\n   * provided item\x27s AMP URL.\n   * @param {!gws.amp.ItemContentManager} itemContentManager\n   * @return {!goog.Promise} A promise that resolves once the URL has been\n   *     updated.\n   */\n  refreshUrl(itemContentManager) {\n    return this.delegate_.refreshUrl(itemContentManager);\n  },\n\n  /**\n   * Sets the title for display in the header. The header implementation may\n   * vary by platform.\n   * @param {string} domainTitle The domain string to use for display purposes.\n   *   May be formatted in certain circumstances, such as by being prefixed with\n   *   \x22From\x22 in AGSA.\n   * @param {string} ampTitle The title of the AMP document.\n   * @param {string} publisherUrl The AMP document URL.\n   */\n  setTitle(domainTitle, ampTitle, publisherUrl) {\n    this.delegate_.setTitle(domainTitle, ampTitle, publisherUrl);\n  }\n});  // goog.defineClass\n\n\n/**\n * Base delegate class. Extend this class to specialize the window manipulator\n * for a particular context.\n */\ngws.amp.WindowManipulatorDelegate \x3d goog.defineClass(fava.delegate.Delegate, {\n  /**\n   * @constructor\n   * @param {!gws.amp.WindowManipulator} windowManipulator The delegator\x27s\n   * manipulator.\n   * @extends {fava.delegate.Delegate}\n   */\n  constructor: function(windowManipulator) {\n    gws.amp.WindowManipulatorDelegate.base(\n        this, \x27constructor\x27, windowManipulator);\n\n    /** @private @const {!gws.amp.WindowManipulator} */\n    this.windowManipulator_ \x3d windowManipulator;\n  },\n\n\n  /**\n   * Sets the title for display in the header. The header implementation may\n   * vary by platform.\n   * @param {string} domainTitle The domain string to use for display purposes.\n   *   May be formatted in certain circumstances, such as by being prefixed with\n   *   \x22From\x22 in AGSA.\n   * @param {string} ampTitle The title of the AMP document.\n   * @param {string} publisherUrl The AMP document URL.\n   */\n  setTitle(domainTitle, ampTitle, publisherUrl) {\n    // The viewer header will display the domain so the document title can be\n    // updated to the more friendly but untrusted title from the AMP document.\n    goog.dom.getWindow().document.title \x3d ampTitle;\n  },\n\n\n  /**\n   * Refreshes the current URL to reflect any new fragment parameters in the\n   * provided item\x27s AMP URL.\n   * @param {!gws.amp.ItemContentManager} itemContentManager\n   * @return {!goog.Promise} A promise that resolves once the URL has been\n   *     updated.\n   * @protected\n   */\n  refreshUrl(itemContentManager) {\n    return goog.Promise.resolve();\n  },\n});\n\nfava.delegate.Delegate.setBase(\n    gws.amp.WindowManipulatorDelegate, gws.amp.WindowManipulator);\nfava.delegate.Delegate.callFirst(\n    gws.amp.WindowManipulatorDelegate.prototype.setTitle);\nfava.delegate.Delegate.callFirst(\n    gws.amp.WindowManipulatorDelegate.prototype.refreshUrl);\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/window_manipulator.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/crypt/sha384.js";
eval("// Copyright 2014 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview SHA-384  cryptographic hash.\n *\n * Usage:\n *   var sha384 \x3d new goog.crypt.Sha384();\n *   sha384.update(bytes);\n *   var hash \x3d sha384.digest();\n *\n * @author fy@google.com (Frank Yellin)\n */\n\ngoog.provide(\x27goog.crypt.Sha384\x27);\n\ngoog.require(\x27goog.crypt.Sha2_64bit\x27);\n\n\n\n/**\n * Constructs a SHA-384 cryptographic hash.\n *\n * @constructor\n * @extends {goog.crypt.Sha2_64bit}\n * @final\n * @struct\n */\ngoog.crypt.Sha384 \x3d function() {\n  goog.crypt.Sha384.base(\n      this, \x27constructor\x27, 6 /* numHashBlocks */,\n      goog.crypt.Sha384.INIT_HASH_BLOCK_);\n};\ngoog.inherits(goog.crypt.Sha384, goog.crypt.Sha2_64bit);\n\n\n/** @private {!Array\x3cnumber\x3e} */\ngoog.crypt.Sha384.INIT_HASH_BLOCK_ \x3d [\n  // Section 5.3.4 of\n  // csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\n  0xcbbb9d5d, 0xc1059ed8,  // H0\n  0x629a292a, 0x367cd507,  // H1\n  0x9159015a, 0x3070dd17,  // H2\n  0x152fecd8, 0xf70e5939,  // H3\n  0x67332667, 0xffc00b31,  // H4\n  0x8eb44a87, 0x68581511,  // H5\n  0xdb0c2e0d, 0x64f98fa7,  // H6\n  0x47b5481d, 0xbefa4fa4   // H7\n];\n\n//# sourceURL\x3dhttps://qs/javascript/closure/crypt/sha384.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/amp/service/client_id_local.js";
goog.loadModule("goog.module(\x27amp.service.ClientIdLocal\x27);\ngoog.module.declareLegacyNamespace();\n\nconst AmpUrlUtil \x3d goog.require(\x27amp.service.AmpUrlUtil\x27);\nconst Cache \x3d goog.require(\x27storagecache.Cache\x27);\nconst PersistentStorageType \x3d goog.require(\x27storagecache.PersistentStorageType\x27);\nconst Sha384 \x3d goog.require(\x27goog.crypt.Sha384\x27);\nconst base64 \x3d goog.require(\x27goog.crypt.base64\x27);\n\n/**\n * A base cid string value and the time it was last read / stored.\n * @typedef {{time: number, cid: string}}\n */\nlet BaseCidInfo;\n\n/**\n * @type {number}\n */\nconst ONE_DAY_MILLIS \x3d 24 * 3600 * 1000;\n\n\n/**\n * We ignore base cids that are older than (roughly) one year.\n * @type {number}\n */\nconst BASE_CID_MAX_AGE_MILLIS \x3d 365 * ONE_DAY_MILLIS;\n\n/**\n * The cache namespace.\n * @type {string}\n */\nconst CACHE_NAMESPACE \x3d \x27amp\x27;\n\n/**\n * The cache key containing client ID data.\n * @type {string}\n */\nconst CACHE_KEY \x3d \x27cid\x27;\n\n\n/**\n * Field names that may appear in a BaseCidInfo.\n * @enum {string}\n * @private\n */\nconst BASE_CID_INFO_KEYS \x3d {\n  CID: \x27cid\x27,\n  TIME: \x27time\x27\n};\n\n/**\n * A single cache object to be shared by all ClientIdLocal instances.\n * @private {?Cache}\n */\nlet cache \x3d null;\n\n/**\n * Returns the shared cache instance.\n * @return {!Cache}\n */\nfunction getCache() {\n  if (!cache) {\n    cache \x3d new Cache(PersistentStorageType.LOCAL, CACHE_NAMESPACE);\n  }\n  return cache;\n}\n\n/**\n * Provides persistent, locally-generated  client identifiers within an AMP\n * document. These IDs aid in analytics and similar. Rather than utilizing the\n * Harmony service to obtain client IDs (the preferred method), this class\n * generates and stores identifiers locally.\n *\n * For details, see https://goo.gl/Mwaacs\n */\nclass ClientIdLocal {\n  /**\n   * @param {!Window} win\n   * @param {string\x3d} viewerScope An optional viewer scope, used to generate\n   *     client IDs unique to a particular viewer context (i.e., AoG).\n   */\n  constructor(win, viewerScope \x3d undefined) {\n    /** @private {!Window} */\n    this.win_ \x3d win;\n\n    /** @private {?string} */\n    this.viewerScope_ \x3d viewerScope || null;\n\n    /** @private {!Sha384} */\n    this.sha384_ \x3d new Sha384();\n\n    /**\n     * Cached base cid once read from storage to avoid repeated reads.\n     * @private {?string}\n     */\n    this.baseCid_ \x3d null;\n  }\n\n  /**\n   * Returns the scoped cid for a given origin and scope.\n   * @param {string} origin The origin that owns the AMP document.\n   * @param {string} scope The scope being requested.\n   * @return {string}\n   */\n  getScoped(origin, scope) {\n    const baseCid \x3d this.get_();\n    let text \x3d baseCid + origin + scope;\n    if (this.viewerScope_) {\n      text +\x3d \x27;\x27 + this.viewerScope_;\n    }\n    this.sha384_.reset();\n    this.sha384_.update(text);\n    return base64.encodeByteArray(this.sha384_.digest(), true);\n  }\n\n  /**\n   * Returns the base cid for the current user.\n   * @return {string}\n   * @private\n   */\n  get_() {\n    if (this.baseCid_) {\n      return this.baseCid_;\n    }\n    const stored \x3d this.read_();\n    // See if we have a stored base cid and whether it is still valid\n    // in terms of expiration.\n    if (stored \x26\x26 !this.isExpired_(stored.time)) {\n      if (this.shouldUpdateStoredTime_(stored.time)) {\n        // Once per interval we mark the cid as used.\n        this.store_(stored.cid);\n      }\n      this.baseCid_ \x3d stored.cid;\n      return stored.cid;\n    }\n    // We need to make a new one.\n    const seed \x3d this.getEntropy_();\n    this.sha384_.reset();\n    this.sha384_.update(seed);\n    const hash \x3d this.sha384_.digest();\n    const newVal \x3d base64.encodeByteArray(hash, true);\n    this.store_(newVal);\n    this.baseCid_ \x3d newVal;\n    return newVal;\n  }\n\n  /**\n   * Stores a new cidString in localStorage. Adds the current time to the\n   * stored value.\n   * @param {string} cidString Actual cid string to store.\n   * @private\n   */\n  store_(cidString) {\n    const item \x3d {};\n    item[BASE_CID_INFO_KEYS.TIME] \x3d goog.now();\n    item[BASE_CID_INFO_KEYS.CID] \x3d cidString;\n    getCache().set(CACHE_KEY, item);\n  }\n\n  /**\n   * Retrieves a stored cid item from localStorage. Returns undefined if\n   * none was found.\n   * @return {!BaseCidInfo|undefined}\n   * @private\n   */\n  read_() {\n    const item \x3d getCache().get(CACHE_KEY);\n    if (item \x3d\x3d null) {\n      return undefined;\n    }\n    return {\n      time: item[BASE_CID_INFO_KEYS.TIME],\n      cid: item[BASE_CID_INFO_KEYS.CID],\n    };\n  }\n\n  /**\n   * Whether the retrieved cid object is expired and should be ignored.\n   * @param {number} createdTime\n   * @return {boolean}\n   * @private\n   */\n  isExpired_(createdTime) {\n    const now \x3d goog.now();\n    return createdTime + BASE_CID_MAX_AGE_MILLIS \x3c now;\n  }\n\n  /**\n   * Whether we should write a new timestamp to the stored cid value.\n   * We say yes if it is older than 1 day, so we only do this max once\n   * per day to avoid writing to localStorage all the time.\n   * @param {number} createdTime\n   * @return {boolean}\n   * @private\n   */\n  shouldUpdateStoredTime_(createdTime) {\n    const now \x3d goog.now();\n    return createdTime + ONE_DAY_MILLIS \x3c now;\n  }\n\n  /**\n   * Returns an array with a total of 128 of random values based on the\n   * `win.crypto.getRandomValues` API. If that is not available concatenates\n   * a string of other values that might be hard to guess including\n   * `Math.random` and the current time.\n   * @return {!Array\x3cnumber\x3e|string} Entropy.\n   * @private\n   */\n  getEntropy_() {\n    // Widely available in browsers we support:\n    // http://caniuse.com/#search\x3dgetRandomValues\n    if (this.win_.crypto \x26\x26 this.win_.crypto.getRandomValues) {\n      const uint8array \x3d new Uint8Array(16);  // 128 bit\n      this.win_.crypto.getRandomValues(uint8array);\n      // While closure\x27s Hash interface would except a Uint8Array\n      // sha384 does not in practice, so we copy the values into\n      // a plain old array.\n      const array \x3d new Array(16);\n      for (let i \x3d 0; i \x3c uint8array.length; i++) {\n        array[i] \x3d uint8array[i];\n      }\n      return array;\n    }\n    // Support for legacy browsers.\n    return String(\n        AmpUrlUtil.getLocationHref() + goog.now() + this.win_.Math.random() +\n        this.win_.screen.width + this.win_.screen.height);\n  }\n}\n\n// TODO(bdiamond, b/72396912): stop exporting the cache key once migration is\n// complete.\nClientIdLocal.CACHE_KEY \x3d CACHE_KEY;\nClientIdLocal.testOnly \x3d {getCache};\nexports \x3d ClientIdLocal;\n\n//# sourceURL\x3dhttps://qs/javascript/amp/service/client_id_local.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/amp/service/client_id_service.js";
goog.loadModule("goog.module(\x27amp.service.ClientIdService\x27);\ngoog.module.declareLegacyNamespace();\n\nconst AmpUrlUtil \x3d goog.require(\x27amp.service.AmpUrlUtil\x27);\nconst GoogPromise \x3d goog.require(\x27goog.Promise\x27);\nconst GoogUri \x3d goog.require(\x27goog.Uri\x27);\nconst Sha384 \x3d goog.require(\x27goog.crypt.Sha384\x27);\nconst XhrIo \x3d goog.require(\x27goog.net.XhrIo\x27);\nconst base64 \x3d goog.require(\x27goog.crypt.base64\x27);\n\n/**\n * @typedef {{clientId: (string|undefined), optOut: (boolean|undefined)}}\n */\nlet ClientIdResponse;\n\n/**\n * A small wrapper for all Client ID service configuration.\n *\n * Fields:\n *   servicePath: A service path to override the default.\n *   serviceKey: A service key to override the default.\n *   serviceDomainWithoutTld: A service domain, without TLD, to override the\n *       default.\n *   matchTld: Whether the service\x27s TLD should be made to match the current\n *       domain.\n *\n * @typedef {{\n *   servicePath: (string|undefined),\n *   serviceKey: (string|undefined),\n *   serviceDomainWithoutTld: (string|undefined),\n *   matchTld: (boolean|undefined)\n * }}\n */\nlet ClientIdServiceConfig;\n\n/**\n * The Client ID service domain, without TLD.\n * @const @private {string}\n */\nconst DEFAULT_SERVICE_DOMAIN_WITHOUT_TLD_ \x3d \x27ampcid.google\x27;\n\n/**\n * The Client ID service path.\n * @const @private {string}\n */\nconst DEFAULT_SERVICE_PATH_ \x3d \x27/v1/viewer\x27;\n\n/**\n * The Client ID service key.\n * @const @private {string}\n */\nconst DEFAULT_SERVICE_KEY_ \x3d \x27AIzaSyDKtqGxnoeIqVM33Uf7hRSa3GJxuzR7mLc\x27;\n\n/**\n * Class to federate access to client identifiers via the Client ID backing\n * service. These identifiers are intended to be used for analytics and similar\n * use cases within an AMP document.\n *\n * For details, see go/new-amp-client-id\n */\nclass ClientIdService {\n  /**\n   * @param {!ClientIdServiceConfig\x3d} config An object containing optional\n   *     service configuration details.\n   * @param {string\x3d} viewerScope An optional viewer scope which is used to\n   *     restrict the client IDs to a particular viewer (i.e., AoG).\n   */\n  constructor(\n      {\n        serviceDomainWithoutTld \x3d DEFAULT_SERVICE_DOMAIN_WITHOUT_TLD_,\n        servicePath \x3d DEFAULT_SERVICE_PATH_,\n        serviceKey \x3d DEFAULT_SERVICE_KEY_,\n        matchTld \x3d false\n      } \x3d {},\n      viewerScope \x3d undefined) {\n    /** @private {string} */\n    this.serviceDomainWithoutTld_ \x3d serviceDomainWithoutTld;\n\n    /** @private {string} */\n    this.servicePath_ \x3d servicePath;\n\n    /** @private {string} */\n    this.serviceKey_ \x3d serviceKey;\n\n    /** @private {boolean} */\n    this.matchTld_ \x3d matchTld;\n\n    /** @private {?string} */\n    this.viewerScope_ \x3d viewerScope || null;\n\n    /**\n     * A simple cache to avoid repeatedly querying the backing service, using\n     * the origin as a key.\n     * @private {!Map\x3cstring,!GoogPromise\x3c*\x3e\x3e}\n     */\n    this.cache_ \x3d new Map();\n\n    /** @private {!Sha384} */\n    this.sha384_ \x3d new Sha384();\n  }\n\n  /**\n   * Constructs a valid service URI.\n   * @param {string} method The target service method.\n   * @return {!GoogUri} The resulting URL.\n   * @private\n   */\n  getServiceUri_(method) {\n    let tld \x3d \x27com\x27;\n    if (this.matchTld_) {\n      const domain \x3d AmpUrlUtil.getCurrentUrl().getDomain();\n      // Find the portion of the domain that comes after google; this will\n      // correspond to the TLD without a delimiting period, since the current\n      // domain will be a Google domain.\n      tld \x3d domain.split(\x27.google.\x27).pop() || tld;\n    }\n    return new GoogUri(\n        \x27https://\x27 + this.serviceDomainWithoutTld_ + \x27.\x27 + tld +\n        this.servicePath_ + \x27:\x27 + method);\n  }\n\n  /**\n   * Hashes and encodes a string in a way that is consistent with the Client Id\n   * API.\n   * @param {string} text The text to hash and encode.\n   * @return {string} The resulting string.\n   * @private\n   */\n  getEncodedHash_(text) {\n    this.sha384_.reset();\n    this.sha384_.update(text);\n    return base64.encodeByteArray(this.sha384_.digest(), true);\n  }\n\n  /**\n   * Produces a scoped Client ID from a publisher Client ID and a scope.\n   * @param {string} pubCid The publisher Client ID.\n   * @param {string} scope The scope.\n   * @return {string} The resulting Client ID.\n   * @private\n   */\n  getScopedId_(pubCid, scope) {\n    let text \x3d pubCid + \x27;\x27 + scope;\n    if (this.viewerScope_) {\n      text +\x3d \x27;\x27 + this.viewerScope_;\n    }\n    return \x27amp-\x27 + this.getEncodedHash_(text);\n  }\n\n  /**\n   * Performs a crendentialed XHR request to the backing service.\n   * @param {string} method The method within the service.\n   * @param {!Object\x3cstring, string\x3e} payload The data to be posted.\n   * @return {!GoogPromise\x3c*\x3e} A promise that resolves to the service\x27s response\n   *     after JSON parsing.\n   * @private\n   */\n  doRequest_(method, payload) {\n    // TODO(b/63001632): switch to using gapi.\n    const serviceUri \x3d this.getServiceUri_(method);\n    const headers \x3d new Map();\n    serviceUri.setParameterValue(\x27key\x27, this.serviceKey_);\n    // Use text/plain to avoid an extra CORS preflight request. See:\n    // http://go/mdn/HTTP/Access_control_CORS#Preflighted_requests\n    headers.set(\x27Content-Type\x27, \x27text/plain; charset\x3dUTF-8\x27);\n    return new GoogPromise((resolve, reject) \x3d\x3e {\n      XhrIo.send(\n          serviceUri,\n          e \x3d\x3e {\n            const result \x3d /** @type {!XhrIo} */ (e.target);\n            if (!result.isSuccess()) {\n              reject(\n                  \x27network error (\x27 + result.getStatus() + \x27: \x27 +\n                  result.getStatusText() + \x27)\x27);\n              return;\n            }\n            try {\n              resolve(result.getResponseJson());\n            } catch (e) {\n              reject(\x27invalid json\x27);\n            }\n          },\n          \x27POST\x27, JSON.stringify(payload),\n          /* opt_headers */ headers,\n          /* opt_timeoutInterval */ 0, /* opt_withCredentials */ true);\n    });\n  }\n\n  /**\n   * Obtains a Client ID from the backing service for a given origin and\n   * scope.\n   * @param {string} origin The origin that owns the AMP document.\n   * @param {string|undefined} canonicalOrigin The canonical origin for the\n   *     document.\n   * @param {string} scope The scope being queried.\n   * @return {!GoogPromise\x3c!ClientIdResponse\x3e} A promise that resolves to the\n   *     service\x27s response. Will contain the Client ID or a flag indicating\n   *     that the user has opted out.\n   */\n  get(origin, canonicalOrigin, scope) {\n    const payload \x3d {\x27publisherOrigin\x27: origin};\n    if (canonicalOrigin) {\n      payload[\x27canonicalOrigin\x27] \x3d canonicalOrigin;\n    }\n    // We cache by origin since the network request is the bottleneck, and we\n    // can compute the scoped ID locally.\n    if (!this.cache_.has(origin)) {\n      this.cache_.set(origin, this.doRequest_(\x27getClientId\x27, payload));\n    }\n    return this.cache_.get(origin)\n        .then(response \x3d\x3e {\n          if (response.clientId) {\n            return {clientId: this.getScopedId_(response.clientId, scope)};\n          }\n          if (response.optOut) {\n            return {optOut: response.optOut};\n          }\n          return GoogPromise.reject(\x27invalid response\x27);\n        })\n        .thenCatch(error \x3d\x3e {\n          this.cache_.delete(origin);\n          return GoogPromise.reject(error);\n        });\n  }\n\n  /**\n   * Opts the user out of Client ID tracking using the backing service.\n   * @param {string} origin The origin that owns the AMP document.\n   * @param {string|undefined} canonicalOrigin The canonical origin for the\n   *     document.\n   * @return {!GoogPromise\x3c*\x3e} A promise that resolves once the request\n   *     has been processed by the service.\n   */\n  setOptOut(origin, canonicalOrigin) {\n    const payload \x3d {\x27publisherOrigin\x27: origin};\n    if (canonicalOrigin) {\n      payload[\x27canonicalOrigin\x27] \x3d canonicalOrigin;\n    }\n    return this.doRequest_(\x27setOptOut\x27, payload);\n  }\n}\n\nexports \x3d ClientIdService;\n/** @typedef {ClientIdServiceConfig} */\nexports.ClientIdServiceConfig;\n\n//# sourceURL\x3dhttps://qs/javascript/amp/service/client_id_service.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/amp/service/client_id.js";
goog.loadModule("/**\n * @fileoverview This module provides a general interface for obtaining Client\n * IDs, using both the Harmony service as well as local generation.\n */\n\ngoog.module(\x27amp.service.ClientId\x27);\ngoog.module.declareLegacyNamespace();\n\nconst ClientIdLocal \x3d goog.require(\x27amp.service.ClientIdLocal\x27);\nconst ClientIdService \x3d goog.require(\x27amp.service.ClientIdService\x27);\nconst GoogPromise \x3d goog.require(\x27goog.Promise\x27);\n\nconst deps \x3d {\n  ClientIdLocal,\n  ClientIdService\n};\n\n/**\n * @typedef {{clientId: (string|undefined), optOut: (boolean|undefined)}}\n */\nlet ClientIdResponse;\n\n/**\n * @typedef {function(string, !Object)}\n */\nlet ClientIdErrorHandler;\n\n/**\n * Class for obtaining and interacting with Client IDs. Uses the Harmony Client\n * ID service if possible, falling back to local generation if not.\n */\nclass ClientId {\n  /**\n   * @param {!Window} win\n   * @param {boolean\x3d} serviceEnabled Whether to use the Harmony service.\n   * @param {!ClientIdService.ClientIdServiceConfig\x3d} serviceConfig An optional\n   *     client ID service configuration object.\n   * @param {string\x3d} viewerScope An optional viewer scope, used to generate\n   *     client IDs unique to a particular viewer context (i.e., AoG).\n   * @param {!ClientIdErrorHandler\x3d} errorFn An optional error handler.\n   */\n  constructor(\n      win, serviceEnabled \x3d true, serviceConfig \x3d undefined,\n      viewerScope \x3d undefined, errorFn \x3d undefined) {\n    /** @private {!ClientIdLocal} */\n    this.clientIdLocal_ \x3d new deps.ClientIdLocal(win, viewerScope);\n\n    /** @private {?ClientIdService} */\n    this.clientIdService_ \x3d null;\n    if (serviceEnabled) {\n      this.clientIdService_ \x3d\n          new deps.ClientIdService(serviceConfig, viewerScope);\n    }\n\n    /** @private {?ClientIdErrorHandler} */\n    this.errorFn_ \x3d errorFn || null;\n  }\n\n  /**\n   * Obtains a Client ID for a given origin and scope using Harmony if possible.\n   * @param {string} origin The origin that owns the AMP document.\n   * @param {string|undefined} canonicalOrigin The canonical origin for the\n   *     document.\n   * @param {string} scope The scope being queried.\n   * @param {boolean\x3d} useApi Whether to enable Harmony.\n   * @return {!GoogPromise\x3c!ClientIdResponse\x3e} A promise that resolves to the\n   *     client ID response structure. This will always resolve; errors are\n   *     indicated via the `errorFn` callback.\n   */\n  get(origin, canonicalOrigin, scope, useApi \x3d true) {\n    const localCid \x3d () \x3d\x3e\n        ({clientId: this.clientIdLocal_.getScoped(origin, scope)});\n    if (useApi \x26\x26 this.clientIdService_) {\n      return this.clientIdService_.get(origin, canonicalOrigin, scope)\n          .thenCatch(msg \x3d\x3e {\n            if (this.errorFn_) {\n              this.errorFn_(\x27ampCidApi\x27, {\n                \x27message\x27: msg,\n                \x27origin\x27: origin,\n                \x27canonicalOrigin\x27: canonicalOrigin\n              });\n            }\n            return localCid();\n          });\n    }\n    return GoogPromise.resolve(localCid());\n  }\n\n  /**\n   * Opts the user out of Client ID tracking.\n   * @param {string} origin The origin that owns the AMP document.\n   * @param {string|undefined} canonicalOrigin The canonical origin for the\n   *     document.\n   * @param {boolean\x3d} useApi Whether to enable Harmony.\n   * @return {!GoogPromise\x3c*\x3e} A promise that resolves once the request\n   *     has been processed.\n   */\n  setOptOut(origin, canonicalOrigin, useApi \x3d true) {\n    if (useApi \x26\x26 this.clientIdService_) {\n      return this.clientIdService_.setOptOut(origin, canonicalOrigin);\n    }\n    // TODO(bdiamond): Implementing opt-out for local generation. Currently,\n    // this is a no-op.\n    return GoogPromise.resolve();\n  }\n\n  /**\n   * Returns dependencies that may be mocked for testing.\n   * @return {!Object}\n   * @protected\n   */\n  static getDepsForTesting() {\n    return deps;\n  }\n}\n\nexports \x3d ClientId;\n\n//# sourceURL\x3dhttps://qs/javascript/amp/service/client_id.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/amp/service/cookies.js";
eval("/**\n * @fileoverview A generic cookie handling utilities.\n */\n\ngoog.provide(\x27amp.service.cookies\x27);\n\ngoog.require(\x27goog.net.cookies\x27);\ngoog.require(\x27goog.string\x27);\n\n\n/**\n * The name of the test cookie to set. Approved in http://b/11748450.\n * @private {string}\n * @const\n */\namp.service.cookies.TEMP_COOKIE_NAME_ \x3d \x27TESTCOOKIESENABLED\x27;\n\n\n/**\n * The value of the test cookie to set.\n * @private {string}\n * @const\n */\namp.service.cookies.TEMP_COOKIE_VALUE_ \x3d \x271\x27;\n\n\n/**\n * How long the test cookie should live. 60 seconds is probably overkill.\n * @private {number}\n * @const\n */\namp.service.cookies.TEMP_COOKIE_LIFETIME_SECONDS_ \x3d 60;\n\n\n/**\n * In IE, turning off cookies won\x27t actually make navigator.cookieEnabled\n * return false (thanks, Redmond). So we need to get creative and investigate a\n * little further to determine whether cookies are enabled.\n * @return {boolean} whether cookies are enabled.\n */\namp.service.cookies.areCookiesEnabled \x3d function() {\n  try {\n    if (!goog.net.cookies.isEnabled()) {\n      return false;\n    }\n\n    // Check the PREF cookie. Google users should *always* have a PREF cookie.\n    var pref \x3d /** @type {string} */ (goog.net.cookies.get(\x27PREF\x27, \x27\x27));\n    if (goog.string.isEmptyOrWhitespace(pref)) {\n      // Ok, if there\x27s no PREF cookie, things are suspicious. Set a temp cookie\n      // value and try to read it back out to see if cookies are enabled.\n      goog.net.cookies.set(\n          amp.service.cookies.TEMP_COOKIE_NAME_,\n          amp.service.cookies.TEMP_COOKIE_VALUE_,\n          amp.service.cookies.TEMP_COOKIE_LIFETIME_SECONDS_);\n      if (goog.net.cookies.get(amp.service.cookies.TEMP_COOKIE_NAME_) !\x3d\n          amp.service.cookies.TEMP_COOKIE_VALUE_) {\n        return false;\n      }\n      // Clean up after ourselves.\n      goog.net.cookies.remove(amp.service.cookies.TEMP_COOKIE_NAME_);\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n//# sourceURL\x3dhttps://qs/javascript/amp/service/cookies.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/closure/structs/avltree.js";
eval("// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \x22License\x22);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \x22AS-IS\x22 BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Datastructure: AvlTree.\n *\n * @author tgordon@google.com (Taylor Gordon)\n *\n * This file provides the implementation of an AVL-Tree datastructure. The tree\n * maintains a set of unique values in a sorted order. The values can be\n * accessed efficiently in their sorted order since the tree enforces an O(logn)\n * maximum height. See http://en.wikipedia.org/wiki/Avl_tree for more detail.\n *\n * The big-O notation for all operations are below:\n * \x3cpre\x3e\n *   Method                 big-O\n * ----------------------------------------------------------------------------\n * - add                    O(logn)\n * - remove                 O(logn)\n * - clear                  O(1)\n * - contains               O(logn)\n * - indexOf                O(logn)\n * - getCount               O(1)\n * - getMinimum             O(1), or O(logn) when optional root is specified\n * - getMaximum             O(1), or O(logn) when optional root is specified\n * - getHeight              O(1)\n * - getValues              O(n)\n * - inOrderTraverse        O(logn + k), where k is number of traversed nodes\n * - reverseOrderTraverse   O(logn + k), where k is number of traversed nodes\n * \x3c/pre\x3e\n */\n\n\ngoog.provide(\x27goog.structs.AvlTree\x27);\ngoog.provide(\x27goog.structs.AvlTree.Node\x27);\n\ngoog.require(\x27goog.structs.Collection\x27);\n\n\n\n/**\n * Constructs an AVL-Tree, which uses the specified comparator to order its\n * values. The values can be accessed efficiently in their sorted order since\n * the tree enforces a O(logn) maximum height.\n *\n * @param {Function\x3d} opt_comparator Function used to order the tree\x27s nodes.\n * @constructor\n * @implements {goog.structs.Collection\x3cT\x3e}\n * @final\n * @template T\n */\ngoog.structs.AvlTree \x3d function(opt_comparator) {\n  this.comparator_ \x3d opt_comparator || goog.structs.AvlTree.DEFAULT_COMPARATOR_;\n};\n\n\n/**\n * String comparison function used to compare values in the tree. This function\n * is used by default if no comparator is specified in the tree\x27s constructor.\n *\n * @param {T} a The first value.\n * @param {T} b The second value.\n * @return {number} -1 if a \x3c b, 1 if a \x3e b, 0 if a \x3d b.\n * @template T\n * @private\n */\ngoog.structs.AvlTree.DEFAULT_COMPARATOR_ \x3d function(a, b) {\n  if (String(a) \x3c String(b)) {\n    return -1;\n  } else if (String(a) \x3e String(b)) {\n    return 1;\n  }\n  return 0;\n};\n\n\n/**\n * Pointer to the root node of the tree.\n *\n * @private {goog.structs.AvlTree.Node\x3cT\x3e}\n */\ngoog.structs.AvlTree.prototype.root_ \x3d null;\n\n\n/**\n * Comparison function used to compare values in the tree. This function should\n * take two values, a and b, and return x where:\n * \x3cpre\x3e\n *  x \x3c 0 if a \x3c b,\n *  x \x3e 0 if a \x3e b,\n *  x \x3d 0 otherwise\n * \x3c/pre\x3e\n *\n * @type {Function}\n * @private\n */\ngoog.structs.AvlTree.prototype.comparator_ \x3d null;\n\n\n/**\n * Pointer to the node with the smallest value in the tree.\n *\n * @type {goog.structs.AvlTree.Node\x3cT\x3e}\n * @private\n */\ngoog.structs.AvlTree.prototype.minNode_ \x3d null;\n\n\n/**\n * Pointer to the node with the largest value in the tree.\n *\n * @type {goog.structs.AvlTree.Node\x3cT\x3e}\n * @private\n */\ngoog.structs.AvlTree.prototype.maxNode_ \x3d null;\n\n\n/**\n * Inserts a node into the tree with the specified value if the tree does\n * not already contain a node with the specified value. If the value is\n * inserted, the tree is balanced to enforce the AVL-Tree height property.\n *\n * @param {T} value Value to insert into the tree.\n * @return {boolean} Whether value was inserted into the tree.\n * @override\n */\ngoog.structs.AvlTree.prototype.add \x3d function(value) {\n  // If the tree is empty, create a root node with the specified value\n  if (this.root_ \x3d\x3d null) {\n    this.root_ \x3d new goog.structs.AvlTree.Node(value);\n    this.minNode_ \x3d this.root_;\n    this.maxNode_ \x3d this.root_;\n    return true;\n  }\n\n  // This will be set to the new node if a new node is added.\n  /** @type {?goog.structs.AvlTree.Node} */\n  var newNode \x3d null;\n\n  // Depth traverse the tree and insert the value if we reach a null node\n  this.traverse_(function(node) {\n    var retNode \x3d null;\n    var comparison \x3d this.comparator_(node.value, value);\n    if (comparison \x3e 0) {\n      retNode \x3d node.left;\n      if (node.left \x3d\x3d null) {\n        newNode \x3d new goog.structs.AvlTree.Node(value, node);\n        node.left \x3d newNode;\n        if (node \x3d\x3d this.minNode_) {\n          this.minNode_ \x3d newNode;\n        }\n      }\n    } else if (comparison \x3c 0) {\n      retNode \x3d node.right;\n      if (node.right \x3d\x3d null) {\n        newNode \x3d new goog.structs.AvlTree.Node(value, node);\n        node.right \x3d newNode;\n        if (node \x3d\x3d this.maxNode_) {\n          this.maxNode_ \x3d newNode;\n        }\n      }\n    }\n    return retNode;  // If null, we\x27ll stop traversing the tree\n  });\n\n  // If a node was added, increment counts and balance tree.\n  if (newNode) {\n    var nonNullNewNode \x3d /** @type {!goog.structs.AvlTree.Node} */ (newNode);\n    this.traverse_(function(node) {\n      node.count++;\n      return node.parent;\n    }, nonNullNewNode.parent);\n    this.balance_(nonNullNewNode.parent);  // Maintain the AVL-tree balance\n  }\n\n  // Return true if a node was added, false otherwise\n  return !!newNode;\n};\n\n\n/**\n * Removes a node from the tree with the specified value if the tree contains a\n * node with this value. If a node is removed the tree is balanced to enforce\n * the AVL-Tree height property. The value of the removed node is returned.\n *\n * @param {T} value Value to find and remove from the tree.\n * @return {T} The value of the removed node or null if the value was not in\n *     the tree.\n * @override\n */\ngoog.structs.AvlTree.prototype.remove \x3d function(value) {\n  // Assume the value is not removed and set the value when it is removed\n  var retValue \x3d null;\n\n  // Depth traverse the tree and remove the value if we find it\n  this.traverse_(function(node) {\n    var retNode \x3d null;\n    var comparison \x3d this.comparator_(node.value, value);\n    if (comparison \x3e 0) {\n      retNode \x3d node.left;\n    } else if (comparison \x3c 0) {\n      retNode \x3d node.right;\n    } else {\n      retValue \x3d node.value;\n      this.removeNode_(node);\n    }\n    return retNode;  // If null, we\x27ll stop traversing the tree\n  });\n\n  // Return the value that was removed, null if the value was not in the tree\n  return retValue;\n};\n\n\n/**\n * Removes all nodes from the tree.\n */\ngoog.structs.AvlTree.prototype.clear \x3d function() {\n  this.root_ \x3d null;\n  this.minNode_ \x3d null;\n  this.maxNode_ \x3d null;\n};\n\n\n/**\n * Returns true if the tree contains a node with the specified value, false\n * otherwise.\n *\n * @param {T} value Value to find in the tree.\n * @return {boolean} Whether the tree contains a node with the specified value.\n * @override\n */\ngoog.structs.AvlTree.prototype.contains \x3d function(value) {\n  // Assume the value is not in the tree and set this value if it is found\n  var isContained \x3d false;\n\n  // Depth traverse the tree and set isContained if we find the node\n  this.traverse_(function(node) {\n    var retNode \x3d null;\n    var comparison \x3d this.comparator_(node.value, value);\n    if (comparison \x3e 0) {\n      retNode \x3d node.left;\n    } else if (comparison \x3c 0) {\n      retNode \x3d node.right;\n    } else {\n      isContained \x3d true;\n    }\n    return retNode;  // If null, we\x27ll stop traversing the tree\n  });\n\n  // Return true if the value is contained in the tree, false otherwise\n  return isContained;\n};\n\n\n/**\n * Returns the index (in an in-order traversal) of the node in the tree with\n * the specified value. For example, the minimum value in the tree will\n * return an index of 0 and the maximum will return an index of n - 1 (where\n * n is the number of nodes in the tree).  If the value is not found then -1\n * is returned.\n *\n * @param {T} value Value in the tree whose in-order index is returned.\n * @return {number} The in-order index of the given value in the\n *     tree or -1 if the value is not found.\n */\ngoog.structs.AvlTree.prototype.indexOf \x3d function(value) {\n  // Assume the value is not in the tree and set this value if it is found\n  var retIndex \x3d -1;\n  var currIndex \x3d 0;\n\n  // Depth traverse the tree and set retIndex if we find the node\n  this.traverse_(function(node) {\n    var comparison \x3d this.comparator_(node.value, value);\n    if (comparison \x3e 0) {\n      // The value is less than this node, so recurse into the left subtree.\n      return node.left;\n    }\n\n    if (node.left) {\n      // The value is greater than all of the nodes in the left subtree.\n      currIndex +\x3d node.left.count;\n    }\n\n    if (comparison \x3c 0) {\n      // The value is also greater than this node.\n      currIndex++;\n      // Recurse into the right subtree.\n      return node.right;\n    }\n    // We found the node, so stop traversing the tree.\n    retIndex \x3d currIndex;\n    return null;\n  });\n\n  // Return index if the value is contained in the tree, -1 otherwise\n  return retIndex;\n};\n\n\n/**\n * Returns the number of values stored in the tree.\n *\n * @return {number} The number of values stored in the tree.\n * @override\n */\ngoog.structs.AvlTree.prototype.getCount \x3d function() {\n  return this.root_ ? this.root_.count : 0;\n};\n\n\n/**\n * Returns a k-th smallest value, based on the comparator, where 0 \x3c\x3d k \x3c\n * this.getCount().\n * @param {number} k The number k.\n * @return {T} The k-th smallest value.\n */\ngoog.structs.AvlTree.prototype.getKthValue \x3d function(k) {\n  if (k \x3c 0 || k \x3e\x3d this.getCount()) {\n    return null;\n  }\n  return this.getKthNode_(k).value;\n};\n\n\n/**\n * Returns the value u, such that u is contained in the tree and u \x3c v, for all\n * values v in the tree where v !\x3d u.\n *\n * @return {T} The minimum value contained in the tree.\n */\ngoog.structs.AvlTree.prototype.getMinimum \x3d function() {\n  return this.getMinNode_().value;\n};\n\n\n/**\n * Returns the value u, such that u is contained in the tree and u \x3e v, for all\n * values v in the tree where v !\x3d u.\n *\n * @return {T} The maximum value contained in the tree.\n */\ngoog.structs.AvlTree.prototype.getMaximum \x3d function() {\n  return this.getMaxNode_().value;\n};\n\n\n/**\n * Returns the height of the tree (the maximum depth). This height should\n * always be \x3c\x3d 1.4405*(Math.log(n+2)/Math.log(2))-1.3277, where n is the\n * number of nodes in the tree.\n *\n * @return {number} The height of the tree.\n */\ngoog.structs.AvlTree.prototype.getHeight \x3d function() {\n  return this.root_ ? this.root_.height : 0;\n};\n\n\n/**\n * Inserts the values stored in the tree into a new Array and returns the Array.\n *\n * @return {!Array\x3cT\x3e} An array containing all of the trees values in sorted\n *     order.\n */\ngoog.structs.AvlTree.prototype.getValues \x3d function() {\n  var ret \x3d [];\n  this.inOrderTraverse(function(value) { ret.push(value); });\n  return ret;\n};\n\n\n/**\n * Performs an in-order traversal of the tree and calls `func` with each\n * traversed node, optionally starting from the smallest node with a value \x3e\x3d to\n * the specified start value. The traversal ends after traversing the tree\x27s\n * maximum node or when `func` returns a value that evaluates to true.\n *\n * @param {Function} func Function to call on each traversed node.\n * @param {T\x3d} opt_startValue If specified, traversal will begin on the node\n *     with the smallest value \x3e\x3d opt_startValue.\n */\ngoog.structs.AvlTree.prototype.inOrderTraverse \x3d function(\n    func, opt_startValue) {\n  // If our tree is empty, return immediately\n  if (!this.root_) {\n    return;\n  }\n\n  // Depth traverse the tree to find node to begin in-order traversal from\n  /** @type {undefined|!goog.structs.AvlTree.Node} */\n  var startNode;\n  if (opt_startValue !\x3d\x3d undefined) {\n    this.traverse_(function(node) {\n      var retNode \x3d null;\n      var comparison \x3d this.comparator_(node.value, opt_startValue);\n      if (comparison \x3e 0) {\n        retNode \x3d node.left;\n        startNode \x3d node;\n      } else if (comparison \x3c 0) {\n        retNode \x3d node.right;\n      } else {\n        startNode \x3d node;\n      }\n      return retNode;  // If null, we\x27ll stop traversing the tree\n    });\n    if (!startNode) {\n      return;\n    }\n  } else {\n    startNode \x3d /** @type {!goog.structs.AvlTree.Node} */ (this.getMinNode_());\n  }\n\n  // Traverse the tree and call func on each traversed node\x27s value\n  var node \x3d /** @type {!goog.structs.AvlTree.Node} */ (startNode);\n  var prev \x3d node.left ? node.left : node;\n  while (node !\x3d null) {\n    if (node.left !\x3d null \x26\x26 node.left !\x3d prev \x26\x26 node.right !\x3d prev) {\n      node \x3d node.left;\n    } else {\n      if (node.right !\x3d prev) {\n        if (func(node.value)) {\n          return;\n        }\n      }\n      var temp \x3d node;\n      node \x3d\n          node.right !\x3d null \x26\x26 node.right !\x3d prev ? node.right : node.parent;\n      prev \x3d temp;\n    }\n  }\n};\n\n\n/**\n * Performs a reverse-order traversal of the tree and calls `func` with\n * each traversed node, optionally starting from the largest node with a value\n * \x3c\x3d to the specified start value. The traversal ends after traversing the\n * tree\x27s minimum node or when func returns a value that evaluates to true.\n *\n * @param {function(T):?} func Function to call on each traversed node.\n * @param {T\x3d} opt_startValue If specified, traversal will begin on the node\n *     with the largest value \x3c\x3d opt_startValue.\n */\ngoog.structs.AvlTree.prototype.reverseOrderTraverse \x3d function(\n    func, opt_startValue) {\n  // If our tree is empty, return immediately\n  if (!this.root_) {\n    return;\n  }\n\n  // Depth traverse the tree to find node to begin reverse-order traversal from\n  var startNode;\n  if (opt_startValue !\x3d\x3d undefined) {\n    this.traverse_(goog.bind(function(node) {\n      var retNode \x3d null;\n      var comparison \x3d this.comparator_(node.value, opt_startValue);\n      if (comparison \x3e 0) {\n        retNode \x3d node.left;\n      } else if (comparison \x3c 0) {\n        retNode \x3d node.right;\n        startNode \x3d node;\n      } else {\n        startNode \x3d node;\n      }\n      return retNode;  // If null, we\x27ll stop traversing the tree\n    }, this));\n    if (!startNode) {\n      return;\n    }\n  } else {\n    startNode \x3d this.getMaxNode_();\n  }\n\n  // Traverse the tree and call func on each traversed node\x27s value\n  var node \x3d startNode, prev \x3d startNode.right ? startNode.right : startNode;\n  while (node !\x3d null) {\n    if (node.right !\x3d null \x26\x26 node.right !\x3d prev \x26\x26 node.left !\x3d prev) {\n      node \x3d node.right;\n    } else {\n      if (node.left !\x3d prev) {\n        if (func(node.value)) {\n          return;\n        }\n      }\n      var temp \x3d node;\n      node \x3d node.left !\x3d null \x26\x26 node.left !\x3d prev ? node.left : node.parent;\n      prev \x3d temp;\n    }\n  }\n};\n\n\n/**\n * Performs a traversal defined by the supplied `traversalFunc`. The first\n * call to `traversalFunc` is passed the root or the optionally specified\n * startNode. After that, calls `traversalFunc` with the node returned\n * by the previous call to `traversalFunc` until `traversalFunc`\n * returns null or the optionally specified endNode. The first call to\n * traversalFunc is passed the root or the optionally specified startNode.\n *\n * @param {function(\n *     this:goog.structs.AvlTree\x3cT\x3e,\n *     !goog.structs.AvlTree.Node):?goog.structs.AvlTree.Node} traversalFunc\n * Function used to traverse the tree.\n * @param {goog.structs.AvlTree.Node\x3cT\x3e\x3d} opt_startNode The node at which the\n *     traversal begins.\n * @param {goog.structs.AvlTree.Node\x3cT\x3e\x3d} opt_endNode The node at which the\n *     traversal ends.\n * @private\n */\ngoog.structs.AvlTree.prototype.traverse_ \x3d function(\n    traversalFunc, opt_startNode, opt_endNode) {\n  var node \x3d opt_startNode ? opt_startNode : this.root_;\n  var endNode \x3d opt_endNode ? opt_endNode : null;\n  while (node \x26\x26 node !\x3d endNode) {\n    node \x3d traversalFunc.call(this, node);\n  }\n};\n\n\n/**\n * Ensures that the specified node and all its ancestors are balanced. If they\n * are not, performs left and right tree rotations to achieve a balanced\n * tree. This method assumes that at most 2 rotations are necessary to balance\n * the tree (which is true for AVL-trees that are balanced after each node is\n * added or removed).\n *\n * @param {goog.structs.AvlTree.Node\x3cT\x3e} node Node to begin balance from.\n * @private\n */\ngoog.structs.AvlTree.prototype.balance_ \x3d function(node) {\n\n  this.traverse_(function(node) {\n    // Calculate the left and right node\x27s heights\n    var lh \x3d node.left ? node.left.height : 0;\n    var rh \x3d node.right ? node.right.height : 0;\n\n    // Rotate tree rooted at this node if it is not AVL-tree balanced\n    if (lh - rh \x3e 1) {\n      if (node.left.right \x26\x26\n          (!node.left.left || node.left.left.height \x3c node.left.right.height)) {\n        this.leftRotate_(node.left);\n      }\n      this.rightRotate_(node);\n    } else if (rh - lh \x3e 1) {\n      if (node.right.left \x26\x26\n          (!node.right.right ||\n           node.right.right.height \x3c node.right.left.height)) {\n        this.rightRotate_(node.right);\n      }\n      this.leftRotate_(node);\n    }\n\n    // Recalculate the left and right node\x27s heights\n    lh \x3d node.left ? node.left.height : 0;\n    rh \x3d node.right ? node.right.height : 0;\n\n    // Set this node\x27s height\n    node.height \x3d Math.max(lh, rh) + 1;\n\n    // Traverse up tree and balance parent\n    return node.parent;\n  }, node);\n\n};\n\n\n/**\n * Performs a left tree rotation on the specified node.\n *\n * @param {goog.structs.AvlTree.Node\x3cT\x3e} node Pivot node to rotate from.\n * @private\n */\ngoog.structs.AvlTree.prototype.leftRotate_ \x3d function(node) {\n  // Re-assign parent-child references for the parent of the node being removed\n  if (node.isLeftChild()) {\n    node.parent.left \x3d node.right;\n    node.right.parent \x3d node.parent;\n  } else if (node.isRightChild()) {\n    node.parent.right \x3d node.right;\n    node.right.parent \x3d node.parent;\n  } else {\n    this.root_ \x3d node.right;\n    this.root_.parent \x3d null;\n  }\n\n  // Re-assign parent-child references for the child of the node being removed\n  var temp \x3d node.right;\n  node.right \x3d node.right.left;\n  if (node.right !\x3d null) node.right.parent \x3d node;\n  temp.left \x3d node;\n  node.parent \x3d temp;\n\n  // Update counts.\n  temp.count \x3d node.count;\n  node.count -\x3d (temp.right ? temp.right.count : 0) + 1;\n};\n\n\n/**\n * Performs a right tree rotation on the specified node.\n *\n * @param {goog.structs.AvlTree.Node\x3cT\x3e} node Pivot node to rotate from.\n * @private\n */\ngoog.structs.AvlTree.prototype.rightRotate_ \x3d function(node) {\n  // Re-assign parent-child references for the parent of the node being removed\n  if (node.isLeftChild()) {\n    node.parent.left \x3d node.left;\n    node.left.parent \x3d node.parent;\n  } else if (node.isRightChild()) {\n    node.parent.right \x3d node.left;\n    node.left.parent \x3d node.parent;\n  } else {\n    this.root_ \x3d node.left;\n    this.root_.parent \x3d null;\n  }\n\n  // Re-assign parent-child references for the child of the node being removed\n  var temp \x3d node.left;\n  node.left \x3d node.left.right;\n  if (node.left !\x3d null) node.left.parent \x3d node;\n  temp.right \x3d node;\n  node.parent \x3d temp;\n\n  // Update counts.\n  temp.count \x3d node.count;\n  node.count -\x3d (temp.left ? temp.left.count : 0) + 1;\n};\n\n\n/**\n * Removes the specified node from the tree and ensures the tree still\n * maintains the AVL-tree balance.\n *\n * @param {goog.structs.AvlTree.Node\x3cT\x3e} node The node to be removed.\n * @private\n */\ngoog.structs.AvlTree.prototype.removeNode_ \x3d function(node) {\n  // Perform normal binary tree node removal, but balance the tree, starting\n  // from where we removed the node\n  if (node.left !\x3d null || node.right !\x3d null) {\n    var b \x3d null;  // Node to begin balance from\n    var r;         // Node to replace the node being removed\n    if (node.left !\x3d null) {\n      r \x3d this.getMaxNode_(node.left);\n\n      // Update counts.\n      this.traverse_(function(node) {\n        node.count--;\n        return node.parent;\n      }, r);\n\n      if (r !\x3d node.left) {\n        r.parent.right \x3d r.left;\n        if (r.left) r.left.parent \x3d r.parent;\n        r.left \x3d node.left;\n        r.left.parent \x3d r;\n        b \x3d r.parent;\n      }\n      r.parent \x3d node.parent;\n      r.right \x3d node.right;\n      if (r.right) r.right.parent \x3d r;\n      if (node \x3d\x3d this.maxNode_) this.maxNode_ \x3d r;\n      r.count \x3d node.count;\n    } else {\n      r \x3d this.getMinNode_(node.right);\n\n      // Update counts.\n      this.traverse_(function(node) {\n        node.count--;\n        return node.parent;\n      }, r);\n\n      if (r !\x3d node.right) {\n        r.parent.left \x3d r.right;\n        if (r.right) r.right.parent \x3d r.parent;\n        r.right \x3d node.right;\n        r.right.parent \x3d r;\n        b \x3d r.parent;\n      }\n      r.parent \x3d node.parent;\n      r.left \x3d node.left;\n      if (r.left) r.left.parent \x3d r;\n      if (node \x3d\x3d this.minNode_) this.minNode_ \x3d r;\n      r.count \x3d node.count;\n    }\n\n    // Update the parent of the node being removed to point to its replace\n    if (node.isLeftChild()) {\n      node.parent.left \x3d r;\n    } else if (node.isRightChild()) {\n      node.parent.right \x3d r;\n    } else {\n      this.root_ \x3d r;\n    }\n\n    // Balance the tree\n    this.balance_(b ? b : r);\n  } else {\n    // Update counts.\n    this.traverse_(function(node) {\n      node.count--;\n      return node.parent;\n    }, node.parent);\n\n    // If the node is a leaf, remove it and balance starting from its parent\n    if (node.isLeftChild()) {\n      node.parent.left \x3d null;\n      if (node \x3d\x3d this.minNode_) this.minNode_ \x3d node.parent;\n      this.balance_(node.parent);\n    } else if (node.isRightChild()) {\n      node.parent.right \x3d null;\n      if (node \x3d\x3d this.maxNode_) this.maxNode_ \x3d node.parent;\n      this.balance_(node.parent);\n    } else {\n      this.clear();\n    }\n  }\n};\n\n\n/**\n * Returns the node in the tree that has k nodes before it in an in-order\n * traversal, optionally rooted at `opt_rootNode`.\n *\n * @param {number} k The number of nodes before the node to be returned in an\n *     in-order traversal, where 0 \x3c\x3d k \x3c root.count.\n * @param {goog.structs.AvlTree.Node\x3cT\x3e\x3d} opt_rootNode Optional root node.\n * @return {goog.structs.AvlTree.Node\x3cT\x3e} The node at the specified index.\n * @private\n */\ngoog.structs.AvlTree.prototype.getKthNode_ \x3d function(k, opt_rootNode) {\n  var root \x3d opt_rootNode || this.root_;\n  var numNodesInLeftSubtree \x3d root.left ? root.left.count : 0;\n\n  if (k \x3c numNodesInLeftSubtree) {\n    return this.getKthNode_(k, root.left);\n  } else if (k \x3d\x3d numNodesInLeftSubtree) {\n    return root;\n  } else {\n    return this.getKthNode_(k - numNodesInLeftSubtree - 1, root.right);\n  }\n};\n\n\n/**\n * Returns the node with the smallest value in tree, optionally rooted at\n * `opt_rootNode`.\n *\n * @param {goog.structs.AvlTree.Node\x3cT\x3e\x3d} opt_rootNode Optional root node.\n * @return {goog.structs.AvlTree.Node\x3cT\x3e} The node with the smallest value in\n *     the tree.\n * @private\n */\ngoog.structs.AvlTree.prototype.getMinNode_ \x3d function(opt_rootNode) {\n  if (!opt_rootNode) {\n    return this.minNode_;\n  }\n\n  var minNode \x3d opt_rootNode;\n  this.traverse_(function(node) {\n    var retNode \x3d null;\n    if (node.left) {\n      minNode \x3d node.left;\n      retNode \x3d node.left;\n    }\n    return retNode;  // If null, we\x27ll stop traversing the tree\n  }, opt_rootNode);\n\n  return minNode;\n};\n\n\n/**\n * Returns the node with the largest value in tree, optionally rooted at\n * opt_rootNode.\n *\n * @param {goog.structs.AvlTree.Node\x3cT\x3e\x3d} opt_rootNode Optional root node.\n * @return {goog.structs.AvlTree.Node\x3cT\x3e} The node with the largest value in\n *     the tree.\n * @private\n */\ngoog.structs.AvlTree.prototype.getMaxNode_ \x3d function(opt_rootNode) {\n  if (!opt_rootNode) {\n    return this.maxNode_;\n  }\n\n  var maxNode \x3d opt_rootNode;\n  this.traverse_(function(node) {\n    var retNode \x3d null;\n    if (node.right) {\n      maxNode \x3d node.right;\n      retNode \x3d node.right;\n    }\n    return retNode;  // If null, we\x27ll stop traversing the tree\n  }, opt_rootNode);\n\n  return maxNode;\n};\n\n\n\n/**\n * Constructs an AVL-Tree node with the specified value. If no parent is\n * specified, the node\x27s parent is assumed to be null. The node\x27s height\n * defaults to 1 and its children default to null.\n *\n * @param {T} value Value to store in the node.\n * @param {goog.structs.AvlTree.Node\x3cT\x3e\x3d} opt_parent Optional parent node.\n * @constructor\n * @final\n * @template T\n */\ngoog.structs.AvlTree.Node \x3d function(value, opt_parent) {\n  /**\n   * The value stored by the node.\n   *\n   * @type {T}\n   */\n  this.value \x3d value;\n\n  /**\n   * The node\x27s parent. Null if the node is the root.\n   *\n   * @type {goog.structs.AvlTree.Node\x3cT\x3e}\n   */\n  this.parent \x3d opt_parent ? opt_parent : null;\n\n  /**\n   * The number of nodes in the subtree rooted at this node.\n   *\n   * @type {number}\n   */\n  this.count \x3d 1;\n};\n\n\n/**\n * The node\x27s left child. Null if the node does not have a left child.\n *\n * @type {?goog.structs.AvlTree.Node\x3cT\x3e}\n */\ngoog.structs.AvlTree.Node.prototype.left \x3d null;\n\n\n/**\n * The node\x27s right child. Null if the node does not have a right child.\n *\n * @type {?goog.structs.AvlTree.Node\x3cT\x3e}\n */\ngoog.structs.AvlTree.Node.prototype.right \x3d null;\n\n\n/**\n * The height of the tree rooted at this node.\n *\n * @type {number}\n */\ngoog.structs.AvlTree.Node.prototype.height \x3d 1;\n\n\n/**\n * Returns true iff the specified node has a parent and is the right child of\n * its parent.\n *\n * @return {boolean} Whether the specified node has a parent and is the right\n *    child of its parent.\n */\ngoog.structs.AvlTree.Node.prototype.isRightChild \x3d function() {\n  return !!this.parent \x26\x26 this.parent.right \x3d\x3d this;\n};\n\n\n/**\n * Returns true iff the specified node has a parent and is the left child of\n * its parent.\n *\n * @return {boolean} Whether the specified node has a parent and is the left\n *    child of its parent.\n */\ngoog.structs.AvlTree.Node.prototype.isLeftChild \x3d function() {\n  return !!this.parent \x26\x26 this.parent.left \x3d\x3d this;\n};\n\n//# sourceURL\x3dhttps://qs/javascript/closure/structs/avltree.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/amp/service/local_storage.js";
eval("goog.provide(\x27amp.service.LocalStorage\x27);\n\ngoog.require(\x27amp.service.cookies\x27);\ngoog.require(\x27goog.Promise\x27);\ngoog.require(\x27goog.iter\x27);\ngoog.require(\x27goog.labs.userAgent.browser\x27);\ngoog.require(\x27goog.storage.Storage\x27);\ngoog.require(\x27goog.storage.mechanism.ErrorCode\x27);\ngoog.require(\x27goog.storage.mechanism.ErrorHandlingMechanism\x27);\ngoog.require(\x27goog.storage.mechanism.HTML5LocalStorage\x27);\ngoog.require(\x27goog.storage.mechanism.PrefixedMechanism\x27);\ngoog.require(\x27goog.structs.AvlTree\x27);\n\n\n/**\n * A storage holder object, containing:\n * storage: The interface for getting and setting values.\n * mechanism: The interface to access and iterate over all stored entries.\n *\n * @typedef {{\n *   storage: !goog.storage.Storage,\n *   mechanism: !goog.storage.mechanism.PrefixedMechanism\n * }}\n * @private\n */\namp.service.StorageInstance_;\n\n\n/**\n * The instance for the local storage.\n * @private {?amp.service.StorageInstance_}\n */\namp.service.defaultInstance_;\n\n\n/**\n * An API for AMP to interact with local storage.  This is mainly used to\n * moderate access to cookies.\n*/\namp.service.LocalStorage \x3d goog.defineClass(null, {\n  statics: {\n    /**\n     * The key prefix used by this API within the browser local storage.\n     * @private {string}\n     */\n    PREFIX_: \x27amp::ls\x27,\n\n    /**\n     * The key used to cache the element count in our prefix space.  This is to\n     * avoid the expensive process of traversing all of local storage.  The key\n     * is not a domain, so it should not collide with anything else stored.\n     * @private {string}\n     */\n    CACHED_COUNT_KEY_: \x27_count\x27,\n\n    /**\n     * The number of entries in local storage managed by this API required\n     * before we trigger a cleanup sweep.  This is different from the cleanup\n     * target to reduce the number cleanups.\n     * @private {number}\n     */\n    CLEANUP_THRESHOLD_: 120,\n\n    /**\n     * The number of entries in local storage managed by this API that the\n     * cleanup will try to reduce usage to.\n     * @private {number}\n     */\n    CLEANUP_TARGET_: 80,\n\n    /**\n     * The number of entries that cleanup will always try to reduce by,\n     * regardless of how many entries we think we have.\n     * @private {number}\n     */\n    MINIMUM_CLEANUP_SIZE_: 5,\n\n    /**\n     * The maximum size in bytes of a single domain\x27s entry in local storage as\n     * provided by this API.\n     * @private {number}\n     */\n    MAX_ENTRY_BYTES_: 2000,\n\n    /**\n     * The maximum allowable age of an object storged by this API.\n     * currently equivalent to 365 days.\n     * @private {number}\n     */\n    MAX_AGE_MS_: 1000 * 60 * 60 * 24 * 365,\n\n    /**\n     * The number of entries to process before rescheduling ourself during\n     * cleanup.\n     * @private {number}\n     */\n    CLEANUP_CHUNK_SIZE_: 20,\n\n\n    /**\n     * The time in milliseconds to wait before processing another chunk during\n     * cleanup.\n     * @private {number}\n     */\n    CLEANUP_SCHEDULING_INTERVAL_MS_: 200,\n\n\n    /**\n     * A string indicating that a storage operation failed.\n     * Used to report errors.\n     * @private {string}\n     */\n    STORAGE_ERROR_: \x27storage unavailable\x27,\n\n\n    /**\n     * Manages retrieval of the storage object as a promise.  This enforces the\n     * presence of the cached count in storage.\n     * @return {!goog.Promise\x3c!amp.service.StorageInstance_\x3e}\n     * @private\n     */\n    getStorage_: function() {\n      var mechanism \x3d amp.service.LocalStorage.getMechanism_();\n      if (mechanism) {\n        var instance \x3d\n            /** @type {!goog.Promise\x3camp.service.StorageInstance_\x3e} */\n            ({\n              storage: new goog.storage.Storage(mechanism),\n              mechanism: mechanism\n            });\n        try {\n          instance.storage.set(\n              amp.service.LocalStorage.CACHED_COUNT_KEY_,\n              instance.storage.get(\n                  amp.service.LocalStorage.CACHED_COUNT_KEY_) || 0);\n        } catch (e) {\n          return goog.Promise.reject(amp.service.LocalStorage.STORAGE_ERROR_);\n        }\n        return goog.Promise.resolve(instance);\n      } else {\n        return goog.Promise.reject(amp.service.LocalStorage.STORAGE_ERROR_);\n      }\n    },\n\n\n    /**\n     * Gets the cached count value out of storage.  Since we only resolve our\n     * storage promise when the cached count already exists, this is presumed to\n     * always succeed.\n     * @param {!amp.service.StorageInstance_} instance The storage instance to\n     *     act upon.\n     * @return {number} The count that was cached in storage.\n     * @private\n     */\n    getCount_: function(instance) {\n      return /** @type {number} */ (\n          instance.storage.get(amp.service.LocalStorage.CACHED_COUNT_KEY_));\n    },\n\n    /**\n     * Sets the cached count value in storage.  Since we only resolve our\n     * storage promise when the cachedcount already exists, this is presumed to\n     * always succeed.\n     * @param {!amp.service.StorageInstance_} instance The storage instance to\n     *     act upon.\n     * @param {number} count The count to put into storage.\n     * @private\n     */\n    setCount_: function(instance, count) {\n      instance.storage.set(amp.service.LocalStorage.CACHED_COUNT_KEY_, count);\n    },\n\n\n    /**\n     * Returns the underlying mechanism corresponding to a storage instance.\n     * @return {?goog.storage.mechanism.PrefixedMechanism}\n     */\n    getMechanism_ : function() {\n      var instance \x3d amp.service.LocalStorage.ensureStorageCreated_();\n      return (instance \x26\x26 instance.available) ? instance.mechanism : null;\n    },\n\n\n    /**\n     * Ensures that a storage instance exists.\n     * @return {?amp.service.StorageInstance_}\n     * @private\n     */\n    ensureStorageCreated_ : function() {\n      var shouldDisableLocalStorageInIE \x3d goog.labs.userAgent.browser.isIE()\n          \x26\x26 !amp.service.cookies.areCookiesEnabled();\n\n      if (shouldDisableLocalStorageInIE) {\n        return null;\n      }\n\n      amp.service.defaultInstance_ \x3d amp.service.defaultInstance_ ||\n          amp.service.LocalStorage.createInstance_();\n      return amp.service.defaultInstance_;\n    },\n\n\n    /**\n     * Creates a new prefixed storage instance.\n     * @return {!amp.service.StorageInstance_} The storage instance.\n     * @private\n     */\n    createInstance_ : function() {\n      var instance \x3d new goog.storage.mechanism.HTML5LocalStorage();\n      var available \x3d instance.isAvailable();\n\n      var mechanism \x3d new goog.storage.mechanism.PrefixedMechanism(\n          instance,\n          amp.service.LocalStorage.PREFIX_);\n\n      // A storage inside a mechanism inside a mechanism inside a storage.\n      // We need to go deeper.\n      var storage \x3d new goog.storage.Storage(\n          new goog.storage.mechanism.ErrorHandlingMechanism(\n              mechanism, amp.service.LocalStorage.errorHandler_));\n\n      return /** @type {!amp.service.StorageInstance_} */ (\n          {mechanism: mechanism, available: available});\n    },\n\n\n    /**\n     * Handles exceptions thrown when interacting with a storage instance.\n     * @param {!Error|string} error The thrown exception.\n     * @param {goog.storage.mechanism.ErrorHandlingMechanism.Operation}\n     *     operation The operation that triggered the exception.\n     * @param {string} key The storage access key.\n     * @param {*\x3d} opt_value The storage access value.\n     * @private\n     */\n    errorHandler_ : function(error, operation, key, opt_value) {\n      // We don\x27t care about logging exceptions for users with disabled storage\n      // (e.g., Safari Private mode), or storage quota issues.\n      if (error \x3d\x3d goog.storage.mechanism.ErrorCode.STORAGE_DISABLED) {\n        return;\n      }\n\n      if (error \x3d\x3d goog.storage.mechanism.ErrorCode.QUOTA_EXCEEDED) {\n        return;\n      }\n\n      var exception \x3d goog.isString(error) ? new Error(error) : error;\n      throw exception;\n    }\n  },\n\n\n  /**\n   * @constructor\n   * @param {!amp.service.GenericScheduler} scheduler The scheduler to run the\n   *     foreach in batches.\n   */\n  constructor: function(scheduler) {\n    /**\n     * A promise that resolves to the local storage interface. Rejects if the\n     * storage is unavailable.\n     * @private {!goog.Promise\x3c!amp.service.StorageInstance_\x3e}\n     */\n    this.storagePromise_ \x3d amp.service.LocalStorage.getStorage_();\n\n    /**\n     * A promise that is null when we aren\x27t currently already running a cleanup\n     * on our prefix space in localstorage.  When non-null, removeOldEntries_\n     * will not trigger another cleanup.\n     * @private {?goog.Promise\x3cnumber\x3e}\n     */\n    this.cleanupPromise_ \x3d null;\n\n\n    /**\n     * The scheduler to run the foreach in batches.\n     * @const\n     * @private {!amp.service.GenericScheduler}\n     */\n    this.scheduler_ \x3d scheduler;\n  },\n\n\n  /**\n   * @return {boolean} Indicates if the device supports local storage.\n   */\n  isAvailable: function() {\n    var instance \x3d amp.service.defaultInstance_;\n    return instance \x26\x26 instance.available;\n  },\n\n\n  /**\n   * Gets a promise for the value for the specified key or an empty string if no\n   * value is found.\n   * @param {string} key\n   * @return {!goog.Promise\x3cstring\x3e} A promise that resolves providing the\n   * stored value or \x27\x27.\n   */\n  get: function(key) {\n    return this.storagePromise_.then(\n        /**\n         * @param {!amp.service.StorageInstance_} instance\n         * @return {string}\n         */\n        function(instance) {\n          var entry;\n          try {\n            entry \x3d instance.storage.get(key);\n            return entry[\x27v\x27];\n          } catch (e) {\n            // If reading from localStorage fails, we assume it is empty.\n            return \x27\x27;\n          }\n        });\n  },\n\n\n  /**\n   * Gets a promise that resolves when the value has been added to storage, or\n   * rejects if the value cannot be added.\n   * @param {string} key\n   * @param {string} value\n   * @return {!goog.Promise} A promise that resolves when the value has been\n   * added to storage, or rejects if the value cannot be added.\n   */\n  set: function(key, value) {\n    if (value.length \x3e amp.service.LocalStorage.MAX_ENTRY_BYTES_) {\n      return goog.Promise.reject(\x27value too large\x27);\n    }\n    return this.storagePromise_.then(goog.bind(\n        /**\n         * @param {!amp.service.StorageInstance_} instance\n         * @return {!goog.Promise}\n         */\n        function(instance) {\n          var entry \x3d {\x27t\x27: goog.now(), \x27v\x27: value};\n          var preexists \x3d false;\n          try {\n            preexists \x3d !!instance.storage.get(key);\n            instance.storage.set(key, entry);\n          } catch (e) {\n            if (e \x3d\x3d goog.storage.mechanism.ErrorCode.QUOTA_EXCEEDED) {\n              return this.removeOldEntries_().then(\n                  goog.bind(function(removedCount) {\n                    if (removedCount) {\n                      return this.set(key, value);\n                    } else {\n                      return goog.Promise.reject(\x27insufficient space\x27);\n                    }\n                  }, this));\n            }\n            // Storage failed in a mysterious way, so send a message saying so.\n            return goog.Promise.reject(amp.service.LocalStorage.STORAGE_ERROR_);\n          }\n          // If we succeeded then we should check if we need to do some cleanup.\n          if (!preexists) {\n            var count \x3d amp.service.LocalStorage.getCount_(instance);\n            amp.service.LocalStorage.setCount_(instance, ++count);\n            if (count \x3e\x3d amp.service.LocalStorage.CLEANUP_THRESHOLD_) {\n              // This begins a cleanup if one is not already running, but does\n              // not wait for it to complete.\n              this.removeOldEntries_();\n            }\n          }\n          return goog.Promise.resolve();\n        }, this));\n  },\n\n\n  /**\n   * Executes a foreach in batches, with breaks in between.\n   * @param {!goog.iter.Iterator} iter An iterator on the elements over which\n   *     to execute the foreach.\n   * @param {!Function} fn The function to apply for each element provided by\n   *     the iterator.\n   * @return {!goog.Promise} A promise that resolves when the foreach is done.\n   * @private\n   */\n  chunkedForEach_: function(iter, fn) {\n    var chunkSize \x3d amp.service.LocalStorage.CLEANUP_CHUNK_SIZE_;\n    var resolver \x3d goog.Promise.withResolver();\n    var processChunk \x3d\n      /** @this {amp.service.LocalStorage} */\n      function() {\n        var limitedIter \x3d goog.iter.limit(iter, chunkSize);\n        var processedCount \x3d 0;\n        goog.iter.forEach(limitedIter, function(value, ignored, opt_obj) {\n          processedCount++;\n          fn.call(opt_obj, value, undefined, limitedIter);\n        });\n        if (processedCount \x3d\x3d chunkSize) {\n          this.scheduler_.setTimeout(\n            goog.bind(processChunk, this),\n            amp.service.LocalStorage.CLEANUP_SCHEDULING_INTERVAL_MS_);\n        } else {\n          resolver.resolve();\n        }\n      };\n    this.scheduler_.nextTick(goog.bind(processChunk, this));\n    return resolver.promise;\n  },\n\n\n  // TODO(rjsumi): We may want to not chunk the foreach if non-prefixed\n  // localstorage doesn\x27t have that much stuff in it.\n  /**\n   * Generates a list of entries above the maximum allowable age, and then\n   * purges them from the storage we manage.  Although this is based on\n   * iterators that are not stable under insertion/deletion, and allows other\n   * code to execute between chunks, there should be no risk to correctness,\n   * just to efficiency.\n   * @return {!goog.Promise\x3cnumber\x3e} A promise that resolves when all chunks are\n   * complete and provides the count of elements that were removed.\n   * @private\n   */\n  removeOldEntries_: function() {\n    if (this.cleanupPromise_) {\n      return this.cleanupPromise_;\n    }\n    var cleanup \x3d this.storagePromise_.then(goog.bind(\n        /**\n         * @param {!amp.service.StorageInstance_} instance\n         * @return {!goog.Promise\x3cnumber\x3e}\n         */\n        function(instance) {\n          var now \x3d goog.now();\n          // AVL tree storing elements in increasing order of time.  Only the\n          // oldest K elements will be kept in the tree, and then will be read\n          // off at the end into keysToRemove.\n          var freshEntriesToRemove \x3d new goog.structs.AvlTree(function(a, b) {\n            return a.timestamp - b.timestamp;\n          });\n          var keysToRemove \x3d [];\n          var numFreshEntriesToRemove \x3d Math.max(\n              amp.service.LocalStorage.MINIMUM_CLEANUP_SIZE_,\n              amp.service.LocalStorage.getCount_(instance) -\n                  amp.service.LocalStorage.CLEANUP_TARGET_);\n          var keyIter \x3d instance.mechanism.__iterator__(true);\n          return this.chunkedForEach_(\n                  keyIter,\n                  function(key) {\n                    // If it\x27s the special cached count key then don\x27t do\n                    // anything.\n                    if (key \x3d\x3d amp.service.LocalStorage.CACHED_COUNT_KEY_) {\n                      return;\n                    }\n\n                    var entry \x3d instance.storage.get(key);\n                    // If it\x27s old enough to be purged regardless, put it in the\n                    // removal array.\n                    var maxAge \x3d amp.service.LocalStorage.MAX_AGE_MS_;\n                    if (now - entry[\x27t\x27] \x3e maxAge) {\n                      keysToRemove.push(key);\n                      // We need fewer old-but-not-too-old nodes now.\n                      numFreshEntriesToRemove--;\n                      // If we\x27re still looking for fresh entries to remove, and\n                      // either this entry is less fresh than our freshest one\n                      // or we don\x27t have enough entries yet, put it in the\n                      // tree.\n                    } else if (\n                        numFreshEntriesToRemove \x3e 0 \x26\x26\n                        (freshEntriesToRemove.getCount() \x3c\n                             numFreshEntriesToRemove ||\n                         entry[\x27t\x27] \x3c\n                             freshEntriesToRemove.getMaximum().timestamp)) {\n                      freshEntriesToRemove.add(\n                          {timestamp: entry[\x27t\x27], key: key});\n                    }\n                    // We only have modified our goal by one using either of the\n                    // paths above.\n                    if (freshEntriesToRemove.getCount() \x3e\n                            numFreshEntriesToRemove) {\n                      // The maximum is the one with the highest timestamp, i.e.\n                      // the most fresh.\n                      freshEntriesToRemove.remove(\n                          freshEntriesToRemove.getMaximum());\n                    }\n                  })\n              .then(goog.bind(function() {\n                freshEntriesToRemove.inOrderTraverse(function(node) {\n                  keysToRemove.push(node.key);\n                });\n\n                var numRemoved \x3d keysToRemove.length;\n                for (var i \x3d 0; i \x3c numRemoved; i++) {\n                  instance.storage.remove(keysToRemove[i]);\n                }\n\n                amp.service.LocalStorage.setCount_(\n                    instance,\n                    amp.service.LocalStorage.getCount_(instance) - numRemoved);\n                return numRemoved;\n              }, this));\n        }, this));\n\n    // Set up the reversion of the promise to null;\n    this.cleanupPromise_ \x3d cleanup;\n    this.cleanupPromise_.thenAlways(function() {\n      this.cleanupPromise_ \x3d null;\n    }, this);\n    return cleanup;\n  }\n});\n\n//# sourceURL\x3dhttps://qs/javascript/amp/service/local_storage.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/viewer_context.js";
eval("goog.provide(\x27gws.amp.ViewerContext\x27);\n\ngoog.require(\x27amp.service.ClientId\x27);\ngoog.require(\x27amp.service.ClientIdLocal\x27);\ngoog.require(\x27amp.service.LocalStorage\x27);\ngoog.require(\x27goog.dom\x27);\ngoog.require(\x27gws.amp.DocumentStateStorage\x27);\ngoog.require(\x27gws.amp.GwsScheduler\x27);\ngoog.require(\x27gws.amp.WindowManipulator\x27);\ngoog.require(\x27gws.amp.config\x27);\ngoog.require(\x27jslayout.TemplatePool\x27);\ngoog.require(\x27search.cache.Namespace\x27);\ngoog.require(\x27search.cache.factory\x27);\ngoog.require(\x27search.log.errorLogger\x27);\ngoog.require(\x27storagecache.Priority\x27);\n\ngoog.scope(function() {\nconst config \x3d gws.amp.config;\n\n/**\n * A container for general viewer context that may be shared among ViewerItems\n * and ViewerItemSets.\n */\ngws.amp.ViewerContext \x3d goog.defineClass(null, {\n  /**\n   * @param {!Element} loadingIcon A shared loading indicator element.\n   * @param {!gws.amp.WindowManipulator} windowManipulator The object\n   *     responsible for manipulating the window.\n   * @param {!gws.amp.HeaderManager} headerManager The object\n   *     responsible for manipulating the header.\n   * @param {string} viewerVed The ved for the full page viewer element.\n   * @param {?string} partialTimestamp The partial timestamp or empty string if\n   *     no timestamp is available.\n   * @constructor\n   */\n  constructor: function(\n      loadingIcon, windowManipulator, headerManager, viewerVed,\n      partialTimestamp) {\n    /** @private @const {!Element} */\n    this.loadingIcon_ \x3d loadingIcon;\n\n    /** @private @const {!amp.service.LocalStorage} */\n    this.localStorage_ \x3d\n        new amp.service.LocalStorage(new gws.amp.GwsScheduler());\n\n    /**\n     * The object responsible for storing and retrieving information from\n     * docStateStorage.\n     * @private @const {!gws.amp.DocumentStateStorage}\n     */\n    this.docStateStorage_ \x3d new gws.amp.DocumentStateStorage();\n\n    /** @private @const {!gws.amp.WindowManipulator} */\n    this.windowManipulator_ \x3d windowManipulator;\n\n    /** @private @const {!gws.amp.HeaderManager} */\n    this.headerManager_ \x3d headerManager;\n\n    /** @private @const {string} */\n    this.viewerVed_ \x3d viewerVed;\n\n    /** @private @const {?string} */\n    this.partialTimestamp_ \x3d partialTimestamp;\n\n    /** @private @const {!jslayout.TemplatePool} */\n    this.templatePool_ \x3d new jslayout.TemplatePool(goog.dom.getDocument());\n\n    // TODO(bdiamond, b/72396912): since client ID has been moved to common,\n    // some GWS-specific cache cleanup code temporarily needs to run here.\n    this.migrateLegacyClientIdKeys_();\n\n    const cidConfig \x3d config.getInstance().getClientIdConfig();\n    const serviceConfig \x3d {\n      serviceKey: cidConfig.getClientIdServiceKey() || undefined,\n      servicePath: cidConfig.getClientIdServicePath() || undefined,\n      serviceDomainWithoutTld:\n          cidConfig.getClientIdServiceDomainWithoutTld() || undefined,\n      matchTld: !!cidConfig.getClientIdServiceTldMatchingEnabled()\n    };\n    const cidError \x3d (name, data) \x3d\x3e {\n      const err \x3d new Error(name);\n      search.log.errorLogger.log(err, {errorContext: data});\n    };\n\n    /**\n     * A class for generating and storing client IDs using the Harmony service\n     * when possible.\n     * @private {!amp.service.ClientId}\n     */\n    this.clientId_ \x3d new amp.service.ClientId(\n        goog.dom.getWindow(), /* serviceEnabled */ true, serviceConfig,\n        /* viewerScope */ undefined, cidError);\n  },\n\n\n  /**\n   * @return {!Element} The shared loading indicator element.\n   */\n  getLoadingIcon: function() {\n    return this.loadingIcon_;\n  },\n\n\n  /**\n   * @return {!amp.service.LocalStorage}\n   */\n  getLocalStorage: function() {\n    return this.localStorage_;\n  },\n\n\n  /**\n   * @return {!gws.amp.DocumentStateStorage}\n   */\n  getDocStateStorage: function() {\n    return this.docStateStorage_;\n  },\n\n\n  /**\n   * @return {!gws.amp.WindowManipulator} The window manipulator.\n   */\n  getWindowManipulator: function() {\n    return this.windowManipulator_;\n  },\n\n\n  /**\n   * @return {!jslayout.TemplatePool} The shared TemplatePool\n   */\n  getTemplatePool: function() {\n    return this.templatePool_;\n  },\n\n\n  /**\n   * @return {!gws.amp.HeaderManager}\n   */\n  getHeaderManager: function() {\n    return this.headerManager_;\n  },\n\n\n  /**\n   * @return {string}\n   */\n  getViewerVed: function() {\n    return this.viewerVed_;\n  },\n\n\n  /**\n   * @return {?string} The string could be empty.\n   */\n  getPartialTimestamp: function() {\n    return this.partialTimestamp_;\n  },\n\n\n  /**\n   * @return {!amp.service.ClientId}\n   */\n  getClientId: function() {\n    return this.clientId_;\n  },\n\n  /**\n   * Migrates GWS keys to storagecache, cleaning up old keys. Can be removed\n   * once migration is sufficiently complete.\n   * TODO(bdiamond, b/72396912): remove this after sufficient time has passed.\n   * @private\n   */\n  migrateLegacyClientIdKeys_: function() {\n    search.cache.factory.migrateLocalItems(\n        search.cache.Namespace.AMP.name,\n        [\n          amp.service.ClientIdLocal.CACHE_KEY,\n        ],\n        storagecache.Priority.HIGH, true /* removeGwsStorageKeys */);\n  },\n});\n});  // goog.scope\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/viewer_context.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/viewer_item.js";
eval("goog.provide(\x27gws.amp.ViewerItem\x27);\n\ngoog.require(\x27amp.constants\x27);\ngoog.require(\x27amp.service.AmpUrl\x27);\ngoog.require(\x27goog.Disposable\x27);\ngoog.require(\x27goog.Promise\x27);\ngoog.require(\x27goog.dom\x27);\ngoog.require(\x27goog.dom.TagName\x27);\ngoog.require(\x27goog.style\x27);\ngoog.require(\x27gws.amp.HeaderConfig\x27);\ngoog.require(\x27gws.amp.ItemContentManager\x27);\ngoog.require(\x27gws.amp.config\x27);\ngoog.require(\x27gws.amp.csi.Reporter\x27);\ngoog.require(\x27gws.amp.history.UpdateUrlMode\x27);\ngoog.require(\x27search.animation.Animation\x27);\ngoog.require(\x27search.animation.Curves\x27);\ngoog.require(\x27search.task.scheduler\x27);\n\n\ngoog.scope(function() {\nconst config \x3d gws.amp.config;\nconst constants \x3d amp.constants;\nconst scheduler \x3d goog.module.get(\x27search.task.scheduler\x27);\n\n/**\n * The Container for a single item in a ViewerItem set. It is resposible for\n * slide animations and logging. It also owns an ItemContentManager which is\n * responsible for the content of the item.\n */\ngws.amp.ViewerItem \x3d goog.defineClass(goog.Disposable, {\n  statics: {\n    /**\n     * The duration in ms of the animation that applies the scale and opacity\n     * change. The duration of the X translation itself is controlled by the\n     * underlying Slider instead.\n     * @private {number},\n     */\n    SLIDE_DURATION_: 400,\n\n    /**\n     * The final opacity to apply to items that are sliding into view.\n     * @private {number},\n     */\n    FINAL_SLIDE_IN_OPACITY_: 0.999,\n\n    /**\n     * The final scale to apply to items that are sliding in to view.\n     * @private {number}\n     */\n    FINAL_SLIDE_IN_SCALE_: 1,\n\n    /**\n     * The final opacity to apply to items that are sliding out of view.\n     * @private {number}\n     */\n    FINAL_SLIDE_OUT_OPACITY_: 0.1,\n\n    /**\n     * The final scale to apply to items that are sliding out of view.\n     * @private {number}\n     */\n    FINAL_SLIDE_OUT_SCALE_: 0.7\n  },\n\n\n  /**\n   * @param {!gws.amp.ItemContentManager} contentManager The manager responsible\n   *     for the content of this item.\n   * @param {!gws.amp.ViewerContext} context ViewerContext for accessing\n   *     Viewer services.\n   * @param {!Element} itemContainer Container element for this item.\n   * @param {!gws.amp.HeaderConfig} headerConfig The configuration for the\n   * viewer\x27s header.\n   * @constructor\n   */\n  constructor: function(contentManager, context, itemContainer, headerConfig) {\n    /** @private @const {!gws.amp.ItemContentManager} */\n    this.contentManager_ \x3d contentManager;\n\n    /** @private {!Element} */\n    this.itemContainer_ \x3d itemContainer;\n\n    // Add an individual dns-prefetch/preconnect link to speed up page load.\n    const proxyUrl \x3d this.getAmpUrl().getProxyOrigin();\n    const preconnectLink \x3d goog.dom.createDom(\n        goog.dom.TagName.LINK,\n        {\x27rel\x27: \x27dns-prefetch preconnect\x27, \x27href\x27: proxyUrl});\n    goog.dom.appendChild(this.itemContainer_, preconnectLink);\n\n    /**\n     * The viewer containing this item. This is needed to check if the viewer is\n     * open.\n     * @private @const {!gws.amp.ViewerContext}\n     */\n    this.context_ \x3d context;\n\n    /**\n     * The width of the viewer.\n     * @private {number}\n     */\n    this.viewerWidth_ \x3d 0;\n\n    /**\n     * The height of the viewer.  Used for restoring viewer after animations.\n     * @private {number}\n     */\n    this.viewerHeight_ \x3d 0;\n\n    /**\n     * The current scale of this element. Used for swipe animations.\n     * @private {number}\n     */\n    this.scale_ \x3d 1;\n\n    /**\n     * The current opacity of this element. Used for swipe animations.\n     * @private {number}\n     */\n    this.opacity_ \x3d 1;\n\n    /**\n     * The current animation, stored so this controller can force it to\n     * finish if the promise has not been resolved at the end SLIDE_DURATION_\n     * milliseconds.\n     * @private {?search.animation.Animation}\n     */\n    this.currentAnimation_ \x3d null;\n\n    /**\n     * The current scheduled timeout function if one is set.  This is stored so\n     * the timeout can be cleared in instances where the animation is forced to\n     * complete before SLIDE_DURATION_ milliseconds.\n     * @private {?number}\n     */\n    this.currentAnimationTimeout_ \x3d null;\n\n    /**\n     * The configuration for the viewer\x27s header.  This is used to get its\n     * height.\n     * @private {!gws.amp.HeaderConfig}\n     */\n    this.headerConfig_ \x3d headerConfig;\n  },\n\n\n  /**\n   * Registers a CSI reporter to fire a tick against once the document has\n   * finished loading and is shown. If there is already a CSI reporter, this\n   * method will ignore the given one.\n   * @param {!gws.amp.csi.Reporter} csi\n   */\n  setCsiReporter: function(csi) {\n    this.contentManager_.setCsiReporter(csi);\n  },\n\n\n  /**\n   * Prerenders the viewer item if it is eligible.\n   */\n  prerenderIfEligible: function() {\n    if (!this.contentManager_.getModel().getPrerenderIneligible()) {\n      this.prerender();\n    }\n  },\n\n  /**\n   * Makes sure the page has been prefetched and partially prerendered, so that\n   * something is already visible when it will enter the viewport. This will\n   * always prerender the item, regardless of whether or not the Item is set as\n   * ineligible for prerender.\n   */\n  prerender: function() {\n    this.contentManager_.prerender();\n  },\n\n\n  /**\n   * Calls pauseImmediately_ after a predefined short period of time.\n   * This is useful, for example, to avoid pausing on an accidental swipe\n   * (see b/27362967).\n   */\n  pause: function() {\n    this.contentManager_.pause();\n  },\n\n\n  /**\n   * Updates the VISIBILITY_STATE in the document to VISIBLE.\n   */\n  visible: function() {\n    this.contentManager_.visible();\n  },\n\n  /**\n   * Prepares the content for showing.\n   * @param {!gws.amp.history.UpdateUrlMode} updateUrlMode\n   * @param {boolean\x3d} adjustHeader Whether the header should be adjusted.\n   * @return {!goog.Promise\x3cundefined\x3e} Resolves when the viewer item is ready\n   *     to show.\n   */\n  prepareForShow: function(updateUrlMode, adjustHeader \x3d false) {\n    return this.contentManager_.prepareForShow(updateUrlMode, adjustHeader);\n  },\n\n  /**\n   * The document is now user visible, so if the page has been requested already\n   * this updates the VISIBILITY_STATE in the document to VISIBLE, and otherwise\n   * does a full request with VISIBLE initial state (although this should not\n   * happen).\n   * It may be called by  ViewerController to notify the item that the viewer is\n   * open and this item is now shown to the users.\n   *\n   * @param {boolean\x3d} opt_clickLogged Whether a click for this item has already\n   * been logged.\n   */\n  show: function(opt_clickLogged) {\n    this.contentManager_.show(opt_clickLogged);\n  },\n\n  /**\n   * Prepares the content for hiding.\n   * @return {!goog.Promise\x3cundefined\x3e}\n   */\n  prepareForHide: function() {\n    return this.contentManager_.prepareForHide();\n  },\n\n  /**\n   * The document is not user visible anymore, so this updates the\n   * VISIBILITY_STATE and PRERENDER_SIZE in the document.\n   * TODO(flaviop): Unload the iframe and save state.\n   */\n  hide: function() {\n    this.contentManager_.hide();\n  },\n\n\n  /**\n   * Sends WILL_LIKELY_UNLOAD message through the channel.  We expect a call to\n   * actually remove the iframe several milliseconds after this function was\n   * called (but it isn\x27t guaranteed).\n   */\n  sendWillLikelyUnload: function() {\n    this.contentManager_.sendWillLikelyUnload();\n  },\n\n\n  /**\n   * Set the element dimensions.\n   * @param {number} width\n   * @param {number} height\n   */\n  setDimensions: function(width, height) {\n    if (this.viewerWidth_ \x3d\x3d width \x26\x26 this.viewerHeight_ \x3d\x3d height) {\n      return;  // No need to set dimensions as they are already correct\n    }\n\n    // Resize both the iframe and its container. On iOS the container will serve\n    // as the scroll element because the iframe dimensions are ignored.\n    goog.style.setWidth(this.itemContainer_, width);\n    goog.style.setHeight(this.itemContainer_, height);\n\n    // TODO(b/30627939): Do not pass the dimensions to the contentManager.\n    this.contentManager_.setDimensions(width, height);\n\n    // Store this height so it can be restored after animations.\n    this.viewerWidth_ \x3d width;\n    this.viewerHeight_ \x3d height;\n  },\n\n\n  /**\n   * @return {!gws.amp.ItemContentManager} The content manager responsible for\n   *     the contents of this item.\n   */\n  getContentManager: function() {\n    return this.contentManager_;\n  },\n\n\n  /**\n   * @return {string} The title to use for this document in the viewer. This is\n   *     based on the domain of the publisher.\n   */\n  getDomainTitle: function() {\n    return this.contentManager_.getDomainTitle();\n  },\n\n\n  /**\n   * @return {string} The title to be displayed in the browser\n   *     title bar. This may be the title directly from the AMP document and\n   *     therefore may be anything and should not be trusted for anything other\n   *     than the document.title.\n   */\n  getAmpTitle: function() {\n    return this.contentManager_.getPageTitle();\n  },\n\n\n  /**\n   * @return {?string} The canonical URL to be displayed in the popup bubble.\n   */\n  getCanonicalUrl: function() {\n    return this.contentManager_.getCanonicalUrl();\n  },\n\n\n  /**\n   * Returns the AmpUrl of this item.\n   * @return {!amp.service.AmpUrl} The url of the iframed AMP.\n   */\n  getAmpUrl: function() {\n    return this.contentManager_.getAmpUrl();\n  },\n\n\n  /**\n   * Reloads the current iframe without logging a visibility change.\n   * @public\n   */\n  reloadFrame: function() {\n    this.contentManager_.reloadFrame();\n  },\n\n\n  /**\n   * Removes the iframe and shuts down the corresponding frameChannel.\n   */\n  removeIframe: function() {\n    this.contentManager_.removeIframe();\n  },\n\n  /**\n   * Styles the item to shrink and fade when being swiped out.\n   * @param {number} deltaX\n   */\n  setSlideOutStyle: function(deltaX) {\n    if (!config.getInstance().getAnimationEnabled()) {\n      return;\n    }\n    const headerHeight \x3d this.contentManager_.isHeaderShown() ?\n        this.headerConfig_.getHeaderHeight() :\n        0;\n    const swipeHeight \x3d this.viewerHeight_ - headerHeight;\n    const slideFrac \x3d Math.abs(deltaX) / this.viewerWidth_;\n    const outScale \x3d gws.amp.ViewerItem.FINAL_SLIDE_OUT_SCALE_;\n    this.scale_ \x3d 1 + slideFrac * (outScale - 1);\n    const inOpacity \x3d gws.amp.ViewerItem.FINAL_SLIDE_IN_OPACITY_;\n    const outOpacity \x3d gws.amp.ViewerItem.FINAL_SLIDE_OUT_OPACITY_;\n    this.opacity_ \x3d inOpacity + slideFrac * (outOpacity - inOpacity);\n    const slideOutStyle \x3d {\n      \x27height\x27: swipeHeight + \x27px\x27,\n      \x27margin-top\x27: headerHeight + \x27px\x27,\n      \x27transform\x27: \x27scale3d(\x27 + this.scale_ + \x27, \x27 + this.scale_ + \x27, 1)\x27,\n      \x27opacity\x27: this.opacity_\n    };\n    goog.style.setStyle(this.itemContainer_, slideOutStyle);\n\n    // Set a margin on each child so that the portion that was under header bar\n    // is clipped.\n    // TODO(b/30627939): Set the margin on a single content container element\n    // instead of every child.\n    for (let i \x3d 0; i \x3c this.itemContainer_.children.length; i++) {\n      const child \x3d this.itemContainer_.children[i];\n      goog.style.setStyle(child, \x27margin-top\x27, -headerHeight + \x27px\x27);\n    }\n  },\n\n\n  /**\n   * Removes the styles applied by setSlideOutStyle.\n   */\n  resetStyle: function() {\n    const containerStyle \x3d {\n      \x27height\x27: this.viewerHeight_ + \x27px\x27,\n      \x27margin-top\x27: \x27\x27,\n      \x27transform\x27: \x27scale3d(1, 1, 1)\x27,\n      \x27opacity\x27: gws.amp.ViewerItem.FINAL_SLIDE_IN_OPACITY_\n    };\n    goog.style.setStyle(this.itemContainer_, containerStyle);\n\n    for (let i \x3d 0; i \x3c this.itemContainer_.children.length; i++) {\n      const child \x3d this.itemContainer_.children[i];\n      goog.style.setStyle(child, \x27margin-top\x27, \x27\x27);\n    }\n  },\n\n\n  /**\n   * Animates items sliding out of the primary view position if animations\n   * are enabled for the user\x27s device.\n   * go/wonderland-v1\n   * @return {!goog.Promise}\n   */\n  playSlideOutAnimation: function() {\n    if (config.getInstance().getAnimationEnabled() \x26\x26\n        goog.style.isElementShown(this.itemContainer_)) {\n      const finalScale \x3d gws.amp.ViewerItem.FINAL_SLIDE_OUT_SCALE_;\n      const finalOpacity \x3d gws.amp.ViewerItem.FINAL_SLIDE_OUT_OPACITY_;\n      return this.playSlideAnimation_(finalScale, finalOpacity);\n    } else {\n      return goog.Promise.resolve();\n    }\n  },\n\n\n  /**\n   * Animates items sliding back into the primary view position if animations\n   * are enabled for the user\x27s device.\n   * go/wonderland-v1\n   * @return {!goog.Promise}\n   */\n  playSlideBackAnimation: function() {\n    if (config.getInstance().getAnimationEnabled() \x26\x26\n        goog.style.isElementShown(this.itemContainer_)) {\n      const finalScale \x3d gws.amp.ViewerItem.FINAL_SLIDE_IN_SCALE_;\n      const finalOpacity \x3d gws.amp.ViewerItem.FINAL_SLIDE_IN_OPACITY_;\n      return this.playSlideAnimation_(finalScale, finalOpacity);\n    } else {\n      return goog.Promise.resolve();\n    }\n  },\n\n\n  /**\n   * Animates this item to a final scale and opacity.\n   * @param {number} finalScale The final scale of this item.\n   * @param {number} finalOpacity The final opacity of this item.\n   * @return {!goog.Promise}\n   * @private\n   */\n  playSlideAnimation_: function(finalScale, finalOpacity) {\n    const timing \x3d {\n      duration: gws.amp.ViewerItem.SLIDE_DURATION_,\n      easing: search.animation.Curves.FAST_OUT_SLOW_IN,\n      delay: 0\n    };\n\n    this.currentAnimation_ \x3d\n        new search.animation.Animation(this.itemContainer_, timing)\n            .scale(this.scale_, this.scale_, 1, finalScale, finalScale, 1)\n            .opacity(this.opacity_, finalOpacity);\n\n    return this.playCurrentAnimation_();\n  },\n\n  /**\n   * Plays the current animation. Separated from playSlideAnimation_ to make\n   * testing logic clearer.\n   * @return {!goog.Promise}\n   * @private\n   */\n  playCurrentAnimation_: function() {\n    this.scheduleStyleTimeout_();\n    return this.currentAnimation_.play();\n  },\n\n  /**\n   * Finishes the current animation if one is currently set. Clears and resets\n   * the current timeout, and resets the viewer item style.\n   *\n   * This is specifically to address instances where swiping quickly between\n   * documents causes the previous doc to get stuck in the \x22slide out\x22 style.\n   *\n   * See b/30976141 for more details\n   */\n  maybeFinishAnimation: function() {\n    if (this.currentAnimation_) {\n      this.currentAnimation_.finish();\n      this.currentAnimation_ \x3d null;\n    }\n\n    if (this.currentAnimationTimeout_) {\n      scheduler.clearTimeout(this.currentAnimationTimeout_);\n      this.currentAnimationTimeout_ \x3d null;\n    }\n\n    this.resetStyle();\n  },\n\n  /**\n   * In iOS, aggressive swiping back and forth between articles confuses the\n   * animation in a way which prevents it from resolving its promise. To work\n   * around this, we decouple this item resetting its style based on the promise\n   * resolution, and instead set a timer for the exact duration the animation\n   * should take, force the animation to finish when time runs out, and reset\n   * the style.\n   *\n   * See b/26865050 for more details.\n   * @private\n   */\n  scheduleStyleTimeout_: function() {\n    this.currentAnimationTimeout_ \x3d scheduler.setTimeout(\n        goog.bind(this.maybeFinishAnimation, this),\n        gws.amp.ViewerItem.SLIDE_DURATION_);\n  },\n\n\n  /** @return {!gws.amp.ViewerContext} The containing viewer. */\n  getContext: function() {\n    return this.context_;\n  },\n\n\n  /**\n   * Sends a scroll lock message to the document.\n   * @param {boolean} locked Whether scrolling should be locked.\n   */\n  setScrollLock: function(locked) {\n    this.contentManager_.setScrollLock(locked);\n  },\n\n\n  /**\n   * Shows the loading icon if the AMP document is still loading.\n   */\n  showIconIfLoading: function() {\n    this.contentManager_.showIconIfLoading();\n  },\n\n\n  /**\n   * Hides the loading-icon if it is displayed in this item.\n   */\n  hideLoadingIcon: function() {\n    this.contentManager_.hideLoadingIcon();\n  },\n\n\n  /**\n   * Allows setting a handler for document loading.\n   * @param {!Function} handler The handler to call on document load.\n   */\n  setDocumentLoadedViewerHandler: function(handler) {\n    this.contentManager_.setDocumentLoadedViewerHandler(handler);\n  },\n\n\n  /**\n   * Focuses the iframe. This is intended to be used to potentially mitigate\n   * b/24512452. Scrolling ocassionally locks and this may tickle the browser\n   * enough to prevent the freezing. Add this after animations.\n   * TODO(b/24512452): Reevaluate whether this is necessary.\n   */\n  focus: function() {\n    this.contentManager_.focus();\n  },\n\n\n  /**\n   * Computes a full standalone URL for this item.\n   * @return {string} The full standalone URL.\n   */\n  getStandaloneUrl: function() {\n    return this.getAmpUrl().getStandaloneUrl();\n  },\n\n  /**\n   * Returns the container element for this item.  Used for logging.\n   * @return {!Element} This item\x27s container element.\n   */\n  getItemContainer: function() {\n    return this.itemContainer_;\n  },\n\n\n  /**\n   * @return {!gws.amp.model.Item}\n   */\n  getModel: function() {\n    return this.contentManager_.getModel();\n  },\n\n\n  /**\n   * @return {!goog.Promise}\n   */\n  getVed: function() {\n    return this.getModel().getVed();\n  },\n\n\n  /**\n   * Returns whether the content of this item is showing a header.\n   * @return {boolean} Whether the content should have a header.\n   */\n  isHeaderShown: function() {\n    return this.contentManager_.hasHeader() \x26\x26\n        this.contentManager_.isHeaderShown();\n  },\n\n\n  /**\n   * @return {boolean} True if the swipe trigger VED should be logged. False\n   *     will prevent a trigger VED from being included in the visibility log\n   *     event when this item becomes visible.\n   */\n  shouldLogSwipeTrigger: function() {\n    return this.contentManager_.shouldLogSwipeTrigger();\n  },\n\n\n  /** @override */\n  disposeInternal: function() {\n    this.contentManager_.dispose();\n  },\n\n  saveScrollPosition: function() {\n    this.contentManager_.saveLastScrollTop();\n  },\n\n  restoreScrollPosition: function() {\n    this.contentManager_.restoreLastScrollTop();\n  }\n});\n});  // goog.scope\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/viewer_item.js\n");

$googDebugFname=undefined;
var $googDebugFname="java/com/google/gws/plugins/amp/jslayout/async_log.jspb.js";
eval("/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with \x27MSG_\x27 and isn\x27t a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\ngoog.provide(\x27proto.gws.plugins.amp.jslayout.AmpItem\x27);\ngoog.provide(\x27proto.gws.plugins.amp.jslayout.AmpItemSet\x27);\ngoog.require(\x27jspb.BinaryReader\x27);\ngoog.require(\x27jspb.BinaryWriter\x27);\ngoog.require(\x27jspb.Message\x27);\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.gws.plugins.amp.jslayout.AmpItemSet \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.gws.plugins.amp.jslayout.AmpItemSet.repeatedFields_, null);\n};\ngoog.inherits(proto.gws.plugins.amp.jslayout.AmpItemSet, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.gws.plugins.amp.jslayout.AmpItemSet.displayName \x3d \x27proto.gws.plugins.amp.jslayout.AmpItemSet\x27;\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array\x3cnumber\x3e}\n * @const\n */\nproto.gws.plugins.amp.jslayout.AmpItemSet.repeatedFields_ \x3d [3];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.gws.plugins.amp.jslayout.AmpItemSet.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.gws.plugins.amp.jslayout.AmpItemSet.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.gws.plugins.amp.jslayout.AmpItemSet} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.gws.plugins.amp.jslayout.AmpItemSet.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    ved: jspb.Message.getField(msg, 1),\n    ei: jspb.Message.getField(msg, 2),\n    itemList: jspb.Message.toObjectList(msg.getItemList(),\n    proto.gws.plugins.amp.jslayout.AmpItem.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.gws.plugins.amp.jslayout.AmpItemSet}\n */\nproto.gws.plugins.amp.jslayout.AmpItemSet.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.gws.plugins.amp.jslayout.AmpItemSet;\n  return proto.gws.plugins.amp.jslayout.AmpItemSet.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.gws.plugins.amp.jslayout.AmpItemSet} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.gws.plugins.amp.jslayout.AmpItemSet}\n */\nproto.gws.plugins.amp.jslayout.AmpItemSet.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setVed(value);\n      break;\n    case 2:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setEi(value);\n      break;\n    case 3:\n      var value \x3d new proto.gws.plugins.amp.jslayout.AmpItem;\n      reader.readMessage(value,proto.gws.plugins.amp.jslayout.AmpItem.deserializeBinaryFromReader);\n      msg.addItem(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.gws.plugins.amp.jslayout.AmpItemSet.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.gws.plugins.amp.jslayout.AmpItemSet.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.gws.plugins.amp.jslayout.AmpItemSet} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.gws.plugins.amp.jslayout.AmpItemSet.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 2));\n  if (f !\x3d null) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f \x3d message.getItemList();\n  if (f.length \x3e 0) {\n    writer.writeRepeatedMessage(\n      3,\n      f,\n      proto.gws.plugins.amp.jslayout.AmpItem.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional string ved \x3d 1;\n * @return {?string}\n */\nproto.gws.plugins.amp.jslayout.AmpItemSet.prototype.getVed \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?string|undefined} value */\nproto.gws.plugins.amp.jslayout.AmpItemSet.prototype.setVed \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.gws.plugins.amp.jslayout.AmpItemSet.prototype.clearVed \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.gws.plugins.amp.jslayout.AmpItemSet.prototype.hasVed \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * optional string ei \x3d 2;\n * @return {?string}\n */\nproto.gws.plugins.amp.jslayout.AmpItemSet.prototype.getEi \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 2));\n};\n\n\n/** @param {?string|undefined} value */\nproto.gws.plugins.amp.jslayout.AmpItemSet.prototype.setEi \x3d function(value) {\n  jspb.Message.setField(this, 2, value);\n};\n\n\nproto.gws.plugins.amp.jslayout.AmpItemSet.prototype.clearEi \x3d function() {\n  jspb.Message.setField(this, 2, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.gws.plugins.amp.jslayout.AmpItemSet.prototype.hasEi \x3d function() {\n  return jspb.Message.getField(this, 2) !\x3d null;\n};\n\n\n/**\n * repeated AmpItem item \x3d 3;\n * @return {!Array\x3c!proto.gws.plugins.amp.jslayout.AmpItem\x3e}\n */\nproto.gws.plugins.amp.jslayout.AmpItemSet.prototype.getItemList \x3d function() {\n  return /** @type{!Array\x3c!proto.gws.plugins.amp.jslayout.AmpItem\x3e} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.gws.plugins.amp.jslayout.AmpItem, 3));\n};\n\n\n/** @param {Array\x3c!proto.gws.plugins.amp.jslayout.AmpItem\x3e|undefined} value */\nproto.gws.plugins.amp.jslayout.AmpItemSet.prototype.setItemList \x3d function(value) {\n  jspb.Message.setRepeatedWrapperField(this, 3, value);\n};\n\n\n/**\n * @param {!proto.gws.plugins.amp.jslayout.AmpItem\x3d} opt_value\n * @param {number\x3d} opt_index\n * @return {!proto.gws.plugins.amp.jslayout.AmpItem}\n */\nproto.gws.plugins.amp.jslayout.AmpItemSet.prototype.addItem \x3d function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.gws.plugins.amp.jslayout.AmpItem, opt_index);\n};\n\n\nproto.gws.plugins.amp.jslayout.AmpItemSet.prototype.clearItemList \x3d function() {\n  this.setItemList([]);\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.gws.plugins.amp.jslayout.AmpItemSet}\n */\nproto.gws.plugins.amp.jslayout.AmpItemSet.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.gws.plugins.amp.jslayout.AmpItemSet, data);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array\x3d} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.gws.plugins.amp.jslayout.AmpItem \x3d function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.gws.plugins.amp.jslayout.AmpItem, jspb.Message);\nif (goog.DEBUG \x26\x26 !COMPILED) {\n  proto.gws.plugins.amp.jslayout.AmpItem.displayName \x3d \x27proto.gws.plugins.amp.jslayout.AmpItem\x27;\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_\x3cname\x3e, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean\x3d} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.gws.plugins.amp.jslayout.AmpItem.prototype.toObject \x3d function(opt_includeInstance) {\n  return proto.gws.plugins.amp.jslayout.AmpItem.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.gws.plugins.amp.jslayout.AmpItem} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.gws.plugins.amp.jslayout.AmpItem.toObject \x3d function(includeInstance, msg) {\n  var f, obj \x3d {\n    ved: jspb.Message.getField(msg, 1)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance \x3d msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.gws.plugins.amp.jslayout.AmpItem}\n */\nproto.gws.plugins.amp.jslayout.AmpItem.deserializeBinary \x3d function(bytes) {\n  var reader \x3d new jspb.BinaryReader(bytes);\n  var msg \x3d new proto.gws.plugins.amp.jslayout.AmpItem;\n  return proto.gws.plugins.amp.jslayout.AmpItem.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.gws.plugins.amp.jslayout.AmpItem} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.gws.plugins.amp.jslayout.AmpItem}\n */\nproto.gws.plugins.amp.jslayout.AmpItem.deserializeBinaryFromReader \x3d function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field \x3d reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value \x3d /** @type {string} */ (reader.readString());\n      msg.setVed(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.gws.plugins.amp.jslayout.AmpItem.prototype.serializeBinary \x3d function() {\n  var writer \x3d new jspb.BinaryWriter();\n  proto.gws.plugins.amp.jslayout.AmpItem.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.gws.plugins.amp.jslayout.AmpItem} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.gws.plugins.amp.jslayout.AmpItem.serializeBinaryToWriter \x3d function(message, writer) {\n  var f \x3d undefined;\n  f \x3d /** @type {?string} */ (jspb.Message.getField(message, 1));\n  if (f !\x3d null) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string ved \x3d 1;\n * @return {?string}\n */\nproto.gws.plugins.amp.jslayout.AmpItem.prototype.getVed \x3d function() {\n  return /** @type {?string} */ (jspb.Message.getField(this, 1));\n};\n\n\n/** @param {?string|undefined} value */\nproto.gws.plugins.amp.jslayout.AmpItem.prototype.setVed \x3d function(value) {\n  jspb.Message.setField(this, 1, value);\n};\n\n\nproto.gws.plugins.amp.jslayout.AmpItem.prototype.clearVed \x3d function() {\n  jspb.Message.setField(this, 1, undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.gws.plugins.amp.jslayout.AmpItem.prototype.hasVed \x3d function() {\n  return jspb.Message.getField(this, 1) !\x3d null;\n};\n\n\n/**\n * @param {string} data The serialized JSON data in JSPB wire format.\n * @return {!proto.gws.plugins.amp.jslayout.AmpItem}\n */\nproto.gws.plugins.amp.jslayout.AmpItem.deserialize \x3d function(data) {\n  return jspb.Message.deserialize(proto.gws.plugins.amp.jslayout.AmpItem, data);\n};\n\n\n\n//# sourceURL\x3dhttps://qs/java/com/google/gws/plugins/amp/jslayout/async_log.jspb.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/viewer_item_set.js";
eval("goog.provide(\x27gws.amp.ViewerItemSet\x27);\n\ngoog.require(\x27goog.Disposable\x27);\ngoog.require(\x27goog.Promise\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.dom\x27);\ngoog.require(\x27goog.dom.classlist\x27);\ngoog.require(\x27goog.labs.userAgent.platform\x27);\ngoog.require(\x27goog.math.Size\x27);\ngoog.require(\x27goog.style\x27);\ngoog.require(\x27gws.amp.AmpViewerCss\x27);\ngoog.require(\x27gws.amp.FrameManager\x27);\ngoog.require(\x27gws.amp.HeaderConfig\x27);\ngoog.require(\x27gws.amp.SingletonSlider\x27);\ngoog.require(\x27gws.amp.Slider\x27);\ngoog.require(\x27gws.amp.SliderProvider\x27);\ngoog.require(\x27gws.amp.ViewerContext\x27);\ngoog.require(\x27gws.amp.ViewerItem\x27);\ngoog.require(\x27gws.amp.config\x27);\ngoog.require(\x27gws.amp.history.UpdateUrlMode\x27);\ngoog.require(\x27gws.async.data\x27);\ngoog.require(\x27gws.async.data.Format\x27);\ngoog.require(\x27proto.gws.plugins.amp.jslayout.AmpItemSet\x27);\ngoog.require(\x27proto.gws.plugins.amp.jslayout.ViewerType\x27);\ngoog.require(\x27search.log.ve.GraftType\x27);\ngoog.require(\x27search.log.ve.interaction\x27);\ngoog.require(\x27search.task.Task\x27);\ngoog.require(\x27search.task.scheduler\x27);\ngoog.require(\x27wireless.events\x27);\n\ngoog.scope(function() {\nconst Graft \x3d goog.module.get(\x27search.log.ve.interaction\x27).Graft;\nconst GraftType \x3d goog.module.get(\x27search.log.ve.GraftType\x27);\nconst Task \x3d goog.module.get(\x27search.task.Task\x27);\nconst ViewerType \x3d proto.gws.plugins.amp.jslayout.ViewerType;\nconst config \x3d gws.amp.config;\nconst scheduler \x3d goog.module.get(\x27search.task.scheduler\x27);\nconst veInteraction \x3d goog.module.get(\x27search.log.ve.interaction\x27);\n\n\n/**\n * A jscontroller class to manage an AMP Viewer.\n * go/amp-viewer\n * @implements {Task}\n */\ngws.amp.ViewerItemSet \x3d goog.defineClass(goog.Disposable, {\n  /**\n   * @param {!gws.amp.model.ItemSet} itemSet\n   * @param {!gws.amp.ViewerContext} context\n   * @extends {goog.Disposable}\n   * @constructor\n   */\n  constructor: function(itemSet, context) {\n    gws.amp.ViewerItemSet.base(this, \x27constructor\x27);\n\n    /**\n     * Handles the animation/movement of the items.\n     * The slider is initially null, but is instantiated the first time an amp\n     * result from this set is opened with instantiateSliderDomIfNeeded().\n     * @private {?gws.amp.Slider}\n     */\n    this.slider_ \x3d null;\n\n    /**\n     * The item set model for this ViewerItemSet.\n     * @private {!gws.amp.model.ItemSet}\n     */\n    this.itemSet_ \x3d itemSet;\n\n    // When using LINK_VISIBLE preload strategy, we store the top offset of the\n    // first item in this item set and the bot offset of the last item in\n    // this item set to determine when this viewer item set has been scrolled\n    // into view.\n\n    /**\n     * @private {number}\n     */\n    this.topOffset_ \x3d -1;\n\n    /**\n     * @private {number}\n     */\n    this.botOffset_ \x3d -1;\n\n    /**\n     * Calculates offsets used for checking if the link is in the viewport. Also\n     * called each time by isInViewport.\n     */\n    this.calculateAndSetOffsets_();\n\n    /**\n     * The list of ViewerItems contained by this ViewerItemSet.\n     * @private {!Array\x3c!gws.amp.ViewerItem\x3e}\n     */\n    this.viewerItems_ \x3d [];\n\n    /**\n     * @private @const {!gws.amp.ViewerContext}\n     */\n    this.context_ \x3d context;\n\n    /**\n     * The number of items in this ViewerItemSet.\n     * @private {number}\n     */\n    this.numItems_ \x3d itemSet.getNumItems();\n\n    /**\n     * The header style object for this viewer item set.\n     * @private {!gws.amp.HeaderConfig}\n     */\n    this.headerConfig_ \x3d new gws.amp.HeaderConfig(this.numItems_);\n\n    /**\n     * Whether nearby hidden iframes should be removed when the user stops\n     * swiping.\n     * @private {boolean}\n     */\n    this.shouldRemoveHiddenIframes_ \x3d\n        config.getInstance().getRemoveIframesDelayMs() \x3e\x3d 0;\n\n    /**\n     * Whether to remove iframes when the viewer is closed.\n     * @private {boolean}\n     */\n    this.shouldRemoveIframesOnViewerClose_ \x3d\n        config.getInstance().getRemoveIframesOnViewerCloseDelayMs() \x3e\x3d 0 \x26\x26\n        !this.isStandalone_();\n\n    /** @private {?function()} */\n    this.boundStartSlideListener_ \x3d null;\n\n    /** @private {?function(!Event)} */\n    this.boundSlideMoveListener_ \x3d null;\n\n    /** @private {?function(!Event)} */\n    this.boundItemChangedListener_ \x3d null;\n\n    /** @private {?function(!Event)} */\n    this.boundSnappingFinishedListener_ \x3d null;\n\n    /**\n     * A promise that resolves once the selected AMP document has moved into the\n     * visible position in the Slider.\n     * @private {?function()}\n     */\n    this.selectedResolver_ \x3d null;\n\n    /**\n     * True if the Viewer is displayed. When hidden, the Viewer may ignore\n     * various events and may not load additional AMP documents.\n     * @private {boolean}\n     */\n    this.isShown_ \x3d false;\n\n    /**\n     * The size of the Viewer.\n     * @private {!goog.math.Size}\n     */\n    this.viewportSize_ \x3d goog.dom.getViewportSize();\n\n    /**\n     * The holder for the pending removal of iframes when the user stops swiping\n     * or the Viewer stays closed for a period of time. There is only one active\n     * callback in flight at any time, and this holds the timeout for that\n     * callback.\n     * Null if there is no pending timeout.\n     * @private {?number}\n     */\n    this.pendingRemovalHolder_ \x3d null;\n\n    /** @private {?goog.promise.Resolver} */\n    this.swipeResolver_ \x3d null;\n  },\n\n\n  /**\n   * Returns the current index of the selected item in the Viewer.\n   * @return {number} The selected item index or -1 if no slider exists.\n   */\n  getCurrentIndex() {\n    return this.slider_ ? this.slider_.getIndex() : -1;\n  },\n\n\n  /**\n   * Returns the container element for the ViewerItemSet\x27s Slider.\n   * This is also the touch target for the Slider.\n   * @return {!Element}\n   */\n  getSliderContainer() {\n    return this.slider_.getContainer();\n  },\n\n  /**\n   * Returns whether the item set is ineligible for prerendering. An item\n   * set is assumed ineligible for prerendering if its first item is\n   * ineligible for prerendering.\n   * @return {boolean}\n   */\n  getPrerenderIneligible() {\n    return this.itemSet_.getItems()[0].getPrerenderIneligible();\n  },\n\n  /**\n   * Calculates the page offsets for the first and last viewer items. Used for\n   * checks to see if items are in the viewport.\n   * @private\n   */\n  calculateAndSetOffsets_() {\n    const items \x3d this.itemSet_.getItems();\n    const firstItem \x3d items[0].getSrpLink();\n    const lastItem \x3d items[items.length - 1].getSrpLink();\n    if (firstItem \x26\x26 lastItem) {\n      this.topOffset_ \x3d goog.style.getPageOffsetTop(firstItem);\n      this.botOffset_ \x3d goog.style.getPageOffsetTop(lastItem) +\n          goog.style.getSize(lastItem).height;\n    }\n  },\n\n\n  /**\n   * Instantiates a SingletonSlider and attaches it to a preexisting iframe\n   * within the given sliderContainer.\n   * @param {!Element} sliderContainer The element containing the preexisting\n   * iframe.\n   */\n  instantiateSingletonSlider(sliderContainer) {\n    let iframe \x3d goog.asserts.assertElement(goog.dom.getElementByClass(\n        gws.amp.AmpViewerCss.Class.AMP_DOC, sliderContainer));\n    this.slider_ \x3d new gws.amp.SingletonSlider(sliderContainer);\n    const contentManager \x3d new gws.amp.FrameManager(\n        this.itemSet_.getItems()[0], this.context_, sliderContainer,\n        null /* tempOverlay */, this.headerConfig_,\n        this.itemSet_.getViewerGroupId(), iframe);\n    const viewerItem \x3d new gws.amp.ViewerItem(\n        contentManager, this.context_, sliderContainer, this.headerConfig_);\n    this.viewerItems_.push(viewerItem);\n    this.setDocumentLoadedHandlers_();\n  },\n\n\n  /**\n   * Instantiates the Slider and corresponding DOM for this ViewerItemSet\n   * if it does not yet exist.\n   * @param {!Element} sliderContainer The element to attach the Slider to.\n   */\n  instantiateSliderDomIfNeeded(sliderContainer) {\n    if (!this.slider_) {\n      // Delay grafting to allow any content requests to start first. This\n      // request is not on the critical path for anything user visible.\n      // TODO(b/35290468): There is likely a smarter way to schedule this. This\n      // can be reconsidered as part of a wider render scheduling improvement.\n      scheduler.setTimeout(() \x3d\x3e this.requestAsyncVeGraft_(), 100);\n      const originalNumItems \x3d this.itemSet_.getItems().length;\n      this.slider_ \x3d\n          gws.amp.SliderProvider.getInstance().createSlider(this.itemSet_);\n      goog.dom.classlist.add(\n          this.slider_.getContainer(), gws.amp.AmpViewerCss.Class.HIDDEN);\n      for (let i \x3d 0; i \x3c originalNumItems; i++) {\n        const item \x3d this.itemSet_.getItems()[i];\n        const itemContainer \x3d /** @type {!gws.amp.DynamicDomSlider} */\n            (this.slider_).getItemContainer(i);\n        const contentManager \x3d new gws.amp.FrameManager(\n            item, this.context_, itemContainer, null /* tempOverlay */,\n            this.headerConfig_, this.itemSet_.getViewerGroupId());\n        const viewerItem \x3d new gws.amp.ViewerItem(\n            contentManager, this.context_, itemContainer, this.headerConfig_);\n        this.viewerItems_.push(viewerItem);\n      }\n\n      this.initializeItems_();\n      this.setDocumentLoadedHandlers_();\n      this.addCarouselListeners_();\n      goog.dom.appendChild(sliderContainer, this.slider_.getContainer());\n      this.slider_.domReady();\n    }\n  },\n\n  /**\n   * Sends an async fetch request that causes a VE tree to be grafted for the\n   * newly created viewer item set and viewer items.  Then, parses out veds\n   * from the async response and attaches them to their corresponding items.\n   */\n  requestAsyncVeGraft_() {\n    const ampViewerVed \x3d this.context_.getViewerVed();\n    gws.async.data\n        .fetch(\n            \x27log_amp_item_set\x27, {\x27num_items\x27: this.numItems_},\n            gws.async.data.Format.JSPB, ampViewerVed)\n        .then(response \x3d\x3e {\n          const itemSetProto \x3d\n              new proto.gws.plugins.amp.jslayout.AmpItemSet(response);\n          this.itemSet_.setLogData(\n              goog.asserts.assertString(itemSetProto.getVed()),\n              goog.asserts.assertString(itemSetProto.getEi()));\n          const itemProtoList \x3d itemSetProto.getItemList();\n          for (let i \x3d 0; i \x3c itemProtoList.length; i++) {\n            const itemProto \x3d itemProtoList[i];\n            this.itemSet_.getItems()[i].setVed(\n                goog.asserts.assertString(itemProto.getVed()));\n          }\n        });\n  },\n\n\n  /**\n   * Cancels all callbacks in flight for removing iframes.\n   * @private\n   */\n  cancelPendingRemovalHolderTimeout_() {\n    if (this.pendingRemovalHolder_) {\n      // We attempt to cancel pending callbacks optimistically, but we cannot\n      // rely on this completely. See the comment inside\n      // setPendingRemovalHolderTimeout_().\n      scheduler.clearTimeout(this.pendingRemovalHolder_);\n      // Actually cancel all callbacks.\n      this.pendingRemovalHolder_ \x3d null;\n    }\n  },\n\n\n  /**\n   * Sets a new timeout for removing iframes from the DOM. This function\n   * maintains an invariant such that only one callback can ever be in flight.\n   * @param {!Function} fn A callback function for removing iframes\n   * @param {number} delayMs The delay in MS for the setTimeout call.\n   * @private\n   */\n  setPendingRemovalHolderTimeout_(fn, delayMs) {\n    this.cancelPendingRemovalHolderTimeout_();\n    const holder \x3d scheduler.setTimeout(() \x3d\x3e {\n      // The following check rejects all but the current callback. It is\n      // necessary because search.task.scheduler.setTimeout does not run the\n      // callback with the timeout and merely schedules it. As a result,\n      // search.task.scheduler.clearTimeout does not have the same\n      // developer-facing behavior as window.clearTimeout. See\n      // http://g/gws-javascript-users/mj6gkfSItiE/ZmN85WiSHAAJ\n      // for further details.\n      if (this.pendingRemovalHolder_ !\x3d holder) {\n        return;\n      }\n      this.pendingRemovalHolder_ \x3d null;\n      fn.call(this);\n      // Do not set this.pendingRemovalHolder_ to null here because the above\n      // function may call setPendingRemovalHolderTimeout_().\n    }, delayMs);\n    this.pendingRemovalHolder_ \x3d holder;\n  },\n\n\n  /**\n   * Adds Slider event listeners.\n   * @private\n   */\n  addCarouselListeners_() {\n    const container \x3d this.slider_.getContainer();\n    if (!container) {\n      return;  // No element to add event listeners to\n    }\n\n    // Add the event listeners\n    if (!this.boundStartSlideListener_) {\n      // START_SLIDE\n      this.boundStartSlideListener_ \x3d goog.bind(this.startSlideHandler_, this);\n      wireless.events.observe(\n          container, gws.amp.Slider.EventType.START_SLIDE,\n          this.boundStartSlideListener_);\n    }\n    if (!this.boundSlideMoveListener_) {\n      // SLIDE_MOVE\n      this.boundSlideMoveListener_ \x3d goog.bind(this.slideMoveHandler_, this);\n      wireless.events.observe(\n          container, gws.amp.Slider.EventType.SLIDE_MOVE,\n          this.boundSlideMoveListener_);\n    }\n    if (!this.boundItemChangedListener_) {\n      // ITEM_CHANGED\n      this.boundItemChangedListener_ \x3d\n          goog.bind(this.itemChangedHandler_, this);\n      wireless.events.observe(\n          container, gws.amp.Slider.EventType.ITEM_CHANGED,\n          this.boundItemChangedListener_);\n    }\n    if (!this.boundSnappingFinishedListener_) {\n      // SNAPPING_FINISHED\n      this.boundSnappingFinishedListener_ \x3d\n          goog.bind(this.snappingFinishedHandler_, this);\n      wireless.events.observe(\n          container, gws.amp.Slider.EventType.SNAPPING_FINISHED,\n          this.boundSnappingFinishedListener_);\n    }\n  },\n\n\n  /**\n   * Removes Slider event listeners.\n   * @private\n   */\n  removeCarouselListeners_() {\n    if (!this.slider_) {\n      return;  // Can\x27t remove items if slider is not set.\n    }\n    const container \x3d this.slider_.getContainer();\n    if (!container) {\n      return;  // No element to remove event listeners from\n    }\n\n    // Remove the event listeners\n    if (this.boundStartSlideListener_) {\n      // START_SLIDE\n      wireless.events.unobserve(\n          container, gws.amp.Slider.EventType.START_SLIDE,\n          this.boundStartSlideListener_);\n      this.boundStartSlideListener_ \x3d null;\n    }\n    if (this.boundSlideMoveListener_) {\n      // SLIDE_MOVE\n      wireless.events.unobserve(\n          container, gws.amp.Slider.EventType.SLIDE_MOVE,\n          this.boundSlideMoveListener_);\n      this.boundSlideMoveListener_ \x3d null;\n    }\n    if (this.boundItemChangedListener_) {\n      // ITEM_CHANGED\n      wireless.events.unobserve(\n          container, gws.amp.Slider.EventType.ITEM_CHANGED,\n          this.boundItemChangedListener_);\n      this.boundItemChangedListener_ \x3d null;\n    }\n    if (this.boundSnappingFinishedListener_) {\n      // SNAPPING_FINISHED\n      wireless.events.unobserve(\n          container, gws.amp.Slider.EventType.SNAPPING_FINISHED,\n          this.boundSnappingFinishedListener_);\n      this.boundSnappingFinishedListener_ \x3d null;\n    }\n  },\n\n\n  /**\n   * Removes nearby hidden iframes. It should be called after a\n   * WILL_LIKELY_UNLOAD message was already sent to each iframe that we are\n   * going to remove.\n   * @private\n   */\n  removeHiddenIframes_() {\n    const index \x3d this.getCurrentIndex();\n    const offset \x3d config.getInstance().getRemoveIframesOffset();\n    for (let i \x3d 0; i \x3c this.viewerItems_.length; i++) {\n      if (i \x3c index - offset || i \x3e index + offset) {\n        this.viewerItems_[i].removeIframe();\n      }\n    }\n  },\n\n\n  /**\n   * Calls SendWillLikelyUnload for each nearby hidden iframe (based on the\n   * offset configuration) and starts a new short timer for removing those\n   * iframes.  It is being called when the user didn\x27t swipe lately\n   * (configurable) between docs.\n   * @private\n   */\n  sendWillLikelyUnloadOnSwiping_() {\n    const index \x3d this.getCurrentIndex();\n    const offset \x3d config.getInstance().getRemoveIframesOffset();\n    for (let i \x3d 0; i \x3c this.viewerItems_.length; i++) {\n      if (i \x3c index - offset || i \x3e index + offset) {\n        this.viewerItems_[i].sendWillLikelyUnload();\n      }\n    }\n    this.setPendingRemovalHolderTimeout_(this.removeHiddenIframes_, 100);\n  },\n\n\n  /**\n   * Removes all iframes. It should be called after a WILL_LIKELY_UNLOAD\n   * message is sent to each iframe that we are going to remove.\n   * @private\n   */\n  removeAllIframes_() {\n    for (const viewerItem of this.viewerItems_) {\n      viewerItem.removeIframe();\n    }\n  },\n\n\n  /**\n   * Calls SendWillLikelyUnload for all Iframes and starts a new short timer for\n   * removing those Iframes.  It is called after a (configurable) delay post\n   * viewer close.\n   * @private\n   */\n  sendWillLikelyUnloadOnViewerClose_() {\n    for (const viewerItem of this.viewerItems_) {\n      viewerItem.sendWillLikelyUnload();\n    }\n    this.setPendingRemovalHolderTimeout_(this.removeAllIframes_, 100);\n  },\n\n\n  /**\n   * Sets initial state on each item that require all controllers to be loaded.\n   * @private\n   */\n  initializeItems_() {\n    this.resizeIframes();\n  },\n\n\n  /**\n   * Provides a callback to each item so that it can update the title in case it\n   * loads late.\n   * @private\n   */\n  setDocumentLoadedHandlers_() {\n    // helper function to capture the index value within a handler.\n    const handlermaker \x3d index \x3d\x3e {\n      return () \x3d\x3e {\n        // We only need to handle the case where the document that is loaded is\n        // the current one for title updates.  In other cases the item change\n        // logic will save us.\n        if (this.getCurrentIndex() \x3d\x3d index \x26\x26 this.isShown()) {\n          this.updateTitle_(index);\n        }\n        this.refreshUrl_(index);\n      };\n    };\n    for (let i \x3d 0; i \x3c this.viewerItems_.length; i++) {\n      this.viewerItems_[i].setDocumentLoadedViewerHandler(handlermaker(i));\n    }\n  },\n\n\n  /**\n   * Gets an item from the viewer item set\n   * @param {number} index The index to select\n   * @return {!gws.amp.ViewerItem} The item at the given index.\n   */\n  getItem(index) {\n    return this.viewerItems_[index];\n  },\n\n  /**\n   * Returns true if the serp links associated with this viewer item set are\n   * in the current viewport.\n   * @return {boolean}\n   */\n  isInViewport() {\n    // TODO(b/73652862): Update this to use IntersectionObserver.\n    this.calculateAndSetOffsets_();\n    const pageTop \x3d goog.dom.getDocumentScroll().y;\n    const pageBot \x3d pageTop + this.viewportSize_.height;\n    return (\n        this.topOffset_ \x3c pageBot \x26\x26 this.botOffset_ \x3e pageTop \x26\x26\n        this.isLinkVisible_());\n  },\n\n  /**\n   * Returns true if the AMP link is visible. Determined by the computed\n   * offsetWidth of the first item. If it is 0, then we can assume that\n   * the AMP link is invisible.\n   * @return {boolean}\n   * @private\n   */\n  isLinkVisible_() {\n    const items \x3d this.itemSet_.getItems();\n    const firstItem \x3d items[0].getSrpLink();\n    if (firstItem) {\n      const width \x3d firstItem.getBoundingClientRect().width;\n      return width !\x3d 0;\n    }\n    return false;\n  },\n\n\n  /**\n   * Resizes iframes to fit the viewport.\n   */\n  resizeIframes() {\n    this.viewportSize_ \x3d this.getViewportSize_();\n    const {width, height} \x3d this.viewportSize_;\n    for (const viewerItem of this.viewerItems_) {\n      viewerItem.setDimensions(width, height);\n    }\n  },\n\n\n  /**\n   * @return {!goog.math.Size} The viewport size\n   * @private\n   */\n  getViewportSize_() {\n    // goog.dom.getViewportSize() does not correctly account for the address bar\n    // on mobile browsers so use window.innerHeight instead which will give a\n    // value that adjusts for the present of the address bar. See b/32972167\n    const win \x3d goog.dom.getWindow();\n    const size \x3d goog.dom.getViewportSize(win);\n    const width \x3d size.width;\n    let height \x3d win.innerHeight;\n    // This preserves iOS behavior where the the viewport height is the minimum\n    // height of the window when the address bar and controls are shown. When\n    // the Viewer opens, the address bar is always shown. See:\n    // http://b/32972167#comment9\n    // If the window height was used instead of the viewport height, then the\n    // address bar would not be shown and the back button would be inaccessible.\n    // Continue to use the viewport height so that this does not happen.\n    // Also, when the soft keyboard is shown on Chrome for iOS the innerHeight\n    // is changed.\n    // Also also, when the viewport is zoomed  the innerWidth and innerHeight\n    // are both changed (b/35316125).\n    if (goog.labs.userAgent.platform.isIos()) {\n      height \x3d size.height;\n    }\n    return new goog.math.Size(width, height);\n  },\n\n\n  getWidth() {\n    return this.viewportSize_.width;\n  },\n\n\n  getHeight() {\n    return this.viewportSize_.height;\n  },\n\n\n  /**\n   * @return {boolean} Whether the viewer is Standalone i.e., of either type\n   *     SHARED or EMBEDDED.\n   * @private\n   */\n  isStandalone_() {\n    return (\n        config.getInstance().getViewerType() \x3d\x3d ViewerType.EMBEDDED ||\n        config.getInstance().getViewerType() \x3d\x3d ViewerType.SHARED);\n  },\n\n\n  /**\n   * Preload maxNumItemsToPreloadInSerp iframes if the viewer is hidden in the\n   * background e.g., hidden in the Serp of embedded in a Chrome Tab ot yet\n   * displayed.  If the viewer is already shown, do nothing because the\n   * currently selected item or nearby items will be rendered or prerendered\n   * based on user interaction instead, via setShown()\n   */\n  preloadIframesIfNotShown() {\n    if (!this.isShown()) {\n      const maxtoPreload \x3d config.getInstance().getMaxNumItemsToPreloadInSerp();\n      const shouldLoadAll \x3d\n          maxtoPreload \x3c 0 || maxtoPreload \x3e\x3d this.viewerItems_.length;\n      const numItemsToLoad \x3d\n          shouldLoadAll ? this.viewerItems_.length : maxtoPreload;\n      for (let i \x3d 0; i \x3c numItemsToLoad; i++) {\n        this.viewerItems_[i].prerenderIfEligible();\n      }\n    }\n  },\n\n\n  /** @override */\n  play() {\n    this.swipeResolver_ \x3d goog.Promise.withResolver();\n    return this.swipeResolver_.promise;\n  },\n\n\n  /** @override */\n  finish: goog.nullFunction,\n\n\n  /** @override */\n  getDeadline() {\n    // We need to hold the scheduler lock while the user is dragging, which\n    // technically could go on forever.\n    return Infinity;\n  },\n\n\n  /**\n   * Handles the beginning of a slide from Slider. Sets the styles of the\n   * two items adjacent to the visible item.\n   * @private\n   */\n  startSlideHandler_() {\n    if (!this.isShown()) {\n      return;\n    }\n\n    const currentIndex \x3d this.getCurrentIndex();\n    this.viewerItems_[currentIndex].setScrollLock(true);\n    this.viewerItems_[currentIndex].pause();\n    this.viewerItems_[currentIndex].hideLoadingIcon();\n\n    // Starts the swipe task. play() is called and execution of all scheduled\n    // tasks are paused until the returned promise of play() is resolved.\n    scheduler.playNow(this);\n  },\n\n\n  /**\n   * Handles a slide movement (not necessarily the beginning) from Slider.\n   * This allows us to know the delta and thus direction of the slide. When\n   * prefetching nearby items in advance is suppressed, this prerenders the\n   * next or previous item at the last minute as it slides in into the viewport.\n   * Prerender will log a prefetch because although the item is most likely\n   * going to be shown right after, the user may not complete the swipe to\n   * the new item, and logging a prefetch allows us to identify these cases\n   * where the item is then not actually seen (i.e., not logged as shown).\n   * @param {!Event} e The slide move event.\n   * @private\n   */\n  slideMoveHandler_(e) {\n    if (!this.isShown()) {\n      return;\n    }\n\n    const eventData \x3d /** {!gws.amp.Slider.SlideMoveEvent} */ (e.extraArg);\n    const deltaX \x3d eventData.deltaX;\n    if (deltaX \x3d\x3d 0) {\n      return;\n    }\n\n    const currentIndex \x3d this.getCurrentIndex();\n    this.viewerItems_[currentIndex].setSlideOutStyle(deltaX);\n    // deltaX \x3c 0 means sliding right (left in RTL) towards the next item and\n    // deltaX \x3e 0 means sliding left (right in RTL) towards the previous one.\n    const nextIndex \x3d deltaX \x3c 0 ? currentIndex + 1 : currentIndex - 1;\n    const nextItem \x3d this.viewerItems_[nextIndex];\n\n    if (nextItem) {\n      this.adjustHeaderPosition_(nextItem);\n      nextItem.maybeFinishAnimation();\n    }\n\n    // If we don\x27t prefetch nearby items in advance, we need to make sure\n    // to prefetch them as soon as they enter the viewport.\n    if (config.getInstance().getSuppressPrefetchingNearbyViewerItems() \x26\x26\n        nextItem) {\n      nextItem.prerender();\n    }\n  },\n\n\n  /**\n   * Handles the item changed event from the Slider which triggers\n   * when a new item is selected and performs the corresponding animation.\n   * This will be triggered after an item has been clicked on or after the\n   * viewer has been swiped. It updates the header and handles swipe animations.\n   * The rest of the selection logic continues in snappingFinishedHandler_.\n   * @param {!Event} e The item changed event.\n   * @private\n   */\n  itemChangedHandler_(e) {\n    const eventData \x3d\n        /** {!gws.amp.Slider.SnappingProgressEvent} */ (e.extraArg);\n    /** @type {number} */\n    const oldIndex \x3d eventData.oldItemIndex;\n    /** @type {number} */\n    const newIndex \x3d eventData.newItemIndex;\n\n    const newViewerItem \x3d this.viewerItems_[newIndex];\n    this.context_.getHeaderManager().getAnimator().itemChanged({\n      itemData: {\n        index: newIndex,\n        headerColor: newViewerItem.getModel().getAmpDocThemeColor(),\n        publisherDomain: newViewerItem.getDomainTitle(),\n      }\n    });\n\n    // Update the title and bubbles at the time the finger is released during a\n    // swipe right before the final snapping. We update the title regardless of\n    // whether the index has changed to ensure the title is properly set for\n    // clicks on the first item in an item set.\n    this.updateTitle_(newIndex);\n    if (!this.isShown()) {\n      // Viewer is being opened after a click, no swiping animation required.\n      return;\n    }\n    // Handle our swipe animations. Note that Slider handles the snapping\n    // animation of the selected item instead.\n    if (newIndex \x3d\x3d oldIndex) {\n      // Animate the previous item back.\n      this.viewerItems_[oldIndex].playSlideBackAnimation();\n    } else {\n      // Animate previous item out.\n      this.viewerItems_[oldIndex].playSlideOutAnimation();\n    }\n  },\n\n\n  /**\n   * Handles the snapping finished event from the Slider which triggers at the\n   * very end of item swipes or when the viewer is being opened on click. This\n   * handler triggers regardless of whether the selected item has changed.\n   * On swipe, unlocks the scrolling, shows the selected item, logs visibility\n   * changes, and preloads next and previous. Swipe handling completes here.\n   * Click handling resumes in viewerController.selectAmp and setShown.\n   * TODO(flaviop, gbick): Remove duplication between this and setShown making\n   * sure to consolidate the visibility logging logic.\n   * @param {!Event} e The snapping finished event.\n   * @private\n   */\n  snappingFinishedHandler_(e) {\n    // If the viewer is already shown, handle the end of a swipe. Otherwise, the\n    // viewer is in the process of being opened on click.\n    const isSwipe \x3d this.isShown();\n    const eventData \x3d\n        /** {!gws.amp.Slider.SnappingProgressEvent} */ (e.extraArg);\n    const {\n      oldItemIndex: oldIndex,\n      newItemIndex: newIndex,\n    } \x3d eventData;\n    const itemChanged \x3d newIndex !\x3d oldIndex;\n    const oldItem \x3d this.viewerItems_[oldIndex];\n    const newItem \x3d this.viewerItems_[newIndex];\n\n    if (isSwipe) {  // Handle a swipe.\n      oldItem.setScrollLock(false);\n      if (itemChanged) {\n        newItem.showIconIfLoading();\n        this.prepareToSwitch_(\n                newItem, oldItem, gws.amp.history.UpdateUrlMode.REPLACE)\n            .then(() \x3d\x3e {\n              newItem.show();\n              oldItem.hide();\n            });\n        this.logSwipeVisibilityChange_(newItem, oldItem);\n        this.prerenderNearbyItems_(newIndex);\n\n        // Focus the iFrame so that screen readers know the viewer has changed\n        // items.\n        newItem.focus();\n      } else {\n        // Change visibility from paused to visible again.\n        oldItem.visible();\n        this.adjustHeaderPosition_(oldItem);\n      }\n    }\n\n    // On both click and swipe, possibly remove hidden items visited before.\n    // We don\x27t want to remove hidden iframes if it\x27s the same index.\n    if (itemChanged \x26\x26 this.shouldRemoveHiddenIframes_) {\n      this.setPendingRemovalHolderTimeout_(\n          this.sendWillLikelyUnloadOnSwiping_,\n          config.getInstance().getRemoveIframesDelayMs());\n    }\n\n    if (this.selectedResolver_) {\n      // Call the resolver to notify that the selected item has moved into view.\n      this.selectedResolver_();\n      this.selectedResolver_ \x3d null;\n    }\n\n    // Resume execution after a brief pause.\n    setTimeout(() \x3d\x3e {\n      if (this.swipeResolver_) {\n        this.swipeResolver_.resolve();\n        this.swipeResolver_ \x3d null;\n      }\n    }, 50);\n  },\n\n\n  /**\n   * Finds and displays the AMP corresponding to the index.  When called, this\n   * function selects the appropriate item in the slider which will fire an\n   * ITEM_CHANGED event on completion.  The flow of control will continue in\n   * itemChangedHandler_ followed by snappingFinishedHandler_.\n   * @param {number} index The index of the AMP to be loaded.\n   * @return {!goog.Promise} A promise that resolves once the selected AMP has\n   *     moved into the visible position in the Slider.\n   */\n  selectAmp(index) {\n    const promise \x3d new goog.Promise(resolve \x3d\x3e {\n      this.selectedResolver_ \x3d resolve;\n    });\n    this.slider_.setIndex(index);\n    return promise;\n  },\n\n\n  /**\n   * Checks if previous and next items need to be preloaded/pre-rendered.\n   * No need to check for the currently selected one because openAmp_ should\n   * have taken care of that already and shown() does additional sanity checking\n   * in case of unexpected errors. We always try to prerender both next and\n   * previous because we may not know what the user will try to see next.\n   * @param {number} index The current item\x27s index.\n   * @private\n   */\n  prerenderNearbyItems_(index) {\n    if (config.getInstance().getSuppressPrefetchingNearbyViewerItems()) {\n      return;\n    }\n    if (this.viewerItems_[index - 1]) {\n      this.viewerItems_[index - 1].prerender();\n    }\n    if (this.viewerItems_[index + 1]) {\n      this.viewerItems_[index + 1].prerender();\n    }\n  },\n\n\n  /**\n   * Forces the header to animate in or out based on whether the currently shown\n   * item has its header shown. This is used to return the header position to\n   * its prior state when a swipe is cancelled.\n   * @param {!gws.amp.ViewerItem} item The viewer item being shown.\n   * @private\n   */\n  adjustHeaderPosition_(item) {\n    if (item.isHeaderShown()) {\n      // We do not request the item to change its header state because it\n      // should already be correct as it was out of view.\n      this.context_.getHeaderManager().show();\n    } else {\n      // We do not request the item to change its header state because it\n      // should already be correct as it was out of view.\n      this.context_.getHeaderManager().hide();\n    }\n  },\n\n  /**\n   * Updates the viewer\x27s title domain to identify the current active item.\n   * @param {number} index The current item\x27s index.\n   * @private\n   */\n  updateTitle_(index) {\n    const viewerItem \x3d this.viewerItems_[index];\n    const domainTitle \x3d viewerItem.getDomainTitle();\n    const ampTitle \x3d viewerItem.getAmpTitle();\n    const publisherUrl \x3d viewerItem.getAmpUrl().getOriginalUrl();\n    if (this.headerConfig_.shouldShowTitle()) {\n      const canonicalUrl \x3d viewerItem.getCanonicalUrl();\n      this.context_.getHeaderManager().updateCanonicalUrl(\n          publisherUrl, canonicalUrl);\n    }\n    this.setWindowTitle_(domainTitle, ampTitle, publisherUrl);\n  },\n\n\n  /**\n   * @return {boolean} True if the viewer is currently shown to the user.\n   */\n  isShown() {\n    return this.isShown_;\n  },\n\n\n  /**\n   * Enqueues the CSI timer to send the tick once the current item has finished\n   * loading\n   * @param {!gws.amp.csi.Reporter} csi A CSI timer to log when the\n   *     selected AMP has finished loading.\n   */\n  setCsiReporter(csi) {\n    this.getCurrentViewerItem().setCsiReporter(csi);\n  },\n\n  /**\n   * Sets the Viewer as shown. This ensures that the selected item in the\n   * Slider is actually made visible.\n   */\n  setShown() {\n    if (!this.isShown()) {\n      this.isShown_ \x3d true;\n      this.resizeIframes();\n      goog.dom.classlist.remove(\n          this.slider_.getContainer(), gws.amp.AmpViewerCss.Class.HIDDEN);\n\n      this.cancelPendingRemovalHolderTimeout_();\n      // After the animation completes, show and focus the iframe.\n      const index \x3d this.getCurrentIndex();\n      const item \x3d this.viewerItems_[index];\n      // This has to be done now that we know the viewer is certainly\n      // open.\n      // TODO(b/33964400): Actually, we currently call setShown from selectAmp_\n      // in ViewerController before we know the viewer is open (as well as\n      // calling it from FullPageViewerController once we know the viewer is\n      // open). We should remove one of those calls.\n      item.show(true);\n      item.restoreScrollPosition();\n      this.logViewerVisibilityChange_(item, GraftType.SHOW);\n      item.showIconIfLoading();\n      item.focus();\n      this.prerenderNearbyItems_(index);\n    }\n  },\n\n\n  /**\n   * Sets the item set as hidden.\n   */\n  setHidden() {\n    this.isShown_ \x3d false;\n    goog.dom.classlist.add(\n        this.slider_.getContainer(), gws.amp.AmpViewerCss.Class.HIDDEN);\n\n    const index \x3d this.getCurrentIndex();\n    const item \x3d this.viewerItems_[index];\n\n    // The item must be explicitly hidden to stop video playback.\n    item.hide();\n    this.logViewerVisibilityChange_(item, GraftType.HIDE);\n\n    this.setInactive();\n  },\n\n\n  /**\n   * Remove any resources not necessary while this item set is inactive. This\n   * is done to avoid hanging onto resources longer than necessary, thereby\n   * leaking memory.\n   */\n  setInactive() {\n    if (this.shouldRemoveIframesOnViewerClose_) {\n      this.setPendingRemovalHolderTimeout_(\n          this.sendWillLikelyUnloadOnViewerClose_,\n          config.getInstance().getRemoveIframesOnViewerCloseDelayMs());\n    }\n  },\n\n\n  /**\n   * Logs the viewer being opened or closed. When we open or close the\n   * viewer,\n   * we log the visiblity change of the current item as well as the slider.\n   * We do not set a a trigger element, as on open, the clicked element will\n   * already have been clicktracked, and on close there is no triggering\n   * element.\n   * @param {!gws.amp.ViewerItem} item The currently selected item\n   * @param {GraftType} shown SHOW if the viewer is being opened. HIDE if the\n   * viewer is being closed.\n   */\n  logViewerVisibilityChange_(item, shown) {\n    const itemContainer \x3d item.getItemContainer();\n    // We wait on the promise to getVed to ensure that the itemContainer\n    // has\n    // a ved set when we pass it into logVisibilityChange.\n    item.getVed().then(ved \x3d\x3e {\n      veInteraction.logGrafts([\n        new Graft(itemContainer, shown),\n        new Graft(this.slider_.getContainer(), shown)\n      ]);\n    });\n  },\n\n\n  /**\n   * Logs a swipe on the viewer.  On swipe, the new item is logged visible,\n   * the\n   * new item is logged hidden, and we set the slider as the trigger\n   * element.\n   * We do not log this trigger element if the frame manager specifies not\n   * to\n   * e.g. for exploration.\n   * @param {!gws.amp.ViewerItem} newItem The item being swiped into view\n   * @param {!gws.amp.ViewerItem} oldItem The item being swiped out of view\n   */\n  logSwipeVisibilityChange_(newItem, oldItem) {\n    const logDataPromise \x3d this.itemSet_.getLogData();\n    const newVedPromise \x3d newItem.getVed();\n    const oldVedPromise \x3d oldItem.getVed();\n    goog.Promise.all([newVedPromise, oldVedPromise, logDataPromise])\n        .then(([vedValueNew, vedValueOld, logDataValue]) \x3d\x3e {\n          const grafts \x3d [\n            new Graft(newItem.getItemContainer(), GraftType.SHOW),\n            new Graft(oldItem.getItemContainer(), GraftType.HIDE)\n          ];\n          veInteraction.logGrafts(grafts, {\n            triggerElement: this.slider_.getContainer(),\n            data: {url: newItem.getAmpUrl().getOriginalUrl()}\n          });\n        });\n  },\n\n\n  /**\n   * @return {?gws.amp.ViewerItem} The currently active ViewerItem or null if no\n   *     item is selected.\n   */\n  getCurrentViewerItem() {\n    return this.getCurrentIndex() \x3c 0 ?\n        null :\n        this.viewerItems_[this.getCurrentIndex()];\n  },\n\n\n  /**\n   * Returns the index of the item with the given url if it is present\n   * in the viewer item set.  We search itemSet_ instead of viewerItems_ because\n   * viewerItems_ may not have been instantiated when this function is called.\n   * @param {string} url The url to search for\n   * @return {?number} The index of the viewer item\n   */\n  getIndexForUrl(url) {\n    const items \x3d this.itemSet_.getItems();\n    for (let i \x3d 0; i \x3c items.length; i++) {\n      if (items[i].getAmpUrl().getOriginalUrl() \x3d\x3d url) {\n        return i;\n      }\n    }\n    return null;\n  },\n\n  /**\n   * Prepares the viewer item set for hiding. This removes all the URL states.\n   * @return {!goog.Promise\x3cundefined\x3e}\n   */\n  prepareForHide() {\n    const currentViewerItem \x3d this.viewerItems_[this.getCurrentIndex()];\n    return this.prepareToSwitch_(null, currentViewerItem);\n  },\n\n  /**\n   * Updates the URL to contain the current active item\x27s shareable link.\n   * Updating the URL is used for whenever the AMP viewer opens (or explores)\n   * and is a noop if the amp url already matches. It will already match if\n   * in some cases (web SRP, embedded).\n   * @param {!gws.amp.history.UpdateUrlMode} updateUrlMode Whether to replace or\n   *     push the current URL.\n   * @return {!goog.Promise\x3cundefined\x3e}\n   */\n  prepareForShow(updateUrlMode) {\n    const currentViewerItem \x3d this.viewerItems_[this.getCurrentIndex()];\n    return this.prepareToSwitch_(\n        currentViewerItem, null, updateUrlMode, /* adjustHeader */ true);\n  },\n\n  /**\n   * Updates the URL for the AMP item at the given index.\n   * @param {?gws.amp.ViewerItem} newViewerItem The index of the new item.\n   * @param {?gws.amp.ViewerItem} oldViewerItem The index of the old item. Null\n   *     means we are swapping out the same object (for instance, opening the\n   *     page).\n   * @param {!gws.amp.history.UpdateUrlMode\x3d} updateUrlMode Whether to replace\n   *     or push the new URL.\n   * @param {boolean\x3d} adjustHeader Whether to adjust the header.\n   *     the new URL.\n   * @return {!goog.Promise\x3cundefined\x3e} A promise that resolves once the URL has\n   *     been updated.\n   */\n  prepareToSwitch_(\n      newViewerItem, oldViewerItem,\n      updateUrlMode \x3d gws.amp.history.UpdateUrlMode.REPLACE,\n      adjustHeader \x3d false) {\n    return new goog\n        .Promise(resolve \x3d\x3e {\n          if (oldViewerItem) {\n            oldViewerItem.prepareForHide().then(resolve);\n          } else {\n            resolve();\n          }\n        })\n        .then(() \x3d\x3e {\n          goog.asserts.assert(goog.isDef(updateUrlMode));\n          return newViewerItem ?\n              newViewerItem.prepareForShow(updateUrlMode, adjustHeader) :\n              goog.Promise.resolve();\n        });\n  },\n\n  /**\n   * Refreshes the URL to reflect changes to any hash parameters associated with\n   * an AMP item.\n   * @param {number} index The index of the item.\n   * @return {!goog.Promise} A promise that resolves once the URL has been\n   *     refreshed.\n   */\n  refreshUrl_(index) {\n    const contentManager \x3d this.viewerItems_[index].getContentManager();\n    return this.context_.getWindowManipulator().refreshUrl(contentManager);\n  },\n\n\n  /**\n   * Sets the title for display in the header.\n   * @param {string} domainTitle The domain string to use for display purposes.\n   *   May be formatted in certain circumstances, such as by being prefixed\n   *   with \x22From\x22 in AGSA.\n   * @param {string} ampTitle The title of the AMP document.\n   * @param {string} publisherUrl The AMP document URL.\n   * @private\n   */\n  setWindowTitle_(domainTitle, ampTitle, publisherUrl) {\n    this.context_.getWindowManipulator().setTitle(\n        domainTitle, ampTitle, publisherUrl);\n  },\n\n  /**\n   * Sets header display as appropriate for this viewer item set by\n   * adjusting visibility and number of bubbles.\n   */\n  claimHeader() {\n    this.context_.getHeaderManager().updateHeader(this.headerConfig_);\n  },\n\n  /**\n   * Cancels any in progress swipe gesture and snaps to the currently selected\n   * item.\n   */\n  cancelSwipe() {\n    this.slider_.cancelSwipe();\n  },\n\n  /** @override */\n  disposeInternal() {\n    this.removeCarouselListeners_();\n    if (this.slider_) {\n      goog.dom.removeNode(this.slider_.getContainer());\n    }\n    gws.amp.ViewerItemSet.base(this, \x27disposeInternal\x27);\n  }\n});  // goog.defineClass\n});  // goog.scope\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/viewer_item_set.js\n");

$googDebugFname=undefined;
var $googDebugFname="javascript/amp/messaging/domain_based_origin_verifier.js";
goog.loadModule("goog.module(\x27amp.messaging.DomainBasedOriginVerifier\x27);\ngoog.module.declareLegacyNamespace();\n\nconst OriginVerifier \x3d goog.require(\x27amp.messaging.OriginVerifier\x27);\nconst constants \x3d goog.require(\x27amp.constants\x27);\n\nconst DOMAIN_ESCAPE_RE \x3d /\\./g;\n\n/**\n * This class verifies that an origin is on an allowed domain. The scheme must\n * be http or https. Subdomains and all ports are consider valid. No paths or\n * query parameters are allowed.\n * @final\n * @implements {OriginVerifier}\n */\nclass DomainBasedOriginVerifier {\n  /**\n   * Creates a default origin verifier that verifies the origin of the AMP\n   * document is from an AMP cache domain.\n   * @return {!OriginVerifier}\n   */\n  static createAmpCacheDomainOriginVerifier() {\n    const domains \x3d [constants.CDN_DOMAIN];\n\n    return new DomainBasedOriginVerifier(domains);\n  }\n\n\n  /**\n   * @param {!Array\x3cstring\x3e} domains The list of allowed domains. If `isRegex`\n   *     is `false`, the domains may not contain any RegExp special characters\n   *     other than the period `.`. Domains must come from a trusted source.\n   * @param {boolean\x3d} isRegex If `true`, treat domains as a regex and do not\n   *     escape it.\n   */\n  constructor(domains, isRegex \x3d false) {\n    // Compile all the domains into a single regex.\n    const reDomains \x3d isRegex ?\n        domains :\n        domains.map((domain) \x3d\x3e domain.replace(DOMAIN_ESCAPE_RE, \x27\\\\.\x27));\n    /** @private @const {!RegExp} */\n    this.validRegex_ \x3d new RegExp(\n        `^https?://([^/#?@]+\\\\.)?(${reDomains.join(\x27|\x27)})(:\\\\d+)?$`, \x27i\x27);\n  }\n\n  /** @override */\n  verify(origin) {\n    // A full string match is expected so the starting index must be 0.\n    return origin.search(this.validRegex_) \x3d\x3d 0;\n  }\n}\n\nexports \x3d DomainBasedOriginVerifier;\n\n//# sourceURL\x3dhttps://qs/javascript/amp/messaging/domain_based_origin_verifier.js\n");

$googDebugFname=undefined;
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/viewer_controller.js";
eval("goog.provide(\x27gws.amp.ViewerController\x27);\ngoog.provide(\x27gws.amp.ViewerDelegate\x27);\n\ngoog.require(\x27amp.constants\x27);\ngoog.require(\x27amp.messaging.ChannelManager\x27);\ngoog.require(\x27amp.messaging.DomainBasedOriginVerifier\x27);\ngoog.require(\x27amp.messaging.Receiver\x27);\ngoog.require(\x27amp.service.AmpUrlUtil\x27);\ngoog.require(\x27fava.delegate.Delegate\x27);\ngoog.require(\x27fava.delegate.Delegator\x27);\ngoog.require(\x27goog.Disposable\x27);\ngoog.require(\x27goog.Promise\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.async.Throttle\x27);\ngoog.require(\x27goog.dom\x27);\ngoog.require(\x27goog.dom.classlist\x27);\ngoog.require(\x27goog.dom.dataset\x27);\ngoog.require(\x27goog.events\x27);\ngoog.require(\x27goog.labs.userAgent.browser\x27);\ngoog.require(\x27goog.style\x27);\ngoog.require(\x27gws.amp.AmpViewerCss\x27);\ngoog.require(\x27gws.amp.HeaderManager\x27);\ngoog.require(\x27gws.amp.MessagingErrorLogger\x27);\ngoog.require(\x27gws.amp.ViewerContext\x27);\ngoog.require(\x27gws.amp.ViewerItem\x27);\ngoog.require(\x27gws.amp.ViewerItemSet\x27);\ngoog.require(\x27gws.amp.WindowManipulator\x27);\ngoog.require(\x27gws.amp.config\x27);\ngoog.require(\x27gws.amp.history.UpdateUrlMode\x27);\ngoog.require(\x27gws.amp.model.ItemSet\x27);\ngoog.require(\x27gws.amp.touch.Interceptor\x27);\ngoog.require(\x27gws.amp.touch.handlers\x27);\ngoog.require(\x27gws.orientation\x27);\ngoog.require(\x27jsaction\x27);\ngoog.require(\x27jslayout.reactive\x27);\ngoog.require(\x27proto.gws.plugins.amp.jslayout.ViewerType\x27);\ngoog.require(\x27search.log.ve.util\x27);\ngoog.require(\x27search.task.scheduler\x27);\ngoog.forwardDeclare(\x27gws.amp.AmpViewerDom\x27);\n\n\ngoog.scope(function() {\nconst config \x3d gws.amp.config;\nconst constants \x3d amp.constants;\nconst REQUEST_NAMES \x3d constants.REQUEST_NAMES;\nconst AmpUrlUtil \x3d amp.service.AmpUrlUtil;\nconst Interceptor \x3d gws.amp.touch.Interceptor;\nconst UpdateUrlMode \x3d gws.amp.history.UpdateUrlMode;\nconst ViewerType \x3d proto.gws.plugins.amp.jslayout.ViewerType;\nconst veUtil \x3d goog.module.get(\x27search.log.ve.util\x27);\nconst scheduler \x3d goog.module.get(\x27search.task.scheduler\x27);\nconst touchHandlers \x3d goog.module.get(\x27gws.amp.touch.handlers\x27);\n\n/**\n * A jscontroller class to manage an AMP Viewer.\n * go/amp-viewer\n */\ngws.amp.ViewerController \x3d goog.defineClass(goog.Disposable, {\n  /**\n   * @param {!gws.amp.AmpViewerDom} dom\n   * @extends {goog.Disposable}\n   * @constructor\n   */\n  constructor: function(dom) {\n    const viewerConfig \x3d config.getInstance();\n\n    const headerManager \x3d new gws.amp.HeaderManager(dom);\n    this.registerDisposable(headerManager);\n\n    /** @private {!gws.amp.AmpViewerDom} */\n    this.dom_ \x3d dom;\n\n    /**\n     * The viewer controller top level element that we need in the Embedded\n     * viewer to be able to remove the \x27hidden\x27 class.\n     * @private {!Element}\n     */\n    this.rootElement_ \x3d jslayout.reactive.getRootElement(this);\n\n    const firstAncestorWithVed \x3d\n        goog.dom.getAncestor(this.rootElement_, function(node) {\n          return !!veUtil.getVedFromElement(/** @type {!Element} */ (node));\n        });\n    const viewerVed \x3d firstAncestorWithVed ?\n        veUtil.getVedFromElement(\n            goog.asserts.assertElement(firstAncestorWithVed)) :\n        \x27\x27;\n\n    // Try to get partial timestamp set in viewer_bootstrap.html.\n    let viewerBootstrapElement \x3d document.getElementById(\x27amp_vb\x27);\n    const partialTimestamp \x3d viewerBootstrapElement !\x3d\x3d null ?\n        goog.dom.dataset.get(viewerBootstrapElement, \x27pts\x27) :\n        null;\n\n    /**\n     * @private @const {!gws.amp.ViewerContext}\n     */\n    this.context_ \x3d new gws.amp.ViewerContext(\n        goog.asserts.assertElement(dom.getLoadingIcon()),\n        new gws.amp.WindowManipulator(), headerManager, viewerVed,\n        partialTimestamp);\n\n    gws.amp.ViewerController.base(this, \x27constructor\x27);\n    fava.delegate.Delegator.makeDelegator(this);\n\n    /**\n     * An object mapping viewer group id\x27s to viewer item sets.\n     * @private {!Object\x3cstring, !gws.amp.ViewerItemSet\x3e}\n     */\n    this.viewerItemSets_ \x3d {};\n\n    /**\n     * The currently selected viewer item set.\n     * @private {?gws.amp.ViewerItemSet}\n     */\n    this.currentViewerItemSet_ \x3d null;\n\n    /**\n     * A flag tracking whether global channel listeners have been\n     * registered.\n     * @private {boolean}\n     */\n    this.listenersAdded_ \x3d false;\n\n    // Set up message handling for communicating with iframed documents.\n    // Set the list of domains we are allowed to communicate with.\n    const originVerifier \x3d new amp.messaging.DomainBasedOriginVerifier(\n        this.delegate_.getAllowedOrigins());\n\n    // Connect the ChannelManager to the Receiver. The receiver listens for\n    // messages and validates that they are from trusted sources. The channel\n    // manager then dispatches them to the appropriate destination.\n    const channelManager \x3d this.getChannelManager_();\n\n    if (viewerConfig.getLogMessagingErrors()) {\n      gws.amp.MessagingErrorLogger.install();\n    }\n\n    /**\n     * The receiver listens for incoming messages. Hold on to it to remove the\n     * listener on dispose.\n     * @private {!amp.messaging.Receiver}\n     */\n    this.receiver_ \x3d new amp.messaging.Receiver(\n        goog.dom.getWindow(), originVerifier,\n        channelManager.getMessageHandler());\n\n    /** @private {!Element} */\n    this.sliderContainer_ \x3d\n        goog.asserts.assertElement(this.dom_.getSliderContainer());\n\n    // The loading icon is rendered into the viewer, but it will be reparented\n    // into individual items when needed. It starts display:none so that it does\n    // not appear in the wrong place in the viewer. Start by removing it from\n    // the dom and making it visible so that it is ready to be displayed in an\n    // item.\n    goog.dom.removeNode(this.context_.getLoadingIcon());\n    goog.style.setElementShown(this.context_.getLoadingIcon(), true);\n\n    /**\n     * The amp carousel.\n     * @private {!Element}\n     */\n    this.ampCarousel_ \x3d\n        goog.asserts.assertElement(dom.getAmpCarouselContainer());\n\n    /** @private {function()} */\n    this.registeredResizeListener_ \x3d goog.bind(this.resizeIframes_, this);\n    // Listen for both resize events and orientation changes. Hide/show of\n    // address bar is a resize, but not an orientation change.\n    // Sometimes orientation changes do not trigger a resize on iOS: b/31831214\n    // This is ugly, but there are no dom mutations if the size doesn\x27t change.\n    goog.dom.getWindow().addEventListener(\n        \x27resize\x27, this.registeredResizeListener_, false);\n    gws.orientation.addListener(this.registeredResizeListener_);\n\n    /**\n     * True if the viewer is displayed. When hidden, the viewer may ignore\n     * various events and may not load additional AMP documents.\n     * @private {boolean}\n     */\n    this.isShown_ \x3d false;\n\n    /** @private {?Interceptor} */\n    this.touchInterceptor_ \x3d\n        goog.labs.userAgent.browser.isSafari() ? new Interceptor() : null;\n\n    /**\n     * True if the viewer is in full overlay mode with the header hidden.\n     * @private {boolean}\n     */\n    this.inFullOverlay_ \x3d false;\n\n    /**\n     * The size of the viewer.\n     * @private {!goog.math.Size}\n     */\n    this.viewportSize_ \x3d goog.dom.getViewportSize();\n\n    /**\n     * A bound handler function that saves doc scroll position on page unload.\n     * @private {?function()}\n     */\n    this.boundSaveScrollPosition_ \x3d null;\n\n    this.addGlobalChannelListeners_();\n\n    this.delegate_.initialize();\n  },\n\n\n  /**\n   * Saves the scroll position of the current viewer item to sessionstorage.\n   * @private\n   */\n  saveScrollPosition_: function() {\n    let viewerItem \x3d this.getCurrentViewerItem();\n    if (viewerItem) {\n      viewerItem.saveScrollPosition();\n    }\n  },\n\n  /**\n   * Returns the DOM model of this controller.\n   * @return {!gws.amp.AmpViewerDom}\n   * @package\n   */\n  getDom: function() {\n    return this.dom_;\n  },\n\n\n  /**\n   * Adds the message listener for receiving message from the AMP iframes.\n   * @private\n   */\n  addGlobalChannelListeners_: function() {\n    if (!this.listenersAdded_) {\n      const channelManager \x3d this.getChannelManager_();\n      const channel \x3d channelManager.getGlobalChannel();\n      touchHandlers.register(\n          channel, this.touchInterceptor_, this.context_.getHeaderManager(),\n          () \x3d\x3e this.currentViewerItemSet_.getSliderContainer(),\n          () \x3d\x3e this.currentViewerItemSet_.cancelSwipe());\n\n      // Currently, only STAMP documents request privacy link information.\n      channel.registerHandler(\n          REQUEST_NAMES.MORE_INFO_LINK_URL, (type, payload, awaitResponse) \x3d\x3e {\n            return this.privacyLinkHandler_();\n          });\n      this.listenersAdded_ \x3d true;\n    }\n  },\n\n\n  /**\n   * Provides a reference to the current item.\n   * @return {?gws.amp.ViewerItem} The current AMP item.\n   */\n  getCurrentViewerItem: function() {\n    return this.currentViewerItemSet_ ?\n        this.currentViewerItemSet_.getCurrentViewerItem() :\n        null;\n  },\n\n  /**\n   * Resizes iframes to fit the viewport.\n   * @private\n   */\n  resizeIframes_: function() {\n    if (this.currentViewerItemSet_) {\n      this.currentViewerItemSet_.resizeIframes();\n    }\n  },\n\n\n  getWidth: function() {\n    return this.viewportSize_.width;\n  },\n\n\n  getHeight: function() {\n    return this.viewportSize_.height;\n  },\n\n  /**\n   * Gets the help center privacy link that may be shared with the AMP runtime.\n   * @return {!goog.Promise\x3c?\x3e}\n   * @private\n   */\n  privacyLinkHandler_: function() {\n    const viewerConfig \x3d config.getInstance();\n    const privacyLink \x3d viewerConfig.getHelpCenterLinkUrl();\n    return goog.Promise.resolve(privacyLink);\n  },\n\n  /**\n   * Finds and displays the AMP corresponding to the url.\n   * @param {string} url The AMP Url to select.\n   * @param {string} vgi The group id of the selected amp item.\n   * @param {!gws.amp.csi.Reporter\x3d} csi A CSI timer to log when the\n   *     selected AMP has finished loading.\n   * @param {!UpdateUrlMode\x3d} updateUrlMode How and\n   *     whether to update the URL as a result of loading the AMP item.\n   * @return {!goog.Promise\x3cundefined\x3e} A promise that resolves once the\n   *     selected AMP has moved into the visible position in the Slider or\n   *     rejects if no AMP is found for the specified URL.\n   */\n  loadItem(url, vgi, csi \x3d undefined, updateUrlMode \x3d UpdateUrlMode.REPLACE) {\n    const index \x3d this.viewerItemSets_[vgi].getIndexForUrl(url);\n    if (index \x3d\x3d null) {\n      return goog.Promise.reject();\n    }\n    return this.selectAmp(vgi, index, csi, updateUrlMode);\n  },\n\n\n  /**\n   * Selects and displays an amp result\n   * @param {string} vgi The group id of the selected amp item\n   * @param {number} index The index of the selected amp item\n   * @param {!gws.amp.csi.Reporter\x3d} csi A CSI timer to log when the\n   *     selected AMP has finished loading.\n   * @param {!UpdateUrlMode\x3d} updateUrlMode How and\n   *     whether to update the URL as a result of loading the AMP item.\n   * @return {!goog.Promise\x3cundefined\x3e} A promise that resolves once the next\n   *     item is ready to be displayed\n   */\n  selectAmp(\n      vgi, index, csi \x3d undefined, updateUrlMode \x3d UpdateUrlMode.REPLACE) {\n    const oldViewerItemSet \x3d this.currentViewerItemSet_;\n    const itemSetChanged \x3d this.viewerItemSets_[vgi] !\x3d oldViewerItemSet;\n    let promiseSelect;\n\n    if (itemSetChanged) {\n      this.selectViewerItemSet_(vgi);\n    }\n\n    // Select item.  Regardless of whether the item has changed or not, we call\n    // selectAmp, which will in turn trigger the ItemChangedHandler. This allows\n    // us to consolidate item selection logic in one code flow.\n    promiseSelect \x3d this.currentViewerItemSet_.selectAmp(index);\n    // Display the viewer\n    return promiseSelect.then(() \x3d\x3e {\n      if (itemSetChanged \x26\x26 oldViewerItemSet) {\n        oldViewerItemSet.setHidden();\n      }\n      // If we are measuring load time, enqueue the CSI timer to send the\n      // tick to once the item finished loading.\n      if (csi) {\n        this.currentViewerItemSet_.setCsiReporter(csi);\n      }\n      goog.asserts.assert(goog.isDef(updateUrlMode));\n      const ready \x3d this.currentViewerItemSet_.prepareForShow(updateUrlMode);\n      this.cleanupInactive_();\n      return ready.then(() \x3d\x3e this.setShown());\n    });\n  },\n\n\n  /**\n   * Causes all item sets that are not active to be cleaned up. This will cause\n   * them to unload any prefetched content -- releasing associated resources\n   * such as iframe elements. This is helpful to avoid leaking memory.\n   * @private\n   */\n  cleanupInactive_: function() {\n    for (const groupId in this.viewerItemSets_) {\n      const itemSet \x3d this.viewerItemSets_[groupId];\n      if (itemSet !\x3d\x3d this.currentViewerItemSet_) {\n        itemSet.setInactive();\n      }\n    }\n  },\n\n\n  /**\n   * Removes the hidden class attached to the viewer allowing its contents to be\n   * seen. The class is only added in the Embedded viewer to make sure that\n   * content is not displayed until the correct viewer group and item are\n   * selected to avoid flickering.\n   */\n  revealEmbeddedItem: function() {\n    goog.dom.classlist.remove(\n        this.rootElement_, gws.amp.AmpViewerCss.Class.HIDDEN);\n  },\n\n\n  /**\n   * Selects a viewer item set by its viewer group id.\n   * @param {string} groupId The viewer group id\n   * @private\n   */\n  selectViewerItemSet_: function(groupId) {\n    const newViewerItemSet \x3d this.viewerItemSets_[groupId];\n    newViewerItemSet.instantiateSliderDomIfNeeded(this.sliderContainer_);\n    this.currentViewerItemSet_ \x3d newViewerItemSet;\n    this.currentViewerItemSet_.claimHeader();\n  },\n\n\n  /**\n   * Gets the single shared instance of ChannelManager.\n   * @return {!amp.messaging.ChannelManager}\n   * @private\n   */\n  getChannelManager_: function() {\n    return amp.messaging.ChannelManager.getInstance();\n  },\n\n\n  /**\n   * Invoked when history state changes to update the viewer\x27s current state.\n   * @param {string} url The AMP URL for the historical item.\n   * @param {string} groupId The viewer group id for the historical item.\n   * @return {!gws.amp.ViewerItem} The current AMP item.\n   * @private\n   */\n  handleHistory_: function(url, groupId) {\n    const itemSet \x3d this.viewerItemSets_[groupId];\n\n    // If viewer not showing correct document, select amp\n    if (this.currentViewerItemSet_ !\x3d\x3d itemSet ||\n        itemSet.getCurrentViewerItem().getAmpUrl().getOriginalUrl() !\x3d url) {\n      this.loadItem(url, groupId);\n    }\n\n    // The item must exist for there to have been a history change.\n    return goog.asserts.assert(this.getCurrentViewerItem());\n  },\n\n\n  /**\n   * @return {boolean} True if the viewer is currently shown to the user.\n   */\n  isShown: function() {\n    return this.isShown_;\n  },\n\n  /**\n   * Prepares the viewer for showing.\n   * @param {!UpdateUrlMode\x3d} updateUrlMode Whether or not to also\n   *     update the URL. No update is typically for organic navigations or if\n   *     the URL is already correct. Replace/push depend on the use case.\n   * @return {!goog.Promise\x3cundefined\x3e}\n   */\n  prepareForShow: function(updateUrlMode \x3d UpdateUrlMode.REPLACE) {\n    return this.currentViewerItemSet_.prepareForShow(updateUrlMode);\n  },\n\n  /**\n   * Sets the viewer as shown. This ensures that the selected item in the\n   * Slider is actually made visible.\n   */\n  setShown: function() {\n    if (!this.isShown()) {\n      this.isShown_ \x3d true;\n\n      // When a AMP Doc is being navigated away from, save the current scrollTop\n      // position.\n      this.boundSaveScrollPosition_ \x3d () \x3d\x3e this.saveScrollPosition_();\n      goog.dom.getWindow().addEventListener(\n          goog.events.EventType.BEFOREUNLOAD, this.boundSaveScrollPosition_);\n    }\n    this.currentViewerItemSet_.setShown();\n  },\n\n\n  /**\n   * Called third when closing the AMP viewer.\n   * Sets the viewer as hidden. This sets the AMP viewer\x27s state.\n   */\n  finishHide: function() {\n    this.isShown_ \x3d false;\n    this.currentViewerItemSet_.setHidden();\n\n    this.saveScrollPosition_();\n    if (this.boundSaveScrollPosition_) {\n      goog.dom.getWindow().removeEventListener(\n          goog.events.EventType.BEFOREUNLOAD, this.boundSaveScrollPosition_);\n      this.boundSaveScrollPosition_ \x3d null;\n    }\n    this.fireCloseEvent_();\n  },\n\n  /**\n   * Called second when closing the AMP viewer.\n   * Notifies the viewer that it is about to be hidden. This allows the viewer\n   * to do any UI work that needs to be done before the hide animation begins\n   * such as closing popups.\n   */\n  startHide: function() {\n    this.context_.getHeaderManager().closePopups();\n  },\n\n\n  /**\n   * Called first when closing the AMP viewer.\n   * Prepares the AMP viewer to hide. This updates the URL.\n   * @return {!goog.Promise} A promise that resolves when the history state has\n   *     been popped back to the initial state.\n   */\n  prepareForHide: function() {\n    return this.currentViewerItemSet_.prepareForHide();\n  },\n\n\n  /**\n   * Determines whether a viewer item set with the given vgi exists.\n   * @param {string} vgi The viewer group id to check\n   * @return {boolean} Whether a corresponding viewer item set exists.\n   */\n  hasItemSet: function(vgi) {\n    return !!this.viewerItemSets_[vgi];\n  },\n\n\n  /**\n   * Creates viewerItemSets for the viewer based on a list of amp item sets.\n   * @param {!Array\x3c!gws.amp.model.ItemSet\x3e} ampItemSets The list of amp item\n   * sets.\n   */\n  addItemSets: function(ampItemSets) {\n    let numSetsToPreload \x3d Math.min(\n        config.getInstance().getNumViewerSetsToPreload(), ampItemSets.length);\n    for (let i \x3d 0; i \x3c ampItemSets.length; i++) {\n      const id \x3d ampItemSets[i].getViewerGroupId();\n      this.viewerItemSets_[id] \x3d\n          new gws.amp.ViewerItemSet(ampItemSets[i], this.context_);\n      // Don\x27t count ineligible prerenders against our preload cap.\n      if (this.viewerItemSets_[id].getPrerenderIneligible()) {\n        numSetsToPreload++;\n      } else if (i \x3c numSetsToPreload) {\n        this.applyPreloadStrategy_(this.viewerItemSets_[id]);\n      }\n    }\n  },\n\n\n  /**\n   * Creates a ViewerItemSet based on a single ampItemSet.  This item set must\n   * correspond to a preinstantiated iframe inside the slider container.\n   * @param {!gws.amp.model.ItemSet} ampItemSet The amp item set.\n   */\n  addSingletonItemSet(ampItemSet) {\n    this.currentViewerItemSet_ \x3d\n        new gws.amp.ViewerItemSet(ampItemSet, this.context_);\n    this.currentViewerItemSet_.instantiateSingletonSlider(\n        this.sliderContainer_);\n    this.currentViewerItemSet_.claimHeader();\n  },\n\n\n  /**\n   * Applies one of three preload strategies to the given viewer item set:\n   *   PAGE_LOAD    - preloads immediately\n   *   SCROLL       - preloads on scroll\n   *   LINK_VISIBLE - preloads when serp link is visible\n   * In all cases, we preload the viewer item set if it is initially visible.\n   * @param {!gws.amp.ViewerItemSet} viewerItemSet the viewer item set to\n   * preload\n   */\n  applyPreloadStrategy_(viewerItemSet) {\n    if (viewerItemSet.isInViewport() || this.isStandalone_()) {\n      this.prepareItemSet_(viewerItemSet);\n      return;\n    }\n    // Throttle scroll handler as we don\x27t need constant scroll data.\n    /** @type {?goog.events.Key} */\n    let key;\n    const scrollThrottle \x3d new goog.async.Throttle(() \x3d\x3e {\n      this.preloadItemSetOnLinkVisible_(\n          viewerItemSet, goog.asserts.assertObject(key));\n    }, 100);\n    key \x3d goog.events.listen(\n        goog.dom.getWindow(), goog.events.EventType.SCROLL, (event) \x3d\x3e {\n          scrollThrottle.fire();\n        });\n  },\n\n  /**\n   * Handles scroll event for LINK_VISIBLE preload strategy.\n   * If the item set is visible, we preload it and unregister the listener.\n   * @param {!gws.amp.ViewerItemSet} viewerItemSet The viewer item set to\n   * possibly preload.\n   * @param {!goog.events.ListenableKey} scrollHandlerKey The scroll handler\n   * key.\n   */\n  preloadItemSetOnLinkVisible_(viewerItemSet, scrollHandlerKey) {\n    scheduler.now(() \x3d\x3e {\n      if (viewerItemSet.isInViewport()) {\n        this.prepareItemSet_(viewerItemSet);\n        goog.events.unlistenByKey(scrollHandlerKey);\n      }\n    });\n  },\n\n\n  /**\n   * Prepares a viewer item set for viewing.\n   * @param {!gws.amp.ViewerItemSet} viewerItemSet the viewer item set\n   */\n  prepareItemSet_(viewerItemSet) {\n    viewerItemSet.instantiateSliderDomIfNeeded(this.sliderContainer_);\n    viewerItemSet.preloadIframesIfNotShown();\n    if (!this.currentViewerItemSet_) {\n      this.currentViewerItemSet_ \x3d viewerItemSet;\n      this.currentViewerItemSet_.claimHeader();\n    }\n  },\n\n\n  /**\n   * Removes the given item sets from the set of loaded item sets.\n   * @param {!Array\x3c!gws.amp.model.ItemSet\x3e} ampItemSets The list of amp item\n   *     sets to remove.\n   */\n  removeItemSets: function(ampItemSets) {\n    for (let i \x3d 0; i \x3c ampItemSets.length; i++) {\n      const id \x3d ampItemSets[i].getViewerGroupId();\n      this.removeItemSetById_(id);\n    }\n  },\n\n  /**\n   * Removes all item sets from the set of loaded item sets.\n   */\n  removeAllItemSets: function() {\n    for (let id in this.viewerItemSets_) {\n      this.removeItemSetById_(id);\n    }\n  },\n\n  /**\n   * Removes the item set corresponding to the given group id from the viewer.\n   * @param {string} id The viewer group id of the item set to remove\n   */\n  removeItemSetById_: function(id) {\n    if (!this.viewerItemSets_[id]) {\n      return;\n    }\n    // Stop pointing to the current item set if it is going to be removed.\n    if (this.viewerItemSets_[id] \x3d\x3d this.currentViewerItemSet_) {\n      this.currentViewerItemSet_ \x3d null;\n    }\n    this.viewerItemSets_[id].dispose();\n    delete this.viewerItemSets_[id];\n  },\n\n\n  /**\n   * Sets the transition selector to use to manage open/close transitions.\n   * @return {?Interceptor}\n   */\n  getTouchInterceptor: function() {\n    return this.touchInterceptor_;\n  },\n\n\n  /**\n   * Fires a close event for the currently displayed item.\n   * @private\n   */\n  fireCloseEvent_: function() {\n    if (this.currentViewerItemSet_) {\n      const targetLink \x3d this.currentViewerItemSet_.getCurrentViewerItem()\n                             .getContentManager()\n                             .getModel()\n                             .getSrpLink();\n      if (targetLink) {\n        jsaction.fireCustomEvent(targetLink, \x27ampclosed\x27);\n      }\n    }\n  },\n\n  /**\n   * @return {boolean} Whether the viewer is Standalone i.e., of either type\n   *     SHARED or EMBEDDED.\n   * @private\n   */\n  isStandalone_: function() {\n    return (\n        config.getInstance().getViewerType() \x3d\x3d ViewerType.EMBEDDED ||\n        config.getInstance().getViewerType() \x3d\x3d ViewerType.SHARED);\n  },\n\n\n  /** @override */\n  disposeInternal: function() {\n    this.receiver_.dispose();\n    goog.dom.getWindow().removeEventListener(\n        \x27resize\x27, this.registeredResizeListener_);\n    gws.orientation.removeListener(this.registeredResizeListener_);\n    const channelManager \x3d this.getChannelManager_();\n    const channel \x3d channelManager.getGlobalChannel();\n    channel.unregisterHandler(REQUEST_NAMES.TOUCHSTART);\n    channel.unregisterHandler(REQUEST_NAMES.TOUCHMOVE);\n    channel.unregisterHandler(REQUEST_NAMES.TOUCHEND);\n    channel.unregisterHandler(REQUEST_NAMES.REQUEST_FULL_OVERLAY);\n    channel.unregisterHandler(REQUEST_NAMES.CANCEL_FULL_OVERLAY);\n    channel.setDefaultHandler(null);\n\n    this.delegate_.dispose();\n    gws.amp.ViewerController.base(this, \x27disposeInternal\x27);\n  }\n});  // goog.defineClass\n\n\n/**\n * Base delegate class. Extend this class to specialize the Viewer for a\n * particular context.\n */\ngws.amp.ViewerDelegate \x3d goog.defineClass(fava.delegate.Delegate, {\n  /**\n   * @param {!gws.amp.ViewerController} controller\n   * @constructor\n   * @extends {fava.delegate.Delegate}\n   */\n  constructor: function(controller) {\n    gws.amp.ViewerDelegate.base(this, \x27constructor\x27, controller);\n\n    /**\n     * @const\n     * @protected {!gws.amp.ViewerController}\n     */\n    this.controller \x3d controller;\n  },\n\n\n  /**\n   * Initializes the delegate. Called during controller construction.\n   */\n  initialize: fava.delegate.Delegate.callFirst(),\n\n\n  /**\n   * Generates the list of allowed origins for messaging. Overrride to provide\n   * more a lenient set.\n   * @return {!Array\x3cstring\x3e} The list of allowed origins.\n   */\n  getAllowedOrigins: fava.delegate.Delegate.callFirst(function() {\n    return config.getInstance().getAllowedOriginList();\n  }),\n\n\n  /**\n   * Disposes of held resources. Called from disposeInternal().\n   */\n  dispose: fava.delegate.Delegate.callFirst()\n});\nfava.delegate.Delegate.setBase(\n    gws.amp.ViewerDelegate, gws.amp.ViewerController);\n});  // goog.scope\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/viewer_controller.js\n");

$googDebugFname=undefined;
var $googDebugFname="java/com/google/gws/plugins/amp/jslayout/viewer_html_pinto.model_dom.jslayout.js";
eval("/**\n * @fileoverview Generated code, do not modify.\n * Generated from java/com/google/gws/plugins/amp/jslayout/viewer.html.\n * Generated by template/prototemplate/jslayout/codegeneration/gen_model_dom_js.tpl.\n *\n * @suppress {extraRequire}\n */\n\ngoog.provide(\x27gws.amp.AmpViewerDom\x27);\n\n\n\n\n\ngoog.require(\x27jslayout.reactive.JsnameDomBase\x27);\ngoog.forwardDeclare(\x27goog.Promise\x27);\n\ngoog.forwardDeclare(\x27gws.suit.snackbar.Snackbar\x27);\n\n\n// Controller Model, Dom class code generated by:\n// template/prototemplate/jslayout/javascript/controller_model_dom_js.tpl\n\n\n/**\n * @param {!Object} controller\n * @constructor\n * @extends {jslayout.reactive.JsnameDomBase}\n */\ngws.amp.AmpViewerDom \x3d\n    function(controller) {\n  gws.amp.AmpViewerDom.base(this, \x27constructor\x27, controller);\n};\ngoog.inherits(gws.amp.AmpViewerDom, jslayout.reactive.JsnameDomBase);\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22header\x22.\n */\ngws.amp.AmpViewerDom.prototype.getHeader \x3d function() {\n  return this.queryForMember(\x276y9ZvyRIOWM\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22amp_carousel_container\x22.\n */\ngws.amp.AmpViewerDom.prototype.getAmpCarouselContainer \x3d function() {\n  return this.queryForMember(\x27tO12NuyuOJ4\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22slider_container\x22.\n */\ngws.amp.AmpViewerDom.prototype.getSliderContainer \x3d function() {\n  return this.queryForMember(\x27IyXm0j1PPYA\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22loading_icon\x22.\n */\ngws.amp.AmpViewerDom.prototype.getLoadingIcon \x3d function() {\n  return this.queryForMember(\x27YPmziebQ6sA\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22scrolltop_snackbar\x22.\n */\ngws.amp.AmpViewerDom.prototype.getScrolltopSnackbar \x3d function() {\n  return this.queryForMember(\x27d3kkAJguDxo\x27);\n};\n\n\n/**\n * @return {!goog.Promise.\x3c!gws.suit.snackbar.Snackbar\x3e} Resolves to the controller\n *     associated with the template element with jsname\x3d\x22scrolltop_snackbar\x22.\n *     Rejects if the controller constructor fails.\n */\ngws.amp.AmpViewerDom.prototype.getScrolltopSnackbarController \x3d function() {\n  return /** @type {!goog.Promise.\x3c!gws.suit.snackbar.Snackbar\x3e} */ (\n      this.queryForMemberController(\x27d3kkAJguDxo\x27));\n};\n\n\n//# sourceURL\x3dhttps://qs/java/com/google/gws/plugins/amp/jslayout/viewer_html_pinto.model_dom.jslayout.js\n");

$googDebugFname=undefined;
var $googDebugFname="jar:file:java/com/google/gws/plugins/amp/jslayout/viewer_html_pinto.jslayout.js.zip!/gws.amp.AmpViewerTemplate.jslayout.js";
eval("// -*- mode: js -*-\n/**\n * @fileoverview Generated code, do not modify.\n * Generated from java/com/google/gws/plugins/amp/jslayout/viewer.html.\n * Generated by template/prototemplate/jslayout/codegeneration/api_js.tpl.\n *\n * @suppress {uselessCode|transitionalSuspiciousCodeWarnings|extraRequire|missingRequire}\n */\n\n// Below are flags and original source file used to generate this\n// file. Used by ModuleSetsServer to provide edit/refresh for\n// jslayout_js() rules. Omitted in codegeneration/example; cf.\n// example_update.sh.\n/* [[BUILD_ARGS]]\nsource_file: \x22java/com/google/gws/plugins/amp/jslayout/viewer.html\x22\nbuilder_arg: \x22java/com/google/gws/plugins/amp/jslayout/viewer.html\x22\nbuilder_arg: \x22--artifacts\x22\nbuilder_arg: \x22w,desc_pool,xmb\x22\nbuilder_arg: \x22--gendir\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles\x22\nbuilder_arg: \x22--template_root\x22\nbuilder_arg: \x22,blaze-out/k8-opt/bin\x22\nbuilder_arg: \x22--output_directory\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles\x22\nbuilder_arg: \x22--xtb_basedir\x22\nbuilder_arg: \x22googledata/transconsole/xtb\x22\nbuilder_arg: \x22--mode\x22\nbuilder_arg: \x22single\x22\nbuilder_arg: \x22--stderrthreshold\x3d1\x22\nbuilder_arg: \x22--xmb_output_file_suffix\x22\nbuilder_arg: \x22.gws\x22\nbuilder_arg: \x22--strict_mode\x22\nbuilder_arg: \x22--use_attribute_whitelist\x22\nbuilder_arg: \x22--jscontroller_type\x3dreactive\x22\nbuilder_arg: \x22--parser_config\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles/googledata/gws/jslayout/parser_config_safe_sanitized\x22\nbuilder_arg: \x22--tc_project\x3dgws\x22\nbuilder_arg: \x22--expflags_files\x3dblaze-out/k8-opt/genfiles/java/com/google/gws/plugins/amp/features/amp_viewer_mendel_jslayout_interface.expflags\x22\nbuilder_arg: \x22--source_base_dirs\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles\x22\nrenderer_arg: \x22blaze-out/host/bin/template/prototemplate/jslayout/renderer\x22\nrenderer_arg: \x22--input_root\x3dblaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles\x22\nrenderer_arg: \x22--input\x3dblaze-out/k8-opt/genfiles/java/com/google/gws/plugins/amp/jslayout/viewer.html.w\x22\nrenderer_arg: \x22--js_output\x3dblaze-out/k8-opt/bin/java/com/google/gws/plugins/amp/jslayout/viewer_html_pinto.jslayout.js.zip\x22\nrenderer_arg: \x22--js_wrapper\x22\nrenderer_arg: \x22--entrypoint\x3dtrue\x22\nrenderer_arg: \x22--generate_only_browserside_template\x22\nrenderer_arg: \x22--generate_controller_only\x22\nrenderer_arg: \x22--generate_separate_files_per_template\x22\nrenderer_arg: \x22--use_apps_jspb\x22\nrenderer_arg: \x22--use_reactive\x22\n[[/BUILD_ARGS]] */\n\ngoog.provide(\x27gws.amp.AmpViewerTemplate\x27);\n\n\n\n\n// Reactive and IDL jscontroller classes,\n// IDL classes with static method invocations, enum types,\n// imports used by certain expression language features,\n// reactive and IDL jscontroller JSPB protos,\n// Soy templates used via soyTemplate() built-in.\ngoog.require(\x27gws.amp.AmpViewerDom\x27);\ngoog.require(\x27gws.amp.ViewerController\x27);\ngoog.require(\x27jslayout.reactive.framework\x27);\n\n\n\n\n// Controller registration code generated by:\n// template/prototemplate/jslayout/javascript/controller_registration_js.tpl\n\n\n/**\n * @param {!jslayout.reactive.ControllerPool} pool\n */\ngws.amp.AmpViewerTemplate.registerController \x3d function(pool) {\n  pool.registerController(\n      \x27t-ydqbMzhZkls\x27, gws.amp.ViewerController, null,\n      gws.amp.AmpViewerDom,\n      function(tempObj, model, dom) {\n        gws.amp.ViewerController.call(\n            /** @type {gws.amp.ViewerController} */(tempObj), /** @type {!gws.amp.AmpViewerDom} */ (dom));\n      },\n      \x27gws.amp.ViewerController\x27);\n};\n\n\n// Auto controller/template registration for reactive templates generated by:\n// template/prototemplate/jslayout/javascript/controller_registration_js.tpl\njslayout.reactive.framework.registerController(\n    gws.amp.AmpViewerTemplate.registerController);\n\n\n//# sourceURL\x3dhttps://qs/jar:file:java/com/google/gws/plugins/amp/jslayout/viewer_html_pinto.jslayout.js.zip!/gws.amp.AmpViewerTemplate.jslayout.js\n");

$googDebugFname=undefined;

var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/div_slider_provider.js";
goog.loadModule("/**\n * @fileoverview The SliderProvider deployed via the \x22ampDivSlider\x22 mod.\n * @modName {ampDivSlider} This is the DivSlider mod.\n * @mods {gws.amp.SliderProviderDelegate}\n */\ngoog.module(\x27gws.amp.DivSliderProvider\x27);\n\nconst DivSlider \x3d goog.require(\x27gws.amp.DivSlider\x27);\nconst SliderProvider \x3d goog.require(\x27gws.amp.SliderProvider\x27);\nconst SliderProviderDelegate \x3d goog.require(\x27gws.amp.SliderProviderDelegate\x27);\n\n/** @implements {SliderProviderDelegate} */\nclass DivSliderProvider {\n  /** @override */\n  createSlider(itemSet) {\n    return new DivSlider(itemSet);\n  }\n}\n\nSliderProvider.registry().registerClass(DivSliderProvider);\n\nexports \x3d DivSliderProvider;\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/div_slider_provider.js\n");

$googDebugFname=undefined;

var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/amp/header/tall_header_animator.js";
goog.loadModule("/**\n * @fileoverview Modifies gws.amp.header.HeaderAnimatorDelegator.\n * @modName {ampTallHeaderAnimator} This is the TallHeaderAnimator mod.\n * @mods {gws.amp.header.HeaderAnimatorDelegate}\n */\ngoog.module(\x27gws.amp.header.TallHeaderAnimator\x27);\n\nconst HeaderAnimator \x3d goog.require(\x27gws.amp.header.HeaderAnimator\x27);\nconst HeaderAnimatorDelegate \x3d goog.require(\x27gws.amp.header.HeaderAnimatorDelegate\x27);\nconst classlist \x3d goog.require(\x27goog.dom.classlist\x27);\nconst constants \x3d goog.require(\x27gws.amp.header.constants\x27);\nconst dom \x3d goog.require(\x27goog.dom\x27);\nconst {ItemChangedEvent} \x3d goog.require(\x27gws.amp.header.events\x27);\n\n/**\n * Class that animates the header text and bubbles using the pre- AMP Header\n * Minification method. (go/amp-header-minification-v1)\n * @implements {HeaderAnimatorDelegate}\n */\n// TODO(b/78113988): Replace with MinifiedHeaderAnimator after launch.\nclass TallHeaderAnimator {\n  constructor() {\n    // TODO(b/77810783): Pass in through constructor.\n    const headerDom \x3d dom.getRequiredElement(constants.HEADER_ID);\n\n    /**\n     * The dom element containing header title text. In the embedded case, this\n     * element is null.\n     * @private @const {?Element}\n     */\n    this.titleTextDom_ \x3d dom.getElementByClass(constants.TITLE_TEXT, headerDom);\n\n    /**\n     * The div containing header bubbles.\n     * @private @const {!Element}\n     */\n    this.bubblesDiv_ \x3d\n        dom.getRequiredElementByClass(constants.BUBBLE_CONTAINER, headerDom);\n  }\n\n  /**\n   * On item changed events, updates the header\x27s text and the selected bubble.\n   * @param {!ItemChangedEvent} e\n   * @override\n   */\n  itemChanged(e) {\n    const itemData \x3d e.itemData;\n    this.updateTitleText_(itemData.publisherDomain);\n    this.updateSelectedBubble_(itemData.index);\n  }\n\n  /**\n   * Updates the header title text.\n   * @param {string} title The title text e.g., the publisher domain.\n   * @private\n   */\n  updateTitleText_(title) {\n    if (this.titleTextDom_) {\n      this.titleTextDom_.textContent \x3d title;\n    }\n  }\n\n  /**\n   * @param {number} index The integer index of the new selected bubble.\n   * @private\n   */\n  updateSelectedBubble_(index) {\n    const bubbles \x3d dom.getChildren(this.bubblesDiv_);\n    if (0 \x3c\x3d index \x26\x26 index \x3c bubbles.length) {\n      const oldSelectedBubble \x3d\n          dom.getElementByClass(constants.SELECTED, this.bubblesDiv_);\n      if (oldSelectedBubble) {\n        classlist.remove(oldSelectedBubble, constants.SELECTED);\n      }\n      classlist.add(bubbles[index], constants.SELECTED);\n    }\n  }\n}\n\nHeaderAnimator.registry().registerClass(TallHeaderAnimator);\n\nexports \x3d TallHeaderAnimator;\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/amp/header/tall_header_animator.js\n");

$googDebugFname=undefined;



/** @suppress {missingRequire} */ /** @suppress {missingRequire} */
goog.module.ModuleManager.getInstance().setLoaded('amp');
/** @suppress {missingRequire} */
goog.module.ModuleManager.getInstance().afterLoadModuleCode('amp');

}catch(e){_DumpException(e)}
/* _Module_:syow */
try{
/** @suppress {missingRequire} */ goog.module.ModuleManager.getInstance().beforeLoadModuleCode('syow');
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/images/share_controller.js";
eval("goog.provide(\x27gws.images.share.AgsaShareController\x27);\ngoog.provide(\x27gws.images.share.ShareController\x27);\ngoog.provide(\x27gws.images.share.WebShareController\x27);\n\ngoog.require(\x27goog.Disposable\x27);\ngoog.require(\x27goog.Uri\x27);\ngoog.require(\x27goog.Uri.QueryData\x27);\ngoog.require(\x27goog.array\x27);\ngoog.require(\x27goog.asserts\x27);\ngoog.require(\x27goog.dom\x27);\ngoog.require(\x27goog.dom.TagName\x27);\ngoog.require(\x27goog.dom.dataset\x27);\ngoog.require(\x27goog.object\x27);\ngoog.require(\x27goog.string\x27);\ngoog.require(\x27goog.style\x27);\ngoog.require(\x27goog.window\x27);\ngoog.require(\x27gws.async\x27);\ngoog.require(\x27gws.error\x27);\ngoog.require(\x27gws.images.viewer.config\x27);\ngoog.require(\x27gws.images.viewer.utils\x27);\ngoog.require(\x27gws.nav\x27);\ngoog.require(\x27gws.suit.dialog.Dialog\x27);\ngoog.require(\x27jslayout.reactive\x27);\ngoog.require(\x27search.log.ve.VetMaker\x27);\ngoog.require(\x27search.log.ve.interaction\x27);\ngoog.require(\x27search.log.ve.util\x27);\n\ngoog.forwardDeclare(\x27gws.images.share.container.WebShareControllerDom\x27);\n\ngoog.scope(function() {\nconst VetMaker \x3d goog.module.get(\x27search.log.ve.VetMaker\x27);\nconst config \x3d gws.images.viewer.config;\nconst veUtil \x3d goog.module.get(\x27search.log.ve.util\x27);\n\n/**\n * Controller for sharing Image Search results.\n */\ngws.images.share.ShareController \x3d goog.defineClass(goog.Disposable, {\n  constructor: function() {\n    /**\n     * The current image to be shared.\n     * @private {?gws.images.viewer.ImageModel}\n     */\n    this.image_ \x3d null;\n\n    /**\n     * The short URL of the current image, or null if it is not yet available.\n     * @private {?string}\n     */\n    this.shortUrl_ \x3d null;\n\n    /**\n     * Promise for the Share short URL async endpoint.\n     * @private {?goog.Promise}\n     */\n    this.fetchShortUrlPromise_ \x3d null;\n  },\n\n\n  statics: {\n    /**\n     * The value for the source parameter of the built URL to indicate that this\n     * was shared from Image Search.\n     * @const\n     */\n    SOURCE_PARAM_VALUE: \x27sh/x/im\x27,\n\n    /**\n     * The class name for the element containing the short url as its href\n     * property.\n     * @const\n     */\n    SHORT_URL_CLASS: \x27irc_shu\x27,\n\n    /**\n     * The class name for the element to async-fetch.\n     * property.\n     * @const\n     */\n    ASYNC_CONTAINER_ID: \x27irc_shasync\x27\n  },\n\n\n  /**\n   * Shows the Share dialog after the viewer Share button has been clicked.\n   * @param {!Element} triggerElement The element to log an interaction on.\n   * @param {!Object\x3cstring, string\x3e\x3d} asyncQueryParams Optional additional\n   *     parameters to include in the fetch request URL\n   */\n  handleShareClick: function(triggerElement, asyncQueryParams \x3d {}) {\n    if (!this.fetchShortUrlPromise_) {\n      this.fetchShortUrl_(triggerElement, asyncQueryParams);\n    }\n    this.fetchShortUrlPromise_.thenAlways(goog.bind(this.shareInternal_, this));\n  },\n\n\n  /**\n   * Fetch the short URL for the current image.\n   * @param {!Element} triggerElement The element to log an interaction on.\n   * @param {!Object\x3cstring, string\x3e\x3d} asyncQueryParams Optional additional\n   *     parameters to include in the fetch request URL\n   */\n  fetchShortUrl_: function(triggerElement, asyncQueryParams \x3d {}) {\n    const target \x3d goog.dom.getRequiredElement(\n        gws.images.share.ShareController.ASYNC_CONTAINER_ID);\n    /** @type {!Map\x3cstring, string\x3e} */\n    const context \x3d new Map();\n    context.set(\x27imgres\x27, this.getLandingPageUrl_().getQuery());\n    if (this.fetchShortUrlPromise_) {\n      this.fetchShortUrlPromise_.cancel();\n    }\n\n    // Unless the asyncQueryParams already include a vet, construct a vet param\n    // to explicitly insert the dialog\x27s VE tree into the trigger element\x27s VE.\n    if (!asyncQueryParams[\x27vet\x27]) {\n      const triggerVed \x3d veUtil.getVedFromElement(triggerElement);\n      if (triggerVed) {\n        const vetMaker \x3d new VetMaker();\n        vetMaker.addInsert(triggerVed);\n        asyncQueryParams[\x27vet\x27] \x3d vetMaker.makeVetValue();\n      }\n    }\n    /** @type {!Map\x3cstring, string\x3e} */\n    const urlParams \x3d new Map();\n    goog.object.forEach(asyncQueryParams, function(value, key) {\n      urlParams.set(key, value);\n    });\n\n    this.fetchShortUrlPromise_ \x3d\n        gws.async.update(target, context, triggerElement, urlParams)\n            .then(\n                () \x3d\x3e this.handleShortUrlResponseInternal_(target),\n                () \x3d\x3e this.handleShortUrlFailure_());\n  },\n\n\n  /**\n   * Gets the best URL to be shared: the short URL if available with a fallback\n   * to the long URL.\n   * @return {string}\n   */\n  getShareUrl: function() {\n    return this.getShortUrl() || this.getLongUrl();\n  },\n\n\n  /**\n   * Called on failure of the URL shortener endpoint.\n   * @protected\n   */\n  handleShortUrlFailure_: goog.nullFunction,\n\n\n  /**\n   * Returns the short URL if it has already been retrieved from the URL\n   * shortener.\n   * @return {?string} The short URL if available, null otherwise.\n   */\n  getShortUrl: function() {\n    return this.shortUrl_;\n  },\n\n\n  /**\n   * Gets the absolute landing page URL to share on social networks.\n   * @return {string}\n   */\n  getLongUrl: function() {\n    return gws.images.viewer.utils.getProtocolAndImagesHost() +\n        this.getLandingPageUrl_().toString();\n  },\n\n\n  /**\n   * Gets the landing page Uri object for the current image with no domain,\n   * e.g. \x27/imgres?docid\x3dabc123\x26tbnid\x3ddef456\x27\n   * @return {?goog.Uri}\n   */\n  getLandingPageUrl_: function() {\n    let landingPageUrl;\n    if (landingPageUrl \x3d\n            this.image_.getLandingPageUrl(true /* opt_excludeUserParams */)) {\n      return landingPageUrl.setParameterValue(\n          \x27source\x27, gws.images.share.ShareController.SOURCE_PARAM_VALUE);\n    } else if (\n        landingPageUrl \x3d gws.images.viewer.utils.getShareableLandingPageUrl()) {\n      return new goog.Uri(\n          landingPageUrl + \x27\x26source\x3d\x27 +\n          gws.images.share.ShareController.SOURCE_PARAM_VALUE);\n    } else {\n      // unable to acquire a valid url for a shareable landing page\n      gws.error.log(new Error(\x27irc_sh\x27));\n      return null;\n    }\n  },\n\n\n  /**\n   * Updates the active image when it changes in the viewer.\n   * @param {!gws.images.viewer.ImageModel} image\n   */\n  setActiveImage: function(image) {\n    if (this.fetchShortUrlPromise_) {\n      this.fetchShortUrlPromise_.cancel();\n      this.fetchShortUrlPromise_ \x3d null;\n    }\n    this.image_ \x3d image;\n    this.shortUrl_ \x3d null;\n  },\n\n\n  /**\n   * Called on each click of the share button after any response from the URL\n   * shortener endpoint. When this is called, getShareUrl will return the short\n   * URL if the URL shortener endpoint succeeded.\n   * @protected\n   */\n  shareInternal_: goog.nullFunction,\n\n\n  /**\n   * Called when the viewer is closed.\n   */\n  onViewerClose: goog.nullFunction,\n\n\n  /**\n   * Handles a successful response from the URL shortener endpoint.\n   * @param {!Element} dom The response from the URL shortener endpoint\n   *     containing elements for logging and data.\n   * @protected\n   */\n  handleShortUrlResponseInternal_: function(dom) {\n    this.shortUrl_ \x3d\n        goog.dom\n            .getRequiredElementByClass(\n                gws.images.share.ShareController.SHORT_URL_CLASS, dom)\n            .href;\n  },\n\n\n  /**\n   * @override\n   */\n  disposeInternal: function() {\n    if (this.fetchShortUrlPromise_) {\n      this.fetchShortUrlPromise_.cancel();\n    }\n    gws.images.share.ShareController.base(this, \x27disposeInternal\x27);\n  }\n});\n\n\n/**\n * Handles clicks on the Image Viewer share button for AGSA.\n */\ngws.images.share.AgsaShareController \x3d\n    goog.defineClass(gws.images.share.ShareController, {\n      /**\n       * @constructor\n       */\n      constructor: function() {\n        gws.images.share.AgsaShareController.base(this, \x27constructor\x27);\n      },\n\n\n      /**\n       * @override\n       */\n      shareInternal_: function() {\n        // Show the AGSA native share dialog. This should only be called on AGSA\n        // \x3e\x3d 4.2.  If native share is not available, logs an error.\n        if (!window.agsa_ext || !window.agsa_ext.share) {\n          // Share JS API is not available. Log this.\n          gws.error.log(new Error(\x27irc_shagsa\x27));\n          return;\n        }\n        window.agsa_ext.share(this.getShareUrl(), null);\n      }\n    });\n\n\n/**\n * Handles clicks on the Image Viewer share button for mobile web.\n */\ngws.images.share\n    .WebShareController \x3d goog.defineClass(gws.images.share.ShareController, {\n  /**\n   * @constructor\n   * @param {!gws.images.share.container.WebShareControllerDom} dom\n   */\n  constructor: function(dom) {\n    gws.images.share.WebShareController.base(this, \x27constructor\x27);\n\n    /**\n     * The dom for the web share controller.\n     * @private @const\n     */\n    this.dom_ \x3d dom;\n\n    /**\n     * Whether clipboard copy-on-click is supported. Null means unknown.\n     * @private {?boolean}\n     */\n    this.copySupported_ \x3d null;\n\n    /**\n     * Array of elements that have had a ved applied dynamically.\n     * @private {!Array\x3c!Element\x3e}\n     */\n    this.loggedElements_ \x3d [];\n\n    /**\n     * Promise for the jscontroller of the container that holds the g-dialog.\n     * @private {!goog.Promise\x3c!gws.suit.dialog.Dialog\x3e}\n     */\n    this.containerPromise_ \x3d\n        /** @type {!goog.Promise\x3c!gws.suit.dialog.Dialog\x3e} */\n        (jslayout.reactive.getControllerPromiseByRootElement(\n            goog.dom.getRequiredElement(\n                gws.images.share.WebShareController.SHARE_CONTAINER_ID)));\n  },\n\n\n  statics: {\n    /**\n     * The domain and path for Twitter share form.\n     * @const @private {string}\n     */\n    TWITTER_SHARE_ENDPOINT: \x27https://www.twitter.com/share\x27,\n\n    /**\n     * The domain and path for WhatsApp share form.\n     * @const @private {string}\n     */\n    WHATSAPP_SHARE_ENDPOINT: \x27https://api.whatsapp.com/send\x27,\n\n    /**\n     * The domain and path for Facebook share form.\n     * @const @private {string}\n     */\n    FACEBOOK_SHARE_ENDPOINT: \x27https://www.facebook.com/sharer/sharer.php\x27,\n\n    /**\n     * The domain and path for Google+ share form.\n     * @const @private {string}\n     */\n    GPLUS_SHARE_ENDPOINT: \x27https://plus.google.com/share\x27,\n\n    /**\n     * The domain and path for Line share form.\n     * @const @private {string}\n     */\n    LINE_SHARE_ENDPOINT: \x27https://line.me/R/msg/text/\x27,\n\n    /**\n     * Scheme for invoking the system email client.\n     * @const @private {string}\n     */\n    MAILTO: \x27mailto:\x27,\n\n    /**\n     * The id of the share container, which controls opening and closing.\n     * @const\n     */\n    SHARE_CONTAINER_ID: \x27irc_shc\x27,\n\n    /**\n     * Message for email subject line.\n     * @desc Email subject line when sharing an image.\n     * @const\n     */\n    MSG_MAILTO_SUBJECT: goog.getMsg(\x27Check out this image\x27),\n\n    /**\n     * Message to include in the email body, after the link and page title.\n     * @desc Email subject line when sharing an image.\n     * @const\n     */\n    MSG_MAILTO_FOOTER_COPYRIGHT:\n        goog.getMsg(\x27Images may be subject to copyright.\x27),\n  },\n\n\n  /**\n   * Initializes elements in the dialog. Must be called as part of a user\n   * callback function.\n   */\n  setup_: function() {\n    if (goog.isNull(this.copySupported_)) {\n      this.copySupported_ \x3d this.isCopySupported_();\n\n      const urlInput \x3d this.dom_.getShareUrlInput();\n      if (!this.copySupported_ \x26\x26 urlInput) {\n        // Change the cursor style for the share URL input if copy is not\n        // supported.\n        urlInput.style.cursor \x3d \x27text\x27;\n      }\n\n      // Show/hide the copy URL hints based on whether copy is supported.\n      goog.style.setElementShown(\n          this.dom_.getShareUrlCopySupportedHint(), this.copySupported_);\n      goog.style.setElementShown(\n          this.dom_.getShareUrlCopyUnsupportedHint(), !this.copySupported_);\n    }\n  },\n\n\n  /**\n   * Check whether or not a clipboard copy-on-click is supported in the\n   * user\x27s current browser. Only guaranteed to work when called as part of a\n   * user callback function.\n   * @return {boolean} Whether copy is supported in the user\x27s current browser.\n   * @private\n   */\n  isCopySupported_: function() {\n    let copySupported \x3d \x27getSelection\x27 in window \x26\x26\n        \x27queryCommandSupported\x27 in document \x26\x26 \x27execCommand\x27 in document \x26\x26\n        document.queryCommandSupported(\x27copy\x27);\n    if (copySupported) {\n      // Browsers can lie about whether copy is supported, so actually attempt\n      // to execute the copy command.\n      try {\n        copySupported \x3d document.execCommand(\x27copy\x27, true, null);\n      } catch (e) {\n        copySupported \x3d false;\n      }\n    }\n    return copySupported;\n  },\n\n\n  /**\n   * @override\n   */\n  handleShareClick: function(triggerElement, asyncQueryParams \x3d {}) {\n    gws.images.share.WebShareController.base(\n        this, \x27handleShareClick\x27, triggerElement, asyncQueryParams);\n    this.setup_();\n    this.containerPromise_.then((controller) \x3d\x3e {\n      controller.openAndFocus(\n          goog.asserts.assert(goog.dom.getElementByTagNameAndClass(\n              goog.dom.TagName.A, /* opt_class\x3d */ null, this.dom_.getRoot())));\n    });\n    this.updateState_(false);\n  },\n\n\n  /**\n   * @override\n   */\n  onViewerClose: function() {\n    this.containerPromise_.then(function(controller) { controller.close(); });\n  },\n\n\n  /**\n   * Handles a click on a social network share link.\n   * @param {!jsaction.ActionFlow} actionFlow clicked link DOM element\n   * @param {string} targetUrl The url for a particular share service, complete\n   * with the result-specific data to be shared.\n   * @param {boolean} newWindow Whether to open the link in a new window or tab,\n   * rather than the current tab. Depends largely on whether the link is likely\n   * to open an external app or to take the user away from the current page to a\n   * sharing website.\n   * @private\n   */\n  shareAction_: function(actionFlow, targetUrl, newWindow) {\n    this.containerPromise_.then(function(controller) { controller.close(); });\n    goog.asserts.assert(this.fetchShortUrlPromise_);\n    if (this.fetchShortUrlPromise_) {\n      this.fetchShortUrlPromise_.then(goog.partial(\n          search.log.ve.interaction.logInteraction,\n          goog.asserts.assertElement(actionFlow.event().target)));\n    }\n    if (newWindow) {\n      goog.window.open(targetUrl, {\x27target\x27: \x27_blank\x27});\n    } else {\n      gws.nav.go(targetUrl);\n    }\n  },\n\n  /**\n   * Returns a target url from a base url and the given query parameters.\n   * @param {string} baseUrl\n   * @param {!Object\x3cstring,string\x3e} queryParams\n   * @return {string} target url\n   * @private\n   */\n  buildTargetUrlWithQueryData_: function(baseUrl, queryParams) {\n    return new goog.Uri(baseUrl)\n        .setQueryData(goog.Uri.QueryData.createFromMap(queryParams))\n        .toString();\n  },\n\n  /**\n   * Returns a target url from a base url and the given query string.\n   * @param {string} baseUrl\n   * @param {string} queryString\n   * @return {string} target url\n   * @private\n   */\n  buildTargetUrlWithQueryString_: function(baseUrl, queryString) {\n    return new goog.Uri(baseUrl)\n        .setQuery(goog.string.urlEncode(queryString), true)\n        .toString();\n  },\n\n  /**\n   * @override\n   */\n  handleShortUrlResponseInternal_: function(dom) {\n    gws.images.share.WebShareController.base(\n        this, \x27handleShortUrlResponseInternal_\x27, dom);\n    this.updateLogging_(dom);\n    this.updateState_(true);\n  },\n\n\n  /**\n   * @override\n   */\n  handleShortUrlFailure_: function() {\n    this.updateState_(true);\n  },\n\n\n  /**\n   * @param {?Element} dom Element with logging config to be load, or null\n   *     to clear logging.\n   */\n  updateLogging_: function(dom) {\n    goog.array.forEach(this.loggedElements_, function(el) {\n      goog.dom.dataset.set(el, \x27ved\x27, \x27\x27);\n    });\n    this.loggedElements_ \x3d [];\n\n    if (dom) {\n      goog.array.forEach(goog.dom.getChildren(dom), function(el) {\n        const veClass \x3d el.id;\n        if (veClass \x26\x26 veClass.match(/^i[0-9]+$/)) {\n          goog.array.forEach(\n              goog.dom.getElementsByClass(veClass, this.dom_.getRoot()),\n              function(loggedElement) {\n                goog.dom.dataset.set(\n                    loggedElement, \x27ved\x27, veUtil.getVedFromElement(el));\n              },\n              this);\n        }\n      }, this);\n    }\n  },\n\n\n  /**\n   * Open the Twitter sharing page.\n   * @param {!jsaction.ActionFlow} actionFlow\n   */\n  onTwitterLinkClick: function(actionFlow) {\n    const targetUrl \x3d this.buildTargetUrlWithQueryData_(\n        gws.images.share.WebShareController.TWITTER_SHARE_ENDPOINT,\n        {\x27url\x27: this.getShareUrl()});\n    this.shareAction_(actionFlow, targetUrl, true /* newWindow */);\n  },\n\n\n  /**\n   * Open the Twitter sharing page.\n   * @param {!jsaction.ActionFlow} actionFlow\n   */\n  onWhatsAppLinkClick: function(actionFlow) {\n    const targetUrl \x3d this.buildTargetUrlWithQueryData_(\n        gws.images.share.WebShareController.WHATSAPP_SHARE_ENDPOINT,\n        {\x27text\x27: this.getShareUrl()});\n    this.shareAction_(actionFlow, targetUrl, true /* newWindow */);\n  },\n\n\n  /**\n   * Open the Facebook sharing page.\n   * @param {!jsaction.ActionFlow} actionFlow\n   */\n  onFacebookLinkClick: function(actionFlow) {\n    const targetUrl \x3d this.buildTargetUrlWithQueryData_(\n        gws.images.share.WebShareController.FACEBOOK_SHARE_ENDPOINT,\n        {\x27u\x27: this.getShareUrl()});\n    this.shareAction_(actionFlow, targetUrl, true /* newWindow */);\n  },\n\n\n  /**\n   * Open the Google+ sharing page.\n   * @param {!jsaction.ActionFlow} actionFlow\n   */\n  onGplusLinkClick: function(actionFlow) {\n    const targetUrl \x3d this.buildTargetUrlWithQueryData_(\n        gws.images.share.WebShareController.GPLUS_SHARE_ENDPOINT,\n        {\x27url\x27: this.getShareUrl(), \x27authuser\x27: google.authuser});\n    this.shareAction_(actionFlow, targetUrl, true /* newWindow */);\n  },\n\n  /**\n   * Open the Line sharing page.\n   * @param {!jsaction.ActionFlow} actionFlow\n   */\n  onLineLinkClick: function(actionFlow) {\n    const targetUrl \x3d this.buildTargetUrlWithQueryString_(\n        gws.images.share.WebShareController.LINE_SHARE_ENDPOINT,\n        this.getShareUrl());\n    this.shareAction_(actionFlow, targetUrl, true /*newWindow*/);\n  },\n\n\n  /**\n   * Composes an email.\n   * @param {!jsaction.ActionFlow} actionFlow\n   */\n  onEmailLinkClick: function(actionFlow) {\n    let subject, body;\n\n    if (config.proto.getShareEmailCopyrightMessageEnabled()) {\n      const resultInfo \x3d this.image_.getResultInfo();\n      const hostDomain \x3d new goog.Uri(resultInfo.getReferrerUrl()).getDomain();\n      const pageTitle \x3d resultInfo.getPageTitle();\n\n      /**\n       * @desc Subject line of the email generated by the share button, which\n       *   indicates that the image was found via Google Images on an external\n       *   website.\n       */\n      const MSG_SUBJECT_COPYRIGHT \x3d goog.getMsg(\n          \x27I found this on Google Images from {$hostWebsiteDomain}\x27,\n          {\x27hostWebsiteDomain\x27: hostDomain});\n\n      subject \x3d MSG_SUBJECT_COPYRIGHT;\n      body \x3d goog.string.buildString(\n          pageTitle, \x27\\n\x27, this.getShareUrl(), \x27\\n\\n\x27,\n          gws.images.share.WebShareController.MSG_MAILTO_FOOTER_COPYRIGHT);\n    } else {\n      subject \x3d gws.images.share.WebShareController.MSG_MAILTO_SUBJECT;\n      body \x3d this.getShareUrl();\n    }\n\n    const targetUrl \x3d this.buildTargetUrlWithQueryData_(\n        gws.images.share.WebShareController.MAILTO,\n        {\x27body\x27: body, \x27subject\x27: subject});\n    this.shareAction_(actionFlow, targetUrl, !config.isMobile /* newWindow */);\n  },\n\n\n  /**\n   * Copy the URL to clipboard if supported and log the click on the URL anchor.\n   * Existence of this jsaction also prevents default (link doesn\x27t function as\n   * link).\n   * @param {!jsaction.ActionFlow} actionFlow\n   */\n  onAnchorClick: function(actionFlow) {\n    this.copyShareUrlToClipboard();\n    this.fetchShortUrlPromise_.then(goog.partial(\n        search.log.ve.interaction.logInteraction,\n        goog.asserts.assertElement(actionFlow.event().target)));\n  },\n\n  /**\n   * Copy the URL to clipboard if supported and log the click on the URL input.\n   */\n  onInputClick: function(actionFlow) {\n    this.copyShareUrlToClipboard();\n    const urlInput \x3d this.dom_.getShareUrlInput();\n    if (urlInput) {\n      urlInput.select();\n      urlInput.focus();\n      search.log.ve.interaction.logInteraction(urlInput);\n    }\n  },\n\n\n  /**\n   * Copy the share URL to the clipboard if supported by the browser.\n   * The shadow DOM element is used for reliable cross-browser behavior.\n   * @private\n   */\n  copyShareUrlToClipboard: function() {\n    if (!this.copySupported_) {\n      return;\n    }\n    const shareUrlShadow \x3d this.dom_.getShareUrlShadow();\n    goog.dom.setTextContent(shareUrlShadow, this.getShareUrl());\n    const shadowRange \x3d document.createRange();\n    shadowRange.selectNodeContents(shareUrlShadow);\n    window.getSelection().removeAllRanges();\n    window.getSelection().addRange(shadowRange);\n    if (document.execCommand(\x27copy\x27, true, null)) {\n      goog.style.setElementShown(\n          this.dom_.getShareUrlCopySupportedHint(), false);\n      goog.style.setElementShown(this.dom_.getShareUrlCopyConfirmation(), true);\n    }\n  },\n\n\n  /**\n   * @override\n   */\n  setActiveImage: function(image) {\n    gws.images.share.WebShareController.base(this, \x27setActiveImage\x27, image);\n    this.updateLogging_(null);\n  },\n\n\n  /**\n   * Update the state of the share dialog with the current text and links.\n   * @param {boolean} showLongUrl Whether to display the long URL in the\n   *     dialog if the short URL is not yet available.\n   */\n  updateState_: function(showLongUrl) {\n    // Update the href, text, and visibility of the \x27Copy URL\x27 link.\n    const shareUrl \x3d this.getShareUrl();\n    let displayUrlText \x3d this.getShortUrl();\n    // Only allow the long url if showLongUrl is true.\n    if (!displayUrlText \x26\x26 showLongUrl) {\n      displayUrlText \x3d this.getLongUrl();\n    }\n\n    const urlAnchor \x3d this.dom_.getShareUrlAnchor();\n    if (urlAnchor) {\n      urlAnchor.href \x3d shareUrl;\n      goog.dom.setTextContent(urlAnchor, displayUrlText || \x27\x27);\n    } else {\n      const urlInput \x3d this.dom_.getShareUrlInput();\n      if (urlInput) {\n        urlInput.value \x3d shareUrl;\n      }\n    }\n    goog.style.setStyle(\n        this.dom_.getShareUrlSection(), \x27visibility\x27,\n        displayUrlText ? \x27\x27 : \x27hidden\x27);\n\n    // Update the visibility of the copy confirmation text.\n    goog.style.setElementShown(this.dom_.getShareUrlCopyConfirmation(), false);\n    goog.style.setElementShown(\n        this.dom_.getShareUrlCopySupportedHint(), this.copySupported_);\n    goog.style.setElementShown(\n        this.dom_.getShareUrlCopyUnsupportedHint(), !this.copySupported_);\n  }\n});\n\n});  // goog.scope\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/images/share_controller.js\n");

$googDebugFname=undefined;

/** @suppress {missingRequire} */ /** @suppress {missingRequire} */
goog.module.ModuleManager.getInstance().setLoaded('syow');
/** @suppress {missingRequire} */
goog.module.ModuleManager.getInstance().afterLoadModuleCode('syow');

}catch(e){_DumpException(e)}
/* _Module_:ish */
try{
/** @suppress {missingRequire} */ goog.module.ModuleManager.getInstance().beforeLoadModuleCode('ish');
var $googDebugFname="jar:file:java/com/google/gws/plugins/images/jslayout/share_html_pinto.jslayout.js.zip!/gws.images.share.container.AgsaShareControllerTemplate.jslayout.js";
eval("// -*- mode: js -*-\n/**\n * @fileoverview Generated code, do not modify.\n * Generated from java/com/google/gws/plugins/images/jslayout/share.html.\n * Generated by template/prototemplate/jslayout/codegeneration/api_js.tpl.\n *\n * @suppress {uselessCode|transitionalSuspiciousCodeWarnings|extraRequire|missingRequire}\n */\n\n// Below are flags and original source file used to generate this\n// file. Used by ModuleSetsServer to provide edit/refresh for\n// jslayout_js() rules. Omitted in codegeneration/example; cf.\n// example_update.sh.\n/* [[BUILD_ARGS]]\nsource_file: \x22java/com/google/gws/plugins/images/jslayout/share.html\x22\nbuilder_arg: \x22java/com/google/gws/plugins/images/jslayout/share.html\x22\nbuilder_arg: \x22--artifacts\x22\nbuilder_arg: \x22w,desc_pool,xmb\x22\nbuilder_arg: \x22--gendir\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles\x22\nbuilder_arg: \x22--template_root\x22\nbuilder_arg: \x22,blaze-out/k8-opt/bin\x22\nbuilder_arg: \x22--output_directory\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles\x22\nbuilder_arg: \x22--xtb_basedir\x22\nbuilder_arg: \x22googledata/transconsole/xtb\x22\nbuilder_arg: \x22--mode\x22\nbuilder_arg: \x22single\x22\nbuilder_arg: \x22--stderrthreshold\x3d1\x22\nbuilder_arg: \x22--xmb_output_file_suffix\x22\nbuilder_arg: \x22.gws\x22\nbuilder_arg: \x22--strict_mode\x22\nbuilder_arg: \x22--use_attribute_whitelist\x22\nbuilder_arg: \x22--jscontroller_type\x3dreactive\x22\nbuilder_arg: \x22--parser_config\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles/googledata/gws/jslayout/parser_config_safe_sanitized\x22\nbuilder_arg: \x22--tc_project\x3dgws\x22\nbuilder_arg: \x22--expflags_files\x3dblaze-out/k8-opt/genfiles/googledata/gws/experiments/mendel/gws/features/cards_images_mendel_jslayout_interface.expflags,blaze-out/k8-opt/genfiles/googledata/gws/experiments/mendel/gws/features/quantum_colors_mendel_jslayout_interface.expflags,blaze-out/k8-opt/genfiles/googledata/gws/experiments/mendel/gws/features/ux_mendel_jslayout_interface.expflags,blaze-out/k8-opt/genfiles/googledata/gws/experiments/mendel/gws/features/images/action_bar_mendel_jslayout_interface.expflags,blaze-out/k8-opt/genfiles/googledata/gws/experiments/mendel/gws/features/images/viewer_mendel_jslayout_interface.expflags\x22\nbuilder_arg: \x22--source_base_dirs\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles\x22\nrenderer_arg: \x22blaze-out/host/bin/template/prototemplate/jslayout/renderer\x22\nrenderer_arg: \x22--input_root\x3dblaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles\x22\nrenderer_arg: \x22--input\x3dblaze-out/k8-opt/genfiles/java/com/google/gws/plugins/images/jslayout/share.html.w\x22\nrenderer_arg: \x22--js_output\x3dblaze-out/k8-opt/bin/java/com/google/gws/plugins/images/jslayout/share_html_pinto.jslayout.js.zip\x22\nrenderer_arg: \x22--js_wrapper\x22\nrenderer_arg: \x22--entrypoint\x3dtrue\x22\nrenderer_arg: \x22--generate_only_browserside_template\x22\nrenderer_arg: \x22--generate_controller_only\x22\nrenderer_arg: \x22--generate_separate_files_per_template\x22\nrenderer_arg: \x22--use_apps_jspb\x22\nrenderer_arg: \x22--use_reactive\x22\n[[/BUILD_ARGS]] */\n\ngoog.provide(\x27gws.images.share.container.AgsaShareControllerTemplate\x27);\n\n\n// Forward declaration for JSPB and IDL classes/interfaces.\ngoog.forwardDeclare(\x27jslayout.TemplatePool\x27);\n\n// Reactive and IDL jscontroller classes,\n// IDL classes with static method invocations, enum types,\n// imports used by certain expression language features,\n// reactive and IDL jscontroller JSPB protos,\n// Soy templates used via soyTemplate() built-in.\ngoog.require(\x27gws.images.share.AgsaShareController\x27);\ngoog.require(\x27jslayout.EvalContext\x27);\ngoog.require(\x27jslayout.reactive.framework\x27);\n\n\n\n\n// Controller registration code generated by:\n// template/prototemplate/jslayout/javascript/controller_registration_js.tpl\n\n\n/**\n * @param {!jslayout.reactive.ControllerPool} pool\n */\ngws.images.share.container.AgsaShareControllerTemplate.registerController \x3d function(pool) {\n  pool.registerController(\n      \x27t-Dre-NZH2XuA\x27, gws.images.share.AgsaShareController, null,\n      null,\n      function(tempObj, model, dom) {\n        gws.images.share.AgsaShareController.call(\n            /** @type {gws.images.share.AgsaShareController} */(tempObj));\n      },\n      \x27gws.images.share.AgsaShareController\x27);\n};\n\n\n// Auto controller/template registration for reactive templates generated by:\n// template/prototemplate/jslayout/javascript/controller_registration_js.tpl\njslayout.reactive.framework.registerController(\n    gws.images.share.container.AgsaShareControllerTemplate.registerController);\n\n\n//# sourceURL\x3dhttps://qs/jar:file:java/com/google/gws/plugins/images/jslayout/share_html_pinto.jslayout.js.zip!/gws.images.share.container.AgsaShareControllerTemplate.jslayout.js\n");

$googDebugFname=undefined;
var $googDebugFname="java/com/google/gws/plugins/images/jslayout/share_html_pinto.model_dom.jslayout.js";
eval("/**\n * @fileoverview Generated code, do not modify.\n * Generated from java/com/google/gws/plugins/images/jslayout/share.html.\n * Generated by template/prototemplate/jslayout/codegeneration/gen_model_dom_js.tpl.\n *\n * @suppress {extraRequire}\n */\n\ngoog.provide(\x27gws.images.share.container.WebShareControllerDom\x27);\n\n\n\n\n\ngoog.require(\x27jslayout.reactive.JsnameDomBase\x27);\ngoog.forwardDeclare(\x27goog.Promise\x27);\n\n\n\n// Controller Model, Dom class code generated by:\n// template/prototemplate/jslayout/javascript/controller_model_dom_js.tpl\n\n\n/**\n * @param {!Object} controller\n * @constructor\n * @extends {jslayout.reactive.JsnameDomBase}\n */\ngws.images.share.container.WebShareControllerDom \x3d\n    function(controller) {\n  gws.images.share.container.WebShareControllerDom.base(this, \x27constructor\x27, controller);\n};\ngoog.inherits(gws.images.share.container.WebShareControllerDom, jslayout.reactive.JsnameDomBase);\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22close_button\x22.\n */\ngws.images.share.container.WebShareControllerDom.prototype.getCloseButton \x3d function() {\n  return this.queryForMember(\x27tB4CkhL0Pws\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22facebook_share_link\x22.\n */\ngws.images.share.container.WebShareControllerDom.prototype.getFacebookShareLink \x3d function() {\n  return this.queryForMember(\x27_p8dA32EcDY\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22whats_app_share_link\x22.\n */\ngws.images.share.container.WebShareControllerDom.prototype.getWhatsAppShareLink \x3d function() {\n  return this.queryForMember(\x27kDp8awy0JGo\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22twitter_share_link\x22.\n */\ngws.images.share.container.WebShareControllerDom.prototype.getTwitterShareLink \x3d function() {\n  return this.queryForMember(\x27OL1tvwLQG94\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22gplus_share_link\x22.\n */\ngws.images.share.container.WebShareControllerDom.prototype.getGplusShareLink \x3d function() {\n  return this.queryForMember(\x2759QMr6ft28U\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22line_share_link\x22.\n */\ngws.images.share.container.WebShareControllerDom.prototype.getLineShareLink \x3d function() {\n  return this.queryForMember(\x27LOSrkEG7Aw8\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22email_share_link\x22.\n */\ngws.images.share.container.WebShareControllerDom.prototype.getEmailShareLink \x3d function() {\n  return this.queryForMember(\x27KOsxpyPW0RE\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22share_url_section\x22.\n */\ngws.images.share.container.WebShareControllerDom.prototype.getShareUrlSection \x3d function() {\n  return this.queryForMember(\x27qhp6y5LgQRg\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22share_url_copy_hint\x22.\n */\ngws.images.share.container.WebShareControllerDom.prototype.getShareUrlCopyHint \x3d function() {\n  return this.queryForMember(\x27p2JHyniQDhM\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22share_url_copy_supported_hint\x22.\n */\ngws.images.share.container.WebShareControllerDom.prototype.getShareUrlCopySupportedHint \x3d function() {\n  return this.queryForMember(\x27K9A5rUUabyY\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22share_url_copy_unsupported_hint\x22.\n */\ngws.images.share.container.WebShareControllerDom.prototype.getShareUrlCopyUnsupportedHint \x3d function() {\n  return this.queryForMember(\x27NBn6beZVvl0\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22share_url_copy_confirmation\x22.\n */\ngws.images.share.container.WebShareControllerDom.prototype.getShareUrlCopyConfirmation \x3d function() {\n  return this.queryForMember(\x27L5eBHaSmL84\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22share_url_anchor\x22.\n */\ngws.images.share.container.WebShareControllerDom.prototype.getShareUrlAnchor \x3d function() {\n  return this.queryForMember(\x27DCw8YHADtYY\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22share_url_shadow\x22.\n */\ngws.images.share.container.WebShareControllerDom.prototype.getShareUrlShadow \x3d function() {\n  return this.queryForMember(\x27JtrpqFxwsX4\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22share_url_input\x22.\n */\ngws.images.share.container.WebShareControllerDom.prototype.getShareUrlInput \x3d function() {\n  return this.queryForMember(\x27eahz_wQSGl4\x27);\n};\n\n\n//# sourceURL\x3dhttps://qs/java/com/google/gws/plugins/images/jslayout/share_html_pinto.model_dom.jslayout.js\n");

$googDebugFname=undefined;
var $googDebugFname="jar:file:java/com/google/gws/plugins/images/jslayout/share_html_pinto.jslayout.js.zip!/gws.images.share.container.WebShareControllerTemplate.jslayout.js";
eval("// -*- mode: js -*-\n/**\n * @fileoverview Generated code, do not modify.\n * Generated from java/com/google/gws/plugins/images/jslayout/share.html.\n * Generated by template/prototemplate/jslayout/codegeneration/api_js.tpl.\n *\n * @suppress {uselessCode|transitionalSuspiciousCodeWarnings|extraRequire|missingRequire}\n */\n\n// Below are flags and original source file used to generate this\n// file. Used by ModuleSetsServer to provide edit/refresh for\n// jslayout_js() rules. Omitted in codegeneration/example; cf.\n// example_update.sh.\n/* [[BUILD_ARGS]]\nsource_file: \x22java/com/google/gws/plugins/images/jslayout/share.html\x22\nbuilder_arg: \x22java/com/google/gws/plugins/images/jslayout/share.html\x22\nbuilder_arg: \x22--artifacts\x22\nbuilder_arg: \x22w,desc_pool,xmb\x22\nbuilder_arg: \x22--gendir\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles\x22\nbuilder_arg: \x22--template_root\x22\nbuilder_arg: \x22,blaze-out/k8-opt/bin\x22\nbuilder_arg: \x22--output_directory\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles\x22\nbuilder_arg: \x22--xtb_basedir\x22\nbuilder_arg: \x22googledata/transconsole/xtb\x22\nbuilder_arg: \x22--mode\x22\nbuilder_arg: \x22single\x22\nbuilder_arg: \x22--stderrthreshold\x3d1\x22\nbuilder_arg: \x22--xmb_output_file_suffix\x22\nbuilder_arg: \x22.gws\x22\nbuilder_arg: \x22--strict_mode\x22\nbuilder_arg: \x22--use_attribute_whitelist\x22\nbuilder_arg: \x22--jscontroller_type\x3dreactive\x22\nbuilder_arg: \x22--parser_config\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles/googledata/gws/jslayout/parser_config_safe_sanitized\x22\nbuilder_arg: \x22--tc_project\x3dgws\x22\nbuilder_arg: \x22--expflags_files\x3dblaze-out/k8-opt/genfiles/googledata/gws/experiments/mendel/gws/features/cards_images_mendel_jslayout_interface.expflags,blaze-out/k8-opt/genfiles/googledata/gws/experiments/mendel/gws/features/quantum_colors_mendel_jslayout_interface.expflags,blaze-out/k8-opt/genfiles/googledata/gws/experiments/mendel/gws/features/ux_mendel_jslayout_interface.expflags,blaze-out/k8-opt/genfiles/googledata/gws/experiments/mendel/gws/features/images/action_bar_mendel_jslayout_interface.expflags,blaze-out/k8-opt/genfiles/googledata/gws/experiments/mendel/gws/features/images/viewer_mendel_jslayout_interface.expflags\x22\nbuilder_arg: \x22--source_base_dirs\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles\x22\nrenderer_arg: \x22blaze-out/host/bin/template/prototemplate/jslayout/renderer\x22\nrenderer_arg: \x22--input_root\x3dblaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles\x22\nrenderer_arg: \x22--input\x3dblaze-out/k8-opt/genfiles/java/com/google/gws/plugins/images/jslayout/share.html.w\x22\nrenderer_arg: \x22--js_output\x3dblaze-out/k8-opt/bin/java/com/google/gws/plugins/images/jslayout/share_html_pinto.jslayout.js.zip\x22\nrenderer_arg: \x22--js_wrapper\x22\nrenderer_arg: \x22--entrypoint\x3dtrue\x22\nrenderer_arg: \x22--generate_only_browserside_template\x22\nrenderer_arg: \x22--generate_controller_only\x22\nrenderer_arg: \x22--generate_separate_files_per_template\x22\nrenderer_arg: \x22--use_apps_jspb\x22\nrenderer_arg: \x22--use_reactive\x22\n[[/BUILD_ARGS]] */\n\ngoog.provide(\x27gws.images.share.container.WebShareControllerTemplate\x27);\n\n\n\n\n// Reactive and IDL jscontroller classes,\n// IDL classes with static method invocations, enum types,\n// imports used by certain expression language features,\n// reactive and IDL jscontroller JSPB protos,\n// Soy templates used via soyTemplate() built-in.\ngoog.require(\x27gws.images.share.WebShareController\x27);\ngoog.require(\x27gws.images.share.container.WebShareControllerDom\x27);\ngoog.require(\x27jsaction.ActionFlow\x27);\ngoog.require(\x27jslayout.reactive.framework\x27);\n\n\n\n\n// Controller registration code generated by:\n// template/prototemplate/jslayout/javascript/controller_registration_js.tpl\n\n\n/**\n * @param {!jslayout.reactive.ControllerPool} pool\n */\ngws.images.share.container.WebShareControllerTemplate.registerController \x3d function(pool) {\n  pool.registerController(\n      \x27t-RHI35lUscno\x27, gws.images.share.WebShareController, null,\n      gws.images.share.container.WebShareControllerDom,\n      function(tempObj, model, dom) {\n        gws.images.share.WebShareController.call(\n            /** @type {gws.images.share.WebShareController} */(tempObj), /** @type {!gws.images.share.container.WebShareControllerDom} */ (dom));\n      },\n      \x27gws.images.share.WebShareController\x27);\n  pool.registerAction(\n      \x27bgECufFpVcI\x27,\n      /**\n       * @param {!gws.images.share.WebShareController} controller\n       * @param {!jsaction.ActionFlow} actionFlow\n       * @param {!jslayout.EvalContext} evalContext\n       */\n      function(controller, actionFlow, evalContext) {\n        controller.onFacebookLinkClick(\n            actionFlow);\n      });\n  pool.registerAction(\n      \x27wTdKeEElHMg\x27,\n      /**\n       * @param {!gws.images.share.WebShareController} controller\n       * @param {!jsaction.ActionFlow} actionFlow\n       * @param {!jslayout.EvalContext} evalContext\n       */\n      function(controller, actionFlow, evalContext) {\n        controller.onWhatsAppLinkClick(\n            actionFlow);\n      });\n  pool.registerAction(\n      \x27C0LRfe2h3SM\x27,\n      /**\n       * @param {!gws.images.share.WebShareController} controller\n       * @param {!jsaction.ActionFlow} actionFlow\n       * @param {!jslayout.EvalContext} evalContext\n       */\n      function(controller, actionFlow, evalContext) {\n        controller.onTwitterLinkClick(\n            actionFlow);\n      });\n  pool.registerAction(\n      \x27nrQXXakJHXk\x27,\n      /**\n       * @param {!gws.images.share.WebShareController} controller\n       * @param {!jsaction.ActionFlow} actionFlow\n       * @param {!jslayout.EvalContext} evalContext\n       */\n      function(controller, actionFlow, evalContext) {\n        controller.onGplusLinkClick(\n            actionFlow);\n      });\n  pool.registerAction(\n      \x27rtJj_ppcFdw\x27,\n      /**\n       * @param {!gws.images.share.WebShareController} controller\n       * @param {!jsaction.ActionFlow} actionFlow\n       * @param {!jslayout.EvalContext} evalContext\n       */\n      function(controller, actionFlow, evalContext) {\n        controller.onLineLinkClick(\n            actionFlow);\n      });\n  pool.registerAction(\n      \x27ELvIItyrQI0\x27,\n      /**\n       * @param {!gws.images.share.WebShareController} controller\n       * @param {!jsaction.ActionFlow} actionFlow\n       * @param {!jslayout.EvalContext} evalContext\n       */\n      function(controller, actionFlow, evalContext) {\n        controller.onEmailLinkClick(\n            actionFlow);\n      });\n  pool.registerAction(\n      \x27PJK1Rwylmls\x27,\n      /**\n       * @param {!gws.images.share.WebShareController} controller\n       * @param {!jsaction.ActionFlow} actionFlow\n       * @param {!jslayout.EvalContext} evalContext\n       */\n      function(controller, actionFlow, evalContext) {\n        controller.onAnchorClick(\n            actionFlow);\n      });\n  pool.registerAction(\n      \x27PJK1Rwylmls\x27,\n      /**\n       * @param {!gws.images.share.WebShareController} controller\n       * @param {!jsaction.ActionFlow} actionFlow\n       * @param {!jslayout.EvalContext} evalContext\n       */\n      function(controller, actionFlow, evalContext) {\n        controller.onAnchorClick(\n            actionFlow);\n      });\n  pool.registerAction(\n      \x27PJK1Rwylmls\x27,\n      /**\n       * @param {!gws.images.share.WebShareController} controller\n       * @param {!jsaction.ActionFlow} actionFlow\n       * @param {!jslayout.EvalContext} evalContext\n       */\n      function(controller, actionFlow, evalContext) {\n        controller.onAnchorClick(\n            actionFlow);\n      });\n  pool.registerAction(\n      \x27azmHARs0j18\x27,\n      /**\n       * @param {!gws.images.share.WebShareController} controller\n       * @param {!jsaction.ActionFlow} actionFlow\n       * @param {!jslayout.EvalContext} evalContext\n       */\n      function(controller, actionFlow, evalContext) {\n        controller.onInputClick(\n            actionFlow);\n      });\n};\n\n\n// Auto controller/template registration for reactive templates generated by:\n// template/prototemplate/jslayout/javascript/controller_registration_js.tpl\njslayout.reactive.framework.registerController(\n    gws.images.share.container.WebShareControllerTemplate.registerController);\n\n\n//# sourceURL\x3dhttps://qs/jar:file:java/com/google/gws/plugins/images/jslayout/share_html_pinto.jslayout.js.zip!/gws.images.share.container.WebShareControllerTemplate.jslayout.js\n");

$googDebugFname=undefined;


/** @suppress {missingRequire} */ /** @suppress {missingRequire} */
goog.module.ModuleManager.getInstance().setLoaded('ish');
/** @suppress {missingRequire} */
goog.module.ModuleManager.getInstance().afterLoadModuleCode('ish');

}catch(e){_DumpException(e)}
/* _Module_:ivw */
try{
/** @suppress {missingRequire} */ goog.module.ModuleManager.getInstance().beforeLoadModuleCode('ivw');
var $googDebugFname="googledata/html/templates/gws/head/xjs/plugins/images/viewer/viewer_image_controller.js";
eval("goog.provide(\x27gws.images.viewer.ViewerImageController\x27);\n\ngoog.forwardDeclare(\x27gws.images.viewer.ViewerImageDom\x27);\n\ngoog.scope(function() {\n\n/**\n * A stub controller that is gradually taking over the responsibility of linking\n * and rendereing the main viewer image from image_card_view.\n */\ngws.images.viewer.ViewerImageController \x3d goog.defineClass(null, {\n  /**\n   * @param {!gws.images.viewer.ViewerImageDom} dom\n   */\n  constructor: function(dom) {\n    /**\n     * The DOM of this template.\n     * @private {!gws.images.viewer.ViewerImageDom}\n     */\n    this.dom_ \x3d dom;\n\n    /**\n     * The full sized hotlinked image.\n     * @private {?HTMLImageElement}\n     */\n    this.hotlinkedImage_ \x3d null;\n  },\n\n\n  /**\n   * @return {?HTMLImageElement} The hotlinked image.\n   */\n  getHotlinkedImage: function() { return this.hotlinkedImage_; },\n\n\n  /**\n   * Sets the hotlinked image.\n   * @param {!HTMLImageElement} hotlinkedImage The hotlinked image.\n   */\n  setHotlinkedImage: function(hotlinkedImage) {\n    this.hotlinkedImage_ \x3d hotlinkedImage;\n  },\n\n\n  /**\n   * Sets the source of the hotlinked image.\n   * @param {string} src The source to set.\n   */\n  setHotlinkedImageSrc: function(src) { this.hotlinkedImage_.src \x3d src; },\n\n\n  /**\n   * Sets the given attributes on the hotlinked image.\n   * @param {!NamedNodeMap\x3c!Attr\x3e} attrs The attributes to set.\n   */\n  setHotlinkedImageAttrs: function(attrs) {\n    for (var i \x3d 0; i \x3c attrs.length; i++) {\n      var attr \x3d attrs[i];\n      if (attr.nodeName !\x3d \x27src\x27 \x26\x26 attr.nodeName !\x3d \x27class\x27) {\n        this.hotlinkedImage_.setAttribute(attr.nodeName, attr.nodeValue);\n      }\n    }\n  },\n\n\n  /**\n   * Removes the given attributes on the hotlinked image.\n   * @param {string} attr The attribute to remove.\n   */\n  removeHotlinkedImageAttr: function(attr) {\n    this.hotlinkedImage_.removeAttribute(attr);\n  },\n\n\n  /**\n   * Sets the onload method of the hotlinked image.\n   * @param {!Function} onLoad The onload method to set.\n   */\n  setHotlinkedImageOnLoad: function(onLoad) {\n    this.hotlinkedImage_.onload \x3d onLoad;\n  },\n\n\n  /**\n   * Sets the onerror method of the hotlinked image.\n   * @param {!Function} onError The onerror method to set.\n   */\n  setHotlinkedImageOnError: function(onError) {\n    this.hotlinkedImage_.onerror \x3d onError;\n  },\n\n\n  /**\n   * Resets the state of this image.\n   * @param {boolean\x3d} opt_dispose Whether the state is being reset from\n   *     dispose.\n   */\n  resetState: function(opt_dispose) {\n    if (this.hotlinkedImage_) {\n      this.hotlinkedImage_.onload \x3d null;\n      this.hotlinkedImage_.onerror \x3d null;\n\n      if (!opt_dispose) {\n        this.hotlinkedImage_.removeAttribute(\x27src\x27);\n        this.hotlinkedImage_.removeAttribute(\x27alt\x27);\n      }\n    }\n    this.hotlinkedImage_ \x3d null;\n  }\n});\n\n});\n\n//# sourceURL\x3dhttps://qs/googledata/html/templates/gws/head/xjs/plugins/images/viewer/viewer_image_controller.js\n");

$googDebugFname=undefined;
var $googDebugFname="java/com/google/gws/plugins/images/jslayout/viewer_card_html_pinto.model_dom.jslayout.js";
eval("/**\n * @fileoverview Generated code, do not modify.\n * Generated from java/com/google/gws/plugins/images/jslayout/viewer_card.html.\n * Generated by template/prototemplate/jslayout/codegeneration/gen_model_dom_js.tpl.\n *\n * @suppress {extraRequire}\n */\n\ngoog.provide(\x27gws.images.viewer.ViewerImageDom\x27);\n\n\n\n\n\ngoog.require(\x27jslayout.reactive.JsnameDomBase\x27);\ngoog.forwardDeclare(\x27goog.Promise\x27);\n\n\n\n// Controller Model, Dom class code generated by:\n// template/prototemplate/jslayout/javascript/controller_model_dom_js.tpl\n\n\n/**\n * @param {!Object} controller\n * @constructor\n * @extends {jslayout.reactive.JsnameDomBase}\n */\ngws.images.viewer.ViewerImageDom \x3d\n    function(controller) {\n  gws.images.viewer.ViewerImageDom.base(this, \x27constructor\x27, controller);\n};\ngoog.inherits(gws.images.viewer.ViewerImageDom, jslayout.reactive.JsnameDomBase);\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22main_image_cover\x22.\n */\ngws.images.viewer.ViewerImageDom.prototype.getMainImageCover \x3d function() {\n  return this.queryForMember(\x27zhGueifFAaU\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22action_bar_overlay\x22.\n */\ngws.images.viewer.ViewerImageDom.prototype.getActionBarOverlay \x3d function() {\n  return this.queryForMember(\x27e47A9cXDfVE\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22play_button_container\x22.\n */\ngws.images.viewer.ViewerImageDom.prototype.getPlayButtonContainer \x3d function() {\n  return this.queryForMember(\x27Qn9uQmvUunc\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22play_button_link\x22.\n */\ngws.images.viewer.ViewerImageDom.prototype.getPlayButtonLink \x3d function() {\n  return this.queryForMember(\x27ddXLlhDQwO8\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22main_image_iframe\x22.\n */\ngws.images.viewer.ViewerImageDom.prototype.getMainImageIframe \x3d function() {\n  return this.queryForMember(\x27lzNTGInN7QM\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22main_image_container\x22.\n */\ngws.images.viewer.ViewerImageDom.prototype.getMainImageContainer \x3d function() {\n  return this.queryForMember(\x27lvVgf-rIiHk\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22main_image_link\x22.\n */\ngws.images.viewer.ViewerImageDom.prototype.getMainImageLink \x3d function() {\n  return this.queryForMember(\x27zixyDjKkw5M\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22main_image\x22.\n */\ngws.images.viewer.ViewerImageDom.prototype.getMainImage \x3d function() {\n  return this.queryForMember(\x27pQOPx8XEepE\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22main_upscaled_thumbnail_container\x22.\n */\ngws.images.viewer.ViewerImageDom.prototype.getMainUpscaledThumbnailContainer \x3d function() {\n  return this.queryForMember(\x27s4mcypHTTek\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22main_upscaled_thumbnail_link\x22.\n */\ngws.images.viewer.ViewerImageDom.prototype.getMainUpscaledThumbnailLink \x3d function() {\n  return this.queryForMember(\x27dTEICwVRfZc\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22main_upscaled_thumbnail\x22.\n */\ngws.images.viewer.ViewerImageDom.prototype.getMainUpscaledThumbnail \x3d function() {\n  return this.queryForMember(\x27HwpH6ZlgJaI\x27);\n};\n\n\n/**\n * @return {Element} The DOM element produced from the template element with\n *     jsname\x3d\x22below_main_upscaled_thumbnail_container\x22.\n */\ngws.images.viewer.ViewerImageDom.prototype.getBelowMainUpscaledThumbnailContainer \x3d function() {\n  return this.queryForMember(\x27nMXrelXJwtg\x27);\n};\n\n\n//# sourceURL\x3dhttps://qs/java/com/google/gws/plugins/images/jslayout/viewer_card_html_pinto.model_dom.jslayout.js\n");

$googDebugFname=undefined;
var $googDebugFname="jar:file:java/com/google/gws/plugins/images/jslayout/viewer_card_html_pinto.jslayout.js.zip!/gws.images.viewer.ViewerImageTemplate.jslayout.js";
eval("// -*- mode: js -*-\n/**\n * @fileoverview Generated code, do not modify.\n * Generated from java/com/google/gws/plugins/images/jslayout/viewer_card.html.\n * Generated by template/prototemplate/jslayout/codegeneration/api_js.tpl.\n *\n * @suppress {uselessCode|transitionalSuspiciousCodeWarnings|extraRequire|missingRequire}\n */\n\n// Below are flags and original source file used to generate this\n// file. Used by ModuleSetsServer to provide edit/refresh for\n// jslayout_js() rules. Omitted in codegeneration/example; cf.\n// example_update.sh.\n/* [[BUILD_ARGS]]\nsource_file: \x22java/com/google/gws/plugins/images/jslayout/viewer_card.html\x22\nbuilder_arg: \x22java/com/google/gws/plugins/images/jslayout/viewer_card.html\x22\nbuilder_arg: \x22--artifacts\x22\nbuilder_arg: \x22w,desc_pool,xmb\x22\nbuilder_arg: \x22--gendir\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles\x22\nbuilder_arg: \x22--template_root\x22\nbuilder_arg: \x22,blaze-out/k8-opt/bin\x22\nbuilder_arg: \x22--output_directory\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles\x22\nbuilder_arg: \x22--xtb_basedir\x22\nbuilder_arg: \x22googledata/transconsole/xtb\x22\nbuilder_arg: \x22--mode\x22\nbuilder_arg: \x22single\x22\nbuilder_arg: \x22--stderrthreshold\x3d1\x22\nbuilder_arg: \x22--xmb_output_file_suffix\x22\nbuilder_arg: \x22.gws\x22\nbuilder_arg: \x22--strict_mode\x22\nbuilder_arg: \x22--use_attribute_whitelist\x22\nbuilder_arg: \x22--jscontroller_type\x3dreactive\x22\nbuilder_arg: \x22--parser_config\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles/googledata/gws/jslayout/parser_config_safe_sanitized\x22\nbuilder_arg: \x22--tc_project\x3dgws\x22\nbuilder_arg: \x22--expflags_files\x3dblaze-out/k8-opt/genfiles/googledata/gws/experiments/mendel/gws/features/quality_feedback_form_mendel_jslayout_interface.expflags,blaze-out/k8-opt/genfiles/googledata/gws/experiments/mendel/gws/features/images/action_bar_mendel_jslayout_interface.expflags,blaze-out/k8-opt/genfiles/googledata/gws/experiments/mendel/gws/features/images/image_search_mendel_jslayout_interface.expflags,blaze-out/k8-opt/genfiles/googledata/gws/experiments/mendel/gws/features/images/images_amp_mendel_jslayout_interface.expflags,blaze-out/k8-opt/genfiles/googledata/gws/experiments/mendel/gws/features/images/related_images_mendel_jslayout_interface.expflags,blaze-out/k8-opt/genfiles/googledata/gws/experiments/mendel/gws/features/images/similar_images_mendel_jslayout_interface.expflags,blaze-out/k8-opt/genfiles/googledata/gws/experiments/mendel/gws/features/images/stars_mendel_jslayout_interface.expflags,blaze-out/k8-opt/genfiles/googledata/gws/experiments/mendel/gws/features/images/viewer_mendel_jslayout_interface.expflags,blaze-out/k8-opt/genfiles/googledata/gws/experiments/mendel/gws/features/images/visual_metadata_mendel_jslayout_interface.expflags\x22\nbuilder_arg: \x22--source_base_dirs\x22\nbuilder_arg: \x22blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles\x22\nrenderer_arg: \x22blaze-out/host/bin/template/prototemplate/jslayout/renderer\x22\nrenderer_arg: \x22--input_root\x3dblaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles,blaze-out/k8-opt/genfiles\x22\nrenderer_arg: \x22--input\x3dblaze-out/k8-opt/genfiles/java/com/google/gws/plugins/images/jslayout/viewer_card.html.w\x22\nrenderer_arg: \x22--js_output\x3dblaze-out/k8-opt/bin/java/com/google/gws/plugins/images/jslayout/viewer_card_html_pinto.jslayout.js.zip\x22\nrenderer_arg: \x22--js_wrapper\x22\nrenderer_arg: \x22--entrypoint\x3dtrue\x22\nrenderer_arg: \x22--generate_only_browserside_template\x22\nrenderer_arg: \x22--generate_controller_only\x22\nrenderer_arg: \x22--generate_separate_files_per_template\x22\nrenderer_arg: \x22--use_apps_jspb\x22\nrenderer_arg: \x22--use_reactive\x22\n[[/BUILD_ARGS]] */\n\ngoog.provide(\x27gws.images.viewer.ViewerImageTemplate\x27);\n\n\n\n\n// Reactive and IDL jscontroller classes,\n// IDL classes with static method invocations, enum types,\n// imports used by certain expression language features,\n// reactive and IDL jscontroller JSPB protos,\n// Soy templates used via soyTemplate() built-in.\ngoog.require(\x27gws.images.viewer.ViewerImageController\x27);\ngoog.require(\x27gws.images.viewer.ViewerImageDom\x27);\ngoog.require(\x27jslayout.reactive.framework\x27);\n\n\n\n\n// Controller registration code generated by:\n// template/prototemplate/jslayout/javascript/controller_registration_js.tpl\n\n\n/**\n * @param {!jslayout.reactive.ControllerPool} pool\n */\ngws.images.viewer.ViewerImageTemplate.registerController \x3d function(pool) {\n  pool.registerController(\n      \x27t-mqWFpp0vPaI\x27, gws.images.viewer.ViewerImageController, null,\n      gws.images.viewer.ViewerImageDom,\n      function(tempObj, model, dom) {\n        gws.images.viewer.ViewerImageController.call(\n            /** @type {gws.images.viewer.ViewerImageController} */(tempObj), /** @type {!gws.images.viewer.ViewerImageDom} */ (dom));\n      },\n      \x27gws.images.viewer.ViewerImageController\x27);\n};\n\n\n// Auto controller/template registration for reactive templates generated by:\n// template/prototemplate/jslayout/javascript/controller_registration_js.tpl\njslayout.reactive.framework.registerController(\n    gws.images.viewer.ViewerImageTemplate.registerController);\n\n\n//# sourceURL\x3dhttps://qs/jar:file:java/com/google/gws/plugins/images/jslayout/viewer_card_html_pinto.jslayout.js.zip!/gws.images.viewer.ViewerImageTemplate.jslayout.js\n");

$googDebugFname=undefined;

/** @suppress {missingRequire} */ /** @suppress {missingRequire} */
goog.module.ModuleManager.getInstance().setLoaded('ivw');
/** @suppress {missingRequire} */
goog.module.ModuleManager.getInstance().afterLoadModuleCode('ivw');

}catch(e){_DumpException(e)}
/* _GlobalSuffix_ */
// Google Inc.
